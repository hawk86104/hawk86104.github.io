import{e,l as o,J as t}from"./@tresjs.C4A766dl1736129093919.js";import{cx as r}from"./three.ES53pcRR1736129093919.js";import{i as a,m as s,a as n,b as l,c as p,u as i,d as c,f as m}from"./mapShow.Pkk7Bq6b1736129093919.js";import{g as d}from"./gsap.BMhr3K_w1736129093919.js";import{Resource as u}from"./index.Ch9Ol1mh1736129093919.js";import{m as f}from"./d3-geo.YS2XtpFX1736129093919.js";import{b as h,q as y,w as g,o as S,D as T,J as x,F as b,V as C,u as v,I as w,f as z,j as N,g as j,H as M,m as k}from"./@vue.uQKhJ3x71736129093919.js";const O=["properties","pName"],B=["args"],G={key:0},I=["pName","position"],_=["position-z","scale","renderOrder"],L=["color","blending","map"],P={__name:"indexHtml",props:{lineColor:"#2bc4dc",topColor:"#f5f5f5",sideColor:"#00407c",iconColor:"#2bc4dc",fontColor:"#fff",fontSize:6,iconSize:.3,shadowColor:"#001c69",moveRoom:1.5,roughness:.8,metalness:.5,normalScale:6,geoJsonUrl:"",areaScale:{type:Number,default:10},centerCoordinates:{type:Array,default:[104,37.5]},showTextIcons:{type:Boolean,default:!0},hasMapTexture:{type:Boolean,default:!0},lineWidth:{type:Number,default:1}},setup(P){const E=P,J={wrapperClass:"wrapperDigitalMapBlockMapShow",as:"div",center:!0,sprite:!1,prepend:!1,transform:!0};a();const D=f().center(E.centerCoordinates).scale(E.areaScale).translate([0,0]),R=h({depth:.66,bevelEnabled:!0,bevelSegments:1,bevelThickness:.1}),W=R.value.depth+.11,q=JSON.parse(u.getItem("map.json")).features,{areaList:A,linesList:H,textList:F}=s(q,D),U=[n(E.roughness,E.metalness,E.normalScale),l(E.sideColor)];E.hasMapTexture||(U[0].map=null,U[0].normalMap=null);const{onLoop:V}=e();V((()=>{U[1].map.offset.y+=.002}));const X=h(null);y((()=>{let{boxSize:e,box3:o}=p(X.value.children[0]);X.value.children[0].children.map(((t,r)=>{"Mesh"===t.type&&(t.geometry.computeBoundsTree(),i(t.geometry,e.x,e.y,o.min.x,o.min.y))})),X.value.rotation.x=-Math.PI/2,setTimeout((()=>{Z(E.fontColor,E.shadowColor,E.fontSize)}),600)}));const K=(e,o)=>{let t=E.moveRoom,r=e.object;o||(r=e.eventObject,t=1);m(X.value,r.pName).map((e=>{"block"===e.pType&&d.to(e.scale,{duration:.3,z:t}),"line"===e.pType&&d.to(e.position,{duration:.3,z:W*t}),"text"===e.pType&&d.to(e.position,{duration:.3,z:W*t})}))},Q=e=>{K(e,!0),document.body.style.cursor="pointer",e.stopPropagation()},Y=e=>{K(e,!1),document.body.style.cursor="default"};g((()=>[E.topColor,E.sideColor,E.roughness,E.metalness,E.normalScale]),(([e,o,t,r,a])=>{U[0].color.set(e),U[1].color.set(o),U[0].roughness=t,U[0].metalness=r,U[0].normalScale.set(a,a)}),{immediate:!0});const Z=(e,o,t)=>{document.querySelectorAll(".wrapperDigitalMapBlockMapShow #inner span").forEach((r=>{r.style.color="".concat(e),r.style.textShadow="1px 1px 2px ".concat(o),r.style.fontSize="".concat(t,"px")}))};g((()=>[E.fontColor,E.shadowColor,E.fontSize]),(([e,o,t])=>{Z(e,o,t)}),{immediate:!0});const $=u.getItem("icon.png");return(e,a)=>(S(),T("TresGroup",{ref_key:"groupRef",ref:X},[x("TresGroup",null,[(S(!0),T(b,null,C(v(A),((e,o)=>(S(),T("TresMesh",{key:"".concat(o),properties:e.properties,renderOrder:1,material:U,pName:e.pName,pType:"block",onPointerEnter:Q,onPointerLeave:Y},[x("TresExtrudeGeometry",{args:[e.shape,R.value]},null,8,B)],40,O)))),128))]),x("TresGroup",null,[(S(!0),T(b,null,C(v(H),((e,t)=>(S(),z(v(o),{key:"".concat(t),renderOrder:t+1e4,pName:e.pName,"position-z":W,pType:"line",points:v(c)(e.points),"line-width":P.lineWidth,color:P.lineColor},null,8,["renderOrder","pName","points","line-width","color"])))),128))]),P.showTextIcons?(S(),T("TresGroup",G,[(S(!0),T(b,null,C(v(F),((e,o)=>(S(),T("TresGroup",{key:"".concat(o),pName:e.pName,pType:"text",position:[e.position[0],e.position[1],W]},[N(v(t),k({ref_for:!0},J),{default:j((()=>[x("span",null,M(e.pName),1)])),_:2},1040),x("TresSprite",{"position-z":P.iconSize,scale:P.iconSize,renderOrder:o+11e3},[x("TresSpriteMaterial",{color:P.iconColor,blending:r,map:v($),transparent:"",depthWrite:!1,depthTest:""},null,8,L)],8,_)],8,I)))),128))])):w("",!0)],512))}};export{P as _};
