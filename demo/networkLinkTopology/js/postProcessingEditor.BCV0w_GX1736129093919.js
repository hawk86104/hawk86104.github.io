import{m as t,a as n,e,U as o}from"./@tresjs.C4A766dl1736129093919.js";import{_ as r,Y as a,as as s,d0 as i,q as c,s as l,n as u,aW as v,W as f,cI as p}from"./three.ES53pcRR1736129093919.js";import{P as d}from"./tweakpane.BCjFYDHx1736129093919.js";import{d as m,a6 as g,e as x,o as h,f as y,g as I,J as b,j as _,u as S,aj as U,ak as w,al as P,m as D}from"./@vue.uQKhJ3x71736129093919.js";import{_ as E}from"./@fesjs.C11Gf8kF1736129093919.js";import"./@vueuse.CaPKQ7tQ1736129093919.js";import"./vue-router.Pr1g0CvG1736129093919.js";import"./lodash-es.Dw4PEFNU1736129093919.js";import"./@qlin.BIlp8Yi21736129093919.js";import"./pinia.CtRHBYHM1736129093919.js";import"./vue-demi.Dq6ymT-81736129093919.js";import"./@babel.BBWsvBIa1736129093919.js";import"./@floating-ui.B75jtkXD1736129093919.js";import"./@juggle.BnTvdTVm1736129093919.js";!function(t,n){const e=L,o=M();for(;;)try{if(954967===parseInt(e(333))/1+-parseInt(e(330))/2+-parseInt(e(345))/3+parseInt(e(347))/4*(-parseInt(e(346))/5)+parseInt(e(359))/6*(parseInt(e(329))/7)+-parseInt(e(335))/8+parseInt(e(351))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(327)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function M(){const t=["hasOwnProperty","__proto__","stateObject","trace","input",'Shader "',"call","apply","message","497WRKOrg","2242578AihCyN","WagnerLoadShaderException","bind","1555316DvPmYd","Matrix3","13140504BwmOmy","Vector3","replace","info","return (function() ",'" load was aborted.',"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","exception","warn","test","1918578lNhpTN","10KpQswV","1594436mAdPgU","v3v","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","Matrix4","32353659rQeeaA","ShaderMaterial","init","console","type","gger","table","get","456BgoAsN","Vector4","counter","error","debu","while (true) {}","constructor","open","lastIndex","string","length","onabort","Texture","log","index","Vector2","exec","\" couldn't be loaded.","toString","onload","prototype"];return(M=function(){return t})()}function L(t,n){const e=M();return(L=function(t,n){return e[t-=307]})(t,n)}!function(){A(this,(function(){const t=L,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(349),"i"),o=z(t(353));n[t(344)](o+"chain")&&e[t(344)](o+t(324))?z():o("0")}))()}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(327)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();C(void 0,(function(){const t=L;let n;try{n=Function(t(339)+'{}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(354)]=n[t(354)]||{},o=[t(312),t(343),t(338),t(362),t(342),t(357),t(323)];for(let a=0;a<o[t(309)];a++){const n=C.constructor[t(319)].bind(C),r=o[a],s=e[r]||n;n[t(321)]=C[t(332)](C),n[t(317)]=s.toString.bind(s),e[r]=n}}))();function F(t,n,e){const o=L;if("object"!=typeof t||null===t)return t;const r=Array.isArray(t)?[]:{};for(const a in t)t[o(320)](a)&&(r[a]=F(t[a])),a==n&&(r[n]=e);return r}function z(t){function n(t){const e=L;if(typeof t===e(308))return function(t){}[e(365)](e(364))[e(327)](e(361));1!==(""+t/t)[e(309)]||t%20==0?function(){return!0}[e(365)](e(363)+e(356))[e(326)]("action"):function(){return!1}[e(365)](e(363)+e(356)).apply(e(322)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const N=G;!function(t,n){const e=G,o=R();for(;;)try{if(861340===-parseInt(e(352))/1+-parseInt(e(348))/2*(parseInt(e(350))/3)+-parseInt(e(346))/4+-parseInt(e(372))/5+-parseInt(e(387))/6*(parseInt(e(396))/7)+parseInt(e(391))/8*(-parseInt(e(380))/9)+parseInt(e(316))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const T=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[G(329)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){T(this,(function(){const t=G,n=new RegExp(t(330)),e=new RegExp(t(318),"i"),o=O("init");n.test(o+"chain")&&e.test(o+t(390))?O():o("0")}))()}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[G(329)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function G(t,n){const e=R();return(G=function(t,n){return e[t-=306]})(t,n)}function R(){const t=["passItems","value","write","MeshBasicMaterial","bind","OrthographicCamera","setSize","set","wrapS","makePerspective","makeOrthographic","length","quad","tInput","prototype","copyPass","RGBAFormat","onWindowResize","49762520NJPqoc",'{}.constructor("return this")( )',"\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","trace","RGBFormat","error","return (function() ","material","toString","push","startTime","swapBuffers","render","apply","function *\\( *\\)","uuid","uniforms","camera","while (true) {}","projectionMatrix","loadShadervf","height","wrapT","stencilBuffer","minFilter","shader","table","__proto__","near","params","611032SSTqAB","useRGBA","266lHMUco","scene","25209DEOaTC","Reset","199866hGSolq","Stack","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","log","now","WebGLRenderTarget","stateObject","front","innerWidth","innerHeight","setRenderTarget","PlaneGeometry","warn","debu","console","ShaderMaterial","LinearFilter","toScreen","renderer","width","6574060GODPWa","time","read","passes","constructor","getOfflineTexture","addPass","ClampToEdgeWrapping","8484597MFrxUv","info","magFilter","texture","Pass","settings","counter","1161432VpWTAg","UnsignedByteType","far","input","8LNnFjr","resolution","splice","gger","type","14QKCdKo"];return(R=function(){return t})()}B(void 0,(function(){const t=G;let n;try{n=Function(t(322)+t(317)+");")()}catch(r){n=window}const e=n[t(366)]=n[t(366)]||{},o=[t(355),t(364),t(381),t(321),"exception",t(342),t(319)];for(let a=0;a<o[t(309)];a++){const n=B[t(376)][t(312)][t(401)](B),r=o[a],s=e[r]||n;n[t(343)]=B[t(401)](B),n[t(324)]=s.toString[t(401)](s),e[r]=n}}))();class j{constructor(t,n){const e=G;this[e(371)]=1,this[e(337)]=1,this[e(385)]=n||{},this[e(347)]=this[e(385)][e(347)]||!1,this[e(370)]=t,this[e(313)]=this.CopyPass(this[e(385)]),this[e(349)]=new c,this[e(310)]=new l(new(r[e(363)])(1,1),new(r[e(400)])),this[e(349)].add(this.quad),this[e(333)]=new(r[e(402)])(1,1,1,1,-1e4,1e4),this[e(359)]=new(r[e(357)])(1,1,{minFilter:void 0!==this[e(385)][e(340)]?this[e(385)][e(340)]:u,magFilter:void 0!==this[e(385)].magFilter?this[e(385)][e(382)]:r[e(368)],wrapS:void 0!==this[e(385)][e(306)]?this[e(385)][e(306)]:v,wrapT:void 0!==this[e(385)][e(338)]?this[e(385)][e(338)]:r[e(379)],format:this[e(347)]?r[e(314)]:r[e(320)],type:void 0!==this.settings[e(395)]?this[e(385)][e(395)]:r[e(388)],stencilBuffer:void 0===this[e(385)].stencilBuffer||this.settings[e(339)]}),this.back=this.front.clone(),this.startTime=Date[e(356)](),this[e(375)]={},this.Stack={passItems:[],passes:[]}}[N(378)](t,n,e,o){const r=N;this[r(336)](n);const a={shaderName:t,params:e,uuid:o,shader:this[r(341)]};this[r(353)][r(397)][r(325)](a)}removePass(t){const n=N;for(let e=this.Stack[n(397)][n(309)]-1;e>=0;e--)this[n(353)].passItems[e][n(331)]===parseInt(t)&&this[n(353)][n(397)][n(393)](e,1);console.log(this[n(353)][n(397)])}CopyPass(){this[N(384)].call(this);return this.loadShadervf("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}loadShadervf(t){const n=N,e=n(354);return this[n(341)]=function(t,n){const e=L,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,c=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,l={sampler2D:{type:"t",value:()=>new(r[L(311)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[L(314)])},vec3:{type:"v3",value:()=>new(r[L(336)])},vec4:{type:"v4",value:()=>new(r[L(360)])},bvec2:{type:"v2",value:()=>new(r[L(314)])},bvec3:{type:"v3",value:()=>new(r[L(336)])},bvec4:{type:"v4",value:()=>new s},ivec2:{type:"v2",value:()=>new(r[L(314)])},ivec3:{type:"v3",value:()=>new(r[L(336)])},ivec4:{type:"v4",value:()=>new s},mat2:{type:"v2",value:()=>new i},mat3:{type:"v3",value:()=>new(r[L(334)])},mat4:{type:"v4",value:()=>new(r[L(350)])}},u={float:{type:"fv",value:()=>[]},vec3:{type:e(348),value:()=>[]}};let v;const f={resolution:{type:"v2",value:new(r[e(314)])(1,1),default:!0},time:{type:"f",value:Date.now(),default:!0},tInput:{type:"t",value:new a,default:!0}};let p,d;for(;null!==(v=o[e(315)](n));)v[e(313)]===o.lastIndex&&o[e(307)]++,p=v[1],d=v[2],f[d]={type:l[p][e(355)],value:l[p].value()};for(;null!==(v=c[e(315)](n));)v[e(313)]===o[e(307)]&&o[e(307)]++,p=v[1],d=v[2],v[3],f[d]={type:u[p].type,value:u[p].value()};return new(r[e(352)])({uniforms:f,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(341)]}[N(384)](t){const n=N;this[n(341)]=null,this[n(345)]={}}[N(351)](){const t=N;this[t(374)]=this[t(359)],this[t(399)]=this.back}[N(315)](t,n){const e=N,o=window[e(360)],r=window[e(361)];t[e(403)](1*o,1*r),n[e(335)][e(307)](70,o/r,n[e(344)],n[e(389)]),this[e(403)](o,r);return this[e(377)](o,r,!0)}[N(403)](t,n){const e=N;this.width=t,this[e(337)]=n,this[e(333)][e(335)][e(308)](t/-2,t/2,n/2,n/-2,this[e(333)][e(344)],this[e(333)][e(389)]),this[e(310)].scale[e(404)](t,n,1),this[e(359)][e(403)](t,n),this.back[e(403)](t,n)}[N(377)](t,n,e){const o=N;return new f(t,n,{minFilter:r[o(368)],magFilter:u,format:e?r[o(314)]:r[o(320)]})}[N(328)](t,n,e,o){const r=N;this[r(370)].setRenderTarget(this[r(399)]),this[r(370)][r(328)](t,n),o||this[r(327)]()}[N(327)](){const t=N,n=this[t(399)];this[t(399)]=this[t(374)],this[t(374)]=n}pass(){const t=N;for(let n=0;n<this[t(353)][t(397)][t(309)];n++){const e=this[t(353)][t(397)][n][t(341)],o=this[t(353)][t(397)][n][t(345)];if(this[t(370)][t(362)](this.write),e instanceof r[t(367)]){this[t(310)][t(323)]=e,this[t(310)][t(323)][t(332)][t(311)][t(398)]=this[t(374)].texture,this[t(310)][t(323)][t(332)].resolution[t(398)][t(404)](this[t(371)],this[t(337)]),this[t(310)][t(323)].uniforms[t(373)].value=.001*(Date[t(356)]()-this[t(326)]);for(const n in o)this[t(310)][t(323)][t(332)][n][t(398)]=o[n];this[t(370)][t(328)](this.scene,this.camera),this[t(327)]()}}}[N(369)](t,n){const e=N;this.renderer[e(362)](null),this[e(310)][e(323)]=this[e(313)],this.quad[e(323)][e(332)][e(311)][e(398)]=this[e(374)][e(383)],this.quad.material.uniforms[e(392)][e(398)][e(404)](this[e(371)],this[e(337)]),this[e(370)][e(328)](this[e(349)],this[e(333)])}}function O(t){function n(t){const e=G;if("string"==typeof t)return function(t){}.constructor(e(334)).apply(e(386));1!==(""+t/t)[e(309)]||t%20==0?function(){return!0}[e(376)](e(365)+e(394)).call("action"):function(){return!1}[e(376)](e(365)+e(394)).apply(e(358)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const V="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",W=H;function H(t,n){const e=q();return(H=function(t,n){return e[t-=123]})(t,n)}!function(t,n){const e=H,o=q();for(;;)try{if(578141===parseInt(e(147))/1*(-parseInt(e(167))/2)+parseInt(e(152))/3+parseInt(e(136))/4+-parseInt(e(181))/5*(parseInt(e(128))/6)+-parseInt(e(156))/7*(-parseInt(e(146))/8)+-parseInt(e(125))/9+-parseInt(e(132))/10*(-parseInt(e(194))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const k=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[H(142)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){k(this,(function(){const t=H,n=new RegExp(t(196)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=Z("init");n.test(o+t(178))&&e[t(202)](o+t(199))?Z():o("0")}))()}();const X=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[H(142)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function q(){const t=["BoxGeometry","SNOISEPass","4425724TzOHTJ","移除~","return (function() ","change","addBlade","MeshPhongMaterial","apply","plugins/postProcessing/image/1324.jpg","关闭通道","removePass","5261048VGzNBo","673sUDIEj","stateObject","POISSONPass","bind","autoClearColor","1489353JBXIYd","text","SOBELPass","prototype","7OYuOXs","SEPIAPass","Reset","debu","string","warn","CIRCULARPass","CGAPass","action","console","Vector2","702MWmDxn","addButton","click","material","dispose","InvertPass","castShadow","pass","addPass","plugins/postProcessing/image/1324-normal.jpg","toString","chain","table","translate","450580Keaxec","render","value","values","DOTPass","length","postProcessing","map","label","gger","random","push","receiveShadow","770979bennAv","split","function *\\( *\\)","TOONPass",'{}.constructor("return this")( )',"input","FREICHENPass","toScreen","test","counter","title","keys","BufferGeometry","9320508vhBAUu","log","add","60PcnIXW","onWindowResize","VIGNETTE1Pass","BOXBLURPass","70lEDNYn","constructor"];return(q=function(){return t})()}X(void 0,(function(){const t=H;let n;try{n=Function(t(138)+t(198)+");")()}catch(r){n=window}const e=n[t(165)]=n.console||{},o=[t(126),t(161),"info","error","exception",t(179),"trace"];for(let a=0;a<o[t(186)];a++){const n=X.constructor[t(155)][t(150)](X),r=o[a],s=e[r]||n;n.__proto__=X.bind(X),n[t(177)]=s[t(177)][t(150)](s),e[r]=n}}))();function Z(t){function n(t){const e=H;if(typeof t===e(160))return function(t){}.constructor("while (true) {}").apply(e(203));1!==(""+t/t)[e(186)]||t%20==0?function(){return!0}.constructor(e(159)+e(190)).call(e(164)):function(){return!1}[e(133)](e(159)+e(190))[e(142)](e(148)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const $=E(m({__name:W(187),async setup(o){const a=W;let s,i;const{camera:c,renderer:u,scene:v,sizes:f}=t();for(var m=new(r[a(124)]),x=[],h=0;h<100;h++){var y=new(r[a(134)])(100,100,100);y[a(180)](1500*Math[a(191)](),1500*Math.random(),1500*Math.random()),x[a(192)](y)}m=p(x);const I=([s,i]=g((()=>n({map:a(143)}))),s=await s,i(),s),b=([s,i]=g((()=>n({map:a(176)}))),s=await s,i(),s);var _=new(r[a(141)])({map:I[a(188)],normalMap:b.map,normalScale:new(r[a(166)])(.8,-.8),shininess:100}),S=new l(m,_);S[a(173)]=!0,S[a(193)]=!0,v[a(183)][a(127)](S);const U=new j(u[a(183)],{useRGBA:!0}),w=new d;let P=null,D=[{text:"InvertPass",value:{InvertPass:V}},{text:"FXAAPass",value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:a(157),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:a(135),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:a(131),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:"DENOISEPass",value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:a(163),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:b[a(188)]}}},{text:a(154),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:"RGBPass",value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:a(185),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:a(162),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:a(149),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:a(130),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:"VIGNETTE2Pass",value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:a(200),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:a(197),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],E=a(172),A=V,M=null;w[a(140)]({view:"list",label:"后处理类型",options:D,value:""}).on(a(139),(t=>{P=t[a(183)]}));const L=w[a(168)]({title:"新增",label:"新增通道"});let C=0;L.on(a(169),(t=>{const n=a;E=Object[n(123)](P)[0],A=Object[n(184)](P)[0],M=Object[n(184)](P)[1];let e=C++,o=w.addFolder({title:E});for(const a in M){let t=M[a];o[n(140)]({view:n(153),label:a,parse:t=>String(t),value:t})}o.addButton({title:n(137)+e,label:n(144)}).on("click",(t=>{const e=n;let o=t.target[e(204)][e(195)]("~")[1];U[e(145)](o)})).on(n(169),(()=>{o[n(171)]()}));let r=F(M,t.target[n(189)],t.value);U[n(175)](E,A,r,e)})),U[a(129)](u[a(183)],c[a(183)]);const{onLoop:z}=e();return z((({delta:t})=>{const n=a;S&&(u[n(183)][n(151)]=!0,U[n(158)](),S[n(170)]=_,U[n(182)](v.value,c.value),U[n(174)](),U[n(201)](v[n(183)],c[n(183)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]);function J(){const t=["call","console","23650pWNTKr","727665EHfRlw","function *\\( *\\)","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","4191702DSIWmF","init","warn","toString","gger","13411008XJrzVI","info","manual","input","3dUirWx","__proto__","#ffffff","error","log","24860NAlMMo","while (true) {}","prototype","TresCanvas","341762iBhGXL","postProcessingEditor","11456795HhkyOw","bind","test","apply","length","return (function() ","#000000","exception","369788jQWZTa","constructor","counter","TresDirectionalLight","string","stateObject","trace","40dktoGR","8juJWlw","TresAmbientLight"];return(J=function(){return t})()}function K(t,n){const e=J();return(K=function(t,n){return e[t-=272]})(t,n)}const Y=K;!function(t,n){const e=K,o=J();for(;;)try{if(920721===-parseInt(e(303))/1+-parseInt(e(293))/2*(parseInt(e(284))/3)+-parseInt(e(310))/4*(parseInt(e(272))/5)+parseInt(e(275))/6+-parseInt(e(295))/7*(parseInt(e(311))/8)+-parseInt(e(280))/9+parseInt(e(315))/10*(parseInt(e(289))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[K(298)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){Q(this,(function(){const t=K,n=new RegExp(t(273)),e=new RegExp(t(274),"i"),o=ot(t(276));n.test(o+"chain")&&e[t(297)](o+t(283))?ot():o("0")}))()}();const tt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[K(298)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();tt(void 0,(function(){const t=K,n=function(){const t=K;let n;try{n=Function(t(300)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(314)]=n.console||{},o=[t(288),t(277),t(281),t(287),t(302),"table",t(309)];for(let r=0;r<o[t(299)];r++){const n=tt.constructor[t(291)].bind(tt),a=o[r],s=e[a]||n;n[t(285)]=tt[t(296)](tt),n[t(278)]=s[t(278)].bind(s),e[a]=n}}))();const nt={ref:"perspectiveCameraRef",position:[600,850,-1500],fov:45,near:.1,far:1e5},et=m({__name:Y(294),setup(t){const n=Y,r={clearColor:n(301),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:n(282)},a={autoRotate:!0,enableDamping:!0},{onLoop:s}=e();return s((({delta:t})=>{})),(t,e)=>{const s=n,i=x(s(292));return h(),y(i,D(r,{"window-size":""}),{default:I((()=>[b("TresPerspectiveCamera",nt,null,512),_(S(o),U(w(a)),null,16),e[0]||(e[0]=b(s(312),{color:s(286),intensity:2},null,-1)),e[1]||(e[1]=b(s(306),{position:[100,100,0],intensity:2,color:"#ffffff"},null,-1)),(h(),y(P,null,{default:I((()=>[_($)])),_:1}))])),_:1},16)}}});function ot(t){function n(t){const e=K;if(typeof t===e(307))return function(t){}.constructor(e(290))[e(298)](e(305));1!==(""+t/t).length||t%20==0?function(){return!0}[e(304)]("debu"+e(279))[e(313)]("action"):function(){return!1}[e(304)]("debu"+e(279)).apply(e(308)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{et as default};
