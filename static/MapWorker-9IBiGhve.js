!function(){"use strict";class e{constructor(){this._controller=new AbortController,this.listeners=new Set}static{this.pendings=new Map}fetch(t,s={}){e.pendings.has(t)||(e.pendings.set(t,this),fetch(t,{...s,signal:this._controller.signal}).then((e=>{this.listeners.forEach((t=>t.resolve(e.clone())))})).catch((e=>{this.listeners.forEach((t=>t.reject(e)))})).finally((()=>{e.pendings.delete(t)})))}abort(){this._controller.abort()}}class t{constructor(e,t){this.url=e,this.init=t,this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}ready(){let t=e.pendings.get(this.url);return t||(t=new e,t.fetch(this.url,this.init)),t.listeners.add(this),this.promise}abort(){this.reject("User abort.");const t=e.pendings.get(this.url);t&&(t.listeners.delete(this),0===t.listeners.size&&t.abort())}}let s;const i=new Map;self.onmessage=async e=>{const{id:r,tileNo:n,url:a,debug:l,abort:o}=e.data;if(o)return i.get(r)?.abort(),i.delete(r),void self.postMessage({id:r,error:!0});try{const e=new t(a,{cache:"force-cache",mode:"cors"});i.set(r,e);const o=await async function(e,t,i=!1){const r=await t.ready(),n=await r.blob(),a=await createImageBitmap(n,i?void 0:{imageOrientation:"flipY"});if(!i)return a;s||(s=new OffscreenCanvas(256,256));const l=s.getContext("2d");if(!l)throw new Error('Offscreencanvas.getContext("2d") error!');const{width:o,height:c}=s;return l.drawImage(a,0,0),l.rect(0,0,o,c),l.strokeStyle="#00FFFF",l.font="20px Arial",l.stroke(),l.fillStyle="#FF4444",l.fillText(`${e[0]}`,10,30),l.fillStyle="#44FF44",l.fillText(`${e[1]}`,10,55),l.fillStyle="#66AAFF",l.fillText(`${e[2]}`,10,80),await createImageBitmap(s,{imageOrientation:"flipY"})}(n,e,l);self.postMessage({id:r,bitmap:o},[o])}catch(c){self.postMessage({id:r,error:!0})}finally{i.delete(r)}}}();
