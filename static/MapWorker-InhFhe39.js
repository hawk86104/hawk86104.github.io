var y=Object.defineProperty,F=Object.defineProperties;var x=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var v=Object.prototype.hasOwnProperty,M=Object.prototype.propertyIsEnumerable;var w=(s,r,t)=>r in s?y(s,r,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[r]=t,m=(s,r)=>{for(var t in r||(r={}))v.call(r,t)&&w(s,t,r[t]);if(p)for(var t of p(r))M.call(r,t)&&w(s,t,r[t]);return s},u=(s,r)=>F(s,x(r));(function(){"use strict";const l=class l{constructor(){this._controller=new AbortController,this.listeners=new Set}fetch(e,a={}){l.pendings.has(e)||(l.pendings.set(e,this),fetch(e,u(m({},a),{signal:this._controller.signal})).then(o=>{this.listeners.forEach(n=>n.resolve(o.clone()))}).catch(o=>{this.listeners.forEach(n=>n.reject(o))}).finally(()=>{l.pendings.delete(e)}))}abort(){this._controller.abort()}};l.pendings=new Map;let s=l;class r{constructor(e,a){this.url=e,this.init=a,this.promise=new Promise((o,n)=>{this.resolve=o,this.reject=n})}ready(){let e=s.pendings.get(this.url);return e||(e=new s,e.fetch(this.url,this.init)),e.listeners.add(this),this.promise}abort(){this.reject("User abort.");const e=s.pendings.get(this.url);e&&(e.listeners.delete(this),e.listeners.size===0&&e.abort())}}let t;async function b(c,e,a=!1){const n=await(await e.ready()).blob(),g=await createImageBitmap(n,a?void 0:{imageOrientation:"flipY"});if(!a)return g;t||(t=new OffscreenCanvas(256,256));const i=t.getContext("2d");if(!i)throw new Error('Offscreencanvas.getContext("2d") error!');const{width:f,height:d}=t;return i.drawImage(g,0,0),i.rect(0,0,f,d),i.strokeStyle="#00FFFF",i.font="20px Arial",i.stroke(),i.fillStyle="#FF4444",i.fillText("".concat(c[0]),10,30),i.fillStyle="#44FF44",i.fillText("".concat(c[1]),10,55),i.fillStyle="#66AAFF",i.fillText("".concat(c[2]),10,80),await createImageBitmap(t,{imageOrientation:"flipY"})}const h=new Map;self.onmessage=async c=>{var i;const{id:e,tileNo:a,url:o,debug:n,abort:g}=c.data;if(g){(i=h.get(e))==null||i.abort(),h.delete(e),self.postMessage({id:e,error:!0});return}try{const f=new r(o,{cache:"force-cache",mode:"cors"});h.set(e,f);const d=await b(a,f,n);self.postMessage({id:e,bitmap:d},[d])}catch(f){self.postMessage({id:e,error:!0})}finally{h.delete(e)}}})();
