import{t,_ as n,V as e,as as o,T as r,ai as a}from"./three.8H01GNxA1736128832096.js";import{e as i,b as s,U as c,c as l}from"./@tresjs.pA0fT6uQ1736128832096.js";import"./index.siyn8t_g1736128832096.js";import{c as u}from"./simplex-noise.jB2HxhHB1736128832096.js";import{C as f}from"./index.zoATXOTn1736128832096.js";import{d as p,a4 as h,o as m,D as v,J as d,u as g,r as x,f as w,g as y,j as b,aj as _,ak as M,al as j}from"./@vue.yG49nQHr1736128832096.js";import{_ as z}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.60x3RVSK1736128832096.js";import"./@vueuse.iB8cUOAP1736128832096.js";import"./lamina.Gp37s70u1736128832096.js";import"./glsl-tokenizer.-JbOmC6_1736128832096.js";import"./@amap.xuzEumYH1736128832096.js";import"./glsl-token-descope.FlQYNBuS1736128832096.js";import"./glsl-token-depth.PzlP5g1D1736128832096.js";import"./glsl-token-scope.7zRkdtFI1736128832096.js";import"./glsl-token-properties.fVJbie371736128832096.js";import"./glsl-token-assignments.MlPJW2HO1736128832096.js";import"./glsl-token-string.uqKzCCPV1736128832096.js";import"./glsl-token-functions.YKQQpMgk1736128832096.js";import"./object-hash.ZMoY9sX21736128832096.js";import"./jszip.8oEQHpN61736128832096.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.C1XPfoup1736128832096.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.hDjG0wRO1736128832096.js";import"./three-stdlib.ndvA-qbr1736128832096.js";import"./@pmndrs.-ljSdKQ-1736128832096.js";import"./utils.YCRZNRp31736128832096.js";const I=F;!function(t,n){const e=F,o=L();for(;;)try{if(809144===-parseInt(e(161))/1*(parseInt(e(155))/2)+-parseInt(e(173))/3*(parseInt(e(183))/4)+-parseInt(e(187))/5+-parseInt(e(158))/6*(-parseInt(e(119))/7)+-parseInt(e(178))/8+-parseInt(e(128))/9*(parseInt(e(154))/10)+parseInt(e(115))/11*(parseInt(e(124))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[F(141)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){A(this,(function(){const t=F,n=new RegExp(t(163)),e=new RegExp(t(125),"i"),o=O(t(133));n[t(142)](o+"chain")&&e.test(o+t(172))?O():o("0")}))()}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[F(141)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();C(void 0,(function(){const t=F;let n;try{n=Function(t(182)+t(170)+");")()}catch(r){n=window}const e=n[t(134)]=n[t(134)]||{},o=["log","warn",t(160),t(157),t(114),"table",t(195)];for(let a=0;a<o[t(193)];a++){const n=C.constructor[t(177)][t(189)](C),r=o[a],i=e[r]||n;n.__proto__=C[t(189)](C),n[t(166)]=i.toString[t(189)](i),e[r]=n}}))();const S=["material"],R=[I(192),I(129),I(127),I(190),"attributes-orientation",I(126),I(146),I(171)],k=["geometry"],D=[I(132)];function F(t,n){const e=L();return(F=function(t,n){return e[t-=113]})(t,n)}const E=p({__name:I(143),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(a){const c=I;let l,p;const x=([l,p]=h((()=>s({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),l=await l,p(),l),w=a,y=u(Math[c(145)]);function b(t,e){const o=c,r=t.x*e.w+t.y*e.z-t.z*e.y+t.w*e.x,a=-t.x*e.z+t.y*e.w+t.z*e.x+t.w*e.y,i=t.x*e.y-t.y*e.x+t.z*e.w+t.w*e.z,s=-t.x*e.x-t.y*e.y-t.z*e.z+t.w*e.w;return new(n[o(147)])(r,a,i,s)}function _(t,n){var e=2*y(t/50,n/50);return e+=4*y(t/100,n/100),e+=.2*y(t/10,n/10)}const M=function(t,e){const a=c,i=[],s=[],l=[],u=[],f=[];let p=new(n[a(147)]),h=new o;const m=-.25;for(let o=0;o<t;o++){const r=Math.random()*e-e/2,c=Math[a(145)]()*e-e/2,v=_(r,c);i[a(156)](r,v,c);let d=Math.PI-Math[a(145)]()*(2*Math.PI);u.push(Math[a(153)](.5*d)),f[a(156)](Math[a(135)](.5*d));let g=new(n[a(150)])(0,1,0),x=g.x*Math[a(153)](d/2),w=g.y*Math.sin(d/2),y=g.z*Math[a(153)](d/2),M=Math.cos(d/2);p[a(144)](x,w,y,M)[a(151)](),d=.5*Math[a(145)]()+m,g=new(n[a(150)])(1,0,0),x=g.x*Math[a(153)](d/2),w=g.y*Math.sin(d/2),y=g.z*Math[a(153)](d/2),M=Math.cos(d/2),h[a(144)](x,w,y,M).normalize(),p=b(p,h),d=.5*Math[a(145)]()+m,g=new(n[a(150)])(0,0,1),x=g.x*Math[a(153)](d/2),w=g.y*Math[a(153)](d/2),y=g.z*Math.sin(d/2),M=Math[a(135)](d/2),h[a(144)](x,w,y,M).normalize(),p=b(p,h),s[a(156)](p.x,p.y,p.z,p.w),o<t/3?l[a(156)](1.8*Math[a(145)]()):l[a(156)](Math[a(145)]())}return{offsetsF32:new(n[a(120)])(new Float32Array(i),3),orientationsF32:new r(new Float32Array(s),4),stretchesF32:new(n[a(120)])(new Float32Array(l),1),halfRootAngleCosF32:new(n[a(120)])(new Float32Array(f),1),halfRootAngleSinF32:new(n[a(120)])(new Float32Array(u),1)}}(w[c(162)],w[c(138)]),j=new t(w.bW,w.bH,1,w.joints)[c(169)](0,w.bH/2,0),z=new(n[c(185)])(w[c(138)],w[c(138)],32,32);z[c(188)](new e(0,1,0));const A=z[c(130)].position;for(let t=0;t<A[c(113)][c(193)];t+=3)A[c(113)][t+1]=_(A.array[t],A[c(113)][t+2]);z[c(130)][c(186)][c(168)]=!0,z[c(152)]();const C=new(f({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(n[c(131)])(.3,.9,0)[c(194)](),bottomColor:new(n[c(131)])(0,.2,0)[c(194)]()},c(122),c(123),(t=>{const e=c;t.side=n[e(118)]})));C.map=x.map,C[c(121)]=x[c(121)],C[c(139)]=!1;const{onLoop:F}=i();return F((({elapsed:t})=>{const n=c;C[n(117)][n(174)].value=t/4})),(t,e)=>{const o=c;return m(),v(o(181),null,[d(o(140),{material:g(C)},[d(o(148),{index:g(j)[o(192)],"attributes-position":g(j).attributes[o(186)],"attributes-uv":g(j)[o(130)].uv,"attributes-offset":g(M)[o(137)],"attributes-orientation":g(M).orientationsF32,"attributes-stretch":g(M)[o(180)],"attributes-halfRootAngleSin":g(M)[o(149)],"attributes-halfRootAngleCos":g(M)[o(116)]},null,8,R)],8,S),d(o(140),{position:[0,0,0],geometry:g(z)},[d(o(167),{color:o(176),side:n[o(118)]},null,8,D)],8,k)])}}});function O(t){function n(t){const e=F;if(typeof t===e(184))return function(t){}[e(165)](e(164))[e(141)](e(175));1!==(""+t/t)[e(193)]||t%20==0?function(){return!0}[e(165)](e(179)+e(159)).call(e(191)):function(){return!1}[e(165)]("debu"+e(159))[e(141)](e(136)),n(++t)}try{if(t)return n;n(0)}catch(e){}}function L(){const t=["attributes-stretch","attributes-uv","9YtWLBv","attributes-position","attributes","Color","side","init","console","cos","stateObject","offsetsF32","width","toneMapped","TresMesh","apply","test","grass","set","random","attributes-halfRootAngleSin","Vector4","TresInstancedBufferGeometry","halfRootAngleSinF32","Vector3","normalize","computeVertexNormals","sin","1688930UONhSe","8534vtgtoX","push","error","546VRVLXA","gger","info","251KphMPp","instances","function *\\( *\\)","while (true) {}","constructor","toString","TresMeshStandardMaterial","needsUpdate","translate",'{}.constructor("return this")( )',"attributes-halfRootAngleCos","input","57IDnbZS","time","counter","#000f00","prototype","8522736BqWleQ","debu","stretchesF32","TresGroup","return (function() ","150572pfcmEM","string","PlaneGeometry","position","7762895ONOHzR","lookAt","bind","attributes-offset","action","index","length","convertSRGBToLinear","trace","array","exception","11QvMUFL","halfRootAngleCosF32","uniforms","DoubleSide","31577ZtxChu","InstancedBufferAttribute","alphaMap","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","59660292lZeWId","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)"];return(L=function(){return t})()}const T=q;!function(t,n){const e=q,o=U();for(;;)try{if(390247===-parseInt(e(361))/1+-parseInt(e(359))/2*(-parseInt(e(354))/3)+-parseInt(e(376))/4+parseInt(e(373))/5+-parseInt(e(384))/6*(parseInt(e(363))/7)+parseInt(e(375))/8+-parseInt(e(379))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){B(this,(function(){const t=q,n=new RegExp(t(369)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=V("init");n[t(355)](o+t(353))&&e[t(355)](o+t(360))?V():o("0")}))()}();const P=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(382)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function U(){const t=["bind","function *\\( *\\)","constructor","info","counter","3773705YiWbut","call","6228984ZiIqsG","2081704qSZjIw","log","exception","1952442dLCDVc","grass","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","apply",'{}.constructor("return this")( )',"1440678ddcJEw","chain","714171WRfavs","test","length","toString","stateObject","6nrMZZs","input","399585GejEuU","gger","21OJIohq","string","error","debu","prototype"];return(U=function(){return t})()}function q(t,n){const e=U();return(q=function(t,n){return e[t-=353]})(t,n)}P(void 0,(function(){const t=q,n=function(){const t=q;let n;try{n=Function("return (function() "+t(383)+");")()}catch(e){n=window}return n}(),e=n.console=n.console||{},o=[t(377),"warn",t(371),t(365),t(378),"table","trace"];for(let r=0;r<o[t(356)];r++){const n=P[t(370)][t(367)][t(368)](P),a=o[r],i=e[a]||n;n.__proto__=P[t(368)](P),n.toString=i[t(357)].bind(i),e[a]=n}}))();const H=p({__name:T(380),setup(t){const n=x({alpha:!0,toneMapping:a,windowSize:!0,clearColor:6710886}),e=x({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=q;return m(),w(g(l),_(M(n)),{default:y((()=>[o[0]||(o[0]=d("TresPerspectiveCamera",{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),b(g(c),_(M(e)),null,16),(m(),w(j,null,{default:y((()=>[b(E)])),_:1})),(m(),w(j,null,{default:y((()=>[b(g(z),{texture:r(381)})])),_:1}))])),_:1},16)}}});function V(t){function n(t){const e=q;if(typeof t===e(364))return function(t){}[e(370)]("while (true) {}")[e(382)](e(372));1!==(""+t/t)[e(356)]||t%20==0?function(){return!0}[e(370)](e(366)+e(362))[e(374)]("action"):function(){return!1}[e(370)](e(366)+e(362)).apply(e(358)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{H as default};
