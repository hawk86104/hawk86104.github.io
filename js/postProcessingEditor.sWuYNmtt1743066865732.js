import{m as t,e as n,a as e,o}from"./@tresjs.NxYvETXi1743066865732.js";import{_ as r,a9 as s,b as a,t as i,i as c,l,A as u,U as v,aB as f,c6 as p,V as d}from"./three.qSkR4_5R1743066865732.js";import{P as g}from"./tweakpane.ivGeiIdz1743066865732.js";import{d as m,a3 as x,e as h,o as y,f as I,g as b,N as _,j as S,u as U,aj as w,ak as P,al as D,m as E}from"./@vue.L-brCdZe1743066865732.js";import{_ as A}from"./@fesjs.ZOctjJCV1743066865732.js";import"./postprocessing.ncQBP5me1743066865732.js";import"./@vueuse.2gpu5LGS1743066865732.js";import"./vue-router.s-CF-R2-1743066865732.js";import"./lodash-es.pklfUAS51743066865732.js";import"./@qlin.o0hjOMCg1743066865732.js";import"./pinia.xxHB-xrp1743066865732.js";import"./@floating-ui.HzHndBae1743066865732.js";import"./@juggle.4EyLec-41743066865732.js";function L(t,n){const e=z();return L=function(t,n){return e[t-=141]},L(t,n)}!function(t,n){const e=L,o=z();for(;;)try{if(763049===-parseInt(e(166))/1*(-parseInt(e(183))/2)+parseInt(e(203))/3*(parseInt(e(149))/4)+parseInt(e(187))/5*(-parseInt(e(175))/6)+parseInt(e(190))/7+-parseInt(e(145))/8+parseInt(e(207))/9*(-parseInt(e(189))/10)+parseInt(e(153))/11*(parseInt(e(141))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const M=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){M(this,(function(){const t=L,n=new RegExp(t(205)),e=new RegExp(t(181),"i"),o=T("init");n.test(o+"chain")&&e[t(152)](o+"input")?T():o("0")}))()}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(191)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();C(void 0,(function(){const t=L;let n;try{n=Function(t(170)+t(180)+");")()}catch(r){n=window}const e=n[t(179)]=n[t(179)]||{},o=[t(165),"warn",t(185),t(163),t(201),t(196),t(194)];for(let s=0;s<o[t(193)];s++){const n=C[t(172)].prototype.bind(C),r=o[s],a=e[r]||n;n[t(171)]=C[t(162)](C),n[t(202)]=a[t(202)][t(162)](a),e[r]=n}}))();function F(t,n,e){const o=L;if(typeof t!==o(169)||null===t)return t;const r=Array[o(184)](t)?[]:{};for(const s in t)t[o(157)](s)&&(r[s]=F(t[s])),s==n&&(r[n]=e);return r}function z(){const t=["30VQMuZy","9874347ASgYTh","apply","now","length","trace","Vector3","table","ShaderMaterial","Matrix2","onabort","open","exception","toString","12xYZMpy","index","function *\\( *\\)","while (true) {}","1618956WsRsLF","660URHGoO","Matrix4","send","\" couldn't be loaded.","4160528HgspXP","name","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","exec","1191724YRGSqv","responseText","gger","test","11759RuKoip","value","Texture",'" load was aborted.',"hasOwnProperty","debu","lastIndex","string","stateObject","bind","error","Vector4","log","1OcQHbK","onerror",'Shader "',"object","return (function() ","__proto__","constructor","counter","WagnerLoadShaderException","348YSOrfc","call","Vector2","v3v","console",'{}.constructor("return this")( )',"\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","type","543610xaBqTR","isArray","info","message","95705SabRUf","action"];return(z=function(){return t})()}function T(t){function n(t){const e=L;if(typeof t===e(160))return function(t){}[e(172)](e(206)).apply(e(173));1!==(""+t/t).length||t%20==0?function(){return!0}.constructor(e(158)+"gger")[e(176)](e(188)):function(){return!1}[e(172)](e(158)+e(151))[e(191)](e(161)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const N=B;!function(t,n){const e=B,o=H();for(;;)try{if(661162===-parseInt(e(162))/1*(-parseInt(e(182))/2)+parseInt(e(177))/3*(-parseInt(e(141))/4)+parseInt(e(191))/5+-parseInt(e(163))/6*(-parseInt(e(160))/7)+-parseInt(e(231))/8*(parseInt(e(137))/9)+parseInt(e(168))/10+parseInt(e(218))/11*(parseInt(e(198))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const R=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){R(this,(function(){const t=B,n=new RegExp(t(209)),e=new RegExp(t(232),"i"),o=O(t(204));n[t(205)](o+t(138))&&e[t(205)](o+t(154))?O():o("0")}))()}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function B(t,n){const e=H();return B=function(t,n){return e[t-=133]},B(t,n)}G(void 0,(function(){const t=B;let n;try{n=Function(t(195)+'{}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(159)]=n[t(159)]||{},o=[t(167),t(176),t(186),t(199),"exception",t(230),t(161)];for(let s=0;s<o.length;s++){const n=G[t(206)][t(228)][t(181)](G),r=o[s],a=e[r]||n;n[t(164)]=G[t(181)](G),n[t(166)]=a[t(166)].bind(a),e[r]=n}}))();class j{constructor(t,n){const e=B;this[e(193)]=1,this[e(226)]=1,this[e(175)]=n||{},this.useRGBA=this.settings[e(224)]||!1,this[e(139)]=t,this.copyPass=this.CopyPass(this[e(175)]),this[e(147)]=new(r[e(187)]),this[e(152)]=new l(new(r[e(153)])(1,1),new u),this.scene[e(197)](this[e(152)]),this[e(200)]=new(r[e(188)])(1,1,1,1,-1e4,1e4),this[e(203)]=new(r[e(180)])(1,1,{minFilter:void 0!==this.settings[e(214)]?this.settings[e(214)]:r[e(194)],magFilter:void 0!==this[e(175)][e(210)]?this.settings[e(210)]:r[e(194)],wrapS:void 0!==this.settings.wrapS?this[e(175)][e(170)]:r[e(208)],wrapT:void 0!==this.settings[e(215)]?this.settings[e(215)]:r[e(208)],format:this[e(224)]?r[e(179)]:r[e(225)],type:void 0!==this[e(175)][e(213)]?this[e(175)][e(213)]:v,stencilBuffer:void 0===this[e(175)][e(220)]||this[e(175)].stencilBuffer}),this[e(134)]=this.front[e(143)](),this.startTime=Date[e(233)](),this[e(222)]={},this[e(212)]={passItems:[],passes:[]}}[N(156)](t,n,e,o){const r=N;this[r(140)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(171)]};this[r(212)][r(135)].push(s)}removePass(t){const n=N;for(let e=this[n(212)][n(135)][n(192)]-1;e>=0;e--)this.Stack[n(135)][e][n(235)]===parseInt(t)&&this[n(212)][n(135)][n(236)](e,1);console[n(167)](this[n(212)][n(135)])}[N(145)](){const t=N;this.Pass[t(190)](this);return this[t(140)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[N(140)](t){const n=N;return this.shader=function(t,n){const e=L,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,l=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,u={sampler2D:{type:"t",value:()=>new(r[L(155)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[L(177)])},vec3:{type:"v3",value:()=>new a},vec4:{type:"v4",value:()=>new i},bvec2:{type:"v2",value:()=>new(r[L(177)])},bvec3:{type:"v3",value:()=>new(r[L(195)])},bvec4:{type:"v4",value:()=>new i},ivec2:{type:"v2",value:()=>new(r[L(177)])},ivec3:{type:"v3",value:()=>new(r[L(195)])},ivec4:{type:"v4",value:()=>new(r[L(164)])},mat2:{type:"v2",value:()=>new(r[L(198)])},mat3:{type:"v3",value:()=>new c},mat4:{type:"v4",value:()=>new(r[L(142)])}},v={float:{type:"fv",value:()=>[]},vec3:{type:e(178),value:()=>[]}};let f;const p={resolution:{type:"v2",value:new(r[e(177)])(1,1),default:!0},time:{type:"f",value:Date[e(192)](),default:!0},tInput:{type:"t",value:new s,default:!0}};let d,g;for(;null!==(f=o[e(148)](n));)f.index===o[e(159)]&&o[e(159)]++,d=f[1],g=f[2],p[g]={type:u[d][e(182)],value:u[d][e(154)]()};for(;null!==(f=l[e(148)](n));)f[e(204)]===o[e(159)]&&o[e(159)]++,d=f[1],g=f[2],f[3],p[g]={type:v[d][e(182)],value:v[d][e(154)]()};return new(r[e(197)])({uniforms:p,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}("varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }",t),this[n(171)]}Pass(t){const n=N;this.shader=null,this[n(169)]={}}Reset(){const t=N;this.read=this[t(203)],this.write=this[t(134)]}[N(146)](t,n){const e=N,o=window[e(201)],r=window[e(173)];t.setSize(1*o,1*r),n[e(150)][e(172)](70,o/r,n[e(157)],n[e(216)]),this[e(185)](o,r);return this[e(211)](o,r,!0)}[N(185)](t,n){const e=N;this[e(193)]=t,this[e(226)]=n,this[e(200)].projectionMatrix[e(219)](t/-2,t/2,n/2,n/-2,this[e(200)][e(157)],this[e(200)][e(216)]),this[e(152)].scale[e(133)](t,n,1),this[e(203)][e(185)](t,n),this.back[e(185)](t,n)}[N(211)](t,n,e){const o=N;return new(r[o(180)])(t,n,{minFilter:r[o(194)],magFilter:r[o(194)],format:e?r[o(179)]:r[o(225)]})}[N(155)](t,n,e,o){const r=N;this[r(139)][r(148)](this[r(174)]),this.renderer[r(155)](t,n),o||this[r(136)]()}[N(136)](){const t=N,n=this[t(174)];this[t(174)]=this[t(221)],this[t(221)]=n}pass(){const t=N;for(let n=0;n<this[t(212)][t(135)][t(192)];n++){const e=this.Stack.passItems[n][t(171)],o=this[t(212)][t(135)][n][t(169)];if(this[t(139)][t(148)](this[t(174)]),e instanceof r[t(178)]){this[t(152)][t(165)]=e,this[t(152)][t(165)][t(202)][t(234)][t(189)]=this.read[t(151)],this.quad.material[t(202)].resolution.value[t(133)](this[t(193)],this[t(226)]),this.quad[t(165)][t(202)][t(227)][t(189)]=.001*(Date.now()-this[t(142)]);for(const n in o)this.quad[t(165)].uniforms[n][t(189)]=o[n];this[t(139)][t(155)](this[t(147)],this[t(200)]),this[t(136)]()}}}[N(183)](t,n){const e=N;this[e(139)].setRenderTarget(null),this.quad[e(165)]=this[e(217)],this[e(152)][e(165)].uniforms[e(234)][e(189)]=this.read[e(151)],this[e(152)].material[e(202)].resolution[e(189)].set(this[e(193)],this[e(226)]),this[e(139)].render(this[e(147)],this[e(200)])}}function H(){const t=["CopyPass","onWindowResize","scene","setRenderTarget","while (true) {}","projectionMatrix","texture","quad","PlaneGeometry","input","render","addPass","near","debu","console","59969YyLgVU","trace","97467xUmthJ","366PhpNZz","__proto__","material","toString","log","10219190aJfzeY","params","wrapS","shader","makePerspective","innerHeight","write","settings","warn","17256vjKHhE","ShaderMaterial","RGBAFormat","WebGLRenderTarget","bind","10IsihnK","toScreen","action","setSize","info","Scene","OrthographicCamera","value","call","2613890GIeHbg","length","width","LinearFilter","return (function() ","gger","add","256020tFlyux","error","camera","innerWidth","uniforms","front","init","test","constructor","stateObject","ClampToEdgeWrapping","function *\\( *\\)","magFilter","getOfflineTexture","Stack","type","minFilter","wrapT","far","copyPass","187SQiSKT","makeOrthographic","stencilBuffer","read","passes","string","useRGBA","RGBFormat","height","time","prototype","counter","table","619024EAApwq","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","now","tInput","uuid","splice","set","back","passItems","swapBuffers","144gFPfDO","chain","renderer","loadShadervf","708fGtLsa","startTime","clone","apply"];return(H=function(){return t})()}function O(t){function n(t){const e=B;if(typeof t===e(223))return function(t){}[e(206)](e(149))[e(144)](e(229));1!==(""+t/t)[e(192)]||t%20==0?function(){return!0}.constructor(e(158)+e(196))[e(190)](e(184)):function(){return!1}[e(206)]("debugger")[e(144)](e(207)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const V="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}";!function(t,n){const e=q,o=X();for(;;)try{if(507424===parseInt(e(438))/1*(parseInt(e(474))/2)+parseInt(e(494))/3*(-parseInt(e(452))/4)+-parseInt(e(467))/5*(parseInt(e(460))/6)+-parseInt(e(488))/7+-parseInt(e(462))/8+-parseInt(e(481))/9+-parseInt(e(466))/10*(-parseInt(e(477))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const k=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(428)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){k(this,(function(){const t=q,n=new RegExp(t(450)),e=new RegExp(t(459),"i"),o=K(t(427));n[t(442)](o+t(455))&&e[t(442)](o+t(491))?K():o("0")}))()}();const W=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(428)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function q(t,n){const e=X();return q=function(t,n){return e[t-=415]},q(t,n)}function X(){const t=["split","关闭通道","warn","counter","init","apply","CGAPass","pass","CIRCULARPass","MeshPhongMaterial","FREICHENPass","action","POISSONPass","while (true) {}","gger","473182jQmudk","values","keys","FXAAPass","test","debu","console","plugins/postProcessing/image/1324.jpg","BOXBLURPass","Reset","translate","click","function *\\( *\\)","InvertPass","588xQsEgl","onWindowResize","addPass","chain","text","title","constructor","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","126iHUAxi","VIGNETTE1Pass","1797688uKquwG","map","plugins/postProcessing/image/1324-normal.jpg","toString","10510UAyeTB","36055TAKlrT","call","VIGNETTE2Pass","Mesh","info","新增通道","addButton","4olARWE","addFolder","error","22561cAcqNE","target","__proto__","addBlade","3225888vutKxp","toScreen","trace","random","SNOISEPass","log","change","6204702OnlWov","table","SOBELPass","input","material","return (function() ","19869qUriAk","add","length","BufferGeometry","bind","value","SEPIAPass","移除~","removePass","list","后处理类型"];return(X=function(){return t})()}W(void 0,(function(){const t=q,n=function(){const t=q;let n;try{n=Function(t(493)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(444)]=n.console||{},o=[t(486),t(425),t(471),t(476),"exception",t(489),t(483)];for(let r=0;r<o[t(496)];r++){const n=W.constructor.prototype[t(416)](W),s=o[r],a=e[s]||n;n[t(479)]=W[t(416)](W),n[t(465)]=a[t(465)].bind(a),e[s]=n}}))();function K(t){function n(t){const e=q;if("string"==typeof t)return function(t){}.constructor(e(436))[e(428)](e(426));1!==(""+t/t)[e(496)]||t%20==0?function(){return!0}[e(458)](e(443)+e(437))[e(468)](e(434)):function(){return!1}.constructor(e(443)+"gger")[e(428)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const Z=A(m({__name:"postProcessing",async setup(o){const s=q;let a,i;const{camera:c,renderer:l,scene:u,sizes:v}=t();for(var m=new(r[s(415)]),h=[],y=0;y<100;y++){var I=new f(100,100,100);I[s(448)](1500*Math[s(484)](),1500*Math[s(484)](),1500*Math[s(484)]()),h.push(I)}m=p(h);const b=([a,i]=x((()=>e({map:s(445)}))),a=await a,i(),a),_=([a,i]=x((()=>e({map:s(464)}))),a=await a,i(),a);var S=new(r[s(432)])({map:b.map,normalMap:_[s(463)],normalScale:new d(.8,-.8),shininess:100}),U=new(r[s(470)])(m,S);U.castShadow=!0,U.receiveShadow=!0,u[s(417)][s(495)](U);const w=new j(l[s(417)],{useRGBA:!0}),P=new g;let D=null,E=[{text:s(451),value:{InvertPass:V}},{text:s(441),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:s(418),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:s(485),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:s(446),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:"DENOISEPass",value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:s(429),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:_[s(463)]}}},{text:s(490),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:"RGBPass",value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:"DOTPass",value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(431),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:s(435),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:s(461),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(469),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:s(433),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:"TOONPass",value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],A="InvertPass",L=V,M=null;P[s(480)]({view:s(421),label:s(422),options:E,value:""}).on(s(487),(t=>{D=t[s(417)]}));const C=P[s(473)]({title:"新增",label:s(472)});let z=0;C.on(s(449),(t=>{const n=s;A=Object[n(440)](D)[0],L=Object[n(439)](D)[0],M=Object[n(439)](D)[1];let e=z++,o=P[n(475)]({title:A});for(const s in M){let t=M[s];o[n(480)]({view:n(456),label:s,parse:t=>String(t),value:t})}o[n(473)]({title:n(419)+e,label:n(424)}).on(n(449),(t=>{const e=n;let o=t[e(478)][e(457)][e(423)]("~")[1];w[e(420)](o)})).on("click",(()=>{o.dispose()}));let r=F(M,t.target.label,t[n(417)]);w[n(454)](A,L,r,e)})),w[s(453)](l[s(417)],c[s(417)]);const{onLoop:T}=n();return T((({delta:t})=>{const n=s;U&&(l[n(417)].autoClearColor=!0,w[n(447)](),U[n(492)]=S,w.render(u[n(417)],c[n(417)]),w[n(430)](),w[n(482)](u[n(417)],c[n(417)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),$=nt;!function(t,n){const e=nt,o=tt();for(;;)try{if(791971===parseInt(e(214))/1+-parseInt(e(212))/2*(-parseInt(e(230))/3)+-parseInt(e(208))/4+parseInt(e(231))/5+parseInt(e(206))/6+parseInt(e(195))/7+-parseInt(e(202))/8)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[nt(234)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){Q(this,(function(){const t=nt,n=new RegExp(t(223)),e=new RegExp(t(222),"i"),o=ot(t(205));n[t(221)](o+t(216))&&e[t(221)](o+t(199))?ot():o("0")}))()}();const Y=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[nt(234)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();Y(void 0,(function(){const t=nt,n=function(){const t=nt;let n;try{n=Function(t(215)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n.console=n.console||{},o=[t(204),t(233),t(198),t(232),t(211),t(218),t(225)];for(let r=0;r<o.length;r++){const n=Y[t(210)][t(201)].bind(Y),s=o[r],a=e[s]||n;n.__proto__=Y[t(207)](Y),n[t(217)]=a[t(217)][t(207)](a),e[s]=n}}))();const J={ref:$(224),position:[600,850,-1500],fov:45,near:.1,far:1e5};function tt(){const t=["2249680lxQkrO","string","constructor","exception","632822SKrWuA","TresDirectionalLight","358275DlEXAK","return (function() ","chain","toString","table","call","debu","test","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","function *\\( *\\)","perspectiveCameraRef","trace","length","#ffffff","gger","TresCanvas","3HVCPDJ","3688955PszgNH","error","warn","apply","action","10412416TltXpP","TresAmbientLight","while (true) {}","info","input","postProcessingEditor","prototype","15703472aWkcKF","counter","log","init","2504160RMLbHt","bind"];return(tt=function(){return t})()}function nt(t,n){const e=tt();return nt=function(t,n){return e[t-=194]},nt(t,n)}const et=m({__name:$(200),setup(t){const e={clearColor:"#000000",shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:"manual"},r={autoRotate:!0,enableDamping:!0},{onLoop:s}=n();return s((({delta:t})=>{})),(t,n)=>{const s=nt,a=h(s(229));return y(),I(a,E(e,{"window-size":""}),{default:b((()=>[_("TresPerspectiveCamera",J,null,512),S(U(o),w(P(r)),null,16),n[0]||(n[0]=_(s(196),{color:s(227),intensity:2},null,-1)),n[1]||(n[1]=_(s(213),{position:[100,100,0],intensity:2,color:s(227)},null,-1)),(y(),I(D,null,{default:b((()=>[S(Z)])),_:1}))])),_:1},16)}}});function ot(t){function n(t){const e=nt;if(typeof t===e(209))return function(t){}[e(210)](e(197))[e(234)](e(203));1!==(""+t/t)[e(226)]||t%20==0?function(){return!0}[e(210)](e(220)+e(228))[e(219)](e(194)):function(){return!1}[e(210)](e(220)+e(228))[e(234)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{et as default};
