import{m as t,e as n,a as e,o}from"./@tresjs.9lmhsV6t1740450466561.js";import{_ as r,l as s,b as a,ar as i,s as c,O as l,m as u,aV as v,A as f,cS as p,av as d,c2 as m,bk as g}from"./three.HaMTRCf61740450466561.js";import{P as x}from"./tweakpane.yDiyAAkA1740450466561.js";import{d as h,a3 as y,e as I,o as b,f as _,g as S,N as U,j as w,u as D,aj as P,ak as E,al as A,m as L}from"./@vue.NRI7TcgI1740450466561.js";import{_ as M}from"./@fesjs.25ZLMwYe1740450466561.js";import"./@vueuse.q8gKo7tC1740450466561.js";import"./vue-router.Ni9W6b_H1740450466561.js";import"./lodash-es.pklfUAS51740450466561.js";import"./@qlin.yHhFDldE1740450466561.js";import"./pinia.O-LUmvrn1740450466561.js";import"./@floating-ui.BPbuo5Gx1740450466561.js";import"./@juggle.7yjBMqoW1740450466561.js";!function(t,n){const e=N,o=R();for(;;)try{if(588102===parseInt(e(311))/1+parseInt(e(319))/2*(-parseInt(e(274))/3)+-parseInt(e(269))/4*(parseInt(e(282))/5)+-parseInt(e(313))/6+-parseInt(e(310))/7*(-parseInt(e(281))/8)+-parseInt(e(300))/9*(parseInt(e(305))/10)+parseInt(e(277))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const F=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[N(297)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){F(this,(function(){const t=N,n=new RegExp(t(275)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=T(t(285));n[t(271)](o+t(306))&&e[t(271)](o+t(286))?T():o("0")}))()}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();C(void 0,(function(){const t=N;let n;try{n=Function(t(298)+t(324)+");")()}catch(r){n=window}const e=n.console=n[t(265)]||{},o=[t(292),t(325),t(287),"error",t(266),"table",t(315)];for(let s=0;s<o[t(276)];s++){const n=C[t(302)][t(289)].bind(C),r=o[s],a=e[r]||n;n[t(320)]=C.bind(C),n[t(309)]=a[t(309)][t(317)](a),e[r]=n}}))();function z(t,n,e){const o=N;if(typeof t!==o(308)||null===t)return t;const r=Array[o(270)](t)?[]:{};for(const s in t)t.hasOwnProperty(s)&&(r[s]=z(t[s])),s==n&&(r[n]=e);return r}function N(t,n){const e=R();return(N=function(t,n){return e[t-=263]})(t,n)}function T(t){function n(t){const e=N;if(typeof t===e(291))return function(t){}[e(302)](e(296))[e(297)](e(322));1!==(""+t/t)[e(276)]||t%20==0?function(){return!0}[e(302)](e(293)+"gger")[e(273)](e(294)):function(){return!1}.constructor(e(293)+e(312))[e(297)](e(301)),n(++t)}try{if(t)return n;n(0)}catch(e){}}function R(){const t=["trace","v3v","bind","\" couldn't be loaded.","508RuhDqn","__proto__",'" load was aborted.',"counter","Matrix4",'{}.constructor("return this")( )',"warn","Vector2","message","random","Matrix3","console","exception","open","exec","2553556WkGlwi","isArray","test","responseText","call","861ScmEcF","function *\\( *\\)","length","4062212fkhHoS","type","lastIndex","value","566880fZHODF","5Mxgsmo","WagnerLoadShaderException","onerror","init","input","info","index","prototype","Vector4","string","log","debu","action",'Shader "',"while (true) {}","apply","return (function() ","Vector3","252isysvq","stateObject","constructor","onabort","Matrix2","122180LdXfAL","chain","Texture","object","toString","35NUmEvg","1006905vCniBl","gger","534024uWKcfY","replace"];return(R=function(){return t})()}function G(){const t=["passItems","read","minFilter","259FUgwlp","2103oVqeYh","wrapT","renderer","front","set","55290uPjNyN","push","stateObject","gger","far","MeshBasicMaterial","passes","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","camera","1906uqkIOr","test","wrapS","3069FdlXEB","stencilBuffer","useRGBA","render","setSize","magFilter","__proto__","tInput","2954580PXptHO","back","addPass","WebGLRenderTarget","RGBAFormat","scene","setRenderTarget","startTime","CopyPass","11bIOYAd","swapBuffers","RGBFormat","ClampToEdgeWrapping","error","texture","warn","trace","settings","constructor","resolution","write","input","1172ykPggL","clone","height","width","LinearFilter","4027015fFmaSH","2728RtcYyL","now","loadShadervf","Stack","params","copyPass","quad","shader","console","innerHeight","type","removePass","getOfflineTexture","splice","near","9171780tJEfKi","material","string","add","init","makeOrthographic","apply","pass","Pass","projectionMatrix","uniforms","time","bind","length","toString","info","scale","802MFgvOQ","return (function() ","debu","Scene","value","Mesh","call",'{}.constructor("return this")( )',"makePerspective"];return(G=function(){return t})()}const B=j;function j(t,n){const e=G();return(j=function(t,n){return e[t-=136]})(t,n)}!function(t,n){const e=j,o=G();for(;;)try{if(447041===parseInt(e(179))/1*(parseInt(e(152))/2)+-parseInt(e(165))/3*(parseInt(e(212))/4)+-parseInt(e(217))/5+-parseInt(e(170))/6*(-parseInt(e(164))/7)+-parseInt(e(218))/8*(parseInt(e(182))/9)+-parseInt(e(190))/10*(parseInt(e(199))/11)+parseInt(e(233))/12)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[j(141)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){O(this,(function(){const t=j,n=new RegExp("function *\\( *\\)"),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=k(t(139));n[t(180)](o+"chain")&&e[t(180)](o+t(211))?k():o("0")}))()}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();H(void 0,(function(){const t=j;let n;try{n=Function(t(153)+t(159)+");")()}catch(r){n=window}const e=n[t(226)]=n[t(226)]||{},o=["log",t(205),t(150),t(203),"exception","table",t(206)];for(let s=0;s<o[t(148)];s++){const n=H[t(208)].prototype.bind(H),r=o[s],a=e[r]||n;n[t(188)]=H.bind(H),n[t(149)]=a[t(149)][t(147)](a),e[r]=n}}))();class V{constructor(t,n){const e=j;this[e(215)]=1,this.height=1,this[e(207)]=n||{},this[e(184)]=this[e(207)][e(184)]||!1,this[e(167)]=t,this[e(223)]=this[e(198)](this[e(207)]),this[e(195)]=new(r[e(155)]),this[e(224)]=new(r[e(157)])(new c(1,1),new(r[e(175)])),this[e(195)][e(138)](this[e(224)]),this[e(178)]=new l(1,1,1,1,-1e4,1e4),this.front=new(r[e(193)])(1,1,{minFilter:void 0!==this.settings[e(163)]?this[e(207)][e(163)]:u,magFilter:void 0!==this[e(207)][e(187)]?this[e(207)][e(187)]:r[e(216)],wrapS:void 0!==this[e(207)][e(181)]?this.settings[e(181)]:v,wrapT:void 0!==this.settings[e(166)]?this[e(207)].wrapT:r[e(202)],format:this.useRGBA?r[e(194)]:r[e(201)],type:void 0!==this[e(207)][e(228)]?this.settings.type:f,stencilBuffer:void 0===this[e(207)][e(183)]||this[e(207)][e(183)]}),this.back=this[e(168)][e(213)](),this[e(197)]=Date[e(219)](),this[e(176)]={},this[e(221)]={passItems:[],passes:[]}}[B(192)](t,n,e,o){const r=B;this[r(220)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(225)]};this[r(221)].passItems[r(171)](s)}[B(229)](t){const n=B;for(let e=this.Stack[n(161)][n(148)]-1;e>=0;e--)this[n(221)][n(161)][e].uuid===parseInt(t)&&this[n(221)][n(161)][n(231)](e,1);console.log(this[n(221)].passItems)}[B(198)](){this[B(143)].call(this);return this.loadShadervf("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[B(220)](t){const n=B,e=n(177);return this[n(225)]=function(t,n){const e=N,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,c=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,l={sampler2D:{type:"t",value:()=>new(r[N(307)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[N(326)])},vec3:{type:"v3",value:()=>new a},vec4:{type:"v4",value:()=>new i},bvec2:{type:"v2",value:()=>new(r[N(326)])},bvec3:{type:"v3",value:()=>new(r[N(299)])},bvec4:{type:"v4",value:()=>new(r[N(290)])},ivec2:{type:"v2",value:()=>new(r[N(326)])},ivec3:{type:"v3",value:()=>new a},ivec4:{type:"v4",value:()=>new(r[N(290)])},mat2:{type:"v2",value:()=>new(r[N(304)])},mat3:{type:"v3",value:()=>new(r[N(264)])},mat4:{type:"v4",value:()=>new(r[N(323)])}},u={float:{type:"fv",value:()=>[]},vec3:{type:e(316),value:()=>[]}};let v;const f={resolution:{type:"v2",value:new(r[e(326)])(1,1),default:!0},time:{type:"f",value:Date.now(),default:!0},tInput:{type:"t",value:new(r[e(307)]),default:!0}};let p,d;for(;null!==(v=o[e(268)](n));)v[e(288)]===o.lastIndex&&o[e(279)]++,p=v[1],d=v[2],f[d]={type:l[p][e(278)],value:l[p][e(280)]()};for(;null!==(v=c[e(268)](n));)v[e(288)]===o[e(279)]&&o.lastIndex++,p=v[1],d=v[2],v[3],f[d]={type:u[p].type,value:u[p][e(280)]()};return new s({uniforms:f,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(225)]}[B(143)](t){const n=B;this[n(225)]=null,this[n(222)]={}}Reset(){const t=B;this[t(162)]=this.front,this[t(210)]=this[t(191)]}onWindowResize(t,n){const e=B,o=window.innerWidth,r=window[e(227)];t[e(186)](1*o,1*r),n.projectionMatrix[e(160)](70,o/r,n[e(232)],n.far),this.setSize(o,r);return this[e(230)](o,r,!0)}[B(186)](t,n){const e=B;this[e(215)]=t,this[e(214)]=n,this[e(178)][e(144)][e(140)](t/-2,t/2,n/2,n/-2,this[e(178)][e(232)],this[e(178)][e(174)]),this[e(224)][e(151)].set(t,n,1),this.front.setSize(t,n),this[e(191)][e(186)](t,n)}getOfflineTexture(t,n,e){const o=B;return new(r[o(193)])(t,n,{minFilter:r[o(216)],magFilter:r[o(216)],format:e?r[o(194)]:p})}[B(185)](t,n,e,o){const r=B;this[r(167)][r(196)](this[r(210)]),this[r(167)][r(185)](t,n),o||this[r(200)]()}[B(200)](){const t=B,n=this[t(210)];this[t(210)]=this[t(162)],this[t(162)]=n}[B(142)](){const t=B;for(let n=0;n<this[t(221)][t(161)][t(148)];n++){const e=this.Stack[t(161)][n][t(225)],o=this[t(221)][t(161)][n][t(222)];if(this.renderer.setRenderTarget(this[t(210)]),e instanceof s){this[t(224)][t(136)]=e,this[t(224)].material.uniforms.tInput[t(156)]=this.read[t(204)],this.quad[t(136)][t(145)].resolution[t(156)][t(169)](this.width,this.height),this[t(224)][t(136)][t(145)][t(146)][t(156)]=.001*(Date[t(219)]()-this[t(197)]);for(const n in o)this.quad[t(136)][t(145)][n].value=o[n];this[t(167)].render(this[t(195)],this[t(178)]),this[t(200)]()}}}toScreen(t,n){const e=B;this[e(167)].setRenderTarget(null),this.quad.material=this.copyPass,this[e(224)].material[e(145)][e(189)][e(156)]=this[e(162)][e(204)],this.quad[e(136)].uniforms[e(209)][e(156)][e(169)](this[e(215)],this[e(214)]),this[e(167)][e(185)](this[e(195)],this.camera)}}function k(t){function n(t){const e=j;if(typeof t===e(137))return function(t){}[e(208)]("while (true) {}")[e(141)]("counter");1!==(""+t/t).length||t%20==0?function(){return!0}[e(208)](e(154)+e(173))[e(158)]("action"):function(){return!1}[e(208)]("debu"+e(173))[e(141)](e(172)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const W="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}";!function(t,n){const e=$,o=q();for(;;)try{if(397643===parseInt(e(436))/1*(-parseInt(e(441))/2)+-parseInt(e(415))/3+-parseInt(e(466))/4*(-parseInt(e(459))/5)+-parseInt(e(465))/6*(-parseInt(e(477))/7)+parseInt(e(461))/8+parseInt(e(470))/9*(parseInt(e(420))/10)+parseInt(e(431))/11*(parseInt(e(488))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const X=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[$(496)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function q(){const t=["6tOaNrc","440204qFwhOa","stateObject","toString","FXAAPass","171ygGRcZ","render","list","map","关闭通道","addPass","counter","2834237psDccT","Mesh","toScreen","bind","material","DOTPass","onWindowResize","input","POISSONPass","VIGNETTE2Pass","InvertPass","1236ThEgTl","target","plugins/postProcessing/image/1324-normal.jpg","text",'{}.constructor("return this")( )',"test","value","warn","apply","trace","Vector2","272355HfLTAG","pass","constructor","BOXBLURPass","string","38790cAgnHA","random","table","length","while (true) {}","dispose","removePass","values","CIRCULARPass","DENOISEPass","Reset","14729toELaw","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","SOBELPass","CGAPass","mergeGeometries","412077HhyzCm","chain","BufferGeometry","console","init","2VFKmaD","call","change","plugins/postProcessing/image/1324.jpg","SEPIAPass","info","debu","push","action","VIGNETTE1Pass","function *\\( *\\)","移除~","title","autoClearColor","后处理类型","addButton","label","新增通道","5XvNsxq","SNOISEPass","1391560yqjXEt","click","FREICHENPass","castShadow"];return(q=function(){return t})()}!function(){X(this,(function(){const t=$,n=new RegExp(t(451)),e=new RegExp(t(432),"i"),o=Y(t(440));n[t(493)](o+t(437))&&e[t(493)](o+t(484))?Y():o("0")}))()}();const Z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[$(496)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function $(t,n){const e=q();return($=function(t,n){return e[t-=413]})(t,n)}Z(void 0,(function(){const t=$,n=function(){const t=$;let n;try{n=Function("return (function() "+t(492)+");")()}catch(e){n=window}return n}(),e=n[t(439)]=n.console||{},o=["log",t(495),t(446),"error","exception",t(422),t(413)];for(let r=0;r<o[t(423)];r++){const n=Z[t(417)].prototype[t(480)](Z),s=o[r],a=e[s]||n;n.__proto__=Z[t(480)](Z),n[t(468)]=a[t(468)][t(480)](a),e[s]=n}}))();function Y(t){function n(t){const e=$;if(typeof t===e(419))return function(t){}[e(417)](e(424))[e(496)](e(476));1!==(""+t/t).length||t%20==0?function(){return!0}[e(417)](e(447)+"gger")[e(442)](e(449)):function(){return!1}[e(417)](e(447)+"gger")[e(496)](e(467)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const J=M(h({__name:"postProcessing",async setup(o){const s=$;let a,i;const{camera:c,renderer:l,scene:u,sizes:v}=t();for(var f=new(r[s(438)]),p=[],h=0;h<100;h++){var I=new d(100,100,100);I.translate(1500*Math[s(421)](),1500*Math[s(421)](),1500*Math[s(421)]()),p[s(448)](I)}f=m[s(435)](p);const b=([a,i]=y((()=>e({map:s(444)}))),a=await a,i(),a),_=([a,i]=y((()=>e({map:s(490)}))),a=await a,i(),a);var S=new g({map:b[s(473)],normalMap:_.map,normalScale:new(r[s(414)])(.8,-.8),shininess:100}),U=new(r[s(478)])(f,S);U[s(464)]=!0,U.receiveShadow=!0,u[s(494)].add(U);const w=new V(l[s(494)],{useRGBA:!0}),D=new x;let P=null,E=[{text:s(487),value:{InvertPass:W}},{text:s(469),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:s(445),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:s(460),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:s(418),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:s(429),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:s(434),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:_[s(473)]}}},{text:s(433),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:"RGBPass",value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:s(482),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(428),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:s(485),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:s(450),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(486),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:s(463),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:"TOONPass",value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],A=s(487),L=W,M=null;D.addBlade({view:s(472),label:s(455),options:E,value:""}).on(s(443),(t=>{P=t[s(494)]}));const F=D[s(456)]({title:"新增",label:s(458)});let C=0;F.on(s(462),(t=>{const n=s;A=Object.keys(P)[0],L=Object[n(427)](P)[0],M=Object[n(427)](P)[1];let e=C++,o=D.addFolder({title:A});for(const s in M){let t=M[s];o.addBlade({view:n(491),label:s,parse:t=>String(t),value:t})}o[n(456)]({title:n(452)+e,label:n(474)}).on(n(462),(t=>{const e=n;let o=t[e(489)][e(453)].split("~")[1];w[e(426)](o)})).on(n(462),(()=>{o[n(425)]()}));let r=z(M,t.target[n(457)],t[n(494)]);w[n(475)](A,L,r,e)})),w[s(483)](l[s(494)],c[s(494)]);const{onLoop:N}=n();return N((({delta:t})=>{const n=s;U&&(l[n(494)][n(454)]=!0,w[n(430)](),U[n(481)]=S,w[n(471)](u[n(494)],c.value),w[n(416)](),w[n(479)](u[n(494)],c.value))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]);function K(){const t=["debu","TresAmbientLight","5rPHdqZ","trace","call","manual","warn","length","1070115jmmUim","3109348hNSlua","504662AvxxIN","713264RADxNb","return (function() ","console","gger","counter","while (true) {}","TresCanvas","function *\\( *\\)","#ffffff","info","constructor","__proto__","perspectiveCameraRef","log","toString","1967042mMkUpq","4YMDBJo","test","error","postProcessingEditor","13aRYJPU","3065658ffNKog","apply","string","10bRIEli","2pFJCfp","stateObject","prototype","TresDirectionalLight","bind","27wcvCzz","15123384eRXBXn"];return(K=function(){return t})()}const Q=ot;!function(t,n){const e=ot,o=K();for(;;)try{if(335570===-parseInt(e(416))/1*(parseInt(e(399))/2)+-parseInt(e(414))/3*(-parseInt(e(433))/4)+parseInt(e(408))/5*(-parseInt(e(438))/6)+-parseInt(e(432))/7+-parseInt(e(417))/8*(parseInt(e(404))/9)+parseInt(e(398))/10*(parseInt(e(415))/11)+parseInt(e(405))/12*(parseInt(e(437))/13))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const tt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){tt(this,(function(){const t=ot,n=new RegExp(t(424)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=st("init");n.test(o+"chain")&&e[t(434)](o+"input")?st():o("0")}))()}();const nt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[ot(439)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();nt(void 0,(function(){const t=ot,n=function(){const t=ot;let n;try{n=Function(t(418)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(419)]=n.console||{},o=[t(430),t(412),t(426),t(435),"exception","table",t(409)];for(let r=0;r<o[t(413)];r++){const n=nt[t(427)][t(401)][t(403)](nt),s=o[r],a=e[s]||n;n[t(428)]=nt.bind(nt),n[t(431)]=a[t(431)][t(403)](a),e[s]=n}}))();const et={ref:Q(429),position:[600,850,-1500],fov:45,near:.1,far:1e5};function ot(t,n){const e=K();return(ot=function(t,n){return e[t-=398]})(t,n)}const rt=h({__name:Q(436),setup(t){const e=Q,r={clearColor:"#000000",shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(411)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=I(a(423));return b(),_(i,L(r,{"window-size":""}),{default:S((()=>[U("TresPerspectiveCamera",et,null,512),w(D(o),P(E(s)),null,16),n[0]||(n[0]=U(a(407),{color:a(425),intensity:2},null,-1)),n[1]||(n[1]=U(a(402),{position:[100,100,0],intensity:2,color:a(425)},null,-1)),(b(),_(A,null,{default:S((()=>[w(J)])),_:1}))])),_:1},16)}}});function st(t){function n(t){const e=ot;if(typeof t===e(440))return function(t){}.constructor(e(422))[e(439)](e(421));1!==(""+t/t)[e(413)]||t%20==0?function(){return!0}[e(427)](e(406)+"gger")[e(410)]("action"):function(){return!1}.constructor("debu"+e(420)).apply(e(400)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{rt as default};
