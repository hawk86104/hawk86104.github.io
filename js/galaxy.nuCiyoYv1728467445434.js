import{bU as n,ak as t,am as e,C as o,aN as a,a as r}from"./three.5octV-9b1728467445434.js";import{U as s,e as i,F as c,Y as l}from"./@tresjs.ED4ePb8T1728467445434.js";import{d as u,b as f,w as d,e as m,o as p,E as h,j as v,u as g,g as w,L as M,aj as y,ak as b,F as C}from"./@vue.JNsx1iN61728467445434.js";import"./@vueuse.G8I04tzi1728467445434.js";function P(n,t){const e=T();return(P=function(n,t){return e[n-=396]})(n,t)}const x=P;!function(n,t){const e=P,o=T();for(;;)try{if(111797===parseInt(e(443))/1*(-parseInt(e(412))/2)+-parseInt(e(453))/3*(parseInt(e(423))/4)+parseInt(e(428))/5*(-parseInt(e(405))/6)+-parseInt(e(435))/7+-parseInt(e(454))/8*(parseInt(e(421))/9)+-parseInt(e(459))/10+parseInt(e(430))/11)break;o.push(o.shift())}catch(a){o.push(o.shift())}}();const z=function(){let n=!0;return function(t,e){const o=n?function(){if(e){const n=e.apply(t,arguments);return e=null,n}}:function(){};return n=!1,o}}();function T(){const n=["color","724617lUjHwA","setAttribute","848TNtilM","init","branches","error","forEach","773545YOaJYC","apply","9278456DkTpwG","size","geometry","value","insideColor","1258425xyGfyA","sin","bind","position","a-scale","randomnessPower","log","stateObject","1685MRovsM","info","TresPoints","function *\\( *\\)","cos","uniforms","length","lerp","a-randomness","console","126YQteVc","16VXZYtQ","#b5f28d","TresBufferGeometry","random","count","2222300ducDCK","string","outsideColor","bufferRef","gger","constructor","galaxy","exception","test","debu","6XBvhCf","__proto__","#1b3984","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","return (function() ","prototype","action","6hWRaZb",'{}.constructor("return this")( )',"clone","black","TresPerspectiveCamera","keys","call","radius"];return(T=function(){return n})()}!function(){z(this,(function(){const n=P,t=new RegExp(n(446)),e=new RegExp(n(408),"i"),o=I(n(424));t.test(o+"chain")&&e[n(403)](o+"input")?I():o("0")}))()}();const S=function(){let n=!0;return function(t,e){const o=n?function(){if(e){const n=e[P(429)](t,arguments);return e=null,n}}:function(){};return n=!1,o}}();S(void 0,(function(){const n=P,t=function(){const n=P;let t;try{t=Function(n(409)+n(413)+");")()}catch(e){t=window}return t}(),e=t[n(452)]=t[n(452)]||{},o=[n(441),"warn",n(444),n(426),n(402),"table","trace"];for(let a=0;a<o[n(449)];a++){const t=S.constructor[n(410)].bind(S),r=o[a],s=e[r]||t;t[n(406)]=S[n(437)](S),t.toString=s.toString[n(437)](s),e[r]=t}}))();const _=M(x(416),{position:[3,3,3]},null,-1),j=[x(438),x(439),x(420),x(451)],A=u({__name:x(401),setup(u){const P=x,z={clearColor:P(415),shadows:!0,alpha:!1,shadowMapType:n,outputColorSpace:t,toneMapping:e,windowSize:!0},T={count:3e4,size:20,radius:5,branches:5,spin:4,randomness:.13,randomnessPower:7.5,insideColor:P(455),outsideColor:P(407)},S=new o(T[P(434)]),A=new o(T[P(397)]),I=new Float32Array(3*T.count),F=new Float32Array(3*T[P(458)]),R=new Float32Array(T[P(458)]),k=new Float32Array(3*T.count);for(let n=0;n<T[P(458)];n++){const t=3*n,e=Math.random()*T[P(419)],o=n%T[P(425)]*Math.PI*2/T[P(425)];I[t]=Math[P(447)](o)*e,I[t+1]=0,I[t+2]=Math[P(436)](o)*e;const a=Math[P(457)]()**T[P(440)]*(Math[P(457)]()<.5?-1:1),r=Math[P(457)]()**T[P(440)]*(Math[P(457)]()<.5?-1:1),s=Math[P(457)]()**T[P(440)]*(Math[P(457)]()<.5?-1:1);k[t]=a,k[t+1]=r,k[t+2]=s;const i=S[P(414)]();i[P(450)](A,e/T[P(419)]),F[t+0]=i.r,F[t+1]=i.g,F[t+2]=i.b,R[n]=Math[P(457)]()}const O={transparent:!0,depthWrite:!1,blending:a,vertexColors:!0,vertexShader:"uniform float uSize;\nuniform float uTime;\n\nattribute float aScale;\nattribute vec3 aRandomness;\n\nvarying vec3 vColor;\n\nvoid main() {\n    vec4 modelPosition = modelMatrix * vec4(position, 1.0);\n\n    \n    float angle = atan(modelPosition.x, modelPosition.z);\n    float distanceToCenter = length(modelPosition.xz);\n    float angleOffset = (1.0 / distanceToCenter) * uTime * 0.2;\n    angle += angleOffset;\n\n    modelPosition.x = distanceToCenter * cos(angle);\n    modelPosition.z = distanceToCenter * sin(angle);\n\n    \n    modelPosition.xyz += aRandomness;\n\n    vec4 viewPosition = viewMatrix * modelPosition;\n    vec4 projectedPosition = projectionMatrix * viewPosition;\n    gl_Position = projectedPosition;\n\n    gl_PointSize = uSize * aScale;\n\n    \n    gl_PointSize *= ( 1.0 / - viewPosition.z);\n\n    \n    vColor = color;\n\n}",fragmentShader:"varying vec3 vColor;\n\nvoid main()\n{\n    \n    float strength = distance(gl_PointCoord, vec2(0.5));\n    strength = 1.0 - strength;\n    strength = pow(strength, 5.0);\n\n    \n    vec3 color = mix(vec3(0.0), vColor, strength);\n    gl_FragColor = vec4(color, 1.0);\n}",uniforms:{uTime:{value:0},uSize:{value:T[P(431)]}}};const Y=f(null),{onLoop:E}=s();E((({elapsed:n})=>{const t=P;Y[t(433)]&&(Y.value.material[t(448)].uTime[t(433)]=n)}));const{count:Z,size:G,radius:U,branches:B,spin:D,randomness:L,randomnessPower:N,insideColor:Q,outsideColor:V}=i({count:{value:3e4,min:0,max:1e5,step:1},size:{value:20,min:.01,max:40,step:1},radius:{value:5,min:.1,max:20,step:.01},branches:{value:5,min:2,max:10,step:1},spin:{value:4,min:-5,max:5,step:.01},randomness:{value:.13,min:.1,max:.2,step:.01},randomnessPower:{value:7.5,min:1,max:10,step:.001},insideColor:P(455),outsideColor:"#1b3984"});return d([Z[P(433)],G[P(433)],U[P(433)],B[P(433)],D[P(433)],L[P(433)],N[P(433)],Q.value,V.value],(n=>{const t=P;n[t(427)](((n,e)=>{const o=t;T[Object[o(417)](T)[e]]=n[o(433)]})),function(){const n=P;if(Y[n(433)]){const t=new o(T[n(434)]),e=new o(T[n(397)]),a=new Float32Array(3*T[n(458)]),s=new Float32Array(3*T[n(458)]),i=new Float32Array(T.count),c=new Float32Array(3*T[n(458)]);for(let o=0;o<T[n(458)];o++){const r=3*o,l=Math[n(457)]()*T.radius,u=o%T[n(425)]*Math.PI*2/T.branches;a[r]=Math[n(447)](u)*l,a[r+1]=0,a[r+2]=Math[n(436)](u)*l;const f=Math[n(457)]()**T[n(440)]*(Math[n(457)]()<.5?-1:1),d=Math.random()**T[n(440)]*(Math[n(457)]()<.5?-1:1),m=Math[n(457)]()**T[n(440)]*(Math[n(457)]()<.5?-1:1);c[r]=f,c[r+1]=d,c[r+2]=m;const p=t[n(414)]();p[n(450)](e,l/T[n(419)]),s[r+0]=p.r,s[r+1]=p.g,s[r+2]=p.b,i[o]=Math[n(457)]()}Y[n(433)][n(432)][n(422)](n(438),new r(a,3)),Y.value.geometry[n(422)]("aRandomness",new r(c,3)),Y[n(433)][n(432)][n(422)](n(420),new r(s,3)),Y[n(433)].geometry.setAttribute("aScale",new r(i,1))}}()})),(n,t)=>{const e=P,o=m("TresCanvas");return p(),h(C,null,[v(g(c)),v(o,y(b(z)),{default:w((()=>[_,M(e(445),{ref_key:e(398),ref:Y},[M(e(456),{position:[g(I),3],"a-scale":[g(R),1],color:[g(F),3],"a-randomness":[g(k),3]},null,8,j),M("TresShaderMaterial",y(b(O)),null,16)],512),v(g(l))])),_:1},16)],64)}}});function I(n){function t(n){const e=P;if(typeof n===e(396))return function(n){}[e(400)]("while (true) {}").apply("counter");1!==(""+n/n)[e(449)]||n%20==0?function(){return!0}[e(400)](e(404)+e(399))[e(418)](e(411)):function(){return!1}[e(400)](e(404)+"gger")[e(429)](e(442)),t(++n)}try{if(n)return t;t(0)}catch(e){}}export{A as default};
