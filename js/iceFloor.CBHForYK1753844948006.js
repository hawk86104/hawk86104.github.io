import{b as a,a as r}from"./@tresjs.DRasrl5q1753844948006.js";import{P as e}from"./tweakpane.C0HtAJSg1753844948006.js";import{d as n,aa as l,w as t,G as o,o as i,I as c,u as s,r as u,h as v,e as p,f as m,j as d,a5 as x,a7 as f,a8 as C,m as g}from"./@vue.BzMISRrV1753844948006.js";import{ai as k,aL as T,r as w,aH as P,C as h,ae as S}from"./three.EZPPomHU1753844948006.js";import"./postprocessing.BwliAN0R1753844948006.js";import"./@vueuse.KQ9lc16w1753844948006.js";const D=["rotate-x"],M=["vertexShader","fragmentShader"],b=n({__name:"iceFloor",props:{uParallaxDistance:{default:1},uTintColor:{default:"#666666"},uTintStrength:{default:.1},uStyle:{default:1}},async setup(r){let e,n;const u=r,v=Array.from({length:7},((a,r)=>`./plugins/water/images/textures/${r+1}.png`));v.push("./plugins/water/images/textures/super-perlin.png");const p=([e,n]=l((()=>a(v))),e=await e,n(),e);p.forEach((a=>{a.colorSpace=k,a.wrapS=T,a.wrapT=T,a.magFilter=w,a.minFilter=P}));const m={uTrailMap:{value:null},uCracksMap:new S(p[u.uStyle]),uPerlin:new S(p[7]),uParallaxDistance:{value:u.uParallaxDistance},uTintColor:{value:new h(u.uTintColor)},uTintStrength:{value:u.uTintStrength}};return t((()=>[u.uParallaxDistance,u.uTintColor,u.uTintStrength,u.uStyle]),(([a,r,e,n])=>{m.uParallaxDistance.value=a,m.uTintColor.value.set(r),m.uTintStrength.value=e,m.uCracksMap.value=p[n]})),(a,r)=>(i(),o("TresGroup",null,[c("TresMesh",{"rotate-x":-Math.PI/2},[r[0]||(r[0]=c("TresPlaneGeometry",{args:[40,40]},null,-1)),c("TresShaderMaterial",{vertexShader:s("uniform float uParallaxDistance;\n\nvarying vec2 vParallax;\nvarying vec2 vUv;\n\nvoid main() {\n\n  vUv = uv;\n\n  vec3 pos = position;\n  vec4 wPos = modelMatrix * vec4(pos, 1.0);\n\n  mat3 tbn = mat3(vec3(1.,0,0), vec3(0,0.,-1.), vec3(0.,1.,0.));\n  tbn = transpose(tbn);\n\n  vec3 viewDir = normalize(wPos.xyz - cameraPosition);\n  vec3 tbnViewDir = tbn * viewDir;\n\n  vParallax = tbnViewDir.xy;\n  vParallax *= uParallaxDistance / dot(-tbnViewDir, vec3(0.0,0.0,1.0));\n\n  gl_Position = projectionMatrix * viewMatrix * wPos;\n\n}"),fragmentShader:s("uniform sampler2D uCracksMap;\nuniform sampler2D uTrailMap;\nuniform sampler2D uPerlin;\nuniform vec3 uTintColor;   \nuniform float uTintStrength; \n\nvarying vec2 vParallax;\nvarying vec2 vUv;\n\nvoid main() {\n\n  float perlin = texture(uPerlin, vUv).r;\n  float perlin2 = texture(uPerlin, vUv * 10.).r;\n  vec3 trail = texture(uTrailMap, vUv).rgb;\n  float cracks = texture(uCracksMap, vUv * 4.).r;\n  float nomalization = 1.0;\n\n  vec3 colorBlue = vec3(0.0,0.2,0.25);\n  vec3 colorDeepBlue = vec3(0.0,0.01,0.03);\n  vec3 colorGreen = vec3(0.1,0.2,0.35);\n\n  float accumulateFrosted = 0.;\n\n  for (int i = 0; i < 50; i++) {\n    float aplitude = float(70 - i) / 1.;\n    vec2 uv = vUv * 4. + vParallax * 0.002 * float(i + 1);\n\n    float currCrack = (1. - texture(uCracksMap, uv ).r) * aplitude;\n\n    float currTrail = texture(uTrailMap, vUv + vParallax * 0.0025 * float(i + 1)).r;\n\n    currCrack = currCrack * step(0.7, 1. - pow(currTrail,0.7));\n\n    cracks += currCrack;\n    nomalization += aplitude;\n\n    accumulateFrosted += currTrail * aplitude;\n  }\n  cracks /= nomalization;\n  accumulateFrosted /= nomalization;\n  cracks += pow(1. - texture(uCracksMap, vUv * 4.).r, 3.) * 3. * step(0.92, 1. - pow(trail.r,0.6));\n  \n  vec3 cracksParallax = texture(uCracksMap, vUv * 2. + vParallax * 0.1).rgb;\n\n  vec3 frosted = colorBlue * 3. + perlin * 0.6 + perlin2 * 0.6;\n  vec3 cracksColor = mix(colorBlue, colorGreen, pow(cracks,1.) * 1.);\n  cracksColor += pow(cracks,1.) * 2.;\n  cracksColor *= perlin * 8. * colorBlue;\n  cracksColor += pow(cracks,1.) * 0.5;\n\n  vec3 prxCracksColor = mix(colorDeepBlue, colorBlue, pow(1. - cracksParallax.r,3.) * 10.);\n  prxCracksColor *= perlin;\n  \n  cracksColor = mix(cracksColor, prxCracksColor, 0.3);\n\n  vec3 deepColor = mix(vec3(0.1,0.7,0.7),vec3(0., 0.3, 1.), 1. - pow(accumulateFrosted,1.5));\n  cracksColor = mix(cracksColor, deepColor, pow(accumulateFrosted,1.5));\n  vec3 color = mix(cracksColor, frosted, pow(trail.r,0.5) );\n\n  \n  color = mix(color, uTintColor, uTintStrength);\n\n  vec2 uvCentered = vUv - 0.5;\n  float dist = length(uvCentered * 2.0); \n  float edgeFade = smoothstep(0.6, 1.0, dist); \n\n  float alpha = mix(1.0, 0.0, edgeFade);\n\n  if (alpha < 0.01) discard;\n\n  gl_FragColor = vec4(color, alpha);\n\n  #include <tonemapping_fragment>\n  #include <colorspace_fragment>\n}"),transparent:"",uniforms:m},null,8,M)],8,D)]))}}),y=n({__name:"iceFloor",setup(a){const n={clearColor:"#010A13",antialias:!0},l=u({uParallaxDistance:1,uTintColor:"#666666",uTintStrength:.1,uStyle:1}),t=new e;return t.addBinding(l,"uTintColor",{label:"偏色"}),t.addBinding(l,"uTintStrength",{label:"偏色强度",min:0,max:1,step:.01}),t.addBinding(l,"uParallaxDistance",{label:"视觉差强度",min:.01,max:2,step:.01}),t.addBinding(l,"uStyle",{label:"纹理样式",options:{"样式1":0,"样式2":1,"样式3":2,"样式4":3,"样式5":4,"样式6":5,"样式7":6}}),(a,e)=>{const t=v("TresCanvas");return i(),p(t,g(n,{"window-size":""}),{default:m((()=>[e[0]||(e[0]=c("TresPerspectiveCamera",{position:[4,8,8],fov:60,near:.1},null,-1)),e[1]||(e[1]=c("TresAmbientLight",{intensity:1},null,-1)),d(s(r)),(i(),p(x,null,{default:m((()=>[d(b,f(C(l)),null,16)])),_:1}))])),_:1},16)}}});export{y as default};
