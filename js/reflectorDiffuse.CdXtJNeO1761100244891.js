import{r as e,K as r,x as t,T as o}from"./@tresjs.DqJWjmrH1761100244891.js";import{P as a}from"./tweakpane.CqZAnw7f1761100244891.js";import{cz as n,aE as l,d as s,k as i}from"./three.DvmzhRS91761100244891.js";import{R as m}from"./Reflector.C-cnab8L1761100244891.js";import"./OimoPhysicsBuffer.RP9_cA631761100244891.js";import{d as f,a as c,ac as p,w as u,s as d,a3 as v,G as g,H as h,u as x,o as y,I as M,m as C,r as w,g as _,b as j,e as S,h as T,O as b,ap as G,a9 as z,aa as k}from"./@vue.CKlgtJke1761100244891.js";import"./postprocessing.CYU4Fj-U1761100244891.js";import"./@vueuse.mZcBai3M1761100244891.js";import"./oimophysics.CfVKSiAm1761100244891.js";const B={key:0},D=["rotation-x"],E=["object","visible"],P=f({__name:"reflectorDiffuse",props:{mirror:{default:1},mixStrength:{default:10},showGridHelper:{type:Boolean,default:!0},color:{default:"#ffffff"}},async setup(r){let t,o;const a=r,f=new n(9.5,10),w=c(),_=c(),j=c(),S=new m,T={mirror:{value:a.mirror},mixStrength:{value:a.mixStrength}},{textures:b,isLoading:G}=([t,o]=p(()=>e(["./plugins/floor/image/polished_concrete_basecolor.jpg","./plugins/floor/image/polished_concrete_normal.jpg","./plugins/floor/image/polished_concrete_orm.jpg"])),t=await t,o(),t);let z={};u([G,b],([e,r])=>{if(r&&!e){for(var t=0;t<3;t++)r[t].wrapS=l,r[t].wrapT=l,r[t].repeat.set(16,16);z={color:new i("#444"),metalness:1,roughness:1,map:r[0],metalnessMap:r[2],roughnessMap:r[2],aoMap:r[2],aoMapIntensity:1,normalMap:r[1],normalScale:new s(3,3)},d(()=>{w.value.attributes.uv1=w.value.attributes.uv,j.value.aoMap.channel=1,j.value.onBeforeCompile=k,_.value.add(S),_.value.onBeforeRender=(e,r,t)=>{S.update(e,r,t)}})}});const k=e=>{e.uniforms.reflectMap=S.renderTargetUniform,e.uniforms.textureMatrix=S.textureMatrixUniform,e.uniforms=Object.assign(e.uniforms,T),(e=>{e.vertexShader=e.vertexShader.replace("void main() {","\n\t\tuniform mat4 textureMatrix;\n\t\tout vec4 vCoord;\n\t\tout vec3 vToEye;\n\n\t\tvoid main() {\n\t\t"),e.vertexShader=e.vertexShader.replace("#include <project_vertex>","\n\t\t#include <project_vertex>\n\n\t\tvCoord = textureMatrix * vec4(transformed, 1.0);\n\t\tvToEye = cameraPosition - (modelMatrix * vec4(transformed, 1.0)).xyz;\n\t\t")})(e),(e=>{e.fragmentShader=e.fragmentShader.replace("void main() {","\n\t\tuniform sampler2D reflectMap;\n\t\tuniform float mirror;\n\t\tuniform float mixStrength;\n\t\tin vec4 vCoord;\n\t\tin vec3 vToEye;\n\n\t\tvoid main() {\n\t\t"),e.fragmentShader=e.fragmentShader.replace("#include <emissivemap_fragment>","\n\t\t#include <emissivemap_fragment>\n\n\t\tvec4 normalColor = texture2D(normalMap, vNormalMapUv * normalScale);\n\t\tvec3 reflectNormal = normalize(vec3(normalColor.r * 2.0 - 1.0, normalColor.b, normalColor.g * 2.0 - 1.0));\n\t\tvec3 reflectCoord = vCoord.xyz / vCoord.w;\n\t\tvec2 reflectUv = reflectCoord.xy + reflectCoord.z * reflectNormal.xz * 0.05;\n\t\tvec4 reflectColor = texture2D(reflectMap, reflectUv);\n\n\t\t// Fresnel term\n\t\tvec3 toEye = normalize(vToEye);\n\t\tfloat theta = max(dot(toEye, normal), 0.0);\n\t\tfloat reflectance = pow((1.0 - theta), 5.0);\n\n\t\treflectColor = mix(vec4(0), reflectColor, reflectance);\n\n\t\tdiffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + reflectColor.rgb * mixStrength);\n\t\t")})(e)};return v(()=>{a.color&&j.value&&(j.value.color=new i(a.color))}),(e,r)=>x(G)?h("",!0):(y(),g("TresGroup",B,[M("TresMesh",{ref_key:"tmRef",ref:_,"rotation-x":-Math.PI/2,"position-y":-.1},[M("TresPlaneGeometry",{ref_key:"tpgRef",ref:w,args:[10,10]},null,512),M("TresMeshStandardMaterial",C({ref_key:"tmsmRef",ref:j},x(z)),null,16)],8,D),M("primitive",{object:x(f),visible:e.showGridHelper},null,8,E)]))}}),R={position:[0,8,0],intensity:10,color:"#fff"},H=f({__name:"reflectorDiffuse",setup(e){const n=w({mirror:.9,mixStrength:9,showGridHelper:!0,color:"#69a5c2"}),l=new a({title:"镜面参数",expanded:!0});return l.addBinding(n,"color",{label:"镜面颜色"}),l.addBinding(n,"showGridHelper",{label:"显示网格"}),(e,a)=>{const l=_("TresCanvas");return y(),j(l,{clearColor:"#201919","window-size":""},{default:S(()=>[a[0]||(a[0]=M("TresPerspectiveCamera",{position:[-15,15,-15],fov:45,near:.1,far:1e4,"look-at":[0,0,0]},null,-1)),T(x(r),{enableDamping:""}),a[1]||(a[1]=M("TresAmbientLight",{intensity:10},null,-1)),b(M("TresDirectionalLight",R,null,512),[[x(t)]]),T(x(o),{args:[1,1,1],color:"orange",position:[3,1,0]}),a[2]||(a[2]=M("TresMesh",{position:[0,2,4]},[M("TresBoxGeometry",{args:[1,1,1]}),M("TresMeshNormalMaterial")],-1)),(y(),j(G,null,{default:S(()=>[T(P,z(k(n)),null,16)]),_:1}))]),_:1})}}});export{H as default};
