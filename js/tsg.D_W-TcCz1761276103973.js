import{dt as e,du as a,dv as t,dw as n,dq as d,dx as o,dy as s,dz as l,z as r,cE as i,cD as c,bJ as p,bd as N,bI as u,a6 as h,bj as b,aV as m,c3 as g,c1 as T,c0 as v,c2 as w,b$ as M,c4 as y,c5 as f,c6 as S}from"./three.Bhn4-0ry1761276103973.js";const D=((e="MeshBasicNodeMaterial")=>({template:e,Preview:"2d",surfaceType:"Transparent",blendingMode:"NormalBlending",renderFace:"FrontSide",depthWrite:"enable",depthTest:"enable",depthTestFunc:"LessEqualDepth",castShadows:!0}))(),E={lit:o,unlit:o,subgraph:o,MeshBasicNodeMaterial:o,MeshStandardNodeMaterial:d,MeshPhongNodeMaterial:n,MeshPhysicalNodeMaterial:t,LineDashedNodeMaterial:a,SpriteNodeMaterial:e},x={NoBlending:u,NormalBlending:N,AdditiveBlending:p,SubtractiveBlending:c,MultiplyBlending:i},B={FrontSide:m,BackSide:b,DoubleSide:h},F={NeverDepth:S,AlwaysDepth:f,EqualDepth:y,LessDepth:M,LessEqualDepth:w,GreaterDepth:v,GreaterEqualDepth:T,NotEqualDepth:g},q=(e,a={},t={})=>{const n={},d=(e=>{const a=e.replace(/\r\n/g,"\n").match(/\/\/\/\/ view \/\/\/\/ (.*)\n/);return a?JSON.parse(a[1]):null})(e);d&&d.textures?.forEach(a=>{const n=a.binding.varName;if(!t?.[n]){const a=e.match(new RegExp(`//// ${n} //// (.*)\\n`))?.[1];a&&t&&(t[n]=(e=>{const a=new Image,t=new r(a);return a.onload=()=>{t.needsUpdate=!0},a.src=e,t})(a))}});const o=Object.assign({},D,d?.setting),i=new(0,E[o.template]),c={};if(((e,a)=>{e.transparent="Transparent"===a.surfaceType,"Transparent"===a.surfaceType?e.blending=x[a.blendingMode]||N:e.blending=N,e.side=B[a.renderFace]||m,e.depthWrite="enable"===a.depthWrite,e.depthTest="enable"===a.depthTest,e.depthFunc=F[a.depthTestFunc]||w})(i,o),e)try{new Function("material","default_uniforms","__textures__","uniforms","tsl","THREE",e)(n,a||{},t,c,s,l)}catch(p){throw new Error("Invalid TSL format: "+p)}return"Transparent"===o.surfaceType?void 0===n.opacityNode?i.colorNode=n.colorNode||null:(i.colorNode=n.colorNode?.xyz||null,i.opacityNode=n.opacityNode||null):i.colorNode=n.colorNode?.xyz||null,i.vertexNode=n.vertexNode||null,i.positionNode=n.positionNode||null,i.normalNode=n.normalNode||null,i.alphaTestNode=n.alphaTestNode||null,i.depthNode=n.depthNode||null,i.emissiveNode=n.emissiveNode||null,i.envNode=n.envNode||null,i.aoNode=n.aoNode||null,i.backdropNode=n.backdropNode||null,i.backdropAlphaNode=n.backdropAlphaNode||null,o.castShadows&&(i.castShadowNode=n.castShadowNode||null),i.needsUpdate=!0,{material:i,uniforms:c,settings:o}};export{q as t};
