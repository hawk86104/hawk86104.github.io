import{r as t,a6 as n,C as e,al as o,V as r,K as i,Z as a,a9 as s}from"./three.Brogx0uK1722507394274.js";import{N as c,$ as l,d as u,x as p}from"./@tresjs.bNNpPzYW1722507394274.js";import"./index.CgcuS0mr1722507394274.js";import{a as f}from"./simplex-noise.5SFotzdp1722507394274.js";import{C as h}from"./index.DifwtWix1722507394274.js";import{d as m,a4 as d,o as v,D as g,J as x,u as y,r as w,f as b,g as _,j,aj as z,ak as M,al as A}from"./@vue.CFXy4cc91722507394274.js";import{_ as I}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.BPuk3wmJ1722507394274.js";import"./tweakpane.BCjFYDHx1722507394274.js";import"./@vueuse.CY5GWLAn1722507394274.js";import"./lamina.DaqNWJhR1722507394274.js";import"./glsl-tokenizer.D7fhDZQE1722507394274.js";import"./@amap.B-BVafMU1722507394274.js";import"./glsl-token-descope.BRevVUA81722507394274.js";import"./glsl-token-depth.BfFZ8Dbx1722507394274.js";import"./glsl-token-scope.DOFb5_xT1722507394274.js";import"./glsl-token-properties.Djcxx-rg1722507394274.js";import"./glsl-token-assignments.D8YxnTiv1722507394274.js";import"./glsl-token-string.Bg9nzJXZ1722507394274.js";import"./glsl-token-functions.B8rjVA3n1722507394274.js";import"./object-hash.rImj7O_Q1722507394274.js";import"./jszip.BxDgYeH81722507394274.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.DG-oe63I1722507394274.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.S6GuYTOv1722507394274.js";import"./three-stdlib.Da22DAq01722507394274.js";import"./@fesjs.HUfyfxyE1722507394274.js";import"./vue-router.B7QAPA1N1722507394274.js";import"./lodash-es.X8SAORSL1722507394274.js";import"./@qlin.BIlp8Yi21722507394274.js";import"./pinia.CScY4tX71722507394274.js";import"./vue-demi.Dq6ymT-81722507394274.js";import"./@babel.DOgRMOv71722507394274.js";import"./@floating-ui.B75jtkXD1722507394274.js";import"./@juggle.BnTvdTVm1722507394274.js";import"./chalk.B3MNILV41722507394274.js";/* empty css                                 */import"./iconify-icon.DK1S_nhj1722507394274.js";import"./@iconify.FaZrwldm1722507394274.js";import"./oimophysics.B0i2NtyE1722507394274.js";import"./@pmndrs.D9AmSQDC1722507394274.js";import"./three-custom-shader-material.CeVv8ptL1722507394274.js";import"./three.quarks.DzFhgNNR1722507394274.js";import"./quarks.core.C7CDonSm1722507394274.js";import"./utils.DrVDCwTo1722507394274.js";const k=T;!function(t,n){const e=T,o=R();for(;;)try{if(406360===parseInt(e(352))/1*(parseInt(e(367))/2)+-parseInt(e(425))/3+parseInt(e(373))/4*(parseInt(e(356))/5)+-parseInt(e(405))/6*(-parseInt(e(388))/7)+parseInt(e(407))/8*(parseInt(e(369))/9)+-parseInt(e(385))/10*(-parseInt(e(364))/11)+-parseInt(e(412))/12)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[T(403)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){C(this,(function(){const t=T,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(398),"i"),o=H("init");n.test(o+"chain")&&e[t(394)](o+t(368))?H():o("0")}))()}();const S=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[T(403)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function R(){const t=["translate","console","200XBXNdV","gger","side","42ogpGGj","TresInstancedBufferGeometry","attributes","stateObject","time","cos","test","Color","DoubleSide","InstancedBufferAttribute","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","attributes-uv","width","stretchesF32","attributes-offset","apply","set","231252NwJSzv","Vector3","4513776KmUDZS","push","PlaneGeometry","attributes-position","debu","10799844yFizXR","length","exception","call","position","prototype","__proto__","halfRootAngleSinF32","bind","return (function() ","array","instances","map","1274118nACzgH","uniforms","113KyOlOV","error","normalize","halfRootAngleCosF32","550785lxuWen","attributes-stretch","string","constructor","joints","TresMesh","alphaMap","counter","60995FdXjhr","index","grass","2898KKcSaJ","input","9oUjXay","info","computeVertexNormals","Vector4","24HWGuDB","lookAt","trace","geometry","sin","offsetsF32","attributes-halfRootAngleCos","convertSRGBToLinear","random","toString"];return(R=function(){return t})()}S(void 0,(function(){const t=T;let n;try{n=Function(t(421)+'{}.constructor("return this")( ));')()}catch(r){n=window}const e=n.console=n[t(384)]||{},o=["log","warn",t(370),t(353),t(414),"table",t(375)];for(let i=0;i<o[t(413)];i++){const n=S[t(359)][t(417)][t(420)](S),r=o[i],a=e[r]||n;n[t(418)]=S.bind(S),n[t(382)]=a.toString[t(420)](a),e[r]=n}}))();const D=["material"],F=["index",k(410),k(399),k(402),"attributes-orientation",k(357),"attributes-halfRootAngleSin",k(379)],B=[k(376)],O=["side"];function T(t,n){const e=R();return(T=function(t,n){return e[t-=352]})(t,n)}const G=m({__name:k(366),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(s){const u=k;let p,m;const w=([p,m]=d((()=>c({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),p=await p,m(),p),b=s,_=f(Math[u(381)]);function j(t,e){const o=u,r=t.x*e.w+t.y*e.z-t.z*e.y+t.w*e.x,i=-t.x*e.z+t.y*e.w+t.z*e.x+t.w*e.y,a=t.x*e.y-t.y*e.x+t.z*e.w+t.w*e.z,s=-t.x*e.x-t.y*e.y-t.z*e.z+t.w*e.w;return new(n[o(372)])(r,i,a,s)}function z(t,n){var e=2*_(t/50,n/50);return e+=4*_(t/100,n/100),e+=.2*_(t/10,n/10)}const M=function(t,e){const a=u,s=[],c=[],l=[],p=[],f=[];let h=new(n[a(372)]),m=new o;const d=-.25;for(let o=0;o<t;o++){const i=Math.random()*e-e/2,u=Math.random()*e-e/2,v=z(i,u);s[a(408)](i,v,u);let g=Math.PI-Math[a(381)]()*(2*Math.PI);p[a(408)](Math[a(377)](.5*g)),f[a(408)](Math.cos(.5*g));let x=new(n[a(406)])(0,1,0),y=x.x*Math[a(377)](g/2),w=x.y*Math[a(377)](g/2),b=x.z*Math[a(377)](g/2),_=Math.cos(g/2);h[a(404)](y,w,b,_).normalize(),g=.5*Math[a(381)]()+d,x=new r(1,0,0),y=x.x*Math[a(377)](g/2),w=x.y*Math[a(377)](g/2),b=x.z*Math[a(377)](g/2),_=Math[a(393)](g/2),m.set(y,w,b,_)[a(354)](),h=j(h,m),g=.5*Math[a(381)]()+d,x=new(n[a(406)])(0,0,1),y=x.x*Math[a(377)](g/2),w=x.y*Math[a(377)](g/2),b=x.z*Math[a(377)](g/2),_=Math[a(393)](g/2),m[a(404)](y,w,b,_)[a(354)](),h=j(h,m),c[a(408)](h.x,h.y,h.z,h.w),o<t/3?l[a(408)](1.8*Math[a(381)]()):l[a(408)](Math[a(381)]())}return{offsetsF32:new(n[a(397)])(new Float32Array(s),3),orientationsF32:new i(new Float32Array(c),4),stretchesF32:new(n[a(397)])(new Float32Array(l),1),halfRootAngleCosF32:new(n[a(397)])(new Float32Array(f),1),halfRootAngleSinF32:new(n[a(397)])(new Float32Array(p),1)}}(b[u(423)],b[u(400)]),A=new t(b.bW,b.bH,1,b[u(360)])[u(383)](0,b.bH/2,0),I=new(n[u(409)])(b[u(400)],b[u(400)],32,32);I[u(374)](new(n[u(406)])(0,1,0));const C=I[u(390)][u(416)];for(let t=0;t<C[u(422)][u(413)];t+=3)C[u(422)][t+1]=z(C[u(422)][t],C[u(422)][t+2]);I[u(390)][u(416)].needsUpdate=!0,I[u(371)]();const S=new(h({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new e(.3,.9,0)[u(380)](),bottomColor:new(n[u(395)])(0,.2,0)[u(380)]()},"   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }",(t=>{t[u(387)]=a})));S[u(424)]=w.map,S[u(362)]=w[u(362)],S.toneMapped=!1;const{onLoop:R}=l();return R((({elapsed:t})=>{const n=u;S[n(426)][n(392)].value=t/4})),(t,e)=>{const o=u;return v(),g("TresGroup",null,[x("TresMesh",{material:y(S)},[x(o(389),{index:y(A)[o(365)],"attributes-position":y(A)[o(390)][o(416)],"attributes-uv":y(A)[o(390)].uv,"attributes-offset":y(M)[o(378)],"attributes-orientation":y(M).orientationsF32,"attributes-stretch":y(M)[o(401)],"attributes-halfRootAngleSin":y(M)[o(419)],"attributes-halfRootAngleCos":y(M)[o(355)]},null,8,F)],8,D),x(o(361),{position:[0,0,0],geometry:y(I)},[x("TresMeshStandardMaterial",{color:"#000f00",side:n[o(396)]},null,8,O)],8,B)])}}});function H(t){function n(t){const e=T;if(typeof t===e(358))return function(t){}[e(359)]("while (true) {}")[e(403)](e(363));1!==(""+t/t)[e(413)]||t%20==0?function(){return!0}[e(359)](e(411)+"gger")[e(415)]("action"):function(){return!1}[e(359)](e(411)+e(386)).apply(e(391)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const U=N;!function(t,n){const e=N,o=P();for(;;)try{if(444413===-parseInt(e(297))/1+parseInt(e(293))/2*(-parseInt(e(289))/3)+-parseInt(e(319))/4*(-parseInt(e(305))/5)+parseInt(e(325))/6+parseInt(e(292))/7*(-parseInt(e(290))/8)+-parseInt(e(317))/9*(-parseInt(e(296))/10)+-parseInt(e(298))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const E=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[N(321)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){E(this,(function(){const t=N,n=new RegExp(t(302)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=K(t(324));n[t(326)](o+t(318))&&e[t(326)](o+"input")?K():o("0")}))()}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[N(321)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function P(){const t=["counter","__proto__","73578begvfT","1093208RsUwsU","action","14OyxrjA","4plRtoG","grass","gger","850YaMsWD","774546tKRLrS","617606tkGxtK","debu","bind","return (function() ","function *\\( *\\)","table","string","1272190GublcK",'{}.constructor("return this")( )',"call","info","trace","while (true) {}","TresPerspectiveCamera","console","warn","toString","constructor","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","11475QAtgMw","chain","12eUIWZl","exception","apply","stateObject","length","init","4354620KNHBgS","test"];return(P=function(){return t})()}L(void 0,(function(){const t=N;let n;try{n=Function(t(301)+t(306)+");")()}catch(r){n=window}const e=n[t(312)]=n[t(312)]||{},o=["log",t(313),t(308),"error",t(320),t(303),t(309)];for(let i=0;i<o[t(323)];i++){const n=L.constructor.prototype.bind(L),r=o[i],a=e[r]||n;n[t(288)]=L[t(300)](L),n[t(314)]=a.toString[t(300)](a),e[r]=n}}))();const q=x(U(311),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1);function N(t,n){const e=P();return(N=function(t,n){return e[t-=287]})(t,n)}const V=m({__name:U(294),setup(t){const n=w({alpha:!0,toneMapping:s,windowSize:!0,clearColor:6710886}),e=w({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=N;return v(),b(y(p),z(M(n)),{default:_((()=>[q,j(y(u),z(M(e)),null,16),(v(),b(A,null,{default:_((()=>[j(G)])),_:1})),(v(),b(A,null,{default:_((()=>[j(y(I),{texture:r(316)})])),_:1}))])),_:1},16)}}});function K(t){function n(t){const e=N;if(typeof t===e(304))return function(t){}[e(315)](e(310)).apply(e(287));1!==(""+t/t)[e(323)]||t%20==0?function(){return!0}[e(315)](e(299)+e(295))[e(307)](e(291)):function(){return!1}.constructor("debugger")[e(321)](e(322)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{V as default};
