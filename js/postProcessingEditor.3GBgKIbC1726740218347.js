import{p as t,U as n,z as e,Y as o}from"./@tresjs.C5O8roW51726740218347.js";import{k as r,_ as s,V as a,M as i,O as c,b6 as l,m as u,B as v,bX as f}from"./three.MbBECAu81726740218347.js";import{P as p}from"./tweakpane.yHWGBmom1726740218347.js";import{d,a4 as m,e as g,o as x,f as h,g as y,L as I,j as b,u as _,aj as S,ak as U,al as w,m as D}from"./@vue.JNsx1iN61726740218347.js";import{_ as P}from"./@fesjs.Dr_-7VFL1726740218347.js";import"./@vueuse.18lbrd2F1726740218347.js";import"./vue-router.PDZMxRoR1726740218347.js";import"./lodash-es.kYt-_xTG1726740218347.js";import"./@qlin.yHhFDldE1726740218347.js";import"./pinia.WcGzyH851726740218347.js";import"./@floating-ui.BPbuo5Gx1726740218347.js";import"./@juggle.7yjBMqoW1726740218347.js";function E(){const t=["warn","1790MDLDbM","onerror","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","Matrix3","Vector2","info","onabort","chain","trace","name","length","46449ippdRY","128QvmyTa","Texture","4329070eMxLeX","string","1231ziIbnn","random","return (function() ","index","send","stateObject","WagnerLoadShaderException","replace","__proto__","26837129zIzwVL","exec","12147990hkYcIs","test","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","action","function *\\( *\\)","value","while (true) {}","isArray","table","type","Matrix2","onload","log","debu","open","12KDWVwf","apply","1850344BFYBRr","now","toString","\" couldn't be loaded.","responseText","393546OvufxR",'" load was aborted.',"42VAeoJv",'Shader "',"Vector4","console","message","prototype","input","36ngtZSt","lastIndex","Vector3","counter","error",'{}.constructor("return this")( )',"call","v3v","ShaderMaterial","init","constructor"];return(E=function(){return t})()}!function(t,n){const e=A,o=E();for(;;)try{if(637609===-parseInt(e(253))/1*(-parseInt(e(237))/2)+-parseInt(e(248))/3*(-parseInt(e(249))/4)+-parseInt(e(251))/5+parseInt(e(216))/6*(-parseInt(e(218))/7)+parseInt(e(211))/8*(-parseInt(e(225))/9)+-parseInt(e(194))/10+-parseInt(e(192))/11*(-parseInt(e(209))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const M=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[A(210)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function A(t,n){const e=E();return(A=function(t,n){return e[t-=190]})(t,n)}!function(){M(this,(function(){const t=A,n=new RegExp(t(198)),e=new RegExp(t(196),"i"),o=z(t(234));n[t(195)](o+t(244))&&e[t(195)](o+t(224))?z():o("0")}))()}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[A(210)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();L(void 0,(function(){const t=A,n=function(){const t=A;let n;try{n=Function(t(255)+t(230)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(221)]||{},o=[t(206),t(236),t(242),t(229),"exception",t(202),t(245)];for(let r=0;r<o[t(247)];r++){const n=L[t(235)][t(223)].bind(L),s=o[r],a=e[s]||n;n[t(191)]=L.bind(L),n.toString=a[t(213)].bind(a),e[s]=n}}))();function F(t,n,e){if("object"!=typeof t||null===t)return t;const o=Array[A(201)](t)?[]:{};for(const r in t)t.hasOwnProperty(r)&&(o[r]=F(t[r])),r==n&&(o[n]=e);return o}function z(t){function n(t){const e=A;if(typeof t===e(252))return function(t){}[e(235)](e(200))[e(210)](e(228));1!==(""+t/t)[e(247)]||t%20==0?function(){return!0}[e(235)](e(207)+"gger")[e(231)](e(197)):function(){return!1}[e(235)]("debugger")[e(210)](e(258)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const C=B;!function(t,n){const e=B,o=N();for(;;)try{if(858263===parseInt(e(466))/1+parseInt(e(449))/2+parseInt(e(436))/3*(-parseInt(e(445))/4)+parseInt(e(437))/5+-parseInt(e(483))/6+-parseInt(e(425))/7+parseInt(e(479))/8*(parseInt(e(418))/9))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const T=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[B(416)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function N(){const t=["height","warn","RGBAFormat","params","toString","length","action","chain","wrapS","Pass","projectionMatrix","call","resolution","apply","Scene","9cUSIID","log","stencilBuffer","return (function() ","camera","quad","RGBFormat","7133791FBjRfW","renderer","read","addPass","getOfflineTexture","width","value","__proto__","constructor","now","time","1452GZZijE","3515695ZgFWSF","stateObject","push","makeOrthographic","magFilter","shader","type","onWindowResize","12224EOAtYF","Mesh","UnsignedByteType","copyPass","1227004ShsQBb","while (true) {}","material","write","console","minFilter","Stack","swapBuffers","gger","setRenderTarget","ClampToEdgeWrapping","back","table","bind","startTime","passItems","MeshBasicMaterial","1319616wabNFd","far","front","near","splice","WebGLRenderTarget","scale","render","makePerspective","tInput","string","LinearFilter","error","19212912VyVxRN","uniforms","function *\\( *\\)","useRGBA","10088346zFKUsG","PlaneGeometry","exception","innerHeight","scene","input","setSize","loadShadervf","wrapT","Reset","info","test","settings","removePass","set","uuid","CopyPass","pass","trace"];return(N=function(){return t})()}!function(){T(this,(function(){const t=B,n=new RegExp(t(481)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=j("init");n[t(494)](o+t(410))&&e[t(494)](o+t(488))?j():o("0")}))()}();const R=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[B(416)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function B(t,n){const e=N();return(B=function(t,n){return e[t-=409]})(t,n)}R(void 0,(function(){const t=B;let n;try{n=Function(t(421)+'{}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(453)]=n[t(453)]||{},o=[t(419),t(503),t(493),t(478),t(485),t(461),t(501)];for(let s=0;s<o.length;s++){const n=R[t(433)].prototype[t(462)](R),r=o[s],a=e[r]||n;n[t(432)]=R[t(462)](R),n[t(506)]=a[t(506)][t(462)](a),e[r]=n}}))();class G{constructor(t,n){const e=B;this[e(430)]=1,this.height=1,this[e(495)]=n||{},this[e(482)]=this[e(495)][e(482)]||!1,this[e(426)]=t,this[e(448)]=this[e(499)](this[e(495)]),this[e(487)]=new(s[e(417)]),this[e(423)]=new(s[e(446)])(new(s[e(484)])(1,1),new(s[e(465)])),this.scene.add(this.quad),this[e(422)]=new c(1,1,1,1,-1e4,1e4),this.front=new(s[e(471)])(1,1,{minFilter:void 0!==this[e(495)][e(454)]?this[e(495)].minFilter:s[e(477)],magFilter:void 0!==this.settings[e(441)]?this.settings[e(441)]:s[e(477)],wrapS:void 0!==this.settings.wrapS?this[e(495)][e(411)]:s[e(459)],wrapT:void 0!==this.settings.wrapT?this[e(495)][e(491)]:s[e(459)],format:this[e(482)]?s[e(504)]:s[e(424)],type:void 0!==this[e(495)][e(443)]?this[e(495)][e(443)]:s[e(447)],stencilBuffer:void 0===this[e(495)][e(420)]||this[e(495)][e(420)]}),this.back=this.front.clone(),this[e(463)]=Date.now(),this.passes={},this[e(455)]={passItems:[],passes:[]}}[C(428)](t,n,e,o){const r=C;this[r(490)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(442)]};this[r(455)][r(464)][r(439)](s)}[C(496)](t){const n=C;for(let e=this[n(455)][n(464)].length-1;e>=0;e--)this.Stack[n(464)][e][n(498)]===parseInt(t)&&this[n(455)][n(464)][n(470)](e,1);console[n(419)](this[n(455)][n(464)])}[C(499)](){const t=C;this[t(412)][t(414)](this);return this[t(490)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[C(490)](t){return this.shader=function(t,n){const e=A,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,c=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,l={sampler2D:{type:"t",value:()=>new(s[A(250)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(s[A(241)])},vec3:{type:"v3",value:()=>new(s[A(227)])},vec4:{type:"v4",value:()=>new(s[A(220)])},bvec2:{type:"v2",value:()=>new(s[A(241)])},bvec3:{type:"v3",value:()=>new a},bvec4:{type:"v4",value:()=>new(s[A(220)])},ivec2:{type:"v2",value:()=>new(s[A(241)])},ivec3:{type:"v3",value:()=>new(s[A(227)])},ivec4:{type:"v4",value:()=>new(s[A(220)])},mat2:{type:"v2",value:()=>new(s[A(204)])},mat3:{type:"v3",value:()=>new(s[A(240)])},mat4:{type:"v4",value:()=>new i}},u={float:{type:"fv",value:()=>[]},vec3:{type:e(232),value:()=>[]}};let v;const f={resolution:{type:"v2",value:new r(1,1),default:!0},time:{type:"f",value:Date[e(212)](),default:!0},tInput:{type:"t",value:new(s[e(250)]),default:!0}};let p,d;for(;null!==(v=o[e(193)](n));)v[e(256)]===o[e(226)]&&o[e(226)]++,p=v[1],d=v[2],f[d]={type:l[p][e(203)],value:l[p][e(199)]()};for(;null!==(v=c[e(193)](n));)v[e(256)]===o.lastIndex&&o.lastIndex++,p=v[1],d=v[2],v[3],f[d]={type:u[p][e(203)],value:u[p][e(199)]()};return new(s[e(233)])({uniforms:f,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}("varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }",t),this.shader}[C(412)](t){const n=C;this[n(442)]=null,this[n(505)]={}}[C(492)](){const t=C;this[t(427)]=this.front,this[t(452)]=this[t(460)]}[C(444)](t,n){const e=C,o=window.innerWidth,r=window[e(486)];t[e(489)](1*o,1*r),n[e(413)][e(474)](70,o/r,n[e(469)],n[e(467)]),this[e(489)](o,r);return this[e(429)](o,r,!0)}[C(489)](t,n){const e=C;this[e(430)]=t,this[e(502)]=n,this[e(422)].projectionMatrix[e(440)](t/-2,t/2,n/2,n/-2,this[e(422)][e(469)],this[e(422)][e(467)]),this[e(423)][e(472)].set(t,n,1),this[e(468)][e(489)](t,n),this[e(460)][e(489)](t,n)}[C(429)](t,n,e){const o=C;return new(s[o(471)])(t,n,{minFilter:s[o(477)],magFilter:s[o(477)],format:e?l:s[o(424)]})}[C(473)](t,n,e,o){const r=C;this.renderer[r(458)](this[r(452)]),this[r(426)][r(473)](t,n),o||this[r(456)]()}swapBuffers(){const t=C,n=this[t(452)];this[t(452)]=this[t(427)],this[t(427)]=n}[C(500)](){const t=C;for(let n=0;n<this[t(455)][t(464)][t(507)];n++){const e=this[t(455)].passItems[n].shader,o=this[t(455)][t(464)][n][t(505)];if(this[t(426)][t(458)](this[t(452)]),e instanceof u){this.quad[t(451)]=e,this[t(423)].material[t(480)][t(475)].value=this[t(427)].texture,this[t(423)].material[t(480)][t(415)].value[t(497)](this[t(430)],this.height),this.quad[t(451)][t(480)][t(435)][t(431)]=.001*(Date[t(434)]()-this.startTime);for(const n in o)this.quad[t(451)][t(480)][n][t(431)]=o[n];this[t(426)].render(this[t(487)],this.camera),this.swapBuffers()}}}toScreen(t,n){const e=C;this[e(426)].setRenderTarget(null),this[e(423)][e(451)]=this.copyPass,this[e(423)].material[e(480)].tInput.value=this[e(427)].texture,this.quad[e(451)][e(480)][e(415)][e(431)][e(497)](this[e(430)],this.height),this[e(426)][e(473)](this[e(487)],this.camera)}}function j(t){function n(t){const e=B;if(typeof t===e(476))return function(t){}[e(433)](e(450))[e(416)]("counter");1!==(""+t/t)[e(507)]||t%20==0?function(){return!0}[e(433)]("debu"+e(457))[e(414)](e(409)):function(){return!1}[e(433)]("debu"+e(457))[e(416)](e(438)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const V="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",O=W;!function(t,n){const e=W,o=Z();for(;;)try{if(774357===-parseInt(e(211))/1+parseInt(e(164))/2+parseInt(e(170))/3*(-parseInt(e(197))/4)+parseInt(e(190))/5*(-parseInt(e(234))/6)+parseInt(e(163))/7*(parseInt(e(184))/8)+parseInt(e(176))/9*(-parseInt(e(231))/10)+parseInt(e(156))/11*(parseInt(e(187))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){H(this,(function(){const t=W,n=new RegExp(t(173)),e=new RegExp(t(230),"i"),o=X(t(192));n[t(185)](o+t(195))&&e[t(185)](o+t(213))?X():o("0")}))()}();const k=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[W(154)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function W(t,n){const e=Z();return(W=function(t,n){return e[t-=147]})(t,n)}function Z(){const t=["values","mergeGeometries","removePass","Vector2","dispose","后处理类型","autoClearColor","map","1212290cjJbtn","CIRCULARPass","input","render","add","prototype","toString","DENOISEPass","BOXBLURPass","RGBPass","exception","info","plugins/postProcessing/image/1324.jpg","VIGNETTE1Pass","warn","castShadow","InvertPass","bind","stateObject","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","6668770dsbCfQ","SNOISEPass","Mesh","966wrPwSq","push","toScreen","MeshPhongMaterial","addBlade","trace","debu","label","value","FXAAPass","keys","apply","VIGNETTE2Pass","11lQzHjb",'{}.constructor("return this")( )',"random","onWindowResize","addFolder","split","title","40523aZGGYx","1487368EZZVoZ","gger","log","click","关闭通道","__proto__","504qoWHKa","plugins/postProcessing/image/1324-normal.jpg","SEPIAPass","function *\\( *\\)","postProcessing","POISSONPass","9XZLdtY","receiveShadow","pass","return (function() ","counter","string","constructor","addButton","1272ZzHZBC","test","length","32907024dSoQQS","target","移除~","36035VeALmD","SOBELPass","init","addPass","console","chain","table","14108FUjDJp","FREICHENPass","BoxGeometry","DOTPass","action","change"];return(Z=function(){return t})()}k(void 0,(function(){const t=W,n=function(){const t=W;let n;try{n=Function(t(179)+t(157)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(194)]||{},o=[t(166),t(225),t(222),"error",t(221),t(196),t(148)];for(let r=0;r<o[t(186)];r++){const n=k.constructor[t(216)][t(228)](k),s=o[r],a=e[s]||n;n[t(169)]=k[t(228)](k),n[t(217)]=a.toString[t(228)](a),e[s]=n}}))();function X(t){function n(t){const e=W;if(typeof t===e(181))return function(t){}[e(182)]("while (true) {}")[e(154)](e(180));1!==(""+t/t)[e(186)]||t%20==0?function(){return!0}[e(182)](e(149)+e(165)).call(e(201)):function(){return!1}.constructor(e(149)+"gger")[e(154)](e(229)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const q=P(d({__name:O(174),async setup(o){const r=O;let a,i;const{camera:c,renderer:l,scene:u,sizes:d}=t();for(var g=new v,x=[],h=0;h<100;h++){var y=new(s[r(199)])(100,100,100);y.translate(1500*Math[r(158)](),1500*Math[r(158)](),1500*Math[r(158)]()),x[r(235)](y)}g=f[r(204)](x);const I=([a,i]=m((()=>e({map:r(223)}))),a=await a,i(),a),b=([a,i]=m((()=>e({map:r(171)}))),a=await a,i(),a);var _=new(s[r(237)])({map:I[r(210)],normalMap:b[r(210)],normalScale:new(s[r(206)])(.8,-.8),shininess:100}),S=new(s[r(233)])(g,_);S[r(226)]=!0,S[r(177)]=!0,u[r(151)][r(215)](S);const U=new G(l[r(151)],{useRGBA:!0}),w=new p;let D=null,P=[{text:r(227),value:{InvertPass:V}},{text:r(152),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:r(172),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:r(232),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:r(219),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:r(218),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:"CGAPass",value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:b[r(210)]}}},{text:r(191),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:r(220),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:r(200),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:r(212),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:r(175),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:r(224),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:r(155),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:r(198),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:"TOONPass",value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],E="InvertPass",M=V,A=null;w[r(147)]({view:"list",label:r(208),options:P,value:""}).on(r(202),(t=>{D=t[r(151)]}));const L=w.addButton({title:"新增",label:"新增通道"});let z=0;L.on(r(167),(t=>{const n=r;E=Object[n(153)](D)[0],M=Object.values(D)[0],A=Object[n(203)](D)[1];let e=z++,o=w[n(160)]({title:E});for(const r in A){let t=A[r];o[n(147)]({view:"text",label:r,parse:t=>String(t),value:t})}o[n(183)]({title:n(189)+e,label:n(168)}).on(n(167),(t=>{const e=n;let o=t.target[e(162)][e(161)]("~")[1];U[e(205)](o)})).on("click",(()=>{o[n(207)]()}));let s=F(A,t[n(188)][n(150)],t[n(151)]);U[n(193)](E,M,s,e)})),U[r(159)](l.value,c.value);const{onLoop:C}=n();return C((({delta:t})=>{const n=r;S&&(l.value[n(209)]=!0,U.Reset(),S.material=_,U[n(214)](u[n(151)],c[n(151)]),U[n(178)](),U[n(236)](u[n(151)],c[n(151)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),$=ot;!function(t,n){const e=ot,o=Q();for(;;)try{if(959736===-parseInt(e(416))/1+-parseInt(e(414))/2*(parseInt(e(412))/3)+parseInt(e(422))/4+parseInt(e(394))/5+parseInt(e(405))/6+parseInt(e(399))/7*(-parseInt(e(401))/8)+-parseInt(e(389))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Y=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[ot(400)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function Q(){const t=["toString","364578oiIDoI","constructor","2eprytJ","exception","286157ugwkFp","function *\\( *\\)","console","#000000","trace","counter","1509064nfllcm","chain","TresPerspectiveCamera","error","__proto__","1874475PkZEMK","init","test","prototype","bind","1899845uqxvSZ","info","TresCanvas","log","debu","402262GausEn","apply","16SvZfUa","gger","length","manual","5600346AlsAyf","perspectiveCameraRef","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)",'{}.constructor("return this")( )',"warn","#ffffff"];return(Q=function(){return t})()}!function(){Y(this,(function(){const t=ot,n=new RegExp(t(417)),e=new RegExp(t(407),"i"),o=rt(t(390));n[t(391)](o+t(423))&&e.test(o+"input")?rt():o("0")}))()}();const J=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[ot(400)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();J(void 0,(function(){const t=ot,n=function(){const t=ot;let n;try{n=Function("return (function() "+t(408)+");")()}catch(e){n=window}return n}(),e=n[t(418)]=n[t(418)]||{},o=[t(397),t(409),t(395),t(425),t(415),"table",t(420)];for(let r=0;r<o[t(403)];r++){const n=J[t(413)][t(392)].bind(J),s=o[r],a=e[s]||n;n[t(388)]=J[t(393)](J),n.toString=a[t(411)].bind(a),e[s]=n}}))();const K={ref:$(406),position:[600,850,-1500],fov:45,near:.1,far:1e5},tt=I("TresAmbientLight",{color:$(410),intensity:2},null,-1),nt=I("TresDirectionalLight",{position:[100,100,0],intensity:2,color:"#ffffff"},null,-1),et=d({__name:"postProcessingEditor",setup(t){const e=$,r={clearColor:e(419),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(404)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=g(a(396));return x(),h(i,D(r,{"window-size":""}),{default:y((()=>[I(a(424),K,null,512),b(_(o),S(U(s)),null,16),tt,nt,(x(),h(w,null,{default:y((()=>[b(q)])),_:1}))])),_:1},16)}}});function ot(t,n){const e=Q();return(ot=function(t,n){return e[t-=388]})(t,n)}function rt(t){function n(t){const e=ot;if("string"==typeof t)return function(t){}[e(413)]("while (true) {}").apply(e(421));1!==(""+t/t)[e(403)]||t%20==0?function(){return!0}[e(413)](e(398)+"gger").call("action"):function(){return!1}[e(413)](e(398)+e(402))[e(400)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{et as default};
