import{_ as t,t as n,T as e,a0 as o,ai as r}from"./three.MbBECAu81726740218347.js";import{U as a,z as i,Y as s,L as c}from"./@tresjs.C5O8roW51726740218347.js";import"./index.iX1kSe2P1726740218347.js";import{a as l}from"./simplex-noise.P9JMzoHY1726740218347.js";import{C as u}from"./index.qxajnOUQ1726740218347.js";import{d as f,a4 as p,o as h,E as m,L as v,u as d,r as g,f as x,g as w,j as y,aj as b,ak as _,al as M}from"./@vue.JNsx1iN61726740218347.js";import{_ as z}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.FWNtyF1n1726740218347.js";import"./@vueuse.18lbrd2F1726740218347.js";import"./lamina.jg71A56c1726740218347.js";import"./glsl-tokenizer.37TL9LuE1726740218347.js";import"./@amap.bfr68PX11726740218347.js";import"./glsl-token-descope.8f3W1IvS1726740218347.js";import"./glsl-token-depth.DvBPZHii1726740218347.js";import"./glsl-token-scope.dTqSCdYb1726740218347.js";import"./glsl-token-properties.wXnpI7DU1726740218347.js";import"./glsl-token-assignments.W5pE8-A51726740218347.js";import"./glsl-token-string.AVYfh4t_1726740218347.js";import"./glsl-token-functions.cO5bFsqa1726740218347.js";import"./object-hash.rW_XvzOw1726740218347.js";import"./jszip.Axb7QGa61726740218347.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.cKSFaSTG1726740218347.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.o8D4dCFI1726740218347.js";import"./three-stdlib.vORGfiSP1726740218347.js";import"./@pmndrs.WMHo6lO61726740218347.js";import"./utils.HpFd3kg21726740218347.js";const j=R;!function(t,n){const e=R,o=E();for(;;)try{if(232441===-parseInt(e(417))/1*(-parseInt(e(368))/2)+parseInt(e(389))/3+parseInt(e(407))/4*(parseInt(e(376))/5)+parseInt(e(373))/6*(parseInt(e(418))/7)+parseInt(e(395))/8*(-parseInt(e(385))/9)+-parseInt(e(362))/10*(parseInt(e(391))/11)+-parseInt(e(394))/12*(parseInt(e(364))/13))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const I=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(403)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){I(this,(function(){const t=R,n=new RegExp(t(344)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=L(t(366));n[t(347)](o+t(411))&&e[t(347)](o+"input")?L():o("0")}))()}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(403)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();A(void 0,(function(){const t=R,n=function(){const t=R;let n;try{n=Function(t(405)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(400)]=n[t(400)]||{},o=[t(410),t(386),t(388),t(345),t(414),t(348),"trace"];for(let r=0;r<o.length;r++){const n=A[t(393)][t(401)].bind(A),a=o[r],i=e[a]||n;n[t(346)]=A.bind(A),n[t(398)]=i[t(398)].bind(i),e[a]=n}}))();const C=["material"],F=[j(380),j(392),"attributes-uv","attributes-offset",j(370),j(396),j(357),j(390)],S=["geometry"],k=["side"];function R(t,n){const e=E();return(R=function(t,n){return e[t-=343]})(t,n)}const D=f({__name:j(377),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(r){const s=j;let c,f;const g=([c,f]=p((()=>i({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),c=await c,f(),c),x=r,w=l(Math.random);function y(n,e){const o=R,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,a=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,i=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,s=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(349)])(r,a,i,s)}function b(t,n){var e=2*w(t/50,n/50);return e+=4*w(t/100,n/100),e+=.2*w(t/10,n/10)}const _=function(n,o){const r=R,a=[],i=[],s=[],c=[],l=[];let u=new(t[r(349)]),f=new(t[r(349)]);const p=-.25;for(let e=0;e<n;e++){const h=Math.random()*o-o/2,m=Math[r(374)]()*o-o/2,v=b(h,m);a[r(402)](h,v,m);let d=Math.PI-Math[r(374)]()*(2*Math.PI);c[r(402)](Math[r(351)](.5*d)),l[r(402)](Math.cos(.5*d));let g=new(t[r(361)])(0,1,0),x=g.x*Math.sin(d/2),w=g.y*Math[r(351)](d/2),_=g.z*Math[r(351)](d/2),M=Math[r(382)](d/2);u[r(399)](x,w,_,M)[r(379)](),d=.5*Math.random()+p,g=new(t[r(361)])(1,0,0),x=g.x*Math.sin(d/2),w=g.y*Math[r(351)](d/2),_=g.z*Math[r(351)](d/2),M=Math.cos(d/2),f[r(399)](x,w,_,M)[r(379)](),u=y(u,f),d=.5*Math[r(374)]()+p,g=new(t[r(361)])(0,0,1),x=g.x*Math[r(351)](d/2),w=g.y*Math[r(351)](d/2),_=g.z*Math[r(351)](d/2),M=Math[r(382)](d/2),f.set(x,w,_,M)[r(379)](),u=y(u,f),i.push(u.x,u.y,u.z,u.w),e<n/3?s[r(402)](1.8*Math[r(374)]()):s[r(402)](Math[r(374)]())}return{offsetsF32:new(t[r(408)])(new Float32Array(a),3),orientationsF32:new(t[r(408)])(new Float32Array(i),4),stretchesF32:new e(new Float32Array(s),1),halfRootAngleCosF32:new(t[r(408)])(new Float32Array(l),1),halfRootAngleSinF32:new(t[r(408)])(new Float32Array(c),1)}}(x[s(415)],x.width),M=new(t[s(416)])(x.bW,x.bH,1,x[s(359)])[s(369)](0,x.bH/2,0),z=new n(x[s(367)],x[s(367)],32,32);z[s(365)](new(t[s(361)])(0,1,0));const I=z[s(383)][s(371)];for(let t=0;t<I.array[s(409)];t+=3)I[s(356)][t+1]=b(I[s(356)][t],I.array[t+2]);z[s(383)][s(371)].needsUpdate=!0,z.computeVertexNormals();const A=new(u({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(t[s(353)])(.3,.9,0)[s(378)](),bottomColor:new(t[s(353)])(0,.2,0)[s(378)]()},"   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }",s(343),(t=>{t.side=o})));A[s(360)]=g[s(360)],A[s(387)]=g[s(387)],A.toneMapped=!1;const{onLoop:D}=a();return D((({elapsed:t})=>{const n=s;A.uniforms[n(384)][n(413)]=t/4})),(n,e)=>{const o=s;return h(),m("TresGroup",null,[v(o(355),{material:d(A)},[v("TresInstancedBufferGeometry",{index:d(M)[o(380)],"attributes-position":d(M)[o(383)][o(371)],"attributes-uv":d(M)[o(383)].uv,"attributes-offset":d(_)[o(397)],"attributes-orientation":d(_).orientationsF32,"attributes-stretch":d(_)[o(363)],"attributes-halfRootAngleSin":d(_).halfRootAngleSinF32,"attributes-halfRootAngleCos":d(_)[o(352)]},null,8,F)],8,C),v(o(355),{position:[0,0,0],geometry:d(z)},[v(o(358),{color:o(350),side:t[o(412)]},null,8,k)],8,S)])}}});function L(t){function n(t){const e=R;if(typeof t===e(354))return function(t){}[e(393)](e(406)).apply(e(381));1!==(""+t/t)[e(409)]||t%20==0?function(){return!0}.constructor(e(375)+e(372)).call("action"):function(){return!1}[e(393)](e(375)+e(372))[e(403)](e(404)),n(++t)}try{if(t)return n;n(0)}catch(e){}}function E(){const t=["constructor","84432LmqhYO","46184TLWQgD","attributes-stretch","offsetsF32","toString","set","console","prototype","push","apply","stateObject","return (function() ","while (true) {}","727112vWPFXQ","InstancedBufferAttribute","length","log","chain","DoubleSide","value","exception","instances","PlaneGeometry","89611pHKPxg","125839hABTxW","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","function *\\( *\\)","error","__proto__","test","table","Vector4","#000f00","sin","halfRootAngleCosF32","Color","string","TresMesh","array","attributes-halfRootAngleSin","TresMeshStandardMaterial","joints","map","Vector3","50UsynrX","stretchesF32","1547KJZKCW","lookAt","init","width","6HbLNxN","translate","attributes-orientation","position","gger","84bSZNLz","random","debu","10USNEUG","grass","convertSRGBToLinear","normalize","index","counter","cos","attributes","time","81zoKFUx","warn","alphaMap","info","1223940MkfUiB","attributes-halfRootAngleCos","374803AgpFqu","attributes-position"];return(E=function(){return t})()}const T=H;!function(t,n){const e=H,o=B();for(;;)try{if(107338===parseInt(e(152))/1*(-parseInt(e(147))/2)+-parseInt(e(156))/3*(-parseInt(e(149))/4)+-parseInt(e(161))/5*(parseInt(e(178))/6)+-parseInt(e(158))/7*(-parseInt(e(143))/8)+-parseInt(e(145))/9+parseInt(e(153))/10*(-parseInt(e(181))/11)+parseInt(e(144))/12)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const U=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[H(140)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function H(t,n){const e=B();return(H=function(t,n){return e[t-=140]})(t,n)}!function(){U(this,(function(){const t=H,n=new RegExp(t(168)),e=new RegExp(t(155),"i"),o=V(t(175));n[t(160)](o+"chain")&&e[t(160)](o+t(154))?V():o("0")}))()}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[H(140)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function B(){const t=["counter","prototype","length","error","debu","function *\\( *\\)","call","__proto__","constructor","string","action","toString","init","stateObject","console","42ediQUH","table","return (function() ","4895NOYFHE","apply","exception","TresPerspectiveCamera","16xybYNt","4354632FuFVTY","1446768kLSvsh","grass","161086oWcnWk",'{}.constructor("return this")( )',"8pRsGfV","log","gger","2RLAYBI","2810DVOblU","input","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","175173uYJwrX","trace","708379DEgNMz","bind","test","91315baEnVF","info"];return(B=function(){return t})()}O(void 0,(function(){const t=H;let n;try{n=Function(t(180)+t(148)+");")()}catch(r){n=window}const e=n[t(177)]=n[t(177)]||{},o=[t(150),"warn",t(162),t(166),t(141),t(179),t(157)];for(let a=0;a<o.length;a++){const n=O[t(171)][t(164)][t(159)](O),r=o[a],i=e[r]||n;n[t(170)]=O[t(159)](O),n[t(174)]=i.toString[t(159)](i),e[r]=n}}))();const N=v(T(142),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1),P=f({__name:T(146),setup(t){const n=g({alpha:!0,toneMapping:r,windowSize:!0,clearColor:6710886}),e=g({enableDamping:!0,autoRotate:!1});return(t,o)=>(h(),x(d(c),b(_(n)),{default:w((()=>[N,y(d(s),b(_(e)),null,16),(h(),x(M,null,{default:w((()=>[y(D)])),_:1})),(h(),x(M,null,{default:w((()=>[y(d(z),{texture:"https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr"})])),_:1}))])),_:1},16))}});function V(t){function n(t){const e=H;if(typeof t===e(172))return function(t){}.constructor("while (true) {}")[e(140)](e(163));1!==(""+t/t)[e(165)]||t%20==0?function(){return!0}.constructor("debu"+e(151))[e(169)](e(173)):function(){return!1}[e(171)](e(167)+e(151))[e(140)](e(176)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{P as default};
