import{a as t,r as n,N as e,d as o}from"./@tresjs.yMGhEK7G1718787583077.js";import{a5 as r,j as s,aj as a,M as i,O as c,W as l,aU as u,l as v,B as f,az as p,cn as d}from"./three.OZpCYxlY1718787583077.js";import{P as m}from"./tweakpane.qqn77PB81718787583077.js";import{d as g,a3 as x,e as h,o as y,f as I,g as b,J as _,j as S,u as w,aj as U,ak as P,al as D,m as E}from"./@vue.CpOXM7bB1718787583077.js";import{_ as A}from"./@fesjs.BvrsBDNW1718787583077.js";import"./@vueuse.jAwx0y-e1718787583077.js";import"./vue-router.2IN93cQd1718787583077.js";import"./lodash-es.nFpJXAf-1718787583077.js";import"./@qlin.yHhFDldE1718787583077.js";import"./pinia.jgDkRZDw1718787583077.js";import"./@floating-ui.BPbuo5Gx1718787583077.js";import"./@juggle.7yjBMqoW1718787583077.js";!function(t,n){const e=C,o=z();for(;;)try{if(546932===-parseInt(e(526))/1+parseInt(e(514))/2+-parseInt(e(501))/3*(parseInt(e(546))/4)+parseInt(e(536))/5+-parseInt(e(517))/6*(-parseInt(e(535))/7)+-parseInt(e(532))/8+parseInt(e(552))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){L(this,(function(){const t=C,n=new RegExp(t(553)),e=new RegExp(t(521),"i"),o=T("init");n[t(537)](o+t(544))&&e[t(537)](o+"input")?T():o("0")}))()}();const M=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(525)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();M(void 0,(function(){const t=C,n=function(){const t=C;let n;try{n=Function(t(513)+t(523)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(511)]||{},o=[t(518),"warn",t(504),t(545),t(505),t(519),t(500)];for(let r=0;r<o[t(506)];r++){const n=M.constructor.prototype[t(508)](M),s=o[r],a=e[s]||n;n.__proto__=M[t(508)](M),n[t(540)]=a[t(540)][t(508)](a),e[s]=n}}))();function F(t,n,e){const o=C;if(typeof t!==o(551)||null===t)return t;const r=Array[o(512)](t)?[]:{};for(const s in t)t[o(520)](s)&&(r[s]=F(t[s])),s==n&&(r[n]=e);return r}function C(t,n){const e=z();return(C=function(t,n){return e[t-=500]})(t,n)}function z(){const t=["length","value","bind","while (true) {}",'" load was aborted.',"console","isArray","return (function() ","1444334ihWBbK","now","Matrix3","3209214wFYOgA","log","table","hasOwnProperty","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","onerror",'{}.constructor("return this")( )',"stateObject","apply","992185chnSfm","lastIndex","string","exec","send","Vector2","6942464lTBNOl","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx",'Shader "',"14osWsvl","3063685REhLWt","test","random","open","toString","replace","WagnerLoadShaderException","index","chain","error","4qVpxBB","responseText","type","gger","debu","object","9737424wPTQbe","function *\\( *\\)","counter","ShaderMaterial","action","onabort","name","v3v","message","trace","3238959ZVGfCy","Texture","Vector3","info","exception"];return(z=function(){return t})()}function T(t){function n(t){const e=C;if(typeof t===e(528))return function(t){}.constructor(e(509))[e(525)](e(554));1!==(""+t/t)[e(506)]||t%20==0?function(){return!0}.constructor(e(550)+"gger").call(e(556)):function(){return!1}.constructor("debu"+e(549))[e(525)](e(524)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const N=B;!function(t,n){const e=B,o=O();for(;;)try{if(802624===-parseInt(e(512))/1+-parseInt(e(507))/2*(parseInt(e(526))/3)+parseInt(e(510))/4*(-parseInt(e(527))/5)+-parseInt(e(528))/6+parseInt(e(547))/7+-parseInt(e(474))/8*(-parseInt(e(560))/9)+parseInt(e(505))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const R=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[B(484)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function B(t,n){const e=O();return(B=function(t,n){return e[t-=472]})(t,n)}!function(){R(this,(function(){const t=B,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(489),"i"),o=V(t(477));n[t(542)](o+t(476))&&e.test(o+"input")?V():o("0")}))()}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[B(484)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();G(void 0,(function(){const t=B,n=function(){const t=B;let n;try{n=Function("return (function() "+t(549)+");")()}catch(e){n=window}return n}(),e=n[t(563)]=n.console||{},o=[t(491),t(501),"info","error",t(551),t(534),t(543)];for(let r=0;r<o.length;r++){const n=G.constructor[t(490)].bind(G),s=o[r],a=e[s]||n;n[t(478)]=G[t(545)](G),n[t(523)]=a[t(523)][t(545)](a),e[s]=n}}))();class j{constructor(t,n){const e=B;this[e(531)]=1,this[e(497)]=1,this[e(536)]=n||{},this.useRGBA=this[e(536)][e(506)]||!1,this[e(516)]=t,this.copyPass=this.CopyPass(this.settings),this[e(544)]=new(r[e(557)]),this.quad=new(r[e(537)])(new(r[e(502)])(1,1),new(r[e(548)])),this[e(544)][e(568)](this.quad),this[e(486)]=new c(1,1,1,1,-1e4,1e4),this[e(480)]=new l(1,1,{minFilter:void 0!==this[e(536)][e(475)]?this.settings.minFilter:r[e(494)],magFilter:void 0!==this[e(536)].magFilter?this[e(536)].magFilter:r[e(494)],wrapS:void 0!==this[e(536)].wrapS?this[e(536)][e(522)]:r[e(524)],wrapT:void 0!==this[e(536)][e(518)]?this[e(536)][e(518)]:r[e(524)],format:this[e(506)]?u:r[e(499)],type:void 0!==this[e(536)].type?this[e(536)][e(556)]:r[e(529)],stencilBuffer:void 0===this[e(536)].stencilBuffer||this.settings[e(564)]}),this[e(571)]=this[e(480)][e(539)](),this.startTime=Date[e(485)](),this[e(567)]={},this[e(546)]={passItems:[],passes:[]}}[N(572)](t,n,e,o){const r=N;this[r(541)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(538)]};this[r(546)][r(561)][r(525)](s)}[N(559)](t){const n=N;for(let e=this.Stack[n(561)].length-1;e>=0;e--)this[n(546)][n(561)][e][n(558)]===parseInt(t)&&this[n(546)][n(561)][n(535)](e,1);console.log(this[n(546)][n(561)])}CopyPass(){const t=N;this[t(569)][t(472)](this);return this[t(541)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[N(541)](t){const n=N,e=n(554);return this.shader=function(t,n){const e=C,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,c=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,l={sampler2D:{type:"t",value:()=>new(r[C(502)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new s},vec3:{type:"v3",value:()=>new(r[C(503)])},vec4:{type:"v4",value:()=>new a},bvec2:{type:"v2",value:()=>new(r[C(531)])},bvec3:{type:"v3",value:()=>new(r[C(503)])},bvec4:{type:"v4",value:()=>new a},ivec2:{type:"v2",value:()=>new(r[C(531)])},ivec3:{type:"v3",value:()=>new(r[C(503)])},ivec4:{type:"v4",value:()=>new a},mat2:{type:"v2",value:()=>new(void 0)},mat3:{type:"v3",value:()=>new(r[C(516)])},mat4:{type:"v4",value:()=>new i}},u={float:{type:"fv",value:()=>[]},vec3:{type:e(559),value:()=>[]}};let v;const f={resolution:{type:"v2",value:new(r[e(531)])(1,1),default:!0},time:{type:"f",value:Date[e(515)](),default:!0},tInput:{type:"t",value:new(r[e(502)]),default:!0}};let p,d;for(;null!==(v=o[e(529)](n));)v[e(543)]===o[e(527)]&&o[e(527)]++,p=v[1],d=v[2],f[d]={type:l[p][e(548)],value:l[p].value()};for(;null!==(v=c[e(529)](n));)v[e(543)]===o[e(527)]&&o[e(527)]++,p=v[1],d=v[2],v[3],f[d]={type:u[p][e(548)],value:u[p][e(507)]()};return new(r[e(555)])({uniforms:f,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(538)]}[N(569)](t){this[N(538)]=null,this.params={}}[N(487)](){const t=N;this[t(562)]=this.front,this[t(553)]=this.back}[N(519)](t,n){const e=N,o=window[e(479)],r=window[e(570)];t.setSize(1*o,1*r),n[e(500)][e(521)](70,o/r,n[e(508)],n[e(513)]),this[e(482)](o,r);return this[e(552)](o,r,!0)}[N(482)](t,n){const e=N;this[e(531)]=t,this.height=n,this[e(486)][e(500)].makeOrthographic(t/-2,t/2,n/2,n/-2,this[e(486)].near,this[e(486)].far),this[e(566)][e(493)][e(517)](t,n,1),this[e(480)][e(482)](t,n),this.back[e(482)](t,n)}[N(552)](t,n,e){const o=N;return new(r[o(504)])(t,n,{minFilter:r[o(494)],magFilter:v,format:e?r[o(520)]:r[o(499)]})}[N(509)](t,n,e,o){const r=N;this.renderer.setRenderTarget(this.write),this[r(516)].render(t,n),o||this.swapBuffers()}[N(498)](){const t=N,n=this[t(553)];this[t(553)]=this[t(562)],this[t(562)]=n}[N(515)](){const t=N;for(let n=0;n<this[t(546)][t(561)][t(532)];n++){const e=this[t(546)].passItems[n][t(538)],o=this[t(546)][t(561)][n][t(483)];if(this[t(516)][t(530)](this[t(553)]),e instanceof r[t(514)]){this[t(566)][t(503)]=e,this[t(566)][t(503)][t(511)][t(540)][t(473)]=this[t(562)][t(550)],this.quad[t(503)][t(511)][t(496)][t(473)][t(517)](this[t(531)],this[t(497)]),this[t(566)][t(503)].uniforms[t(492)][t(473)]=.001*(Date[t(485)]()-this.startTime);for(const n in o)this[t(566)].material[t(511)][n][t(473)]=o[n];this.renderer.render(this.scene,this[t(486)]),this[t(498)]()}}}toScreen(t,n){const e=N;this[e(516)].setRenderTarget(null),this[e(566)][e(503)]=this.copyPass,this[e(566)].material[e(511)].tInput[e(473)]=this[e(562)][e(550)],this.quad[e(503)][e(511)].resolution[e(473)][e(517)](this[e(531)],this[e(497)]),this.renderer[e(509)](this.scene,this[e(486)])}}function O(){const t=["camera","Reset","constructor","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","prototype","log","time","scale","LinearFilter","gger","resolution","height","swapBuffers","RGBFormat","projectionMatrix","warn","PlaneGeometry","material","WebGLRenderTarget","16582700PZKKZv","useRGBA","2509798BYTIAI","near","render","20236vmvGPM","uniforms","206442DbdhRT","far","ShaderMaterial","pass","renderer","set","wrapT","onWindowResize","RGBAFormat","makePerspective","wrapS","toString","ClampToEdgeWrapping","push","3ePkLEG","115ihRnlq","4022496DXFfrZ","UnsignedByteType","setRenderTarget","width","length","stateObject","table","splice","settings","Mesh","shader","clone","tInput","loadShadervf","test","trace","scene","bind","Stack","7119189ApKOtI","MeshBasicMaterial",'{}.constructor("return this")( )',"texture","exception","getOfflineTexture","write","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","while (true) {}","type","Scene","uuid","removePass","102393dACzTy","passItems","read","console","stencilBuffer","string","quad","passes","add","Pass","innerHeight","back","addPass","call","value","264vXBSDl","minFilter","chain","init","__proto__","innerWidth","front","debu","setSize","params","apply","now"];return(O=function(){return t})()}function V(t){function n(t){const e=B;if(typeof t===e(565))return function(t){}[e(488)](e(555)).apply("counter");1!==(""+t/t).length||t%20==0?function(){return!0}[e(488)](e(481)+e(495))[e(472)]("action"):function(){return!1}[e(488)](e(481)+"gger")[e(484)](e(533)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const H="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",k=Z;function W(){const t=["addFolder","constructor","TOONPass","986910dfXRsk","1657086RNfbxB","新增通道","while (true) {}","3196836TwORxd","stateObject","toString","addButton","return (function() ","prototype","bind","title","string","FXAAPass","function *\\( *\\)","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","error","table","label","change","call","addBlade","MeshPhongMaterial","length","split","exception",'{}.constructor("return this")( )',"values","dispose","test","__proto__","material","autoClearColor","addPass","9066048PCGrIB","FREICHENPass","chain","onWindowResize","Mesh","1094385GRXUil","warn","后处理类型","Vector2","gger","random","apply","10260fFovYl","log","VIGNETTE2Pass","click","SEPIAPass","translate","DENOISEPass","RGBPass","debu","init","DOTPass","4213643qCjSHF","移除~","castShadow","12DfixDS","render","Reset","BOXBLURPass","postProcessing","关闭通道","counter","60JYncNW","add","1401HAInGw","map","pass","InvertPass","console","CGAPass","toScreen","text","SOBELPass","CIRCULARPass","keys","value","trace"];return(W=function(){return t})()}!function(t,n){const e=Z,o=W();for(;;)try{if(614681===-parseInt(e(334))/1+parseInt(e(335))/2+-parseInt(e(318))/3*(-parseInt(e(380))/4)+-parseInt(e(373))/5+parseInt(e(309))/6*(-parseInt(e(391))/7)+-parseInt(e(368))/8+-parseInt(e(338))/9*(-parseInt(e(316))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const X=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){X(this,(function(){const t=Z,n=new RegExp(t(348)),e=new RegExp(t(349),"i"),o=$(t(389));n.test(o+t(370))&&e[t(363)](o+"input")?$():o("0")}))()}();const q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Z(379)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function Z(t,n){const e=W();return(Z=function(t,n){return e[t-=309]})(t,n)}q(void 0,(function(){const t=Z;let n;try{n=Function(t(342)+t(360)+");")()}catch(r){n=window}const e=n.console=n[t(322)]||{},o=[t(381),t(374),"info",t(350),t(359),t(351),t(330)];for(let s=0;s<o[t(357)];s++){const n=q[t(332)][t(343)][t(344)](q),r=o[s],a=e[r]||n;n[t(364)]=q.bind(q),n.toString=a[t(340)][t(344)](a),e[r]=n}}))();function $(t){function n(t){const e=Z;if(typeof t===e(346))return function(t){}[e(332)](e(337))[e(379)](e(315));1!==(""+t/t).length||t%20==0?function(){return!0}[e(332)](e(388)+e(377))[e(354)]("action"):function(){return!1}[e(332)](e(388)+e(377))[e(379)](e(339)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const J=A(g({__name:k(313),async setup(o){const s=k;let a,i;const{camera:c,renderer:l,scene:u,sizes:v}=t();for(var g=new f,h=[],y=0;y<100;y++){var I=new p(100,100,100);I[s(385)](1500*Math.random(),1500*Math[s(378)](),1500*Math.random()),h.push(I)}g=d(h);const b=([a,i]=x((()=>e({map:"plugins/postProcessing/image/1324.jpg"}))),a=await a,i(),a),_=([a,i]=x((()=>e({map:"plugins/postProcessing/image/1324-normal.jpg"}))),a=await a,i(),a);var S=new(r[s(356)])({map:b[s(319)],normalMap:_.map,normalScale:new(r[s(376)])(.8,-.8),shininess:100}),w=new(r[s(372)])(g,S);w[s(393)]=!0,w.receiveShadow=!0,u[s(329)][s(317)](w);const U=new j(l.value,{useRGBA:!0}),P=new m;let D=null,E=[{text:s(321),value:{InvertPass:H}},{text:s(347),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:s(384),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:"SNOISEPass",value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:s(312),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:s(386),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:s(323),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:_[s(319)]}}},{text:s(326),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:s(387),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:s(390),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(327),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:"POISSONPass",value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:"VIGNETTE1Pass",value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(382),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:s(369),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:s(333),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],A=s(321),L=H,M=null;P[s(355)]({view:"list",label:s(375),options:E,value:""}).on(s(353),(t=>{D=t[s(329)]}));const C=P.addButton({title:"新增",label:s(336)});let z=0;C.on(s(383),(t=>{const n=s;A=Object[n(328)](D)[0],L=Object[n(361)](D)[0],M=Object[n(361)](D)[1];let e=z++,o=P[n(331)]({title:A});for(const s in M){let t=M[s];o[n(355)]({view:n(325),label:s,parse:t=>String(t),value:t})}o[n(341)]({title:n(392)+e,label:n(314)}).on(n(383),(t=>{const e=n;let o=t.target[e(345)][e(358)]("~")[1];U.removePass(o)})).on(n(383),(()=>{o[n(362)]()}));let r=F(M,t.target[n(352)],t[n(329)]);U[n(367)](A,L,r,e)})),U[s(371)](l[s(329)],c.value);const{onLoop:T}=n();return T((({delta:t})=>{const n=s;w&&(l[n(329)][n(366)]=!0,U[n(311)](),w[n(365)]=S,U[n(310)](u.value,c[n(329)]),U[n(320)](),U[n(324)](u[n(329)],c[n(329)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),K=Y;function Y(t,n){const e=nt();return(Y=function(t,n){return e[t-=337]})(t,n)}!function(t,n){const e=Y,o=nt();for(;;)try{if(141407===parseInt(e(368))/1+-parseInt(e(344))/2*(-parseInt(e(338))/3)+parseInt(e(358))/4+-parseInt(e(346))/5*(parseInt(e(352))/6)+-parseInt(e(367))/7+-parseInt(e(377))/8*(-parseInt(e(343))/9)+-parseInt(e(362))/10*(parseInt(e(354))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Y(345)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){Q(this,(function(){const t=Y,n=new RegExp("function *\\( *\\)"),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=at(t(340));n[t(350)](o+"chain")&&e.test(o+t(373))?at():o("0")}))()}();const tt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Y(345)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function nt(){const t=["table","TresDirectionalLight","698778NLNWeJ","4hPMhnb","apply","16640ItFtfc","__proto__","warn","toString","test","log","12qlolco","trace","1529tbwisH","bind","counter","error","165972XDrpwu","while (true) {}","#ffffff","stateObject","20510JQZLkS","console","postProcessingEditor","action","gger","1332744sJImGD","256809RsxKgE","length","constructor","return (function() ","info","input","debu","TresAmbientLight",'{}.constructor("return this")( )',"16AXPqBn","#000000","perspectiveCameraRef","254937HOIyhu","TresCanvas","init"];return(nt=function(){return t})()}tt(void 0,(function(){const t=Y,n=function(){const t=Y;let n;try{n=Function(t(371)+t(376)+");")()}catch(e){n=window}return n}(),e=n[t(363)]=n.console||{},o=[t(351),t(348),t(372),t(357),"exception",t(341),t(353)];for(let r=0;r<o.length;r++){const n=tt[t(370)].prototype[t(355)](tt),s=o[r],a=e[s]||n;n[t(347)]=tt[t(355)](tt),n[t(349)]=a[t(349)][t(355)](a),e[s]=n}}))();const et={ref:K(337),position:[600,850,-1500],fov:45,near:.1,far:1e5},ot=_(K(375),{color:K(360),intensity:2},null,-1),rt=_(K(342),{position:[100,100,0],intensity:2,color:"#ffffff"},null,-1),st=g({__name:K(364),setup(t){const e=K,r={clearColor:e(378),shadows:!0,alpha:!1,useLegacyLights:!0},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=h(e(339));return y(),I(a,E(r,{"window-size":""}),{default:b((()=>[_("TresPerspectiveCamera",et,null,512),S(w(o),U(P(s)),null,16),ot,rt,(y(),I(D,null,{default:b((()=>[S(J)])),_:1}))])),_:1},16)}}});function at(t){function n(t){const e=Y;if("string"==typeof t)return function(t){}[e(370)](e(359))[e(345)](e(356));1!==(""+t/t)[e(369)]||t%20==0?function(){return!0}.constructor(e(374)+e(366)).call(e(365)):function(){return!1}[e(370)](e(374)+"gger")[e(345)](e(361)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{st as default};
