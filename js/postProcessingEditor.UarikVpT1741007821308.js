import{m as t,e as n,a as e,o}from"./@tresjs.u6hJLBm41741007821308.js";import{_ as r,b as s,ar as a,p as i,aV as c,m as l,aR as u,cC as v,V as f,r as p}from"./three.sBrYSCgq1741007821308.js";import{P as d}from"./tweakpane.yDiyAAkA1741007821308.js";import{d as m,a3 as g,e as x,o as h,f as y,g as I,N as b,j as _,aj as S,ak as w,u as U,al as D,m as P}from"./@vue.NRI7TcgI1741007821308.js";import{_ as E}from"./@fesjs.5qm9mpwh1741007821308.js";import"./postprocessing.rsQjznIU1741007821308.js";import"./@vueuse.jd1Cg91M1741007821308.js";import"./vue-router.ArfKSsyg1741007821308.js";import"./lodash-es.pklfUAS51741007821308.js";import"./@qlin.yHhFDldE1741007821308.js";import"./pinia.uil_kwoa1741007821308.js";import"./@floating-ui.BPbuo5Gx1741007821308.js";import"./@juggle.7yjBMqoW1741007821308.js";function M(t,n){const e=L();return(M=function(t,n){return e[t-=355]})(t,n)}!function(t,n){const e=M,o=L();for(;;)try{if(205612===parseInt(e(401))/1*(parseInt(e(387))/2)+parseInt(e(365))/3*(-parseInt(e(384))/4)+parseInt(e(411))/5*(-parseInt(e(393))/6)+parseInt(e(414))/7*(parseInt(e(368))/8)+parseInt(e(417))/9*(-parseInt(e(407))/10)+parseInt(e(391))/11*(-parseInt(e(375))/12)+parseInt(e(415))/13)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[M(362)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function L(){const t=["Matrix4",'Shader "',"Matrix3","send","11510LsdFzw","isArray","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","name","input","onload","38840bhtBRz","object",'" load was aborted.',"console","20MOaMWy","bind","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","49RSqfWz","13553787OwVWwz","value","873fBfwEt","string","call","hasOwnProperty",'{}.constructor("return this")( )',"WagnerLoadShaderException","onerror","info","lastIndex","stateObject","v3v","replace","error","ShaderMaterial","apply","Matrix2","Vector3","597QtupwK","onabort","action","50136oReQfW","responseText","length","toString","message","chain","counter","15672AEaXoH","table","now","Vector4","get","\" couldn't be loaded.","Texture","random","Vector2","6808rYmoxN","gger","log","42DAcLLF","function *\\( *\\)","index","constructor","814DLTcjg","init","465714OlJrOM","debu","open","type"];return(L=function(){return t})()}!function(){A(this,(function(){const t=M,n=new RegExp(t(388)),e=new RegExp(t(413),"i"),o=F(t(392));n.test(o+t(373))&&e.test(o+t(405))?F():o("0")}))()}();const z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[M(362)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();z(void 0,(function(){const t=M;let n;try{n=Function("return (function() "+t(421)+");")()}catch(r){n=window}const e=n[t(410)]=n[t(410)]||{},o=[t(386),"warn",t(355),t(360),"exception",t(376),"trace"];for(let s=0;s<o[t(370)];s++){const n=z[t(390)].prototype[t(412)](z),r=o[s],a=e[r]||n;n.__proto__=z[t(412)](z),n[t(371)]=a[t(371)].bind(a),e[r]=n}}))();function C(t,n,e){const o=M;if(typeof t!==o(408)||null===t)return t;const r=Array[o(402)](t)?[]:{};for(const s in t)t[o(420)](s)&&(r[s]=C(t[s])),s==n&&(r[n]=e);return r}function F(t){function n(t){const e=M;if(typeof t===e(418))return function(t){}[e(390)]("while (true) {}")[e(362)](e(374));1!==(""+t/t)[e(370)]||t%20==0?function(){return!0}[e(390)]("debu"+e(385))[e(419)](e(367)):function(){return!1}.constructor(e(394)+e(385))[e(362)](e(357)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const N=j;!function(t,n){const e=j,o=B();for(;;)try{if(297279===-parseInt(e(244))/1*(-parseInt(e(219))/2)+parseInt(e(160))/3*(parseInt(e(199))/4)+parseInt(e(164))/5+-parseInt(e(232))/6+parseInt(e(174))/7*(parseInt(e(247))/8)+parseInt(e(242))/9+-parseInt(e(229))/10*(parseInt(e(197))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const T=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[j(192)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){T(this,(function(){const t=j,n=new RegExp(t(220)),e=new RegExp(t(207),"i"),o=O(t(202));n.test(o+t(185))&&e.test(o+t(195))?O():o("0")}))()}();const R=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[j(192)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function j(t,n){const e=B();return(j=function(t,n){return e[t-=157]})(t,n)}function B(){const t=["set","params","tInput","wrapT","magFilter","time","Pass","counter","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","add","value","onWindowResize","call","settings","near","action","WebGLRenderTarget","height","Stack","shader","write","9VDMYeD","OrthographicCamera","MeshBasicMaterial","texture","1805650UjQEzg","stencilBuffer","innerHeight","back","getOfflineTexture","RGBAFormat","__proto__","width","scale","stateObject","7ZQvLbI","passItems","length","table","Mesh","prototype","setRenderTarget","setSize","scene","log","addPass","chain","render","ShaderMaterial","resolution","front","makeOrthographic","now","apply",'{}.constructor("return this")( )',"CopyPass","input","innerWidth","11836vwYWnY","startTime","563576Mtxpyi","read","uuid","init","console","material","debu","useRGBA","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","push","ClampToEdgeWrapping","swapBuffers","error","return (function() ","LinearFilter","PlaneGeometry","toScreen","camera","minFilter","toString","4RZiCqj","function *\\( *\\)","string","quad","renderer","splice","projectionMatrix","warn","passes","UnsignedByteType","11530totyXs","constructor","type","2028252XnDUxA","wrapS","uniforms","info","exception","makePerspective","RGBFormat","bind","removePass","Reset","5285070RqAqWe","while (true) {}","234790uHNfcv","copyPass","loadShadervf","282616gDWTEs"];return(B=function(){return t})()}R(void 0,(function(){const t=j;let n;try{n=Function(t(212)+t(193)+");")()}catch(r){n=window}const e=n.console=n[t(203)]||{},o=[t(183),t(226),t(235),t(211),t(236),t(177),"trace"];for(let s=0;s<o.length;s++){const n=R[t(230)][t(179)][t(239)](R),r=o[s],a=e[r]||n;n[t(170)]=R.bind(R),n[t(218)]=a[t(218)][t(239)](a),e[r]=n}}))();class G{constructor(t,n){const e=j;this.width=1,this[e(265)]=1,this[e(261)]=n||{},this[e(206)]=this.settings[e(206)]||!1,this[e(223)]=t,this[e(245)]=this[e(194)](this[e(261)]),this[e(182)]=new i,this[e(222)]=new(r[e(178)])(new(r[e(214)])(1,1),new(r[e(162)])),this[e(182)][e(257)](this[e(222)]),this[e(216)]=new(r[e(161)])(1,1,1,1,-1e4,1e4),this[e(189)]=new(r[e(264)])(1,1,{minFilter:void 0!==this.settings[e(217)]?this[e(261)][e(217)]:r[e(213)],magFilter:void 0!==this[e(261)][e(252)]?this[e(261)].magFilter:r[e(213)],wrapS:void 0!==this[e(261)][e(233)]?this[e(261)][e(233)]:c,wrapT:void 0!==this[e(261)][e(251)]?this.settings.wrapT:r[e(209)],format:this[e(206)]?r[e(169)]:r[e(238)],type:void 0!==this[e(261)][e(231)]?this[e(261)][e(231)]:r[e(228)],stencilBuffer:void 0===this.settings[e(165)]||this.settings[e(165)]}),this[e(167)]=this[e(189)].clone(),this[e(198)]=Date[e(191)](),this[e(227)]={},this[e(157)]={passItems:[],passes:[]}}[N(184)](t,n,e,o){const r=N;this[r(246)](n);const s={shaderName:t,params:e,uuid:o,shader:this.shader};this[r(157)][r(175)][r(208)](s)}[N(240)](t){const n=N;for(let e=this[n(157)][n(175)][n(176)]-1;e>=0;e--)this.Stack[n(175)][e][n(201)]===parseInt(t)&&this.Stack[n(175)][n(224)](e,1);console[n(183)](this[n(157)][n(175)])}[N(194)](){const t=N;this[t(254)][t(260)](this);return this[t(246)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[N(246)](t){const n=N,e=n(256);return this[n(158)]=function(t,n){const e=M,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,i=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,c={sampler2D:{type:"t",value:()=>new(r[M(381)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[M(383)])},vec3:{type:"v3",value:()=>new(r[M(364)])},vec4:{type:"v4",value:()=>new(r[M(378)])},bvec2:{type:"v2",value:()=>new(r[M(383)])},bvec3:{type:"v3",value:()=>new s},bvec4:{type:"v4",value:()=>new a},ivec2:{type:"v2",value:()=>new(r[M(383)])},ivec3:{type:"v3",value:()=>new(r[M(364)])},ivec4:{type:"v4",value:()=>new(r[M(378)])},mat2:{type:"v2",value:()=>new(r[M(363)])},mat3:{type:"v3",value:()=>new(r[M(399)])},mat4:{type:"v4",value:()=>new(r[M(397)])}},l={float:{type:"fv",value:()=>[]},vec3:{type:e(358),value:()=>[]}};let u;const v={resolution:{type:"v2",value:new(r[e(383)])(1,1),default:!0},time:{type:"f",value:Date[e(377)](),default:!0},tInput:{type:"t",value:new(r[e(381)]),default:!0}};let f,p;for(;null!==(u=o.exec(n));)u[e(389)]===o.lastIndex&&o[e(356)]++,f=u[1],p=u[2],v[p]={type:c[f][e(396)],value:c[f][e(416)]()};for(;null!==(u=i.exec(n));)u.index===o[e(356)]&&o.lastIndex++,f=u[1],p=u[2],u[3],v[p]={type:l[f][e(396)],value:l[f][e(416)]()};return new(r[e(361)])({uniforms:v,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this.shader}[N(254)](t){const n=N;this[n(158)]=null,this[n(249)]={}}[N(241)](){const t=N;this[t(200)]=this[t(189)],this.write=this[t(167)]}[N(259)](t,n){const e=N,o=window[e(196)],r=window[e(166)];t.setSize(1*o,1*r),n[e(225)][e(237)](70,o/r,n.near,n.far),this[e(181)](o,r);return this[e(168)](o,r,!0)}setSize(t,n){const e=N;this.width=t,this.height=n,this[e(216)][e(225)][e(190)](t/-2,t/2,n/2,n/-2,this[e(216)][e(262)],this[e(216)].far),this[e(222)][e(172)][e(248)](t,n,1),this.front.setSize(t,n),this[e(167)][e(181)](t,n)}getOfflineTexture(t,n,e){const o=N;return new(r[o(264)])(t,n,{minFilter:l,magFilter:r[o(213)],format:e?u:r[o(238)]})}[N(186)](t,n,e,o){const r=N;this[r(223)].setRenderTarget(this[r(159)]),this[r(223)].render(t,n),o||this[r(210)]()}[N(210)](){const t=N,n=this[t(159)];this[t(159)]=this[t(200)],this[t(200)]=n}pass(){const t=N;for(let n=0;n<this[t(157)][t(175)][t(176)];n++){const e=this[t(157)].passItems[n][t(158)],o=this[t(157)][t(175)][n][t(249)];if(this[t(223)][t(180)](this.write),e instanceof r[t(187)]){this[t(222)][t(204)]=e,this.quad[t(204)].uniforms[t(250)][t(258)]=this[t(200)][t(163)],this[t(222)][t(204)][t(234)][t(188)].value[t(248)](this[t(171)],this[t(265)]),this[t(222)][t(204)].uniforms[t(253)][t(258)]=.001*(Date[t(191)]()-this[t(198)]);for(const n in o)this[t(222)].material[t(234)][n][t(258)]=o[n];this[t(223)].render(this[t(182)],this[t(216)]),this[t(210)]()}}}[N(215)](t,n){const e=N;this[e(223)][e(180)](null),this[e(222)][e(204)]=this[e(245)],this[e(222)].material[e(234)][e(250)][e(258)]=this[e(200)].texture,this[e(222)][e(204)][e(234)][e(188)][e(258)].set(this[e(171)],this[e(265)]),this.renderer[e(186)](this[e(182)],this[e(216)])}}function O(t){function n(t){const e=j;if(typeof t===e(221))return function(t){}.constructor(e(243)).apply(e(255));1!==(""+t/t)[e(176)]||t%20==0?function(){return!0}[e(230)](e(205)+"gger")[e(260)](e(263)):function(){return!1}[e(230)](e(205)+"gger").apply(e(173)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const V="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",H=q;!function(t,n){const e=q,o=X();for(;;)try{if(569615===-parseInt(e(242))/1*(parseInt(e(285))/2)+-parseInt(e(223))/3*(-parseInt(e(268))/4)+parseInt(e(259))/5+parseInt(e(249))/6+parseInt(e(216))/7*(-parseInt(e(247))/8)+-parseInt(e(276))/9+parseInt(e(229))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const W=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(254)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){W(this,(function(){const t=q,n=new RegExp(t(232)),e=new RegExp(t(237),"i"),o=Z(t(244));n.test(o+"chain")&&e.test(o+t(271))?Z():o("0")}))()}();const k=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(254)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function X(){const t=["input","VIGNETTE2Pass","addBlade","plugins/postProcessing/image/1324-normal.jpg","BoxGeometry","8861517bkRvEq","push","change","keys","title","BOXBLURPass","receiveShadow","trace","label","2312LSWDmY","plugins/postProcessing/image/1324.jpg","MeshPhongMaterial","random","render","text","新增通道","addButton","Reset","DOTPass","value","addPass","autoClearColor","add","constructor","35ZLIFxz","string","action","RGBPass","target","postProcessing","error","15oNCUbn","call","BufferGeometry","log","__proto__","info","2316470kPaAvV","split","pass","function *\\( *\\)","removePass","list","toString","map","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","关闭通道","FREICHENPass","gger","translate","241jqMjlj","bind","init","table","prototype","1238952qOIUFs","console","3377730AMWqzX","CIRCULARPass","移除~","castShadow","POISSONPass","apply","exception","length",'{}.constructor("return this")( )',"SEPIAPass","3731210YgUQJg","VIGNETTE1Pass","click","warn","while (true) {}","dispose","InvertPass","TOONPass","debu","853060SLJFNb","toScreen","CGAPass"];return(X=function(){return t})()}function q(t,n){const e=X();return(q=function(t,n){return e[t-=207]})(t,n)}k(void 0,(function(){const t=q,n=function(){const t=q;let n;try{n=Function("return (function() "+t(257)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(248)]||{},o=[t(226),t(262),t(228),t(222),t(255),t(245),t(283)];for(let r=0;r<o[t(256)];r++){const n=k[t(215)][t(246)][t(243)](k),s=o[r],a=e[s]||n;n[t(227)]=k[t(243)](k),n[t(235)]=a.toString[t(243)](a),e[s]=n}}))();function Z(t){function n(t){const e=q;if(typeof t===e(217))return function(t){}.constructor(e(263)).apply("counter");1!==(""+t/t)[e(256)]||t%20==0?function(){return!0}.constructor(e(267)+e(240))[e(224)](e(218)):function(){return!1}.constructor(e(267)+e(240))[e(254)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const $=E(m({__name:H(221),async setup(o){const s=H;let a,i;const{camera:c,renderer:l,scene:u,sizes:m}=t();for(var x=new(r[s(225)]),h=[],y=0;y<100;y++){var I=new(r[s(275)])(100,100,100);I[s(241)](1500*Math[s(288)](),1500*Math[s(288)](),1500*Math[s(288)]()),h[s(277)](I)}x=v(h);const b=([a,i]=g((()=>e({map:s(286)}))),a=await a,i(),a),_=([a,i]=g((()=>e({map:s(274)}))),a=await a,i(),a);var S=new(r[s(287)])({map:b[s(236)],normalMap:_[s(236)],normalScale:new f(.8,-.8),shininess:100}),w=new p(x,S);w[s(252)]=!0,w[s(282)]=!0,u[s(211)][s(214)](w);const U=new G(l[s(211)],{useRGBA:!0}),D=new d;let P=null,E=[{text:s(265),value:{InvertPass:V}},{text:"FXAAPass",value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:s(258),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:"SNOISEPass",value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:s(281),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:"DENOISEPass",value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:s(270),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:_[s(236)]}}},{text:"SOBELPass",value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:s(219),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:s(210),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(250),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:s(253),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:s(260),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(272),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:s(239),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:s(266),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],M=s(265),A=V,L=null;D[s(273)]({view:s(234),label:"后处理类型",options:E,value:""}).on(s(278),(t=>{P=t[s(211)]}));const z=D[s(208)]({title:"新增",label:s(207)});let F=0;z.on(s(261),(t=>{const n=s;M=Object[n(279)](P)[0],A=Object.values(P)[0],L=Object.values(P)[1];let e=F++,o=D.addFolder({title:M});for(const s in L){let t=L[s];o[n(273)]({view:n(290),label:s,parse:t=>String(t),value:t})}o[n(208)]({title:n(251)+e,label:n(238)}).on(n(261),(t=>{const e=n;let o=t[e(220)][e(280)][e(230)]("~")[1];U[e(233)](o)})).on(n(261),(()=>{o[n(264)]()}));let r=C(L,t.target[n(284)],t[n(211)]);U[n(212)](M,A,r,e)})),U.onWindowResize(l[s(211)],c.value);const{onLoop:N}=n();return N((({delta:t})=>{const n=s;w&&(l[n(211)][n(213)]=!0,U[n(209)](),w.material=S,U[n(289)](u.value,c.value),U[n(231)](),U[n(269)](u[n(211)],c[n(211)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),Q=J;!function(t,n){const e=J,o=ot();for(;;)try{if(497698===-parseInt(e(386))/1+-parseInt(e(376))/2+parseInt(e(391))/3*(parseInt(e(372))/4)+-parseInt(e(366))/5*(-parseInt(e(398))/6)+parseInt(e(369))/7*(parseInt(e(362))/8)+-parseInt(e(378))/9+parseInt(e(381))/10*(-parseInt(e(360))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Y=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[J(374)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function J(t,n){const e=ot();return(J=function(t,n){return e[t-=358]})(t,n)}!function(){Y(this,(function(){const t=J,n=new RegExp(t(370)),e=new RegExp(t(365),"i"),o=et("init");n[t(387)](o+t(394))&&e.test(o+t(361))?et():o("0")}))()}();const K=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();K(void 0,(function(){const t=J,n=function(){const t=J;let n;try{n=Function("return (function() "+t(395)+");")()}catch(e){n=window}return n}(),e=n[t(363)]=n[t(363)]||{},o=["log",t(377),t(396),t(375),t(359),t(373),t(385)];for(let r=0;r<o[t(371)];r++){const n=K[t(399)][t(392)][t(397)](K),s=o[r],a=e[s]||n;n[t(389)]=K[t(397)](K),n.toString=a[t(358)].bind(a),e[s]=n}}))();const tt={ref:Q(364),position:[600,850,-1500],fov:45,near:.1,far:1e5},nt=m({__name:Q(379),setup(t){const e=Q,r={clearColor:e(393),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(380)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=x("TresCanvas");return h(),y(i,P(r,{"window-size":""}),{default:I((()=>[b("TresPerspectiveCamera",tt,null,512),_(U(o),S(w(s)),null,16),n[0]||(n[0]=b(a(388),{color:"#ffffff",intensity:2},null,-1)),n[1]||(n[1]=b(a(382),{position:[100,100,0],intensity:2,color:a(368)},null,-1)),(h(),y(D,null,{default:I((()=>[_($)])),_:1}))])),_:1},16)}}});function et(t){function n(t){const e=J;if(typeof t===e(400))return function(t){}[e(399)]("while (true) {}").apply("counter");1!==(""+t/t).length||t%20==0?function(){return!0}.constructor(e(390)+e(384))[e(383)](e(367)):function(){return!1}[e(399)]("debugger")[e(374)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}function ot(){const t=["postProcessingEditor","manual","2350LDOJzd","TresDirectionalLight","call","gger","trace","555301lJaNQu","test","TresAmbientLight","__proto__","debu","20583RYpFdy","prototype","#000000","chain",'{}.constructor("return this")( )',"info","bind","978ImscbZ","constructor","string","toString","exception","34804CHEqOh","input","920uwSdxX","console","perspectiveCameraRef","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","16180MojsNz","action","#ffffff","57295AMKsyh","function *\\( *\\)","length","296uISpRC","table","apply","error","100584QPBmIh","warn","1166634CBaMFD"];return(ot=function(){return t})()}export{nt as default};
