import{m as t,e as n,a as e,o}from"./@tresjs.GCV-1VTd1743149128717.js";import{V as r,a9 as s,_ as a,t as i,M as c,Y as l,r as u,aZ as v,c6 as f,l as p}from"./three.hBhj0ayh1743149128717.js";import{P as d}from"./tweakpane.ivGeiIdz1743149128717.js";import{d as m,a3 as g,e as x,o as h,f as y,g as I,N as b,j as _,u as S,aj as U,ak as w,al as P,m as E}from"./@vue.L-brCdZe1743149128717.js";import{_ as D}from"./@fesjs.w7aAWifr1743149128717.js";import"./postprocessing.JYKQQ2FM1743149128717.js";import"./@vueuse.K3OHOx4F1743149128717.js";import"./vue-router.2RdbTeKA1743149128717.js";import"./lodash-es.pklfUAS51743149128717.js";import"./@qlin.o0hjOMCg1743149128717.js";import"./pinia.Vg5gtfOZ1743149128717.js";import"./@floating-ui.HzHndBae1743149128717.js";import"./@juggle.4EyLec-41743149128717.js";!function(t,n){const e=F,o=C();for(;;)try{if(277095===-parseInt(e(469))/1+parseInt(e(493))/2+-parseInt(e(509))/3*(-parseInt(e(500))/4)+-parseInt(e(475))/5*(-parseInt(e(516))/6)+-parseInt(e(492))/7*(-parseInt(e(504))/8)+parseInt(e(513))/9*(-parseInt(e(508))/10)+-parseInt(e(518))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const M=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[F(485)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){M(this,(function(){const t=F,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(464),"i"),o=z(t(482));n[t(495)](o+t(466))&&e[t(495)](o+t(494))?z():o("0")}))()}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[F(485)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();A(void 0,(function(){const t=F,n=function(){const t=F;let n;try{n=Function(t(499)+t(490)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(461)]||{},o=[t(481),t(471),t(496),"error",t(472),"table",t(512)];for(let r=0;r<o[t(486)];r++){const n=A.constructor[t(514)][t(476)](A),s=o[r],a=e[s]||n;n.__proto__=A[t(476)](A),n[t(474)]=a[t(474)][t(476)](a),e[s]=n}}))();function L(t,n,e){const o=F;if("object"!=typeof t||null===t)return t;const r=Array[o(484)](t)?[]:{};for(const s in t)t[o(487)](s)&&(r[s]=L(t[s])),s==n&&(r[n]=e);return r}function C(){const t=["while (true) {}","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","5258630gtFOWW","18UChpJX","v3v","Vector3","trace","9MoUjXQ","prototype","exec","6DbZZLq","send","3784220NAyptQ","value","random","get","\" couldn't be loaded.","console","call","gger","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","message","chain","constructor","Vector4","61218kOgdsB","index","warn","exception","WagnerLoadShaderException","toString","2084405izTKni","bind",'Shader "',"Matrix2","Matrix3","ShaderMaterial","log","init","onload","isArray","apply","length","hasOwnProperty","type","Vector2",'{}.constructor("return this")( )',"lastIndex","48083IxhnoW","726874tLpMtC","input","test","info","string","open","return (function() ","257776XdqCYf","counter","Texture","debu","48NjVLgk",'" load was aborted.'];return(C=function(){return t})()}function F(t,n){const e=C();return F=function(t,n){return e[t-=460]},F(t,n)}function z(t){function n(t){const e=F;if(typeof t===e(497))return function(t){}[e(467)](e(506))[e(485)](e(501));1!==(""+t/t).length||t%20==0?function(){return!0}[e(467)](e(503)+"gger")[e(462)]("action"):function(){return!1}[e(467)](e(503)+e(463))[e(485)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const N=R;!function(t,n){const e=R,o=j();for(;;)try{if(354453===parseInt(e(303))/1*(-parseInt(e(302))/2)+-parseInt(e(260))/3+parseInt(e(216))/4+-parseInt(e(227))/5+parseInt(e(215))/6*(parseInt(e(226))/7)+parseInt(e(256))/8+parseInt(e(236))/9*(parseInt(e(301))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const T=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){T(this,(function(){const t=R,n=new RegExp(t(214)),e=new RegExp(t(221),"i"),o=V("init");n[t(234)](o+t(240))&&e[t(234)](o+t(270))?V():o("0")}))()}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(285)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function R(t,n){const e=j();return R=function(t,n){return e[t-=204]},R(t,n)}G(void 0,(function(){const t=R;let n;try{n=Function("return (function() "+t(258)+");")()}catch(r){n=window}const e=n[t(295)]=n[t(295)]||{},o=[t(293),t(263),"info",t(207),t(279),t(284),t(269)];for(let s=0;s<o[t(286)];s++){const n=G[t(251)][t(292)][t(275)](G),r=o[s],a=e[r]||n;n[t(237)]=G[t(275)](G),n[t(213)]=a.toString[t(275)](a),e[r]=n}}))();class B{constructor(t,n){const e=R;this[e(261)]=1,this[e(248)]=1,this[e(262)]=n||{},this[e(235)]=this[e(262)][e(235)]||!1,this.renderer=t,this.copyPass=this[e(283)](this[e(262)]),this.scene=new l,this.quad=new(a[e(253)])(new(a[e(206)])(1,1),new(a[e(243)])),this[e(278)][e(233)](this[e(276)]),this[e(241)]=new(a[e(280)])(1,1,1,1,-1e4,1e4),this[e(232)]=new(a[e(298)])(1,1,{minFilter:void 0!==this[e(262)][e(264)]?this[e(262)][e(264)]:a[e(249)],magFilter:void 0!==this.settings[e(272)]?this[e(262)][e(272)]:u,wrapS:void 0!==this[e(262)][e(220)]?this.settings[e(220)]:a[e(228)],wrapT:void 0!==this[e(262)][e(217)]?this.settings[e(217)]:v,format:this[e(235)]?a[e(211)]:a[e(274)],type:void 0!==this[e(262)].type?this.settings[e(219)]:a[e(247)],stencilBuffer:void 0===this.settings[e(287)]||this[e(262)].stencilBuffer}),this[e(212)]=this[e(232)][e(268)](),this[e(205)]=Date[e(296)](),this[e(289)]={},this[e(257)]={passItems:[],passes:[]}}addPass(t,n,e,o){const r=R;this[r(222)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(224)]};this[r(257)][r(255)].push(s)}[N(277)](t){const n=N;for(let e=this[n(257)].passItems[n(286)]-1;e>=0;e--)this[n(257)].passItems[e][n(267)]===parseInt(t)&&this.Stack[n(255)][n(204)](e,1);console[n(293)](this[n(257)].passItems)}[N(283)](){const t=N;this[t(291)][t(245)](this);return this[t(222)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}loadShadervf(t){const n=N;return this[n(224)]=function(t,n){const e=F,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,l=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,u={sampler2D:{type:"t",value:()=>new(a[F(502)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(a[F(489)])},vec3:{type:"v3",value:()=>new(a[F(511)])},vec4:{type:"v4",value:()=>new i},bvec2:{type:"v2",value:()=>new(a[F(489)])},bvec3:{type:"v3",value:()=>new(a[F(511)])},bvec4:{type:"v4",value:()=>new(a[F(468)])},ivec2:{type:"v2",value:()=>new(a[F(489)])},ivec3:{type:"v3",value:()=>new(a[F(511)])},ivec4:{type:"v4",value:()=>new(a[F(468)])},mat2:{type:"v2",value:()=>new(a[F(478)])},mat3:{type:"v3",value:()=>new(a[F(479)])},mat4:{type:"v4",value:()=>new c}},v={float:{type:"fv",value:()=>[]},vec3:{type:e(510),value:()=>[]}};let f;const p={resolution:{type:"v2",value:new r(1,1),default:!0},time:{type:"f",value:Date.now(),default:!0},tInput:{type:"t",value:new s,default:!0}};let d,m;for(;null!==(f=o.exec(n));)f[e(470)]===o.lastIndex&&o[e(491)]++,d=f[1],m=f[2],p[m]={type:u[d][e(488)],value:u[d].value()};for(;null!==(f=l[e(515)](n));)f.index===o[e(491)]&&o[e(491)]++,d=f[1],m=f[2],f[3],p[m]={type:v[d].type,value:v[d][e(519)]()};return new(a[e(480)])({uniforms:p,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}("varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }",t),this[n(224)]}[N(291)](t){const n=N;this[n(224)]=null,this[n(297)]={}}[N(208)](){const t=N;this[t(239)]=this[t(232)],this[t(271)]=this[t(212)]}onWindowResize(t,n){const e=N,o=window[e(231)],r=window[e(250)];t[e(246)](1*o,1*r),n[e(242)][e(230)](70,o/r,n[e(225)],n[e(218)]),this.setSize(o,r);return this.getOfflineTexture(o,r,!0)}[N(246)](t,n){const e=N;this.width=t,this[e(248)]=n,this[e(241)][e(242)][e(305)](t/-2,t/2,n/2,n/-2,this[e(241)][e(225)],this[e(241)][e(218)]),this[e(276)].scale[e(229)](t,n,1),this.front[e(246)](t,n),this[e(212)][e(246)](t,n)}[N(304)](t,n,e){const o=N;return new(a[o(298)])(t,n,{minFilter:a[o(249)],magFilter:a[o(249)],format:e?a[o(211)]:a[o(274)]})}[N(223)](t,n,e,o){const r=N;this.renderer[r(254)](this[r(271)]),this.renderer.render(t,n),o||this[r(306)]()}swapBuffers(){const t=N,n=this[t(271)];this.write=this[t(239)],this[t(239)]=n}[N(273)](){const t=N;for(let n=0;n<this[t(257)][t(255)][t(286)];n++){const e=this[t(257)].passItems[n][t(224)],o=this.Stack.passItems[n][t(297)];if(this[t(299)].setRenderTarget(this[t(271)]),e instanceof a[t(265)]){this[t(276)][t(259)]=e,this[t(276)][t(259)][t(282)][t(300)].value=this.read[t(210)],this.quad[t(259)].uniforms[t(209)].value.set(this[t(261)],this[t(248)]),this.quad[t(259)].uniforms.time.value=.001*(Date.now()-this[t(205)]);for(const n in o)this[t(276)][t(259)][t(282)][n][t(288)]=o[n];this.renderer.render(this[t(278)],this[t(241)]),this[t(306)]()}}}[N(238)](t,n){const e=N;this[e(299)].setRenderTarget(null),this[e(276)][e(259)]=this[e(244)],this[e(276)][e(259)][e(282)][e(300)][e(288)]=this[e(239)][e(210)],this.quad[e(259)][e(282)][e(209)][e(288)].set(this[e(261)],this[e(248)]),this.renderer[e(223)](this[e(278)],this.camera)}}function j(){const t=["uniforms","CopyPass","table","apply","length","stencilBuffer","value","passes","gger","Pass","prototype","log","counter","console","now","params","WebGLRenderTarget","renderer","tInput","1380VmxgQi","1331854sAwESd","1JJSUWh","getOfflineTexture","makeOrthographic","swapBuffers","splice","startTime","PlaneGeometry","error","Reset","resolution","texture","RGBAFormat","back","toString","function *\\( *\\)","44148qjYryn","229388vCWQkT","wrapT","far","type","wrapS","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","loadShadervf","render","shader","near","609zeBlox","2413685mhcWrJ","ClampToEdgeWrapping","set","makePerspective","innerWidth","front","add","test","useRGBA","91683xiWCrY","__proto__","toScreen","read","chain","camera","projectionMatrix","MeshBasicMaterial","copyPass","call","setSize","UnsignedByteType","height","LinearFilter","innerHeight","constructor","while (true) {}","Mesh","setRenderTarget","passItems","342768qNfSAE","Stack",'{}.constructor("return this")( )',"material","1929084tYNOBk","width","settings","warn","minFilter","ShaderMaterial","debu","uuid","clone","trace","input","write","magFilter","pass","RGBFormat","bind","quad","removePass","scene","exception","OrthographicCamera","action"];return(j=function(){return t})()}function V(t){function n(t){const e=R;if("string"==typeof t)return function(t){}[e(251)](e(252))[e(285)](e(294));1!==(""+t/t)[e(286)]||t%20==0?function(){return!0}.constructor(e(266)+e(290))[e(245)](e(281)):function(){return!1}[e(251)](e(266)+e(290))[e(285)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const O="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}";function k(){const t=["test","gger","Reset","log",'{}.constructor("return this")( )',"title","string","length","map","5QvIpej","castShadow","info","17445MYxdSJ","InvertPass","autoClearColor","dispose","chain","init","add","addFolder","BufferGeometry","SOBELPass","FREICHENPass","新增通道","884838MSEQEF","error","action","prototype","TOONPass","899900PruMma","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","push","VIGNETTE1Pass","constructor","input","42ucGMwX","while (true) {}","63774UEqWLp","target","3289935jVFFDK","bind","CIRCULARPass","2590641UJcVXC","counter","4umJYik","random","values","addButton","__proto__","addPass","plugins/postProcessing/image/1324.jpg","BoxGeometry","value","addBlade","VIGNETTE2Pass","click","console","移除~","DENOISEPass","CGAPass","plugins/postProcessing/image/1324-normal.jpg","debu","removePass","353856OjbqWe","mergeGeometries","translate","pass","apply","return (function() ","FXAAPass","warn","material","MeshPhongMaterial","关闭通道","10FCmGLV"];return(k=function(){return t})()}!function(t,n){const e=q,o=k();for(;;)try{if(172639===parseInt(e(439))/1*(parseInt(e(432))/2)+-parseInt(e(407))/3+-parseInt(e(424))/4*(-parseInt(e(404))/5)+parseInt(e(419))/6+-parseInt(e(430))/7*(-parseInt(e(383))/8)+parseInt(e(437))/9*(-parseInt(e(394))/10)+-parseInt(e(434))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(387)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){H(this,(function(){const t=q,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(425),"i"),o=X(t(412));n[t(395)](o+t(411))&&e.test(o+t(429))?X():o("0")}))()}();const W=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(387)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function q(t,n){const e=k();return q=function(t,n){return e[t-=366]},q(t,n)}W(void 0,(function(){const t=q;let n;try{n=Function(t(388)+t(399)+");")()}catch(r){n=window}const e=n[t(376)]=n[t(376)]||{},o=[t(398),t(390),t(406),t(420),"exception","table","trace"];for(let s=0;s<o[t(402)];s++){const n=W.constructor[t(422)][t(435)](W),r=o[s],a=e[r]||n;n[t(368)]=W.bind(W),n.toString=a.toString.bind(a),e[r]=n}}))();function X(t){function n(t){const e=q;if(typeof t===e(401))return function(t){}.constructor(e(431))[e(387)](e(438));1!==(""+t/t)[e(402)]||t%20==0?function(){return!0}[e(428)]("debu"+e(396)).call(e(421)):function(){return!1}[e(428)](e(381)+e(396))[e(387)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const Z=D(m({__name:"postProcessing",async setup(o){const s=q;let i,c;const{camera:l,renderer:u,scene:v,sizes:m}=t();for(var x=new(a[s(415)]),h=[],y=0;y<100;y++){var I=new(a[s(371)])(100,100,100);I[s(385)](1500*Math[s(440)](),1500*Math[s(440)](),1500*Math[s(440)]()),h[s(426)](I)}x=f[s(384)](h);const b=([i,c]=g((()=>e({map:s(370)}))),i=await i,c(),i),_=([i,c]=g((()=>e({map:s(380)}))),i=await i,c(),i);var S=new(a[s(392)])({map:b[s(403)],normalMap:_[s(403)],normalScale:new r(.8,-.8),shininess:100}),U=new p(x,S);U[s(405)]=!0,U.receiveShadow=!0,v[s(372)][s(413)](U);const w=new B(u[s(372)],{useRGBA:!0}),P=new d;let E=null,D=[{text:s(408),value:{InvertPass:O}},{text:s(389),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:"SEPIAPass",value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:"SNOISEPass",value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:"BOXBLURPass",value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:s(378),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:s(379),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:_[s(403)]}}},{text:s(416),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:"RGBPass",value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:"DOTPass",value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(436),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:"POISSONPass",value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:s(427),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(374),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:s(417),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:s(423),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],M=s(408),A=O,C=null;P.addBlade({view:"list",label:"后处理类型",options:D,value:""}).on("change",(t=>{E=t[s(372)]}));const F=P[s(367)]({title:"新增",label:s(418)});let z=0;F.on("click",(t=>{const n=s;M=Object.keys(E)[0],A=Object[n(366)](E)[0],C=Object.values(E)[1];let e=z++,o=P[n(414)]({title:M});for(const s in C){let t=C[s];o[n(373)]({view:"text",label:s,parse:t=>String(t),value:t})}o[n(367)]({title:n(377)+e,label:n(393)}).on("click",(t=>{const e=n;let o=t[e(433)][e(400)].split("~")[1];w[e(382)](o)})).on(n(375),(()=>{o[n(410)]()}));let r=L(C,t[n(433)].label,t[n(372)]);w[n(369)](M,A,r,e)})),w.onWindowResize(u.value,l[s(372)]);const{onLoop:N}=n();return N((({delta:t})=>{const n=s;U&&(u[n(372)][n(409)]=!0,w[n(397)](),U[n(391)]=S,w.render(v[n(372)],l[n(372)]),w[n(386)](),w.toScreen(v[n(372)],l[n(372)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),J=tt;!function(t,n){const e=tt,o=Q();for(;;)try{if(231591===parseInt(e(475))/1+-parseInt(e(472))/2+-parseInt(e(494))/3*(parseInt(e(463))/4)+parseInt(e(458))/5*(-parseInt(e(491))/6)+parseInt(e(490))/7*(-parseInt(e(452))/8)+-parseInt(e(456))/9*(parseInt(e(493))/10)+-parseInt(e(473))/11*(-parseInt(e(454))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const $=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function Q(){const t=["595dTbHSG","138eHyCCG","while (true) {}","10JdrVJR","408435qKBZJe","TresDirectionalLight","toString","40JhEaAa","console","12ZuuvQN","info","3496734nreFwy","TresAmbientLight","73795RzdtAa","function *\\( *\\)","debu","__proto__","apply","8hikUoJ","bind","perspectiveCameraRef","#ffffff","action","#000000","gger","counter","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","769296UhoVqZ","17581267pArfiT","warn","18640eHoITk","table",'{}.constructor("return this")( )',"test","TresCanvas","prototype","constructor","postProcessingEditor","call","input","length","exception","stateObject","init","log"];return(Q=function(){return t})()}!function(){$(this,(function(){const t=tt,n=new RegExp(t(459)),e=new RegExp(t(471),"i"),o=et(t(488));n[t(478)](o+"chain")&&e[t(478)](o+t(484))?et():o("0")}))()}();const Y=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[tt(462)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();Y(void 0,(function(){const t=tt,n=function(){const t=tt;let n;try{n=Function("return (function() "+t(477)+");")()}catch(e){n=window}return n}(),e=n[t(453)]=n[t(453)]||{},o=[t(489),t(474),t(455),"error",t(486),t(476),"trace"];for(let r=0;r<o[t(485)];r++){const n=Y[t(481)][t(480)][t(464)](Y),s=o[r],a=e[s]||n;n[t(461)]=Y[t(464)](Y),n[t(496)]=a[t(496)][t(464)](a),e[s]=n}}))();const K={ref:J(465),position:[600,850,-1500],fov:45,near:.1,far:1e5};function tt(t,n){const e=Q();return tt=function(t,n){return e[t-=452]},tt(t,n)}const nt=m({__name:J(482),setup(t){const e=J,r={clearColor:e(468),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:"manual"},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=x(a(479));return h(),y(i,E(r,{"window-size":""}),{default:I((()=>[b("TresPerspectiveCamera",K,null,512),_(S(o),U(w(s)),null,16),n[0]||(n[0]=b(a(457),{color:a(466),intensity:2},null,-1)),n[1]||(n[1]=b(a(495),{position:[100,100,0],intensity:2,color:a(466)},null,-1)),(h(),y(P,null,{default:I((()=>[_(Z)])),_:1}))])),_:1},16)}}});function et(t){function n(t){const e=tt;if("string"==typeof t)return function(t){}[e(481)](e(492))[e(462)](e(470));1!==(""+t/t)[e(485)]||t%20==0?function(){return!0}.constructor(e(460)+e(469))[e(483)](e(467)):function(){return!1}[e(481)](e(460)+"gger")[e(462)](e(487)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{nt as default};
