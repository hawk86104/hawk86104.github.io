import{a6 as t,C as n,Z as e,al as o,K as r,a9 as a}from"./three.a9V66irq1725721021019.js";import{$ as i,N as s,d as c,x as l}from"./@tresjs.bIWdfO9a1725721021019.js";import"./index.dJVp8vFH1725721021019.js";import{a as u}from"./simplex-noise.MycypUyu1725721021019.js";import{C as f}from"./index.HwcLpeBY1725721021019.js";import{d as p,a5 as h,o as m,E as v,L as d,u as g,r as x,f as w,g as y,j as b,aj as _,ak as M,al as j}from"./@vue._6MD2XyK1725721021019.js";import{_ as z}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.NfGBC-8O1725721021019.js";import"./tweakpane.yHWGBmom1725721021019.js";import"./@vueuse.Ex-1AOlz1725721021019.js";import"./lamina.kT4chDHE1725721021019.js";import"./glsl-tokenizer._ewZtuPE1725721021019.js";import"./@amap.9EMhYPgf1725721021019.js";import"./glsl-token-descope.iHOs_pdM1725721021019.js";import"./glsl-token-depth.eGHjpNdQ1725721021019.js";import"./glsl-token-scope.tQi4T9m_1725721021019.js";import"./glsl-token-properties.4_HDezM_1725721021019.js";import"./glsl-token-assignments.pwFZC1gg1725721021019.js";import"./glsl-token-string.3i-LTnSg1725721021019.js";import"./glsl-token-functions.Tl-bwbDs1725721021019.js";import"./object-hash.xtAmzdrT1725721021019.js";import"./jszip.NwxLGTBs1725721021019.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.uw8NGLj_1725721021019.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.NvjW79ww1725721021019.js";import"./three-stdlib.-DW5PGsS1725721021019.js";import"./@pmndrs._LoKiQ331725721021019.js";import"./utils.4PzH-U_b1725721021019.js";const I=T;!function(t,n){const e=T,o=k();for(;;)try{if(384936===-parseInt(e(374))/1+-parseInt(e(348))/2*(-parseInt(e(378))/3)+parseInt(e(407))/4+-parseInt(e(392))/5+parseInt(e(399))/6*(parseInt(e(388))/7)+-parseInt(e(345))/8*(parseInt(e(352))/9)+-parseInt(e(409))/10*(-parseInt(e(331))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[T(375)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){A(this,(function(){const t=T,n=new RegExp(t(370)),e=new RegExp(t(383),"i"),o=P(t(336));n[t(339)](o+t(340))&&e[t(339)](o+"input")?P():o("0")}))()}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[T(375)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function k(){const t=["instances","355168kosQbu","attributes-stretch","gger","1298628RxXCdJ","attributes-offset","attributes-position","normalize","144kvXSCJ","TresInstancedBufferGeometry","value","__proto__","Vector3","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","uniforms","bind","counter","attributes-uv","index","convertSRGBToLinear","attributes-halfRootAngleSin","array","width","toneMapped","log","return (function() ","function *\\( *\\)","push","translate","console","127351VGZVIY","apply","halfRootAngleSinF32","DoubleSide","3vKAUjD","PlaneGeometry","side","geometry","toString","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","sin","alphaMap","TresMesh","orientationsF32","3884755XwMoCW","material","string","constructor","1764610MPZOGT","InstancedBufferAttribute","TresMeshStandardMaterial","prototype","cos","table","halfRootAngleCosF32","6pIWhrY","attributes","#000f00","call","set","stateObject","Vector4","Color","1190984GNusFy","debu","160xCIuoJ","stretchesF32","trace","lookAt","50545bXTBmC","attributes-halfRootAngleCos","map","grass","position","init","time","random","test","chain",'{}.constructor("return this")( )',"attributes-orientation","action"];return(k=function(){return t})()}C(void 0,(function(){const t=T,n=function(){const t=T;let n;try{n=Function(t(369)+t(341)+");")()}catch(e){n=window}return n}(),e=n[t(373)]=n.console||{},o=[t(368),"warn","info","error","exception",t(397),t(329)];for(let r=0;r<o.length;r++){const n=C[t(391)][t(395)].bind(C),a=o[r],i=e[a]||n;n[t(355)]=C.bind(C),n[t(382)]=i[t(382)][t(359)](i),e[a]=n}}))();const R=[I(389)],S=[I(362),I(350),I(361),I(349),I(342),I(346),I(364),I(332)],D=[I(381)],F=[I(380)];function T(t,n){const e=k();return(T=function(t,n){return e[t-=328]})(t,n)}const E=p({__name:I(334),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(a){const c=I;let l,p;const x=([l,p]=h((()=>s({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),l=await l,p(),l),w=a,y=u(Math[c(338)]);function b(n,e){const o=c,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,a=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,i=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,s=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(405)])(r,a,i,s)}function _(t,n){var e=2*y(t/50,n/50);return e+=4*y(t/100,n/100),e+=.2*y(t/10,n/10)}const M=function(n,e){const a=c,i=[],s=[],l=[],u=[],f=[];let p=new(t[a(405)]),h=new o;const m=-.25;for(let o=0;o<n;o++){const r=Math[a(338)]()*e-e/2,c=Math[a(338)]()*e-e/2,v=_(r,c);i[a(371)](r,v,c);let d=Math.PI-Math[a(338)]()*(2*Math.PI);u[a(371)](Math[a(384)](.5*d)),f.push(Math[a(396)](.5*d));let g=new(t[a(356)])(0,1,0),x=g.x*Math[a(384)](d/2),w=g.y*Math.sin(d/2),y=g.z*Math.sin(d/2),M=Math[a(396)](d/2);p[a(403)](x,w,y,M)[a(351)](),d=.5*Math[a(338)]()+m,g=new(t[a(356)])(1,0,0),x=g.x*Math[a(384)](d/2),w=g.y*Math[a(384)](d/2),y=g.z*Math.sin(d/2),M=Math[a(396)](d/2),h[a(403)](x,w,y,M)[a(351)](),p=b(p,h),d=.5*Math[a(338)]()+m,g=new(t[a(356)])(0,0,1),x=g.x*Math[a(384)](d/2),w=g.y*Math[a(384)](d/2),y=g.z*Math[a(384)](d/2),M=Math[a(396)](d/2),h.set(x,w,y,M)[a(351)](),p=b(p,h),s[a(371)](p.x,p.y,p.z,p.w),o<n/3?l[a(371)](1.8*Math[a(338)]()):l[a(371)](Math[a(338)]())}return{offsetsF32:new(t[a(393)])(new Float32Array(i),3),orientationsF32:new(t[a(393)])(new Float32Array(s),4),stretchesF32:new r(new Float32Array(l),1),halfRootAngleCosF32:new(t[a(393)])(new Float32Array(f),1),halfRootAngleSinF32:new r(new Float32Array(u),1)}}(w[c(344)],w[c(366)]),j=new(t[c(379)])(w.bW,w.bH,1,w.joints)[c(372)](0,w.bH/2,0),z=new(t[c(379)])(w.width,w[c(366)],32,32);z[c(330)](new(t[c(356)])(0,1,0));const A=z.attributes[c(335)];for(let t=0;t<A.array.length;t+=3)A[c(365)][t+1]=_(A[c(365)][t],A[c(365)][t+2]);z.attributes.position.needsUpdate=!0,z.computeVertexNormals();const C=new(f({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new n(.3,.9,0)[c(363)](),bottomColor:new(t[c(406)])(0,.2,0)[c(363)]()},"   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }",c(357),(n=>{const e=c;n[e(380)]=t[e(377)]})));C[c(333)]=x[c(333)],C[c(385)]=x[c(385)],C[c(367)]=!1;const{onLoop:k}=i();return k((({elapsed:t})=>{const n=c;C[n(358)][n(337)][n(354)]=t/4})),(t,n)=>{const o=c;return m(),v("TresGroup",null,[d(o(386),{material:g(C)},[d(o(353),{index:g(j)[o(362)],"attributes-position":g(j)[o(400)][o(335)],"attributes-uv":g(j)[o(400)].uv,"attributes-offset":g(M).offsetsF32,"attributes-orientation":g(M)[o(387)],"attributes-stretch":g(M)[o(328)],"attributes-halfRootAngleSin":g(M)[o(376)],"attributes-halfRootAngleCos":g(M)[o(398)]},null,8,S)],8,R),d(o(386),{position:[0,0,0],geometry:g(z)},[d(o(394),{color:o(401),side:e},null,8,F)],8,D)])}}});function P(t){function n(t){const e=T;if(typeof t===e(390))return function(t){}.constructor("while (true) {}")[e(375)](e(360));1!==(""+t/t).length||t%20==0?function(){return!0}.constructor(e(408)+"gger")[e(402)](e(343)):function(){return!1}[e(391)](e(408)+e(347))[e(375)](e(404)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const O=U;!function(t,n){const e=U,o=q();for(;;)try{if(990551===parseInt(e(408))/1+parseInt(e(406))/2+-parseInt(e(434))/3*(-parseInt(e(403))/4)+-parseInt(e(424))/5+-parseInt(e(413))/6*(parseInt(e(416))/7)+-parseInt(e(435))/8+parseInt(e(425))/9*(parseInt(e(417))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){B(this,(function(){const t=U,n=new RegExp(t(412)),e=new RegExp(t(409),"i"),o=H(t(438));n[t(410)](o+"chain")&&e[t(410)](o+t(420))?H():o("0")}))()}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[U(407)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();G(void 0,(function(){const t=U,n=function(){const t=U;let n;try{n=Function(t(414)+t(436)+");")()}catch(e){n=window}return n}(),e=n[t(432)]=n[t(432)]||{},o=[t(405),"warn",t(419),t(428),t(402),t(433),"trace"];for(let r=0;r<o.length;r++){const n=G[t(427)].prototype[t(411)](G),a=o[r],i=e[a]||n;n[t(423)]=G.bind(G),n[t(431)]=i[t(431)][t(411)](i),e[a]=n}}))();const L=d(O(400),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1);function U(t,n){const e=q();return(U=function(t,n){return e[t-=399]})(t,n)}const V=p({__name:O(401),setup(t){const n=x({alpha:!0,toneMapping:a,windowSize:!0,clearColor:6710886}),e=x({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=U;return m(),w(g(l),_(M(n)),{default:y((()=>[L,b(g(c),_(M(e)),null,16),(m(),w(j,null,{default:y((()=>[b(E)])),_:1})),(m(),w(j,null,{default:y((()=>[b(g(z),{texture:r(415)})])),_:1}))])),_:1},16)}}});function H(t){function n(t){const e=U;if(typeof t===e(418))return function(t){}[e(427)](e(437))[e(407)](e(429));1!==(""+t/t)[e(399)]||t%20==0?function(){return!0}[e(427)](e(426)+e(430))[e(404)](e(421)):function(){return!1}[e(427)]("debugger")[e(407)](e(422)),n(++t)}try{if(t)return n;n(0)}catch(e){}}function q(){const t=["table","1338rlbaQv","10387520ZRRMVM",'{}.constructor("return this")( )',"while (true) {}","init","length","TresPerspectiveCamera","grass","exception","1844JPWqYU","call","log","1483892DheZQV","apply","735787evPRgc","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","test","bind","function *\\( *\\)","1146hTfkIm","return (function() ","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","30842UQJEqn","10kAmayC","string","info","input","action","stateObject","__proto__","4943590okZYUh","21923244VhGDtc","debu","constructor","error","counter","gger","toString","console"];return(q=function(){return t})()}export{V as default};
