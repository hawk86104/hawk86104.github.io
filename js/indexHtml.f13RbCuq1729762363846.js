import{U as e,B as o,D as r}from"./@tresjs.CmAaFQUS1729762363846.js";import{cn as t}from"./three.CQvcOG671729762363846.js";import{i as a,m as s,a as n,b as l,c as p,u as i,d as c,f as m}from"./mapShow.BJSjbo1s1729762363846.js";import{g as d}from"./gsap.BMhr3K_w1729762363846.js";import{Resource as u}from"./index.BiMk4b811729762363846.js";import{m as f}from"./d3-geo.7JUgQZ7N1729762363846.js";import{b as h,q as y,w as g,o as S,E as T,L as x,F as b,W as C,u as v,J as w,f as z,j as N,g as j,I as k,m as M}from"./@vue.n8X62v121729762363846.js";const O=["properties","pName"],B=["args"],G={key:0},I=["pName","position"],L=["position-z","scale","renderOrder"],_=["color","blending","map"],E={__name:"indexHtml",props:{lineColor:"#2bc4dc",topColor:"#f5f5f5",sideColor:"#00407c",iconColor:"#2bc4dc",fontColor:"#fff",fontSize:6,iconSize:.3,shadowColor:"#001c69",moveRoom:1.5,roughness:.8,metalness:.5,normalScale:6,geoJsonUrl:"",areaScale:{type:Number,default:10},centerCoordinates:{type:Array,default:[104,37.5]},showTextIcons:{type:Boolean,default:!0},hasMapTexture:{type:Boolean,default:!0},lineWidth:{type:Number,default:1}},setup(E){const P=E,W={wrapperClass:"wrapperDigitalMapBlockMapShow",as:"div",center:!0,sprite:!1,prepend:!1,transform:!0};a();const D=f().center(P.centerCoordinates).scale(P.areaScale).translate([0,0]),J=h({depth:.66,bevelEnabled:!0,bevelSegments:1,bevelThickness:.1}),R=J.value.depth+.11,U=JSON.parse(u.getItem("map.json")).features,{areaList:q,linesList:A,textList:F}=s(U,D),H=[n(P.roughness,P.metalness,P.normalScale),l(P.sideColor)];P.hasMapTexture||(H[0].map=null,H[0].normalMap=null);const{onLoop:Q}=e();Q((()=>{H[1].map.offset.y+=.002}));const K=h(null);y((()=>{let{boxSize:e,box3:o}=p(K.value.children[0]);K.value.children[0].children.map(((r,t)=>{"Mesh"===r.type&&(r.geometry.computeBoundsTree(),i(r.geometry,e.x,e.y,o.min.x,o.min.y))})),K.value.rotation.x=-Math.PI/2,setTimeout((()=>{Z(P.fontColor,P.shadowColor,P.fontSize)}),600)}));const V=(e,o)=>{let r=P.moveRoom,t=e.object;o||(t=e.eventObject,r=1);m(K.value,t.pName).map((e=>{"block"===e.pType&&d.to(e.scale,{duration:.3,z:r}),"line"===e.pType&&d.to(e.position,{duration:.3,z:R*r}),"text"===e.pType&&d.to(e.position,{duration:.3,z:R*r})}))},X=e=>{V(e,!0),document.body.style.cursor="pointer",e.stopPropagation()},Y=e=>{V(e,!1),document.body.style.cursor="default"};g((()=>[P.topColor,P.sideColor,P.roughness,P.metalness,P.normalScale]),(([e,o,r,t,a])=>{H[0].color.set(e),H[1].color.set(o),H[0].roughness=r,H[0].metalness=t,H[0].normalScale.set(a,a)}),{immediate:!0});const Z=(e,o,r)=>{document.querySelectorAll(".wrapperDigitalMapBlockMapShow #inner span").forEach((t=>{t.style.color="".concat(e),t.style.textShadow="1px 1px 2px ".concat(o),t.style.fontSize="".concat(r,"px")}))};g((()=>[P.fontColor,P.shadowColor,P.fontSize]),(([e,o,r])=>{Z(e,o,r)}),{immediate:!0});const $=u.getItem("icon.png");return(e,a)=>(S(),T("TresGroup",{ref_key:"groupRef",ref:K},[x("TresGroup",null,[(S(!0),T(b,null,C(v(q),((e,o)=>(S(),T("TresMesh",{key:"".concat(o),properties:e.properties,renderOrder:1,material:H,pName:e.pName,pType:"block",onPointerEnter:X,onPointerLeave:Y},[x("TresExtrudeGeometry",{args:[e.shape,J.value]},null,8,B)],40,O)))),128))]),x("TresGroup",null,[(S(!0),T(b,null,C(v(A),((e,r)=>(S(),z(v(o),{key:"".concat(r),renderOrder:r+1e4,pName:e.pName,"position-z":R,pType:"line",points:v(c)(e.points),"line-width":E.lineWidth,color:E.lineColor},null,8,["renderOrder","pName","points","line-width","color"])))),128))]),E.showTextIcons?(S(),T("TresGroup",G,[(S(!0),T(b,null,C(v(F),((e,o)=>(S(),T("TresGroup",{key:"".concat(o),pName:e.pName,pType:"text",position:[e.position[0],e.position[1],R]},[N(v(r),M({ref_for:!0},W),{default:j((()=>[x("span",null,k(e.pName),1)])),_:2},1040),x("TresSprite",{"position-z":E.iconSize,scale:E.iconSize,renderOrder:o+11e3},[x("TresSpriteMaterial",{color:E.iconColor,blending:t,map:v($),transparent:"",depthWrite:!1,depthTest:""},null,8,_)],8,L)],8,I)))),128))])):w("",!0)],512))}};export{E as _};
