import{b as e,a as r,J as t,S as o}from"./@tresjs.BL1sBIDK1758524188831.js";import{P as a}from"./tweakpane.C0HtAJSg1758524188831.js";import{cy as n,aP as l,a as s,C as i}from"./three.CC50Wz7a1758524188831.js";import{R as m}from"./Reflector.hbefUijb1758524188831.js";import"./OimoPhysicsBuffer.CcBMdMc41758524188831.js";import{d as f,b as c,aa as u,a2 as p,G as v,o as d,I as g,m as h,u as x,r as y,h as C,e as M,f as b,j,O as S,a5 as _,a7 as w,a8 as T}from"./@vue.pEDXJ_3Z1758524188831.js";import"./postprocessing.DYlQqnRh1758524188831.js";import"./@vueuse.C-O_6is-1758524188831.js";import"./oimophysics.BBtHVm4j1758524188831.js";const G=["rotation-x"],z=["object","visible"],B=f({__name:"reflectorDiffuse",props:{mirror:{default:1},mixStrength:{default:10},showGridHelper:{type:Boolean,default:!0},color:{default:"#ffffff"}},async setup(r){let t,o;const a=r,f=new n(9.5,10),y=c(),C=c(),M=c(),b=new m,j={mirror:{value:a.mirror},mixStrength:{value:a.mixStrength}},S=([t,o]=u((()=>e(["./plugins/floor/image/polished_concrete_basecolor.jpg","./plugins/floor/image/polished_concrete_normal.jpg","./plugins/floor/image/polished_concrete_orm.jpg"]))),t=await t,o(),t);for(var _=0;_<3;_++)S[_].wrapS=l,S[_].wrapT=l,S[_].repeat.set(16,16);const w={color:new i("#444"),metalness:1,roughness:1,map:S[0],metalnessMap:S[2],roughnessMap:S[2],aoMap:S[2],aoMapIntensity:1,normalMap:S[1],normalScale:new s(3,3)},T=e=>{e.uniforms.reflectMap=b.renderTargetUniform,e.uniforms.textureMatrix=b.textureMatrixUniform,e.uniforms=Object.assign(e.uniforms,j),(e=>{e.vertexShader=e.vertexShader.replace("void main() {","\n\t\tuniform mat4 textureMatrix;\n\t\tout vec4 vCoord;\n\t\tout vec3 vToEye;\n\n\t\tvoid main() {\n\t\t"),e.vertexShader=e.vertexShader.replace("#include <project_vertex>","\n\t\t#include <project_vertex>\n\n\t\tvCoord = textureMatrix * vec4(transformed, 1.0);\n\t\tvToEye = cameraPosition - (modelMatrix * vec4(transformed, 1.0)).xyz;\n\t\t")})(e),(e=>{e.fragmentShader=e.fragmentShader.replace("void main() {","\n\t\tuniform sampler2D reflectMap;\n\t\tuniform float mirror;\n\t\tuniform float mixStrength;\n\t\tin vec4 vCoord;\n\t\tin vec3 vToEye;\n\n\t\tvoid main() {\n\t\t"),e.fragmentShader=e.fragmentShader.replace("#include <emissivemap_fragment>","\n\t\t#include <emissivemap_fragment>\n\n\t\tvec4 normalColor = texture2D(normalMap, vNormalMapUv * normalScale);\n\t\tvec3 reflectNormal = normalize(vec3(normalColor.r * 2.0 - 1.0, normalColor.b, normalColor.g * 2.0 - 1.0));\n\t\tvec3 reflectCoord = vCoord.xyz / vCoord.w;\n\t\tvec2 reflectUv = reflectCoord.xy + reflectCoord.z * reflectNormal.xz * 0.05;\n\t\tvec4 reflectColor = texture2D(reflectMap, reflectUv);\n\n\t\t// Fresnel term\n\t\tvec3 toEye = normalize(vToEye);\n\t\tfloat theta = max(dot(toEye, normal), 0.0);\n\t\tfloat reflectance = pow((1.0 - theta), 5.0);\n\n\t\treflectColor = mix(vec4(0), reflectColor, reflectance);\n\n\t\tdiffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + reflectColor.rgb * mixStrength);\n\t\t")})(e)};return p((()=>{y.value&&(y.value.attributes.uv1=y.value.attributes.uv),M.value&&(M.value.aoMap.channel=1,M.value.onBeforeCompile=T),C.value&&(C.value.add(b),C.value.onBeforeRender=(e,r,t)=>{b.update(e,r,t)}),a.color&&M.value&&(M.value.color=new i(a.color))})),(e,r)=>(d(),v("TresGroup",null,[g("TresMesh",{ref_key:"tmRef",ref:C,"rotation-x":-Math.PI/2,"position-y":-.1},[g("TresPlaneGeometry",{ref_key:"tpgRef",ref:y,args:[10,10]},null,512),g("TresMeshStandardMaterial",h({ref_key:"tmsmRef",ref:M},w),null,16)],8,G),g("primitive",{object:x(f),visible:e.showGridHelper},null,8,z)]))}}),D={position:[0,8,0],intensity:10,color:"#fff"},P=f({__name:"reflectorDiffuse",setup(e){const n=y({mirror:.9,mixStrength:9,showGridHelper:!0,color:"#69a5c2"}),l=new a({title:"镜面参数",expanded:!0});return l.addBinding(n,"color",{label:"镜面颜色"}),l.addBinding(n,"showGridHelper",{label:"显示网格"}),(e,a)=>{const l=C("TresCanvas");return d(),M(l,{clearColor:"#201919","window-size":""},{default:b((()=>[a[0]||(a[0]=g("TresPerspectiveCamera",{position:[-15,15,-15],fov:45,near:.1,far:1e4,"look-at":[0,0,0]},null,-1)),j(x(r),{enableDamping:""}),a[1]||(a[1]=g("TresAmbientLight",{intensity:10},null,-1)),S(g("TresDirectionalLight",D,null,512),[[x(t)]]),j(x(o),{args:[1,1,1],color:"orange",position:[3,1,0]}),a[2]||(a[2]=g("TresMesh",{position:[0,2,4]},[g("TresBoxGeometry",{args:[1,1,1]}),g("TresMeshNormalMaterial")],-1)),(d(),M(_,null,{default:b((()=>[j(B,w(T(n)),null,16)])),_:1}))])),_:1})}}});export{P as default};
