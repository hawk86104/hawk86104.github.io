import{m as t,e as n,b as e,U as o}from"./@tresjs.bLKO3xyw1731379053498.js";import{_ as r,k as s,V as a,as as i,cO as c,i as l,$ as u,n as v,b6 as f,m as p,cG as m}from"./three.bXjbKLxC1731379053498.js";import{P as d}from"./tweakpane.yHWGBmom1731379053498.js";import{d as g,a6 as x,e as h,o as y,f as b,g as I,J as _,j as S,u as U,aj as w,ak as E,al as P,m as D}from"./@vue.-THQH3GC1731379053498.js";import{_ as A}from"./@fesjs.vI9WP6bH1731379053498.js";import"./@vueuse.DWZrQ1Sl1731379053498.js";import"./vue-router.ZGnIDLu91731379053498.js";import"./lodash-es.kYt-_xTG1731379053498.js";import"./@qlin.yHhFDldE1731379053498.js";import"./pinia.ZMhAaG0S1731379053498.js";import"./vue-demi.C4xddsk91731379053498.js";import"./@floating-ui.BPbuo5Gx1731379053498.js";import"./@juggle.7yjBMqoW1731379053498.js";function L(t,n){const e=C();return(L=function(t,n){return e[t-=237]})(t,n)}!function(t,n){const e=L,o=C();for(;;)try{if(216157===-parseInt(e(262))/1*(parseInt(e(263))/2)+parseInt(e(294))/3*(-parseInt(e(261))/4)+-parseInt(e(287))/5+parseInt(e(238))/6*(-parseInt(e(286))/7)+-parseInt(e(251))/8+-parseInt(e(243))/9+parseInt(e(267))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const M=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){M(this,(function(){const t=L,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(293),"i"),o=N(t(256));n[t(260)](o+"chain")&&e[t(260)](o+"input")?N():o("0")}))()}();const F=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(288)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function C(){const t=["warn","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","46983JubtdH","length","Matrix4","log","140796uUkjaz","onerror","type","while (true) {}","Vector2","3339234EkfLEE","counter","action","call","WagnerLoadShaderException","return (function() ","Vector3","bind","138784fzvaMn",'{}.constructor("return this")( )',"ShaderMaterial","\" couldn't be loaded.","open","init","send","stateObject","Texture","test","92egQxgE","41iRgxiD","13054HiEhhz",'Shader "',"value","random","15306830CGFabp","error","onabort","message","responseText","lastIndex","exception","console","replace","gger","index","info","now","exec","name","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","Vector4","constructor","debu","49hJCsqY","670400dfmXJy","apply","onload","prototype","toString"];return(C=function(){return t})()}F(void 0,(function(){const t=L;let n;try{n=Function(t(248)+t(252)+");")()}catch(r){n=window}const e=n[t(274)]=n[t(274)]||{},o=[t(237),t(292),t(278),t(268),t(273),"table","trace"];for(let s=0;s<o.length;s++){const n=F.constructor[t(290)][t(250)](F),r=o[s],a=e[r]||n;n.__proto__=F.bind(F),n[t(291)]=a[t(291)][t(250)](a),e[r]=n}}))();function z(t,n,e){if("object"!=typeof t||null===t)return t;const o=Array.isArray(t)?[]:{};for(const r in t)t.hasOwnProperty(r)&&(o[r]=z(t[r])),r==n&&(o[n]=e);return o}function N(t){function n(t){const e=L;if("string"==typeof t)return function(t){}[e(284)](e(241))[e(288)](e(244));1!==(""+t/t)[e(295)]||t%20==0?function(){return!0}[e(284)](e(285)+e(276))[e(246)](e(245)):function(){return!1}.constructor("debu"+e(276))[e(288)](e(258)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const T=B;!function(t,n){const e=B,o=j();for(;;)try{if(774320===parseInt(e(272))/1*(parseInt(e(257))/2)+-parseInt(e(287))/3*(parseInt(e(253))/4)+-parseInt(e(327))/5+parseInt(e(261))/6*(-parseInt(e(260))/7)+parseInt(e(276))/8+parseInt(e(301))/9*(parseInt(e(312))/10)+-parseInt(e(308))/11*(-parseInt(e(249))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const R=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){R(this,(function(){const t=B,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(293),"i"),o=k("init");n[t(326)](o+"chain")&&e[t(326)](o+t(275))?k():o("0")}))()}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[B(233)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function B(t,n){const e=j();return(B=function(t,n){return e[t-=227]})(t,n)}function j(){const t=["innerHeight","projectionMatrix","write","makeOrthographic","front","398277stttMV","loadShadervf","swapBuffers","minFilter","21530IHrucU","passItems","stateObject","height","uniforms","copyPass","log","onWindowResize","settings","stencilBuffer","tInput","setSize","call","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","test","7380555EurNqH","time","console","setRenderTarget","bind","return (function() ","quad","apply","info","string","far","material","passes","set","startTime","uuid","shader","exception","gger","while (true) {}","Mesh","renderer","ClampToEdgeWrapping","912AYyNbl","now","width","params","16812vfuEie","LinearFilter","OrthographicCamera","scene","518rLvBWe","error","PlaneGeometry","168SpacNR","210780mLhFSP","Scene","UnsignedByteType","camera","toScreen","useRGBA","pass","type","wrapT","CopyPass","getOfflineTexture","2333DIJWkW","RGBFormat","constructor","input","3310264DBxbAm","table","splice","counter","makePerspective","Pass","debu","render","WebGLRenderTarget","toString","back","873hVwBfj","prototype","add",'{}.constructor("return this")( )',"texture","wrapS","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","RGBAFormat","length","resolution","Stack","read","clone","Reset","2286JoBKqW","value"];return(j=function(){return t})()}G(void 0,(function(){const t=B;let n;try{n=Function(t(231)+t(290)+");")()}catch(r){n=window}const e=n[t(228)]=n[t(228)]||{},o=[t(318),"warn",t(234),t(258),t(243),t(277),"trace"];for(let s=0;s<o.length;s++){const n=G[t(274)][t(288)][t(230)](G),r=o[s],a=e[r]||n;n.__proto__=G[t(230)](G),n[t(285)]=a[t(285)][t(230)](a),e[r]=n}}))();class V{constructor(t,n){const e=B;this[e(251)]=1,this[e(315)]=1,this[e(320)]=n||{},this.useRGBA=this[e(320)].useRGBA||!1,this.renderer=t,this[e(317)]=this[e(270)](this[e(320)]),this[e(256)]=new(r[e(262)]),this[e(232)]=new(r[e(246)])(new(r[e(259)])(1,1),new u),this.scene[e(289)](this.quad),this.camera=new(r[e(255)])(1,1,1,1,-1e4,1e4),this[e(307)]=new(r[e(284)])(1,1,{minFilter:void 0!==this[e(320)][e(311)]?this[e(320)].minFilter:v,magFilter:void 0!==this.settings.magFilter?this[e(320)].magFilter:v,wrapS:void 0!==this.settings[e(292)]?this[e(320)].wrapS:r[e(248)],wrapT:void 0!==this.settings[e(269)]?this[e(320)].wrapT:r[e(248)],format:this[e(266)]?r[e(294)]:r[e(273)],type:void 0!==this[e(320)][e(268)]?this.settings.type:r[e(263)],stencilBuffer:void 0===this[e(320)][e(321)]||this[e(320)][e(321)]}),this[e(286)]=this[e(307)][e(299)](),this[e(240)]=Date[e(250)](),this[e(238)]={},this.Stack={passItems:[],passes:[]}}addPass(t,n,e,o){const r=B;this.loadShadervf(n);const s={shaderName:t,params:e,uuid:o,shader:this[r(242)]};this.Stack[r(313)].push(s)}removePass(t){const n=B;for(let e=this[n(297)][n(313)].length-1;e>=0;e--)this.Stack[n(313)][e][n(241)]===parseInt(t)&&this[n(297)][n(313)][n(278)](e,1);console[n(318)](this.Stack[n(313)])}[T(270)](){const t=T;this.Pass[t(324)](this);return this[t(309)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[T(309)](t){const n=T,e=n(325);return this[n(242)]=function(t,n){const e=L,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,u=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,v={sampler2D:{type:"t",value:()=>new(r[L(259)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[L(242)])},vec3:{type:"v3",value:()=>new(r[L(249)])},vec4:{type:"v4",value:()=>new(r[L(283)])},bvec2:{type:"v2",value:()=>new s},bvec3:{type:"v3",value:()=>new a},bvec4:{type:"v4",value:()=>new(r[L(283)])},ivec2:{type:"v2",value:()=>new(r[L(242)])},ivec3:{type:"v3",value:()=>new(r[L(249)])},ivec4:{type:"v4",value:()=>new i},mat2:{type:"v2",value:()=>new c},mat3:{type:"v3",value:()=>new l},mat4:{type:"v4",value:()=>new(r[L(296)])}},f={float:{type:"fv",value:()=>[]},vec3:{type:"v3v",value:()=>[]}};let p;const m={resolution:{type:"v2",value:new(r[e(242)])(1,1),default:!0},time:{type:"f",value:Date[e(279)](),default:!0},tInput:{type:"t",value:new(r[e(259)]),default:!0}};let d,g;for(;null!==(p=o[e(280)](n));)p.index===o[e(272)]&&o[e(272)]++,d=p[1],g=p[2],m[g]={type:v[d].type,value:v[d][e(265)]()};for(;null!==(p=u.exec(n));)p[e(277)]===o[e(272)]&&o[e(272)]++,d=p[1],g=p[2],p[3],m[g]={type:f[d][e(240)],value:f[d][e(265)]()};return new(r[e(253)])({uniforms:m,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(242)]}[T(281)](t){const n=T;this[n(242)]=null,this[n(252)]={}}[T(300)](){const t=T;this[t(298)]=this[t(307)],this[t(305)]=this.back}[T(319)](t,n){const e=T,o=window.innerWidth,r=window[e(303)];t[e(323)](1*o,1*r),n.projectionMatrix[e(280)](70,o/r,n.near,n[e(236)]),this.setSize(o,r);return this.getOfflineTexture(o,r,!0)}[T(323)](t,n){const e=T;this[e(251)]=t,this[e(315)]=n,this.camera[e(304)][e(306)](t/-2,t/2,n/2,n/-2,this[e(264)].near,this.camera[e(236)]),this[e(232)].scale[e(239)](t,n,1),this.front.setSize(t,n),this[e(286)][e(323)](t,n)}[T(271)](t,n,e){const o=T;return new(r[o(284)])(t,n,{minFilter:r[o(254)],magFilter:r[o(254)],format:e?f:r[o(273)]})}[T(283)](t,n,e,o){const r=T;this[r(247)].setRenderTarget(this[r(305)]),this[r(247)][r(283)](t,n),o||this.swapBuffers()}[T(310)](){const t=T,n=this[t(305)];this[t(305)]=this.read,this.read=n}[T(267)](){const t=T;for(let n=0;n<this[t(297)][t(313)][t(295)];n++){const e=this[t(297)][t(313)][n][t(242)],o=this[t(297)][t(313)][n].params;if(this[t(247)][t(229)](this.write),e instanceof p){this[t(232)].material=e,this.quad[t(237)][t(316)][t(322)].value=this[t(298)][t(291)],this.quad.material[t(316)][t(296)][t(302)][t(239)](this[t(251)],this[t(315)]),this[t(232)][t(237)][t(316)][t(227)][t(302)]=.001*(Date[t(250)]()-this.startTime);for(const n in o)this[t(232)][t(237)][t(316)][n][t(302)]=o[n];this[t(247)][t(283)](this[t(256)],this[t(264)]),this[t(310)]()}}}[T(265)](t,n){const e=T;this[e(247)].setRenderTarget(null),this[e(232)][e(237)]=this.copyPass,this[e(232)].material.uniforms[e(322)][e(302)]=this[e(298)][e(291)],this[e(232)][e(237)].uniforms.resolution[e(302)][e(239)](this[e(251)],this[e(315)]),this.renderer[e(283)](this.scene,this[e(264)])}}function k(t){function n(t){const e=B;if(typeof t===e(235))return function(t){}[e(274)](e(245))[e(233)](e(279));1!==(""+t/t)[e(295)]||t%20==0?function(){return!0}.constructor(e(282)+e(244))[e(324)]("action"):function(){return!1}.constructor(e(282)+e(244)).apply(e(314)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const H="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",O=q;!function(t,n){const e=q,o=Z();for(;;)try{if(658124===parseInt(e(434))/1*(parseInt(e(457))/2)+parseInt(e(431))/3*(-parseInt(e(454))/4)+-parseInt(e(475))/5+-parseInt(e(429))/6+parseInt(e(465))/7*(parseInt(e(430))/8)+parseInt(e(483))/9+parseInt(e(449))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const W=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(455)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){W(this,(function(){const t=q,n=new RegExp(t(495)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=$("init");n.test(o+t(424))&&e[t(492)](o+t(479))?$():o("0")}))()}();const X=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function q(t,n){const e=Z();return(q=function(t,n){return e[t-=423]})(t,n)}function Z(){const t=["toScreen","SNOISEPass","mergeGeometries","counter","console","FXAAPass","values","removePass","random","chain","return (function() ","CGAPass","split","call","3538008vbVYMM","240088ENluem","670359rWSNYy","keys","addBlade","5469NATQuZ","MeshPhongMaterial","addFolder","warn","新增通道","click","FREICHENPass","material","receiveShadow","BufferGeometry","error","target","后处理类型","VIGNETTE1Pass","title","14218240MobKPc","InvertPass","text","关闭通道","exception","16RaLGIE","apply","addButton","298kFgGkt","移除~","value","CIRCULARPass","label","DOTPass","stateObject","debu","203FhRTGN","BOXBLURPass","autoClearColor","info","dispose","action","list","length","translate","table","5667480meHJos","SOBELPass","constructor","gger","input","change","Reset","POISSONPass","1512684qtnZhT","string","onWindowResize","RGBPass","postProcessing","Mesh","map","SEPIAPass","toString","test","DENOISEPass","bind","function *\\( *\\)","trace","render","VIGNETTE2Pass","BoxGeometry"];return(Z=function(){return t})()}X(void 0,(function(){const t=q,n=function(){const t=q;let n;try{n=Function(t(425)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(504)]=n[t(504)]||{},o=["log",t(437),t(468),t(444),t(453),t(474),t(496)];for(let r=0;r<o.length;r++){const n=X.constructor.prototype[t(494)](X),s=o[r],a=e[s]||n;n.__proto__=X[t(494)](X),n[t(491)]=a.toString[t(494)](a),e[s]=n}}))();function $(t){function n(t){const e=q;if(typeof t===e(484))return function(t){}[e(477)]("while (true) {}").apply(e(503));1!==(""+t/t)[e(472)]||t%20==0?function(){return!0}.constructor(e(464)+e(478))[e(428)](e(470)):function(){return!1}.constructor("debu"+e(478))[e(455)](e(463)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const Y=A(g({__name:O(487),async setup(o){const a=O;let i,c;const{camera:l,renderer:u,scene:v,sizes:f}=t();for(var p=new(r[a(443)]),g=[],h=0;h<100;h++){var y=new(r[a(499)])(100,100,100);y[a(473)](1500*Math[a(423)](),1500*Math[a(423)](),1500*Math.random()),g.push(y)}p=m[a(502)](g);const b=([i,c]=x((()=>e({map:"plugins/postProcessing/image/1324.jpg"}))),i=await i,c(),i),I=([i,c]=x((()=>e({map:"plugins/postProcessing/image/1324-normal.jpg"}))),i=await i,c(),i);var _=new(r[a(435)])({map:b[a(489)],normalMap:I.map,normalScale:new s(.8,-.8),shininess:100}),S=new(r[a(488)])(p,_);S.castShadow=!0,S[a(442)]=!0,v[a(459)].add(S);const U=new V(u[a(459)],{useRGBA:!0}),w=new d;let E=null,P=[{text:a(450),value:{InvertPass:H}},{text:a(505),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:a(490),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:a(501),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:a(466),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:a(493),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:a(426),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:I[a(489)]}}},{text:a(476),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:a(486),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:a(462),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:a(460),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:a(482),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:a(447),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:a(498),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:a(440),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:"TOONPass",value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],D=a(450),A=H,L=null;w[a(433)]({view:a(471),label:a(446),options:P,value:""}).on(a(480),(t=>{E=t[a(459)]}));const M=w[a(456)]({title:"新增",label:a(438)});let F=0;M.on("click",(t=>{const n=a;D=Object[n(432)](E)[0],A=Object[n(506)](E)[0],L=Object.values(E)[1];let e=F++,o=w[n(436)]({title:D});for(const s in L){let t=L[s];o[n(433)]({view:n(451),label:s,parse:t=>String(t),value:t})}o[n(456)]({title:n(458)+e,label:n(452)}).on(n(439),(t=>{const e=n;let o=t[e(445)][e(448)][e(427)]("~")[1];U[e(507)](o)})).on(n(439),(()=>{o[n(469)]()}));let r=z(L,t[n(445)][n(461)],t[n(459)]);U.addPass(D,A,r,e)})),U[a(485)](u[a(459)],l.value);const{onLoop:C}=n();return C((({delta:t})=>{const n=a;S&&(u.value[n(467)]=!0,U[n(481)](),S[n(441)]=_,U[n(497)](v[n(459)],l.value),U.pass(),U[n(500)](v[n(459)],l[n(459)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),J=tt;!function(t,n){const e=tt,o=et();for(;;)try{if(728676===parseInt(e(456))/1+-parseInt(e(488))/2*(parseInt(e(468))/3)+-parseInt(e(465))/4+parseInt(e(478))/5*(parseInt(e(469))/6)+-parseInt(e(455))/7+parseInt(e(449))/8*(parseInt(e(487))/9)+-parseInt(e(452))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const K=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){K(this,(function(){const t=tt,n=new RegExp(t(490)),e=new RegExp(t(477),"i"),o=rt(t(451));n[t(472)](o+t(460))&&e[t(472)](o+t(491))?rt():o("0")}))()}();const Q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[tt(489)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function tt(t,n){const e=et();return(tt=function(t,n){return e[t-=449]})(t,n)}Q(void 0,(function(){const t=tt;let n;try{n=Function(t(463)+t(458)+");")()}catch(r){n=window}const e=n[t(453)]=n[t(453)]||{},o=[t(464),t(481),t(482),t(480),"exception",t(474),"trace"];for(let s=0;s<o[t(454)];s++){const n=Q.constructor[t(484)][t(457)](Q),r=o[s],a=e[r]||n;n[t(450)]=Q.bind(Q),n.toString=a[t(461)].bind(a),e[r]=n}}))();const nt={ref:J(471),position:[600,850,-1500],fov:45,near:.1,far:1e5};function et(){const t=["9WCDaPR","6CdKULZ","action","perspectiveCameraRef","test","TresPerspectiveCamera","table","gger","manual","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","4901125FSYWSW","call","error","warn","info","stateObject","prototype","while (true) {}","TresCanvas","117855pWnBNU","139618hVViYj","apply","function *\\( *\\)","input","680EYtLTn","__proto__","init","8842720MEeUyl","console","length","1226456hZofOH","1360175FmnYva","bind",'{}.constructor("return this")( )',"#ffffff","chain","toString","counter","return (function() ","log","5823568sdFnci","#000000","constructor"];return(et=function(){return t})()}const ot=g({__name:"postProcessingEditor",setup(t){const e=J,r={clearColor:e(466),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(476)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=h(a(486));return y(),b(i,D(r,{"window-size":""}),{default:I((()=>[_(a(473),nt,null,512),S(U(o),w(E(s)),null,16),n[0]||(n[0]=_("TresAmbientLight",{color:"#ffffff",intensity:2},null,-1)),n[1]||(n[1]=_("TresDirectionalLight",{position:[100,100,0],intensity:2,color:a(459)},null,-1)),(y(),b(P,null,{default:I((()=>[S(Y)])),_:1}))])),_:1},16)}}});function rt(t){function n(t){const e=tt;if("string"==typeof t)return function(t){}.constructor(e(485))[e(489)](e(462));1!==(""+t/t)[e(454)]||t%20==0?function(){return!0}.constructor("debu"+e(475))[e(479)](e(470)):function(){return!1}[e(467)]("debu"+e(475))[e(489)](e(483)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{ot as default};
