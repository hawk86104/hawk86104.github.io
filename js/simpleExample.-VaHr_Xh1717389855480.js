import{c6 as p,aG as d,a5 as h,ad as u,at as m,r as f,o as g,C as v,J as C,ac as y,a8 as S,cD as _,a as w,T as M,ag as x,a1 as i,ae as P,af as T}from"./vendor.FqxLcdZR1717389855480.js";const l={segments:30,w:256,h:256},b=()=>{const e=new Array;for(let o=0;o<l.segments;o++)e[o]=parseInt(Math.random()*25+10);return e},G=(e,o)=>{let{x:s,y:a,radius:t,weight:n}=o;t=parseInt(t*n);const r=e.createRadialGradient(s,a,0,s,a,t);r.addColorStop(0,"rgba(255, 255, 0, 1)"),r.addColorStop(1,"rgba(255, 0, 0, 0)"),e.fillStyle=r,e.globalAlpha=n,e.beginPath(),e.arc(s,a,t,0,2*Math.PI),e.closePath(),e.fill()},D=()=>{const e={1:"#f00",.8:"#e2fa00",.6:"#33f900",.3:"#0349df",0:"#fff"},o=256,s=10,a=document.createElement("canvas");a.width=o,a.height=s,a.style.position="absolute",a.style.top="0",a.style.right="0";const t=a.getContext("2d"),n=t.createLinearGradient(0,0,o,0);for(const c in e)n.addColorStop(c,e[c]);t.fillStyle=n,t.fillRect(0,0,o,s),document.body.appendChild(a);const r=new p(a);return r.minFilter=d,r.needsUpdate=!0,r},L=()=>{const e=document.createElement("canvas");e.width=l.w,e.height=l.h,e.style.position="absolute",e.style.top="20px",e.style.right="0";const o=e.getContext("2d"),s=b();for(let t=0;t<l.segments;t++){const n=s[t]/35,r=Math.random()*l.w,c=Math.random()*l.h;G(o,{x:r,y:c,radius:80,weight:n})}document.body.appendChild(e);const a=new p(e);return a.minFilter=d,a.needsUpdate=!0,a},R=i("TresPerspectiveCamera",{position:[0,0,3e3],fov:40,near:.1,far:1e4},null,-1),U=i("TresAmbientLight",{color:"#eef0ff",intensity:1},null,-1),A=i("TresPlaneGeometry",{args:[1500,1500]},null,-1),B=h({__name:"simpleExample",setup(e){const o={clearColor:"#030311",shadows:!0,alpha:!1,outputColorSpace:S,shadowMapType:_,useLegacyLights:!0};u().onLoop(({delta:t})=>{});const s={transparent:!0,side:m,vertexShader:"\n	varying vec2 vUv;\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }",fragmentShader:"\n	#ifdef GL_ES\n  precision highp float;\n  #endif\n  varying vec2 vUv;\n  uniform sampler2D alphaScaleMap;\n  uniform sampler2D paletteMap;\n  void main() {\n    vec4 alphaColor = texture2D(alphaScaleMap, vUv);\n    vec4 color = texture2D(paletteMap, vec2(alphaColor.a, 0.0));\n    gl_FragColor = vec4(color.r, color.g, color.b, alphaColor.a);\n	}",uniforms:{alphaScaleMap:{type:"t",value:L()},paletteMap:{type:"t",value:D()}}};function a(t){t&&console.log(t)}return(t,n)=>{const r=f("TresCanvas");return g(),v(r,y(o,{"window-size":""}),{default:C(()=>[R,w(M(x),{autoRotate:!0,autoRotateSpeed:2}),U,i("TresMesh",{position:[0,0,10],onPointerMove:a},[A,i("TresShaderMaterial",P(T(s)),null,16)],32)]),_:1},16)}}});export{B as default};
