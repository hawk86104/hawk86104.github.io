import{p as t,$ as n,N as e,d as o}from"./@tresjs.tWkmYPO61721721076264.js";import{a6 as r,j as a,i as s,o as i,Y as l,W as c,l as u,cG as v,B as f,bU as p}from"./three.fnkrvySq1721721076264.js";import{P as d}from"./tweakpane.yHWGBmom1721721076264.js";import{d as m,a4 as g,e as x,o as h,f as y,g as I,J as b,j as _,u as S,aj as U,ak as w,al as P,m as D}from"./@vue.Q1VpS3901721721076264.js";import{_ as E}from"./@fesjs.ODHTSx0A1721721076264.js";import"./@vueuse._hUvP73U1721721076264.js";import"./vue-router.wK6Z5ZPK1721721076264.js";import"./lodash-es.nFpJXAf-1721721076264.js";import"./@qlin.yHhFDldE1721721076264.js";import"./pinia.G6Yd8Ztp1721721076264.js";import"./@floating-ui.BPbuo5Gx1721721076264.js";import"./@juggle.7yjBMqoW1721721076264.js";function M(){const t=["lastIndex","14sBEJPB","v3v","warn","message","Vector4","apply","init","Texture","chain","type","67289pxEWId","info","toString","error","random","exec","__proto__","5ezjYHP","5720049MaIRIs","value","stateObject","table","test","constructor","name","function *\\( *\\)","2209068gJyNNE","Matrix2","open","Vector3","bind","\" couldn't be loaded.",'Shader "',"object","2599182oaJdAw","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)",'{}.constructor("return this")( )',"index","Matrix4","WagnerLoadShaderException","replace","action","debu",'" load was aborted.',"gger","isArray","3087498EsIAjN","8sKugMs","length","input","counter","send","console","trace","ShaderMaterial","onabort","Vector2","exception","9996492cwYqow","125968svPclB","hasOwnProperty","10kvXaRR"];return(M=function(){return t})()}!function(t,n){const e=C,o=M();for(;;)try{if(711331===-parseInt(e(487))/1*(-parseInt(e(524))/2)+-parseInt(e(511))/3+parseInt(e(503))/4+-parseInt(e(494))/5*(-parseInt(e(523))/6)+parseInt(e(477))/7*(-parseInt(e(536))/8)+-parseInt(e(495))/9+parseInt(e(538))/10*(parseInt(e(535))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(482)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){A(this,(function(){const t=C,n=new RegExp(t(502)),e=new RegExp(t(512),"i"),o=F(t(483));n[t(499)](o+t(485))&&e[t(499)](o+t(526))?F():o("0")}))()}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function C(t,n){const e=M();return(C=function(t,n){return e[t-=476]})(t,n)}L(void 0,(function(){const t=C;let n;try{n=Function("return (function() "+t(513)+");")()}catch(r){n=window}const e=n[t(529)]=n[t(529)]||{},o=["log",t(479),t(488),t(490),t(534),t(498),t(530)];for(let a=0;a<o[t(525)];a++){const n=L[t(500)].prototype[t(507)](L),r=o[a],s=e[r]||n;n[t(493)]=L[t(507)](L),n.toString=s[t(489)].bind(s),e[r]=n}}))();function z(t,n,e){const o=C;if(typeof t!==o(510)||null===t)return t;const r=Array[o(522)](t)?[]:{};for(const a in t)t[o(537)](a)&&(r[a]=z(t[a])),a==n&&(r[n]=e);return r}function F(t){function n(t){const e=C;if("string"==typeof t)return function(t){}[e(500)]("while (true) {}")[e(482)](e(527));1!==(""+t/t)[e(525)]||t%20==0?function(){return!0}[e(500)](e(519)+e(521)).call(e(518)):function(){return!1}[e(500)](e(519)+e(521))[e(482)](e(497)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const N=R;!function(t,n){const e=R,o=k();for(;;)try{if(898584===-parseInt(e(520))/1*(-parseInt(e(546))/2)+-parseInt(e(579))/3+parseInt(e(537))/4*(parseInt(e(564))/5)+-parseInt(e(543))/6+parseInt(e(585))/7+-parseInt(e(500))/8*(parseInt(e(501))/9)+parseInt(e(507))/10*(parseInt(e(524))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const T=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(528)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){T(this,(function(){const t=R,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(519),"i"),o=B(t(601));n[t(514)](o+t(502))&&e[t(514)](o+"input")?B():o("0")}))()}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(528)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function R(t,n){const e=k();return(R=function(t,n){return e[t-=498]})(t,n)}G(void 0,(function(){const t=R,n=function(){const t=R;let n;try{n=Function(t(594)+t(499)+");")()}catch(e){n=window}return n}(),e=n[t(498)]=n[t(498)]||{},o=[t(552),t(539),t(521),"error",t(538),"table",t(540)];for(let r=0;r<o.length;r++){const n=G.constructor[t(590)][t(566)](G),a=o[r],s=e[a]||n;n[t(504)]=G.bind(G),n[t(549)]=s[t(549)][t(566)](s),e[a]=n}}))();class j{constructor(t,n){const e=R;this[e(576)]=1,this.height=1,this.settings=n||{},this[e(518)]=this.settings[e(518)]||!1,this[e(544)]=t,this[e(515)]=this.CopyPass(this[e(586)]),this[e(556)]=new i,this[e(559)]=new(r[e(550)])(new(r[e(530)])(1,1),new l),this[e(556)][e(526)](this[e(559)]),this[e(542)]=new(r[e(560)])(1,1,1,1,-1e4,1e4),this[e(563)]=new c(1,1,{minFilter:void 0!==this[e(586)].minFilter?this[e(586)].minFilter:u,magFilter:void 0!==this[e(586)][e(536)]?this[e(586)][e(536)]:r[e(572)],wrapS:void 0!==this[e(586)][e(568)]?this[e(586)].wrapS:r[e(555)],wrapT:void 0!==this[e(586)][e(505)]?this[e(586)][e(505)]:r[e(555)],format:this[e(518)]?r[e(596)]:v,type:void 0!==this[e(586)][e(573)]?this[e(586)].type:r[e(545)],stencilBuffer:void 0===this.settings[e(503)]||this[e(586)][e(503)]}),this[e(516)]=this.front[e(533)](),this.startTime=Date[e(522)](),this[e(548)]={},this[e(600)]={passItems:[],passes:[]}}addPass(t,n,e,o){const r=R;this.loadShadervf(n);const a={shaderName:t,params:e,uuid:o,shader:this[r(574)]};this[r(600)][r(510)].push(a)}[N(593)](t){const n=N;for(let e=this.Stack.passItems[n(567)]-1;e>=0;e--)this[n(600)][n(510)][e][n(523)]===parseInt(t)&&this[n(600)][n(510)][n(506)](e,1);console[n(552)](this[n(600)][n(510)])}[N(587)](){const t=N;this[t(531)][t(508)](this);return this[t(525)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[N(525)](t){const n=N,e=n(558);return this[n(574)]=function(t,n){const e=C,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,i=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,l={sampler2D:{type:"t",value:()=>new(r[C(484)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[C(533)])},vec3:{type:"v3",value:()=>new(r[C(506)])},vec4:{type:"v4",value:()=>new(r[C(481)])},bvec2:{type:"v2",value:()=>new a},bvec3:{type:"v3",value:()=>new(r[C(506)])},bvec4:{type:"v4",value:()=>new(r[C(481)])},ivec2:{type:"v2",value:()=>new(r[C(533)])},ivec3:{type:"v3",value:()=>new(r[C(506)])},ivec4:{type:"v4",value:()=>new(r[C(481)])},mat2:{type:"v2",value:()=>new(r[C(504)])},mat3:{type:"v3",value:()=>new s},mat4:{type:"v4",value:()=>new(r[C(515)])}},c={float:{type:"fv",value:()=>[]},vec3:{type:e(478),value:()=>[]}};let u;const v={resolution:{type:"v2",value:new(r[e(533)])(1,1),default:!0},time:{type:"f",value:Date.now(),default:!0},tInput:{type:"t",value:new(r[e(484)]),default:!0}};let f,p;for(;null!==(u=o[e(492)](n));)u[e(514)]===o[e(476)]&&o[e(476)]++,f=u[1],p=u[2],v[p]={type:l[f][e(486)],value:l[f][e(496)]()};for(;null!==(u=i[e(492)](n));)u.index===o[e(476)]&&o[e(476)]++,f=u[1],p=u[2],u[3],v[p]={type:c[f][e(486)],value:c[f][e(496)]()};return new(r[e(531)])({uniforms:v,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(574)]}Pass(t){const n=N;this[n(574)]=null,this[n(529)]={}}[N(581)](){const t=N;this[t(570)]=this[t(563)],this[t(562)]=this.back}[N(588)](t,n){const e=N,o=window.innerWidth,r=window[e(589)];t.setSize(1*o,1*r),n.projectionMatrix[e(512)](70,o/r,n.near,n[e(584)]),this[e(541)](o,r);return this.getOfflineTexture(o,r,!0)}[N(541)](t,n){const e=N;this[e(576)]=t,this[e(583)]=n,this[e(542)][e(575)][e(582)](t/-2,t/2,n/2,n/-2,this[e(542)][e(598)],this[e(542)][e(584)]),this.quad[e(602)].set(t,n,1),this[e(563)][e(541)](t,n),this[e(516)][e(541)](t,n)}[N(595)](t,n,e){const o=N;return new(r[o(554)])(t,n,{minFilter:r[o(572)],magFilter:u,format:e?r[o(596)]:r[o(592)]})}[N(511)](t,n,e,o){const r=N;this[r(544)][r(547)](this[r(562)]),this.renderer[r(511)](t,n),o||this[r(513)]()}[N(513)](){const t=N,n=this[t(562)];this[t(562)]=this[t(570)],this[t(570)]=n}[N(509)](){const t=N;for(let n=0;n<this.Stack[t(510)][t(567)];n++){const e=this[t(600)].passItems[n][t(574)],o=this.Stack.passItems[n][t(529)];if(this.renderer[t(547)](this[t(562)]),e instanceof r[t(553)]){this[t(559)][t(551)]=e,this[t(559)][t(551)].uniforms.tInput[t(565)]=this[t(570)].texture,this[t(559)].material[t(578)][t(577)].value[t(527)](this[t(576)],this[t(583)]),this[t(559)][t(551)][t(578)].time.value=.001*(Date[t(522)]()-this[t(517)]);for(const n in o)this.quad[t(551)].uniforms[n][t(565)]=o[n];this[t(544)].render(this[t(556)],this.camera),this[t(513)]()}}}[N(591)](t,n){const e=N;this[e(544)][e(547)](null),this[e(559)].material=this[e(515)],this[e(559)][e(551)][e(578)][e(569)].value=this.read[e(532)],this.quad[e(551)][e(578)][e(577)].value[e(527)](this[e(576)],this[e(583)]),this[e(544)][e(511)](this[e(556)],this[e(542)])}}function B(t){function n(t){const e=R;if(typeof t===e(571))return function(t){}.constructor(e(535))[e(528)](e(580));1!==(""+t/t)[e(567)]||t%20==0?function(){return!0}[e(561)](e(599)+"gger").call(e(534)):function(){return!1}[e(561)](e(599)+e(557))[e(528)](e(597)),n(++t)}try{if(t)return n;n(0)}catch(e){}}function k(){const t=["2025751QqJVDk","settings","CopyPass","onWindowResize","innerHeight","prototype","toScreen","RGBFormat","removePass","return (function() ","getOfflineTexture","RGBAFormat","stateObject","near","debu","Stack","init","scale","console",'{}.constructor("return this")( )',"64864KyZFfm","1332dRkLQW","chain","stencilBuffer","__proto__","wrapT","splice","10nUbvPO","call","pass","passItems","render","makePerspective","swapBuffers","test","copyPass","back","startTime","useRGBA","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","15097SwQlhT","info","now","uuid","19024027hahznM","loadShadervf","add","set","apply","params","PlaneGeometry","Pass","texture","clone","action","while (true) {}","magFilter","52qasnpH","exception","warn","trace","setSize","camera","4924626zqhjZB","renderer","UnsignedByteType","146vjGJLQ","setRenderTarget","passes","toString","Mesh","material","log","ShaderMaterial","WebGLRenderTarget","ClampToEdgeWrapping","scene","gger","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","quad","OrthographicCamera","constructor","write","front","357835TINVyn","value","bind","length","wrapS","tInput","read","string","LinearFilter","type","shader","projectionMatrix","width","resolution","uniforms","3395889QGmeDO","counter","Reset","makeOrthographic","height","far"];return(k=function(){return t})()}const O="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",V=X;!function(t,n){const e=X,o=q();for(;;)try{if(158845===parseInt(e(255))/1*(parseInt(e(328))/2)+parseInt(e(300))/3*(-parseInt(e(313))/4)+parseInt(e(326))/5*(-parseInt(e(330))/6)+parseInt(e(316))/7+parseInt(e(278))/8+parseInt(e(327))/9*(-parseInt(e(296))/10)+parseInt(e(307))/11*(parseInt(e(275))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[X(318)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){H(this,(function(){const t=X,n=new RegExp(t(262)),e=new RegExp(t(305),"i"),o=Z(t(290));n[t(257)](o+"chain")&&e[t(257)](o+t(293))?Z():o("0")}))()}();const W=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[X(318)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function X(t,n){const e=q();return(X=function(t,n){return e[t-=252]})(t,n)}function q(){const t=["24jfcVBT","RGBPass","pass","948192rQYLEt","addButton","bind","title","dispose","BOXBLURPass","CGAPass","random","info","call","click","BoxGeometry","init","新增通道","addBlade","input",'{}.constructor("return this")( )',"removePass","193490lMorJV","value","Reset","InvertPass","881091ZEvTEE","stateObject","map","error","DOTPass","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","castShadow","3114716ChhYgd","addPass","SOBELPass","POISSONPass","translate","debu","4INGmIr","移除~","add","149940hhfzss","plugins/postProcessing/image/1324.jpg","apply","receiveShadow","SNOISEPass","trace","return (function() ","gger","toScreen","toString","512305MkXrKc","9qjlvOA","73018wGCzrv","action","18nisXuG","关闭通道","change","addFolder","string","2jNkaoW","postProcessing","test","mergeGeometries","keys","console","while (true) {}","function *\\( *\\)","material","plugins/postProcessing/image/1324-normal.jpg","label","__proto__","warn","text","MeshPhongMaterial","VIGNETTE2Pass","constructor","Mesh","TOONPass","VIGNETTE1Pass"];return(q=function(){return t})()}W(void 0,(function(){const t=X,n=function(){const t=X;let n;try{n=Function(t(322)+t(294)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(260)]||{},o=["log",t(267),t(286),t(303),"exception","table",t(321)];for(let r=0;r<o.length;r++){const n=W[t(271)].prototype[t(280)](W),a=o[r],s=e[a]||n;n[t(266)]=W[t(280)](W),n.toString=s[t(325)].bind(s),e[a]=n}}))();function Z(t){function n(t){const e=X;if(typeof t===e(254))return function(t){}[e(271)](e(261)).apply("counter");1!==(""+t/t).length||t%20==0?function(){return!0}.constructor(e(312)+e(323))[e(287)](e(329)):function(){return!1}.constructor("debu"+e(323))[e(318)](e(301)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const $=E(m({__name:V(256),async setup(o){const s=V;let i,l;const{camera:c,renderer:u,scene:v,sizes:m}=t();for(var x=new f,h=[],y=0;y<100;y++){var I=new(r[s(289)])(100,100,100);I[s(311)](1500*Math.random(),1500*Math[s(285)](),1500*Math[s(285)]()),h.push(I)}x=p[s(258)](h);const b=([i,l]=g((()=>e({map:s(317)}))),i=await i,l(),i),_=([i,l]=g((()=>e({map:s(264)}))),i=await i,l(),i);var S=new(r[s(269)])({map:b.map,normalMap:_[s(302)],normalScale:new a(.8,-.8),shininess:100}),U=new(r[s(272)])(x,S);U[s(306)]=!0,U[s(319)]=!0,v.value[s(315)](U);const w=new j(u.value,{useRGBA:!0}),P=new d;let D=null,E=[{text:s(299),value:{InvertPass:O}},{text:"FXAAPass",value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:"SEPIAPass",value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:s(320),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:s(283),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:"DENOISEPass",value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:s(284),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:_[s(302)]}}},{text:s(309),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:s(276),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:s(304),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:"CIRCULARPass",value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:s(310),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:s(274),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(270),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:"FREICHENPass",value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:s(273),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],M=s(299),A=O,L=null;P[s(292)]({view:"list",label:"后处理类型",options:E,value:""}).on(s(252),(t=>{D=t[s(297)]}));const C=P[s(279)]({title:"新增",label:s(291)});let F=0;C.on(s(288),(t=>{const n=s;M=Object[n(259)](D)[0],A=Object.values(D)[0],L=Object.values(D)[1];let e=F++,o=P[n(253)]({title:M});for(const a in L){let t=L[a];o.addBlade({view:n(268),label:a,parse:t=>String(t),value:t})}o.addButton({title:n(314)+e,label:n(331)}).on("click",(t=>{const e=n;let o=t.target[e(281)].split("~")[1];w[e(295)](o)})).on(n(288),(()=>{o[n(282)]()}));let r=z(L,t.target[n(265)],t.value);w[n(308)](M,A,r,e)})),w.onWindowResize(u.value,c.value);const{onLoop:N}=n();return N((({delta:t})=>{const n=s;U&&(u[n(297)].autoClearColor=!0,w[n(298)](),U[n(263)]=S,w.render(v.value,c.value),w[n(277)](),w[n(324)](v[n(297)],c.value))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),J=tt;!function(t,n){const e=tt,o=K();for(;;)try{if(987318===-parseInt(e(192))/1+parseInt(e(163))/2+-parseInt(e(201))/3+-parseInt(e(185))/4*(-parseInt(e(199))/5)+parseInt(e(158))/6+-parseInt(e(159))/7*(-parseInt(e(200))/8)+parseInt(e(167))/9*(-parseInt(e(169))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Y=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){Y(this,(function(){const t=tt,n=new RegExp(t(196)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=at(t(165));n[t(175)](o+"chain")&&e[t(175)](o+t(170))?at():o("0")}))()}();const Q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[tt(184)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function K(){const t=["prototype","info","table","counter","bind","perspectiveCameraRef","apply","4iboSYi","gger","debu","toString","manual","error","length","633230HedCju","action","exception","warn","function *\\( *\\)","console","string","3202005IDUKSC","366568lorxSz","2020320XMqddp","log","5972484CIklyn","21FIejYZ","constructor","TresAmbientLight","#ffffff","3329982mhcJoU","__proto__","init","TresDirectionalLight","1719PDuWxZ","trace","59910uwTDyb","input","stateObject","call","TresPerspectiveCamera","TresCanvas","test","return (function() ","postProcessingEditor"];return(K=function(){return t})()}function tt(t,n){const e=K();return(tt=function(t,n){return e[t-=158]})(t,n)}Q(void 0,(function(){const t=tt;let n;try{n=Function(t(176)+'{}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(197)]=n[t(197)]||{},o=[t(202),t(195),t(179),t(190),t(194),t(180),t(168)];for(let a=0;a<o.length;a++){const n=Q[t(160)][t(178)].bind(Q),r=o[a],s=e[r]||n;n[t(164)]=Q[t(182)](Q),n[t(188)]=s[t(188)][t(182)](s),e[r]=n}}))();const nt={ref:J(183),position:[600,850,-1500],fov:45,near:.1,far:1e5},et=b(J(161),{color:"#ffffff",intensity:2},null,-1),ot=b(J(166),{position:[100,100,0],intensity:2,color:J(162)},null,-1),rt=m({__name:J(177),setup(t){const e=J,r={clearColor:"#000000",shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(189)},a={autoRotate:!0,enableDamping:!0},{onLoop:s}=n();return s((({delta:t})=>{})),(t,n)=>{const s=e,i=x(s(174));return h(),y(i,D(r,{"window-size":""}),{default:I((()=>[b(s(173),nt,null,512),_(S(o),U(w(a)),null,16),et,ot,(h(),y(P,null,{default:I((()=>[_($)])),_:1}))])),_:1},16)}}});function at(t){function n(t){const e=tt;if(typeof t===e(198))return function(t){}[e(160)]("while (true) {}")[e(184)](e(181));1!==(""+t/t)[e(191)]||t%20==0?function(){return!0}.constructor("debugger")[e(172)](e(193)):function(){return!1}[e(160)](e(187)+e(186))[e(184)](e(171)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{rt as default};
