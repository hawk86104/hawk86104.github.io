import{D as o,a,e,o as n}from"./@tresjs.zc7faK4J1743660816268.js";import{b as t,c as r,C as s,l as i,c6 as l,ai as c}from"./three.2wx8FU0g1743660816268.js";import{P as m}from"./tweakpane.ivGeiIdz1743660816268.js";import{d as u,a4 as v,r as p,b as d,w as g,o as x,H as f,N as y,aj as b,ak as w,u as C,e as P,f as z,g as h,j as _,al as M}from"./@vue.B5PFBfKs1743660816268.js";import"./postprocessing.ApTwx-211743660816268.js";import"./@vueuse.jtbb8I7w1743660816268.js";const j=["geometry"],A=u({__name:"fragmentModelCom",async setup(n){let c,u;const P=o=>{const a=[];return o.traverse((o=>{o instanceof i&&(o.geometry.deleteAttribute("uv"),o.geometry.deleteAttribute("tangent"),a.push(o.geometry))})),l(a)},z=P(([c,u]=v((()=>o("https://opensource.cdn.icegl.cn/model/eCommerce/guanYu.glb",{draco:!0,decoderPath:"./draco/"}))),c=await c,u(),c).scene.children[0]);z.rotateX(Math.PI/2),z.translate(0,-.9,0);const h=z.clone().toNonIndexed(),_=P(([c,u]=v((()=>o("./plugins/industry4/model/modelDraco.glb",{draco:!0,decoderPath:"./draco/"}))),c=await c,u(),c).scene.children[0]);_.rotateX(-Math.PI/2),_.rotateY(Math.PI/3);const M=_.clone().toNonIndexed(),A=h.attributes.position.array,D=h.attributes.position.count,N=M.attributes.position.array,V=M.attributes.normal.array,I=M.attributes.position.count,R=new Float32Array(D),F=new Float32Array(3*(D+2)),S=new Float32Array(3*(D+2)),T=new Float32Array(3*(D+2));for(let o=0;o<D;o+=3){const a=1*Math.random(),e=o%I;R[o]=a,R[o+1]=a,R[o+2]=a;const n=3*o,r=A[n],s=A[n+1],i=A[n+2],l=A[n+3],c=A[n+4],m=A[n+5],u=A[n+6],v=A[n+7],p=A[n+8],d=new t(r+l+u,s+c+v,i+m+p).divideScalar(3);F.set([d.x,d.y,d.z],3*o),F.set([d.x,d.y,d.z],3*(o+1)),F.set([d.x,d.y,d.z],3*(o+2));const g=(o,a,e)=>{const n=3*e;for(let t=0;t<3;t++){const r=n+3*t;a.set([o[r],o[r+1],o[r+2]],3*(e+t))}};g(N,S,e),g(V,T,e)}h.setAttribute("aRandom",new r(R,1)),h.setAttribute("aCenter",new r(F,3)),h.setAttribute("toPosition",new r(S,3)),h.setAttribute("toNormal",new r(T,3)),console.log(h.attributes);const B=([c,u]=v((()=>a(["./plugins/visualArts/image/fragment512px.png"]))),c=await c,u(),c),k={uniforms:{u_progress:{value:-.1},matcap1:{value:B},m1Color:{type:"v3",value:new s("#ffc0fa")},matcap2:{value:B},m2Color:{type:"v3",value:new s("#bcd4ff")}},vertexShader:"varying vec2 vUv;\nvarying vec3 vNormal;\nvarying vec3 vViewPosition;\n\nattribute vec3 aCenter;\nattribute vec3 toPosition;\nattribute vec3 toNormal;\nattribute float aRandom;\n\nuniform float u_progress;\n\n#include <common>\n\nmat4 rotation3d(vec3 axis, float angle) {\n  axis = normalize(axis);\n  float s = sin(angle);\n  float c = cos(angle);\n  float oc = 1.0 - c;\n\n  return mat4(\n      oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s,\n      oc * axis.z * axis.x + axis.y * s, 0.0, oc * axis.x * axis.y + axis.z * s,\n      oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s, 0.0,\n      oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s,\n      oc * axis.z * axis.z + c, 0.0, 0.0, 0.0, 0.0, 1.0);\n}\n\nvoid main() {\n  vUv = uv;\n\n  float progress = u_progress;\n  float sinProgress = sin(progress * PI);\n\n  vec3 pos = mix(position, toPosition, progress);\n  vec3 nor = mix(normal, toNormal, progress);\n\n  vNormal = normalMatrix * normalize(nor);\n\n  float prog = ((pos.y + 1.) / 2.) * 1.1;\n\n  float locprog = clamp((sinProgress - 0.9 * prog) / 0.2, 0., 1.);\n\n  vec3 transform = pos - aCenter;\n\n  transform += 3. * aRandom * nor * locprog;\n\n  transform *= (1.0 - locprog);\n\n  transform += aCenter;\n\n  mat4 rotation = rotation3d(vec3(0., 1., 0.), aRandom * (locprog)*PI * 3.);\n\n  transform = (rotation * vec4(transform, 1.)).xyz;\n\n  vec4 modelViewPosition = modelViewMatrix * vec4(transform, 1.0);\n\n  gl_Position = projectionMatrix * modelViewPosition;\n\n  vViewPosition = -modelViewPosition.xyz;\n}",fragmentShader:"varying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec3 vViewPosition;\nuniform sampler2D matcap;\nuniform sampler2D matcap2;\nuniform float u_progress;\nuniform vec3 m1Color;\nuniform vec3 m2Color;\n\nvoid main() {\n  vec3 viewDir = normalize(vViewPosition);\n  vec3 x = normalize(vec3(viewDir.z, 0.0, -viewDir.x));\n  vec3 y = cross(viewDir, x);\n  vec2 uv = vec2(dot(x, vNormal), dot(y, vNormal)) * 0.495 + 0.5;\n\n  float progress = abs(sin(u_progress));\n\n  vec3 matcapColor = texture2D(matcap, uv).rgb;\n  matcapColor = mix(matcapColor, m1Color, 0.5);\n  vec3 matcap2Color = texture2D(matcap2, uv).rgb;\n  matcap2Color = mix(matcap2Color, m2Color, 0.5);\n\n  vec3 color = vec3(matcapColor);\n  color = mix(color, matcap2Color, progress);\n\n  gl_FragColor = vec4(color, 1.0);\n}"},U=p({c1:"#ffc0fa",c2:"#bcd4ff"}),L=d(.5),X=new m({title:"参数"});return X.addBinding(k.uniforms.u_progress,"value",{label:"变化量",min:-.1,max:1,step:.001}).disabled=!0,X.addBinding(U,"c1",{label:"颜色1st"}),X.addBinding(U,"c2",{label:"颜色2rd"}),X.addBinding(L,"value",{label:"速度",min:.001,max:1,step:.001}),g(U,(o=>{k.uniforms.m1Color.value.set(o.c1),k.uniforms.m2Color.value.set(o.c2)}),{deep:!0}),e().onLoop((({elapsed:o})=>{k.uniforms.u_progress.value=(Math.sin(o*L.value)+1)/2,X.refresh()})),(o,a)=>(x(),f("TresMesh",{geometry:C(h)},[y("TresShaderMaterial",b(w(k)),null,16)],8,j))}}),D=u({__name:"fragmentModel",setup(o){const a=p({enableDamping:!0,enableZoom:!0,autoRotate:!0,enablePan:!0,enableRotate:!0}),e={clearColor:"#000000",windowSize:!0,toneMapping:c,toneMappingExposure:.8};return(o,t)=>{const r=P("TresCanvas");return x(),z(r,b(w(e)),{default:h((()=>[t[0]||(t[0]=y("TresPerspectiveCamera",{position:[0,2,8],fov:45,near:.1,far:1e3},null,-1)),_(C(n),b(w(a)),null,16),t[1]||(t[1]=y("TresAmbientLight",{intensity:2},null,-1)),(x(),z(M,null,{default:h((()=>[_(A)])),_:1}))])),_:1},16)}}});export{D as default};
