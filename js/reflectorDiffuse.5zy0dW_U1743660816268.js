!function(t,n){const r=o,c=e();for(;;)try{if(338353===parseInt(r(244))/1+parseInt(r(251))/2*(-parseInt(r(230))/3)+parseInt(r(218))/4+parseInt(r(223))/5*(-parseInt(r(243))/6)+-parseInt(r(231))/7*(-parseInt(r(219))/8)+-parseInt(r(224))/9*(-parseInt(r(221))/10)+-parseInt(r(253))/11)break;c.push(c.shift())}catch(i){c.push(c.shift())}}();const t=function(){let t=!0;return function(n,e){const r=t?function(){if(e){const t=e[o(257)](n,arguments);return e=null,t}}:function(){};return t=!1,r}}();!function(){t(this,(function(){const t=o,n=new RegExp(t(240)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),r=i(t(214));n[t(254)](r+"chain")&&e[t(254)](r+t(241))?i():r("0")}))()}();const n=function(){let t=!0;return function(n,e){const r=t?function(){if(e){const t=e[o(257)](n,arguments);return e=null,t}}:function(){};return t=!1,r}}();function e(){const t=["constructor","#include <emissivemap_fragment>","stateObject","toString","fragmentShader","function *\\( *\\)","input","warn","271926YMzibo","112559qqogvQ","console","replace","exception","string","\n\t\tuniform mat4 textureMatrix;\n\t\tout vec4 vCoord;\n\t\tout vec3 vToEye;\n\n\t\tvoid main() {\n\t\t","return (function() ","38wngzzM","\n\t\tuniform sampler2D reflectMap;\n\t\tuniform float mirror;\n\t\tuniform float mixStrength;\n\t\tin vec4 vCoord;\n\t\tin vec3 vToEye;\n\n\t\tvoid main() {\n\t\t","2113166EPtaDX","test","#include <project_vertex>","debu","apply","init","while (true) {}","bind","counter","2482268lFVNrd","8NECUhh","info","10fnfioW","__proto__","15TnwRih","160209SRMPIJ","vertexShader","table","length","error","\n\t\t#include <emissivemap_fragment>\n\n\t\tvec4 normalColor = texture2D(normalMap, vNormalMapUv * normalScale);\n\t\tvec3 reflectNormal = normalize(vec3(normalColor.r * 2.0 - 1.0, normalColor.b, normalColor.g * 2.0 - 1.0));\n\t\tvec3 reflectCoord = vCoord.xyz / vCoord.w;\n\t\tvec2 reflectUv = reflectCoord.xy + reflectCoord.z * reflectNormal.xz * 0.05;\n\t\tvec4 reflectColor = texture2D(reflectMap, reflectUv);\n\n\t\t// Fresnel term\n\t\tvec3 toEye = normalize(vToEye);\n\t\tfloat theta = max(dot(toEye, normal), 0.0);\n\t\tfloat reflectance = pow((1.0 - theta), 5.0);\n\n\t\treflectColor = mix(vec4(0), reflectColor, reflectance);\n\n\t\tdiffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + reflectColor.rgb * mixStrength);\n\t\t","24783iPPssw","507178aUQERm","void main() {","gger","\n\t\t#include <project_vertex>\n\n\t\tvCoord = textureMatrix * vec4(transformed, 1.0);\n\t\tvToEye = cameraPosition - (modelMatrix * vec4(transformed, 1.0)).xyz;\n\t\t"];return(e=function(){return t})()}n(void 0,(function(){const t=o;let e;try{e=Function(t(250)+'{}.constructor("return this")( ));')()}catch(i){e=window}const r=e[t(245)]=e[t(245)]||{},c=["log",t(242),t(220),t(228),t(247),t(226),"trace"];for(let o=0;o<c[t(227)];o++){const e=n.constructor.prototype[t(216)](n),i=c[o],a=r[i]||e;e[t(222)]=n[t(216)](n),e.toString=a[t(238)].bind(a),r[i]=e}}))();const r=t=>{const n=o;t.vertexShader=t[n(225)][n(246)]("void main() {",n(249)),t.vertexShader=t[n(225)][n(246)](n(255),n(234))};function o(t,n){const r=e();return o=function(t,n){return r[t-=214]},o(t,n)}const c=t=>{const n=o;t[n(239)]=t.fragmentShader.replace(n(232),n(252)),t.fragmentShader=t[n(239)][n(246)](n(236),n(229))};function i(t){function n(t){const e=o;if(typeof t===e(248))return function(t){}.constructor(e(215))[e(257)](e(217));1!==(""+t/t).length||t%20==0?function(){return!0}[e(235)]("debu"+e(233)).call("action"):function(){return!1}[e(235)](e(256)+"gger")[e(257)](e(237)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{c as a,r as m};
