var o="varying vec3 vPosition;\nvoid main(){\n\t\n\tvPosition = position;\n\tcsm_Position=position*vec3(1.);\n}",i="varying vec3 vPosition; \nuniform vec3 uMax;      \nuniform vec3 uMin;      \nuniform float uOpacity;\nuniform float uBorderWidth;\nuniform vec3 uLightColor;\nuniform vec3 uColor;\nuniform float uCircleTime;\nuniform float uTime;\nuniform vec3 uTopColor; \nuniform bool uGradient;\n\nvoid main() {\n  vec3 distColor = uColor;\n\n  \n  float residue = mod(uTime, uCircleTime);\n  float rate = residue / uCircleTime;\n  float lightOffset = rate * (uMax.z - uMin.z);\n\n  if (uMin.z + lightOffset < vPosition.z &&\n      uMin.z + lightOffset + uBorderWidth > vPosition.z) {\n    csm_DiffuseColor = vec4(uLightColor, uOpacity);\n  } else {\n    csm_DiffuseColor = vec4(distColor, uOpacity);\n  }\n\n  \n  if (uGradient) {\n    float rateHeight = (vPosition.z - uMin.z) / (uMax.z - uMin.z);\n    float mixNumber = clamp(rateHeight * 2.3 - 1.5, 0.1, 1.);\n    vec3 outColor = mix(csm_DiffuseColor.xyz, uTopColor, mixNumber);\n    csm_DiffuseColor = vec4(outColor, uOpacity);\n  }\n}";export{o as a,i as b};
