import{_ as t,b as n,T as e,ai as o}from"./three.FyUEtfsR1741658416045.js";import{e as r,a,o as i,f as s}from"./@tresjs.W3PFJhMo1741658416045.js";import"./index.5AAFEuoi1741658416045.js";import{c}from"./simplex-noise.jB2HxhHB1741658416045.js";import{C as l}from"./index.dSiIiYR01741658416045.js";import{d as u,a3 as f,o as p,H as h,N as m,u as v,r as d,f as g,g as x,j as w,aj as y,ak as b,al as _}from"./@vue.NRI7TcgI1741658416045.js";import{_ as A}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.bzJyIrVv1741658416045.js";import"./postprocessing.llR5x4wQ1741658416045.js";import"./@vueuse.5uFvLf9q1741658416045.js";import"./lamina.U2jXj-yN1741658416045.js";import"./glsl-tokenizer.x1OuuCwJ1741658416045.js";import"./@amap.smZgnC9y1741658416045.js";import"./glsl-token-descope.uEt0XvFU1741658416045.js";import"./glsl-token-depth.BknLcenk1741658416045.js";import"./glsl-token-scope.JyeR2yND1741658416045.js";import"./glsl-token-properties.Bpzah7py1741658416045.js";import"./glsl-token-assignments.IkuwchTG1741658416045.js";import"./glsl-token-string.Aw2GIDP91741658416045.js";import"./glsl-token-functions.-wVL5G2T1741658416045.js";import"./object-hash.lsSo12-11741658416045.js";import"./jszip.zlmPIcYY1741658416045.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.UUcimtMW1741658416045.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.KJylVyD-1741658416045.js";import"./three-stdlib.X1LBpfR41741658416045.js";import"./@pmndrs.7A_kisEQ1741658416045.js";import"./utils.yF595mXz1741658416045.js";const M=E;!function(t,n){const e=E,o=I();for(;;)try{if(331112===parseInt(e(503))/1*(parseInt(e(528))/2)+parseInt(e(561))/3*(parseInt(e(505))/4)+parseInt(e(563))/5+-parseInt(e(508))/6*(parseInt(e(535))/7)+-parseInt(e(520))/8+parseInt(e(534))/9*(parseInt(e(494))/10)+-parseInt(e(513))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[E(496)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){z(this,(function(){const t=E,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(530),"i"),o=D(t(566));n[t(549)](o+"chain")&&e[t(549)](o+t(552))?D():o("0")}))()}();const j=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[E(496)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function I(){const t=["#000f00","TresMeshStandardMaterial","counter","Vector4","width","translate","push","action","stretchesF32","lookAt","test","gger","info","input","uniforms","attributes-position","halfRootAngleSinF32","trace","InstancedBufferAttribute","length","debu","TresInstancedBufferGeometry","9OJNYwt","attributes-orientation","1520810yUiGAn","random","cos","init","stateObject","toneMapped","map","value","array","attributes","sin","side","13600GIfaZI","grass","apply","index","orientationsF32","convertSRGBToLinear","constructor","attributes-halfRootAngleSin","set","130205weTMEp","exception","653876KWAQrs","offsetsF32","call","27732AAcmyu","log","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","halfRootAngleCosF32","time","1087636fuiSzC","alphaMap","normalize","__proto__","joints","TresMesh","prototype","4530592xZALcp","bind","console","Vector3","toString","attributes-uv","Color","table","2FKsAkc","geometry","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","position","computeVertexNormals","DoubleSide","504pRpAfO","7PwXXEm","PlaneGeometry","warn","while (true) {}"];return(I=function(){return t})()}j(void 0,(function(){const t=E,n=function(){let t;try{t=Function('return (function() {}.constructor("return this")( ));')()}catch(n){t=window}return t}(),e=n[t(522)]=n[t(522)]||{},o=[t(509),t(537),t(551),"error",t(504),t(527),t(556)];for(let r=0;r<o.length;r++){const n=j[t(500)][t(519)][t(521)](j),a=o[r],i=e[a]||n;n[t(516)]=j[t(521)](j),n[t(524)]=i[t(524)][t(521)](i),e[a]=n}}))();const C=["material"],k=[M(497),M(554),M(525),"attributes-offset",M(562),"attributes-stretch",M(501),"attributes-halfRootAngleCos"],F=[M(529)],S=[M(493)],R=u({__name:M(495),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(o){const i=M;let s,u;const d=([s,u]=f((()=>a({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),s=await s,u(),s),g=o,x=c(Math.random);function w(n,e){const o=E,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,a=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,i=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,s=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(542)])(r,a,i,s)}function y(t,n){var e=2*x(t/50,n/50);return e+=4*x(t/100,n/100),e+=.2*x(t/10,n/10)}const b=function(o,r){const a=E,i=[],s=[],c=[],l=[],u=[];let f=new(t[a(542)]),p=new(t[a(542)]);const h=-.25;for(let e=0;e<o;e++){const m=Math[a(564)]()*r-r/2,v=Math[a(564)]()*r-r/2,d=y(m,v);i.push(m,d,v);let g=Math.PI-Math[a(564)]()*(2*Math.PI);l[a(545)](Math[a(492)](.5*g)),u.push(Math[a(565)](.5*g));let x=new n(0,1,0),b=x.x*Math[a(492)](g/2),_=x.y*Math.sin(g/2),A=x.z*Math.sin(g/2),M=Math.cos(g/2);f[a(502)](b,_,A,M).normalize(),g=.5*Math[a(564)]()+h,x=new n(1,0,0),b=x.x*Math[a(492)](g/2),_=x.y*Math[a(492)](g/2),A=x.z*Math[a(492)](g/2),M=Math[a(565)](g/2),p[a(502)](b,_,A,M).normalize(),f=w(f,p),g=.5*Math[a(564)]()+h,x=new(t[a(523)])(0,0,1),b=x.x*Math.sin(g/2),_=x.y*Math[a(492)](g/2),A=x.z*Math[a(492)](g/2),M=Math.cos(g/2),p.set(b,_,A,M)[a(515)](),f=w(f,p),s[a(545)](f.x,f.y,f.z,f.w),e<o/3?c[a(545)](1.8*Math[a(564)]()):c.push(Math[a(564)]())}return{offsetsF32:new(t[a(557)])(new Float32Array(i),3),orientationsF32:new e(new Float32Array(s),4),stretchesF32:new(t[a(557)])(new Float32Array(c),1),halfRootAngleCosF32:new(t[a(557)])(new Float32Array(u),1),halfRootAngleSinF32:new(t[a(557)])(new Float32Array(l),1)}}(g.instances,g[i(543)]),_=new(t[i(536)])(g.bW,g.bH,1,g[i(517)])[i(544)](0,g.bH/2,0),A=new(t[i(536)])(g[i(543)],g[i(543)],32,32);A[i(548)](new(t[i(523)])(0,1,0));const z=A.attributes[i(531)];for(let t=0;t<z[i(490)].length;t+=3)z.array[t+1]=y(z.array[t],z[i(490)][t+2]);A[i(491)][i(531)].needsUpdate=!0,A[i(532)]();const j=new(l({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(t[i(526)])(.3,.9,0)[i(499)](),bottomColor:new(t[i(526)])(0,.2,0)[i(499)]()},i(510),"\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }",(n=>{const e=i;n[e(493)]=t[e(533)]})));j[i(569)]=d[i(569)],j[i(514)]=d[i(514)],j[i(568)]=!1;const{onLoop:I}=r();return I((({elapsed:t})=>{const n=i;j[n(553)][n(512)][n(489)]=t/4})),(n,e)=>{const o=i;return p(),h("TresGroup",null,[m(o(518),{material:v(j)},[m(o(560),{index:v(_)[o(497)],"attributes-position":v(_).attributes[o(531)],"attributes-uv":v(_)[o(491)].uv,"attributes-offset":v(b)[o(506)],"attributes-orientation":v(b)[o(498)],"attributes-stretch":v(b)[o(547)],"attributes-halfRootAngleSin":v(b)[o(555)],"attributes-halfRootAngleCos":v(b)[o(511)]},null,8,k)],8,C),m(o(518),{position:[0,0,0],geometry:v(A)},[m(o(540),{color:o(539),side:t[o(533)]},null,8,S)],8,F)])}}});function E(t,n){const e=I();return(E=function(t,n){return e[t-=489]})(t,n)}function D(t){function n(t){const e=E;if("string"==typeof t)return function(t){}[e(500)](e(538))[e(496)](e(541));1!==(""+t/t)[e(558)]||t%20==0?function(){return!0}[e(500)](e(559)+e(550))[e(507)](e(546)):function(){return!1}[e(500)](e(559)+e(550))[e(496)](e(567)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const T=U;!function(t,n){const e=U,o=H();for(;;)try{if(651117===parseInt(e(250))/1*(-parseInt(e(257))/2)+-parseInt(e(285))/3+-parseInt(e(267))/4+parseInt(e(259))/5*(-parseInt(e(263))/6)+-parseInt(e(284))/7*(parseInt(e(273))/8)+-parseInt(e(268))/9+parseInt(e(258))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){O(this,(function(){const t=U,n=new RegExp(t(256)),e=new RegExp(t(282),"i"),o=B(t(280));n[t(254)](o+t(278))&&e.test(o+"input")?B():o("0")}))()}();const P=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[U(287)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function H(){const t=["error","prototype","2906060owEEhp","680274tFIHAA","stateObject","info","return (function() ","gger","1494104frTEuY","action","console","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","bind","chain","string","init",'{}.constructor("return this")( )',"\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","constructor","42MYYozg","447339gQEnmn","grass","apply","__proto__","log","799018svWbyY","trace","length","toString","test","debu","function *\\( *\\)","2XXTUBL","36929000ZMVCus","8635UWaWZw","warn","call","counter","594Ueobtl","table"];return(H=function(){return t})()}P(void 0,(function(){const t=U,n=function(){const t=U;let n;try{n=Function(t(271)+t(281)+");")()}catch(e){n=window}return n}(),e=n[t(275)]=n.console||{},o=[t(249),t(260),t(270),t(265),"exception",t(264),t(251)];for(let r=0;r<o[t(252)];r++){const n=P.constructor[t(266)][t(277)](P),a=o[r],i=e[a]||n;n[t(248)]=P[t(277)](P),n[t(253)]=i[t(253)][t(277)](i),e[a]=n}}))();const L=u({__name:T(286),setup(t){const n=d({alpha:!0,toneMapping:o,windowSize:!0,clearColor:6710886}),e=d({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=U;return p(),g(v(s),y(b(n)),{default:x((()=>[o[0]||(o[0]=m("TresPerspectiveCamera",{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),w(v(i),y(b(e)),null,16),(p(),g(_,null,{default:x((()=>[w(R)])),_:1})),(p(),g(_,null,{default:x((()=>[w(v(A),{texture:r(276)})])),_:1}))])),_:1},16)}}});function U(t,n){const e=H();return(U=function(t,n){return e[t-=248]})(t,n)}function B(t){function n(t){const e=U;if(typeof t===e(279))return function(t){}[e(283)]("while (true) {}")[e(287)](e(262));1!==(""+t/t)[e(252)]||t%20==0?function(){return!0}[e(283)](e(255)+e(272))[e(261)](e(274)):function(){return!1}.constructor("debu"+e(272))[e(287)](e(269)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{L as default};
