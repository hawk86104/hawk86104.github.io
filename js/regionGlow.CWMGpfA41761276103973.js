import{P as o}from"./tweakpane.CqZAnw7f1761276103973.js";import{b as t}from"./pagesShow.vue_vue_type_script_setup_true_lang.CD6zj33S1761276103973.js";import{bF as e,q as r,k as s,a6 as i,bw as n,o as a,cF as p,cG as l,cH as m}from"./three.Bhn4-0ry1761276103973.js";import{r as c}from"./utils.CI7v9zAv1761276103973.js";import{d as v,a3 as u,G as j,o as d,I as h,u as f,r as g,b as w,e as x,h as b}from"./@vue.CKlgtJke1761276103973.js";import"./@tresjs.B_KjVy0E1761276103973.js";import"./postprocessing.CeTFUAN_1761276103973.js";import"./@vueuse.wtfleElW1761276103973.js";import"./Resource.CSaxGSPI1761276103973.js";import"./three-custom-shader-material.DSmV-ApW1761276103973.js";import"./buildingsCustomShaderMaterial.DyBo--wu1761276103973.js";import"./@fesjs.DnM7nINA1761276103973.js";import"./vue-router.BFHj2xRz1761276103973.js";import"./lodash-es.DWe8oqPO1761276103973.js";import"./pinia.C8YT0eOZ1761276103973.js";import"./@qlin.y-0Z8WnK1761276103973.js";import"./@babel.BPq7uOAK1761276103973.js";import"./@floating-ui.Bhq4ibgf1761276103973.js";import"./@juggle.Vc7cP4_P1761276103973.js";import"./vanilla.esm.5.5.0.CRlEbOMK1761276103973.js";import"./object-hash.1qNYTrnD1761276103973.js";import"./@amap.fjyZdsU91761276103973.js";import"./jszip.y_yjJ09m1761276103973.js";import"./useTexture.B3KXI5F11761276103973.js";import"./three-mesh-bvh.BX5J_Zhe1761276103973.js";const _=["object","rotation-x"],y=["object","rotation-x"],S=v({__name:"regionGlow",props:{positionSrc:{default:[[0,0],[1,1]]},color:{default:"#ffff00"}},setup(o){const t=o,v=new e;t.positionSrc.forEach((o,t)=>{0===t?v.moveTo(o[0],o[1]):v.lineTo(o[0],o[1])});const g=new r({vertexShader:"\n    varying vec2 vUv;\n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  ",fragmentShader:"\n    varying vec2 vUv;\n\t\tuniform vec3 color;\n    void main() {\n\t\t\t// 计算距离四条边的最小距离\n        float distance = max(max(vUv.x, -vUv.x), max(vUv.y, -vUv.y));\n\n        // 将距离映射到透明度（从边缘到中心逐渐变透明）\n        float alpha = smoothstep(0.1, 0.9, distance*1.1);\n\n        // 设置最终颜色和透明度\n        gl_FragColor = vec4(color, alpha);\n    }\n  ",transparent:!0,side:i,depthWrite:!1,depthTest:!0,uniforms:{color:{type:"uvs",value:new s(t.color)}}});let w=new n(v);c(w,!0);const x=new a(w,g),b=v.getPoints(),S=new p;S.setPositions(b.flatMap(o=>[o.x,o.y,0]));var U=new l({color:new s(t.color),linewidth:2});const G=new m(S,U);return u(()=>{g.uniforms.color.value=new s(t.color),U.color=new s(t.color)}),(o,t)=>(d(),j("TresGroup",null,[h("primitive",{object:f(x),renderOrder:9999,"rotation-x":Math.PI/2},null,8,_),h("primitive",{object:f(G),renderOrder:9999,"rotation-x":Math.PI/2},null,8,y)]))}}),U=v({__name:"regionGlow",setup(e){const r=g({color:"#00ffdd",height:26}),s=new o({title:"区域边界发光",expanded:!0});return s.addBinding(r,"color",{label:"颜色"}),s.addBinding(r,"height",{label:"高度",min:0,max:80,step:1}),(o,e)=>(d(),w(t,{ref:"pagesShowRef"},{ability:x(()=>[b(S,{"position-y":26,positionSrc:[[-292,4.27*40],[-296,402],[-196,401.2],[-196,178.4],[-292,4.27*40]]}),b(S,{"position-y":r.height,color:r.color,positionSrc:[[10.8,40*-1.19],[12.8,-220],[-303.6,-236],[-304,-52],[10.8,40*-1.19]]},null,8,["position-y","color"]),b(S,{position:[500,86,300],color:"#0054ff",positionSrc:[[10.8,40*-1.19],[12.8,-220],[-303.6,-236],[-343.6,-156],[-304,-52],[-104,52],[104,-52],[10.8,40*-1.19]]})]),_:1},512))}});export{U as default};
