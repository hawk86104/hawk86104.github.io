import{e,h as a,o as t}from"./@tresjs.zc7faK4J1743660816268.js";import"./index.wgv4wbeG1743660816268.js";import"./index.05kvU0z71743660816268.js";import{ah as n,C as s,ab as i,T as r,ai as l}from"./three.2wx8FU0g1743660816268.js";import{z as o}from"./three-custom-shader-material.uMc5A1EX1743660816268.js";import{p as g}from"./gl-noise.u0wef8ro1743660816268.js";import{d as h,b as p,a2 as u,w as m,o as v,H as c,N as f,j as d,u as b,r as M,e as _,f as w,g as j,m as x,aj as C,ak as T,al as y}from"./@vue.B5PFBfKs1743660816268.js";import{P as B}from"./tweakpane.ivGeiIdz1743660816268.js";import{_ as z}from"./gridPlusCom.vue_vue_type_script_setup_true_lang.8WhWJfPe1743660816268.js";import{_ as H}from"./component.vue_vue_type_script_setup_true_lang.w87a8ogA1743660816268.js";import"./postprocessing.ApTwx-211743660816268.js";import"./@vueuse.jtbb8I7w1743660816268.js";import"./object-hash.6N1Uf8kA1743660816268.js";import"./@amap.c8pGcSIC1743660816268.js";import"./jszip.rGR265Ak1743660816268.js";import"./all.three.q3DPAGr01743660816268.js";import"./oimophysics.WhCxc1Ho1743660816268.js";import"./reflectorDiffuse.5zy0dW_U1743660816268.js";import"./vite-plugin-qiankun.DT7p3NC_1743660816268.js";import"./three-stdlib.rtqrSiFZ1743660816268.js";import"./whiteFloor.45lmiqp31743660816268.js";import"./@pmndrs.z8R6f5wQ1743660816268.js";const S=["rotation-x"],G=["args"],P=h({__name:"customWaterMesh",props:{height:{default:.2},Flatshading:{type:Boolean,default:!1},waterColor:{default:"#52a7f7"},waterHighlight:{default:"#b3ffff"},brightness:{default:1},baseMaterial:{default:n}},setup(t){const l=t,h=p(null),M={vertex:"\nuniform float uTime;\nuniform float uHeight;\nvarying float vHeight;\n\nvec3 displace(vec3 point) {\n  vec3 p = point;\n  p.y += uTime * 2.0;\n  gln_tFBMOpts fbmOpts = gln_tFBMOpts(1.0, 0.4, 2.3, 0.4, 1.0, 5, false, false);\n  gln_tGerstnerWaveOpts A = gln_tGerstnerWaveOpts(vec2(0.0, -1.0), 0.5, 2.0);\n  gln_tGerstnerWaveOpts B = gln_tGerstnerWaveOpts(vec2(0.0, 1.0), 0.25, 4.0);\n  gln_tGerstnerWaveOpts C = gln_tGerstnerWaveOpts(vec2(1.0, 1.0), 0.15, 6.0);\n  gln_tGerstnerWaveOpts D = gln_tGerstnerWaveOpts(vec2(1.0, 1.0), 0.4, 2.0);\n  vec3 n = vec3(0.0);\n  if(p.z >= uHeight / 2.0) {\n      n.z += gln_normalize(gln_pfbm(p.xy + (uTime * 0.5), fbmOpts));\n      n += gln_GerstnerWave(p, A, uTime).xzy;\n      n += gln_GerstnerWave(p, B, uTime).xzy * 0.5;\n      n += gln_GerstnerWave(p, C, uTime).xzy * 0.25;\n      n += gln_GerstnerWave(p, D, uTime).xzy * 0.2;\n  }\n  vHeight = n.z;\n  return point + n;\n}\n\nvec3 orthogonal(vec3 v) {\n  return normalize(abs(v.x) > abs(v.z) ? vec3(-v.y, v.x, 0.0)\n  : vec3(0.0, -v.z, v.y));\n}\n\nvec3 recalcNormals(vec3 newPos) {\n  float offset = 0.001;\n  vec3 tangent = orthogonal(normal);\n  vec3 bitangent = normalize(cross(normal, tangent));\n  vec3 neighbour1 = position + tangent * offset;\n  vec3 neighbour2 = position + bitangent * offset;\n\n  vec3 displacedNeighbour1 = displace(neighbour1);\n  vec3 displacedNeighbour2 = displace(neighbour2);\n\n  vec3 displacedTangent = displacedNeighbour1 - newPos;\n  vec3 displacedBitangent = displacedNeighbour2 - newPos;\n\n  return normalize(cross(displacedTangent, displacedBitangent));\n}\n\nvoid main() {\n  csm_Position = displace(position);\n  csm_Normal = recalcNormals(csm_Position);\n}\n\t",fragment:"\nvarying float vHeight;\nuniform vec3 waterColor;\nuniform vec3 waterHighlight;\nuniform float offset;\nuniform float contrast;\nuniform float brightness;\n\nvec3 calcColor() {\n  float mask = (pow(vHeight, 2.) - offset) * contrast;\n  vec3 diffuseColor = mix(waterColor, waterHighlight, mask);\n  diffuseColor *= brightness;\n  return diffuseColor;\n}\n\nvoid main() {\n  csm_DiffuseColor = vec4(calcColor(), 1.0);\n}\n\t"},_={uTime:{value:0},waterColor:{value:new s(l.waterColor).convertLinearToSRGB()},waterHighlight:{value:new s(l.waterHighlight).convertLinearToSRGB()},offset:{value:.4},contrast:{value:3.1},brightness:{value:l.brightness},uHeight:{value:l.height}},{onLoop:w}=e();return w((({elapsed:e})=>{_.uTime.value=-e/5})),u((()=>{l.height&&(_.uHeight.value=l.height),l.waterColor&&(_.waterColor.value=new s(l.waterColor).convertLinearToSRGB()),l.waterHighlight&&(_.waterHighlight.value=new s(l.waterHighlight).convertLinearToSRGB()),l.brightness&&(_.brightness.value=l.brightness)})),m((()=>l.Flatshading),(e=>{h.value.material.needsUpdate=!0})),m((()=>l.baseMaterial),(e=>{const a=new o({baseMaterial:r[e],vertexShader:g(M.vertex),fragmentShader:M.fragment,uniforms:_,flatShading:l.Flatshading,side:i,roughness:.2,metalness:.1,silent:!0});h.value.material.dispose(),h.value.material=a})),(e,t)=>(v(),c("TresMesh",{ref_key:"tmRef",ref:h,"rotation-x":-Math.PI/2},[f("TresBoxGeometry",{args:[5,5,e.height,64,64,1]},null,8,G),d(b(a),{baseMaterial:n,vertexShader:b(g)(M.vertex),fragmentShader:M.fragment,uniforms:_,side:i,roughness:.2,metalness:.1,flatShading:e.Flatshading,silent:""},null,8,["baseMaterial","vertexShader","fragmentShader","side","flatShading"])],8,S))}}),W=h({__name:"customWater",setup(e){const a=M({alpha:!0,toneMapping:l,windowSize:!0,clearColor:10066329}),n=M({enableDamping:!0,autoRotate:!1}),s=M({cellSize:.6,cellThickness:1.1,cellColor:"#627179",sectionColor:"#3a78a2",sectionSize:2.4,sectionThickness:1.8,fadeDistance:27,fadeStrength:.76,followCamera:!1,infiniteGrid:!0}),i=M({height:.2,Flatshading:!1,waterColor:"#52a7f7",waterHighlight:"#b3ffff",brightness:1,baseMaterial:"MeshPhysicalMaterial"}),r=new B;return r.addBinding(i,"height",{label:"高度",min:.1,max:5,step:.1}),r.addBinding(i,"waterColor",{label:"水体颜色"}),r.addBinding(i,"waterHighlight",{label:"浪头颜色"}),r.addBinding(i,"brightness",{label:"亮度",min:0,max:1,step:.01}),r.addBinding(i,"Flatshading",{label:"Flatshading"}),r.addBlade({view:"list",label:"材质",options:[{text:"MeshPhysicalMaterial",value:"MeshPhysicalMaterial"},{text:"MeshBasicMaterial",value:"MeshBasicMaterial"},{text:"MeshNormalMaterial",value:"MeshNormalMaterial"},{text:"MeshStandardMaterial",value:"MeshStandardMaterial"},{text:"MeshPhongMaterial",value:"MeshPhongMaterial"},{text:"MeshToonMaterial",value:"MeshToonMaterial"},{text:"MeshLambertMaterial",value:"MeshLambertMaterial"},{text:"MeshDepthMaterial",value:"MeshDepthMaterial"}],value:i.baseMaterial}),r.on("change",(e=>{"材质"===e.target.label&&(i.baseMaterial=e.value)})),(e,r)=>{const l=_("TresCanvas");return v(),w(l,x(a,{"window-size":""}),{default:j((()=>[r[0]||(r[0]=f("TresPerspectiveCamera",{position:[5,5,5],fov:45,near:.1,far:1e3},null,-1)),d(b(t),C(T(n)),null,16),r[1]||(r[1]=f("TresAmbientLight",{intensity:.5},null,-1)),r[2]||(r[2]=f("TresDirectionalLight",{position:[15,15,15],intensity:1},null,-1)),d(P,C(T(i)),null,16),d(b(z),x({args:[3,3]},s,{position:[0,-.5,0]}),null,16),(v(),w(y,null,{default:j((()=>[d(b(H),{files:["pos-x.jpg","neg-x.jpg","pos-y.jpg","neg-y.jpg","pos-z.jpg","neg-z.jpg"],path:"https://opensource.cdn.icegl.cn/images/skyBox/6jpg/"},null,8,["path"])])),_:1}))])),_:1},16)}}});export{W as default};
