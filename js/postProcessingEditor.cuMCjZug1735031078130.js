import{m as t,e as n,b as e,U as o}from"./@tresjs.dTM0HLnZ1735031078130.js";import{_ as r,V as s,as as a,s as i,t as c,bg as l,n as u,b6 as v,c3 as f,bn as p}from"./three.bc6MLGU_1735031078130.js";import{P as d}from"./tweakpane.yHWGBmom1735031078130.js";import{d as m,a6 as g,e as x,o as h,f as y,g as b,J as I,j as _,u as S,aj as U,ak as w,al as P,m as D}from"./@vue.-THQH3GC1735031078130.js";import{_ as E}from"./@fesjs.I05ciYa-1735031078130.js";import"./@vueuse.COyzlgw71735031078130.js";import"./vue-router.v9AQvngO1735031078130.js";import"./lodash-es.kYt-_xTG1735031078130.js";import"./@qlin.yHhFDldE1735031078130.js";import"./pinia.67PZ8qep1735031078130.js";import"./vue-demi.C4xddsk91735031078130.js";import"./@floating-ui.BPbuo5Gx1735031078130.js";import"./@juggle.7yjBMqoW1735031078130.js";!function(t,n){const e=C,o=z();for(;;)try{if(904917===-parseInt(e(545))/1*(-parseInt(e(517))/2)+-parseInt(e(530))/3+-parseInt(e(550))/4+parseInt(e(505))/5*(-parseInt(e(526))/6)+-parseInt(e(539))/7+-parseInt(e(544))/8+parseInt(e(546))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(543)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){L(this,(function(){const t=C,n=new RegExp(t(537)),e=new RegExp(t(506),"i"),o=F(t(542));n[t(504)](o+t(523))&&e[t(504)](o+t(490))?F():o("0")}))()}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(543)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();A(void 0,(function(){const t=C,n=function(){const t=C;let n;try{n=Function(t(515)+t(502)+");")()}catch(e){n=window}return n}(),e=n[t(527)]=n.console||{},o=[t(484),t(534),t(493),t(487),t(500),t(498),"trace"];for(let r=0;r<o.length;r++){const n=A[t(548)][t(509)].bind(A),s=o[r],a=e[s]||n;n.__proto__=A[t(519)](A),n[t(547)]=a[t(547)][t(519)](a),e[s]=n}}))();function M(t,n,e){const o=C;if(typeof t!==o(516)||null===t)return t;const r=Array[o(540)](t)?[]:{};for(const s in t)t[o(513)](s)&&(r[s]=M(t[s])),s==n&&(r[n]=e);return r}function z(){const t=["send","warn","while (true) {}","ShaderMaterial","function *\\( *\\)","string","10651809XqzgOF","isArray","v3v","init","apply","13938616uDQLjl","92611FfAFkJ","58394421EQfwlQ","toString","constructor","Vector3","5013504FmCOIF","name","log","type","\" couldn't be loaded.","error","length","lastIndex","input","Matrix4","debu","info","random","open","gger","Matrix2","table","value","exception","Texture",'{}.constructor("return this")( )',"Vector2","test","5wyzDQz","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","onabort","exec","prototype",'Shader "',"onload","action","hasOwnProperty","replace","return (function() ","object","6rkmLUR","Vector4","bind","responseText","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","WagnerLoadShaderException","chain",'" load was aborted.',"index","637464Gghrcb","console","get","message","3712653WEMLna","Matrix3","now"];return(z=function(){return t})()}function C(t,n){const e=z();return(C=function(t,n){return e[t-=484]})(t,n)}function F(t){function n(t){const e=C;if(typeof t===e(538))return function(t){}[e(548)](e(535)).apply("counter");1!==(""+t/t)[e(488)]||t%20==0?function(){return!0}[e(548)](e(492)+e(496)).call(e(512)):function(){return!1}[e(548)](e(492)+e(496))[e(543)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const N=R;!function(t,n){const e=R,o=V();for(;;)try{if(130927===-parseInt(e(425))/1*(parseInt(e(413))/2)+parseInt(e(454))/3+-parseInt(e(493))/4+parseInt(e(517))/5*(parseInt(e(461))/6)+-parseInt(e(474))/7+parseInt(e(449))/8+-parseInt(e(443))/9*(parseInt(e(501))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const T=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(486)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){T(this,(function(){const t=R,n=new RegExp(t(513)),e=new RegExp(t(485),"i"),o=j(t(472));n[t(510)](o+t(452))&&e[t(510)](o+"input")?j():o("0")}))()}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function R(t,n){const e=V();return(R=function(t,n){return e[t-=410]})(t,n)}G(void 0,(function(){const t=R,n=function(){const t=R;let n;try{n=Function(t(468)+t(489)+");")()}catch(e){n=window}return n}(),e=n[t(470)]=n[t(470)]||{},o=[t(410),t(467),t(508),t(476),"exception",t(445),t(453)];for(let r=0;r<o[t(516)];r++){const n=G[t(479)][t(491)].bind(G),s=o[r],a=e[s]||n;n[t(482)]=G[t(432)](G),n.toString=a[t(512)][t(432)](a),e[s]=n}}))();class B{constructor(t,n){const e=R;this[e(477)]=1,this.height=1,this.settings=n||{},this[e(475)]=this.settings[e(475)]||!1,this[e(511)]=t,this[e(462)]=this[e(458)](this.settings),this[e(515)]=new(r[e(415)]),this[e(433)]=new i(new c(1,1),new(r[e(466)])),this[e(515)][e(455)](this[e(433)]),this[e(411)]=new(r[e(447)])(1,1,1,1,-1e4,1e4),this[e(460)]=new(r[e(414)])(1,1,{minFilter:void 0!==this.settings[e(469)]?this[e(514)][e(469)]:r[e(419)],magFilter:void 0!==this.settings[e(484)]?this[e(514)][e(484)]:r[e(419)],wrapS:void 0!==this[e(514)][e(465)]?this[e(514)][e(465)]:r[e(478)],wrapT:void 0!==this[e(514)][e(435)]?this[e(514)][e(435)]:l,format:this.useRGBA?r[e(437)]:r[e(422)],type:void 0!==this.settings[e(473)]?this.settings[e(473)]:r[e(502)],stencilBuffer:void 0===this[e(514)].stencilBuffer||this.settings[e(488)]}),this[e(444)]=this[e(460)][e(483)](),this[e(503)]=Date[e(492)](),this[e(429)]={},this[e(463)]={passItems:[],passes:[]}}[N(441)](t,n,e,o){const r=N;this[r(456)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(451)]};this[r(463)][r(496)].push(s)}[N(434)](t){const n=N;for(let e=this[n(463)][n(496)].length-1;e>=0;e--)this[n(463)][n(496)][e][n(440)]===parseInt(t)&&this[n(463)].passItems[n(464)](e,1);console[n(410)](this[n(463)][n(496)])}CopyPass(){const t=N;this[t(450)][t(446)](this);return this[t(456)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}loadShadervf(t){const n=N,e=n(417);return this[n(451)]=function(t,n){const e=C,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,i=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,c={sampler2D:{type:"t",value:()=>new(r[C(501)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[C(503)])},vec3:{type:"v3",value:()=>new(r[C(549)])},vec4:{type:"v4",value:()=>new(r[C(518)])},bvec2:{type:"v2",value:()=>new(r[C(503)])},bvec3:{type:"v3",value:()=>new s},bvec4:{type:"v4",value:()=>new(r[C(518)])},ivec2:{type:"v2",value:()=>new(r[C(503)])},ivec3:{type:"v3",value:()=>new(r[C(549)])},ivec4:{type:"v4",value:()=>new a},mat2:{type:"v2",value:()=>new(r[C(497)])},mat3:{type:"v3",value:()=>new(r[C(531)])},mat4:{type:"v4",value:()=>new(r[C(491)])}},l={float:{type:"fv",value:()=>[]},vec3:{type:e(541),value:()=>[]}};let u;const v={resolution:{type:"v2",value:new(r[e(503)])(1,1),default:!0},time:{type:"f",value:Date[e(532)](),default:!0},tInput:{type:"t",value:new(r[e(501)]),default:!0}};let f,p;for(;null!==(u=o[e(508)](n));)u[e(525)]===o[e(489)]&&o[e(489)]++,f=u[1],p=u[2],v[p]={type:c[f].type,value:c[f][e(499)]()};for(;null!==(u=i[e(508)](n));)u[e(525)]===o.lastIndex&&o[e(489)]++,f=u[1],p=u[2],u[3],v[p]={type:l[f][e(485)],value:l[f][e(499)]()};return new(r[e(536)])({uniforms:v,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this.shader}Pass(t){this.shader=null,this.params={}}[N(495)](){const t=N;this[t(497)]=this[t(460)],this.write=this[t(444)]}[N(509)](t,n){const e=N,o=window[e(442)],r=window[e(426)];t[e(412)](1*o,1*r),n[e(505)][e(448)](70,o/r,n[e(424)],n[e(490)]),this[e(412)](o,r);return this[e(431)](o,r,!0)}[N(412)](t,n){const e=N;this.width=t,this[e(500)]=n,this[e(411)].projectionMatrix[e(436)](t/-2,t/2,n/2,n/-2,this[e(411)][e(424)],this[e(411)].far),this[e(433)][e(487)][e(494)](t,n,1),this.front.setSize(t,n),this[e(444)].setSize(t,n)}[N(431)](t,n,e){const o=N;return new(r[o(414)])(t,n,{minFilter:r[o(419)],magFilter:u,format:e?v:r[o(422)]})}[N(471)](t,n,e,o){const r=N;this[r(511)][r(459)](this[r(481)]),this[r(511)].render(t,n),o||this.swapBuffers()}[N(416)](){const t=N,n=this[t(481)];this[t(481)]=this.read,this[t(497)]=n}[N(427)](){const t=N;for(let n=0;n<this.Stack[t(496)][t(516)];n++){const e=this[t(463)][t(496)][n][t(451)],o=this.Stack[t(496)][n].params;if(this[t(511)][t(459)](this[t(481)]),e instanceof r[t(499)]){this.quad.material=e,this.quad[t(438)][t(423)].tInput[t(480)]=this.read.texture,this.quad[t(438)][t(423)].resolution[t(480)][t(494)](this[t(477)],this.height),this[t(433)][t(438)][t(423)][t(430)].value=.001*(Date[t(492)]()-this[t(503)]);for(const n in o)this[t(433)][t(438)].uniforms[n][t(480)]=o[n];this.renderer[t(471)](this[t(515)],this[t(411)]),this[t(416)]()}}}[N(418)](t,n){const e=N;this.renderer.setRenderTarget(null),this[e(433)][e(438)]=this[e(462)],this[e(433)][e(438)].uniforms[e(457)][e(480)]=this[e(497)][e(507)],this.quad[e(438)][e(423)][e(421)][e(480)].set(this[e(477)],this[e(500)]),this[e(511)].render(this.scene,this[e(411)])}}function j(t){function n(t){const e=R;if(typeof t===e(420))return function(t){}[e(479)](e(439)).apply("counter");1!==(""+t/t).length||t%20==0?function(){return!0}.constructor(e(506)+e(504)).call(e(498)):function(){return!1}.constructor(e(506)+e(504))[e(486)](e(428)),n(++t)}try{if(t)return n;n(0)}catch(e){}}function V(){const t=["MeshBasicMaterial","warn","return (function() ","minFilter","console","render","init","type","1119937KSoAWT","useRGBA","error","width","ClampToEdgeWrapping","constructor","value","write","__proto__","clone","magFilter","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","apply","scale","stencilBuffer",'{}.constructor("return this")( )',"far","prototype","now","917000OFTszB","set","Reset","passItems","read","action","ShaderMaterial","height","1223220XWGJhh","UnsignedByteType","startTime","gger","projectionMatrix","debu","texture","info","onWindowResize","test","renderer","toString","function *\\( *\\)","settings","scene","length","5hHHIWe","log","camera","setSize","13834oFhqgV","WebGLRenderTarget","Scene","swapBuffers","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","toScreen","LinearFilter","string","resolution","RGBFormat","uniforms","near","1BqmRWU","innerHeight","pass","stateObject","passes","time","getOfflineTexture","bind","quad","removePass","wrapT","makeOrthographic","RGBAFormat","material","while (true) {}","uuid","addPass","innerWidth","9pCmsdD","back","table","call","OrthographicCamera","makePerspective","2089328IImOaP","Pass","shader","chain","trace","632412AtUYWm","add","loadShadervf","tInput","CopyPass","setRenderTarget","front","1064622yxlkCo","copyPass","Stack","splice","wrapS"];return(V=function(){return t})()}const O="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}";!function(t,n){const e=W,o=q();for(;;)try{if(371236===-parseInt(e(428))/1+-parseInt(e(429))/2+-parseInt(e(462))/3+parseInt(e(436))/4+-parseInt(e(391))/5*(parseInt(e(456))/6)+parseInt(e(403))/7*(parseInt(e(458))/8)+parseInt(e(467))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[W(422)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){H(this,(function(){const t=W,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(395),"i"),o=X("init");n[t(433)](o+t(465))&&e.test(o+t(435))?X():o("0")}))()}();const k=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[W(422)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function W(t,n){const e=q();return(W=function(t,n){return e[t-=391]})(t,n)}function q(){const t=["BoxGeometry","214839UoPium","SEPIAPass","values","chain","TOONPass","8253189TKbfpJ","debu","65zuhLhO","CGAPass","CIRCULARPass","list","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","addFolder","addBlade","移除~","InvertPass","warn","castShadow","constructor","21vzFgXh","bind","table","target","plugins/postProcessing/image/1324.jpg","Mesh","error","mergeGeometries","toString","split","random","change","label","addButton",'{}.constructor("return this")( )',"RGBPass","click","material","DOTPass","apply","Vector2","Reset","prototype","counter","exception","115834ELZYHH","1406136EqGPCo","FXAAPass","map","receiveShadow","test","后处理类型","input","1468208YQaQmV","onWindowResize","POISSONPass","action","BOXBLURPass","dispose","value","DENOISEPass","keys","title","plugins/postProcessing/image/1324-normal.jpg","gger","length","VIGNETTE2Pass","string","pass","FREICHENPass","autoClearColor","BufferGeometry","call","109974PbUSBj","新增通道","575880EVoGJM","log","while (true) {}"];return(q=function(){return t})()}k(void 0,(function(){const t=W;let n;try{n=Function("return (function() "+t(417)+");")()}catch(r){n=window}const e=n.console=n.console||{},o=[t(459),t(400),"info",t(409),t(427),t(405),"trace"];for(let s=0;s<o.length;s++){const n=k[t(402)][t(425)][t(404)](k),r=o[s],a=e[r]||n;n.__proto__=k.bind(k),n[t(411)]=a[t(411)][t(404)](a),e[r]=n}}))();function X(t){function n(t){const e=W;if(typeof t===e(450))return function(t){}[e(402)](e(460))[e(422)](e(426));1!==(""+t/t)[e(448)]||t%20==0?function(){return!0}.constructor(e(468)+e(447))[e(455)](e(439)):function(){return!1}[e(402)](e(468)+e(447)).apply("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const Z=E(m({__name:"postProcessing",async setup(o){const s=W;let a,i;const{camera:c,renderer:l,scene:u,sizes:v}=t();for(var m=new(r[s(454)]),x=[],h=0;h<100;h++){var y=new(r[s(461)])(100,100,100);y.translate(1500*Math.random(),1500*Math[s(413)](),1500*Math[s(413)]()),x.push(y)}m=f[s(410)](x);const b=([a,i]=g((()=>e({map:s(407)}))),a=await a,i(),a),I=([a,i]=g((()=>e({map:s(446)}))),a=await a,i(),a);var _=new p({map:b[s(431)],normalMap:I.map,normalScale:new(r[s(423)])(.8,-.8),shininess:100}),S=new(r[s(408)])(m,_);S[s(401)]=!0,S[s(432)]=!0,u[s(442)].add(S);const U=new B(l[s(442)],{useRGBA:!0}),w=new d;let P=null,D=[{text:s(399),value:{InvertPass:O}},{text:s(430),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:s(463),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:"SNOISEPass",value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:s(440),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:s(443),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:s(392),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:I.map}}},{text:"SOBELPass",value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:s(418),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:s(421),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(393),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:s(438),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:"VIGNETTE1Pass",value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(449),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:s(452),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:s(466),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],E=s(399),L=O,A=null;w[s(397)]({view:s(394),label:s(434),options:D,value:""}).on(s(414),(t=>{P=t[s(442)]}));const z=w[s(416)]({title:"新增",label:s(457)});let C=0;z.on("click",(t=>{const n=s;E=Object[n(444)](P)[0],L=Object.values(P)[0],A=Object[n(464)](P)[1];let e=C++,o=w[n(396)]({title:E});for(const s in A){let t=A[s];o[n(397)]({view:"text",label:s,parse:t=>String(t),value:t})}o[n(416)]({title:n(398)+e,label:"关闭通道"}).on(n(419),(t=>{const e=n;let o=t[e(406)][e(445)][e(412)]("~")[1];U.removePass(o)})).on("click",(()=>{o[n(441)]()}));let r=M(A,t.target[n(415)],t.value);U.addPass(E,L,r,e)})),U[s(437)](l[s(442)],c[s(442)]);const{onLoop:F}=n();return F((({delta:t})=>{const n=s;S&&(l[n(442)][n(453)]=!0,U[n(424)](),S[n(420)]=_,U.render(u.value,c[n(442)]),U[n(451)](),U.toScreen(u[n(442)],c[n(442)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]);function $(){const t=["action","init","11vixfWT","test","perspectiveCameraRef","length","prototype","constructor","console","counter","bind",'{}.constructor("return this")( )',"postProcessingEditor","exception","20arwSio","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","TresCanvas","table","error","__proto__","call","function *\\( *\\)","apply","while (true) {}","#000000","4971LLRbyx","chain","TresPerspectiveCamera","9454630EVnHoO","log","689ZnNcvr","toString","344uVVNLm","#ffffff","input","1oYgnrw","string","stateObject","TresDirectionalLight","trace","239183qvUSzN","gger","TresAmbientLight","manual","4169457PUrlMP","1031484kZGDvk","3756PCnzvM","292614yCNeGY","debu","1931366xjbJDF","info"];return($=function(){return t})()}const J=Q;function Q(t,n){const e=$();return(Q=function(t,n){return e[t-=299]})(t,n)}!function(t,n){const e=Q,o=$();for(;;)try{if(851962===-parseInt(e(333))/1*(parseInt(e(347))/2)+parseInt(e(323))/3*(-parseInt(e(344))/4)+-parseInt(e(312))/5*(parseInt(e(345))/6)+parseInt(e(338))/7*(-parseInt(e(330))/8)+-parseInt(e(342))/9+parseInt(e(326))/10*(parseInt(e(300))/11)+parseInt(e(343))/12*(parseInt(e(328))/13))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Y=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Q(320)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){Y(this,(function(){const t=Q,n=new RegExp(t(319)),e=new RegExp(t(313),"i"),o=et(t(299));n[t(301)](o+t(324))&&e[t(301)](o+t(332))?et():o("0")}))()}();const K=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Q(320)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();K(void 0,(function(){const t=Q,n=function(){const t=Q;let n;try{n=Function("return (function() "+t(309)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(306)]||{},o=[t(327),"warn",t(348),t(316),t(311),t(315),t(337)];for(let r=0;r<o[t(303)];r++){const n=K[t(305)][t(304)].bind(K),s=o[r],a=e[s]||n;n[t(317)]=K[t(308)](K),n[t(329)]=a.toString[t(308)](a),e[s]=n}}))();const tt={ref:J(302),position:[600,850,-1500],fov:45,near:.1,far:1e5},nt=m({__name:J(310),setup(t){const e=J,r={clearColor:e(322),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(341)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=x(a(314));return h(),y(i,D(r,{"window-size":""}),{default:b((()=>[I(a(325),tt,null,512),_(S(o),U(w(s)),null,16),n[0]||(n[0]=I(a(340),{color:a(331),intensity:2},null,-1)),n[1]||(n[1]=I(a(336),{position:[100,100,0],intensity:2,color:a(331)},null,-1)),(h(),y(P,null,{default:b((()=>[_(Z)])),_:1}))])),_:1},16)}}});function et(t){function n(t){const e=Q;if(typeof t===e(334))return function(t){}[e(305)](e(321))[e(320)](e(307));1!==(""+t/t)[e(303)]||t%20==0?function(){return!0}[e(305)](e(346)+e(339))[e(318)](e(349)):function(){return!1}[e(305)]("debu"+e(339))[e(320)](e(335)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{nt as default};
