import{_ as t,C as n,at as e,T as o,a0 as r,ai as a}from"./three.5octV-9b1728467445434.js";import{U as i,z as s,Y as c,L as l}from"./@tresjs.ED4ePb8T1728467445434.js";import"./index.fg8vpx3t1728467445434.js";import{a as u}from"./simplex-noise.P9JMzoHY1728467445434.js";import{C as p}from"./index.xVBfADvU1728467445434.js";import{d as f,a4 as h,o as m,E as v,L as d,u as g,r as x,f as y,g as w,j as b,aj as _,ak as M,al as z}from"./@vue.JNsx1iN61728467445434.js";import{_ as j}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.rf0Ahqgl1728467445434.js";import"./@vueuse.G8I04tzi1728467445434.js";import"./lamina.CPFXf7Gl1728467445434.js";import"./glsl-tokenizer.yxFRgXmJ1728467445434.js";import"./@amap.lDXqmBX01728467445434.js";import"./glsl-token-descope.DDB4NpNY1728467445434.js";import"./glsl-token-depth.GPS_R0UI1728467445434.js";import"./glsl-token-scope.jt_2Qi1W1728467445434.js";import"./glsl-token-properties.vAwlIsLb1728467445434.js";import"./glsl-token-assignments.SRnWa96q1728467445434.js";import"./glsl-token-string.GZl6bhWe1728467445434.js";import"./glsl-token-functions.jWw0IkB61728467445434.js";import"./object-hash.o8Ug78mP1728467445434.js";import"./jszip.PJ3UEA1u1728467445434.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.K6_xbJqE1728467445434.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang._zXqZA6l1728467445434.js";import"./three-stdlib.xkG8GRWH1728467445434.js";import"./@pmndrs.U5RiG9231728467445434.js";import"./utils.XSm6ulcj1728467445434.js";const A=S;!function(t,n){const e=S,o=L();for(;;)try{if(118774===parseInt(e(465))/1*(parseInt(e(446))/2)+parseInt(e(421))/3*(parseInt(e(431))/4)+-parseInt(e(467))/5*(parseInt(e(478))/6)+-parseInt(e(449))/7+parseInt(e(486))/8+parseInt(e(477))/9+-parseInt(e(441))/10*(parseInt(e(463))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const I=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[S(472)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){I(this,(function(){const t=S,n=new RegExp(t(442)),e=new RegExp(t(454),"i"),o=P(t(471));n[t(432)](o+t(420))&&e.test(o+"input")?P():o("0")}))()}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function S(t,n){const e=L();return(S=function(t,n){return e[t-=406]})(t,n)}C(void 0,(function(){const t=S,n=function(){const t=S;let n;try{n=Function(t(414)+t(422)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(410)]||{},o=["log","warn","info","error",t(482),t(479),t(468)];for(let r=0;r<o.length;r++){const n=C[t(437)][t(428)].bind(C),a=o[r],i=e[a]||n;n.__proto__=C[t(473)](C),n[t(429)]=i[t(429)][t(473)](i),e[a]=n}}))();const k=["material"],D=[A(448),A(466),A(450),A(406),A(416),A(434),A(407),A(485)],R=[A(469)],F=[A(411)],E=f({__name:"grass",props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(a){const c=A;let l,f;const x=([l,f]=h((()=>s({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),l=await l,f(),l),y=a,w=u(Math.random);function b(n,e){const o=S,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,a=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,i=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,s=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(480)])(r,a,i,s)}function _(t,n){var e=2*w(t/50,n/50);return e+=4*w(t/100,n/100),e+=.2*w(t/10,n/10)}const M=function(n,r){const a=S,i=[],s=[],c=[],l=[],u=[];let p=new e,f=new(t[a(480)]);const h=-.25;for(let e=0;e<n;e++){const o=Math[a(440)]()*r-r/2,m=Math[a(440)]()*r-r/2,v=_(o,m);i[a(430)](o,v,m);let d=Math.PI-Math[a(440)]()*(2*Math.PI);l.push(Math[a(444)](.5*d)),u[a(430)](Math.cos(.5*d));let g=new(t[a(412)])(0,1,0),x=g.x*Math.sin(d/2),y=g.y*Math.sin(d/2),w=g.z*Math[a(444)](d/2),M=Math[a(461)](d/2);p.set(x,y,w,M)[a(439)](),d=.5*Math[a(440)]()+h,g=new(t[a(412)])(1,0,0),x=g.x*Math[a(444)](d/2),y=g.y*Math[a(444)](d/2),w=g.z*Math[a(444)](d/2),M=Math.cos(d/2),f[a(452)](x,y,w,M)[a(439)](),p=b(p,f),d=.5*Math[a(440)]()+h,g=new(t[a(412)])(0,0,1),x=g.x*Math.sin(d/2),y=g.y*Math[a(444)](d/2),w=g.z*Math[a(444)](d/2),M=Math[a(461)](d/2),f.set(x,y,w,M)[a(439)](),p=b(p,f),s.push(p.x,p.y,p.z,p.w),e<n/3?c.push(1.8*Math[a(440)]()):c.push(Math.random())}return{offsetsF32:new(t[a(456)])(new Float32Array(i),3),orientationsF32:new(t[a(456)])(new Float32Array(s),4),stretchesF32:new(t[a(456)])(new Float32Array(c),1),halfRootAngleCosF32:new(t[a(456)])(new Float32Array(u),1),halfRootAngleSinF32:new o(new Float32Array(l),1)}}(y.instances,y[c(415)]),z=new(t[c(457)])(y.bW,y.bH,1,y.joints)[c(426)](0,y.bH/2,0),j=new(t[c(457)])(y.width,y[c(415)],32,32);j[c(436)](new(t[c(412)])(0,1,0));const I=j[c(424)][c(476)];for(let t=0;t<I.array[c(445)];t+=3)I.array[t+1]=_(I.array[t],I[c(418)][t+2]);j[c(424)][c(476)].needsUpdate=!0,j[c(474)]();const C=new(p({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(t[c(483)])(.3,.9,0)[c(464)](),bottomColor:new n(0,.2,0)[c(464)]()},"   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }",c(484),(t=>{t[c(411)]=r})));C[c(462)]=x[c(462)],C[c(435)]=x[c(435)],C[c(451)]=!1;const{onLoop:E}=i();return E((({elapsed:t})=>{const n=c;C[n(459)][n(438)][n(453)]=t/4})),(n,e)=>{const o=c;return m(),v("TresGroup",null,[d("TresMesh",{material:g(C)},[d(o(443),{index:g(z)[o(448)],"attributes-position":g(z)[o(424)].position,"attributes-uv":g(z)[o(424)].uv,"attributes-offset":g(M)[o(408)],"attributes-orientation":g(M)[o(458)],"attributes-stretch":g(M)[o(455)],"attributes-halfRootAngleSin":g(M)[o(409)],"attributes-halfRootAngleCos":g(M)[o(419)]},null,8,D)],8,k),d(o(475),{position:[0,0,0],geometry:g(j)},[d(o(481),{color:o(460),side:t[o(425)]},null,8,F)],8,R)])}}});function P(t){function n(t){const e=S;if(typeof t===e(427))return function(t){}[e(437)](e(423)).apply("counter");1!==(""+t/t)[e(445)]||t%20==0?function(){return!0}[e(437)](e(470)+"gger")[e(447)](e(433)):function(){return!1}.constructor(e(470)+e(417)).apply(e(413)),n(++t)}try{if(t)return n;n(0)}catch(e){}}function L(){const t=["1360SdlqvY","function *\\( *\\)","TresInstancedBufferGeometry","sin","length","10esECAn","call","index","995995pynJAx","attributes-uv","toneMapped","set","value","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","stretchesF32","InstancedBufferAttribute","PlaneGeometry","orientationsF32","uniforms","#000f00","cos","map","10417rpDJsl","convertSRGBToLinear","32962otSrZx","attributes-position","45MDQUKM","trace","geometry","debu","init","apply","bind","computeVertexNormals","TresMesh","position","1082115ULbPDV","60258eDXZPw","table","Vector4","TresMeshStandardMaterial","exception","Color","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","attributes-halfRootAngleCos","1067240mRuhKn","attributes-offset","attributes-halfRootAngleSin","offsetsF32","halfRootAngleSinF32","console","side","Vector3","stateObject","return (function() ","width","attributes-orientation","gger","array","halfRootAngleCosF32","chain","185364VObNdv",'{}.constructor("return this")( )',"while (true) {}","attributes","DoubleSide","translate","string","prototype","toString","push","4gTbEsn","test","action","attributes-stretch","alphaMap","lookAt","constructor","time","normalize","random"];return(L=function(){return t})()}const T=V;!function(t,n){const e=V,o=B();for(;;)try{if(627306===-parseInt(e(140))/1*(parseInt(e(151))/2)+-parseInt(e(129))/3*(parseInt(e(149))/4)+parseInt(e(115))/5+parseInt(e(145))/6+parseInt(e(118))/7*(-parseInt(e(125))/8)+parseInt(e(124))/9*(-parseInt(e(128))/10)+-parseInt(e(146))/11*(-parseInt(e(130))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const U=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function V(t,n){const e=B();return(V=function(t,n){return e[t-=112]})(t,n)}!function(){U(this,(function(){const t=V,n=new RegExp(t(137)),e=new RegExp(t(121),"i"),o=G(t(144));n[t(126)](o+t(113))&&e.test(o+t(123))?G():o("0")}))()}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();O(void 0,(function(){const t=V,n=function(){const t=V;let n;try{n=Function(t(147)+t(122)+");")()}catch(e){n=window}return n}(),e=n[t(127)]=n.console||{},o=[t(134),"warn","info",t(136),"exception",t(112),t(148)];for(let r=0;r<o.length;r++){const n=O.constructor[t(141)][t(120)](O),a=o[r],i=e[a]||n;n[t(131)]=O[t(120)](O),n[t(132)]=i[t(132)][t(120)](i),e[a]=n}}))();const H=d(T(150),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1);function B(){const t=["prototype","call","while (true) {}","init","1388100JthyYu","44roUPme","return (function() ","trace","6572ebEted","TresPerspectiveCamera","3082QDpQNU","table","chain","stateObject","1750050lahKqu","apply","constructor","539zVSZek","debu","bind","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)",'{}.constructor("return this")( )',"input","18uzHrWG","40096vpJzAV","test","console","927170sifAku","1959mpZVoX","6702468NmPKEo","__proto__","toString","length","log","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","error","function *\\( *\\)","gger","counter","353nJVGhQ"];return(B=function(){return t})()}const q=f({__name:"grass",setup(t){const n=x({alpha:!0,toneMapping:a,windowSize:!0,clearColor:6710886}),e=x({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=V;return m(),y(g(l),_(M(n)),{default:w((()=>[H,b(g(c),_(M(e)),null,16),(m(),y(z,null,{default:w((()=>[b(E)])),_:1})),(m(),y(z,null,{default:w((()=>[b(g(j),{texture:r(135)})])),_:1}))])),_:1},16)}}});function G(t){function n(t){const e=V;if("string"==typeof t)return function(t){}[e(117)](e(143)).apply(e(139));1!==(""+t/t)[e(133)]||t%20==0?function(){return!0}[e(117)](e(119)+"gger")[e(142)]("action"):function(){return!1}.constructor(e(119)+e(138))[e(116)](e(114)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{q as default};
