import{_ as e,K as o}from"./@tresjs.B_KjVy0E1761276103973.js";import{_ as s}from"./component.vue_vue_type_script_setup_true_lang.CuvJ4d7F1761276103973.js";import{_ as t}from"./vanilla.esm.5.5.0.CRlEbOMK1761276103973.js";import"./Resource.CSaxGSPI1761276103973.js";import"./@fesjs.DnM7nINA1761276103973.js";/* empty css                                                                             */import{l as r}from"./bubbleLoading.CNFXC-mb1761276103973.js";import"./three-mesh-ui.module.C--P1h9b1761276103973.js";import"./global.BkM2LKCv1761276103973.js";/* empty css                                                              */import"./OimoPhysicsBuffer.BXemNmye1761276103973.js";import{_ as a}from"./reflectorDUDV.vue_vue_type_script_setup_true_lang.DxF4X4Ny1761276103973.js";import"./PackedMipMapGenerator.CqP5a0bT1761276103973.js";import{P as i}from"./tweakpane.CqZAnw7f1761276103973.js";import{_ as l}from"./lamboEffect.vue_vue_type_script_setup_true_lang.Z6sFkLW01761276103973.js";import{u as n}from"./index.vM1sPJET1761276103973.js";import{u}from"./useTexture.B3KXI5F11761276103973.js";import{ac as d,a3 as p,G as m,o as c,ad as f,u as g,d as v,r as h,a as _,g as j,h as x,e as y,I as C,b,a9 as P,aa as M,ap as S,m as T,F as w}from"./@vue.CKlgtJke1761276103973.js";import{k,ar as B,a6 as I}from"./three.Bhn4-0ry1761276103973.js";import"./postprocessing.CeTFUAN_1761276103973.js";import"./@vueuse.wtfleElW1761276103973.js";import"./three-stdlib.tb53t5ki1761276103973.js";import"./useLoader.DWT9Jk041761276103973.js";import"./object-hash.1qNYTrnD1761276103973.js";import"./@amap.fjyZdsU91761276103973.js";import"./jszip.y_yjJ09m1761276103973.js";import"./vue-router.BFHj2xRz1761276103973.js";import"./lodash-es.DWe8oqPO1761276103973.js";import"./pinia.C8YT0eOZ1761276103973.js";import"./@qlin.y-0Z8WnK1761276103973.js";import"./@babel.BPq7uOAK1761276103973.js";import"./@floating-ui.Bhq4ibgf1761276103973.js";import"./@juggle.Vc7cP4_P1761276103973.js";import"./utils.DEKxcj5Y1761276103973.js";import"./color.zjyo9y-T1761276103973.js";import"./color-string.Cb0Nf94v1761276103973.js";import"./color-name.gyPnsvCn1761276103973.js";import"./lodash.B8Sqzhuz1761276103973.js";import"./oimophysics.CfVKSiAm1761276103973.js";import"./dither.glsl.tNAdkJUa1761276103973.js";import"./Reflector.CqqiY7381761276103973.js";import"./vite-plugin-qiankun.B06WoCqG1761276103973.js";import"./utils.CNife3_q1761276103973.js";const R=["object","rotation"],D={__name:"dissolveEffectModel",props:{edgeColor:{default:1118481},edgeWidth:{default:.03},dissolveSpeed:{default:.003},funRef:{appear:null,disappear:null}},async setup(o,{expose:s}){let t,r;const a=o,{scene:i,nodes:l,materials:v}=([t,r]=d(()=>n("https://opensource.cdn.icegl.cn/model/industry4/lambo.glb",{draco:!0,decoderPath:"./draco/"})),t=await t,r(),t);Object.values(l).forEach(e=>{e.isMesh&&(e.name.startsWith("glass")&&e.geometry.computeVertexNormals(),"silver_001_BreakDiscs_0"===e.name&&(e.material=v.BreakDiscs.clone(),e.material.color=new k("#ddd")))}),l.glass_003.scale.setScalar(2.7),v.FrameBlack.color=new k("black"),v.FrameBlack.roughness=0,v.FrameBlack.metalness=.75,v.Chrome.color=new k("#333"),v.Chrome.metalness=1,v.Chrome.roughness=0,v.BreakDiscs.color=new k("#555"),v.BreakDiscs.metalness=.2,v.BreakDiscs.roughness=.2,v.TiresGum.color=new k("#181818"),v.TiresGum.metalness=0,v.TiresGum.roughness=.4,v.GreyElements.color=new k("#292929"),v.GreyElements.metalness=0,l.yellow_WhiteCar_0.material=new B({roughness:.3,metalness:.05,color:"#111",envMapIntensity:.75,clearcoatRoughness:0,clearcoat:1});const h=([t,r]=d(()=>u(["./plugins/digitalCity/image/smokeparticle.png","./plugins/industry4/image/dissolve.jpg"])),t=await t,r(),t),_=[];let j=!1;const x={dissolveProgress:0,noiseTexture:h[0],edgeColorTexture:h[1]};let y=a.dissolveSpeed;const C=()=>{if(!j){j=!0,y=a.dissolveSpeed;for(const e of _)e.uniforms.dissolveSpeed={value:y},e.uniforms.dissolveProgress={value:0}}},b=()=>{if(!j){j=!0,y=-a.dissolveSpeed;for(const e of _)e.uniforms.dissolveSpeed={value:y},e.uniforms.dissolveProgress={value:1}}};a.funRef.appear=C,a.funRef.disappear=b,s({appear:C,disappear:b}),Object.values(l).forEach(e=>{if(e.isMesh){e.frustumCulled=!1;const o=e.material;o.transparent=!0,o.onBeforeCompile=e=>{_.push(e),e.uniforms.edgeColor={value:new k(a.edgeColor)},e.uniforms.edgeWidth={value:a.edgeWidth},e.uniforms.dissolveSpeed={value:a.dissolveSpeed},e.uniforms.dissolveProgress={value:x.dissolveProgress},e.uniforms.noiseTexture={value:x.noiseTexture},e.uniforms.edgeColorTexture={value:x.edgeColorTexture},e.vertexShader=e.vertexShader.replace("#include <common>",["varying vec2 xUv;","#include <common>"].join("\n")),e.vertexShader=e.vertexShader.replace("#include <uv_vertex>",["xUv = uv;","#include <uv_vertex>"].join("\n")),e.fragmentShader=e.fragmentShader.replace("#include <common>","#include <common>\n             uniform float dissolveProgress;\n             uniform float edgeWidth;\n             uniform vec3 edgeColor;\n             uniform sampler2D noiseTexture;\n             uniform sampler2D edgeColorTexture;\n             varying vec2 xUv;\n            "),e.fragmentShader=e.fragmentShader.replace("#include <dithering_fragment>","#include <dithering_fragment>\n                float noiseValue = texture2D(noiseTexture, xUv).r;\n              \tvec4 finalColor = texture2D(edgeColorTexture, xUv);\n\n\t\t\t\t\t\t\t\tvec3 mixedColor = mix(finalColor.rgb, edgeColor, 0.5);\n\t\t\t\t\t\t\t\tfinalColor.rgb = mixedColor;\n\n                // vec4 finalColor = linearToOutputTexel( vec4(edgeColor, gl_FragColor.a) );\n\t\t\t\t\t\t\t\tfloat alpha = step(noiseValue - edgeWidth, dissolveProgress);\n                gl_FragColor.a = alpha;\n\t\t\t\t\t\t\t\tfloat useOrigin = step(noiseValue, dissolveProgress);\n\t\t\t\t\t\t\t\tgl_FragColor.rgb = mix(finalColor.rgb, gl_FragColor.rgb, useOrigin);")}}});const{onBeforeRender:P}=e();return P(()=>{if(j)for(const e of _){const{dissolveProgress:o,dissolveSpeed:s}=e.uniforms;o.value+=s.value,o.value<0&&(j=!1),o.value>1&&(j=!1)}}),p(()=>{if(a.dissolveSpeed)for(const e of _)e.uniforms.dissolveSpeed.value=a.dissolveSpeed;if(a.edgeColor)for(const e of _)e.uniforms.edgeColor.value=new k(a.edgeColor);if(a.edgeWidth)for(const e of _)e.uniforms.edgeWidth.value=a.edgeWidth}),(e,o)=>(c(),m("primitive",{object:f(g(i)),scale:.015,rotation:[0,Math.PI/1.5,0]},null,8,R))}},W=["rotation"],G=["side"],E=["rotation"],F=["side"],O=v({__name:"dissolveEffect",setup(e){const n=h({clearColor:"#15151a",antialias:!1,logarithmicDepthBuffer:!0,renderMode:"manual"}),u=h({autoRotate:!0}),d=new i({title:"溶解参数",expanded:!0}),p=h({edgeColor:"#111111",edgeWidth:.03,dissolveSpeed:.003,funRef:{appear:null,disappear:null}});d.addBinding(p,"edgeColor",{label:"颜色"}),d.addBinding(p,"edgeWidth",{label:"宽度",min:0,max:.13,step:.01}),d.addBinding(p,"dissolveSpeed",{label:"速度",min:.001,max:.01,step:.001});const f=d.addButton({title:"显示",label:"模型"}),v=_(null);f.on("click",()=>{v.value.appear?v.value.appear():v.value.funRef.appear()});return d.addButton({title:"消失",label:"模型"}).on("click",()=>{v.value.appear?v.value.disappear():v.value.funRef.disappear()}),(e,i)=>{const d=j("TresCanvas");return c(),m(w,null,[x(g(r)),x(d,T(n,{"window-size":""}),{default:y(()=>[i[2]||(i[2]=C("TresPerspectiveCamera",{position:[0,10,15],fov:25,near:.1,far:1e4},null,-1)),x(g(o),P(M(u)),null,16),i[3]||(i[3]=C("TresHemisphereLight",{intensity:.5},null,-1)),(c(),b(S,null,{default:y(()=>[x(D,T(p,{ref_key:"dissolveEffectModelRef",ref:v}),null,16)]),_:1})),(c(),b(S,null,{default:y(()=>[x(g(a),{position:[0,-1.562,0],reflectivity:2.6,showGridHelper:!1,scale:1.5})]),_:1})),C("TresMesh",{scale:4,position:[3,-1.161,-1.5],rotation:[-Math.PI/2,0,Math.PI/2.5]},[i[0]||(i[0]=C("TresRingGeometry",{args:[.9,1,4,1]},null,-1)),C("TresMeshStandardMaterial",{color:"white",roughness:.75,side:I},null,8,G)],8,W),C("TresMesh",{scale:4,position:[-3,-1.161,-1],rotation:[-Math.PI/2,0,Math.PI/2.5]},[i[1]||(i[1]=C("TresRingGeometry",{args:[.9,1,3,1]},null,-1)),C("TresMeshStandardMaterial",{color:"white",roughness:.75,side:I},null,8,F)],8,E),(c(),b(S,null,{default:y(()=>[x(g(s),{resolution:512},{default:y(()=>[x(g(t),{intensity:2,position:[0,1,3],scale:[10,1,1]}),x(g(t),{intensity:2,"rotation-x":Math.PI/2,position:[0,4,-6],scale:[10,1,1]},null,8,["rotation-x"]),x(g(t),{intensity:2,"rotation-x":Math.PI/2,position:[0,4,-3],scale:[10,1,1]},null,8,["rotation-x"]),x(g(t),{intensity:2,"rotation-x":Math.PI/2,position:[0,4,0],scale:[10,1,1]},null,8,["rotation-x"]),x(g(t),{intensity:2,"rotation-x":Math.PI/2,position:[0,4,3],scale:[10,1,1]},null,8,["rotation-x"]),x(g(t),{intensity:2,"rotation-x":Math.PI/2,position:[0,4,6],scale:[10,1,1]},null,8,["rotation-x"]),x(g(t),{intensity:2,"rotation-x":Math.PI/2,position:[0,4,9],scale:[10,1,1]},null,8,["rotation-x"]),x(g(t),{intensity:2,"rotation-y":Math.PI/2,position:[-50,2,0],scale:[100,2,1]},null,8,["rotation-y"]),x(g(t),{intensity:2,"rotation-y":-Math.PI/2,position:[50,2,0],scale:[100,2,1]},null,8,["rotation-y"]),x(g(t),{form:"ring",color:"red",intensity:10,scale:2,position:[10,5,10]})]),_:1})]),_:1})),x(l)]),_:1},16)],64)}}});export{O as default};
