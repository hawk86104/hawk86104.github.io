import{p as t,U as n,z as e,Y as o}from"./@tresjs.UGbbWZf51726652192279.js";import{_ as r,Y as s,k as a,V as i,at as c,$ as l,b6 as u,n as v,cL as f,bW as p}from"./three.3esZ7Hzr1726652192279.js";import{P as m}from"./tweakpane.yHWGBmom1726652192279.js";import{d,a4 as g,e as x,o as h,f as y,g as I,L as b,j as _,u as S,aj as U,ak as w,al as P,m as D}from"./@vue.JNsx1iN61726652192279.js";import{_ as E}from"./@fesjs.SPWJBM2r1726652192279.js";import"./@vueuse.OdTlFP151726652192279.js";import"./vue-router.xtoXuUHZ1726652192279.js";import"./lodash-es.kYt-_xTG1726652192279.js";import"./@qlin.yHhFDldE1726652192279.js";import"./pinia.wYsVO5dS1726652192279.js";import"./@floating-ui.BPbuo5Gx1726652192279.js";import"./@juggle.7yjBMqoW1726652192279.js";!function(t,n){const e=M,o=F();for(;;)try{if(884018===parseInt(e(296))/1*(parseInt(e(330))/2)+parseInt(e(324))/3*(-parseInt(e(297))/4)+-parseInt(e(350))/5+parseInt(e(363))/6*(parseInt(e(354))/7)+-parseInt(e(328))/8+parseInt(e(318))/9*(parseInt(e(364))/10)+-parseInt(e(337))/11*(parseInt(e(302))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[M(299)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){A(this,(function(){const t=M,n=new RegExp(t(307)),e=new RegExp(t(356),"i"),o=C(t(300));n[t(311)](o+t(309))&&e[t(311)](o+t(334))?C():o("0")}))()}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[M(299)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function M(t,n){const e=F();return(M=function(t,n){return e[t-=296]})(t,n)}L(void 0,(function(){const t=M,n=function(){const t=M;let n;try{n=Function("return (function() "+t(322)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(335)]||{},o=[t(321),t(358),"info",t(355),t(327),t(332),t(319)];for(let r=0;r<o[t(342)];r++){const n=L[t(357)][t(341)].bind(L),s=o[r],a=e[s]||n;n[t(345)]=L[t(313)](L),n[t(339)]=a[t(339)][t(313)](a),e[s]=n}}))();function z(t,n,e){const o=M;if(typeof t!==o(305)||null===t)return t;const r=Array[o(323)](t)?[]:{};for(const s in t)t.hasOwnProperty(s)&&(r[s]=z(t[s])),s==n&&(r[n]=e);return r}function C(t){function n(t){const e=M;if(typeof t===e(333))return function(t){}[e(357)](e(317)).apply(e(312));1!==(""+t/t)[e(342)]||t%20==0?function(){return!0}[e(357)](e(338)+e(343))[e(336)](e(306)):function(){return!1}.constructor("debu"+e(343))[e(299)](e(320)),n(++t)}try{if(t)return n;n(0)}catch(e){}}function F(){const t=['Shader "',"while (true) {}","693KzPVyo","trace","stateObject","log",'{}.constructor("return this")( )',"isArray","2302131MJrDwT","WagnerLoadShaderException","Matrix2","exception","1504856sCwBVA","random","2BrxOOo","onload","table","string","input","console","call","213521FkOrPh","debu","toString","message","prototype","length","gger","\" couldn't be loaded.","__proto__","Vector4","send","lastIndex","get","6032725hLDvHy","Texture","Matrix3","type","21aCUkoH","error","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","constructor","warn","value","name","Vector2","ShaderMaterial","3261306YzPURF","196360caATHT","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","78121gGTOyl","4sQqRGi","responseText","apply","init","onerror","108Lowajr","Matrix4","replace","object","action","function *\\( *\\)","onabort","chain","v3v","test","counter","bind","index","Vector3"];return(F=function(){return t})()}const T=R;!function(t,n){const e=R,o=j();for(;;)try{if(523612===-parseInt(e(189))/1+-parseInt(e(193))/2+parseInt(e(178))/3+-parseInt(e(159))/4+parseInt(e(219))/5*(-parseInt(e(190))/6)+-parseInt(e(238))/7*(-parseInt(e(191))/8)+-parseInt(e(182))/9*(-parseInt(e(254))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const N=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){N(this,(function(){const t=R,n=new RegExp(t(244)),e=new RegExp(t(228),"i"),o=O(t(210));n[t(252)](o+t(217))&&e[t(252)](o+t(170))?O():o("0")}))()}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(212)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function R(t,n){const e=j();return(R=function(t,n){return e[t-=154]})(t,n)}G(void 0,(function(){const t=R;let n;try{n=Function('return (function() {}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(209)]=n.console||{},o=["log",t(174),t(166),t(208),t(155),t(164),t(172)];for(let s=0;s<o.length;s++){const n=G.constructor[t(194)][t(179)](G),r=o[s],a=e[r]||n;n[t(227)]=G[t(179)](G),n[t(214)]=a[t(214)][t(179)](a),e[r]=n}}))();class B{constructor(t,n){const e=R;this[e(230)]=1,this[e(176)]=1,this[e(222)]=n||{},this[e(251)]=this.settings[e(251)]||!1,this[e(181)]=t,this[e(253)]=this[e(239)](this[e(222)]),this.scene=new(r[e(185)]),this[e(240)]=new(r[e(204)])(new(r[e(234)])(1,1),new l),this[e(192)][e(221)](this.quad),this.camera=new(r[e(255)])(1,1,1,1,-1e4,1e4),this[e(163)]=new(r[e(250)])(1,1,{minFilter:void 0!==this.settings[e(215)]?this[e(222)].minFilter:r[e(188)],magFilter:void 0!==this[e(222)].magFilter?this[e(222)][e(216)]:r[e(188)],wrapS:void 0!==this[e(222)][e(246)]?this[e(222)][e(246)]:r[e(229)],wrapT:void 0!==this.settings[e(241)]?this[e(222)][e(241)]:r[e(229)],format:this[e(251)]?u:r[e(180)],type:void 0!==this[e(222)].type?this[e(222)][e(196)]:r[e(183)],stencilBuffer:void 0===this[e(222)].stencilBuffer||this.settings[e(205)]}),this[e(220)]=this.front[e(158)](),this.startTime=Date[e(187)](),this.passes={},this[e(206)]={passItems:[],passes:[]}}[T(201)](t,n,e,o){const r=T;this[r(225)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(235)]};this[r(206)].passItems[r(203)](s)}[T(224)](t){const n=T;for(let e=this[n(206)][n(242)][n(237)]-1;e>=0;e--)this[n(206)][n(242)][e].uuid===parseInt(t)&&this[n(206)][n(242)].splice(e,1);console[n(202)](this.Stack.passItems)}[T(239)](){const t=T;this[t(169)][t(177)](this);return this[t(225)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[T(225)](t){const n=T(157);return this.shader=function(t,n){const e=M,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,l=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,u={sampler2D:{type:"t",value:()=>new(r[M(351)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new a},vec3:{type:"v3",value:()=>new i},vec4:{type:"v4",value:()=>new(r[M(346)])},bvec2:{type:"v2",value:()=>new(r[M(361)])},bvec3:{type:"v3",value:()=>new(r[M(315)])},bvec4:{type:"v4",value:()=>new(r[M(346)])},ivec2:{type:"v2",value:()=>new(r[M(361)])},ivec3:{type:"v3",value:()=>new(r[M(315)])},ivec4:{type:"v4",value:()=>new c},mat2:{type:"v2",value:()=>new(r[M(326)])},mat3:{type:"v3",value:()=>new(r[M(352)])},mat4:{type:"v4",value:()=>new(r[M(303)])}},v={float:{type:"fv",value:()=>[]},vec3:{type:e(310),value:()=>[]}};let f;const p={resolution:{type:"v2",value:new(r[e(361)])(1,1),default:!0},time:{type:"f",value:Date.now(),default:!0},tInput:{type:"t",value:new s,default:!0}};let m,d;for(;null!==(f=o.exec(n));)f[e(314)]===o[e(348)]&&o[e(348)]++,m=f[1],d=f[2],p[d]={type:u[m][e(353)],value:u[m][e(359)]()};for(;null!==(f=l.exec(n));)f[e(314)]===o[e(348)]&&o[e(348)]++,m=f[1],d=f[2],f[3],p[d]={type:v[m][e(353)],value:v[m][e(359)]()};return new(r[e(362)])({uniforms:p,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(n,t),this.shader}[T(169)](t){const n=T;this.shader=null,this[n(173)]={}}[T(256)](){const t=T;this[t(249)]=this.front,this[t(257)]=this[t(220)]}[T(167)](t,n){const e=T,o=window[e(198)],r=window[e(165)];t[e(213)](1*o,1*r),n[e(200)].makePerspective(70,o/r,n.near,n[e(218)]),this[e(213)](o,r);return this[e(211)](o,r,!0)}[T(213)](t,n){const e=T;this.width=t,this[e(176)]=n,this[e(156)].projectionMatrix[e(162)](t/-2,t/2,n/2,n/-2,this.camera[e(160)],this.camera[e(218)]),this[e(240)][e(154)][e(232)](t,n,1),this[e(163)][e(213)](t,n),this[e(220)][e(213)](t,n)}[T(211)](t,n,e){const o=T;return new(r[o(250)])(t,n,{minFilter:r[o(188)],magFilter:v,format:e?r[o(247)]:f})}[T(171)](t,n,e,o){const r=T;this[r(181)][r(184)](this[r(257)]),this[r(181)][r(171)](t,n),o||this[r(186)]()}[T(186)](){const t=T,n=this.write;this[t(257)]=this[t(249)],this[t(249)]=n}[T(223)](){const t=T;for(let n=0;n<this[t(206)].passItems.length;n++){const e=this.Stack[t(242)][n][t(235)],o=this[t(206)][t(242)][n][t(173)];if(this.renderer[t(184)](this[t(257)]),e instanceof r[t(199)]){this.quad.material=e,this[t(240)][t(197)][t(207)].tInput.value=this.read[t(258)],this[t(240)][t(197)][t(207)][t(168)][t(243)].set(this[t(230)],this[t(176)]),this[t(240)][t(197)][t(207)].time[t(243)]=.001*(Date[t(187)]()-this[t(161)]);for(const n in o)this[t(240)].material[t(207)][n].value=o[n];this[t(181)][t(171)](this.scene,this[t(156)]),this[t(186)]()}}}[T(233)](t,n){const e=T;this.renderer[e(184)](null),this[e(240)].material=this[e(253)],this[e(240)].material[e(207)][e(236)][e(243)]=this[e(249)].texture,this[e(240)][e(197)][e(207)][e(168)][e(243)][e(232)](this.width,this[e(176)]),this[e(181)][e(171)](this[e(192)],this[e(156)])}}function O(t){function n(t){const e=R;if(typeof t===e(231))return function(t){}.constructor(e(226))[e(212)]("counter");1!==(""+t/t)[e(237)]||t%20==0?function(){return!0}.constructor(e(175)+"gger").call("action"):function(){return!1}[e(248)](e(175)+e(245))[e(212)](e(195)),n(++t)}try{if(t)return n;n(0)}catch(e){}}function j(){const t=["PlaneGeometry","shader","tInput","length","89887eibiye","CopyPass","quad","wrapT","passItems","value","function *\\( *\\)","gger","wrapS","RGBAFormat","constructor","read","WebGLRenderTarget","useRGBA","test","copyPass","5857430aGCcSY","OrthographicCamera","Reset","write","texture","scale","exception","camera","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","clone","1639540AuYJAJ","near","startTime","makeOrthographic","front","table","innerHeight","info","onWindowResize","resolution","Pass","input","render","trace","params","warn","debu","height","call","2793171obsSZb","bind","RGBFormat","renderer","18SfTySy","UnsignedByteType","setRenderTarget","Scene","swapBuffers","now","LinearFilter","633089ZtbAAd","1124274wcXOYP","264iUYqGD","scene","1169904gzUynw","prototype","stateObject","type","material","innerWidth","ShaderMaterial","projectionMatrix","addPass","log","push","Mesh","stencilBuffer","Stack","uniforms","error","console","init","getOfflineTexture","apply","setSize","toString","minFilter","magFilter","chain","far","10hOOiYP","back","add","settings","pass","removePass","loadShadervf","while (true) {}","__proto__","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","ClampToEdgeWrapping","width","string","set","toScreen"];return(j=function(){return t})()}const V="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",H=q;!function(t,n){const e=q,o=X();for(;;)try{if(114434===-parseInt(e(108))/1+-parseInt(e(169))/2*(parseInt(e(160))/3)+-parseInt(e(111))/4*(parseInt(e(161))/5)+parseInt(e(139))/6*(-parseInt(e(125))/7)+parseInt(e(127))/8*(parseInt(e(181))/9)+parseInt(e(117))/10*(parseInt(e(140))/11)+parseInt(e(122))/12)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const k=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(151)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){k(this,(function(){const t=q,n=new RegExp("function *\\( *\\)"),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=Z(t(142));n[t(170)](o+t(153))&&e.test(o+t(129))?Z():o("0")}))()}();const W=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function X(){const t=["warn","error","BOXBLURPass","keys","table","call","apply","autoClearColor","chain","counter","POISSONPass","add","receiveShadow","新增通道","FXAAPass","3FXvfSH","78670ymSXyM","toScreen","translate","stateObject","bind","prototype","SOBELPass","debu","291230QThkFD","test","RGBPass","BufferGeometry","while (true) {}","change","value","addPass","BoxGeometry","postProcessing","后处理类型","list","81VIgsiQ","CGAPass","render","random","length","constructor","addButton","CIRCULARPass","push","text","console","values","castShadow","移除~","181732zOBwLW","SNOISEPass","exception","20yBGjhm","MeshPhongMaterial","addBlade","Mesh","Reset","DENOISEPass","1750syWORX","DOTPass","map","TOONPass","return (function() ","4487148mPNUdj","__proto__","string","49GFPXIX","VIGNETTE1Pass","164744DcysRp","toString","input","plugins/postProcessing/image/1324.jpg","mergeGeometries","click","gger","plugins/postProcessing/image/1324-normal.jpg","material","info","action","title","104220CADXzw","5203QhAjlI","关闭通道","init","InvertPass","removePass"];return(X=function(){return t})()}function q(t,n){const e=X();return(q=function(t,n){return e[t-=104]})(t,n)}W(void 0,(function(){const t=q;let n;try{n=Function(t(121)+'{}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(104)]=n[t(104)]||{},o=["log",t(145),t(136),t(146),t(110),t(149),"trace"];for(let s=0;s<o[t(185)];s++){const n=W[t(186)][t(166)][t(165)](W),r=o[s],a=e[r]||n;n[t(123)]=W[t(165)](W),n[t(128)]=a.toString[t(165)](a),e[r]=n}}))();function Z(t){function n(t){const e=q;if(typeof t===e(124))return function(t){}.constructor(e(173))[e(151)](e(154));1!==(""+t/t).length||t%20==0?function(){return!0}[e(186)]("debu"+e(133))[e(150)](e(137)):function(){return!1}.constructor(e(168)+"gger")[e(151)](e(164)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const $=E(d({__name:H(178),async setup(o){const s=H;let i,c;const{camera:l,renderer:u,scene:v,sizes:f}=t();for(var d=new(r[s(172)]),x=[],h=0;h<100;h++){var y=new(r[s(177)])(100,100,100);y[s(163)](1500*Math[s(184)](),1500*Math[s(184)](),1500*Math[s(184)]()),x[s(189)](y)}d=p[s(131)](x);const I=([i,c]=g((()=>e({map:s(130)}))),i=await i,c(),i),b=([i,c]=g((()=>e({map:s(134)}))),i=await i,c(),i);var _=new(r[s(112)])({map:I[s(119)],normalMap:b[s(119)],normalScale:new a(.8,-.8),shininess:100}),S=new(r[s(114)])(d,_);S[s(106)]=!0,S[s(157)]=!0,v[s(175)][s(156)](S);const U=new B(u.value,{useRGBA:!0}),w=new m;let P=null,D=[{text:s(143),value:{InvertPass:V}},{text:s(159),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:"SEPIAPass",value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:s(109),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:s(147),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:s(116),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:s(182),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:b[s(119)]}}},{text:s(167),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:s(171),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:s(118),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(188),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:s(155),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:s(126),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:"VIGNETTE2Pass",value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:"FREICHENPass",value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:s(120),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],E=s(143),A=V,L=null;w[s(113)]({view:s(180),label:s(179),options:D,value:""}).on(s(174),(t=>{P=t[s(175)]}));const M=w[s(187)]({title:"新增",label:s(158)});let C=0;M.on(s(132),(t=>{const n=s;E=Object[n(148)](P)[0],A=Object.values(P)[0],L=Object[n(105)](P)[1];let e=C++,o=w.addFolder({title:E});for(const s in L){let t=L[s];o[n(113)]({view:n(190),label:s,parse:t=>String(t),value:t})}o.addButton({title:n(107)+e,label:n(141)}).on(n(132),(t=>{const e=n;let o=t.target[e(138)].split("~")[1];U[e(144)](o)})).on(n(132),(()=>{o.dispose()}));let r=z(L,t.target.label,t[n(175)]);U[n(176)](E,A,r,e)})),U.onWindowResize(u[s(175)],l[s(175)]);const{onLoop:F}=n();return F((({delta:t})=>{const n=s;S&&(u[n(175)][n(152)]=!0,U[n(115)](),S[n(135)]=_,U[n(183)](v[n(175)],l[n(175)]),U.pass(),U[n(162)](v[n(175)],l[n(175)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),Y=J;function Q(){const t=["prototype","error","table","trace",'{}.constructor("return this")( )',"perspectiveCameraRef","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","call","log","return (function() ","__proto__","6785706hOIJuy","#ffffff","toString","3OdzSAK","1044mDZPDO","postProcessingEditor","3467500lKQdkh","test","10016240CWzdXO","7KywcBl","66KQxVWJ","input","length","6338576atefOI","TresPerspectiveCamera","TresDirectionalLight","while (true) {}","debu","#000000","224015OWQZzB","function *\\( *\\)","9qzutLo","apply","gger","5291752xvqfKv","console","9465ngAhga","stateObject","info","action","chain","TresAmbientLight","manual","constructor","bind"];return(Q=function(){return t})()}!function(t,n){const e=J,o=Q();for(;;)try{if(730657===parseInt(e(309))/1*(parseInt(e(339))/2)+-parseInt(e(332))/3*(parseInt(e(307))/4)+-parseInt(e(335))/5+parseInt(e(329))/6*(-parseInt(e(338))/7)+parseInt(e(342))/8+-parseInt(e(304))/9*(-parseInt(e(337))/10)+-parseInt(e(302))/11*(-parseInt(e(333))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const K=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[J(305)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function J(t,n){const e=Q();return(J=function(t,n){return e[t-=301]})(t,n)}!function(){K(this,(function(){const t=J,n=new RegExp(t(303)),e=new RegExp(t(324),"i"),o=st("init");n[t(336)](o+t(313))&&e.test(o+t(340))?st():o("0")}))()}();const tt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[J(305)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();tt(void 0,(function(){const t=J,n=function(){const t=J;let n;try{n=Function(t(327)+t(322)+");")()}catch(e){n=window}return n}(),e=n[t(308)]=n[t(308)]||{},o=[t(326),"warn",t(311),t(319),"exception",t(320),t(321)];for(let r=0;r<o[t(341)];r++){const n=tt[t(316)][t(318)].bind(tt),s=o[r],a=e[s]||n;n[t(328)]=tt[t(317)](tt),n.toString=a[t(331)][t(317)](a),e[s]=n}}))();const nt={ref:Y(323),position:[600,850,-1500],fov:45,near:.1,far:1e5},et=b(Y(314),{color:Y(330),intensity:2},null,-1),ot=b(Y(344),{position:[100,100,0],intensity:2,color:"#ffffff"},null,-1),rt=d({__name:Y(334),setup(t){const e=Y,r={clearColor:e(301),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(315)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=x("TresCanvas");return h(),y(i,D(r,{"window-size":""}),{default:I((()=>[b(a(343),nt,null,512),_(S(o),U(w(s)),null,16),et,ot,(h(),y(P,null,{default:I((()=>[_($)])),_:1}))])),_:1},16)}}});function st(t){function n(t){const e=J;if("string"==typeof t)return function(t){}[e(316)](e(345)).apply("counter");1!==(""+t/t)[e(341)]||t%20==0?function(){return!0}[e(316)]("debugger")[e(325)](e(312)):function(){return!1}.constructor(e(346)+e(306))[e(305)](e(310)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{rt as default};
