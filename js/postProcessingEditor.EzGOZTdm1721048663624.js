import{a as t,r as n,N as e,d as o}from"./@tresjs.Xiq_TH801721048663624.js";import{a5 as r,T as s,j as a,aj as i,V as c,i as l,s as u,l as v,z as f,W as p,k as d,bU as g}from"./three.HEgnMaTu1721048663624.js";import{P as m}from"./tweakpane.yHWGBmom1721048663624.js";import{d as x,a3 as h,e as y,o as b,f as I,g as _,J as S,j as U,u as w,aj as P,ak as D,al as E,m as A}from"./@vue.ApkyOKE71721048663624.js";import{_ as L}from"./@fesjs.vljLn8mq1721048663624.js";import"./@vueuse.2IVIyoVR1721048663624.js";import"./vue-router.v6lvLH0N1721048663624.js";import"./lodash-es.nFpJXAf-1721048663624.js";import"./@qlin.yHhFDldE1721048663624.js";import"./pinia.gP9-G6bs1721048663624.js";import"./@floating-ui.BPbuo5Gx1721048663624.js";import"./@juggle.7yjBMqoW1721048663624.js";!function(t,n){const e=T,o=F();for(;;)try{if(386909===-parseInt(e(383))/1+parseInt(e(364))/2+-parseInt(e(406))/3*(-parseInt(e(366))/4)+-parseInt(e(371))/5+-parseInt(e(384))/6*(parseInt(e(365))/7)+parseInt(e(405))/8*(parseInt(e(397))/9)+parseInt(e(372))/10*(parseInt(e(400))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const M=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[T(373)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){M(this,(function(){const t=T,n=new RegExp(t(378)),e=new RegExp(t(386),"i"),o=N(t(411));n[t(408)](o+t(377))&&e.test(o+t(357))?N():o("0")}))()}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[T(373)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();C(void 0,(function(){const t=T,n=function(){const t=T;let n;try{n=Function(t(415)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(419)]=n[t(419)]||{},o=[t(420),t(417),t(375),t(421),"exception",t(379),"trace"];for(let r=0;r<o.length;r++){const n=C[t(368)][t(404)].bind(C),s=o[r],a=e[s]||n;n[t(363)]=C.bind(C),n[t(410)]=a.toString[t(388)](a),e[s]=n}}))();function F(){const t=["error","onabort","input","object","Matrix2","Matrix4","type","Vector4","__proto__","204964RtpbKO","3388mQhKIV","24lOjCyB","v3v","constructor","action","WagnerLoadShaderException","2648550LXvknS","1767670sJseYF","apply","\" couldn't be loaded.","info","Vector2","chain","function *\\( *\\)","table","exec","while (true) {}","isArray","119929WbGcgW","8568gDckTb","debu","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","get","bind","length","random","replace","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","gger","send","message","index","1926AMdTaX","hasOwnProperty","responseText","44aZPcoj","ShaderMaterial","now","counter","prototype","23136sCZIjm","149631HpAJUu","lastIndex","test","name","toString","init",'Shader "',"string","onerror","return (function() ","stateObject","warn","Vector3","console","log"];return(F=function(){return t})()}function z(t,n,e){const o=T;if(typeof t!==o(358)||null===t)return t;const r=Array[o(382)](t)?[]:{};for(const s in t)t[o(398)](s)&&(r[s]=z(t[s])),s==n&&(r[n]=e);return r}function T(t,n){const e=F();return(T=function(t,n){return e[t-=357]})(t,n)}function N(t){function n(t){const e=T;if(typeof t===e(413))return function(t){}[e(368)](e(381))[e(373)](e(403));1!==(""+t/t)[e(389)]||t%20==0?function(){return!0}[e(368)](e(385)+e(393)).call(e(369)):function(){return!1}[e(368)]("debugger")[e(373)](e(416)),n(++t)}try{if(t)return n;n(0)}catch(e){}}function B(){const t=["init","while (true) {}","height","removePass","setRenderTarget","chain","exception","123730XraNOH","write","splice","far","Mesh","6ExOUyu","uniforms","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","texture","stateObject","apply","swapBuffers","Scene","stencilBuffer","counter","camera","wrapT","shader","OrthographicCamera","resolution","makePerspective","ClampToEdgeWrapping","quad","MeshBasicMaterial","scale","projectionMatrix","bind","getOfflineTexture","render","passes","magFilter","1845nmcGbV","pass","useRGBA","material","call","front","startTime","innerWidth","clone","error","Stack","push","scene","near","toString","now","read","2knJbhH","1094184eVYiPP","set","width","debu","passItems","RGBAFormat","constructor","input","table","minFilter","warn","settings","loadShadervf","uuid","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","test","type","back","log",'{}.constructor("return this")( )',"string","params","value","innerHeight","setSize","Pass","LinearFilter","copyPass","toScreen","4332230jSVuoW","function *\\( *\\)","wrapS","WebGLRenderTarget","onWindowResize","renderer","length","6065792LVEZXP","tInput","CopyPass","action","75549oEJjHK","RGBFormat","trace","6382715owUzaC","10174136BFbpsH"];return(B=function(){return t})()}const R=O;!function(t,n){const e=O,o=B();for(;;)try{if(846180===-parseInt(e(255))/1*(-parseInt(e(214))/2)+parseInt(e(215))/3+-parseInt(e(251))/4+parseInt(e(258))/5+parseInt(e(272))/6*(-parseInt(e(244))/7)+-parseInt(e(259))/8+-parseInt(e(197))/9*(-parseInt(e(267))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[O(176)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){G(this,(function(){const t=O,n=new RegExp(t(245)),e=new RegExp(t(274),"i"),o=H(t(260));n[t(230)](o+t(265))&&e.test(o+t(222))?H():o("0")}))()}();const j=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[O(176)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function O(t,n){const e=B();return(O=function(t,n){return e[t-=174]})(t,n)}j(void 0,(function(){const t=O,n=function(){const t=O;let n;try{n=Function("return (function() "+t(234)+");")()}catch(e){n=window}return n}(),e=n.console=n.console||{},o=[t(233),t(225),"info",t(206),t(266),t(223),t(257)];for(let r=0;r<o[t(250)];r++){const n=j[t(221)].prototype[t(192)](j),s=o[r],a=e[s]||n;n.__proto__=j[t(192)](j),n.toString=a[t(211)].bind(a),e[s]=n}}))();class V{constructor(t,n){const e=O;this.width=1,this[e(262)]=1,this.settings=n||{},this[e(199)]=this.settings.useRGBA||!1,this[e(249)]=t,this.copyPass=this[e(253)](this.settings),this[e(209)]=new(r[e(178)]),this.quad=new(r[e(271)])(new u(1,1),new(r[e(189)])),this[e(209)].add(this[e(188)]),this[e(181)]=new(r[e(184)])(1,1,1,1,-1e4,1e4),this.front=new(r[e(247)])(1,1,{minFilter:void 0!==this[e(226)][e(224)]?this[e(226)][e(224)]:v,magFilter:void 0!==this[e(226)][e(196)]?this[e(226)][e(196)]:r[e(241)],wrapS:void 0!==this.settings[e(246)]?this[e(226)].wrapS:r[e(187)],wrapT:void 0!==this[e(226)][e(182)]?this[e(226)][e(182)]:r[e(187)],format:this[e(199)]?r[e(220)]:r[e(256)],type:void 0!==this[e(226)][e(231)]?this[e(226)][e(231)]:f,stencilBuffer:void 0===this[e(226)][e(179)]||this[e(226)].stencilBuffer}),this[e(232)]=this[e(202)][e(205)](),this[e(203)]=Date.now(),this[e(195)]={},this[e(207)]={passItems:[],passes:[]}}addPass(t,n,e,o){const r=O;this[r(227)](n);const s={shaderName:t,params:e,uuid:o,shader:this.shader};this.Stack.passItems[r(208)](s)}[R(263)](t){const n=R;for(let e=this[n(207)][n(219)][n(250)]-1;e>=0;e--)this[n(207)][n(219)][e][n(228)]===parseInt(t)&&this[n(207)][n(219)][n(269)](e,1);console.log(this[n(207)][n(219)])}[R(253)](){const t=R;this[t(240)][t(201)](this);return this[t(227)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[R(227)](t){const n=R,e=n(229);return this[n(183)]=function(t,n){const e=T,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,u=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,v={sampler2D:{type:"t",value:()=>new s},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[T(376)])},vec3:{type:"v3",value:()=>new(r[T(418)])},vec4:{type:"v4",value:()=>new(r[T(362)])},bvec2:{type:"v2",value:()=>new a},bvec3:{type:"v3",value:()=>new(r[T(418)])},bvec4:{type:"v4",value:()=>new i},ivec2:{type:"v2",value:()=>new a},ivec3:{type:"v3",value:()=>new c},ivec4:{type:"v4",value:()=>new(r[T(362)])},mat2:{type:"v2",value:()=>new(r[T(359)])},mat3:{type:"v3",value:()=>new l},mat4:{type:"v4",value:()=>new(r[T(360)])}},f={float:{type:"fv",value:()=>[]},vec3:{type:e(367),value:()=>[]}};let p;const d={resolution:{type:"v2",value:new(r[e(376)])(1,1),default:!0},time:{type:"f",value:Date[e(402)](),default:!0},tInput:{type:"t",value:new s,default:!0}};let g,m;for(;null!==(p=o[e(380)](n));)p[e(396)]===o[e(407)]&&o[e(407)]++,g=p[1],m=p[2],d[m]={type:v[g][e(361)],value:v[g].value()};for(;null!==(p=u[e(380)](n));)p.index===o[e(407)]&&o.lastIndex++,g=p[1],m=p[2],p[3],d[m]={type:f[g].type,value:f[g].value()};return new(r[e(401)])({uniforms:d,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(183)]}[R(240)](t){const n=R;this[n(183)]=null,this[n(236)]={}}Reset(){const t=R;this[t(213)]=this[t(202)],this[t(268)]=this[t(232)]}[R(248)](t,n){const e=R,o=window[e(204)],r=window[e(238)];t.setSize(1*o,1*r),n[e(191)][e(186)](70,o/r,n[e(210)],n.far),this[e(239)](o,r);return this[e(193)](o,r,!0)}[R(239)](t,n){const e=R;this.width=t,this.height=n,this[e(181)][e(191)].makeOrthographic(t/-2,t/2,n/2,n/-2,this.camera[e(210)],this[e(181)][e(270)]),this.quad[e(190)][e(216)](t,n,1),this[e(202)][e(239)](t,n),this.back.setSize(t,n)}[R(193)](t,n,e){const o=R;return new p(t,n,{minFilter:r[o(241)],magFilter:r[o(241)],format:e?r[o(220)]:r[o(256)]})}[R(194)](t,n,e,o){const r=R;this.renderer.setRenderTarget(this[r(268)]),this[r(249)].render(t,n),o||this[r(177)]()}[R(177)](){const t=R,n=this[t(268)];this.write=this.read,this[t(213)]=n}[R(198)](){const t=R;for(let n=0;n<this[t(207)][t(219)][t(250)];n++){const e=this[t(207)][t(219)][n][t(183)],o=this.Stack[t(219)][n][t(236)];if(this[t(249)][t(264)](this[t(268)]),e instanceof d){this[t(188)][t(200)]=e,this.quad.material[t(273)].tInput[t(237)]=this[t(213)].texture,this[t(188)][t(200)][t(273)].resolution.value[t(216)](this[t(217)],this[t(262)]),this.quad[t(200)][t(273)].time[t(237)]=.001*(Date[t(212)]()-this[t(203)]);for(const n in o)this[t(188)][t(200)].uniforms[n][t(237)]=o[n];this[t(249)][t(194)](this[t(209)],this[t(181)]),this[t(177)]()}}}[R(243)](t,n){const e=R;this[e(249)][e(264)](null),this.quad[e(200)]=this[e(242)],this[e(188)][e(200)][e(273)][e(252)][e(237)]=this[e(213)][e(174)],this[e(188)][e(200)][e(273)][e(185)].value[e(216)](this[e(217)],this[e(262)]),this[e(249)][e(194)](this.scene,this[e(181)])}}function H(t){function n(t){const e=O;if(typeof t===e(235))return function(t){}[e(221)](e(261))[e(176)](e(180));1!==(""+t/t)[e(250)]||t%20==0?function(){return!0}[e(221)](e(218)+"gger").call(e(254)):function(){return!1}[e(221)](e(218)+"gger")[e(176)](e(175)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const k="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",W=$;!function(t,n){const e=$,o=Z();for(;;)try{if(705976===parseInt(e(516))/1*(parseInt(e(466))/2)+-parseInt(e(513))/3*(parseInt(e(476))/4)+-parseInt(e(530))/5+-parseInt(e(494))/6+parseInt(e(521))/7*(-parseInt(e(477))/8)+parseInt(e(529))/9+parseInt(e(464))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const X=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){X(this,(function(){const t=$,n=new RegExp(t(512)),e=new RegExp(t(471),"i"),o=J("init");n[t(486)](o+t(533))&&e[t(486)](o+"input")?J():o("0")}))()}();const q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[$(514)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function Z(){const t=["Mesh","196791YZXknr","counter","BufferGeometry","call","addBlade","click","material","addFolder","7741251lzWgfO","5534920DTTLKn","toString","error","chain","InvertPass","SEPIAPass","plugins/postProcessing/image/1324.jpg","debu","DOTPass","map","19657850oIOkIa","log","2CISidU","addButton","random","removePass","postProcessing","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","RGBPass","新增通道","gger","value","335264JumEUL","88fHCWUe","toScreen","castShadow","MeshPhongMaterial","POISSONPass","warn","length","console","prototype","test","addPass","autoClearColor","table",'{}.constructor("return this")( )',"VIGNETTE1Pass","SOBELPass","移除~","6513360ThwHrE","Vector2","BoxGeometry","action","push","FREICHENPass","render","change","TOONPass","target","list","CGAPass","FXAAPass","bind","VIGNETTE2Pass","label","CIRCULARPass","return (function() ","function *\\( *\\)","3cBeyyl","apply","constructor","465655DOaZuO","DENOISEPass","exception","后处理类型"];return(Z=function(){return t})()}function $(t,n){const e=Z();return($=function(t,n){return e[t-=463]})(t,n)}q(void 0,(function(){const t=$;let n;try{n=Function(t(511)+t(490)+");")()}catch(r){n=window}const e=n[t(484)]=n[t(484)]||{},o=[t(465),t(482),"info",t(532),t(518),t(489),"trace"];for(let s=0;s<o[t(483)];s++){const n=q.constructor[t(485)][t(507)](q),r=o[s],a=e[r]||n;n.__proto__=q.bind(q),n[t(531)]=a[t(531)][t(507)](a),e[r]=n}}))();function J(t){function n(t){const e=$;if("string"==typeof t)return function(t){}[e(515)]("while (true) {}")[e(514)](e(522));1!==(""+t/t).length||t%20==0?function(){return!0}[e(515)](e(537)+e(474))[e(524)](e(497)):function(){return!1}[e(515)](e(537)+e(474))[e(514)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const K=L(x({__name:W(470),async setup(o){const s=W;let a,i;const{camera:c,renderer:l,scene:u,sizes:v}=t();for(var f=new(r[s(523)]),p=[],d=0;d<100;d++){var x=new(r[s(496)])(100,100,100);x.translate(1500*Math[s(468)](),1500*Math[s(468)](),1500*Math[s(468)]()),p[s(498)](x)}f=g(p);const y=([a,i]=h((()=>e({map:s(536)}))),a=await a,i(),a),b=([a,i]=h((()=>e({map:"plugins/postProcessing/image/1324-normal.jpg"}))),a=await a,i(),a);var I=new(r[s(480)])({map:y[s(463)],normalMap:b[s(463)],normalScale:new(r[s(495)])(.8,-.8),shininess:100}),_=new(r[s(520)])(f,I);_[s(479)]=!0,_.receiveShadow=!0,u[s(475)].add(_);const S=new V(l[s(475)],{useRGBA:!0}),U=new m;let w=null,P=[{text:s(534),value:{InvertPass:k}},{text:s(506),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:s(535),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:"SNOISEPass",value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:"BOXBLURPass",value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:s(517),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:s(505),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:b[s(463)]}}},{text:s(492),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:s(472),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:s(538),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(510),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:s(481),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:s(491),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(508),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:s(499),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:s(502),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],D=s(534),E=k,A=null;U[s(525)]({view:s(504),label:s(519),options:P,value:""}).on(s(501),(t=>{w=t[s(475)]}));const L=U[s(467)]({title:"新增",label:s(473)});let M=0;L.on("click",(t=>{const n=s;D=Object.keys(w)[0],E=Object.values(w)[0],A=Object.values(w)[1];let e=M++,o=U[n(528)]({title:D});for(const s in A){let t=A[s];o[n(525)]({view:"text",label:s,parse:t=>String(t),value:t})}o.addButton({title:n(493)+e,label:"关闭通道"}).on(n(526),(t=>{const e=n;let o=t[e(503)].title.split("~")[1];S[e(469)](o)})).on("click",(()=>{o.dispose()}));let r=z(A,t[n(503)][n(509)],t[n(475)]);S[n(487)](D,E,r,e)})),S.onWindowResize(l[s(475)],c[s(475)]);const{onLoop:C}=n();return C((({delta:t})=>{const n=s;_&&(l[n(475)][n(488)]=!0,S.Reset(),_[n(527)]=I,S[n(500)](u[n(475)],c[n(475)]),S.pass(),S[n(478)](u[n(475)],c[n(475)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),Y=et;!function(t,n){const e=et,o=tt();for(;;)try{if(701885===-parseInt(e(166))/1+-parseInt(e(191))/2*(parseInt(e(192))/3)+-parseInt(e(196))/4+parseInt(e(174))/5*(parseInt(e(181))/6)+parseInt(e(185))/7+-parseInt(e(197))/8+parseInt(e(184))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function tt(){const t=["length","10483038HYfyjF","9470272GgvdgN","gger","while (true) {}","TresCanvas","bind","test","2tFiBBm","330129xZDTbu","constructor","prototype","init","4881332THneIF","8625328evTvsh","TresAmbientLight","console","stateObject","return (function() ","TresDirectionalLight",'{}.constructor("return this")( )',"TresPerspectiveCamera","209291rNCWpN","input","__proto__","table","chain","postProcessingEditor","apply","action","40xJDjkR","string","toString","trace","exception","perspectiveCameraRef","debu","601530bqWgKB","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)"];return(tt=function(){return t})()}!function(){Q(this,(function(){const t=et,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(182),"i"),o=it(t(195));n.test(o+t(170))&&e[t(190)](o+t(167))?it():o("0")}))()}();const nt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function et(t,n){const e=tt();return(et=function(t,n){return e[t-=163]})(t,n)}nt(void 0,(function(){const t=et,n=function(){const t=et;let n;try{n=Function(t(201)+t(164)+");")()}catch(e){n=window}return n}(),e=n[t(199)]=n[t(199)]||{},o=["log","warn","info","error",t(178),t(169),t(177)];for(let r=0;r<o[t(183)];r++){const n=nt[t(193)][t(194)][t(189)](nt),s=o[r],a=e[s]||n;n[t(168)]=nt[t(189)](nt),n[t(176)]=a.toString[t(189)](a),e[s]=n}}))();const ot={ref:Y(179),position:[600,850,-1500],fov:45,near:.1,far:1e5},rt=S(Y(198),{color:"#ffffff",intensity:2},null,-1),st=S(Y(163),{position:[100,100,0],intensity:2,color:"#ffffff"},null,-1),at=x({__name:Y(171),setup(t){const e={clearColor:"#000000",shadows:!0,alpha:!1,useLegacyLights:!0},r={autoRotate:!0,enableDamping:!0},{onLoop:s}=n();return s((({delta:t})=>{})),(t,n)=>{const s=et,a=y(s(188));return b(),I(a,A(e,{"window-size":""}),{default:_((()=>[S(s(165),ot,null,512),U(w(o),P(D(r)),null,16),rt,st,(b(),I(E,null,{default:_((()=>[U(K)])),_:1}))])),_:1},16)}}});function it(t){function n(t){const e=et;if(typeof t===e(175))return function(t){}[e(193)](e(187))[e(172)]("counter");1!==(""+t/t)[e(183)]||t%20==0?function(){return!0}[e(193)](e(180)+e(186)).call(e(173)):function(){return!1}[e(193)](e(180)+"gger").apply(e(200)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{at as default};
