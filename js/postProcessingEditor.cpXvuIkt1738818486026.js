import{m as t,e as n,a as e,o}from"./@tresjs.ZGxFoQtw1738818486026.js";import{V as r,_ as s,l as a,ar as i,b as c,cU as l,s as u,$ as v,W as f,aR as p,cw as d}from"./three.WgQSjl1J1738818486026.js";import{P as m}from"./tweakpane.yDiyAAkA1738818486026.js";import{d as x,a3 as g,e as h,o as y,f as I,g as b,N as _,j as S,u as U,aj as w,ak as P,al as D,m as E}from"./@vue.NRI7TcgI1738818486026.js";import{_ as M}from"./@fesjs.LLTzkpAZ1738818486026.js";import"./@vueuse.Fak-HUpz1738818486026.js";import"./vue-router.CrYQ3hrU1738818486026.js";import"./lodash-es.pklfUAS51738818486026.js";import"./@qlin.yHhFDldE1738818486026.js";import"./pinia.GNZjCSUA1738818486026.js";import"./@floating-ui.BPbuo5Gx1738818486026.js";import"./@juggle.7yjBMqoW1738818486026.js";!function(t,n){const e=z,o=F();for(;;)try{if(796811===parseInt(e(222))/1*(parseInt(e(203))/2)+-parseInt(e(199))/3+-parseInt(e(167))/4+-parseInt(e(214))/5+-parseInt(e(194))/6*(-parseInt(e(201))/7)+parseInt(e(168))/8+parseInt(e(206))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[z(176)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){L(this,(function(){const t=z,n=new RegExp(t(170)),e=new RegExp(t(221),"i"),o=N(t(177));n.test(o+t(172))&&e[t(182)](o+t(192))?N():o("0")}))()}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[z(176)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function F(){const t=["3171835RdlsaZ","Matrix4","message","Vector4","debu","gger","Matrix3","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","302909qaXOXg","table","length","string","bind","return (function() ","now","onload","value","toString","3669328UFFZzx","758672qTsksr","__proto__","function *\\( *\\)","error","chain","random","responseText","warn","apply","init","onabort","constructor",'Shader "',"onerror","test","Vector2","Texture","log","WagnerLoadShaderException","\" couldn't be loaded.","prototype","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","type","call","input","replace","6xuCybd","send","counter","v3v","open","3142560ZsNHQz","name","288085LrnLRL","trace","6IkGpve","object",'{}.constructor("return this")( )',"21161826YYqkjz",'" load was aborted.',"isArray","while (true) {}","hasOwnProperty","Vector3","lastIndex","exec"];return(F=function(){return t})()}A(void 0,(function(){const t=z;let n;try{n=Function(t(227)+t(205)+");")()}catch(r){n=window}const e=n.console=n.console||{},o=[t(185),t(175),"info",t(171),"exception",t(223),t(202)];for(let s=0;s<o.length;s++){const n=A[t(179)][t(188)].bind(A),r=o[s],a=e[r]||n;n[t(169)]=A[t(226)](A),n[t(166)]=a[t(166)][t(226)](a),e[r]=n}}))();function z(t,n){const e=F();return(z=function(t,n){return e[t-=164]})(t,n)}function C(t,n,e){const o=z;if(typeof t!==o(204)||null===t)return t;const r=Array[o(208)](t)?[]:{};for(const s in t)t[o(210)](s)&&(r[s]=C(t[s])),s==n&&(r[n]=e);return r}function N(t){function n(t){const e=z;if(typeof t===e(225))return function(t){}[e(179)](e(209))[e(176)](e(196));1!==(""+t/t)[e(224)]||t%20==0?function(){return!0}[e(179)](e(218)+"gger")[e(191)]("action"):function(){return!1}[e(179)](e(218)+e(219))[e(176)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const R=V;!function(t,n){const e=V,o=B();for(;;)try{if(566483===-parseInt(e(285))/1*(-parseInt(e(245))/2)+-parseInt(e(262))/3*(-parseInt(e(313))/4)+-parseInt(e(235))/5+-parseInt(e(246))/6*(parseInt(e(270))/7)+parseInt(e(284))/8*(parseInt(e(308))/9)+parseInt(e(292))/10*(-parseInt(e(239))/11)+parseInt(e(224))/12*(parseInt(e(295))/13))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const T=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[V(218)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function B(){const t=["action","wrapT","trace","getOfflineTexture","console","error","removePass","scale","550143sGCwuj","length","splice","add","Mesh","84MnFlWf","front","CopyPass","LinearFilter","setSize","addPass","makeOrthographic","constructor","apply","gger","magFilter","type","height","call","24aFFxwP","resolution","push","swapBuffers","render","OrthographicCamera","copyPass","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","write","input","useRGBA","1335160bythfx","renderer","shader","far","11WRcfyi","near","debu","counter","string","settings","4tnJJqe","6577242mMxhBa","ClampToEdgeWrapping","wrapS","Pass","exception","log","Stack","params","toScreen","__proto__","while (true) {}","value","bind","chain","read","back","161439uOoLJa","material","startTime","minFilter","UnsignedByteType","stateObject","toString","setRenderTarget","7nbEoyq","RGBFormat","time","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","camera","width","texture","now","test","loadShadervf","scene",'{}.constructor("return this")( )',"uniforms","Scene","48WzskWn","176319DdyVVe","passes","pass","uuid","stencilBuffer","innerWidth","quad","3706030wjlGyD","ShaderMaterial","tInput","2930538laKffQ","set","RGBAFormat","passItems","projectionMatrix"];return(B=function(){return t})()}!function(){T(this,(function(){const t=V,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(273),"i"),o=O("init");n.test(o+t(259))&&e[t(278)](o+t(233))?O():o("0")}))()}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[V(218)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();G(void 0,(function(){const t=V,n=function(){const t=V;let n;try{n=Function("return (function() "+t(281)+");")()}catch(e){n=window}return n}(),e=n[t(304)]=n[t(304)]||{},o=[t(251),"warn","info",t(305),t(250),"table",t(302)];for(let r=0;r<o[t(309)];r++){const n=G[t(217)].prototype[t(258)](G),s=o[r],a=e[s]||n;n[t(255)]=G[t(258)](G),n[t(268)]=a[t(268)].bind(a),e[s]=n}}))();class j{constructor(t,n){const e=V;this[e(275)]=1,this[e(222)]=1,this[e(244)]=n||{},this[e(234)]=this.settings.useRGBA||!1,this[e(236)]=t,this[e(230)]=this.CopyPass(this[e(244)]),this[e(280)]=new(s[e(283)]),this[e(291)]=new(s[e(312)])(new u(1,1),new v),this.scene[e(311)](this[e(291)]),this.camera=new(s[e(229)])(1,1,1,1,-1e4,1e4),this[e(211)]=new f(1,1,{minFilter:void 0!==this[e(244)].minFilter?this[e(244)][e(265)]:s[e(213)],magFilter:void 0!==this.settings.magFilter?this[e(244)][e(220)]:s[e(213)],wrapS:void 0!==this[e(244)][e(248)]?this[e(244)][e(248)]:s[e(247)],wrapT:void 0!==this[e(244)][e(301)]?this[e(244)][e(301)]:s[e(247)],format:this[e(234)]?s[e(297)]:s[e(271)],type:void 0!==this[e(244)][e(221)]?this[e(244)][e(221)]:s[e(266)],stencilBuffer:void 0===this.settings.stencilBuffer||this[e(244)][e(289)]}),this[e(261)]=this[e(211)].clone(),this[e(264)]=Date[e(277)](),this[e(286)]={},this.Stack={passItems:[],passes:[]}}[R(215)](t,n,e,o){const r=R;this[r(279)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(237)]};this.Stack[r(298)][r(226)](s)}[R(306)](t){const n=R;for(let e=this[n(252)][n(298)][n(309)]-1;e>=0;e--)this[n(252)][n(298)][e][n(288)]===parseInt(t)&&this[n(252)][n(298)][n(310)](e,1);console[n(251)](this[n(252)].passItems)}[R(212)](){const t=R;this[t(249)][t(223)](this);return this[t(279)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[R(279)](t){const n=R,e=n(231);return this.shader=function(t,n){const e=z,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,u=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,v={sampler2D:{type:"t",value:()=>new(s[z(184)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new r},vec3:{type:"v3",value:()=>new(s[z(211)])},vec4:{type:"v4",value:()=>new i},bvec2:{type:"v2",value:()=>new(s[z(183)])},bvec3:{type:"v3",value:()=>new(s[z(211)])},bvec4:{type:"v4",value:()=>new(s[z(217)])},ivec2:{type:"v2",value:()=>new(s[z(183)])},ivec3:{type:"v3",value:()=>new c},ivec4:{type:"v4",value:()=>new(s[z(217)])},mat2:{type:"v2",value:()=>new l},mat3:{type:"v3",value:()=>new(s[z(220)])},mat4:{type:"v4",value:()=>new(s[z(215)])}},f={float:{type:"fv",value:()=>[]},vec3:{type:e(197),value:()=>[]}};let p;const d={resolution:{type:"v2",value:new r(1,1),default:!0},time:{type:"f",value:Date[e(228)](),default:!0},tInput:{type:"t",value:new(s[e(184)]),default:!0}};let m,x;for(;null!==(p=o[e(213)](n));)p.index===o[e(212)]&&o[e(212)]++,m=p[1],x=p[2],d[x]={type:v[m][e(190)],value:v[m][e(165)]()};for(;null!==(p=u[e(213)](n));)p.index===o[e(212)]&&o[e(212)]++,m=p[1],x=p[2],p[3],d[x]={type:f[m][e(190)],value:f[m][e(165)]()};return new a({uniforms:d,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(237)]}Pass(t){const n=R;this[n(237)]=null,this[n(253)]={}}Reset(){const t=R;this.read=this[t(211)],this[t(232)]=this[t(261)]}onWindowResize(t,n){const e=R,o=window[e(290)],r=window.innerHeight;t[e(214)](1*o,1*r),n[e(299)].makePerspective(70,o/r,n.near,n[e(238)]),this[e(214)](o,r);return this[e(303)](o,r,!0)}[R(214)](t,n){const e=R;this[e(275)]=t,this[e(222)]=n,this.camera.projectionMatrix[e(216)](t/-2,t/2,n/2,n/-2,this[e(274)][e(240)],this[e(274)].far),this.quad[e(307)][e(296)](t,n,1),this[e(211)][e(214)](t,n),this[e(261)].setSize(t,n)}[R(303)](t,n,e){const o=R;return new f(t,n,{minFilter:s[o(213)],magFilter:s[o(213)],format:e?p:s[o(271)]})}render(t,n,e,o){const r=R;this.renderer[r(269)](this[r(232)]),this.renderer[r(228)](t,n),o||this.swapBuffers()}swapBuffers(){const t=R,n=this[t(232)];this[t(232)]=this[t(260)],this[t(260)]=n}[R(287)](){const t=R;for(let n=0;n<this[t(252)].passItems[t(309)];n++){const e=this[t(252)].passItems[n][t(237)],o=this.Stack[t(298)][n].params;if(this.renderer[t(269)](this[t(232)]),e instanceof s[t(293)]){this[t(291)][t(263)]=e,this.quad.material[t(282)][t(294)].value=this.read[t(276)],this[t(291)].material.uniforms[t(225)].value.set(this[t(275)],this[t(222)]),this.quad[t(263)].uniforms[t(272)][t(257)]=.001*(Date[t(277)]()-this[t(264)]);for(const n in o)this[t(291)][t(263)][t(282)][n].value=o[n];this[t(236)][t(228)](this[t(280)],this[t(274)]),this[t(227)]()}}}[R(254)](t,n){const e=R;this.renderer[e(269)](null),this[e(291)][e(263)]=this[e(230)],this[e(291)].material[e(282)][e(294)].value=this[e(260)][e(276)],this[e(291)].material[e(282)].resolution.value.set(this[e(275)],this[e(222)]),this.renderer[e(228)](this[e(280)],this[e(274)])}}function V(t,n){const e=B();return(V=function(t,n){return e[t-=211]})(t,n)}function O(t){function n(t){const e=V;if(typeof t===e(243))return function(t){}[e(217)](e(256))[e(218)](e(242));1!==(""+t/t).length||t%20==0?function(){return!0}[e(217)]("debu"+e(219))[e(223)](e(300)):function(){return!1}.constructor(e(241)+"gger")[e(218)](e(267)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const k="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}";!function(t,n){const e=q,o=X();for(;;)try{if(438081===parseInt(e(301))/1+parseInt(e(342))/2+-parseInt(e(367))/3*(-parseInt(e(337))/4)+-parseInt(e(313))/5+parseInt(e(318))/6*(-parseInt(e(370))/7)+parseInt(e(310))/8+parseInt(e(297))/9*(-parseInt(e(295))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(330)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){H(this,(function(){const t=q,n=new RegExp(t(369)),e=new RegExp(t(343),"i"),o=Z(t(307));n.test(o+t(323))&&e[t(321)](o+t(303))?Z():o("0")}))()}();const W=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(330)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function X(){const t=["target","536736FMRhFd","return (function() ","input","addPass","title","RGBPass","init","Vector2","stateObject","4350144RcTZnM","error","plugins/postProcessing/image/1324-normal.jpg","2246655ExxOsJ","trace","split","dispose","Mesh","6bVWVRG","prototype","string","test","map","chain","InvertPass","bind","while (true) {}","FREICHENPass","log","constructor","apply","exception","FXAAPass","text","removePass",'{}.constructor("return this")( )',"change","259748QWFlvU","castShadow","关闭通道","移除~","__proto__","967686fwgLjz","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","SEPIAPass","后处理类型","values","click","add","render","BoxGeometry","CGAPass","toString","console","autoClearColor","warn","DOTPass","BufferGeometry","VIGNETTE1Pass","addBlade","gger","value","length","table","addButton","DENOISEPass","call","18thXbQM","onWindowResize","function *\\( *\\)","2190979yzNrLh","MeshPhongMaterial","POISSONPass","400VjcSbQ","新增通道","169551nfRzMs","debu","random"];return(X=function(){return t})()}function q(t,n){const e=X();return(q=function(t,n){return e[t-=295]})(t,n)}W(void 0,(function(){const t=q,n=function(){const t=q;let n;try{n=Function(t(302)+t(335)+");")()}catch(e){n=window}return n}(),e=n[t(353)]=n[t(353)]||{},o=[t(328),t(355),"info",t(311),t(331),t(363),t(314)];for(let r=0;r<o[t(362)];r++){const n=W[t(329)][t(319)][t(325)](W),s=o[r],a=e[s]||n;n[t(341)]=W[t(325)](W),n.toString=a[t(352)][t(325)](a),e[s]=n}}))();function Z(t){function n(t){const e=q;if(typeof t===e(320))return function(t){}.constructor(e(326))[e(330)]("counter");1!==(""+t/t)[e(362)]||t%20==0?function(){return!0}[e(329)](e(298)+e(360))[e(366)]("action"):function(){return!1}[e(329)](e(298)+e(360)).apply(e(309)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const $=M(x({__name:"postProcessing",async setup(o){const r=q;let a,i;const{camera:c,renderer:l,scene:u,sizes:v}=t();for(var f=new(s[r(357)]),p=[],x=0;x<100;x++){var h=new(s[r(350)])(100,100,100);h.translate(1500*Math[r(299)](),1500*Math[r(299)](),1500*Math[r(299)]()),p.push(h)}f=d(p);const y=([a,i]=g((()=>e({map:"plugins/postProcessing/image/1324.jpg"}))),a=await a,i(),a),I=([a,i]=g((()=>e({map:r(312)}))),a=await a,i(),a);var b=new(s[r(371)])({map:y.map,normalMap:I.map,normalScale:new(s[r(308)])(.8,-.8),shininess:100}),_=new(s[r(317)])(f,b);_[r(338)]=!0,_.receiveShadow=!0,u[r(361)][r(348)](_);const S=new j(l[r(361)],{useRGBA:!0}),U=new m;let w=null,P=[{text:r(324),value:{InvertPass:k}},{text:r(332),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:r(344),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:"SNOISEPass",value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:"BOXBLURPass",value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:r(365),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:r(351),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:I[r(322)]}}},{text:"SOBELPass",value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:r(306),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:r(356),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:"CIRCULARPass",value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:r(372),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:r(358),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:"VIGNETTE2Pass",value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:r(327),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:"TOONPass",value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],D=r(324),E=k,M=null;U[r(359)]({view:"list",label:r(345),options:P,value:""}).on(r(336),(t=>{w=t[r(361)]}));const L=U[r(364)]({title:"新增",label:r(296)});let A=0;L.on("click",(t=>{const n=r;D=Object.keys(w)[0],E=Object[n(346)](w)[0],M=Object[n(346)](w)[1];let e=A++,o=U.addFolder({title:D});for(const r in M){let t=M[r];o[n(359)]({view:n(333),label:r,parse:t=>String(t),value:t})}o[n(364)]({title:n(340)+e,label:n(339)}).on(n(347),(t=>{const e=n;let o=t[e(300)][e(305)][e(315)]("~")[1];S[e(334)](o)})).on("click",(()=>{o[n(316)]()}));let s=C(M,t[n(300)].label,t[n(361)]);S[n(304)](D,E,s,e)})),S[r(368)](l[r(361)],c[r(361)]);const{onLoop:F}=n();return F((({delta:t})=>{const n=r;_&&(l[n(361)][n(354)]=!0,S.Reset(),_.material=b,S[n(349)](u[n(361)],c[n(361)]),S.pass(),S.toScreen(u[n(361)],c[n(361)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),Q=tt;!function(t,n){const e=tt,o=Y();for(;;)try{if(292866===-parseInt(e(316))/1+parseInt(e(329))/2*(-parseInt(e(327))/3)+parseInt(e(312))/4+parseInt(e(315))/5*(parseInt(e(304))/6)+-parseInt(e(292))/7*(-parseInt(e(301))/8)+parseInt(e(288))/9*(parseInt(e(321))/10)+parseInt(e(293))/11*(-parseInt(e(311))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const J=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[tt(324)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){J(this,(function(){const t=tt,n=new RegExp(t(296)),e=new RegExp(t(306),"i"),o=ot(t(303));n[t(320)](o+t(323))&&e[t(320)](o+"input")?ot():o("0")}))()}();const K=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function Y(){const t=["54971DHvCUB","691042pAWyVR","perspectiveCameraRef","length","function *\\( *\\)","toString","#ffffff","TresCanvas","debu","376icLEdQ","warn","init","30ujOtEs","#000000","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","table","manual","stateObject","TresAmbientLight","120poIgvF","936516uKhzYP","bind","gger","498865JopCVB","232607soqedB","console","TresDirectionalLight","prototype","test","50910rXebKw","while (true) {}","chain","apply","trace","return (function() ","3ESDFVp","postProcessingEditor","782618QnMyyK","action","783ZIoXUC","error","exception","constructor"];return(Y=function(){return t})()}function tt(t,n){const e=Y();return(tt=function(t,n){return e[t-=287]})(t,n)}K(void 0,(function(){const t=tt,n=function(){const t=tt;let n;try{n=Function(t(326)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(317)]=n[t(317)]||{},o=["log",t(302),"info",t(289),t(290),t(307),t(325)];for(let r=0;r<o[t(295)];r++){const n=K[t(291)][t(319)][t(313)](K),s=o[r],a=e[s]||n;n.__proto__=K[t(313)](K),n[t(297)]=a[t(297)][t(313)](a),e[s]=n}}))();const nt={ref:Q(294),position:[600,850,-1500],fov:45,near:.1,far:1e5},et=x({__name:Q(328),setup(t){const e=Q,r={clearColor:e(305),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(308)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=h(a(299));return y(),I(i,E(r,{"window-size":""}),{default:b((()=>[_("TresPerspectiveCamera",nt,null,512),S(U(o),w(P(s)),null,16),n[0]||(n[0]=_(a(310),{color:a(298),intensity:2},null,-1)),n[1]||(n[1]=_(a(318),{position:[100,100,0],intensity:2,color:a(298)},null,-1)),(y(),I(D,null,{default:b((()=>[S($)])),_:1}))])),_:1},16)}}});function ot(t){function n(t){const e=tt;if("string"==typeof t)return function(t){}[e(291)](e(322)).apply("counter");1!==(""+t/t)[e(295)]||t%20==0?function(){return!0}[e(291)](e(300)+"gger").call(e(287)):function(){return!1}.constructor("debu"+e(314)).apply(e(309)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{et as default};
