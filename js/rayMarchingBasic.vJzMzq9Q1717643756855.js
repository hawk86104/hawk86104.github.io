import{a5 as f,at as g,aL as i,aa as w,o as d,c as T,a1 as e,ae as m,af as v,ad as _,ab as M,r as C,C as L,J as x,ac as y,a as u,T as P,ag as b}from"./vendor.iBV-vwSJ1717643756855.js";const B="varying vec2 vUv;\nvoid main(){\n	gl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.);\n	vUv=uv;\n}",H="#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec3 u_mouse;\nuniform float u_time;\nvarying vec2 vUv;\nfloat map(vec3 p){\n  return length(p)-1.;\n}\nvoid main(){\n  vec3 ro=vec3(0.,0.,-3.);//起始位置\n  vec3 rd=normalize(vec3(vUv-.5,1.));//方向\n  float t=0.;\n  vec3 color=vec3(0.);\n  for(int i=0;i<80;i++){\n    vec3 p=ro+rd*t;\n    float d=map(p);\n    t+=d;\n    //优化效率\n    if(t>100.||d<.001){\n      break;\n    }\n    \n  }\n  color=vec3(t)*.2;\n  gl_FragColor=vec4(color,1.);\n  \n}",S=["rotation"],R={ref:"TresTubeGeometryRef",args:[1e3,1e3]},V=f({__name:"rayMarchingMaterialBasic",setup(p){const{onLoop:a,onAfterLoop:r}=_(),n={transparent:!0,depthWrite:!0,depthTest:!0,side:g,vertexShader:B,fragmentShader:H,uniforms:{u_resolution:{value:new i(window.innerWidth,window.innerHeight)},u_mouse:{value:new i(0,0)},u_time:{value:0}}},s=window.innerWidth/2,c=window.innerHeight/2;let o=0,l=0;function h(t){o=t.clientX-s,l=t.clientY-c}return document.addEventListener("mousemove",h,!1),w(()=>{}),a(({elapsed:t})=>{n.uniforms.u_time.value+=.001,n.uniforms.u_mouse.value=new i(o,l)}),r(()=>{}),(t,A)=>(d(),T("TresMesh",{ref:"MeshRef",rotation:[Math.PI/2,0,0]},[e("TresPlaneGeometry",R,null,512),e("TresShaderMaterial",m(v(n)),null,16)],8,S))}}),k={ref:"perspectiveCameraRef",position:[0,800,0],fov:45,near:1,far:1e4},E=e("TresAmbientLight",{color:"#ffffff"},null,-1),G=e("TresDirectionalLight",{position:[100,100,0],intensity:.5,color:"#ffffff"},null,-1),U=e("TresAxesHelper",{args:[1e3],position:[0,19,0]},null,-1),z=e("TresGridHelper",{args:[6e3,100],position:[0,19,0]},null,-1),W=f({__name:"rayMarchingBasic",setup(p){const a={clearColor:"#000000",shadows:!0,alpha:!1,useLegacyLights:!0},r={autoRotate:!0,enableDamping:!0},{onLoop:n}=_();return n(({delta:s})=>{}),M(()=>{}),(s,c)=>{const o=C("TresCanvas");return d(),L(o,y(a,{"window-size":""}),{default:x(()=>[e("TresPerspectiveCamera",k,null,512),u(P(b),m(v(r)),null,16),E,G,u(V),U,z]),_:1},16)}}});export{W as default};
