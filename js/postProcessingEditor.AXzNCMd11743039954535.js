import{m as t,e as n,a as e,o}from"./@tresjs.05J-Im0t1743039954535.js";import{V as r,a9 as a,_ as s,l as i,A as c,aZ as l,r as u,aW as v,B as f,c6 as p}from"./three.XuMWWlrU1743039954535.js";import{P as m}from"./tweakpane.ivGeiIdz1743039954535.js";import{d,a3 as x,e as g,o as h,f as y,g as I,N as b,j as _,u as S,aj as U,ak as w,al as P,m as D}from"./@vue.C4dqouNn1743039954535.js";import{_ as E}from"./@fesjs.q_HvOfeM1743039954535.js";import"./postprocessing.YRVqsIkW1743039954535.js";import"./@vueuse.NzAeD-Dt1743039954535.js";import"./vue-router.F5lDLjOj1743039954535.js";import"./lodash-es.p1wj6C0b1743039954535.js";import"./@qlin.o0hjOMCg1743039954535.js";import"./pinia.MiZyWHUj1743039954535.js";import"./@floating-ui.HzHndBae1743039954535.js";import"./@juggle.4EyLec-41743039954535.js";function A(t,n){const e=C();return A=function(t,n){return e[t-=183]},A(t,n)}!function(t,n){const e=A,o=C();for(;;)try{if(184679===-parseInt(e(201))/1+parseInt(e(194))/2+parseInt(e(231))/3*(-parseInt(e(197))/4)+-parseInt(e(235))/5+-parseInt(e(226))/6+parseInt(e(202))/7*(-parseInt(e(239))/8)+parseInt(e(217))/9*(parseInt(e(233))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[A(214)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){L(this,(function(){const t=A,n=new RegExp(t(193)),e=new RegExp(t(184),"i"),o=z(t(240));n[t(192)](o+t(187))&&e[t(192)](o+t(198))?z():o("0")}))()}();const M=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[A(214)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function C(){const t=["call","198980UdfrlG","input","random","Vector4","175518ximkOG","195769kCwTFh","constructor","info","exec","message","index","ShaderMaterial","Matrix2","onerror","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","trace","warn","apply","value","length","8109702GYxwJy","hasOwnProperty","send","stateObject",'Shader "',"Matrix4","name","v3v","string","1032936wVNHbT","debu","__proto__","Vector3","gger","3fzWHWC","isArray","10ddnWsB","bind","243475fDjKsh","counter",'" load was aborted.',"onabort","104KkuKyO","init","responseText","object","WagnerLoadShaderException","console","return (function() ","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","exception",'{}.constructor("return this")( )',"chain","Matrix3","lastIndex","toString","Vector2","test","function *\\( *\\)","186572xwRboX","now"];return(C=function(){return t})()}M(void 0,(function(){const t=A,n=function(){const t=A;let n;try{n=Function(t(183)+t(186)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(244)]||{},o=["log",t(213),t(204),"error",t(185),"table",t(212)];for(let r=0;r<o[t(216)];r++){const n=M.constructor.prototype[t(234)](M),a=o[r],s=e[a]||n;n[t(228)]=M[t(234)](M),n[t(190)]=s[t(190)][t(234)](s),e[a]=n}}))();function F(t,n,e){const o=A;if(typeof t!==o(242)||null===t)return t;const r=Array[o(232)](t)?[]:{};for(const a in t)t[o(218)](a)&&(r[a]=F(t[a])),a==n&&(r[n]=e);return r}function z(t){function n(t){const e=A;if(typeof t===e(225))return function(t){}[e(203)]("while (true) {}")[e(214)](e(236));1!==(""+t/t)[e(216)]||t%20==0?function(){return!0}[e(203)](e(227)+e(230))[e(196)]("action"):function(){return!1}[e(203)](e(227)+e(230))[e(214)](e(220)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const T=R;!function(t,n){const e=R,o=B();for(;;)try{if(592279===parseInt(e(217))/1+-parseInt(e(236))/2+-parseInt(e(252))/3*(-parseInt(e(198))/4)+-parseInt(e(208))/5*(parseInt(e(178))/6)+parseInt(e(157))/7+parseInt(e(216))/8+parseInt(e(192))/9*(-parseInt(e(253))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const N=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(234)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){N(this,(function(){const t=R,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(203),"i"),o=O(t(211));n[t(219)](o+"chain")&&e[t(219)](o+"input")?O():o("0")}))()}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function R(t,n){const e=B();return R=function(t,n){return e[t-=156]},R(t,n)}function B(){const t=["LinearFilter","projectionMatrix","render","toString","push","Pass","PlaneGeometry","front","length","__proto__","material","swapBuffers","apply","error","751888DaNmgc","string","constructor","Stack","wrapT","minFilter","value","CopyPass","now","OrthographicCamera","far","uniforms","passItems","console","useRGBA","set","478419UPeTFb","3364850hqHSaC","Reset","type","scene","3591357PuKykC","Scene","innerWidth","read","RGBFormat","wrapS","texture","near","back","renderer","stencilBuffer","pass","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","bind","UnsignedByteType","counter","warn","uuid","ClampToEdgeWrapping","params","setRenderTarget","1968eAGmaW","quad","call","RGBAFormat","clone","write","startTime","setSize","shader","trace","tInput","makeOrthographic","settings","height","27anEnIh","scale","magFilter","info","toScreen",'{}.constructor("return this")( )',"24WsCtGN","time","innerHeight","removePass","table","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","resolution","camera","WebGLRenderTarget","debu","9420hITULt","loadShadervf","return (function() ","init","makePerspective","action","width","ShaderMaterial","1447696KwvqUL","944779DZbdqK","gger","test","exception","add"];return(B=function(){return t})()}G(void 0,(function(){const t=R;let n;try{n=Function(t(210)+t(197)+");")()}catch(r){n=window}const e=n[t(249)]=n[t(249)]||{},o=["log",t(173),t(195),t(235),t(220),t(202),t(187)];for(let a=0;a<o[t(230)];a++){const n=G.constructor.prototype[t(170)](G),r=o[a],s=e[r]||n;n[t(231)]=G[t(170)](G),n.toString=s[t(225)][t(170)](s),e[r]=n}}))();class j{constructor(t,n){const e=R;this[e(214)]=1,this.height=1,this[e(190)]=n||{},this[e(250)]=this.settings[e(250)]||!1,this[e(166)]=t,this.copyPass=this[e(243)](this[e(190)]),this[e(156)]=new(s[e(158)]),this[e(179)]=new i(new(s[e(228)])(1,1),new c),this[e(156)][e(221)](this[e(179)]),this[e(205)]=new(s[e(245)])(1,1,1,1,-1e4,1e4),this[e(229)]=new(s[e(206)])(1,1,{minFilter:void 0!==this[e(190)].minFilter?this.settings[e(241)]:s[e(222)],magFilter:void 0!==this[e(190)][e(194)]?this[e(190)].magFilter:s[e(222)],wrapS:void 0!==this[e(190)][e(162)]?this[e(190)].wrapS:l,wrapT:void 0!==this[e(190)][e(240)]?this.settings[e(240)]:s[e(175)],format:this[e(250)]?s[e(181)]:s[e(161)],type:void 0!==this.settings[e(255)]?this[e(190)].type:s[e(171)],stencilBuffer:void 0===this.settings[e(167)]||this[e(190)][e(167)]}),this[e(165)]=this.front[e(182)](),this.startTime=Date[e(244)](),this.passes={},this[e(239)]={passItems:[],passes:[]}}addPass(t,n,e,o){const r=R;this.loadShadervf(n);const a={shaderName:t,params:e,uuid:o,shader:this[r(186)]};this.Stack[r(248)][r(226)](a)}[T(201)](t){const n=T;for(let e=this.Stack[n(248)][n(230)]-1;e>=0;e--)this[n(239)][n(248)][e][n(174)]===parseInt(t)&&this[n(239)][n(248)].splice(e,1);console.log(this.Stack[n(248)])}[T(243)](){const t=T;this[t(227)][t(180)](this);return this[t(209)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[T(209)](t){const n=T,e=n(169);return this[n(186)]=function(t,n){const e=A,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,i=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,c={sampler2D:{type:"t",value:()=>new a},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(s[A(191)])},vec3:{type:"v3",value:()=>new(s[A(229)])},vec4:{type:"v4",value:()=>new(s[A(200)])},bvec2:{type:"v2",value:()=>new(s[A(191)])},bvec3:{type:"v3",value:()=>new(s[A(229)])},bvec4:{type:"v4",value:()=>new(s[A(200)])},ivec2:{type:"v2",value:()=>new(s[A(191)])},ivec3:{type:"v3",value:()=>new(s[A(229)])},ivec4:{type:"v4",value:()=>new(s[A(200)])},mat2:{type:"v2",value:()=>new(s[A(209)])},mat3:{type:"v3",value:()=>new(s[A(188)])},mat4:{type:"v4",value:()=>new(s[A(222)])}},l={float:{type:"fv",value:()=>[]},vec3:{type:e(224),value:()=>[]}};let u;const v={resolution:{type:"v2",value:new r(1,1),default:!0},time:{type:"f",value:Date[e(195)](),default:!0},tInput:{type:"t",value:new a,default:!0}};let f,p;for(;null!==(u=o[e(205)](n));)u[e(207)]===o[e(189)]&&o.lastIndex++,f=u[1],p=u[2],v[p]={type:c[f].type,value:c[f][e(215)]()};for(;null!==(u=i.exec(n));)u[e(207)]===o[e(189)]&&o.lastIndex++,f=u[1],p=u[2],u[3],v[p]={type:l[f].type,value:l[f].value()};return new(s[e(208)])({uniforms:v,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(186)]}[T(227)](t){const n=T;this[n(186)]=null,this[n(176)]={}}[T(254)](){const t=T;this[t(160)]=this[t(229)],this[t(183)]=this[t(165)]}onWindowResize(t,n){const e=T,o=window[e(159)],r=window[e(200)];t[e(185)](1*o,1*r),n[e(223)][e(212)](70,o/r,n[e(164)],n[e(246)]),this[e(185)](o,r);return this.getOfflineTexture(o,r,!0)}[T(185)](t,n){const e=T;this[e(214)]=t,this.height=n,this[e(205)].projectionMatrix[e(189)](t/-2,t/2,n/2,n/-2,this.camera.near,this[e(205)].far),this[e(179)][e(193)][e(251)](t,n,1),this[e(229)][e(185)](t,n),this[e(165)][e(185)](t,n)}getOfflineTexture(t,n,e){const o=T;return new(s[o(206)])(t,n,{minFilter:s[o(222)],magFilter:u,format:e?v:s[o(161)]})}[T(224)](t,n,e,o){const r=T;this[r(166)].setRenderTarget(this[r(183)]),this[r(166)][r(224)](t,n),o||this[r(233)]()}[T(233)](){const t=T,n=this[t(183)];this.write=this[t(160)],this[t(160)]=n}[T(168)](){const t=T;for(let n=0;n<this.Stack[t(248)][t(230)];n++){const e=this[t(239)][t(248)][n].shader,o=this[t(239)][t(248)][n].params;if(this.renderer[t(177)](this.write),e instanceof s[t(215)]){this[t(179)].material=e,this[t(179)][t(232)][t(247)][t(188)].value=this[t(160)][t(163)],this.quad[t(232)][t(247)][t(204)][t(242)][t(251)](this[t(214)],this.height),this[t(179)].material[t(247)][t(199)][t(242)]=.001*(Date[t(244)]()-this[t(184)]);for(const n in o)this[t(179)].material.uniforms[n][t(242)]=o[n];this.renderer[t(224)](this[t(156)],this[t(205)]),this[t(233)]()}}}[T(196)](t,n){const e=T;this[e(166)][e(177)](null),this[e(179)].material=this.copyPass,this[e(179)][e(232)][e(247)][e(188)][e(242)]=this[e(160)].texture,this[e(179)][e(232)][e(247)][e(204)][e(242)][e(251)](this.width,this[e(191)]),this[e(166)][e(224)](this[e(156)],this[e(205)])}}function O(t){function n(t){const e=R;if(typeof t===e(237))return function(t){}[e(238)]("while (true) {}")[e(234)](e(172));1!==(""+t/t)[e(230)]||t%20==0?function(){return!0}[e(238)](e(207)+e(218)).call(e(213)):function(){return!1}.constructor(e(207)+e(218))[e(234)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const V="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",k=X;!function(t,n){const e=X,o=q();for(;;)try{if(555859===-parseInt(e(440))/1+parseInt(e(456))/2*(parseInt(e(408))/3)+-parseInt(e(451))/4+parseInt(e(422))/5*(-parseInt(e(421))/6)+-parseInt(e(418))/7*(-parseInt(e(424))/8)+parseInt(e(455))/9+-parseInt(e(445))/10*(parseInt(e(405))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[X(475)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){H(this,(function(){const t=X,n=new RegExp(t(419)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=Z("init");n[t(459)](o+t(453))&&e[t(459)](o+"input")?Z():o("0")}))()}();const W=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function X(t,n){const e=q();return X=function(t,n){return e[t-=395]},X(t,n)}function q(){const t=["bind","6394905TURwhV","2056ZpLRHZ","values","while (true) {}","test","value","addFolder","新增通道","mergeGeometries","keys","console","action","add","CGAPass","info","Mesh","removePass","dispose","addBlade","CIRCULARPass","apply","SEPIAPass","DOTPass","Vector2","map","MeshPhongMaterial","BoxGeometry","BOXBLURPass","material","title","FREICHENPass","click","error","call","55pURHQn","target","RGBPass","2688IEefAe","return (function() ","后处理类型","toScreen","plugins/postProcessing/image/1324-normal.jpg","onWindowResize","exception","castShadow","constructor","push","4439617hVCFSY","function *\\( *\\)","plugins/postProcessing/image/1324.jpg","108UxDYEl","127640KOAjfz","random","8uYOsXh","render","counter","length","VIGNETTE2Pass","关闭通道","warn","change","table","__proto__","debu","FXAAPass","DENOISEPass","postProcessing","VIGNETTE1Pass","addButton","105518osmxsx","split","InvertPass","toString","gger","883050BjCEGj","Reset","translate","list","pass","addPass","2813832emyzxC","log","chain"];return(q=function(){return t})()}W(void 0,(function(){const t=X,n=function(){const t=X;let n;try{n=Function(t(409)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n.console=n[t(465)]||{},o=[t(452),t(430),t(469),t(403),t(414),t(432),"trace"];for(let r=0;r<o[t(427)];r++){const n=W[t(416)].prototype[t(454)](W),a=o[r],s=e[a]||n;n[t(433)]=W.bind(W),n[t(443)]=s[t(443)].bind(s),e[a]=n}}))();function Z(t){function n(t){const e=X;if("string"==typeof t)return function(t){}.constructor(e(458))[e(475)](e(426));1!==(""+t/t).length||t%20==0?function(){return!0}.constructor("debugger")[e(404)](e(466)):function(){return!1}[e(416)](e(434)+e(444))[e(475)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const $=E(d({__name:k(437),async setup(o){const r=k;let a,i;const{camera:c,renderer:l,scene:u,sizes:v}=t();for(var d=new f,g=[],h=0;h<100;h++){var y=new(s[r(397)])(100,100,100);y[r(447)](1500*Math[r(423)](),1500*Math.random(),1500*Math[r(423)]()),g[r(417)](y)}d=p[r(463)](g);const I=([a,i]=x((()=>e({map:r(420)}))),a=await a,i(),a),b=([a,i]=x((()=>e({map:r(412)}))),a=await a,i(),a);var _=new(s[r(396)])({map:I.map,normalMap:b[r(395)],normalScale:new(s[r(478)])(.8,-.8),shininess:100}),S=new(s[r(470)])(d,_);S[r(415)]=!0,S.receiveShadow=!0,u[r(460)][r(467)](S);const U=new j(l[r(460)],{useRGBA:!0}),w=new m;let P=null,D=[{text:r(442),value:{InvertPass:V}},{text:r(435),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:r(476),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:"SNOISEPass",value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:r(398),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:r(436),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:r(468),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:b[r(395)]}}},{text:"SOBELPass",value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:r(407),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:r(477),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:r(474),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:"POISSONPass",value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:r(438),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:r(428),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:r(401),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:"TOONPass",value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],E=r(442),A=V,L=null;w.addBlade({view:r(448),label:r(410),options:D,value:""}).on(r(431),(t=>{P=t[r(460)]}));const M=w[r(439)]({title:"新增",label:r(462)});let C=0;M.on("click",(t=>{const n=r;E=Object[n(464)](P)[0],A=Object.values(P)[0],L=Object[n(457)](P)[1];let e=C++,o=w[n(461)]({title:E});for(const r in L){let t=L[r];o[n(473)]({view:"text",label:r,parse:t=>String(t),value:t})}o[n(439)]({title:"移除~"+e,label:n(429)}).on(n(402),(t=>{const e=n;let o=t.target[e(400)][e(441)]("~")[1];U[e(471)](o)})).on("click",(()=>{o[n(472)]()}));let a=F(L,t[n(406)].label,t[n(460)]);U[n(450)](E,A,a,e)})),U[r(413)](l[r(460)],c.value);const{onLoop:z}=n();return z((({delta:t})=>{const n=r;S&&(l.value.autoClearColor=!0,U[n(446)](),S[n(399)]=_,U[n(425)](u.value,c[n(460)]),U[n(449)](),U[n(411)](u.value,c[n(460)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),K=nt;!function(t,n){const e=nt,o=tt();for(;;)try{if(417100===parseInt(e(227))/1+-parseInt(e(233))/2+parseInt(e(217))/3*(parseInt(e(247))/4)+-parseInt(e(220))/5+parseInt(e(221))/6+parseInt(e(253))/7*(parseInt(e(244))/8)+parseInt(e(255))/9*(-parseInt(e(254))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Y=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[nt(224)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){Y(this,(function(){const t=nt,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(241),"i"),o=ot(t(248));n[t(238)](o+"chain")&&e[t(238)](o+t(218))?ot():o("0")}))()}();const J=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();J(void 0,(function(){const t=nt;let n;try{n=Function(t(251)+t(232)+");")()}catch(r){n=window}const e=n[t(249)]=n.console||{},o=["log","warn",t(235),t(242),t(240),"table",t(228)];for(let a=0;a<o.length;a++){const n=J.constructor[t(239)][t(231)](J),r=o[a],s=e[r]||n;n.__proto__=J[t(231)](J),n[t(250)]=s[t(250)][t(231)](s),e[r]=n}}))();const Q={ref:K(246),position:[600,850,-1500],fov:45,near:.1,far:1e5};function tt(){const t=["prototype","exception","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","error","stateObject","56kIBIpt","string","perspectiveCameraRef","4yOgZcd","init","console","toString","return (function() ","gger","661591SkxMhi","35110epGJPB","1962OAhnoY","length","1103073ORqeBr","input","constructor","409270yGpGFV","3502008ExozSr","#000000","debu","apply","counter","TresDirectionalLight","437299XTOIdd","trace","TresAmbientLight","while (true) {}","bind",'{}.constructor("return this")( )',"1571794yfxxlW","TresPerspectiveCamera","info","action","call","test"];return(tt=function(){return t})()}function nt(t,n){const e=tt();return nt=function(t,n){return e[t-=216]},nt(t,n)}const et=d({__name:"postProcessingEditor",setup(t){const e=K,r={clearColor:e(222),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:"manual"},a={autoRotate:!0,enableDamping:!0},{onLoop:s}=n();return s((({delta:t})=>{})),(t,n)=>{const s=e,i=g("TresCanvas");return h(),y(i,D(r,{"window-size":""}),{default:I((()=>[b(s(234),Q,null,512),_(S(o),U(w(a)),null,16),n[0]||(n[0]=b(s(229),{color:"#ffffff",intensity:2},null,-1)),n[1]||(n[1]=b(s(226),{position:[100,100,0],intensity:2,color:"#ffffff"},null,-1)),(h(),y(P,null,{default:I((()=>[_($)])),_:1}))])),_:1},16)}}});function ot(t){function n(t){const e=nt;if(typeof t===e(245))return function(t){}[e(219)](e(230))[e(224)](e(225));1!==(""+t/t)[e(216)]||t%20==0?function(){return!0}[e(219)](e(223)+e(252))[e(237)](e(236)):function(){return!1}[e(219)](e(223)+e(252)).apply(e(243)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{et as default};
