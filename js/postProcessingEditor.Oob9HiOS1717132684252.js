import{aL as m,c6 as C,aB as V,ba as U,bo as P,bF as Z,bl as tt,aJ as et,aA as H,bA as nt,bR as at,aK as st,aF as L,aM as x,cE as A,aw as T,c1 as rt,a5 as O,ao as ot,ay as it,aP as lt,aH as F,bj as z,aV as vt,au as ut,ad as W,_ as ct,r as dt,o as N,C as B,J as G,ac as mt,a1 as D,a as R,ae as ft,af as pt,T as gt,ag as xt,ak as ht}from"./vendor.E5SXPLW-1717132684252.js";import{m as yt}from"./BufferGeometryUtils.Ga3MQiuz1717132684252.js";const _t="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n	\n	gl_FragColor=texture2D(tInput,vUv);\n	\n}",St=function(o,t){const e=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,a=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,n={sampler2D:{type:"t",value(){return new C}},samplerCube:{type:"t",value(){}},bool:{type:"b",value(){return 0}},int:{type:"i",value(){return 0}},float:{type:"f",value(){return 0}},vec2:{type:"v2",value(){return new m}},vec3:{type:"v3",value(){return new U}},vec4:{type:"v4",value(){return new P}},bvec2:{type:"v2",value(){return new m}},bvec3:{type:"v3",value(){return new U}},bvec4:{type:"v4",value(){return new P}},ivec2:{type:"v2",value(){return new m}},ivec3:{type:"v3",value(){return new U}},ivec4:{type:"v4",value(){return new P}},mat2:{type:"v2",value(){return new(void 0)}},mat3:{type:"v3",value(){return new Z}},mat4:{type:"v4",value(){return new tt}}},s={float:{type:"fv",value(){return[]}},vec3:{type:"v3v",value(){return[]}}};let r;const u={resolution:{type:"v2",value:new m(1,1),default:!0},time:{type:"f",value:Date.now(),default:!0},tInput:{type:"t",value:new C,default:!0}};let i,l;for(;(r=e.exec(t))!==null;)r.index===e.lastIndex&&e.lastIndex++,i=r[1],l=r[2],u[l]={type:n[i].type,value:n[i].value()};for(;(r=a.exec(t))!==null;)r.index===e.lastIndex&&e.lastIndex++,i=r[1],l=r[2],r[3],u[l]={type:s[i].type,value:s[i].value()};return new V({uniforms:u,vertexShader:o,fragmentShader:t,depthWrite:!1,depthTest:!1,transparent:!0})};function q(o,t,e){if(typeof o!="object"||o===null)return o;const a=Array.isArray(o)?[]:{};for(const n in o)o.hasOwnProperty(n)&&(a[n]=q(o[n])),n==t&&(a[t]=e);return a}class bt{constructor(t,e){this.width=1,this.height=1,this.settings=e||{},this.useRGBA=this.settings.useRGBA||!1,this.renderer=t,this.copyPass=this.CopyPass(this.settings),this.scene=new et,this.quad=new H(new nt(1,1),new at),this.scene.add(this.quad),this.camera=new st(1,1,1,1,-1e4,1e4),this.front=new L(1,1,{minFilter:this.settings.minFilter!==void 0?this.settings.minFilter:x,magFilter:this.settings.magFilter!==void 0?this.settings.magFilter:x,wrapS:this.settings.wrapS!==void 0?this.settings.wrapS:A,wrapT:this.settings.wrapT!==void 0?this.settings.wrapT:A,format:this.useRGBA?T:void 0,type:this.settings.type!==void 0?this.settings.type:rt,stencilBuffer:this.settings.stencilBuffer!==void 0?this.settings.stencilBuffer:!0}),this.back=this.front.clone(),this.startTime=Date.now(),this.passes={},this.Stack={passItems:[],passes:[]}}addPass(t,e,a,n){this.loadShadervf(e);const s={shaderName:t,params:a,uuid:n,shader:this.shader};this.Stack.passItems.push(s)}removePass(t){for(let e=this.Stack.passItems.length-1;e>=0;e--)this.Stack.passItems[e].uuid===parseInt(t)&&this.Stack.passItems.splice(e,1);console.log(this.Stack.passItems)}CopyPass(){return this.Pass.call(this),this.loadShadervf(_t)}loadShadervf(t){const e="varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }";return this.shader=St(e,t),this.shader}Pass(t){this.shader=null,this.params={}}Reset(){this.read=this.front,this.write=this.back}onWindowResize(t,e){const n=window.innerWidth,s=window.innerHeight;return t.setSize(1*n,1*s),e.projectionMatrix.makePerspective(70,n/s,e.near,e.far),this.setSize(n,s),this.getOfflineTexture(n,s,!0)}setSize(t,e){this.width=t,this.height=e,this.camera.projectionMatrix.makeOrthographic(t/-2,t/2,e/2,e/-2,this.camera.near,this.camera.far),this.quad.scale.set(t,e,1),this.front.setSize(t,e),this.back.setSize(t,e)}getOfflineTexture(t,e,a){return new L(t,e,{minFilter:x,magFilter:x,format:a?T:void 0})}render(t,e,a,n){this.renderer.setRenderTarget(this.write),this.renderer.render(t,e),n||this.swapBuffers()}swapBuffers(){const t=this.write;this.write=this.read,this.read=t}pass(){for(let t=0;t<this.Stack.passItems.length;t++){const e=this.Stack.passItems[t].shader,a=this.Stack.passItems[t].params;if(this.renderer.setRenderTarget(this.write),e instanceof V){this.quad.material=e,this.quad.material.uniforms.tInput.value=this.read.texture,this.quad.material.uniforms.resolution.value.set(this.width,this.height),this.quad.material.uniforms.time.value=.001*(Date.now()-this.startTime);for(const n in a)this.quad.material.uniforms[n].value=a[n];this.renderer.render(this.scene,this.camera),this.swapBuffers()}}}toScreen(t,e){this.renderer.setRenderTarget(null),this.quad.material=this.copyPass,this.quad.material.uniforms.tInput.value=this.read.texture,this.quad.material.uniforms.resolution.value.set(this.width,this.height),this.renderer.render(this.scene,this.camera)}}const k="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n	gl_FragColor = texture2D( tInput, vUv );\n	gl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",It="uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}",Ut="uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n	\n	vec4 color = texture2D(tInput, vUv);\n	float r = color.r;\n	float g = color.g;\n	float b = color.b;\n	\n	color.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n	color.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n	color.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n	\n	gl_FragColor = color;\n\n}",Pt="uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n	//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n	return .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n	vec4 color = texture2D(tInput, vUv);\n\n	//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n	color += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n	gl_FragColor = color;\n\n}",Dt="varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n	\n	vec4 sum=vec4(0.);\n	vec2 inc=vec2(deltax,deltay)/resolution;\n	\n	sum+=texture2D(tInput,(vUv-inc*4.))*.051;\n	sum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n	sum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n	sum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n	sum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n	sum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n	sum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n	sum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n	sum+=texture2D(tInput,(vUv+inc*4.))*.051;\n	\n	gl_FragColor=sum;\n	\n}",wt="uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n	\n	vec4 center=texture2D(tInput,vUv);\n	vec4 color=vec4(0.);\n	float total=0.;\n	for(float x=-4.;x<=4.;x+=1.){\n		for(float y=-4.;y<=4.;y+=1.){\n			vec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n			float weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n			weight=pow(weight,exponent);\n			color+=sample1*weight;\n			total+=weight;\n		}\n	}\n	gl_FragColor=color/total;\n	\n}",Et="varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n	float size = 2. * pixelDensity;\n	float dSize = 2. * size;\n\n	float amount = resolution.x / size;\n	float d = 1.0 / amount;\n	float ar = resolution.x / resolution.y;\n	float sx = floor( vUv.x / d ) * d;\n	d = ar / amount;\n	float sy = floor( vUv.y / d ) * d;\n\n	vec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n	float lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n	float o = floor( 6. * lum );\n\n	vec3 c1;\n	vec3 c2;\n	\n	vec3 black = vec3( 0. );\n	vec3 light = vec3( 85., 255., 255. ) / 255.;\n	vec3 dark = vec3( 254., 84., 255. ) / 255.;\n	vec3 white = vec3( 1. );\n\n	/*dark = vec3( 89., 255., 17. ) / 255.;\n	light = vec3( 255., 87., 80. ) / 255.;\n	white = vec3( 255., 255., 0. ) / 255.;*/\n\n	/*light = vec3( 85., 255., 255. ) / 255.;\n	dark = vec3( 255., 86., 80. ) / 255.;*/\n\n	if( o == 0. ) { c1 = black; c2 = c1; }\n	if( o == 1. ) { c1 = black; c2 = dark; }\n	if( o == 2. ) { c1 = dark;  c2 = c1; }\n	if( o == 3. ) { c1 = dark;  c2 = light; }\n	if( o == 4. ) { c1 = light; c2 = c1; }\n	if( o == 5. ) { c1 = light; c2 = white; }\n	if( o == 6. ) { c1 = white; c2 = c1; }\n\n	if( mod( gl_FragCoord.x, dSize ) > size ) {\n		if( mod( gl_FragCoord.y, dSize ) > size ) {\n			base.rgb = c1;\n		} else {\n			base.rgb = c2;	\n		}\n	} else {\n		if( mod( gl_FragCoord.y, dSize ) > size ) {\n			base.rgb = c2;\n		} else {\n			base.rgb = c1;		\n		}\n	}\n\n	gl_FragColor = vec4( base.rgb, base.a );\n\n}",Mt="uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n	float x = 1.0 / resolution.x;\n	float y = 1.0 / resolution.y;\n	vec4 horizEdge = vec4( 0.0 );\n	horizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n	horizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n	horizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n	horizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n	horizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n	horizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n	vec4 vertEdge = vec4( 0.0 );\n	vertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n	vertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n	vertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n	vertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n	vertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n	vertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n	vec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n	\n	gl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}",Ct="varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n	\n	vec2 dir=vUv-vec2(.5);\n	float d=.7*length(dir);\n	normalize(dir);\n	vec2 value=d*dir*vec2(x,y);\n	\n	vec4 c1=texture2D(tInput,vUv-value/resolution.x);\n	vec4 c2=texture2D(tInput,vUv);\n	vec4 c3=texture2D(tInput,vUv+value/resolution.y);\n	\n	gl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n	\n}\n",Lt="/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n	vec2 center=resolution.xy*.5;\n	float s=sin(angle),c=cos(angle);\n	vec2 tex=vUv*resolution-center;\n	vec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n	return(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n	vec4 color=texture2D(tInput,vUv);\n	float average=(color.r+color.g+color.b)/3.;\n	gl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}",At="uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n	return fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n	vec2 sc = vec2(sin(a),cos(a));\n	return vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n	vec2 uv = gl_FragCoord.xy / resolution.xy;\n	uv.x += 0.1;//*iGlobalTime;\n\n	float maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n	const int NUM_SAMPLES = 16;\n	const int NUM_SAMPLES2 = NUM_SAMPLES/2;\n	const float NUM_SAMPLES_F = float(NUM_SAMPLES);\n	const float anglestep = 6.28 / NUM_SAMPLES_F;\n	const float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n	//note: rand\n	float rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n	\n	//note: ordered dither\n	//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n	//note: create halfcircle of offsets\n	vec2 ofs[NUM_SAMPLES];\n	{\n		float angle = 3.1416*rnd;\n		for( int i=0;i<NUM_SAMPLES2;++i )\n		{\n			ofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n			angle += anglestep;\n		}\n	}\n	\n	vec4 sum = vec4(0.0);\n	//note: sample positive half-circle\n	for( int i=0;i<NUM_SAMPLES2;++i )\n		sum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n	//note: sample negative half-circle\n	for( int i=0;i<NUM_SAMPLES2;++i )\n		sum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n	gl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n	gl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n",Tt="uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n	return fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n	vec2 sc = vec2(sin(a),cos(a));\n	return vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n	const int NUM_TAPS = 12;\n	float max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n	\n	vec2 fTaps_Poisson[NUM_TAPS];\n	fTaps_Poisson[0]  = vec2(-.326,-.406);\n	fTaps_Poisson[1]  = vec2(-.840,-.074);\n	fTaps_Poisson[2]  = vec2(-.696, .457);\n	fTaps_Poisson[3]  = vec2(-.203, .621);\n	fTaps_Poisson[4]  = vec2( .962,-.195);\n	fTaps_Poisson[5]  = vec2( .473,-.480);\n	fTaps_Poisson[6]  = vec2( .519, .767);\n	fTaps_Poisson[7]  = vec2( .185,-.893);\n	fTaps_Poisson[8]  = vec2( .507, .064);\n	fTaps_Poisson[9]  = vec2( .896, .412);\n	fTaps_Poisson[10] = vec2(-.322,-.933);\n	fTaps_Poisson[11] = vec2(-.792,-.598);\n	\n	vec2 uv = gl_FragCoord.xy / resolution.xy;\n	//uv.x += 0.05*iGlobalTime;\n	vec4 sum = vec4(0);\n	float rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n	\n	vec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n	for (int i=0; i < NUM_TAPS; i++)\n	{\n		vec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n		//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n		vec2 texcoord = uv + max_siz * ofs / resolution.xy;\n		sum += texture2D(tInput, texcoord, -10.0);\n	}\n	gl_FragColor = sum / vec4(NUM_TAPS);\n}",Ft="varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n	vec4 color = texture2D( tInput, vUv );\n\n	vec2 center = resolution * 0.5;\n	float vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n	gl_FragColor = color;\n\n}",zt="uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",Nt="/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n	vec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n	mat3 G[9];\n	G[0] = g0,\n	G[1] = g1,\n	G[2] = g2,\n	G[3] = g3,\n	G[4] = g4,\n	G[5] = g5,\n	G[6] = g6,\n	G[7] = g7,\n	G[8] = g8;\n	\n	mat3 I;\n	float cnv[9];\n	vec3 sample1;\n	\n	/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n	for (float i=0.0; i<3.0; i++) {\n		for (float j=0.0; j<3.0; j++) {\n			sample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n			I[int(i)][int(j)] = length(sample1);\n		}\n	}\n	\n	/* calculate the convolution values for all the masks */\n	for(int i=0;i<9;i++){\n		float dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n		cnv[i]=dp3*dp3;\n	}\n	\n	float M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n	float S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n	\n	gl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n	\n}\n",Bt="// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n		res.x = v;\n		res.y = t;\n		res.z = p;\n   	} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n	} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n	} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n	} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n	} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   		for (int i =0; i<HueLevCount-1; i++ ) {\n		    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n		      return HueLevels[i+1];\n		    }\n		}\n	 }\n \n	if (mode==1) {\n		for (int i =0; i<SatLevCount-1; i++ ) {\n			if (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n	          return SatLevels[i+1];\n	        }\n		}\n	}\n \n \n	if (mode==2) {\n		for (int i =0; i<ValLevCount-1; i++ ) {\n			if (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n	          return ValLevels[i+1];\n	        }\n		}\n	}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n	HueLevels[0] = 0.0;\n	HueLevels[1] = 80.0;\n	HueLevels[2] = 160.0;\n	HueLevels[3] = 240.0;\n	HueLevels[4] = 320.0;\n	HueLevels[5] = 360.0; \n \n	SatLevels[0] = 0.0;\n	SatLevels[1] = 0.1;\n	SatLevels[2] = 0.3;\n	SatLevels[3] = 0.5;\n	SatLevels[4] = 0.6;\n	SatLevels[5] = 0.8;\n	SatLevels[6] = 1.0;\n \n	ValLevels[0] = 0.0;\n	ValLevels[1] = 0.3;\n	ValLevels[2] = 0.6;\n	ValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}",Gt=O({__name:"postProcessing",async setup(o){let t,e;const{camera:a,renderer:n,scene:s,sizes:r}=ot();for(var u=new it,i=[],l=0;l<100;l++){var h=new lt(100,100,100);h.translate(Math.random()*1500,Math.random()*1500,Math.random()*1500),i.push(h)}u=yt(i);const X=([t,e]=F(()=>z({map:"plugins/postProcessing/image/1324.jpg"})),t=await t,e(),t),w=([t,e]=F(()=>z({map:"plugins/postProcessing/image/1324-normal.jpg"})),t=await t,e(),t);var E=new vt({map:X.map,normalMap:w.map,normalScale:new m(.8,-.8),shininess:100}),d=new H(u,E);d.castShadow=!0,d.receiveShadow=!0,s.value.add(d);const v=new bt(n.value,{useRGBA:!0}),y=new ut;let f=null,j=[{text:"InvertPass",value:{InvertPass:k}},{text:"FXAAPass",value:{FXAAPass:It}},{text:"SEPIAPass",value:{SEPIAPass:Ut,params:{amount:10}}},{text:"SNOISEPass",value:{SNOISEPass:Pt,params:{amount:.1,speed:0}}},{text:"BOXBLURPass",value:{BOXBLURPass:Dt,params:{deltax:10,deltay:10,taps:1}}},{text:"DENOISEPass",value:{DENOISEPass:wt,params:{exponent:1,strength:10}}},{text:"CGAPass",value:{CGAPass:Et,params:{pixelDensity:4,cgaMap:w.map}}},{text:"SOBELPass",value:{SOBELPass:Mt}},{text:"RGBPass",value:{RGBPass:Ct,params:{x:1e3,y:1e3}}},{text:"DOTPass",value:{DOTPass:Lt}},{text:"CIRCULARPass",value:{CIRCULARPass:At}},{text:"POISSONPass",value:{POISSONPass:Tt}},{text:"VIGNETTE1Pass",value:{VIGNETTE1Pass:zt,params:{falloff:10,amount:2}}},{text:"VIGNETTE2Pass",value:{VIGNETTE2Pass:Ft,params:{reduction:10,boost:2}}},{text:"FREICHENPass",value:{FREICHENPass:Nt}},{text:"TOONPass",value:{TOONPass:Bt}}],_="InvertPass",M=k,p=null;y.addBlade({view:"list",label:"后处理类型",options:j,value:""}).on("change",c=>{f=c.value});const J=y.addButton({title:"新增",label:"新增通道"});let $=0;J.on("click",c=>{_=Object.keys(f)[0],M=Object.values(f)[0],p=Object.values(f)[1];let S=$++,b=y.addFolder({title:_});for(const g in p){let I=p[g];b.addBlade({view:"text",label:g,parse:Y=>String(Y),value:I})}b.addButton({title:"移除~".concat(S),label:"关闭通道"}).on("click",g=>{let I=g.target.title.split("~")[1];v.removePass(I)}).on("click",()=>{b.dispose()});let Q=q(p,c.target.label,c.value);v.addPass(_,M,Q,S)}),v.onWindowResize(n.value,a.value);const{onLoop:K}=W();return K(({delta:c})=>{d&&(n.value.autoClearColor=!0,v.Reset(),d.material=E,v.render(s.value,a.value),v.pass(),v.toScreen(s.value,a.value))}),(c,S)=>null}}),Rt=ct(Gt,[["__scopeId","data-v-678aecf2"]]),kt={ref:"perspectiveCameraRef",position:[600,850,-1500],fov:45,near:.1,far:1e5},Vt=D("TresAmbientLight",{color:"#ffffff",intensity:2},null,-1),Ht=D("TresDirectionalLight",{position:[100,100,0],intensity:2,color:"#ffffff"},null,-1),Xt=O({__name:"postProcessingEditor",setup(o){const t={clearColor:"#000000",shadows:!0,alpha:!1,useLegacyLights:!0},e={autoRotate:!0,enableDamping:!0},{onLoop:a}=W();return a(({delta:n})=>{}),(n,s)=>{const r=dt("TresCanvas");return N(),B(r,mt(t,{"window-size":""}),{default:G(()=>[D("TresPerspectiveCamera",kt,null,512),R(gt(xt),ft(pt(e)),null,16),Vt,Ht,(N(),B(ht,null,{default:G(()=>[R(Rt)]),_:1}))]),_:1},16)}}});export{Xt as default};
