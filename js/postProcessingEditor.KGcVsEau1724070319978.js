import{p as t,$ as n,N as e,d as o}from"./@tresjs.2JnKj_Yj1724070319978.js";import{j as r,T as s,a6 as a,al as i,V as c,i as l,o as u,O as v,W as f,bf as p,l as d,cj as m}from"./three.QUrV0R7c1724070319978.js";import{P as g}from"./tweakpane.yHWGBmom1724070319978.js";import{d as x,a4 as h,e as y,o as b,f as I,g as _,J as S,j as U,u as w,aj as P,ak as D,al as E,m as A}from"./@vue.Q1VpS3901724070319978.js";import{_ as M}from"./@fesjs.fxXnq-gV1724070319978.js";import"./@vueuse.2Yfo77CO1724070319978.js";import"./vue-router.7GyIEHku1724070319978.js";import"./lodash-es.nFpJXAf-1724070319978.js";import"./@qlin.yHhFDldE1724070319978.js";import"./pinia.yc2Sjh9i1724070319978.js";import"./@floating-ui.BPbuo5Gx1724070319978.js";import"./@juggle.7yjBMqoW1724070319978.js";function L(t,n){const e=N();return(L=function(t,n){return e[t-=315]})(t,n)}!function(t,n){const e=L,o=N();for(;;)try{if(558672===-parseInt(e(335))/1*(parseInt(e(341))/2)+-parseInt(e(332))/3*(parseInt(e(345))/4)+parseInt(e(371))/5+parseInt(e(365))/6*(-parseInt(e(368))/7)+-parseInt(e(317))/8+-parseInt(e(367))/9*(parseInt(e(340))/10)+parseInt(e(364))/11*(parseInt(e(363))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(318)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){C(this,(function(){const t=L,n=new RegExp(t(324)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=T("init");n.test(o+t(342))&&e[t(328)](o+t(329))?T():o("0")}))()}();const z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(318)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();z(void 0,(function(){const t=L,n=function(){const t=L;let n;try{n=Function(t(372)+t(369)+");")()}catch(e){n=window}return n}(),e=n[t(360)]=n[t(360)]||{},o=[t(350),t(344),t(330),t(319),"exception","table","trace"];for(let r=0;r<o[t(353)];r++){const n=z[t(349)][t(361)][t(362)](z),s=o[r],a=e[s]||n;n.__proto__=z[t(362)](z),n[t(315)]=a.toString.bind(a),e[s]=n}}))();function F(t,n,e){const o=L;if(typeof t!==o(323)||null===t)return t;const r=Array[o(331)](t)?[]:{};for(const s in t)t[o(327)](s)&&(r[s]=F(t[s])),s==n&&(r[n]=e);return r}function N(){const t=["info","isArray","1182xDoioK",'Shader "',"onerror","691OSUGQK","type","Vector4","exec","replace","10yusapD","1816dugfRb","chain","while (true) {}","warn","3940nCGBoQ","v3v","message","Matrix4","constructor","log","Vector2","index","length","Vector3","responseText","get","Matrix2","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","open","console","prototype","bind","13859628ekDGbP","33ZmiJfA","78yekAEl","onabort","9119313BuLpzp","54789PEHBps",'{}.constructor("return this")( )',"value","1658585ujyoiw","return (function() ","random","stateObject","lastIndex","toString","WagnerLoadShaderException","8859408yvFrnS","apply","error","debu","onload","ShaderMaterial","object","function *\\( *\\)","string","gger","hasOwnProperty","test","input"];return(N=function(){return t})()}function T(t){function n(t){const e=L;if(typeof t===e(325))return function(t){}.constructor(e(343))[e(318)]("counter");1!==(""+t/t)[e(353)]||t%20==0?function(){return!0}[e(349)](e(320)+e(326)).call("action"):function(){return!1}[e(349)]("debugger")[e(318)](e(374)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const G=j;!function(t,n){const e=j,o=O();for(;;)try{if(840325===-parseInt(e(491))/1+parseInt(e(469))/2*(parseInt(e(416))/3)+parseInt(e(433))/4+parseInt(e(499))/5+-parseInt(e(445))/6*(parseInt(e(489))/7)+-parseInt(e(422))/8+parseInt(e(436))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const R=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[j(429)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){R(this,(function(){const t=j,n=new RegExp("function *\\( *\\)"),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=k(t(437));n[t(450)](o+t(431))&&e[t(450)](o+"input")?k():o("0")}))()}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[j(429)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function j(t,n){const e=O();return(j=function(t,n){return e[t-=416]})(t,n)}function O(){const t=["Mesh","table","Pass","apply","warn","chain","toString","3994216llikzY","UnsignedByteType","ClampToEdgeWrapping","7733781NoyphD","init","params","tInput","write","scale","removePass","wrapS","RGBFormat","6jGwDYm","minFilter","type","WebGLRenderTarget","scene","test","bind","CopyPass","return (function() ","now","wrapT","passItems","counter","height","getOfflineTexture","ShaderMaterial","setRenderTarget","quad","render","Reset","uuid","length","stateObject","loadShadervf","2xGIQFs","splice","LinearFilter","error","texture","shader","renderer","back",'{}.constructor("return this")( )',"resolution","makePerspective","innerWidth","camera","call","clone","value","projectionMatrix","setSize","action","__proto__","10730587IcNoAm","settings","980998ykudoW","pass","push","passes","RGBAFormat","uniforms","far","set","4615730TvneOA","swapBuffers","startTime","MeshBasicMaterial","gger","material","stencilBuffer","log","info","PlaneGeometry","2218851ekvRhU","read","Stack","front","constructor","useRGBA","1330896maLsUr","magFilter","prototype","width"];return(O=function(){return t})()}B(void 0,(function(){const t=j,n=function(){const t=j;let n;try{n=Function(t(453)+t(477)+");")()}catch(e){n=window}return n}(),e=n.console=n.console||{},o=[t(506),t(430),t(507),t(472),"exception",t(427),"trace"];for(let r=0;r<o.length;r++){const n=B.constructor[t(424)][t(451)](B),s=o[r],a=e[s]||n;n[t(488)]=B[t(451)](B),n[t(432)]=a[t(432)][t(451)](a),e[s]=n}}))();class V{constructor(t,n){const e=j;this[e(425)]=1,this[e(458)]=1,this[e(490)]=n||{},this[e(421)]=this[e(490)][e(421)]||!1,this[e(475)]=t,this.copyPass=this.CopyPass(this[e(490)]),this.scene=new u,this[e(462)]=new(a[e(426)])(new(a[e(508)])(1,1),new(a[e(502)])),this[e(449)].add(this[e(462)]),this[e(481)]=new v(1,1,1,1,-1e4,1e4),this[e(419)]=new f(1,1,{minFilter:void 0!==this[e(490)][e(446)]?this[e(490)].minFilter:a[e(471)],magFilter:void 0!==this[e(490)].magFilter?this[e(490)][e(423)]:a[e(471)],wrapS:void 0!==this[e(490)].wrapS?this[e(490)][e(443)]:a[e(435)],wrapT:void 0!==this[e(490)][e(455)]?this[e(490)][e(455)]:p,format:this[e(421)]?a[e(495)]:a[e(444)],type:void 0!==this[e(490)].type?this.settings[e(447)]:a[e(434)],stencilBuffer:void 0===this[e(490)].stencilBuffer||this.settings[e(505)]}),this.back=this[e(419)][e(483)](),this[e(501)]=Date[e(454)](),this[e(494)]={},this[e(418)]={passItems:[],passes:[]}}addPass(t,n,e,o){const r=j;this[r(468)](n);const s={shaderName:t,params:e,uuid:o,shader:this.shader};this.Stack[r(456)][r(493)](s)}[G(442)](t){const n=G;for(let e=this[n(418)][n(456)][n(466)]-1;e>=0;e--)this[n(418)][n(456)][e][n(465)]===parseInt(t)&&this[n(418)][n(456)][n(470)](e,1);console[n(506)](this[n(418)].passItems)}[G(452)](){const t=G;this.Pass[t(482)](this);return this[t(468)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[G(468)](t){const n=G;return this.shader=function(t,n){const e=L,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,u=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,v={sampler2D:{type:"t",value:()=>new s},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new r},vec3:{type:"v3",value:()=>new(a[L(354)])},vec4:{type:"v4",value:()=>new i},bvec2:{type:"v2",value:()=>new r},bvec3:{type:"v3",value:()=>new(a[L(354)])},bvec4:{type:"v4",value:()=>new(a[L(337)])},ivec2:{type:"v2",value:()=>new(a[L(351)])},ivec3:{type:"v3",value:()=>new c},ivec4:{type:"v4",value:()=>new(a[L(337)])},mat2:{type:"v2",value:()=>new(a[L(357)])},mat3:{type:"v3",value:()=>new l},mat4:{type:"v4",value:()=>new(a[L(348)])}},f={float:{type:"fv",value:()=>[]},vec3:{type:e(346),value:()=>[]}};let p;const d={resolution:{type:"v2",value:new r(1,1),default:!0},time:{type:"f",value:Date.now(),default:!0},tInput:{type:"t",value:new s,default:!0}};let m,g;for(;null!==(p=o[e(338)](n));)p[e(352)]===o[e(375)]&&o[e(375)]++,m=p[1],g=p[2],d[g]={type:v[m][e(336)],value:v[m][e(370)]()};for(;null!==(p=u[e(338)](n));)p[e(352)]===o.lastIndex&&o[e(375)]++,m=p[1],g=p[2],p[3],d[g]={type:f[m][e(336)],value:f[m].value()};return new(a[e(322)])({uniforms:d,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}("varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }",t),this[n(474)]}[G(428)](t){const n=G;this.shader=null,this[n(438)]={}}[G(464)](){const t=G;this[t(417)]=this[t(419)],this[t(440)]=this.back}onWindowResize(t,n){const e=G,o=window[e(480)],r=window.innerHeight;t[e(486)](1*o,1*r),n[e(485)][e(479)](70,o/r,n.near,n[e(497)]),this.setSize(o,r);return this.getOfflineTexture(o,r,!0)}[G(486)](t,n){const e=G;this.width=t,this[e(458)]=n,this[e(481)].projectionMatrix.makeOrthographic(t/-2,t/2,n/2,n/-2,this[e(481)].near,this.camera[e(497)]),this[e(462)][e(441)].set(t,n,1),this[e(419)].setSize(t,n),this[e(476)][e(486)](t,n)}[G(459)](t,n,e){const o=G;return new(a[o(448)])(t,n,{minFilter:a[o(471)],magFilter:d,format:e?a[o(495)]:a[o(444)]})}[G(463)](t,n,e,o){const r=G;this[r(475)][r(461)](this[r(440)]),this.renderer[r(463)](t,n),o||this[r(500)]()}swapBuffers(){const t=G,n=this.write;this.write=this[t(417)],this[t(417)]=n}[G(492)](){const t=G;for(let n=0;n<this[t(418)][t(456)].length;n++){const e=this[t(418)][t(456)][n].shader,o=this[t(418)][t(456)][n][t(438)];if(this[t(475)].setRenderTarget(this[t(440)]),e instanceof a[t(460)]){this.quad[t(504)]=e,this.quad[t(504)][t(496)][t(439)].value=this[t(417)].texture,this.quad[t(504)][t(496)][t(478)][t(484)][t(498)](this.width,this[t(458)]),this[t(462)][t(504)].uniforms.time[t(484)]=.001*(Date[t(454)]()-this[t(501)]);for(const n in o)this[t(462)][t(504)].uniforms[n].value=o[n];this.renderer[t(463)](this[t(449)],this.camera),this[t(500)]()}}}toScreen(t,n){const e=G;this[e(475)][e(461)](null),this.quad[e(504)]=this.copyPass,this.quad[e(504)][e(496)].tInput[e(484)]=this[e(417)][e(473)],this[e(462)][e(504)][e(496)].resolution[e(484)].set(this[e(425)],this.height),this[e(475)].render(this[e(449)],this.camera)}}function k(t){function n(t){const e=j;if("string"==typeof t)return function(t){}.constructor("while (true) {}")[e(429)](e(457));1!==(""+t/t)[e(466)]||t%20==0?function(){return!0}[e(420)]("debu"+e(503))[e(482)](e(487)):function(){return!1}.constructor("debu"+e(503)).apply(e(467)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const H="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}";!function(t,n){const e=X,o=Z();for(;;)try{if(241118===-parseInt(e(468))/1*(-parseInt(e(534))/2)+-parseInt(e(502))/3*(-parseInt(e(503))/4)+-parseInt(e(476))/5+parseInt(e(483))/6+-parseInt(e(533))/7+-parseInt(e(489))/8*(-parseInt(e(471))/9)+-parseInt(e(460))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const W=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[X(470)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){W(this,(function(){const t=X,n=new RegExp(t(490)),e=new RegExp(t(462),"i"),o=$("init");n[t(484)](o+t(521))&&e[t(484)](o+t(497))?$():o("0")}))()}();const q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[X(470)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function X(t,n){const e=Z();return(X=function(t,n){return e[t-=458]})(t,n)}function Z(){const t=["新增通道","gger","material","1960245ndOlnQ","37318uMCnzf","CGAPass","bind","length","stateObject","call","change","BufferGeometry","4945400KUtvLn","action","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","FXAAPass","random","FREICHENPass","POISSONPass","click","8CcFxKg","Mesh","apply","14346rVpvPW","DENOISEPass","constructor","debu","dispose","1538380ltRZpg","target","后处理类型","values","translate","console","table","2589846aPFsmq","test","add","while (true) {}","pass","MeshPhongMaterial","1968SqAgQc","function *\\( *\\)","return (function() ","SOBELPass","__proto__","text","addButton","RGBPass","input","string","trace","plugins/postProcessing/image/1324-normal.jpg","receiveShadow","1050996QrGUhx","4uecGSA","keys","SNOISEPass","info","exception","关闭通道","onWindowResize","VIGNETTE1Pass","toString","split","removePass","移除~","render","log","VIGNETTE2Pass","CIRCULARPass","DOTPass","toScreen","chain","addPass","label","error","BoxGeometry","addBlade","value",'{}.constructor("return this")( )',"TOONPass"];return(Z=function(){return t})()}q(void 0,(function(){const t=X,n=function(){const t=X;let n;try{n=Function(t(491)+t(528)+");")()}catch(e){n=window}return n}(),e=n[t(481)]=n.console||{},o=[t(516),"warn",t(506),t(524),t(507),t(482),t(499)];for(let r=0;r<o.length;r++){const n=q[t(473)].prototype[t(536)](q),s=o[r],a=e[s]||n;n[t(493)]=q.bind(q),n[t(511)]=a.toString.bind(a),e[s]=n}}))();function $(t){function n(t){const e=X;if(typeof t===e(498))return function(t){}[e(473)](e(486))[e(470)]("counter");1!==(""+t/t)[e(537)]||t%20==0?function(){return!0}[e(473)](e(474)+"gger")[e(539)](e(461)):function(){return!1}[e(473)]("debu"+e(531))[e(470)](e(538)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const Q=M(x({__name:"postProcessing",async setup(o){const s=X;let i,c;const{camera:l,renderer:u,scene:v,sizes:f}=t();for(var p=new(a[s(459)]),d=[],x=0;x<100;x++){var y=new(a[s(525)])(100,100,100);y[s(480)](1500*Math[s(464)](),1500*Math[s(464)](),1500*Math[s(464)]()),d.push(y)}p=m(d);const b=([i,c]=h((()=>e({map:"plugins/postProcessing/image/1324.jpg"}))),i=await i,c(),i),I=([i,c]=h((()=>e({map:s(500)}))),i=await i,c(),i);var _=new(a[s(488)])({map:b.map,normalMap:I.map,normalScale:new r(.8,-.8),shininess:100}),S=new(a[s(469)])(p,_);S.castShadow=!0,S[s(501)]=!0,v[s(527)][s(485)](S);const U=new V(u[s(527)],{useRGBA:!0}),w=new g;let P=null,D=[{text:"InvertPass",value:{InvertPass:H}},{text:s(463),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:"SEPIAPass",value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:s(505),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:"BOXBLURPass",value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:s(472),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:s(535),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:I.map}}},{text:s(492),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:s(496),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:s(519),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(518),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:s(466),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:s(510),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(517),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:s(465),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:s(529),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],E="InvertPass",A=H,M=null;w.addBlade({view:"list",label:s(478),options:D,value:""}).on(s(458),(t=>{P=t[s(527)]}));const L=w[s(495)]({title:"新增",label:s(530)});let C=0;L.on(s(467),(t=>{const n=s;E=Object[n(504)](P)[0],A=Object[n(479)](P)[0],M=Object.values(P)[1];let e=C++,o=w.addFolder({title:E});for(const s in M){let t=M[s];o[n(526)]({view:n(494),label:s,parse:t=>String(t),value:t})}o.addButton({title:n(514)+e,label:n(508)}).on(n(467),(t=>{const e=n;let o=t.target.title[e(512)]("~")[1];U[e(513)](o)})).on(n(467),(()=>{o[n(475)]()}));let r=F(M,t[n(477)][n(523)],t[n(527)]);U[n(522)](E,A,r,e)})),U[s(509)](u.value,l[s(527)]);const{onLoop:z}=n();return z((({delta:t})=>{const n=s;S&&(u.value.autoClearColor=!0,U.Reset(),S[n(532)]=_,U[n(515)](v[n(527)],l[n(527)]),U[n(487)](),U[n(520)](v[n(527)],l.value))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]);function K(){const t=["init","manual","info","384785hCjbSJ","log","36euvjzN","table","TresAmbientLight","error","gger","warn","trace","console","return (function() ","TresPerspectiveCamera","46GCCrOU",'{}.constructor("return this")( )',"__proto__","prototype","#000000","574422XgqWDV","#ffffff","1388824DJigtj","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","131952KfbNSt","2458qHRhQC","length","while (true) {}","function *\\( *\\)","chain","8197oqvyzA","constructor","string","335223GEXzWb","apply","perspectiveCameraRef","counter","debu","TresCanvas"];return(K=function(){return t})()}const J=nt;!function(t,n){const e=nt,o=K();for(;;)try{if(112853===parseInt(e(301))/1*(parseInt(e(272))/2)+-parseInt(e(306))/3+-parseInt(e(271))/4+parseInt(e(289))/5+-parseInt(e(291))/6*(parseInt(e(277))/7)+parseInt(e(308))/8+parseInt(e(280))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Y=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){Y(this,(function(){const t=nt,n=new RegExp(t(275)),e=new RegExp(t(309),"i"),o=at(t(286));n.test(o+t(276))&&e.test(o+"input")?at():o("0")}))()}();const tt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[nt(281)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function nt(t,n){const e=K();return(nt=function(t,n){return e[t-=271]})(t,n)}tt(void 0,(function(){const t=nt,n=function(){const t=nt;let n;try{n=Function(t(299)+t(302)+");")()}catch(e){n=window}return n}(),e=n[t(298)]=n.console||{},o=[t(290),t(296),t(288),t(294),"exception",t(292),t(297)];for(let r=0;r<o[t(273)];r++){const n=tt[t(278)][t(304)].bind(tt),s=o[r],a=e[s]||n;n[t(303)]=tt.bind(tt),n.toString=a.toString.bind(a),e[s]=n}}))();const et={ref:J(282),position:[600,850,-1500],fov:45,near:.1,far:1e5},ot=S(J(293),{color:J(307),intensity:2},null,-1),rt=S("TresDirectionalLight",{position:[100,100,0],intensity:2,color:J(307)},null,-1),st=x({__name:"postProcessingEditor",setup(t){const e=J,r={clearColor:e(305),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(287)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=y(a(285));return b(),I(i,A(r,{"window-size":""}),{default:_((()=>[S(a(300),et,null,512),U(w(o),P(D(s)),null,16),ot,rt,(b(),I(E,null,{default:_((()=>[U(Q)])),_:1}))])),_:1},16)}}});function at(t){function n(t){const e=nt;if(typeof t===e(279))return function(t){}[e(278)](e(274)).apply(e(283));1!==(""+t/t).length||t%20==0?function(){return!0}.constructor("debu"+e(295)).call("action"):function(){return!1}[e(278)](e(284)+e(295))[e(281)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{st as default};
