import{_ as t,b as n,T as e,ai as o}from"./three.FxqAALWt1741168315107.js";import{e as r,a as i,o as a,f as s}from"./@tresjs.Ea5Oq_-I1741168315107.js";import"./index.HOJZdkTP1741168315107.js";import{c}from"./simplex-noise.jB2HxhHB1741168315107.js";import{C as l}from"./index.kxnBajYY1741168315107.js";import{d as u,a3 as f,o as p,H as h,N as m,u as d,r as v,f as g,g as x,j as w,aj as y,ak as b,al as _}from"./@vue.NRI7TcgI1741168315107.js";import{_ as j}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.sUSuvd191741168315107.js";import"./postprocessing.hfy6Kqg11741168315107.js";import"./@vueuse.Z8xAfE_A1741168315107.js";import"./lamina.GHMG6Jkg1741168315107.js";import"./glsl-tokenizer.qg62nhGX1741168315107.js";import"./@amap.d8-LJgNK1741168315107.js";import"./glsl-token-descope._tRbPwhp1741168315107.js";import"./glsl-token-depth.6Cy4M5A-1741168315107.js";import"./glsl-token-scope.YxLcgijO1741168315107.js";import"./glsl-token-properties.rtFiiTEd1741168315107.js";import"./glsl-token-assignments.N2meS47p1741168315107.js";import"./glsl-token-string.QXeZSmJa1741168315107.js";import"./glsl-token-functions.eBLHt7yC1741168315107.js";import"./object-hash.Ter1BX541741168315107.js";import"./jszip.it_63bJF1741168315107.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.PiIctW4h1741168315107.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.O5KolXsL1741168315107.js";import"./three-stdlib.dTHRtr7H1741168315107.js";import"./@pmndrs.rn5_p8x-1741168315107.js";import"./utils.sYPlHJtA1741168315107.js";const M=I;!function(t,n){const e=I,o=S();for(;;)try{if(604780===parseInt(e(255))/1*(-parseInt(e(252))/2)+parseInt(e(295))/3+-parseInt(e(257))/4*(parseInt(e(296))/5)+parseInt(e(314))/6+-parseInt(e(275))/7*(parseInt(e(280))/8)+parseInt(e(293))/9+parseInt(e(248))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[I(239)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){z(this,(function(){const t=I,n=new RegExp(t(294)),e=new RegExp(t(240),"i"),o=O("init");n.test(o+t(243))&&e[t(284)](o+"input")?O():o("0")}))()}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function I(t,n){const e=S();return(I=function(t,n){return e[t-=237]})(t,n)}A(void 0,(function(){const t=I;let n;try{n=Function(t(313)+t(287)+");")()}catch(r){n=window}const e=n[t(261)]=n[t(261)]||{},o=[t(273),t(298),"info",t(303),t(286),t(267),t(285)];for(let i=0;i<o.length;i++){const n=A[t(297)].prototype.bind(A),r=o[i],a=e[r]||n;n[t(256)]=A[t(271)](A),n[t(282)]=a[t(282)][t(271)](a),e[r]=n}}))();const C=[M(251)],k=[M(302),M(292),M(310),M(262),M(311),"attributes-stretch","attributes-halfRootAngleSin",M(278)],F=[M(268)],R=[M(291)];function S(){const t=["error","Vector4","joints","sin","Color","DoubleSide","translate","attributes-uv","attributes-orientation","while (true) {}","return (function() ","5054880XPIuIv","array","call","apply","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","normalize","needsUpdate","chain","orientationsF32","stateObject","halfRootAngleCosF32","TresInstancedBufferGeometry","6820880uAerVK","set","Vector3","material","2JdjbBG","uniforms","random","635917PGjQfB","__proto__","1252OfrOcr","attributes","length","counter","console","attributes-offset","alphaMap","width","convertSRGBToLinear","InstancedBufferAttribute","table","geometry","debu","offsetsF32","bind","grass","log","cos","830004KWwVAP","computeVertexNormals","string","attributes-halfRootAngleCos","gger","24ZpadmL","map","toString","halfRootAngleSinF32","test","trace","exception",'{}.constructor("return this")( )',"push","value","PlaneGeometry","side","attributes-position","614412ONAXZa","function *\\( *\\)","1429560DBocjk","7555oAjYpM","constructor","warn","position","TresMesh","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","index"];return(S=function(){return t})()}const D=u({__name:M(272),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(o){const a=M;let s,u;const v=([s,u]=f((()=>i({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),s=await s,u(),s),g=o,x=c(Math[a(254)]);function w(n,e){const o=a,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,i=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,s=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,c=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(304)])(r,i,s,c)}function y(t,n){var e=2*x(t/50,n/50);return e+=4*x(t/100,n/100),e+=.2*x(t/10,n/10)}const b=function(o,r){const i=a,s=[],c=[],l=[],u=[],f=[];let p=new(t[i(304)]),h=new(t[i(304)]);const m=-.25;for(let e=0;e<o;e++){const a=Math[i(254)]()*r-r/2,d=Math[i(254)]()*r-r/2,v=y(a,d);s[i(288)](a,v,d);let g=Math.PI-Math.random()*(2*Math.PI);u[i(288)](Math[i(306)](.5*g)),f[i(288)](Math[i(274)](.5*g));let x=new n(0,1,0),b=x.x*Math[i(306)](g/2),_=x.y*Math[i(306)](g/2),j=x.z*Math.sin(g/2),M=Math.cos(g/2);p.set(b,_,j,M).normalize(),g=.5*Math[i(254)]()+m,x=new(t[i(250)])(1,0,0),b=x.x*Math.sin(g/2),_=x.y*Math.sin(g/2),j=x.z*Math.sin(g/2),M=Math.cos(g/2),h.set(b,_,j,M)[i(241)](),p=w(p,h),g=.5*Math.random()+m,x=new(t[i(250)])(0,0,1),b=x.x*Math[i(306)](g/2),_=x.y*Math[i(306)](g/2),j=x.z*Math[i(306)](g/2),M=Math[i(274)](g/2),h[i(249)](b,_,j,M)[i(241)](),p=w(p,h),c[i(288)](p.x,p.y,p.z,p.w),e<o/3?l[i(288)](1.8*Math[i(254)]()):l[i(288)](Math.random())}return{offsetsF32:new(t[i(266)])(new Float32Array(s),3),orientationsF32:new(t[i(266)])(new Float32Array(c),4),stretchesF32:new e(new Float32Array(l),1),halfRootAngleCosF32:new(t[i(266)])(new Float32Array(f),1),halfRootAngleSinF32:new(t[i(266)])(new Float32Array(u),1)}}(g.instances,g[a(264)]),_=new(t[a(290)])(g.bW,g.bH,1,g[a(305)])[a(309)](0,g.bH/2,0),j=new(t[a(290)])(g.width,g[a(264)],32,32);j.lookAt(new(t[a(250)])(0,1,0));const z=j[a(258)].position;for(let t=0;t<z.array.length;t+=3)z[a(237)][t+1]=y(z[a(237)][t],z[a(237)][t+2]);j[a(258)][a(299)][a(242)]=!0,j[a(276)]();const A=new(l({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(t[a(307)])(.3,.9,0)[a(265)](),bottomColor:new(t[a(307)])(0,.2,0)[a(265)]()},"   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }",a(301),(n=>{const e=a;n[e(291)]=t[e(308)]})));A[a(281)]=v[a(281)],A[a(263)]=v[a(263)],A.toneMapped=!1;const{onLoop:I}=r();return I((({elapsed:t})=>{const n=a;A[n(253)].time[n(289)]=t/4})),(n,e)=>{const o=a;return p(),h("TresGroup",null,[m(o(300),{material:d(A)},[m(o(247),{index:d(_)[o(302)],"attributes-position":d(_)[o(258)].position,"attributes-uv":d(_)[o(258)].uv,"attributes-offset":d(b)[o(270)],"attributes-orientation":d(b)[o(244)],"attributes-stretch":d(b).stretchesF32,"attributes-halfRootAngleSin":d(b)[o(283)],"attributes-halfRootAngleCos":d(b)[o(246)]},null,8,k)],8,C),m(o(300),{position:[0,0,0],geometry:d(j)},[m("TresMeshStandardMaterial",{color:"#000f00",side:t[o(308)]},null,8,R)],8,F)])}}});function O(t){function n(t){const e=I;if(typeof t===e(277))return function(t){}[e(297)](e(312)).apply(e(260));1!==(""+t/t)[e(259)]||t%20==0?function(){return!0}.constructor(e(269)+e(279))[e(238)]("action"):function(){return!1}.constructor(e(269)+"gger")[e(239)](e(245)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const B=E;function E(t,n){const e=T();return(E=function(t,n){return e[t-=349]})(t,n)}!function(t,n){const e=E,o=T();for(;;)try{if(444089===parseInt(e(373))/1*(parseInt(e(372))/2)+parseInt(e(365))/3+-parseInt(e(351))/4+-parseInt(e(349))/5*(-parseInt(e(366))/6)+-parseInt(e(368))/7+-parseInt(e(364))/8+-parseInt(e(377))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[E(380)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){L(this,(function(){const t=E,n=new RegExp(t(356)),e=new RegExp(t(358),"i"),o=U(t(361));n[t(353)](o+t(376))&&e.test(o+t(355))?U():o("0")}))()}();const P=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[E(380)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function T(){const t=["670412cUeZzV","exception","test","length","input","function *\\( *\\)","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","table","info","init","call","toString","5286824gCxdHE","2353644HcUXfL","4233972KNfuFm","TresPerspectiveCamera","5258995kxhLBV","console","error","log","620BhmTEM","2269MchiML","__proto__","counter","chain","1527930eOKlOn","gger","grass","apply","action","while (true) {}","return (function() ","debu","bind","5DRCIno","constructor"];return(T=function(){return t})()}P(void 0,(function(){const t=E;let n;try{n=Function(t(383)+'{}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(369)]=n[t(369)]||{},o=[t(371),"warn",t(360),t(370),t(352),t(359),"trace"];for(let i=0;i<o[t(354)];i++){const n=P.constructor.prototype[t(385)](P),r=o[i],a=e[r]||n;n[t(374)]=P[t(385)](P),n[t(363)]=a[t(363)].bind(a),e[r]=n}}))();const H=u({__name:B(379),setup(t){const n=v({alpha:!0,toneMapping:o,windowSize:!0,clearColor:6710886}),e=v({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=E;return p(),g(d(s),y(b(n)),{default:x((()=>[o[0]||(o[0]=m(r(367),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),w(d(a),y(b(e)),null,16),(p(),g(_,null,{default:x((()=>[w(D)])),_:1})),(p(),g(_,null,{default:x((()=>[w(d(j),{texture:r(357)})])),_:1}))])),_:1},16)}}});function U(t){function n(t){const e=E;if("string"==typeof t)return function(t){}.constructor(e(382)).apply(e(375));1!==(""+t/t)[e(354)]||t%20==0?function(){return!0}[e(350)]("debu"+e(378))[e(362)](e(381)):function(){return!1}[e(350)](e(384)+"gger")[e(380)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{H as default};
