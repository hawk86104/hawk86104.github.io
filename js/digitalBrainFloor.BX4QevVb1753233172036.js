import{cf as o,N as s,_ as e,ce as a}from"./three.CcAUWIwc1753233172036.js";import{a as i}from"./@tresjs.C_lUIoBy1753233172036.js";import{P as t}from"./tweakpane.C0HtAJSg1753233172036.js";import{_ as r}from"./reflectorMesh.vue_vue_type_script_setup_true_lang.DvZcpb_X1753233172036.js";import"./index.ehJwyQ8v1753233172036.js";import{l}from"./util.DwAr7qKM1753233172036.js";import{_ as n}from"./cloudPoints.vue_vue_type_script_setup_true_lang.D4S_BESA1753233172036.js";import{_ as p,a as m}from"./bubblesEffect.vue_vue_type_script_setup_true_lang.BBmJ6Mts1753233172036.js";import{_ as d}from"./randomLoading.vue_vue_type_script_setup_true_lang.DQJaVaP-1753233172036.js";import{d as u,r as c,aa as _,h as f,G as j,o as g,j as h,u as b,f as y,I as w,a7 as v,a8 as B,e as L,H as k,m as x,a5 as C,F as T}from"./@vue.DwSifnVs1753233172036.js";import"./postprocessing.BWGCgD611753233172036.js";import"./@vueuse.35KRNqxK1753233172036.js";import"./utils.BqiPcXqU1753233172036.js";import"./@fesjs.CJmphC0G1753233172036.js";import"./vue-router.0le_2Tu71753233172036.js";import"./lodash-es.C7pWAXPe1753233172036.js";import"./@qlin.q6OWdsQV1753233172036.js";import"./pinia.ia5100Wx1753233172036.js";import"./@babel.BPq7uOAK1753233172036.js";import"./@floating-ui.BFjFSAYt1753233172036.js";import"./@juggle.CcBCnTIR1753233172036.js";import"./index.DBmzea2c1753233172036.js";import"./three-mesh-ui.module.BS8L3_9E1753233172036.js";import"./starLoading.PFMVYWAP1753233172036.js";import"./cssLoaders.4Dzr9WTU1753233172036.js";import"./bubbleLoading.7uib_EEo1753233172036.js";import"./yangyangLoading.BTuUUcXb1753233172036.js";const S={position:[0,120,0]},z=u({__name:"digitalBrainFloor",async setup(u){let z,G;const M=c({mirrorSize:500,gridSize:490,mirrorColor:"#efefef",divisions:10,colorCenterLine:"#444444",colorGrid:"#888888"}),P=c({color:"#fff",show:!0,opacity:1}),q=new t({title:"参数"});q.addBinding(P,"show",{label:"点云显示"}),q.addBinding(P,"color",{label:"点云颜色"}),q.addBinding(P,"opacity",{label:"点云透明度",min:0,max:1,step:.1});const F=c({color:"#84ccff",show:!0,opacity:1});q.addBinding(F,"show",{label:"脑轮廓显示"}),q.addBinding(F,"color",{label:"脑轮廓颜色"}),q.addBinding(F,"opacity",{label:"脑轮廓透明度",min:0,max:1,step:.1});const H=c({color:"#9e00af",show:!0,opacity:1});q.addBinding(H,"show",{label:"脑组织显示"}),q.addBinding(H,"color",{label:"脑组织颜色"}),q.addBinding(H,"opacity",{label:"脑组织透明度",min:0,max:1,step:.1});const I=new o,R=([z,G]=_((()=>l("./plugins/medical/model/brainparts.OBJ",I))),z=await z,G(),z),A=c({clearColor:"#201919",shadows:!0,alpha:!1,shadowMapType:a,outputColorSpace:e,toneMapping:s}),E=c({autoRotate:!0,autoRotateSpeed:2});return(o,s)=>{const e=f("TresCanvas");return g(),j(T,null,[h(b(d)),h(e,x(A,{"window-size":""}),{default:y((()=>[s[0]||(s[0]=w("TresPerspectiveCamera",{position:[100,400,500],fov:45,near:.1,far:1e4,"look-at":[0,0,0]},null,-1)),h(b(i),v(B(E)),null,16),s[1]||(s[1]=w("TresAmbientLight",{intensity:.5},null,-1)),w("TresGroup",S,[P.show?(g(),L(n,x({key:0,model:b(R)},P),null,16,["model"])):k("",!0),(g(),L(C,null,{default:y((()=>[F.show?(g(),L(p,x({key:0,model:b(R)},F),null,16,["model"])):k("",!0)])),_:1})),H.show?(g(),L(m,x({key:1,model:b(R)},H),null,16,["model"])):k("",!0)]),h(r,v(B(M)),null,16)])),_:1},16)],64)}}});export{z as default};
