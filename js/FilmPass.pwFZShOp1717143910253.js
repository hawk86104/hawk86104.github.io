import{bn as r,aB as t}from"./vendor.DmiBkafs1717143910253.js";import{P as o,F as n}from"./Pass.8yYTzbZl1717143910253.js";const l={name:"FilmShader",uniforms:{tDiffuse:{value:null},time:{value:0},intensity:{value:.5},grayscale:{value:!1}},vertexShader:"\n\n		varying vec2 vUv;\n\n		void main() {\n\n			vUv = uv;\n			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n		}",fragmentShader:"\n\n		#include <common>\n\n		uniform float intensity;\n		uniform bool grayscale;\n		uniform float time;\n\n		uniform sampler2D tDiffuse;\n\n		varying vec2 vUv;\n\n		void main() {\n\n			vec4 base = texture2D( tDiffuse, vUv );\n\n			float noise = rand( fract( vUv + time ) );\n\n			vec3 color = base.rgb + base.rgb * clamp( 0.1 + noise, 0.0, 1.0 );\n\n			color = mix( base.rgb, color, intensity );\n\n			if ( grayscale ) {\n\n				color = vec3( luminance( color ) ); // assuming linear-srgb\n\n			}\n\n			gl_FragColor = vec4( color, base.a );\n\n		}"};class c extends o{constructor(e=.5,s=!1){super();const a=l;this.uniforms=r.clone(a.uniforms),this.material=new t({name:a.name,uniforms:this.uniforms,vertexShader:a.vertexShader,fragmentShader:a.fragmentShader}),this.uniforms.intensity.value=e,this.uniforms.grayscale.value=s,this.fsQuad=new n(this.material)}render(e,s,a,i){this.uniforms.tDiffuse.value=a.texture,this.uniforms.time.value+=i,this.renderToScreen?(e.setRenderTarget(null),this.fsQuad.render(e)):(e.setRenderTarget(s),this.clear&&e.clear(),this.fsQuad.render(e))}dispose(){this.material.dispose(),this.fsQuad.dispose()}}export{c as F};
