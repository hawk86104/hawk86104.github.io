import{a6 as t,C as n,K as e,al as o,a9 as r}from"./three.X8FgZbPT1723608367756.js";import{$ as a,N as i,d as s,x as c}from"./@tresjs.zzLYikgQ1723608367756.js";import"./index.p-IUZwZ31723608367756.js";import{a as l}from"./simplex-noise.MycypUyu1723608367756.js";import{C as u}from"./index.WHdZ4mF61723608367756.js";import{d as f,a4 as p,o as h,D as m,J as d,u as v,r as g,f as x,g as y,j as w,aj as b,ak as _,al as j}from"./@vue.Q1VpS3901723608367756.js";import{_ as M}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.bBs1P4E_1723608367756.js";import"./tweakpane.yHWGBmom1723608367756.js";import"./@vueuse.QL9lULrD1723608367756.js";import"./lamina.HNN13bpc1723608367756.js";import"./glsl-tokenizer.ThrrjBBu1723608367756.js";import"./@amap.AaCaABAE1723608367756.js";import"./glsl-token-descope.42W-QF1r1723608367756.js";import"./glsl-token-depth.J-LK-18o1723608367756.js";import"./glsl-token-scope.MhHHpFFY1723608367756.js";import"./glsl-token-properties.v3TikmJq1723608367756.js";import"./glsl-token-assignments.bcfBHGv21723608367756.js";import"./glsl-token-string.8SC_GpjQ1723608367756.js";import"./glsl-token-functions.bUknzHyA1723608367756.js";import"./object-hash.UuJege4m1723608367756.js";import"./jszip.fq1N6JAS1723608367756.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.pK5zH3B11723608367756.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.ucGjH-Zx1723608367756.js";import"./three-stdlib.dKtHHxUb1723608367756.js";import"./@pmndrs.enT7k5Vt1723608367756.js";import"./utils.VGBsu_Ek1723608367756.js";const z=I;!function(t,n){const e=I,o=E();for(;;)try{if(785318===-parseInt(e(354))/1*(-parseInt(e(394))/2)+-parseInt(e(364))/3*(parseInt(e(368))/4)+-parseInt(e(409))/5+-parseInt(e(405))/6*(-parseInt(e(359))/7)+parseInt(e(398))/8+parseInt(e(340))/9+-parseInt(e(361))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[I(393)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function I(t,n){const e=E();return(I=function(t,n){return e[t-=340]})(t,n)}!function(){A(this,(function(){const t=I,n=new RegExp(t(411)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=O(t(351));n[t(356)](o+t(344))&&e[t(356)](o+"input")?O():o("0")}))()}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[I(393)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();C(void 0,(function(){const t=I,n=function(){const t=I;let n;try{n=Function(t(408)+t(402)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(385)]||{},o=["log",t(407),"info",t(418),t(360),t(388),t(404)];for(let r=0;r<o[t(347)];r++){const n=C[t(391)][t(419)][t(395)](C),a=o[r],i=e[a]||n;n[t(420)]=C[t(395)](C),n[t(396)]=i.toString[t(395)](i),e[a]=n}}))();const S=[z(384)],k=[z(416),z(410),z(389),z(377),z(352),z(413),z(366),z(406)],R=["geometry"],F=["side"],D=f({__name:"grass",props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(r){const s=z;let c,f;const g=([c,f]=p((()=>i({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),c=await c,f(),c),x=r,y=l(Math[s(370)]);function w(t,n){const e=t.x*n.w+t.y*n.z-t.z*n.y+t.w*n.x,r=-t.x*n.z+t.y*n.w+t.z*n.x+t.w*n.y,a=t.x*n.y-t.y*n.x+t.z*n.w+t.w*n.z,i=-t.x*n.x-t.y*n.y-t.z*n.z+t.w*n.w;return new o(e,r,a,i)}function b(t,n){var e=2*y(t/50,n/50);return e+=4*y(t/100,n/100),e+=.2*y(t/10,n/10)}const _=function(n,o){const r=s,a=[],i=[],c=[],l=[],u=[];let f=new(t[r(373)]),p=new(t[r(373)]);const h=-.25;for(let e=0;e<n;e++){const s=Math[r(370)]()*o-o/2,m=Math.random()*o-o/2,d=b(s,m);a[r(379)](s,d,m);let v=Math.PI-Math[r(370)]()*(2*Math.PI);l[r(379)](Math[r(417)](.5*v)),u.push(Math[r(376)](.5*v));let g=new(t[r(348)])(0,1,0),x=g.x*Math[r(417)](v/2),y=g.y*Math[r(417)](v/2),_=g.z*Math[r(417)](v/2),j=Math[r(376)](v/2);f[r(380)](x,y,_,j)[r(346)](),v=.5*Math[r(370)]()+h,g=new(t[r(348)])(1,0,0),x=g.x*Math[r(417)](v/2),y=g.y*Math.sin(v/2),_=g.z*Math[r(417)](v/2),j=Math[r(376)](v/2),p[r(380)](x,y,_,j).normalize(),f=w(f,p),v=.5*Math[r(370)]()+h,g=new(t[r(348)])(0,0,1),x=g.x*Math[r(417)](v/2),y=g.y*Math[r(417)](v/2),_=g.z*Math[r(417)](v/2),j=Math.cos(v/2),p.set(x,y,_,j)[r(346)](),f=w(f,p),i.push(f.x,f.y,f.z,f.w),e<n/3?c[r(379)](1.8*Math.random()):c[r(379)](Math[r(370)]())}return{offsetsF32:new e(new Float32Array(a),3),orientationsF32:new(t[r(387)])(new Float32Array(i),4),stretchesF32:new e(new Float32Array(c),1),halfRootAngleCosF32:new(t[r(387)])(new Float32Array(u),1),halfRootAngleSinF32:new(t[r(387)])(new Float32Array(l),1)}}(x[s(397)],x[s(363)]),j=new(t[s(400)])(x.bW,x.bH,1,x[s(365)])[s(415)](0,x.bH/2,0),M=new(t[s(400)])(x[s(363)],x[s(363)],32,32);M[s(378)](new(t[s(348)])(0,1,0));const A=M[s(414)].position;for(let t=0;t<A[s(371)][s(347)];t+=3)A.array[t+1]=b(A.array[t],A[s(371)][t+2]);M[s(414)][s(412)][s(374)]=!0,M[s(350)]();const I=new(u({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new n(.3,.9,0)[s(342)](),bottomColor:new(t[s(383)])(0,.2,0)[s(342)]()},s(358),"\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }",(n=>{const e=s;n.side=t[e(353)]})));I[s(349)]=g.map,I[s(369)]=g[s(369)],I[s(381)]=!1;const{onLoop:C}=a();return C((({elapsed:t})=>{const n=s;I.uniforms[n(386)].value=t/4})),(n,e)=>{const o=s;return h(),m(o(375),null,[d(o(367),{material:v(I)},[d(o(399),{index:v(j)[o(416)],"attributes-position":v(j)[o(414)][o(412)],"attributes-uv":v(j)[o(414)].uv,"attributes-offset":v(_)[o(362)],"attributes-orientation":v(_)[o(401)],"attributes-stretch":v(_)[o(390)],"attributes-halfRootAngleSin":v(_)[o(345)],"attributes-halfRootAngleCos":v(_)[o(357)]},null,8,k)],8,S),d("TresMesh",{position:[0,0,0],geometry:v(M)},[d(o(392),{color:o(341),side:t[o(353)]},null,8,F)],8,R)])}}});function E(){const t=["3agSLbB","joints","attributes-halfRootAngleSin","TresMesh","3789112LXrMFH","alphaMap","random","array","stateObject","Vector4","needsUpdate","TresGroup","cos","attributes-offset","lookAt","push","set","toneMapped","gger","Color","material","console","time","InstancedBufferAttribute","table","attributes-uv","stretchesF32","constructor","TresMeshStandardMaterial","apply","2jKeEjc","bind","toString","instances","10739456ojttAQ","TresInstancedBufferGeometry","PlaneGeometry","orientationsF32",'{}.constructor("return this")( )',"debu","trace","6iqyQSy","attributes-halfRootAngleCos","warn","return (function() ","3686840yOJGol","attributes-position","function *\\( *\\)","position","attributes-stretch","attributes","translate","index","sin","error","prototype","__proto__","action","6073389mOZHdi","#000f00","convertSRGBToLinear","while (true) {}","chain","halfRootAngleSinF32","normalize","length","Vector3","map","computeVertexNormals","init","attributes-orientation","DoubleSide","1535141ARpqln","counter","test","halfRootAngleCosF32","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","2509094DDtiiZ","exception","14408720QYLsMV","offsetsF32","width"];return(E=function(){return t})()}function O(t){function n(t){const e=I;if("string"==typeof t)return function(t){}.constructor(e(343)).apply(e(355));1!==(""+t/t)[e(347)]||t%20==0?function(){return!0}.constructor(e(403)+e(382)).call(e(421)):function(){return!1}[e(391)]("debugger")[e(393)](e(372)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const T=P;!function(t,n){const e=P,o=H();for(;;)try{if(866182===-parseInt(e(443))/1+parseInt(e(451))/2+-parseInt(e(445))/3*(parseInt(e(429))/4)+-parseInt(e(449))/5*(-parseInt(e(452))/6)+-parseInt(e(436))/7+parseInt(e(455))/8*(-parseInt(e(434))/9)+parseInt(e(427))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[P(431)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){L(this,(function(){const t=P,n=new RegExp(t(440)),e=new RegExp(t(425),"i"),o=U(t(444));n[t(450)](o+t(428))&&e[t(450)](o+"input")?U():o("0")}))()}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[P(431)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function H(){const t=["723804ojcMTR",'{}.constructor("return this")( )',"action","call","5pJRdbZ","test","2337158ssQeho","6613122AcZsbE","console","string","16oFxJtu","exception","log","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","toString","info","length","debu","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","stateObject","21347700qcxKBf","chain","4IaYtrW","constructor","apply","warn","error","5621886hjahAU","counter","9877483ZZCOMJ","prototype","bind","TresPerspectiveCamera","function *\\( *\\)","table","grass","637709iAuXKG","init"];return(H=function(){return t})()}B(void 0,(function(){const t=P;let n;try{n=Function("return (function() "+t(446)+");")()}catch(r){n=window}const e=n.console=n[t(453)]||{},o=[t(419),t(432),t(422),t(433),t(456),t(441),"trace"];for(let a=0;a<o[t(423)];a++){const n=B.constructor[t(437)][t(438)](B),r=o[a],i=e[r]||n;n.__proto__=B.bind(B),n[t(421)]=i.toString[t(438)](i),e[r]=n}}))();const q=d(T(439),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1);function P(t,n){const e=H();return(P=function(t,n){return e[t-=419]})(t,n)}const G=f({__name:T(442),setup(t){const n=g({alpha:!0,toneMapping:r,windowSize:!0,clearColor:6710886}),e=g({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=P;return h(),x(v(c),b(_(n)),{default:y((()=>[q,w(v(s),b(_(e)),null,16),(h(),x(j,null,{default:y((()=>[w(D)])),_:1})),(h(),x(j,null,{default:y((()=>[w(v(M),{texture:r(420)})])),_:1}))])),_:1},16)}}});function U(t){function n(t){const e=P;if(typeof t===e(454))return function(t){}[e(430)]("while (true) {}")[e(431)](e(435));1!==(""+t/t).length||t%20==0?function(){return!0}[e(430)](e(424)+"gger")[e(448)](e(447)):function(){return!1}[e(430)](e(424)+"gger")[e(431)](e(426)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{G as default};
