import{a6 as t,r as n,C as e,Z as o,V as r,K as a,a9 as i}from"./three.eXhPIzTa1723718122052.js";import{$ as s,N as c,d as l,x as u}from"./@tresjs.GO-cpSrO1723718122052.js";import"./index.6jRYB3Q51723718122052.js";import{a as f}from"./simplex-noise.MycypUyu1723718122052.js";import{C as p}from"./index.Zx65DVuD1723718122052.js";import{d as h,a4 as m,o as d,D as v,J as g,u as x,r as w,f as y,g as b,j as _,aj as M,ak as j,al as z}from"./@vue.Q1VpS3901723718122052.js";import{_ as A}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.qjZ6Ewvf1723718122052.js";import"./tweakpane.yHWGBmom1723718122052.js";import"./@vueuse.z522fCYR1723718122052.js";import"./lamina.AWK7hxpu1723718122052.js";import"./glsl-tokenizer.1di3f6lO1723718122052.js";import"./@amap.r0EhX7fK1723718122052.js";import"./glsl-token-descope.z_OVgPaY1723718122052.js";import"./glsl-token-depth.hHnmA4PV1723718122052.js";import"./glsl-token-scope.dRPJ30KU1723718122052.js";import"./glsl-token-properties.ApwY1AYj1723718122052.js";import"./glsl-token-assignments.mmCjVD501723718122052.js";import"./glsl-token-string.UXOMf2GN1723718122052.js";import"./glsl-token-functions.-uFsyLaA1723718122052.js";import"./object-hash.-AaPYX971723718122052.js";import"./jszip.t8h7C5WV1723718122052.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.sf0t7W401723718122052.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.iRS2lyQt1723718122052.js";import"./three-stdlib.3hvj_pKp1723718122052.js";import"./@pmndrs.s9IQpSZs1723718122052.js";import"./utils.RG0K-GOo1723718122052.js";const I=S;!function(t,n){const e=S,o=D();for(;;)try{if(448382===-parseInt(e(222))/1*(-parseInt(e(246))/2)+-parseInt(e(204))/3+-parseInt(e(200))/4+-parseInt(e(229))/5+-parseInt(e(259))/6+-parseInt(e(230))/7+parseInt(e(207))/8)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[S(226)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function S(t,n){const e=D();return(S=function(t,n){return e[t-=185]})(t,n)}!function(){C(this,(function(){const t=S,n=new RegExp(t(255)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=P(t(197));n[t(243)](o+t(194))&&e.test(o+"input")?P():o("0")}))()}();const k=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[S(226)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function D(){const t=["constructor","toneMapped","error","181603OPUrir","computeVertexNormals","prototype","time","apply","index","random","469310QBvebl","5519017dLdGwe","convertSRGBToLinear","offsetsF32","attributes-position","normalize","attributes","while (true) {}","TresGroup","#000f00","Vector3","InstancedBufferAttribute","debu","gger","test","attributes-halfRootAngleCos","sin","2aCOEYH","toString","warn","TresInstancedBufferGeometry","table","PlaneGeometry","side","attributes-halfRootAngleSin","TresMeshStandardMaterial","function *\\( *\\)","instances","counter","stateObject","1718898nYSfMy","console","log","TresMesh","length","geometry",'{}.constructor("return this")( )',"push","translate","orientationsF32","chain","DoubleSide","position","init","halfRootAngleSinF32","map","1284152wFfqMK","width","string","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","2019516SugAbk","cos","call","19438120JSzuqG","bind","array","attributes-stretch","needsUpdate","joints","Vector4","value","alphaMap","stretchesF32","set","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }"];return(D=function(){return t})()}k(void 0,(function(){const t=S;let n;try{n=Function("return (function() "+t(190)+");")()}catch(r){n=window}const e=n.console=n[t(185)]||{},o=[t(186),t(248),"info",t(221),"exception",t(250),"trace"];for(let a=0;a<o[t(188)];a++){const n=k[t(219)][t(224)][t(208)](k),r=o[a],i=e[r]||n;n.__proto__=k[t(208)](k),n[t(247)]=i.toString[t(208)](i),e[r]=n}}))();const F=["material"],R=["index",I(233),"attributes-uv","attributes-offset","attributes-orientation",I(210),I(253),I(244)],T=[I(189)],E=["side"],O=h({__name:"grass",props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(i){const l=I;let u,h;const w=([u,h]=m((()=>c({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),u=await u,h(),u),y=i,b=f(Math[l(228)]);function _(n,e){const o=l,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,a=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,i=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,s=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(213)])(r,a,i,s)}function M(t,n){var e=2*b(t/50,n/50);return e+=4*b(t/100,n/100),e+=.2*b(t/10,n/10)}const j=function(n,e){const o=l,i=[],s=[],c=[],u=[],f=[];let p=new(t[o(213)]),h=new(t[o(213)]);const m=-.25;for(let a=0;a<n;a++){const l=Math[o(228)]()*e-e/2,d=Math[o(228)]()*e-e/2,v=M(l,d);i[o(191)](l,v,d);let g=Math.PI-Math.random()*(2*Math.PI);u.push(Math[o(245)](.5*g)),f[o(191)](Math[o(205)](.5*g));let x=new(t[o(239)])(0,1,0),w=x.x*Math[o(245)](g/2),y=x.y*Math.sin(g/2),b=x.z*Math[o(245)](g/2),j=Math.cos(g/2);p[o(217)](w,y,b,j)[o(234)](),g=.5*Math[o(228)]()+m,x=new r(1,0,0),w=x.x*Math[o(245)](g/2),y=x.y*Math.sin(g/2),b=x.z*Math.sin(g/2),j=Math.cos(g/2),h[o(217)](w,y,b,j)[o(234)](),p=_(p,h),g=.5*Math.random()+m,x=new(t[o(239)])(0,0,1),w=x.x*Math.sin(g/2),y=x.y*Math.sin(g/2),b=x.z*Math[o(245)](g/2),j=Math[o(205)](g/2),h[o(217)](w,y,b,j)[o(234)](),p=_(p,h),s[o(191)](p.x,p.y,p.z,p.w),a<n/3?c[o(191)](1.8*Math.random()):c[o(191)](Math[o(228)]())}return{offsetsF32:new a(new Float32Array(i),3),orientationsF32:new a(new Float32Array(s),4),stretchesF32:new(t[o(240)])(new Float32Array(c),1),halfRootAngleCosF32:new(t[o(240)])(new Float32Array(f),1),halfRootAngleSinF32:new(t[o(240)])(new Float32Array(u),1)}}(y[l(256)],y[l(201)]),z=new(t[l(251)])(y.bW,y.bH,1,y[l(212)])[l(192)](0,y.bH/2,0),A=new n(y[l(201)],y[l(201)],32,32);A.lookAt(new(t[l(239)])(0,1,0));const C=A[l(235)].position;for(let t=0;t<C[l(209)][l(188)];t+=3)C[l(209)][t+1]=M(C[l(209)][t],C[l(209)][t+2]);A[l(235)][l(196)][l(211)]=!0,A[l(223)]();const S=new(p({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new e(.3,.9,0)[l(231)](),bottomColor:new e(0,.2,0)[l(231)]()},l(218),l(203),(n=>{const e=l;n[e(252)]=t[e(195)]})));S[l(199)]=w.map,S[l(215)]=w[l(215)],S[l(220)]=!1;const{onLoop:k}=s();return k((({elapsed:t})=>{const n=l;S.uniforms[n(225)][n(214)]=t/4})),(t,n)=>{const e=l;return d(),v(e(237),null,[g("TresMesh",{material:x(S)},[g(e(249),{index:x(z)[e(227)],"attributes-position":x(z)[e(235)][e(196)],"attributes-uv":x(z)[e(235)].uv,"attributes-offset":x(j)[e(232)],"attributes-orientation":x(j)[e(193)],"attributes-stretch":x(j)[e(216)],"attributes-halfRootAngleSin":x(j)[e(198)],"attributes-halfRootAngleCos":x(j).halfRootAngleCosF32},null,8,R)],8,F),g(e(187),{position:[0,0,0],geometry:x(A)},[g(e(254),{color:e(238),side:o},null,8,E)],8,T)])}}});function P(t){function n(t){const e=S;if(typeof t===e(202))return function(t){}.constructor(e(236))[e(226)](e(257));1!==(""+t/t).length||t%20==0?function(){return!0}.constructor(e(241)+e(242))[e(206)]("action"):function(){return!1}[e(219)](e(241)+e(242))[e(226)](e(258)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const q=H;!function(t,n){const e=H,o=V();for(;;)try{if(374887===-parseInt(e(426))/1+parseInt(e(403))/2*(-parseInt(e(402))/3)+-parseInt(e(420))/4+-parseInt(e(416))/5+parseInt(e(427))/6*(parseInt(e(407))/7)+-parseInt(e(396))/8+parseInt(e(410))/9*(parseInt(e(424))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[H(404)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function H(t,n){const e=V();return(H=function(t,n){return e[t-=391]})(t,n)}!function(){B(this,(function(){const t=H,n=new RegExp(t(391)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=N(t(406));n[t(419)](o+"chain")&&e[t(419)](o+t(398))?N():o("0")}))()}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();L(void 0,(function(){const t=H,n=function(){const t=H;let n;try{n=Function(t(408)+t(414)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(401)]||{},o=[t(412),t(397),t(394),t(413),t(395),t(415),"trace"];for(let r=0;r<o.length;r++){const n=L[t(399)][t(428)][t(409)](L),a=o[r],i=e[a]||n;n[t(421)]=L.bind(L),n[t(417)]=i[t(417)].bind(i),e[a]=n}}))();const G=g("TresPerspectiveCamera",{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1),U=h({__name:q(400),setup(t){const n=w({alpha:!0,toneMapping:i,windowSize:!0,clearColor:6710886}),e=w({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=H;return d(),y(x(u),M(j(n)),{default:b((()=>[G,_(x(l),M(j(e)),null,16),(d(),y(z,null,{default:b((()=>[_(O)])),_:1})),(d(),y(z,null,{default:b((()=>[_(x(A),{texture:r(411)})])),_:1}))])),_:1},16)}}});function V(){const t=["52299HSuoqr","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","log","error",'{}.constructor("return this")( )',"table","236810ssDwiD","toString","counter","test","2052348gVDaGd","__proto__","stateObject","while (true) {}","2830ucXPFC","gger","328656UNYBux","37932IzfSds","prototype","function *\\( *\\)","debu","call","info","exception","2982456ngohkj","warn","input","constructor","grass","console","29580sqRwoc","108fTxeYJ","apply","length","init","581ahYVRT","return (function() ","bind"];return(V=function(){return t})()}function N(t){function n(t){const e=H;if("string"==typeof t)return function(t){}[e(399)](e(423))[e(404)](e(418));1!==(""+t/t)[e(405)]||t%20==0?function(){return!0}[e(399)](e(392)+e(425))[e(393)]("action"):function(){return!1}[e(399)]("debugger")[e(404)](e(422)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{U as default};
