import{_ as t,s as n,T as e,ai as o}from"./three.W6GmiHfn1739444016646.js";import{e as r,a,o as i,f as s}from"./@tresjs.Q4_KYO2a1739444016646.js";import"./index._ACEDDx61739444016646.js";import{c}from"./simplex-noise.jB2HxhHB1739444016646.js";import{C as l}from"./index.gpAaVrpj1739444016646.js";import{d as u,a3 as f,o as p,H as h,N as m,u as v,r as d,f as g,g as x,j as w,aj as y,ak as b,al as _}from"./@vue.NRI7TcgI1739444016646.js";import{_ as M}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.OPuagNMw1739444016646.js";import"./@vueuse.6yH4xZkk1739444016646.js";import"./lamina.ZOiDY8wC1739444016646.js";import"./glsl-tokenizer.Ta4xYzBY1739444016646.js";import"./@amap.KAEokh9M1739444016646.js";import"./glsl-token-descope.jCbUS7UI1739444016646.js";import"./glsl-token-depth.wj88prXR1739444016646.js";import"./glsl-token-scope.AmN3pkrT1739444016646.js";import"./glsl-token-properties.ZAx-fjeR1739444016646.js";import"./glsl-token-assignments.z5Y8B6nE1739444016646.js";import"./glsl-token-string.HNsHwiAx1739444016646.js";import"./glsl-token-functions.QkVZRGHG1739444016646.js";import"./object-hash.1aeUIJEf1739444016646.js";import"./jszip.kB071t9j1739444016646.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.fIhxX8XW1739444016646.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.8k5Dm99W1739444016646.js";import"./three-stdlib.p59O9BRw1739444016646.js";import"./@pmndrs.G4ph9toA1739444016646.js";import"./utils.bdRONJG31739444016646.js";const j=z;function z(t,n){const e=k();return(z=function(t,n){return e[t-=407]})(t,n)}!function(t,n){const e=z,o=k();for(;;)try{if(437862===parseInt(e(413))/1*(-parseInt(e(432))/2)+parseInt(e(410))/3*(parseInt(e(482))/4)+parseInt(e(411))/5+parseInt(e(484))/6*(parseInt(e(417))/7)+-parseInt(e(472))/8*(parseInt(e(455))/9)+parseInt(e(454))/10*(parseInt(e(468))/11)+parseInt(e(437))/12*(parseInt(e(423))/13))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const I=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[z(444)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){I(this,(function(){const t=z,n=new RegExp(t(431)),e=new RegExp(t(434),"i"),o=T(t(459));n[t(447)](o+t(408))&&e.test(o+t(440))?T():o("0")}))()}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();A(void 0,(function(){const t=z,n=function(){const t=z;let n;try{n=Function(t(478)+t(471)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(418)]||{},o=["log",t(465),t(480),t(415),t(412),t(462),"trace"];for(let r=0;r<o.length;r++){const n=A[t(470)][t(476)][t(433)](A),a=o[r],i=e[a]||n;n.__proto__=A[t(433)](A),n[t(441)]=i[t(441)][t(433)](i),e[a]=n}}))();const C=[j(481)],F=["index",j(475),"attributes-uv",j(485),j(457),"attributes-stretch","attributes-halfRootAngleSin","attributes-halfRootAngleCos"],D=["geometry"],S=["side"];function k(){const t=["warn","instances","normalize","6677BluLip","stretchesF32","constructor",'{}.constructor("return this")( )',"5368584urxvXL","cos","TresMeshStandardMaterial","attributes-position","prototype","Color","return (function() ","position","info","material","328ANdaOF","Vector3","266988nGqIOZ","attributes-offset","random","attributes","sin","toneMapped","chain","width","14457TvEwjb","1456435GrlWCe","exception","33ZpgKWZ","offsetsF32","error","TresMesh","7DAjOxl","console","counter","InstancedBufferAttribute","computeVertexNormals","map","487240BDdVNP","action","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","array","translate","convertSRGBToLinear","length","PlaneGeometry","function *\\( *\\)","19202EZLsEK","bind","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","value","string","204CGYPRZ","TresInstancedBufferGeometry","#000f00","input","toString","needsUpdate","gger","apply","while (true) {}","Vector4","test","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","alphaMap","grass","joints","call","side","950BPCTyv","9JSewsC","stateObject","attributes-orientation","set","init","DoubleSide","halfRootAngleCosF32","table","push","debu"];return(k=function(){return t})()}const R=u({__name:j(450),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(o){const i=j;let s,u;const d=([s,u]=f((()=>a({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),s=await s,u(),s),g=o,x=c(Math.random);function w(n,e){const o=z,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,a=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,i=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,s=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(446)])(r,a,i,s)}function y(t,n){var e=2*x(t/50,n/50);return e+=4*x(t/100,n/100),e+=.2*x(t/10,n/10)}const b=function(n,o){const r=z,a=[],i=[],s=[],c=[],l=[];let u=new(t[r(446)]),f=new(t[r(446)]);const p=-.25;for(let e=0;e<n;e++){const h=Math[r(486)]()*o-o/2,m=Math[r(486)]()*o-o/2,v=y(h,m);a.push(h,v,m);let d=Math.PI-Math[r(486)]()*(2*Math.PI);c[r(463)](Math[r(488)](.5*d)),l[r(463)](Math.cos(.5*d));let g=new(t[r(483)])(0,1,0),x=g.x*Math[r(488)](d/2),b=g.y*Math[r(488)](d/2),_=g.z*Math[r(488)](d/2),M=Math[r(473)](d/2);u[r(458)](x,b,_,M)[r(467)](),d=.5*Math[r(486)]()+p,g=new(t[r(483)])(1,0,0),x=g.x*Math[r(488)](d/2),b=g.y*Math[r(488)](d/2),_=g.z*Math[r(488)](d/2),M=Math[r(473)](d/2),f[r(458)](x,b,_,M)[r(467)](),u=w(u,f),d=.5*Math[r(486)]()+p,g=new(t[r(483)])(0,0,1),x=g.x*Math[r(488)](d/2),b=g.y*Math[r(488)](d/2),_=g.z*Math.sin(d/2),M=Math.cos(d/2),f[r(458)](x,b,_,M)[r(467)](),u=w(u,f),i.push(u.x,u.y,u.z,u.w),e<n/3?s[r(463)](1.8*Math[r(486)]()):s[r(463)](Math[r(486)]())}return{offsetsF32:new(t[r(420)])(new Float32Array(a),3),orientationsF32:new(t[r(420)])(new Float32Array(i),4),stretchesF32:new(t[r(420)])(new Float32Array(s),1),halfRootAngleCosF32:new e(new Float32Array(l),1),halfRootAngleSinF32:new e(new Float32Array(c),1)}}(g[i(466)],g[i(409)]),_=new(t[i(430)])(g.bW,g.bH,1,g[i(451)])[i(427)](0,g.bH/2,0),M=new n(g[i(409)],g.width,32,32);M.lookAt(new(t[i(483)])(0,1,0));const I=M[i(487)][i(479)];for(let t=0;t<I[i(426)][i(429)];t+=3)I[i(426)][t+1]=y(I.array[t],I[i(426)][t+2]);M.attributes.position[i(442)]=!0,M[i(421)]();const A=new(l({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(t[i(477)])(.3,.9,0)[i(428)](),bottomColor:new(t[i(477)])(0,.2,0)[i(428)]()},i(425),i(448),(n=>{const e=i;n[e(453)]=t[e(460)]})));A[i(422)]=d[i(422)],A[i(449)]=d[i(449)],A[i(407)]=!1;const{onLoop:k}=r();return k((({elapsed:t})=>{const n=i;A.uniforms.time[n(435)]=t/4})),(n,e)=>{const o=i;return p(),h("TresGroup",null,[m(o(416),{material:v(A)},[m(o(438),{index:v(_).index,"attributes-position":v(_)[o(487)].position,"attributes-uv":v(_).attributes.uv,"attributes-offset":v(b)[o(414)],"attributes-orientation":v(b).orientationsF32,"attributes-stretch":v(b)[o(469)],"attributes-halfRootAngleSin":v(b).halfRootAngleSinF32,"attributes-halfRootAngleCos":v(b)[o(461)]},null,8,F)],8,C),m(o(416),{position:[0,0,0],geometry:v(M)},[m(o(474),{color:o(439),side:t[o(460)]},null,8,S)],8,D)])}}});function T(t){function n(t){const e=z;if(typeof t===e(436))return function(t){}.constructor(e(445))[e(444)](e(419));1!==(""+t/t)[e(429)]||t%20==0?function(){return!0}[e(470)]("debu"+e(443))[e(452)](e(424)):function(){return!1}.constructor(e(464)+e(443))[e(444)](e(456)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const E=L;!function(t,n){const e=L,o=B();for(;;)try{if(422078===parseInt(e(426))/1*(parseInt(e(449))/2)+parseInt(e(423))/3+-parseInt(e(440))/4*(parseInt(e(441))/5)+parseInt(e(436))/6+parseInt(e(442))/7*(parseInt(e(452))/8)+parseInt(e(429))/9+-parseInt(e(431))/10*(parseInt(e(447))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(445)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){O(this,(function(){const t=L,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(432),"i"),o=H("init");n[t(455)](o+"chain")&&e[t(455)](o+t(433))?H():o("0")}))()}();const P=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(445)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function B(){const t=["bind","861534iTXOTI","info","222910GXwGFE","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","input","console","stateObject","1816116vjDPpA","error","counter","constructor","4308QMDMuJ","3495gnMltF","23065xYyoPr","length","while (true) {}","apply","grass","341ynVEbu","table","2hOKBnN","return (function() ","TresPerspectiveCamera","1720bzclfT","trace","call","test","log","string","debu","warn","__proto__","1284975QyHhNr","gger","exception","330760ZGypXr","toString"];return(B=function(){return t})()}function L(t,n){const e=B();return(L=function(t,n){return e[t-=421]})(t,n)}P(void 0,(function(){const t=L,n=function(){const t=L;let n;try{n=Function(t(450)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(434)]=n[t(434)]||{},o=[t(456),t(421),t(430),t(437),t(425),t(448),t(453)];for(let r=0;r<o.length;r++){const n=P.constructor.prototype[t(428)](P),a=o[r],i=e[a]||n;n[t(422)]=P[t(428)](P),n[t(427)]=i[t(427)].bind(i),e[a]=n}}))();const G=u({__name:E(446),setup(t){const n=d({alpha:!0,toneMapping:o,windowSize:!0,clearColor:6710886}),e=d({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=L;return p(),g(v(s),y(b(n)),{default:x((()=>[o[0]||(o[0]=m(r(451),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),w(v(i),y(b(e)),null,16),(p(),g(_,null,{default:x((()=>[w(R)])),_:1})),(p(),g(_,null,{default:x((()=>[w(v(M),{texture:"https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr"})])),_:1}))])),_:1},16)}}});function H(t){function n(t){const e=L;if(typeof t===e(457))return function(t){}[e(439)](e(444))[e(445)](e(438));1!==(""+t/t)[e(443)]||t%20==0?function(){return!0}.constructor(e(458)+"gger")[e(454)]("action"):function(){return!1}[e(439)](e(458)+e(424))[e(445)](e(435)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{G as default};
