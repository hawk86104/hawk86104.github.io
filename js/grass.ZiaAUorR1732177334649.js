import{_ as t,a0 as n,V as e,T as o,ai as r}from"./three.rV-MfnQb1732177334649.js";import{e as a,b as i,U as s,c}from"./@tresjs.ty5XF8T_1732177334649.js";import"./index._wAuNoql1732177334649.js";import{a as l}from"./simplex-noise.Yx8GBgKo1732177334649.js";import{C as u}from"./index.os2b9iNQ1732177334649.js";import{d as f,a6 as p,o as h,D as m,J as d,u as v,r as g,f as x,g as y,j as w,aj as _,ak as b,al as M}from"./@vue.-THQH3GC1732177334649.js";import{_ as j}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.0afIgfW_1732177334649.js";import"./@vueuse.n223N0GC1732177334649.js";import"./lamina.0rsSEMrL1732177334649.js";import"./glsl-tokenizer.DDStaWq91732177334649.js";import"./@amap.IbXCphpR1732177334649.js";import"./glsl-token-descope.TjSzjqVs1732177334649.js";import"./glsl-token-depth.JlcMZSL31732177334649.js";import"./glsl-token-scope.hnqwLKvg1732177334649.js";import"./glsl-token-properties.WDVpuyYi1732177334649.js";import"./glsl-token-assignments.pfQmaFcN1732177334649.js";import"./glsl-token-string.msDfjQQ61732177334649.js";import"./glsl-token-functions.RfZR7GwI1732177334649.js";import"./object-hash.4qHr6pa21732177334649.js";import"./jszip.LcW-vLxa1732177334649.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.AEf972wH1732177334649.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.RWuC9D1K1732177334649.js";import"./three-stdlib.k-UoDs271732177334649.js";import"./@pmndrs.tHJhZmW91732177334649.js";import"./utils.peHSwDRO1732177334649.js";const z=S;!function(t,n){const e=S,o=T();for(;;)try{if(931459===-parseInt(e(406))/1*(parseInt(e(439))/2)+-parseInt(e(430))/3*(parseInt(e(389))/4)+-parseInt(e(373))/5+parseInt(e(370))/6+-parseInt(e(354))/7*(-parseInt(e(378))/8)+parseInt(e(401))/9*(-parseInt(e(397))/10)+-parseInt(e(383))/11*(-parseInt(e(368))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[S(408)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){A(this,(function(){const t=S,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(418),"i"),o=E(t(367));n.test(o+t(415))&&e.test(o+t(428))?E():o("0")}))()}();const I=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[S(408)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();I(void 0,(function(){const t=S,n=function(){const t=S;let n;try{n=Function(t(407)+t(437)+");")()}catch(e){n=window}return n}(),e=n[t(422)]=n.console||{},o=[t(365),t(376),t(382),t(431),t(427),t(417),t(374)];for(let r=0;r<o[t(390)];r++){const n=I[t(433)][t(395)][t(358)](I),a=o[r],i=e[a]||n;n.__proto__=I[t(358)](I),n[t(391)]=i[t(391)][t(358)](i),e[a]=n}}))();const C=[z(366)],R=["index",z(402),z(357),z(434),z(392),"attributes-stretch",z(426),z(379)],k=[z(413)],F=[z(425)];function S(t,n){const e=T();return(S=function(t,n){return e[t-=353]})(t,n)}const D=f({__name:z(438),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(r){const s=z;let c,f;const g=([c,f]=p((()=>i({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),c=await c,f(),c),x=r,y=l(Math.random);function w(n,e){const o=S,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,a=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,i=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,s=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(362)])(r,a,i,s)}function _(t,n){var e=2*y(t/50,n/50);return e+=4*y(t/100,n/100),e+=.2*y(t/10,n/10)}const b=function(n,r){const a=S,i=[],s=[],c=[],l=[],u=[];let f=new(t[a(362)]),p=new(t[a(362)]);const h=-.25;for(let o=0;o<n;o++){const m=Math[a(414)]()*r-r/2,d=Math.random()*r-r/2,v=_(m,d);i[a(398)](m,v,d);let g=Math.PI-Math[a(414)]()*(2*Math.PI);l[a(398)](Math[a(399)](.5*g)),u.push(Math[a(396)](.5*g));let x=new(t[a(436)])(0,1,0),y=x.x*Math[a(399)](g/2),b=x.y*Math[a(399)](g/2),M=x.z*Math.sin(g/2),j=Math[a(396)](g/2);f[a(416)](y,b,M,j)[a(394)](),g=.5*Math[a(414)]()+h,x=new(t[a(436)])(1,0,0),y=x.x*Math[a(399)](g/2),b=x.y*Math.sin(g/2),M=x.z*Math[a(399)](g/2),j=Math[a(396)](g/2),p[a(416)](y,b,M,j)[a(394)](),f=w(f,p),g=.5*Math.random()+h,x=new e(0,0,1),y=x.x*Math.sin(g/2),b=x.y*Math[a(399)](g/2),M=x.z*Math[a(399)](g/2),j=Math.cos(g/2),p.set(y,b,M,j)[a(394)](),f=w(f,p),s.push(f.x,f.y,f.z,f.w),o<n/3?c[a(398)](1.8*Math[a(414)]()):c[a(398)](Math[a(414)]())}return{offsetsF32:new o(new Float32Array(i),3),orientationsF32:new o(new Float32Array(s),4),stretchesF32:new(t[a(385)])(new Float32Array(c),1),halfRootAngleCosF32:new o(new Float32Array(u),1),halfRootAngleSinF32:new(t[a(385)])(new Float32Array(l),1)}}(x[s(423)],x[s(380)]),M=new(t[s(386)])(x.bW,x.bH,1,x[s(419)])[s(388)](0,x.bH/2,0),j=new(t[s(386)])(x[s(380)],x[s(380)],32,32);j[s(435)](new(t[s(436)])(0,1,0));const A=j[s(353)][s(384)];for(let t=0;t<A[s(356)][s(390)];t+=3)A[s(356)][t+1]=_(A[s(356)][t],A[s(356)][t+2]);j[s(353)].position[s(364)]=!0,j[s(361)]();const I=new(u({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(t[s(400)])(.3,.9,0)[s(371)](),bottomColor:new(t[s(400)])(0,.2,0).convertSRGBToLinear()},s(411),"\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }",(n=>{const e=s;n[e(425)]=t[e(355)]})));I[s(387)]=g[s(387)],I[s(403)]=g.alphaMap,I[s(405)]=!1;const{onLoop:D}=a();return D((({elapsed:t})=>{const n=s;I[n(375)][n(432)][n(360)]=t/4})),(t,e)=>{const o=s;return h(),m(o(421),null,[d(o(441),{material:v(I)},[d("TresInstancedBufferGeometry",{index:v(M)[o(412)],"attributes-position":v(M)[o(353)][o(384)],"attributes-uv":v(M)[o(353)].uv,"attributes-offset":v(b)[o(410)],"attributes-orientation":v(b)[o(359)],"attributes-stretch":v(b)[o(424)],"attributes-halfRootAngleSin":v(b)[o(404)],"attributes-halfRootAngleCos":v(b)[o(381)]},null,8,R)],8,C),d("TresMesh",{position:[0,0,0],geometry:v(j)},[d(o(372),{color:o(363),side:n},null,8,F)],8,k)])}}});function T(){const t=["time","constructor","attributes-offset","lookAt","Vector3",'{}.constructor("return this")( )',"grass","482sMvOnd","action","TresMesh","attributes","817264mdKZch","DoubleSide","array","attributes-uv","bind","orientationsF32","value","computeVertexNormals","Vector4","#000f00","needsUpdate","log","material","init","12pylzua","counter","148044TlwgeU","convertSRGBToLinear","TresMeshStandardMaterial","6204880ghJEaV","trace","uniforms","warn","stateObject","48GRFksg","attributes-halfRootAngleCos","width","halfRootAngleCosF32","info","44469623fpWJkZ","position","InstancedBufferAttribute","PlaneGeometry","map","translate","44QsSIcf","length","toString","attributes-orientation","while (true) {}","normalize","prototype","cos","20WfKpRO","push","sin","Color","1370151GiivqF","attributes-position","alphaMap","halfRootAngleSinF32","toneMapped","2039ABUWUT","return (function() ","apply","gger","offsetsF32","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","index","geometry","random","chain","set","table","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","joints","debu","TresGroup","console","instances","stretchesF32","side","attributes-halfRootAngleSin","exception","input","string","490791EfOHIW","error"];return(T=function(){return t})()}function E(t){function n(t){const e=S;if(typeof t===e(429))return function(t){}[e(433)](e(393))[e(408)](e(369));1!==(""+t/t)[e(390)]||t%20==0?function(){return!0}[e(433)](e(420)+e(409)).call(e(440)):function(){return!1}[e(433)](e(420)+e(409))[e(408)](e(377)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const O=L;!function(t,n){const e=L,o=G();for(;;)try{if(187461===parseInt(e(241))/1+-parseInt(e(262))/2*(parseInt(e(239))/3)+parseInt(e(266))/4+parseInt(e(254))/5*(-parseInt(e(235))/6)+parseInt(e(251))/7+parseInt(e(242))/8*(parseInt(e(236))/9)+-parseInt(e(261))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){H(this,(function(){const t=L,n=new RegExp(t(248)),e=new RegExp(t(267),"i"),o=P("init");n.test(o+"chain")&&e[t(264)](o+"input")?P():o("0")}))()}();const U=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function L(t,n){const e=G();return(L=function(t,n){return e[t-=235]})(t,n)}U(void 0,(function(){const t=L,n=function(){const t=L;let n;try{n=Function(t(250)+t(265)+");")()}catch(e){n=window}return n}(),e=n[t(240)]=n[t(240)]||{},o=[t(256),t(259),t(246),t(263),"exception","table","trace"];for(let r=0;r<o[t(258)];r++){const n=U[t(253)][t(260)][t(243)](U),a=o[r],i=e[a]||n;n[t(249)]=U.bind(U),n[t(244)]=i[t(244)][t(243)](i),e[a]=n}}))();const B=f({__name:O(255),setup(t){const n=g({alpha:!0,toneMapping:r,windowSize:!0,clearColor:6710886}),e=g({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=L;return h(),x(v(c),_(b(n)),{default:y((()=>[o[0]||(o[0]=d(r(247),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),w(v(s),_(b(e)),null,16),(h(),x(M,null,{default:y((()=>[w(D)])),_:1})),(h(),x(M,null,{default:y((()=>[w(v(j),{texture:r(268)})])),_:1}))])),_:1},16)}}});function G(){const t=["error","test",'{}.constructor("return this")( )',"325384HURryu","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","354aOldhF","53730taUdZy","apply","gger","1064739puHKHY","console","314272GpQZpK","400gXQXuc","bind","toString","debu","info","TresPerspectiveCamera","function *\\( *\\)","__proto__","return (function() ","1342285EZUDhJ","stateObject","constructor","25745VZMhRi","grass","log","action","length","warn","prototype","397080dALYWA","2CMnWhG"];return(G=function(){return t})()}function P(t){function n(t){const e=L;if("string"==typeof t)return function(t){}.constructor("while (true) {}")[e(237)]("counter");1!==(""+t/t)[e(258)]||t%20==0?function(){return!0}[e(253)](e(245)+e(238)).call(e(257)):function(){return!1}[e(253)](e(245)+e(238))[e(237)](e(252)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{B as default};
