import{m as t,e as n,a as e,o}from"./@tresjs.4XV_x0mI1739442316051.js";import{V as r,_ as a,b as s,ar as i,p as c,m as l,aV as u,cR as v,A as f,av as p,c2 as d,r as m}from"./three.OosFxi571739442316051.js";import{P as g}from"./tweakpane.yDiyAAkA1739442316051.js";import{d as x,a3 as h,e as y,o as I,f as b,g as _,N as S,j as w,u as U,aj as P,ak as D,al as E,m as A}from"./@vue.NRI7TcgI1739442316051.js";import{_ as M}from"./@fesjs.DgjXCZoG1739442316051.js";import"./@vueuse.u4XqlOuT1739442316051.js";import"./vue-router.bqZmV3c61739442316051.js";import"./lodash-es.pklfUAS51739442316051.js";import"./@qlin.yHhFDldE1739442316051.js";import"./pinia.ptJyy4pp1739442316051.js";import"./@floating-ui.BPbuo5Gx1739442316051.js";import"./@juggle.7yjBMqoW1739442316051.js";!function(t,n){const e=F,o=C();for(;;)try{if(580728===-parseInt(e(201))/1*(-parseInt(e(205))/2)+parseInt(e(226))/3+-parseInt(e(251))/4*(-parseInt(e(210))/5)+parseInt(e(236))/6*(parseInt(e(213))/7)+-parseInt(e(215))/8+-parseInt(e(261))/9+parseInt(e(224))/10*(parseInt(e(239))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[F(211)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function C(){const t=["index","96XIKYIQ","stateObject","onabort","22CSrWxv","responseText","debu","table","\" couldn't be loaded.","counter","object",'" load was aborted.',"trace","ShaderMaterial","Matrix3","exception","1060936lfeUJp","Vector2","while (true) {}","test","message","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","Vector4","onload","input","constructor","4299930dywXdp","now","chain","log","lastIndex","length","Matrix2","1pWVJXi","prototype","gger","console","216296flrciZ",'Shader "',"hasOwnProperty","toString","Matrix4","5BuowrM","apply","info","86842CLNHIO","exec","2706472oRhXpY","action","v3v","send","bind","type","return (function() ","warn","get","672260ciUjnA","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","2071431WmFVIE","replace","Vector3","value","function *\\( *\\)","onerror","WagnerLoadShaderException","Texture","name"];return(C=function(){return t})()}!function(){L(this,(function(){const t=F,n=new RegExp(t(230)),e=new RegExp(t(256),"i"),o=R("init");n[t(254)](o+t(196))&&e[t(254)](o+t(259))?R():o("0")}))()}();const z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[F(211)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();z(void 0,(function(){const t=F,n=function(){const t=F;let n;try{n=Function(t(221)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(204)]=n[t(204)]||{},o=[t(197),t(222),t(212),"error",t(250),t(242),t(247)];for(let r=0;r<o.length;r++){const n=z[t(260)][t(202)][t(219)](z),a=o[r],s=e[a]||n;n.__proto__=z[t(219)](z),n[t(208)]=s[t(208)][t(219)](s),e[a]=n}}))();function F(t,n){const e=C();return(F=function(t,n){return e[t-=195]})(t,n)}function N(t,n,e){const o=F;if(typeof t!==o(245)||null===t)return t;const r=Array.isArray(t)?[]:{};for(const a in t)t[o(207)](a)&&(r[a]=N(t[a])),a==n&&(r[n]=e);return r}function R(t){function n(t){const e=F;if("string"==typeof t)return function(t){}[e(260)](e(253))[e(211)](e(244));1!==(""+t/t)[e(199)]||t%20==0?function(){return!0}[e(260)](e(241)+"gger").call(e(216)):function(){return!1}.constructor("debu"+e(203)).apply(e(237)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const T=V;!function(t,n){const e=V,o=j();for(;;)try{if(420247===-parseInt(e(310))/1*(parseInt(e(260))/2)+-parseInt(e(287))/3+parseInt(e(279))/4*(-parseInt(e(299))/5)+-parseInt(e(297))/6+-parseInt(e(269))/7*(-parseInt(e(305))/8)+parseInt(e(298))/9*(-parseInt(e(311))/10)+-parseInt(e(255))/11*(-parseInt(e(282))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){G(this,(function(){const t=V,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(319),"i"),o=H(t(341));n[t(276)](o+"chain")&&e[t(276)](o+t(306))?H():o("0")}))()}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[V(344)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function j(){const t=["stateObject","4IyDmQw","setRenderTarget","MeshBasicMaterial","Pass","prototype","makePerspective","params","far","exception","50652BKGGsY","uniforms","info","renderer","splice","table","material","test","value","PlaneGeometry","20812fbDWNQ","startTime","camera","12FmANXG","add","RGBAFormat","useRGBA","passItems","222297NBoIfz","__proto__","read","write","now","ShaderMaterial","loadShadervf","toString","console","makeOrthographic","2685642MljhNM","515547JIuvRE","400QrppJd","quad","near","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","front","innerWidth","896OoUdgy","input","scale","resolution","debu","146519sUCTfD","20JIYJiv","Mesh","type","push","back","call","gger","OrthographicCamera","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","RGBFormat","CopyPass","pass","texture","tInput","swapBuffers","addPass","wrapT","render","getOfflineTexture","removePass","trace","return (function() ","settings","shader","string","LinearFilter","width","stencilBuffer","minFilter","scene","init","log","length","apply","bind","action","WebGLRenderTarget","setSize","toScreen","Stack","constructor","ClampToEdgeWrapping","time","copyPass","magFilter",'{}.constructor("return this")( )',"wrapS","10509015QhYQnR","height","set","onWindowResize"];return(j=function(){return t})()}function V(t,n){const e=j();return(V=function(t,n){return e[t-=252]})(t,n)}B(void 0,(function(){const t=V;let n;try{n=Function(t(332)+t(253)+");")()}catch(r){n=window}const e=n[t(295)]=n[t(295)]||{},o=[t(342),"warn",t(271),"error",t(268),t(274),t(331)];for(let a=0;a<o[t(343)];a++){const n=B.constructor[t(264)].bind(B),r=o[a],s=e[r]||n;n[t(288)]=B[t(345)](B),n[t(294)]=s.toString[t(345)](s),e[r]=n}}))();class O{constructor(t,n){const e=V;this[e(337)]=1,this[e(256)]=1,this[e(333)]=n||{},this[e(285)]=this[e(333)][e(285)]||!1,this[e(272)]=t,this[e(354)]=this[e(321)](this[e(333)]),this[e(340)]=new c,this.quad=new(a[e(312)])(new(a[e(278)])(1,1),new(a[e(262)])),this.scene[e(283)](this[e(300)]),this[e(281)]=new(a[e(318)])(1,1,1,1,-1e4,1e4),this[e(303)]=new(a[e(347)])(1,1,{minFilter:void 0!==this[e(333)][e(339)]?this[e(333)][e(339)]:a[e(336)],magFilter:void 0!==this[e(333)][e(252)]?this[e(333)][e(252)]:l,wrapS:void 0!==this[e(333)][e(254)]?this[e(333)].wrapS:a[e(352)],wrapT:void 0!==this[e(333)][e(327)]?this[e(333)][e(327)]:u,format:this[e(285)]?a[e(284)]:v,type:void 0!==this[e(333)][e(313)]?this[e(333)].type:f,stencilBuffer:void 0===this[e(333)][e(338)]||this[e(333)][e(338)]}),this[e(315)]=this[e(303)].clone(),this.startTime=Date.now(),this.passes={},this[e(350)]={passItems:[],passes:[]}}[T(326)](t,n,e,o){const r=T;this[r(293)](n);const a={shaderName:t,params:e,uuid:o,shader:this[r(334)]};this[r(350)][r(286)][r(314)](a)}[T(330)](t){const n=T;for(let e=this[n(350)].passItems.length-1;e>=0;e--)this[n(350)][n(286)][e].uuid===parseInt(t)&&this[n(350)][n(286)][n(273)](e,1);console[n(342)](this[n(350)][n(286)])}[T(321)](){const t=T;this.Pass[t(316)](this);return this.loadShadervf("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[T(293)](t){const n=T,e=n(302);return this[n(334)]=function(t,n){const e=F,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,c=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,l={sampler2D:{type:"t",value:()=>new(a[F(233)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new r},vec3:{type:"v3",value:()=>new(a[F(228)])},vec4:{type:"v4",value:()=>new(a[F(257)])},bvec2:{type:"v2",value:()=>new(a[F(252)])},bvec3:{type:"v3",value:()=>new(a[F(228)])},bvec4:{type:"v4",value:()=>new(a[F(257)])},ivec2:{type:"v2",value:()=>new(a[F(252)])},ivec3:{type:"v3",value:()=>new s},ivec4:{type:"v4",value:()=>new i},mat2:{type:"v2",value:()=>new(a[F(200)])},mat3:{type:"v3",value:()=>new(a[F(249)])},mat4:{type:"v4",value:()=>new(a[F(209)])}},u={float:{type:"fv",value:()=>[]},vec3:{type:e(217),value:()=>[]}};let v;const f={resolution:{type:"v2",value:new r(1,1),default:!0},time:{type:"f",value:Date[e(195)](),default:!0},tInput:{type:"t",value:new(a[e(233)]),default:!0}};let p,d;for(;null!==(v=o[e(214)](n));)v[e(235)]===o[e(198)]&&o[e(198)]++,p=v[1],d=v[2],f[d]={type:l[p][e(220)],value:l[p][e(229)]()};for(;null!==(v=c[e(214)](n));)v[e(235)]===o[e(198)]&&o[e(198)]++,p=v[1],d=v[2],v[3],f[d]={type:u[p][e(220)],value:u[p][e(229)]()};return new(a[e(248)])({uniforms:f,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this.shader}[T(263)](t){this[T(334)]=null,this.params={}}Reset(){const t=T;this[t(289)]=this[t(303)],this[t(290)]=this.back}[T(258)](t,n){const e=T,o=window[e(304)],r=window.innerHeight;t[e(348)](1*o,1*r),n.projectionMatrix[e(265)](70,o/r,n[e(301)],n[e(267)]),this.setSize(o,r);return this[e(329)](o,r,!0)}[T(348)](t,n){const e=T;this.width=t,this[e(256)]=n,this[e(281)].projectionMatrix[e(296)](t/-2,t/2,n/2,n/-2,this.camera[e(301)],this[e(281)].far),this[e(300)][e(307)].set(t,n,1),this[e(303)][e(348)](t,n),this.back[e(348)](t,n)}[T(329)](t,n,e){const o=T;return new(a[o(347)])(t,n,{minFilter:a[o(336)],magFilter:a[o(336)],format:e?a[o(284)]:a[o(320)]})}[T(328)](t,n,e,o){const r=T;this[r(272)].setRenderTarget(this[r(290)]),this[r(272)].render(t,n),o||this[r(325)]()}swapBuffers(){const t=T,n=this[t(290)];this[t(290)]=this[t(289)],this.read=n}[T(322)](){const t=T;for(let n=0;n<this[t(350)][t(286)].length;n++){const e=this[t(350)][t(286)][n][t(334)],o=this[t(350)][t(286)][n][t(266)];if(this[t(272)][t(261)](this[t(290)]),e instanceof a[t(292)]){this[t(300)][t(275)]=e,this[t(300)].material.uniforms[t(324)][t(277)]=this[t(289)][t(323)],this.quad[t(275)].uniforms[t(308)].value[t(257)](this[t(337)],this[t(256)]),this[t(300)][t(275)][t(270)][t(353)][t(277)]=.001*(Date[t(291)]()-this[t(280)]);for(const n in o)this[t(300)].material[t(270)][n][t(277)]=o[n];this[t(272)][t(328)](this[t(340)],this[t(281)]),this.swapBuffers()}}}[T(349)](t,n){const e=T;this[e(272)][e(261)](null),this[e(300)][e(275)]=this.copyPass,this[e(300)].material[e(270)][e(324)][e(277)]=this[e(289)][e(323)],this[e(300)][e(275)][e(270)][e(308)][e(277)][e(257)](this.width,this[e(256)]),this[e(272)].render(this.scene,this[e(281)])}}function H(t){function n(t){const e=V;if(typeof t===e(335))return function(t){}[e(351)]("while (true) {}").apply("counter");1!==(""+t/t).length||t%20==0?function(){return!0}.constructor("debu"+e(317))[e(316)](e(346)):function(){return!1}[e(351)](e(309)+"gger")[e(344)](e(259)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const W="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",k=Z;!function(t,n){const e=Z,o=J();for(;;)try{if(495484===parseInt(e(278))/1+-parseInt(e(297))/2*(-parseInt(e(322))/3)+-parseInt(e(311))/4+-parseInt(e(258))/5*(-parseInt(e(335))/6)+-parseInt(e(264))/7*(-parseInt(e(280))/8)+parseInt(e(253))/9*(-parseInt(e(302))/10)+parseInt(e(306))/11*(-parseInt(e(303))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const X=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){X(this,(function(){const t=Z,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(317),"i"),o=$(t(307));n[t(254)](o+t(262))&&e[t(254)](o+t(273))?$():o("0")}))()}();const q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Z(316)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function Z(t,n){const e=J();return(Z=function(t,n){return e[t-=251]})(t,n)}function J(){const t=["plugins/postProcessing/image/1324-normal.jpg","while (true) {}","add","table","plugins/postProcessing/image/1324.jpg","string","value","click","移除~","random","1054146uZdiXv","MeshPhongMaterial","CIRCULARPass","VIGNETTE2Pass","map","712242yZddGL","test","addButton","dispose","Vector2","25rPytRl","SNOISEPass","addBlade","RGBPass","chain","addFolder","6009269wquwmR","material","counter","call",'{}.constructor("return this")( )',"console","target","FXAAPass","bind","input","BOXBLURPass","DENOISEPass","trace","receiveShadow","185190qkFHjv","title","8JamGYk","constructor","text","gger","values","stateObject","关闭通道","label","warn","SEPIAPass","addPass","list","castShadow","postProcessing","debu","exception","return (function() ","328254JNdNMz","log","change","BufferGeometry","info","70XqBEBR","1944ZmkHnV","action","onWindowResize","29128BtkXcu","init","toScreen","InvertPass","render","2431252ugoxWD","prototype","FREICHENPass","SOBELPass","Reset","apply","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","error","mergeGeometries","后处理类型","CGAPass","3WXnysG","length","__proto__"];return(J=function(){return t})()}q(void 0,(function(){const t=Z,n=function(){const t=Z;let n;try{n=Function(t(296)+t(268)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(269)]||{},o=[t(298),t(288),t(301),t(318),t(295),t(328),t(276)];for(let r=0;r<o[t(323)];r++){const n=q[t(281)][t(312)][t(272)](q),a=o[r],s=e[a]||n;n[t(324)]=q[t(272)](q),n.toString=s.toString.bind(s),e[a]=n}}))();function $(t){function n(t){const e=Z;if(typeof t===e(330))return function(t){}.constructor(e(326))[e(316)](e(266));1!==(""+t/t)[e(323)]||t%20==0?function(){return!0}.constructor(e(294)+e(283))[e(267)](e(304)):function(){return!1}[e(281)](e(294)+e(283))[e(316)](e(285)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const K=M(x({__name:k(293),async setup(o){const r=k;let s,i;const{camera:c,renderer:l,scene:u,sizes:v}=t();for(var f=new(a[r(300)]),x=[],y=0;y<100;y++){var I=new p(100,100,100);I.translate(1500*Math.random(),1500*Math[r(334)](),1500*Math.random()),x.push(I)}f=d[r(319)](x);const b=([s,i]=h((()=>e({map:r(329)}))),s=await s,i(),s),_=([s,i]=h((()=>e({map:r(325)}))),s=await s,i(),s);var S=new(a[r(336)])({map:b[r(252)],normalMap:_[r(252)],normalScale:new(a[r(257)])(.8,-.8),shininess:100}),w=new m(f,S);w[r(292)]=!0,w[r(277)]=!0,u.value[r(327)](w);const U=new O(l[r(331)],{useRGBA:!0}),P=new g;let D=null,E=[{text:"InvertPass",value:{InvertPass:W}},{text:r(271),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:r(289),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:r(259),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:r(274),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:r(275),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:r(321),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:_[r(252)]}}},{text:r(314),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:r(261),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:"DOTPass",value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:r(337),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:"POISSONPass",value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:"VIGNETTE1Pass",value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:r(251),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:r(313),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:"TOONPass",value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],A=r(309),M=W,L=null;P.addBlade({view:r(291),label:r(320),options:E,value:""}).on(r(299),(t=>{D=t.value}));const C=P[r(255)]({title:"新增",label:"新增通道"});let z=0;C.on(r(332),(t=>{const n=r;A=Object.keys(D)[0],M=Object[n(284)](D)[0],L=Object[n(284)](D)[1];let e=z++,o=P[n(263)]({title:A});for(const r in L){let t=L[r];o[n(260)]({view:n(282),label:r,parse:t=>String(t),value:t})}o[n(255)]({title:n(333)+e,label:n(286)}).on(n(332),(t=>{const e=n;let o=t[e(270)][e(279)].split("~")[1];U.removePass(o)})).on(n(332),(()=>{o[n(256)]()}));let a=N(L,t[n(270)][n(287)],t.value);U[n(290)](A,M,a,e)})),U[r(305)](l[r(331)],c[r(331)]);const{onLoop:F}=n();return F((({delta:t})=>{const n=r;w&&(l[n(331)].autoClearColor=!0,U[n(315)](),w[n(265)]=S,U[n(310)](u[n(331)],c.value),U.pass(),U[n(308)](u.value,c.value))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),Q=et;!function(t,n){const e=et,o=ot();for(;;)try{if(642991===-parseInt(e(167))/1+parseInt(e(187))/2+parseInt(e(164))/3*(parseInt(e(196))/4)+-parseInt(e(165))/5*(parseInt(e(174))/6)+parseInt(e(168))/7+parseInt(e(190))/8*(parseInt(e(191))/9)+parseInt(e(185))/10*(-parseInt(e(193))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Y=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[et(182)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){Y(this,(function(){const t=et,n=new RegExp(t(189)),e=new RegExp(t(181),"i"),o=at(t(201));n[t(161)](o+t(200))&&e[t(161)](o+"input")?at():o("0")}))()}();const tt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[et(182)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();tt(void 0,(function(){const t=et,n=function(){const t=et;let n;try{n=Function(t(171)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(172)]=n.console||{},o=[t(177),t(197),"info",t(179),t(194),t(159),t(178)];for(let r=0;r<o[t(199)];r++){const n=tt[t(162)].prototype.bind(tt),a=o[r],s=e[a]||n;n[t(173)]=tt[t(163)](tt),n[t(169)]=s.toString[t(163)](s),e[a]=n}}))();const nt={ref:"perspectiveCameraRef",position:[600,850,-1500],fov:45,near:.1,far:1e5};function et(t,n){const e=ot();return(et=function(t,n){return e[t-=159]})(t,n)}function ot(){const t=["__proto__","3774chjrqd","manual","#ffffff","log","trace","error","call","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","apply","TresPerspectiveCamera","postProcessingEditor","550930yJrlWC","stateObject","773506GKugBN","debu","function *\\( *\\)","23344pXRVCA","954wsimEH","gger","77SWBqqy","exception","counter","4KVWbAX","warn","TresAmbientLight","length","chain","init","table","TresDirectionalLight","test","constructor","bind","213393ZzmJLl","1895NGfAPw","string","224081OARMbK","5067454fyKsdV","toString","action","return (function() ","console"];return(ot=function(){return t})()}const rt=x({__name:Q(184),setup(t){const e=Q,r={clearColor:"#000000",shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(175)},a={autoRotate:!0,enableDamping:!0},{onLoop:s}=n();return s((({delta:t})=>{})),(t,n)=>{const s=e,i=y("TresCanvas");return I(),b(i,A(r,{"window-size":""}),{default:_((()=>[S(s(183),nt,null,512),w(U(o),P(D(a)),null,16),n[0]||(n[0]=S(s(198),{color:s(176),intensity:2},null,-1)),n[1]||(n[1]=S(s(160),{position:[100,100,0],intensity:2,color:s(176)},null,-1)),(I(),b(E,null,{default:_((()=>[w(K)])),_:1}))])),_:1},16)}}});function at(t){function n(t){const e=et;if(typeof t===e(166))return function(t){}[e(162)]("while (true) {}")[e(182)](e(195));1!==(""+t/t)[e(199)]||t%20==0?function(){return!0}[e(162)](e(188)+e(192))[e(180)](e(170)):function(){return!1}[e(162)](e(188)+e(192))[e(182)](e(186)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{rt as default};
