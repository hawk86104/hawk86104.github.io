import{bL as e,M as o,n as r,bI as n,cA as t,cz as i,aE as a,A as l,o as s,p as u}from"./three.DvmzhRS91761100244891.js";import{n as v}from"./@tresjs.DqJWjmrH1761100244891.js";import{d as c}from"./dither.glsl.tNAdkJUa1761100244891.js";import{R as m}from"./Reflector.C-cnab8L1761100244891.js";import"./OimoPhysicsBuffer.RP9_cA631761100244891.js";import{q as f}from"./vite-plugin-qiankun.B06WoCqG1761100244891.js";import{f as d}from"./utils.CNife3_q1761100244891.js";import{d as p,a as _,w as x,a3 as g,G as M,H as b,u as y,o as h,I as w,ad as R}from"./@vue.CKlgtJke1761100244891.js";const U=`\nprecision highp float;\n\nuniform sampler2D tMap;\nuniform sampler2D tReflect;\nuniform sampler2D tReflectBlur;\nuniform float uReflectivity;\n\nin vec2 vUv;\nin vec4 vCoord;\nin vec3 vNormal;\nin vec3 vToEye;\n\nout vec4 FragColor;\n\n${c}\n\nvoid main() {\n    vec2 reflectionUv = vCoord.xy / vCoord.w;\n\n    vec4 dudv = texture(tMap, vUv);\n    vec4 color = texture(tReflect, reflectionUv);\n\n    vec4 blur;\n\n    blur = texture(tReflectBlur, reflectionUv + dudv.rg / 256.0);\n    color = mix(color, blur, smoothstep(1.0, 0.1, dudv.g));\n\n    blur = texture(tReflectBlur, reflectionUv);\n    color = mix(color, blur, smoothstep(0.5, 1.0, dudv.r));\n\n    FragColor = color * mix(0.6, 0.75, dudv.g);\n\n    // Fresnel term\n    vec3 toEye = normalize(vToEye);\n    float theta = max(dot(toEye, vNormal), 0.0);\n    float reflectance = uReflectivity + (1.0 - uReflectivity) * pow((1.0 - theta), 5.0);\n\n    FragColor = mix(vec4(0), FragColor, reflectance);\n\n    #ifdef DITHERING\n        FragColor.rgb = dither(FragColor.rgb);\n    #endif\n\n    FragColor.a = 1.0;\n}\n`;class j extends e{constructor({map:e=null,reflectivity:i=0,dithering:a=!1}={}){const l={glslVersion:t,defines:{DITHERING:a},uniforms:{tMap:{value:null},tReflect:{value:null},tReflectBlur:{value:null},uMapTransform:{value:new r},uMatrix:{value:new o},uReflectivity:{value:i}},vertexShader:"\nin vec3 position;\nin vec3 normal;\nin vec2 uv;\n\nuniform mat4 modelMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\n\nuniform mat3 uMapTransform;\nuniform mat4 uMatrix;\n\nout vec2 vUv;\nout vec4 vCoord;\nout vec3 vNormal;\nout vec3 vToEye;\n\nvoid main() {\n    vUv = (uMapTransform * vec3(uv, 1.0)).xy;\n    vCoord = uMatrix * vec4(position, 1.0);\n    vNormal = normalMatrix * normal;\n\n    vec4 worldPosition = modelMatrix * vec4(position, 1.0);\n    vToEye = cameraPosition - worldPosition.xyz;\n\n    vec4 mvPosition = viewMatrix * worldPosition;\n    gl_Position = projectionMatrix * mvPosition;\n}\n",fragmentShader:U,blending:n};e&&(e.updateMatrix(),l.uniforms=Object.assign(l.uniforms,{tMap:{value:e},uMapTransform:{value:e.matrix}})),super(l)}}const E=["scale"],T=["object"],C=["object"],I=p({__name:"reflectorDUDV",props:{reflectivity:{default:.8},showGridHelper:{type:Boolean,default:!0},scale:{default:1},ignoreObjects:{default:()=>[]},size:{default:()=>[10,10]},mapUrl:{default:"./plugins/floor/image/waterdudv.jpg"}},setup(e,{expose:o}){const r=e,n=new m,t=new i(r.size[0]-.5,r.size[1]);t.visible=r.showGridHelper;let c=r.mapUrl;f.__POWERED_BY_QIANKUN__&&(c=f.__INJECTED_PUBLIC_PATH_BY_QIANKUN__+c,console.log("qiankunWindow.__INJECTED_PUBLIC_PATH_BY_QIANKUN__",f.__INJECTED_PUBLIC_PATH_BY_QIANKUN__),console.log("process.env.BASE_URL","./"));let p=null,U=_(null);const{state:I,isLoading:N}=v(c);return x(()=>I.value,e=>{e&&(e.wrapS=a,e.wrapT=a,e.colorSpace=l,e.repeat.set(6,3),p=new j({map:e,reflectivity:r.reflectivity}),p.uniforms.tReflect={value:n.renderTarget.texture},p.uniforms.tReflectBlur=n.renderTargetUniform,p.uniforms.uMatrix=n.textureMatrixUniform,U.value=new s(new u(r.size[0],r.size[1]),void 0),U.value.material=p,U.value.rotation.x=-Math.PI/2,U.value.add(n),U.value.onBeforeRender=(e,o,t)=>{U.value.visible=!1,r.ignoreObjects.forEach(e=>{e.isMesh&&(e.visible=!1),e.value&&e.value.isMesh&&(e.value.visible=!1)}),d(o),n.update(e,o,t),d(o,!1),r.ignoreObjects.forEach(e=>{e.isMesh&&(e.visible=!0),e.value&&e.value.isMesh&&(e.value.visible=!0)}),U.value.visible=!0})}),g(()=>{r.reflectivity&&p&&(p.uniforms.uReflectivity.value=r.reflectivity)}),x(()=>r.showGridHelper,e=>{t.visible=e}),o({reflector:n}),(e,o)=>y(N)?b("",!0):(h(),M("TresGroup",{key:0,scale:[e.scale,1,e.scale]},[w("primitive",{object:R(y(U)),"position-y":-.01},null,8,T),w("primitive",{object:y(t)},null,8,C)],8,E))}});export{I as _};
