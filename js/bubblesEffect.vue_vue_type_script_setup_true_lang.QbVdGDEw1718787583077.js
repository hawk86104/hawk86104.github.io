import{a5 as n,Z as t,bU as e,aM as o,h as r,aA as i}from"./three.OZpCYxlY1718787583077.js";import{a,r as s,N as l}from"./@tresjs.yMGhEK7G1718787583077.js";import{d as u,b as c,a3 as f,a2 as p,o as m,D as g,J as b,aj as v,ak as y,u as d}from"./@vue.CpOXM7bB1718787583077.js";const h=z;!function(n,t){const e=z,o=P();for(;;)try{if(954783===parseInt(e(501))/1+parseInt(e(487))/2+parseInt(e(528))/3+-parseInt(e(498))/4*(parseInt(e(491))/5)+-parseInt(e(526))/6*(-parseInt(e(500))/7)+parseInt(e(502))/8*(parseInt(e(478))/9)+-parseInt(e(493))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const w=function(){let n=!0;return function(t,e){const o=n?function(){if(e){const n=e[z(516)](t,arguments);return e=null,n}}:function(){};return n=!1,o}}();!function(){w(this,(function(){const n=z,t=new RegExp("function *\\( *\\)"),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=S(n(518));t.test(o+n(485))&&e[n(512)](o+n(507))?S():o("0")}))()}();const _=function(){let n=!0;return function(t,e){const o=n?function(){if(e){const n=e[z(516)](t,arguments);return e=null,n}}:function(){};return n=!1,o}}();function z(n,t){const e=P();return(z=function(n,t){return e[n-=475]})(n,t)}_(void 0,(function(){const n=z,t=function(){const n=z;let t;try{t=Function("return (function() "+n(488)+");")()}catch(e){t=window}return t}(),e=t[n(479)]=t[n(479)]||{},o=[n(508),n(514),n(531),n(519),"exception",n(524),n(530)];for(let r=0;r<o[n(482)];r++){const t=_.constructor.prototype[n(476)](_),i=o[r],a=e[i]||t;t[n(517)]=_[n(476)](_),t[n(494)]=a[n(494)][n(476)](a),e[i]=t}}))();const x=b(h(499),null,null,-1);function P(){const n=["test","string","warn","debu","apply","__proto__","init","error","uOpacity","position","action","model","table","TresShaderMaterial","186bSCJaD","uniforms","5015394UZPHhW","counter","trace","info","offsetY","dispose","bind","TresMeshRef","18657kkpbnU","console","AdditiveBlending","traverse","length","geometry","mergeGeometries","chain","Mesh","3628660iSDckC",'{}.constructor("return this")( )',"constructor","Color","15GFSaNm","uTime","43919150GXJIAl","toString","verticesNeedUpdate","sin","xRayEffect","751012yCsrnj","TresBufferGeometry","321153dFwWsi","566250lABCKP","1680TxOCTw","opacity","push","stateObject","while (true) {}","input","log","value","color","glowColor"];return(P=function(){return n})()}const T=u({__name:h(497),props:{model:{},color:{default:"#84ccff"},opacity:{default:1}},async setup(o){const r=h;let i,u;const d=o,w=c(),_=[];d[r(523)][r(481)]((t=>{const e=r;t instanceof n[e(486)]&&(t[e(483)][e(495)]=!0,_[e(504)](t.geometry))}));const z=([i,u]=f((()=>l({map:"./plugins/medical/image/brainXRayLight.png"}))),i=await i,u(),i),P={uniforms:{c:{type:"f",value:1.11},p:{type:"f",value:1},glowColor:{type:"c",value:new(n[r(490)])(d.color)},lightningTexture:{type:"t",value:z.map},offsetY:{type:"f",value:.1},uTime:{type:"f",value:0},uOpacity:{type:"f",value:d[r(503)]}},vertexShader:"uniform float c;\nuniform float p;\nuniform float uTime;\nvarying float intensity;\nvarying vec2 vUv;\nvoid main(){\n    vUv=uv;\n    vec3 vNormal=normalize(normalMatrix*normal);\n    intensity=pow(c-abs(dot(vNormal,vec3(0,0,1))),p);\n    gl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.);\n}",fragmentShader:"uniform vec3 glowColor;\nuniform sampler2D lightningTexture;\nvarying float intensity;\nvarying vec2 vUv;\nuniform float offsetY;\nuniform float uTime;\nuniform float uOpacity;\n\nvoid main(){\n  vec2 uv=vUv;\n  uv.y+=offsetY;\n  vec3 glow=glowColor*intensity;\n  vec3 color=vec3(step(.1,uv.y)-step(.2,uv.y))-vec3(texture2D(lightningTexture,uv));\n  float alpha=clamp(cos(uTime*3.),.5,1.);\n  gl_FragColor=vec4(glow+color,alpha*uOpacity);\n}",side:t,blending:n[r(480)],depthWrite:!1};P.uniforms[r(532)][r(509)]=Math[r(496)](5);const{camera:T}=a(),{onLoop:S}=s();return S((({delta:n})=>{const t=r;T[t(509)][t(521)]&&w[t(509)]&&(P[t(527)][t(492)].value+=n)})),p((()=>{const t=r;w[t(509)]&&(w[t(509)].geometry[t(475)](),w[t(509)][t(483)]=e[t(484)](_)),d[t(510)]&&(P[t(527)][t(511)].value=new(n[t(490)])(d.color)),d.opacity&&(P[t(527)][t(520)][t(509)]=d[t(503)])})),(n,t)=>{const e=r;return m(),g("TresMesh",{ref_key:e(477),ref:w},[x,b(e(525),v(y(P)),null,16)],512)}}});function S(n){function t(n){const e=z;if(typeof n===e(513))return function(n){}.constructor(e(506))[e(516)](e(529));1!==(""+n/n)[e(482)]||n%20==0?function(){return!0}.constructor(e(515)+"gger").call(e(522)):function(){return!1}[e(489)](e(515)+"gger")[e(516)](e(505)),t(++n)}try{if(n)return t;t(0)}catch(e){}}const C=B;!function(n,t){const e=B,o=j();for(;;)try{if(782485===parseInt(e(266))/1*(parseInt(e(234))/2)+parseInt(e(220))/3*(-parseInt(e(257))/4)+parseInt(e(239))/5+parseInt(e(236))/6*(parseInt(e(241))/7)+parseInt(e(246))/8*(-parseInt(e(198))/9)+-parseInt(e(252))/10*(parseInt(e(265))/11)+parseInt(e(242))/12)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const I=function(){let n=!0;return function(t,e){const o=n?function(){if(e){const n=e[B(228)](t,arguments);return e=null,n}}:function(){};return n=!1,o}}();!function(){I(this,(function(){const n=B,t=new RegExp("function *\\( *\\)"),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=U(n(202));t[n(268)](o+n(237))&&e[n(268)](o+n(238))?U():o("0")}))()}();const M=function(){let n=!0;return function(t,e){const o=n?function(){if(e){const n=e.apply(t,arguments);return e=null,n}}:function(){};return n=!1,o}}();M(void 0,(function(){const n=B;let t;try{t=Function(n(203)+n(230)+");")()}catch(r){t=window}const e=t[n(272)]=t[n(272)]||{},o=[n(201),n(213),n(231),n(224),n(225),n(263),n(200)];for(let i=0;i<o[n(262)];i++){const t=M[n(245)][n(264)][n(207)](M),r=o[i],a=e[r]||t;t[n(210)]=M[n(207)](M),t[n(217)]=a[n(217)][n(207)](a),e[r]=t}}))();const F=u({__name:C(216),props:{model:{},color:{default:"#FFF"},opacity:{default:1}},setup(t){const a=C,l=t,u=[a(197),a(232),a(258),a(199),a(206),a(270),a(260),a(248),a(209)],f={};l[a(267)][a(212)]((t=>{const o=a;t instanceof n[o(233)]&&u[o(205)]((n=>{const r=o;if(t.name.includes(n)){if(f[n]){const o=[f[n],t[r(253)]];return f[n]=e[r(235)](o),f}return f[n]=t.geometry}return[]}))}));const h=c(),w=new(n[a(240)])({uniforms:{glowColor:{type:"c",value:new(n[a(215)])(l[a(256)])},uTime:{type:"f",value:0},uSlowTime:{type:"f",value:0},uBubblesUp:{type:"f",value:1},uOpacity:{type:"f",value:l[a(208)]}},vertexShader:"uniform float p;\nuniform float uTime;\nuniform float uSlowTime;\nuniform float uBubblesUp;\nvarying float intensity;\nattribute vec2 aDelayDuration;\nattribute float size;\nattribute vec4 bubbles;\nvarying float alpha;\n\nfloat easeExpoInOut(float p){\n    return((p*=2.)<1.)?.5*pow(2.,10.*(p-1.)):.5*(2.-pow(2.,-10.*(p-1.)));\n}\n\nvoid main()\n{\n    intensity=.9;\n    vec4 mvPosition=modelViewMatrix*vec4(position,1.);\n    gl_PointSize=size*(300./-mvPosition.z);\n    float m=mod(size,sin(uSlowTime*.12+size));\n    \n    alpha=step(.5,abs(m));\n    if(m>.5&&m<.7){\n        gl_PointSize=.9*size;\n    }\n    if(m>.8){\n        gl_PointSize=.9*size;\n    }\n    \n    gl_Position=projectionMatrix*mvPosition;\n    \n    if(bubbles.w>0.&&bubbles.w<2.&&bubbles.x!=0.&&bubbles.y!=0.){\n        gl_PointSize=size+15.;\n        alpha=clamp(abs(sin(uTime-bubbles.y)),.3,1.);\n        \n        float tProgress=smoothstep(0.,aDelayDuration.x,uBubblesUp);\n        vec3 tranlated=mix(position,bubbles.xyz,tProgress);\n        vec4 bPosition=modelViewMatrix*vec4(tranlated,1.);\n        \n        gl_PointSize=uBubblesUp*gl_PointSize;\n        gl_Position+=projectionMatrix*bPosition;\n        alpha=5.;\n    }\n    \n    if(bubbles.w==2.){\n        alpha=clamp(abs(sin(uTime-bubbles.y)),.3,.6);\n        gl_PointSize=size+60.;\n        \n        gl_PointSize=uBubblesUp*gl_PointSize;\n        float normalized=clamp(uBubblesUp,0.,2.)*2.;\n        vec3 tranlated=mix(position,bubbles.xyz,normalized);\n        vec4 bPosition=modelViewMatrix*vec4(tranlated,1.);\n        gl_Position+=projectionMatrix*bPosition;\n    }\n    if(bubbles.w==3.){\n        alpha=clamp(abs(sin(uTime-bubbles.y)),.3,1.);\n        gl_PointSize=size+90.;\n        \n        gl_PointSize=uBubblesUp*gl_PointSize;\n        float normalized=clamp(uBubblesUp,0.,2.)*2.;\n        vec3 tranlated=mix(position,bubbles.xyz,normalized);\n        vec4 bPosition=modelViewMatrix*vec4(tranlated,1.);\n        gl_Position+=projectionMatrix*bPosition;\n    }\n}",fragmentShader:"precision mediump float;\nuniform vec3 glowColor;\nvarying float intensity;\nvarying float alpha;\nuniform float uOpacity;\nvoid main() {\n  float distanceToCenter = distance(gl_PointCoord, vec2(.5));\n  float pct = 1. - smoothstep(0., .5, distanceToCenter);\n  vec3 color = vec3(1.) * gl_FragColor.rgb;\n  vec3 glow = glowColor * intensity;\n  gl_FragColor = vec4(glow, clamp(alpha, 0., 1.));\n  gl_FragColor = vec4(glow, pct * gl_FragColor.a);\n  gl_FragColor = vec4(gl_FragColor.rgb, gl_FragColor.a * uOpacity);\n  // gl_FragColor=vec4(1.,1.,0.,1.);\n}",blending:o,side:n[a(219)],depthTest:!1,vertexColors:!1,transparent:!0});p((()=>{h[a(247)]&&(()=>{const t=a,e=[],o=[],s=[],l=[];for(let i=0;i<2e4-3*u.length;i+=1){const a=r[t(221)](0,u[t(262)]-1),c=u[a],p=f[c][t(223)][t(261)][t(226)][3*i+0]||0,m=f[c].attributes[t(261)].array[3*i+1]||0,g=f[c][t(223)].position[t(226)][3*i+2]||0;if(o[t(229)](p,m,g),e[i]=n[t(255)].randFloat(10,20),i%100==0){const n=r.randInt(100,250)+m;l.push(p,n,g,1)}else l[t(229)](p,m,g,0);s[2*i+0]=r.randFloat(.5,1.5),s[2*i+1]=2.5}h[t(247)][t(244)]("aDelayDuration",new(n[t(195)])(s,2)),h[t(247)][t(244)]("bubbles",new(n[t(195)])(l,4)),h[t(247)][t(244)](t(261),new i(o,3)),h[t(247)][t(244)](t(256),new(n[t(195)])([],3)),h[t(247)][t(244)](t(218),new i(e,1)),h[t(247)][t(211)]()})()}));const _=c(),{onLoop:z}=s();return z((({delta:t})=>{const e=a;_[e(247)]&&(_[e(247)][e(196)][e(222)].uTime[e(247)]+=.05,_[e(247)][e(196)][e(222)].uSlowTime[e(247)]+=1/400),l.color&&(w[e(222)].glowColor[e(247)]=new(n[e(215)])(l[e(256)])),l[e(208)]&&(w[e(222)].uOpacity[e(247)]=l[e(208)])})),(n,t)=>{const e=a;return m(),g("TresPoints",{ref_key:e(204),ref:_},[b(e(250),{ref_key:e(251),ref:h},null,512),b(e(254),v(y(d(w))),null,16)],512)}}});function U(n){function t(n){const e=B;if("string"==typeof n)return function(n){}[e(245)](e(214)).apply(e(259));1!==(""+n/n).length||n%20==0?function(){return!0}[e(245)]("debu"+e(227))[e(271)](e(243)):function(){return!1}.constructor(e(249)+e(227))[e(228)](e(269)),t(++n)}try{if(n)return t;t(0)}catch(e){}}function B(n,t){const e=j();return(B=function(n,t){return e[n-=195]})(n,t)}function j(){const n=["color","76NQFURc","episodic","counter","bridge","position","length","table","prototype","11LGzrJD","632671hRATzS","model","test","stateObject","brainstem","call","console","Float32BufferAttribute","material","afective","1172997GFXMnX","process","trace","log","init","return (function() ","TresMeshRef","map","amigdala","bind","opacity","analitic","__proto__","computeBoundingSphere","traverse","warn","while (true) {}","Color","bubblesEffect","toString","size","DoubleSide","67056IMWScC","randInt","uniforms","attributes","error","exception","array","gger","apply","push",'{}.constructor("return this")( )',"info","semantic","Mesh","2LLRQnU","mergeGeometries","714720BoERWk","chain","input","4325340duBPni","ShaderMaterial","49GuxPzy","5182716BgANeE","action","setAttribute","constructor","8dqVTnY","value","cerebellum","debu","TresBufferGeometry","BufferGeometryRef","14259660zetFeO","geometry","TresShaderMaterial","MathUtils"];return(j=function(){return n})()}export{T as _,F as a};
