import{_ as e}from"./@fesjs.DnM7nINA1761276103973.js";import"./Resource.CSaxGSPI1761276103973.js";/* empty css                                                                             */import{l as a}from"./bubbleLoading.CNFXC-mb1761276103973.js";import"./three-mesh-ui.module.C--P1h9b1761276103973.js";import"./global.BkM2LKCv1761276103973.js";/* empty css                                                              */import{_ as t}from"./ScrollControls.vue_vue_type_script_setup_true_lang.DsigweIw1761276103973.js";import"./vanilla.esm.5.5.0.CRlEbOMK1761276103973.js";import{P as o}from"./tweakpane.CqZAnw7f1761276103973.js";import{v as r,b1 as s,b2 as n,i,j as l,o as u,q as c,l as m,bJ as p,k as v,J as d,A as f,aD as g,cr as x,a1 as h,O as y,b as w,cs as _,ct as j,cu as P,d as b,r as M,cv as z,ad as S,as as T}from"./three.Bhn4-0ry1761276103973.js";import{N as A,_ as B,F as C}from"./@tresjs.B_KjVy0E1761276103973.js";import{l as F}from"./util.Bz2eiElJ1761276103973.js";import{d as D,G as R,o as U,u as I,a as k,ac as L,w as V,b as q,a3 as G,r as J,g as O,h as Y,I as N,e as X,ap as E,a9 as W,aa as Z,F as H}from"./@vue.CKlgtJke1761276103973.js";import"./vue-router.BFHj2xRz1761276103973.js";import"./lodash-es.DWe8oqPO1761276103973.js";import"./pinia.C8YT0eOZ1761276103973.js";import"./@qlin.y-0Z8WnK1761276103973.js";import"./@babel.BPq7uOAK1761276103973.js";import"./@floating-ui.Bhq4ibgf1761276103973.js";import"./@juggle.Vc7cP4_P1761276103973.js";import"./utils.DEKxcj5Y1761276103973.js";import"./color.zjyo9y-T1761276103973.js";import"./color-string.Cb0Nf94v1761276103973.js";import"./color-name.gyPnsvCn1761276103973.js";import"./lodash.B8Sqzhuz1761276103973.js";import"./@amap.fjyZdsU91761276103973.js";import"./@vueuse.wtfleElW1761276103973.js";import"./object-hash.1qNYTrnD1761276103973.js";import"./jszip.y_yjJ09m1761276103973.js";import"./postprocessing.CeTFUAN_1761276103973.js";const K=e=>{let a=e.attributes.position.count,t=Math.ceil(Math.sqrt(a)),o=Math.ceil(a/t),i=new Float32Array(t*o*4);!function(e){for(let a=Math.floor(e.length/3)-1;a>0;a--){const t=Math.floor(Math.random()*(a+1));for(let o=0;o<3;o++){let r=e[3*a+o];e[3*a+o]=e[3*t+o],e[3*t+o]=r}}}(e.attributes.position.array);for(let r=0;r<a;r++){const a=e.attributes.position.array[3*r+0],t=e.attributes.position.array[3*r+1],o=e.attributes.position.array[3*r+2],s=0;i[4*r+0]=a,i[4*r+1]=t,i[4*r+2]=o,i[4*r+3]=s}let l=new r(i,t,o,s,n);return l.needsUpdate=!0,l},Q=()=>{const e=new c({uniforms:{uTextureA:{value:null},uTextureB:{value:null},uTime:{value:0},uScroll:{value:0}},vertexShader:"varying vec2 vUv;\nvoid main() {\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  vUv = uv;\n}",fragmentShader:"uniform sampler2D uTextureA;\nuniform sampler2D uTextureB;\nprecision mediump float; \nuniform float uTime;\nuniform float uScroll;\nvarying vec2 vUv;\n\nmat3 rotationMatrix3(vec3 axis, float angle) {\n  axis = normalize(axis);\n  float s = sin(angle);\n  float c = cos(angle);\n  float oc = 1. - c;\n\n  return mat3(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s,\n              oc * axis.z * axis.x + axis.y * s,\n              oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c,\n              oc * axis.y * axis.z - axis.x * s,\n              oc * axis.z * axis.x - axis.y * s,\n              oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c);\n}\n\nvoid main() {\n  vec3 textureA = rotationMatrix3(vec3(10., 6., 3.), sin(uTime) * .1) *\n                  texture2D(uTextureA, vUv).xyz;\n  \n\n  vec3 textureB = rotationMatrix3(vec3(10., 6., 3.), sin(uTime) * .1) *\n                  texture2D(uTextureB, vUv).xyz;\n  \n\n  float t = uScroll;\n  vec3 pos = mix(textureA, textureB, t);\n\n  gl_FragColor = vec4(pos, 1.);\n}"}),a=new i;return a.setAttribute("position",new l(new Float32Array([-1,-1,0,1,-1,0,1,1,0,-1,-1,0,1,1,0,-1,1,0]),3)),a.setAttribute("uv",new l(new Float32Array([0,1,1,1,1,0,0,1,1,0,0,0]),2)),new u(a,e)};const $=["object"],ee=D({__name:"particalMesh",props:{progress:{default:0},width:{default:256},height:{default:256}},setup(e,{expose:a}){const t=e;let o=((e,a)=>{const t=e*a;let o=new Float32Array(3*t);for(let s=0;s<t;s++){let t=3*s;o[t+0]=s%e/e,o[t+1]=s/e/a}const r=new i;return r.setAttribute("position",new l(o,3)),new m(r,new c({uniforms:{uPositions:{value:null},uSize:{value:12},uPixelRatio:{value:Math.min(window.devicePixelRatio,2)},uColor:{value:new v("#ffaa00")}},vertexShader:"uniform sampler2D\n    uPositions; \nuniform float uSize;\nuniform float uPixelRatio;\nvarying vec3 vPos;\nvarying vec2 vUv;\nvoid main() {\n  vec3 pos = texture2D(uPositions, position.xy).xyz;\n\n  float customSize = uSize;\n\n  vec4 modelPosition = modelMatrix * vec4(pos, 1.0);\n  vec4 viewPosition = viewMatrix * modelPosition;\n  vec4 projectionPosition = projectionMatrix * viewPosition;\n\n  gl_Position = projectionPosition;\n  gl_PointSize = customSize * uPixelRatio;\n  gl_PointSize *= (1.0 / -viewPosition.z);\n\n  vPos = pos;\n}",fragmentShader:"precision mediump float;\nvarying vec3 vPos;\nuniform vec3 uColor; \nvoid main() {\n\n  float distanceToCenter = distance(gl_PointCoord, vec2(0.5));\n  float strength = 0.05 / distanceToCenter - 0.1;\n\n  \n\n  gl_FragColor = vec4(uColor, strength * length(vPos));\n}",transparent:!0,depthWrite:!1,blending:p}))})(t.width,t.height);return a({particles:o}),(e,a)=>(U(),R("primitive",{object:I(o)},null,8,$))}}),ae=D({__name:"particalFBO",props:{progress:{default:0},width:{default:256},height:{default:256},color:{default:"#ffaa00"}},async setup(e){let a,t;const o=e,r=k(null),i=new d(o.width,o.height,{minFilter:g,magFilter:g,generateMipmaps:!1,colorSpace:f,depthBuffer:!1,stencilBuffer:!1,format:s,type:n}),l=e=>{const a=[];return e.traverse(e=>{e instanceof u&&(e.geometry.deleteAttribute("uv"),e.geometry.deleteAttribute("normal"),e.geometry.deleteAttribute("tangent"),a.push(e.geometry))}),_(a)},c="https://opensource.cdn.icegl.cn",m=c+"/model/medical/brainparts.OBJ",p=new x,v=([a,t]=L(()=>F(m,p)),a=await a,t(),a),j=l(v);j.scale(.01,.01,.01);const P=K(j),b=k(null),M=k(null),z=c+"/model/eCommerce/guanYu.glb",{state:S,nodes:T,materials:D,animations:R}=A(z,{draco:!0,decoderPath:"./draco/"});V(()=>S.value,e=>{if(e?.scene)try{const a=e.scene||e?.scene||e.scene,t=a.children?.[0]??a,o=l(t);o.rotateX(Math.PI/2),o.translate(0,-.9,0),b.value=K(o)}catch(a){console.warn("guanyu merge error",a)}},{immediate:!0});const I=c+"/model/industry4/modelDraco.glb",{state:G,nodes:J,materials:O,animations:Y}=A(I,{draco:!0,decoderPath:"./draco/"});V(()=>G.value,e=>{if(e?.scene)try{const a=e.scene||e,t=a.children?.[0]??a,o=l(t);o.rotateX(-Math.PI/2),o.rotateY(Math.PI/3),o.translate(0,0,0),M.value=K(o)}catch(a){console.warn("plane merge error",a)}},{immediate:!0});const N=Q(),X=new h,E=new y(-1,1,1,-1,1/Math.pow(2,53),1);X.add(N);const{onBeforeRender:W}=B(),{camera:Z,renderer:H}=C();return W(({elapsed:e})=>{if(H&&Z.value&&r.value){H.setRenderTarget(i),H.clear(),H.render(X,E),H.setRenderTarget(null);const a=b.value||null,t=P||null,s=M.value||null,n=w.clamp(-o.progress/2,0,1);if(n<.5?(N.material.uniforms.uTextureA.value=a??t,N.material.uniforms.uTextureB.value=t,N.material.uniforms.uScroll.value=2*n):(N.material.uniforms.uTextureA.value=t,N.material.uniforms.uTextureB.value=s??t,N.material.uniforms.uScroll.value=2*(n-.5)),N.material.uniforms.uTime.value=e,r.value?.particles?.material?.uniforms){r.value.particles.material.uniforms.uPositions.value=i.texture;const e=r.value.particles.material.uniforms.uColor;e&&e.value.setStyle(o.color)}}}),(e,a)=>(U(),q(ee,{ref_key:"pMesh",ref:r,progress:e.progress},null,8,["progress"]))}}),te=D({__name:"particalPass",props:{use:{type:Boolean,default:!0}},setup(e){const a=e,{camera:t,renderer:o,scene:r,sizes:n}=C(),i=0,l=.472,u=1.61;let c=null;G(()=>{n.width.value&&((e,a,t,o,r)=>{const n=new j(e,a),m=new P(new b(o,r),l,u,i),p=new d(o,r,{generateMipmaps:!1,minFilter:M,magFilter:M,format:s,colorSpace:f,samples:0});c=new z(t,p),c.addPass(n),c.addPass(m)})(r.value,t.value,o,n.width.value,n.height.value)});const{onRender:m}=B();return m(()=>{a.use?c&&c.render():o&&t.value&&o.render(r.value,t.value)}),(e,a)=>null}}),oe=e(D({__name:"scrollPartical",setup(e){const r=k(0);G(()=>{console.log("jaime ~ progress:",r.value)});const s={clearColor:"#000",outputColorSpace:T,toneMapping:S,toneMappingExposure:1,windowSize:!0,renderMode:"manual",powerPreference:"high-performance",antialias:!0,alpha:!1,useLegacyLights:!1,physicallyCorrectLights:!0},n=J({pass:!0,color:"#6aff00"}),i=new o({title:"参数",expanded:!0});return i.addBinding(n,"pass",{label:"后处理"}),i.addBinding(n,"color",{label:"颜色"}),(e,o)=>{const i=O("TresCanvas");return U(),R(H,null,[Y(I(a),{styleNum:4}),Y(i,W(Z(s)),{default:X(()=>[o[1]||(o[1]=N("TresPerspectiveCamera",{position:[0,0,-4],fov:45,near:.1,far:1e3,"look-at":[0,0,0]},null,-1)),Y(te,{use:n.pass},null,8,["use"]),Y(t,{modelValue:r.value,"onUpdate:modelValue":o[0]||(o[0]=e=>r.value=e),distance:10,"smooth-scroll":.1,htmlScroll:""},{default:X(()=>[(U(),q(E,null,{default:X(()=>[Y(ae,{progress:r.value,color:n.color},null,8,["progress","color"])]),_:1}))]),_:1},8,["modelValue"])]),_:1},16),o[2]||(o[2]=N("main",null,[N("section",null,[N("h1",null,"关羽 - GuanYu")]),N("section",null,[N("h1",{style:{"margin-left":"-11em","margin-bottom":"-10em"}},"大脑 - Brain")]),N("section",null,[N("h1",{style:{"margin-left":"11em","margin-bottom":"-10em"}},"设备 - Device")])],-1))],64)}}}),[["__scopeId","data-v-9439621a"]]);export{oe as default};
