import{p as t,$ as n,N as e,d as o}from"./@tresjs.vs5lCFs11722217438692.js";import{a6 as r,k as s,V as a,j as i,r as c,O as l,cD as u,y as v,W as f,aA as p,ci as d}from"./three.ej3u8izI1722217438692.js";import{P as m}from"./tweakpane.yHWGBmom1722217438692.js";import{d as g,a4 as x,e as h,o as y,f as b,g as I,J as _,j as S,u as U,aj as w,ak as D,al as P,m as E}from"./@vue.Q1VpS3901722217438692.js";import{_ as M}from"./@fesjs.oJOSvSTI1722217438692.js";import"./@vueuse.mG9rDBoo1722217438692.js";import"./vue-router.K-gJhGrY1722217438692.js";import"./lodash-es.nFpJXAf-1722217438692.js";import"./@qlin.yHhFDldE1722217438692.js";import"./pinia.iyC53SMr1722217438692.js";import"./@floating-ui.BPbuo5Gx1722217438692.js";import"./@juggle.7yjBMqoW1722217438692.js";function A(){const t=["index","random","4277754wUjbqI","return (function() ","open","object","warn","__proto__","onload","string","Vector3",'{}.constructor("return this")( )',"WagnerLoadShaderException",'Shader "',"replace","name","constructor","v3v","Matrix4","input","prototype","apply","872WWKdMv","2115756lhtoDB","25utFuUM","debu","log","chain","onerror","length","lastIndex","Vector4","91330KYVsbt","message","gger","call","send","\" couldn't be loaded.","Matrix3","25oSCMwE","bind","exception","hasOwnProperty","init","type","toString","value","console","Texture","676266igVFNq","function *\\( *\\)","error","Vector2","while (true) {}","23163IGPqUu","info","onabort","27210chrXrx","exec","isArray","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","trace","115356bjwKLB","table"];return(A=function(){return t})()}function L(t,n){const e=A();return(L=function(t,n){return e[t-=179]})(t,n)}!function(t,n){const e=L,o=A();for(;;)try{if(258360===-parseInt(e(214))/1*(parseInt(e(232))/2)+parseInt(e(224))/3+-parseInt(e(237))/4*(-parseInt(e(199))/5)+parseInt(e(198))/6+parseInt(e(229))/7*(parseInt(e(197))/8)+-parseInt(e(241))/9+-parseInt(e(207))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){C(this,(function(){const t=L,n=new RegExp(t(225)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=N(t(218));n.test(o+t(202))&&e.test(o+t(194))?N():o("0")}))()}();const F=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(196)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();F(void 0,(function(){const t=L;let n;try{n=Function(t(242)+t(186)+");")()}catch(r){n=window}const e=n[t(222)]=n[t(222)]||{},o=[t(201),t(181),t(230),t(226),t(216),t(238),t(236)];for(let s=0;s<o[t(204)];s++){const n=F[t(191)][t(195)][t(215)](F),r=o[s],a=e[r]||n;n[t(182)]=F[t(215)](F),n[t(220)]=a.toString[t(215)](a),e[r]=n}}))();function z(t,n,e){const o=L;if(typeof t!==o(180)||null===t)return t;const r=Array[o(234)](t)?[]:{};for(const s in t)t[o(217)](s)&&(r[s]=z(t[s])),s==n&&(r[n]=e);return r}function N(t){function n(t){const e=L;if(typeof t===e(184))return function(t){}.constructor(e(228))[e(196)]("counter");1!==(""+t/t)[e(204)]||t%20==0?function(){return!0}[e(191)](e(200)+e(209))[e(210)]("action"):function(){return!1}[e(191)](e(200)+"gger")[e(196)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const T=R;!function(t,n){const e=R,o=j();for(;;)try{if(188622===-parseInt(e(262))/1*(-parseInt(e(308))/2)+-parseInt(e(336))/3+parseInt(e(304))/4+-parseInt(e(334))/5+parseInt(e(313))/6+-parseInt(e(321))/7*(parseInt(e(245))/8)+parseInt(e(253))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(277)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function R(t,n){const e=j();return(R=function(t,n){return e[t-=245]})(t,n)}!function(){G(this,(function(){const t=R,n=new RegExp(t(314)),e=new RegExp(t(329),"i"),o=k(t(286));n[t(288)](o+t(343))&&e[t(288)](o+t(342))?k():o("0")}))()}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(277)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function j(){const t=["table","far","debu","magFilter","Pass","useRGBA","apply","push","trace","ShaderMaterial","swapBuffers","uniforms","height","RGBFormat","action","init","splice","test","passItems","prototype","Stack",'{}.constructor("return this")( )',"Mesh","setRenderTarget","render","console","type","near","width","renderer","removePass","RGBAFormat","value","238680CZAmCI","stencilBuffer","string","counter","191738pMFgRD","time","bind","CopyPass","ClampToEdgeWrapping","202050bmxBFd","function *\\( *\\)","toString","Reset","clone","exception","back","onWindowResize","707LyziKP","constructor","passes","read","innerWidth","startTime","uuid","wrapT","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","front","texture","log","loadShadervf","1631260UohtGl","makePerspective","187845XiNdCg","shader","settings","while (true) {}","LinearFilter","quad","input","chain","length","3376cHsDjP","innerHeight","call","getOfflineTexture","scene","add","pass","write","2152431pHdlbZ","wrapS","copyPass","warn","now","setSize","camera","material","gger","3tsWYEt","WebGLRenderTarget","tInput","set","resolution","Scene","params","MeshBasicMaterial","addPass"];return(j=function(){return t})()}B(void 0,(function(){const t=R,n=function(){const t=R;let n;try{n=Function("return (function() "+t(292)+");")()}catch(e){n=window}return n}(),e=n[t(296)]=n[t(296)]||{},o=[t(332),t(256),"info","error",t(318),t(271),t(279)];for(let r=0;r<o[t(344)];r++){const n=B[t(322)][t(290)][t(310)](B),s=o[r],a=e[s]||n;n.__proto__=B.bind(B),n.toString=a[t(315)][t(310)](a),e[s]=n}}))();class V{constructor(t,n){const e=R;this[e(299)]=1,this.height=1,this[e(338)]=n||{},this[e(276)]=this[e(338)].useRGBA||!1,this.renderer=t,this.copyPass=this[e(311)](this[e(338)]),this.scene=new(r[e(267)]),this[e(341)]=new(r[e(293)])(new c(1,1),new(r[e(269)])),this[e(249)][e(250)](this[e(341)]),this.camera=new l(1,1,1,1,-1e4,1e4),this[e(330)]=new(r[e(263)])(1,1,{minFilter:void 0!==this[e(338)].minFilter?this[e(338)].minFilter:r[e(340)],magFilter:void 0!==this[e(338)][e(274)]?this[e(338)][e(274)]:r[e(340)],wrapS:void 0!==this[e(338)][e(254)]?this[e(338)].wrapS:r[e(312)],wrapT:void 0!==this[e(338)][e(328)]?this[e(338)][e(328)]:r[e(312)],format:this.useRGBA?r[e(302)]:u,type:void 0!==this.settings[e(297)]?this[e(338)].type:v,stencilBuffer:void 0===this[e(338)][e(305)]||this.settings[e(305)]}),this[e(319)]=this[e(330)][e(317)](),this[e(326)]=Date.now(),this[e(323)]={},this.Stack={passItems:[],passes:[]}}[T(270)](t,n,e,o){const r=T;this.loadShadervf(n);const s={shaderName:t,params:e,uuid:o,shader:this[r(337)]};this[r(291)][r(289)][r(278)](s)}[T(301)](t){const n=T;for(let e=this.Stack.passItems[n(344)]-1;e>=0;e--)this.Stack.passItems[e][n(327)]===parseInt(t)&&this.Stack[n(289)][n(287)](e,1);console[n(332)](this.Stack[n(289)])}[T(311)](){const t=T;this.Pass.call(this);return this[t(333)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[T(333)](t){return this[T(337)]=function(t,n){const e=L,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,c=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,l={sampler2D:{type:"t",value:()=>new(r[L(223)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[L(227)])},vec3:{type:"v3",value:()=>new(r[L(185)])},vec4:{type:"v4",value:()=>new(r[L(206)])},bvec2:{type:"v2",value:()=>new(r[L(227)])},bvec3:{type:"v3",value:()=>new a},bvec4:{type:"v4",value:()=>new(r[L(206)])},ivec2:{type:"v2",value:()=>new i},ivec3:{type:"v3",value:()=>new(r[L(185)])},ivec4:{type:"v4",value:()=>new(r[L(206)])},mat2:{type:"v2",value:()=>new(void 0)},mat3:{type:"v3",value:()=>new(r[L(213)])},mat4:{type:"v4",value:()=>new(r[L(193)])}},u={float:{type:"fv",value:()=>[]},vec3:{type:e(192),value:()=>[]}};let v;const f={resolution:{type:"v2",value:new(r[e(227)])(1,1),default:!0},time:{type:"f",value:Date.now(),default:!0},tInput:{type:"t",value:new(r[e(223)]),default:!0}};let p,d;for(;null!==(v=o.exec(n));)v[e(239)]===o[e(205)]&&o[e(205)]++,p=v[1],d=v[2],f[d]={type:l[p][e(219)],value:l[p][e(221)]()};for(;null!==(v=c[e(233)](n));)v[e(239)]===o[e(205)]&&o[e(205)]++,p=v[1],d=v[2],v[3],f[d]={type:u[p][e(219)],value:u[p].value()};return new s({uniforms:f,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}("varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }",t),this.shader}[T(275)](t){const n=T;this[n(337)]=null,this[n(268)]={}}[T(316)](){const t=T;this[t(324)]=this[t(330)],this[t(252)]=this.back}[T(320)](t,n){const e=T,o=window[e(325)],r=window[e(246)];t[e(258)](1*o,1*r),n.projectionMatrix[e(335)](70,o/r,n.near,n[e(272)]),this.setSize(o,r);return this[e(248)](o,r,!0)}[T(258)](t,n){const e=T;this[e(299)]=t,this[e(283)]=n,this[e(259)].projectionMatrix.makeOrthographic(t/-2,t/2,n/2,n/-2,this[e(259)][e(298)],this[e(259)][e(272)]),this[e(341)].scale[e(265)](t,n,1),this.front[e(258)](t,n),this.back[e(258)](t,n)}[T(248)](t,n,e){const o=T;return new f(t,n,{minFilter:r[o(340)],magFilter:r[o(340)],format:e?r[o(302)]:r[o(284)]})}render(t,n,e,o){const r=T;this[r(300)][r(294)](this.write),this[r(300)][r(295)](t,n),o||this.swapBuffers()}[T(281)](){const t=T,n=this[t(252)];this[t(252)]=this[t(324)],this[t(324)]=n}[T(251)](){const t=T;for(let n=0;n<this[t(291)].passItems[t(344)];n++){const e=this.Stack[t(289)][n][t(337)],o=this[t(291)][t(289)][n][t(268)];if(this[t(300)][t(294)](this[t(252)]),e instanceof r[t(280)]){this[t(341)][t(260)]=e,this[t(341)][t(260)][t(282)].tInput[t(303)]=this[t(324)].texture,this[t(341)][t(260)][t(282)][t(266)][t(303)].set(this.width,this.height),this[t(341)][t(260)][t(282)][t(309)][t(303)]=.001*(Date[t(257)]()-this[t(326)]);for(const n in o)this[t(341)].material[t(282)][n][t(303)]=o[n];this[t(300)].render(this[t(249)],this[t(259)]),this[t(281)]()}}}toScreen(t,n){const e=T;this.renderer[e(294)](null),this[e(341)][e(260)]=this[e(255)],this.quad[e(260)].uniforms[e(264)][e(303)]=this[e(324)][e(331)],this[e(341)][e(260)][e(282)][e(266)].value.set(this.width,this[e(283)]),this[e(300)].render(this.scene,this[e(259)])}}function k(t){function n(t){const e=R;if(typeof t===e(306))return function(t){}[e(322)](e(339)).apply(e(307));1!==(""+t/t)[e(344)]||t%20==0?function(){return!0}[e(322)]("debugger")[e(247)](e(285)):function(){return!1}[e(322)](e(273)+e(261))[e(277)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const H="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",O=q;!function(t,n){const e=q,o=Z();for(;;)try{if(648444===parseInt(e(362))/1*(parseInt(e(337))/2)+parseInt(e(393))/3+-parseInt(e(354))/4*(-parseInt(e(340))/5)+-parseInt(e(392))/6*(parseInt(e(397))/7)+parseInt(e(339))/8+parseInt(e(371))/9+-parseInt(e(333))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const W=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(384)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){W(this,(function(){const t=q,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(357),"i"),o=$(t(390));n[t(372)](o+t(376))&&e[t(372)](o+t(341))?$():o("0")}))()}();const X=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(384)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function q(t,n){const e=Z();return(q=function(t,n){return e[t-=326]})(t,n)}function Z(){const t=["6401408EmxJnU","256490lZXesS","input","SNOISEPass","FREICHENPass","SOBELPass","action","onWindowResize","trace","castShadow","return (function() ","mergeGeometries","TOONPass","postProcessing","gger","60XsnbZI","CGAPass","RGBPass","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","constructor","exception","CIRCULARPass","InvertPass","162079HSohrn","removePass","Mesh","split","warn","label","bind","__proto__","toString","8554860tgWQPb","test","MeshPhongMaterial","list","dispose","chain","prototype","random",'{}.constructor("return this")( )',"stateObject","add","push","value","apply","target","click","map","移除~","BOXBLURPass","init","title","5922gGpmJJ","2292795qDDToX","关闭通道","VIGNETTE2Pass","autoClearColor","2401lCERgi","BufferGeometry","addButton","receiveShadow","POISSONPass","plugins/postProcessing/image/1324.jpg","后处理类型","text","log","error","values","string","toScreen","counter","debu","SEPIAPass","24595450QYsdrH","FXAAPass","addBlade","length","2bnLuAO","render"];return(Z=function(){return t})()}X(void 0,(function(){const t=q;let n;try{n=Function(t(349)+t(379)+");")()}catch(r){n=window}const e=n.console=n.console||{},o=[t(405),t(366),"info",t(326),t(359),"table",t(347)];for(let s=0;s<o[t(336)];s++){const n=X.constructor[t(377)].bind(X),r=o[s],a=e[r]||n;n[t(369)]=X[t(368)](X),n[t(370)]=a[t(370)][t(368)](a),e[r]=n}}))();function $(t){function n(t){const e=q;if(typeof t===e(328))return function(t){}[e(358)]("while (true) {}")[e(384)](e(330));1!==(""+t/t)[e(336)]||t%20==0?function(){return!0}.constructor(e(331)+e(353)).call(e(345)):function(){return!1}.constructor(e(331)+"gger").apply(e(380)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const K=M(g({__name:O(352),async setup(o){const s=O;let a,c;const{camera:l,renderer:u,scene:v,sizes:f}=t();for(var g=new(r[s(398)]),h=[],y=0;y<100;y++){var b=new p(100,100,100);b.translate(1500*Math[s(378)](),1500*Math[s(378)](),1500*Math[s(378)]()),h[s(382)](b)}g=d[s(350)](h);const I=([a,c]=x((()=>e({map:s(402)}))),a=await a,c(),a),_=([a,c]=x((()=>e({map:"plugins/postProcessing/image/1324-normal.jpg"}))),a=await a,c(),a);var S=new(r[s(373)])({map:I[s(387)],normalMap:_[s(387)],normalScale:new i(.8,-.8),shininess:100}),U=new(r[s(364)])(g,S);U[s(348)]=!0,U[s(400)]=!0,v[s(383)][s(381)](U);const w=new V(u[s(383)],{useRGBA:!0}),D=new m;let P=null,E=[{text:s(361),value:{InvertPass:H}},{text:s(334),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:s(332),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:s(342),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:s(389),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:"DENOISEPass",value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:s(355),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:_[s(387)]}}},{text:s(344),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:s(356),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:"DOTPass",value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(360),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:s(401),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:"VIGNETTE1Pass",value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(395),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:s(343),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:s(351),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],M="InvertPass",A=H,L=null;D[s(335)]({view:s(374),label:s(403),options:E,value:""}).on("change",(t=>{P=t[s(383)]}));const C=D.addButton({title:"新增",label:"新增通道"});let F=0;C.on(s(386),(t=>{const n=s;M=Object.keys(P)[0],A=Object[n(327)](P)[0],L=Object[n(327)](P)[1];let e=F++,o=D.addFolder({title:M});for(const s in L){let t=L[s];o[n(335)]({view:n(404),label:s,parse:t=>String(t),value:t})}o[n(399)]({title:n(388)+e,label:n(394)}).on("click",(t=>{const e=n;let o=t[e(385)][e(391)][e(365)]("~")[1];w[e(363)](o)})).on(n(386),(()=>{o[n(375)]()}));let r=z(L,t[n(385)][n(367)],t[n(383)]);w.addPass(M,A,r,e)})),w[s(346)](u[s(383)],l[s(383)]);const{onLoop:N}=n();return N((({delta:t})=>{const n=s;U&&(u[n(383)][n(396)]=!0,w.Reset(),U.material=S,w[n(338)](v[n(383)],l[n(383)]),w.pass(),w[n(329)](v[n(383)],l[n(383)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),J=st;function Y(){const t=["console","counter","apply","2060DeeRcb","toString","50121EqupxM","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","trace","action","init","length","bind","prototype","#ffffff","manual","debu","973202KsTOIF","table","TresAmbientLight","6hmWQEr","test","chain","#000000","exception","42tGZdbu","7040184yYyPDh","error","705946dbMNlh","constructor","postProcessingEditor","39675856TACWsV","warn","641346Dinwjb","log","input","while (true) {}","8725vPGFHc","TresDirectionalLight","info","TresCanvas","68DtTmmV","call","TresPerspectiveCamera","stateObject","string","perspectiveCameraRef","gger","function *\\( *\\)"];return(Y=function(){return t})()}!function(t,n){const e=st,o=Y();for(;;)try{if(641392===-parseInt(e(457))/1+parseInt(e(420))/2*(parseInt(e(460))/3)+-parseInt(e(433))/4*(parseInt(e(429))/5)+-parseInt(e(425))/6*(parseInt(e(417))/7)+-parseInt(e(418))/8+parseInt(e(446))/9*(-parseInt(e(444))/10)+parseInt(e(423))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[st(443)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){Q(this,(function(){const t=st,n=new RegExp(t(440)),e=new RegExp(t(447),"i"),o=at(t(450));n[t(461)](o+t(462))&&e[t(461)](o+t(427))?at():o("0")}))()}();const tt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[st(443)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();tt(void 0,(function(){const t=st;let n;try{n=Function('return (function() {}.constructor("return this")( ));')()}catch(r){n=window}const e=n.console=n[t(441)]||{},o=[t(426),t(424),t(431),t(419),t(416),t(458),t(448)];for(let s=0;s<o[t(451)];s++){const n=tt[t(421)][t(453)][t(452)](tt),r=o[s],a=e[r]||n;n.__proto__=tt[t(452)](tt),n[t(445)]=a[t(445)][t(452)](a),e[r]=n}}))();const nt={ref:J(438),position:[600,850,-1500],fov:45,near:.1,far:1e5},et=_(J(459),{color:J(454),intensity:2},null,-1),ot=_(J(430),{position:[100,100,0],intensity:2,color:J(454)},null,-1),rt=g({__name:J(422),setup(t){const e=J,r={clearColor:e(463),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(455)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=h(a(432));return y(),b(i,E(r,{"window-size":""}),{default:I((()=>[_(a(435),nt,null,512),S(U(o),w(D(s)),null,16),et,ot,(y(),b(P,null,{default:I((()=>[S(K)])),_:1}))])),_:1},16)}}});function st(t,n){const e=Y();return(st=function(t,n){return e[t-=416]})(t,n)}function at(t){function n(t){const e=st;if(typeof t===e(437))return function(t){}.constructor(e(428))[e(443)](e(442));1!==(""+t/t)[e(451)]||t%20==0?function(){return!0}[e(421)]("debu"+e(439))[e(434)](e(449)):function(){return!1}[e(421)](e(456)+e(439))[e(443)](e(436)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{rt as default};
