import{m as t,e as n,b as e,U as o}from"./@tresjs.WiFlZbqU1734492426993.js";import{_ as r,V as s,t as a,n as i,bg as c,m as l,B as u,cz as v}from"./three.-W-Avfc61734492426993.js";import{P as f}from"./tweakpane.yHWGBmom1734492426993.js";import{d as p,a6 as m,e as d,o as g,f as x,g as h,J as y,j as I,u as b,aj as _,ak as S,al as U,m as w}from"./@vue.-THQH3GC1734492426993.js";import{_ as P}from"./@fesjs.-ojmPQ0_1734492426993.js";import"./@vueuse.HnQgsJ961734492426993.js";import"./vue-router.XKFr-7ni1734492426993.js";import"./lodash-es.kYt-_xTG1734492426993.js";import"./@qlin.yHhFDldE1734492426993.js";import"./pinia.21wZrGqi1734492426993.js";import"./vue-demi.C4xddsk91734492426993.js";import"./@floating-ui.BPbuo5Gx1734492426993.js";import"./@juggle.7yjBMqoW1734492426993.js";!function(t,n){const e=M,o=L();for(;;)try{if(730100===-parseInt(e(362))/1*(parseInt(e(348))/2)+parseInt(e(369))/3+parseInt(e(365))/4+-parseInt(e(377))/5*(parseInt(e(371))/6)+parseInt(e(352))/7+-parseInt(e(367))/8+parseInt(e(386))/9*(parseInt(e(370))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const D=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[M(376)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){D(this,(function(){const t=M,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(363),"i"),o=C(t(347));n.test(o+"chain")&&e[t(351)](o+t(389))?C():o("0")}))()}();const E=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[M(376)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();E(void 0,(function(){const t=M,n=function(){const t=M;let n;try{n=Function(t(346)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n.console=n.console||{},o=[t(345),t(358),"info",t(401),"exception",t(397),"trace"];for(let r=0;r<o.length;r++){const n=E.constructor[t(379)].bind(E),s=o[r],a=e[s]||n;n[t(375)]=E[t(373)](E),n.toString=a[t(372)][t(373)](a),e[s]=n}}))();function A(t,n,e){const o=M;if(typeof t!==o(392)||null===t)return t;const r=Array[o(366)](t)?[]:{};for(const s in t)t[o(355)](s)&&(r[s]=A(t[s])),s==n&&(r[n]=e);return r}function M(t,n){const e=L();return(M=function(t,n){return e[t-=340]})(t,n)}function L(){const t=["apply","5pVTuxI",'Shader "',"prototype","now","onload","stateObject","Texture","Vector4","lastIndex","9kHuWPr","value","WagnerLoadShaderException","input","action","type","object","length","constructor","Vector2","counter","table","onerror","gger","onabort","error","debu","random","Matrix3","replace","responseText","log","return (function() ","init","5732iIRqqN","exec","index","test","3048066QnxPet","while (true) {}","message","hasOwnProperty","Vector3","string","warn","v3v","Matrix4","name","22bmPyyY","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","call","4599580dlOlkF","isArray","7951328vMCrpT","ShaderMaterial","1888143PDNDLv","10180330PGEbuf","8674074KzuWja","toString","bind","Matrix2","__proto__"];return(L=function(){return t})()}function C(t){function n(t){const e=M;if(typeof t===e(357))return function(t){}[e(394)](e(353))[e(376)](e(396));1!==(""+t/t)[e(393)]||t%20==0?function(){return!0}[e(394)](e(340)+"gger")[e(364)](e(390)):function(){return!1}.constructor(e(340)+e(399))[e(376)](e(382)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const F=T;!function(t,n){const e=T,o=R();for(;;)try{if(388117===parseInt(e(296))/1*(-parseInt(e(263))/2)+parseInt(e(277))/3+-parseInt(e(252))/4*(-parseInt(e(288))/5)+parseInt(e(233))/6+parseInt(e(231))/7*(parseInt(e(254))/8)+-parseInt(e(312))/9+-parseInt(e(274))/10*(parseInt(e(262))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[T(249)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function T(t,n){const e=R();return(T=function(t,n){return e[t-=216]})(t,n)}!function(){z(this,(function(){const t=T,n=new RegExp(t(283)),e=new RegExp(t(268),"i"),o=B(t(309));n[t(300)](o+t(290))&&e[t(300)](o+t(314))?B():o("0")}))()}();const N=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[T(249)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function R(){const t=["RGBFormat","6683391XmmSca","setRenderTarget","input","toScreen","uuid","front","far","error","set","time","clone","back","camera","material","debu","projectionMatrix","uniforms","write","Pass","push","while (true) {}","add","bind","exception","5090652eCcJIY","resolution","25020RpdQXf","texture","loadShadervf","RGBAFormat","makeOrthographic","params","wrapS","render","LinearFilter","table","near","length","shader","type","Mesh","innerHeight","apply","innerWidth","console","113612IYxqIb","__proto__","8srIiuf","wrapT","now","renderer","Stack","value","swapBuffers","copyPass","535051ZbTwnB","3794grPLBA","scale","OrthographicCamera","tInput","getOfflineTexture","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","constructor","scene","MeshBasicMaterial","CopyPass","call","10ZWHdSN","removePass","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","2157822kcEoGs","gger","info","trace","warn","prototype","function *\\( *\\)","setSize","stateObject","toString","quad","5tTCmWp","passItems","chain","pass","settings","minFilter","startTime","height","158roLcVe","log","ClampToEdgeWrapping","useRGBA","test","WebGLRenderTarget","Scene","magFilter","return (function() ","width","stencilBuffer","UnsignedByteType","read","init","onWindowResize"];return(R=function(){return t})()}N(void 0,(function(){const t=T,n=function(){const t=T;let n;try{n=Function(t(304)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(251)]=n[t(251)]||{},o=["log",t(281),t(279),t(319),t(230),t(242),t(280)];for(let r=0;r<o[t(244)];r++){const n=N[t(269)][t(282)][t(229)](N),s=o[r],a=e[s]||n;n[t(253)]=N[t(229)](N),n[t(286)]=a[t(286)][t(229)](a),e[s]=n}}))();class G{constructor(t,n){const e=T;this.width=1,this[e(295)]=1,this.settings=n||{},this[e(299)]=this[e(292)][e(299)]||!1,this[e(257)]=t,this[e(261)]=this[e(272)](this[e(292)]),this[e(270)]=new(r[e(302)]),this[e(287)]=new(r[e(247)])(new a(1,1),new(r[e(271)])),this[e(270)][e(228)](this[e(287)]),this.camera=new(r[e(265)])(1,1,1,1,-1e4,1e4),this.front=new(r[e(301)])(1,1,{minFilter:void 0!==this[e(292)][e(293)]?this[e(292)][e(293)]:r[e(241)],magFilter:void 0!==this.settings[e(303)]?this[e(292)][e(303)]:i,wrapS:void 0!==this.settings[e(239)]?this[e(292)].wrapS:r[e(298)],wrapT:void 0!==this[e(292)].wrapT?this[e(292)][e(255)]:c,format:this[e(299)]?r[e(236)]:r[e(311)],type:void 0!==this[e(292)][e(246)]?this[e(292)][e(246)]:r[e(307)],stencilBuffer:void 0===this[e(292)][e(306)]||this[e(292)][e(306)]}),this[e(218)]=this[e(317)][e(217)](),this[e(294)]=Date[e(256)](),this.passes={},this[e(258)]={passItems:[],passes:[]}}addPass(t,n,e,o){const r=T;this[r(235)](n);const s={shaderName:t,params:e,uuid:o,shader:this.shader};this[r(258)].passItems[r(226)](s)}[F(275)](t){const n=F;for(let e=this[n(258)].passItems[n(244)]-1;e>=0;e--)this[n(258)][n(289)][e][n(316)]===parseInt(t)&&this.Stack[n(289)].splice(e,1);console[n(297)](this[n(258)][n(289)])}CopyPass(){const t=F;this[t(225)][t(273)](this);return this[t(235)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[F(235)](t){const n=F,e=n(276);return this.shader=function(t,n){const e=M,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,a=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,i={sampler2D:{type:"t",value:()=>new(r[M(383)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[M(395)])},vec3:{type:"v3",value:()=>new(r[M(356)])},vec4:{type:"v4",value:()=>new(r[M(384)])},bvec2:{type:"v2",value:()=>new(r[M(395)])},bvec3:{type:"v3",value:()=>new(r[M(356)])},bvec4:{type:"v4",value:()=>new(r[M(384)])},ivec2:{type:"v2",value:()=>new(r[M(395)])},ivec3:{type:"v3",value:()=>new s},ivec4:{type:"v4",value:()=>new(r[M(384)])},mat2:{type:"v2",value:()=>new(r[M(374)])},mat3:{type:"v3",value:()=>new(r[M(342)])},mat4:{type:"v4",value:()=>new(r[M(360)])}},c={float:{type:"fv",value:()=>[]},vec3:{type:e(359),value:()=>[]}};let l;const u={resolution:{type:"v2",value:new(r[e(395)])(1,1),default:!0},time:{type:"f",value:Date[e(380)](),default:!0},tInput:{type:"t",value:new(r[e(383)]),default:!0}};let v,f;for(;null!==(l=o[e(349)](n));)l.index===o[e(385)]&&o[e(385)]++,v=l[1],f=l[2],u[f]={type:i[v].type,value:i[v][e(387)]()};for(;null!==(l=a[e(349)](n));)l[e(350)]===o.lastIndex&&o[e(385)]++,v=l[1],f=l[2],l[3],u[f]={type:c[v][e(391)],value:c[v][e(387)]()};return new(r[e(368)])({uniforms:u,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(245)]}[F(225)](t){const n=F;this[n(245)]=null,this[n(238)]={}}Reset(){const t=F;this[t(308)]=this[t(317)],this[t(224)]=this[t(218)]}[F(310)](t,n){const e=F,o=window[e(250)],r=window[e(248)];t[e(284)](1*o,1*r),n[e(222)].makePerspective(70,o/r,n[e(243)],n[e(318)]),this[e(284)](o,r);return this[e(267)](o,r,!0)}[F(284)](t,n){const e=F;this.width=t,this[e(295)]=n,this[e(219)][e(222)][e(237)](t/-2,t/2,n/2,n/-2,this.camera.near,this[e(219)][e(318)]),this[e(287)][e(264)].set(t,n,1),this[e(317)][e(284)](t,n),this[e(218)][e(284)](t,n)}[F(267)](t,n,e){const o=F;return new(r[o(301)])(t,n,{minFilter:r[o(241)],magFilter:i,format:e?r[o(236)]:r[o(311)]})}[F(240)](t,n,e,o){const r=F;this[r(257)].setRenderTarget(this[r(224)]),this.renderer[r(240)](t,n),o||this.swapBuffers()}[F(260)](){const t=F,n=this.write;this[t(224)]=this[t(308)],this[t(308)]=n}[F(291)](){const t=F;for(let n=0;n<this[t(258)].passItems.length;n++){const e=this[t(258)][t(289)][n][t(245)],o=this[t(258)][t(289)][n][t(238)];if(this[t(257)][t(313)](this[t(224)]),e instanceof l){this[t(287)][t(220)]=e,this[t(287)][t(220)][t(223)][t(266)].value=this[t(308)][t(234)],this.quad[t(220)][t(223)][t(232)].value[t(320)](this[t(305)],this[t(295)]),this[t(287)][t(220)][t(223)][t(216)].value=.001*(Date[t(256)]()-this.startTime);for(const n in o)this.quad[t(220)][t(223)][n].value=o[n];this[t(257)].render(this.scene,this[t(219)]),this[t(260)]()}}}[F(315)](t,n){const e=F;this[e(257)].setRenderTarget(null),this[e(287)][e(220)]=this.copyPass,this.quad.material[e(223)][e(266)][e(259)]=this[e(308)].texture,this[e(287)][e(220)].uniforms[e(232)][e(259)].set(this[e(305)],this.height),this[e(257)][e(240)](this[e(270)],this[e(219)])}}function B(t){function n(t){const e=T;if("string"==typeof t)return function(t){}.constructor(e(227))[e(249)]("counter");1!==(""+t/t).length||t%20==0?function(){return!0}[e(269)](e(221)+e(278))[e(273)]("action"):function(){return!1}[e(269)](e(221)+"gger")[e(249)](e(285)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const j="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",O=k;!function(t,n){const e=k,o=W();for(;;)try{if(965910===-parseInt(e(233))/1*(-parseInt(e(217))/2)+parseInt(e(241))/3*(parseInt(e(216))/4)+-parseInt(e(196))/5*(parseInt(e(207))/6)+parseInt(e(235))/7+parseInt(e(210))/8+-parseInt(e(229))/9*(-parseInt(e(223))/10)+-parseInt(e(212))/11*(parseInt(e(203))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const V=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[k(215)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){V(this,(function(){const t=k,n=new RegExp(t(185)),e=new RegExp(t(202),"i"),o=X("init");n.test(o+"chain")&&e[t(256)](o+t(249))?X():o("0")}))()}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function k(t,n){const e=W();return(k=function(t,n){return e[t-=175]})(t,n)}function W(){const t=["input","keys","toScreen","BoxGeometry","onWindowResize","stateObject","DENOISEPass","test","title","random","label","FREICHENPass","__proto__","RGBPass","Mesh","MeshPhongMaterial","map","CGAPass","function *\\( *\\)","addBlade","postProcessing","table","addFolder","action","toString","constructor","POISSONPass","receiveShadow","warn","170FMHkCh","list","log","gger","exception","InvertPass","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","18156ntHtIx","values","dispose","mergeGeometries","69396tMEZUR","target","console","647104TZnOnZ","新增通道","12727GZgzYm","material","addButton","apply","1811476hbWYVC","2OpEwuq","TOONPass","removePass","add","length","split","10CBemtc","prototype","push","click","error","string","9463932CvzFxB","trace","value","return (function() ","757991UUAvIB","debu","5364793gFRxUO","text","Vector2","SNOISEPass","SEPIAPass","后处理类型","3pAcubi","addPass","while (true) {}","关闭通道","Reset","FXAAPass","移除~","bind"];return(W=function(){return t})()}H(void 0,(function(){const t=k;let n;try{n=Function(t(232)+'{}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(209)]=n[t(209)]||{},o=[t(198),t(195),"info",t(227),t(200),t(188),t(230)];for(let s=0;s<o[t(221)];s++){const n=H[t(192)][t(224)].bind(H),r=o[s],a=e[r]||n;n[t(179)]=H[t(248)](H),n[t(191)]=a[t(191)][t(248)](a),e[r]=n}}))();function X(t){function n(t){const e=k;if(typeof t===e(228))return function(t){}.constructor(e(243))[e(215)]("counter");1!==(""+t/t)[e(221)]||t%20==0?function(){return!0}[e(192)]("debu"+e(199)).call(e(190)):function(){return!1}[e(192)](e(234)+e(199))[e(215)](e(254)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const q=P(p({__name:O(187),async setup(o){const s=O;let a,i;const{camera:c,renderer:l,scene:p,sizes:d}=t();for(var g=new u,x=[],h=0;h<100;h++){var y=new(r[s(252)])(100,100,100);y.translate(1500*Math.random(),1500*Math[s(176)](),1500*Math[s(176)]()),x[s(225)](y)}g=v[s(206)](x);const I=([a,i]=m((()=>e({map:"plugins/postProcessing/image/1324.jpg"}))),a=await a,i(),a),b=([a,i]=m((()=>e({map:"plugins/postProcessing/image/1324-normal.jpg"}))),a=await a,i(),a);var _=new(r[s(182)])({map:I.map,normalMap:b.map,normalScale:new(r[s(237)])(.8,-.8),shininess:100}),S=new(r[s(181)])(g,_);S.castShadow=!0,S[s(194)]=!0,p[s(231)][s(220)](S);const U=new G(l.value,{useRGBA:!0}),w=new f;let P=null,D=[{text:"InvertPass",value:{InvertPass:j}},{text:s(246),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:s(239),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:s(238),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:"BOXBLURPass",value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:s(255),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:s(184),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:b[s(183)]}}},{text:"SOBELPass",value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:s(180),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:"DOTPass",value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:"CIRCULARPass",value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:s(193),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:"VIGNETTE1Pass",value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:"VIGNETTE2Pass",value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:s(178),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:s(218),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],E=s(201),M=j,L=null;w[s(186)]({view:s(197),label:s(240),options:D,value:""}).on("change",(t=>{P=t.value}));const C=w[s(214)]({title:"新增",label:s(211)});let F=0;C.on(s(226),(t=>{const n=s;E=Object[n(250)](P)[0],M=Object[n(204)](P)[0],L=Object[n(204)](P)[1];let e=F++,o=w[n(189)]({title:E});for(const s in L){let t=L[s];o[n(186)]({view:n(236),label:s,parse:t=>String(t),value:t})}o[n(214)]({title:n(247)+e,label:n(244)}).on(n(226),(t=>{const e=n;let o=t[e(208)][e(175)][e(222)]("~")[1];U[e(219)](o)})).on(n(226),(()=>{o[n(205)]()}));let r=A(L,t[n(208)][n(177)],t[n(231)]);U[n(242)](E,M,r,e)})),U[s(253)](l.value,c[s(231)]);const{onLoop:z}=n();return z((({delta:t})=>{const n=s;S&&(l[n(231)].autoClearColor=!0,U[n(245)](),S[n(213)]=_,U.render(p.value,c[n(231)]),U.pass(),U[n(251)](p[n(231)],c[n(231)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]);!function(t,n){const e=$,o=J();for(;;)try{if(644366===-parseInt(e(229))/1+-parseInt(e(219))/2+parseInt(e(217))/3+parseInt(e(198))/4*(parseInt(e(203))/5)+-parseInt(e(228))/6+-parseInt(e(197))/7*(parseInt(e(208))/8)+parseInt(e(196))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function $(t,n){const e=J();return($=function(t,n){return e[t-=193]})(t,n)}!function(){Z(this,(function(){const t=$,n=new RegExp(t(227)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=tt("init");n[t(206)](o+"chain")&&e[t(206)](o+"input")?tt():o("0")}))()}();const Y=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function J(){const t=["log","prototype","#ffffff","15832602HTnfMs","7EZvHHx","8kQqGRc","gger","action","apply","TresDirectionalLight","2663405eXPNYd",'{}.constructor("return this")( )',"constructor","test","error","9373704FdkuAy","while (true) {}","TresPerspectiveCamera","counter","table","stateObject","call","return (function() ","toString","1330080oGbuuA","manual","580600SuODNn","console","trace","exception","length","bind","debu","#000000","function *\\( *\\)","3761628KeLece","534583fySJNr"];return(J=function(){return t})()}Y(void 0,(function(){const t=$,n=function(){const t=$;let n;try{n=Function(t(215)+t(204)+");")()}catch(e){n=window}return n}(),e=n[t(220)]=n.console||{},o=[t(193),"warn","info",t(207),t(222),t(212),t(221)];for(let r=0;r<o[t(223)];r++){const n=Y[t(205)][t(194)].bind(Y),s=o[r],a=e[s]||n;n.__proto__=Y[t(224)](Y),n.toString=a[t(216)][t(224)](a),e[s]=n}}))();const Q={ref:"perspectiveCameraRef",position:[600,850,-1500],fov:45,near:.1,far:1e5},K=p({__name:"postProcessingEditor",setup(t){const e=$,r={clearColor:e(226),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(218)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=d("TresCanvas");return g(),x(i,w(r,{"window-size":""}),{default:h((()=>[y(a(210),Q,null,512),I(b(o),_(S(s)),null,16),n[0]||(n[0]=y("TresAmbientLight",{color:a(195),intensity:2},null,-1)),n[1]||(n[1]=y(a(202),{position:[100,100,0],intensity:2,color:a(195)},null,-1)),(g(),x(U,null,{default:h((()=>[I(q)])),_:1}))])),_:1},16)}}});function tt(t){function n(t){const e=$;if("string"==typeof t)return function(t){}[e(205)](e(209))[e(201)](e(211));1!==(""+t/t)[e(223)]||t%20==0?function(){return!0}[e(205)](e(225)+"gger")[e(214)](e(200)):function(){return!1}[e(205)](e(225)+e(199))[e(201)](e(213)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{K as default};
