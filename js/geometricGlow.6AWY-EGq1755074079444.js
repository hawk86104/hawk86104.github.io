import{a as e}from"./@tresjs.B1VqNfqw1755074079444.js";import{P as o}from"./tweakpane.C0HtAJSg1755074079444.js";import{d as r,w as t,G as i,o as n,I as a,m as l,u as s,r as m,h as u,e as c,f as d,j as v}from"./@vue.BzMISRrV1755074079444.js";import{V as f,C as g,bL as p,a9 as w,cB as C}from"./three.QlBabAUP1755074079444.js";import"./postprocessing.D49g_X_Q1755074079444.js";import"./@vueuse.C47q1p2Z1755074079444.js";function y(e,o){if(!e.isBufferGeometry)return void console.error("The geometry must be a BufferGeometry.");e.attributes.normal||e.computeVertexNormals();const r=e.attributes.position,t=e.attributes.normal,i=r.array,n=t.array;for(let a=0;a<r.count;a++){const e=3*a;i[e]+=n[e]*o,i[e+1]+=n[e+1]*o,i[e+2]+=n[e+2]*o}r.needsUpdate=!0}var x="varying vec3 vVertexWorldPosition;\nvarying vec3 vVertexNormal;\nvarying vec4 vFragColor;\nvoid main() {\n  vVertexNormal = normalize(normalMatrix * normal);\n  vVertexWorldPosition = (modelMatrix * vec4(position, 1.0)).xyz;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}",h="uniform vec3 glowColor;\nuniform float coeficient;\nuniform float power;\nvarying vec3 vVertexNormal;\nvarying vec3 vVertexWorldPosition;\nvarying vec4 vFragColor;\nvoid main() {\n  vec3 worldCameraToVertex = vVertexWorldPosition - cameraPosition;\n  vec3 viewCameraToVertex = (viewMatrix * vec4(worldCameraToVertex, 0.0)).xyz;\n  viewCameraToVertex = normalize(viewCameraToVertex);\n  float intensity =\n      pow(coeficient + dot(vVertexNormal, viewCameraToVertex), power);\n  gl_FragColor = vec4(glowColor, intensity);\n}";const M=["geometry"],T=["blending","side"],V=["geometry"],P=["blending","side"],b=r({__name:"geometricGlowMesh",props:{geometry:Object,inColor:{default:"hotpink"},outColor:{default:"hotpink"},inPower:{default:1.4},outPower:{default:1.2},inCoeficient:{default:1.1},outCoeficient:{default:.1}},setup(e){const o=e,r=o.geometry.clone();y(r,.01);const m=o.geometry.clone();y(m,.2);const u={uniforms:{coeficient:{value:o.inCoeficient},power:{value:o.inPower},glowColor:{value:new g(o.inColor)},viewVector:{value:new f(0,0,1)}},vertexShader:x,fragmentShader:h},c={uniforms:{coeficient:{value:o.outCoeficient},power:{value:o.outPower},glowColor:{value:new g(o.outColor)},viewVector:{value:new f(0,0,1)}},vertexShader:x,fragmentShader:h};return t((()=>[o.inColor,o.outColor]),(([e,o])=>{u.uniforms.glowColor.value.set(e),c.uniforms.glowColor.value.set(o)})),t((()=>[o.inPower,o.outPower,o.inCoeficient,o.outCoeficient]),(([e,o,r,t])=>{u.uniforms.power.value=e,c.uniforms.power.value=o,u.uniforms.coeficient.value=r,c.uniforms.coeficient.value=t})),(e,o)=>(n(),i("TresGroup",null,[a("TresMesh",{geometry:s(r)},[a("TresShaderMaterial",l(u,{blending:p,transparent:"",depthWrite:!1,side:void 0}),null,16,T)],8,M),a("TresMesh",{geometry:s(m),visible:!0},[a("TresShaderMaterial",l(c,{blending:p,transparent:"",depthWrite:!1,side:w}),null,16,P)],8,V)]))}}),B=["geometry"],j=["geometry"],G=["geometry"],N=["geometry"],_=["geometry"],S=r({__name:"geometricGlow",setup(r){const t=new C(.75,.25,64),i=t.clone();y(i,-.1);const f=t.clone();y(f,.1);const g=m({inColor:"#0078ff",outColor:"#ff00ba",inPower:1.4,outPower:1.2,inCoeficient:1.1,outCoeficient:.1}),p=new o;return p.addBinding(g,"inColor",{label:"内发光色"}),p.addBinding(g,"inPower",{label:"内发光强度",step:.01,min:0,max:4}),p.addBinding(g,"inCoeficient",{step:.01,min:0,max:4}),p.addBinding(g,"outColor",{label:"外发光色"}),p.addBinding(g,"outPower",{label:"外发光强度",step:.01,min:0,max:6}),p.addBinding(g,"outCoeficient",{step:.01,min:0,max:4}),(o,r)=>{const m=u("TresCanvas");return n(),c(m,{"window-size":"",clearColor:"#333333"},{default:d((()=>[r[5]||(r[5]=a("TresPerspectiveCamera",{position:[5,5,5]},null,-1)),v(s(e)),a("TresMesh",{position:[0,1,-4],geometry:s(t)},[r[1]||(r[1]=a("TresMeshNormalMaterial",{transparent:"",opacity:.8},null,-1)),a("TresMesh",{geometry:s(i)},r[0]||(r[0]=[a("TresMeshBasicMaterial",{wireframe:"",color:"#000"},null,-1)]),8,j)],8,B),a("TresMesh",{position:[0,1,4],geometry:s(t)},[r[3]||(r[3]=a("TresMeshNormalMaterial",{transparent:"",opacity:.9},null,-1)),a("TresMesh",{geometry:s(f)},r[2]||(r[2]=[a("TresMeshBasicMaterial",{wireframe:"",color:"#000"},null,-1)]),8,N)],8,G),a("TresMesh",{position:[0,1,0],geometry:s(t),renderOrder:1},[r[4]||(r[4]=a("TresMeshBasicMaterial",{color:"gray"},null,-1)),v(b,l({geometry:s(t)},g),null,16,["geometry"])],8,_),r[6]||(r[6]=a("TresGridHelper",{args:[10,10]},null,-1))])),_:1})}}});export{S as default};
