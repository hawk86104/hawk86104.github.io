import{p as t,U as n,z as e,Y as o}from"./@tresjs.Mu0zjs701726563592429.js";import{_ as r,Y as s,m as a,k as i,at as c,cO as l,i as u,W as v,n as f,cP as p,cr as m}from"./three.ZWd_rX7H1726563592429.js";import{P as d}from"./tweakpane.yHWGBmom1726563592429.js";import{d as g,a4 as x,e as h,o as y,f as I,g as b,L as _,j as S,u as U,aj as w,ak as P,al as D,m as E}from"./@vue.bvMz0l_u1726563592429.js";import{_ as M}from"./@fesjs.Kb69K-9r1726563592429.js";import"./@vueuse.a2m4N83v1726563592429.js";import"./vue-router.69lN8_NV1726563592429.js";import"./lodash-es.guXTxyfJ1726563592429.js";import"./@qlin.yHhFDldE1726563592429.js";import"./pinia.DLSH1Ooz1726563592429.js";import"./@floating-ui.BPbuo5Gx1726563592429.js";import"./@juggle.7yjBMqoW1726563592429.js";!function(t,n){const e=C,o=A();for(;;)try{if(208833===-parseInt(e(398))/1*(-parseInt(e(420))/2)+-parseInt(e(377))/3*(parseInt(e(397))/4)+parseInt(e(383))/5*(parseInt(e(392))/6)+-parseInt(e(374))/7+-parseInt(e(390))/8*(parseInt(e(363))/9)+-parseInt(e(375))/10+-parseInt(e(368))/11*(-parseInt(e(367))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(370)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function A(){const t=["length","get","info","call","trace","debu","counter","bind","668ADzMbB","error","lastIndex","Texture","input","log","name","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","21537QZUSNM","stateObject","exec","warn","5718660FrnpmR","11sVOcIV",'Shader "',"apply","return (function() ","Vector2","type","339997fhXVhB","2488110bIFiSI","function *\\( *\\)","319119nclZxf","Matrix4","string",'{}.constructor("return this")( )',"now","onload","5anDWKy","v3v","WagnerLoadShaderException","toString","send","exception","onabort","1384LaWFFC","random","2246994xwvINv","__proto__","onerror","open","Vector3","8bjaNYq","844hLXNCG","action","console","constructor","hasOwnProperty","chain","gger","prototype","responseText","table","message","index","test","Vector4"];return(A=function(){return t})()}!function(){L(this,(function(){const t=C,n=new RegExp(t(376)),e=new RegExp(t(362),"i"),o=N("init");n[t(410)](o+t(403))&&e.test(o+t(359))?N():o("0")}))()}();const F=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(370)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function C(t,n){const e=A();return(C=function(t,n){return e[t-=356]})(t,n)}F(void 0,(function(){const t=C;let n;try{n=Function(t(371)+t(380)+");")()}catch(r){n=window}const e=n[t(400)]=n[t(400)]||{},o=[t(360),t(366),t(414),t(356),t(388),t(407),t(416)];for(let s=0;s<o[t(412)];s++){const n=F[t(401)][t(405)][t(419)](F),r=o[s],a=e[r]||n;n[t(393)]=F[t(419)](F),n[t(386)]=a.toString[t(419)](a),e[r]=n}}))();function z(t,n,e){const o=C;if("object"!=typeof t||null===t)return t;const r=Array.isArray(t)?[]:{};for(const s in t)t[o(402)](s)&&(r[s]=z(t[s])),s==n&&(r[n]=e);return r}function N(t){function n(t){const e=C;if(typeof t===e(379))return function(t){}.constructor("while (true) {}")[e(370)](e(418));1!==(""+t/t)[e(412)]||t%20==0?function(){return!0}[e(401)](e(417)+e(404))[e(415)](e(399)):function(){return!1}[e(401)](e(417)+e(404)).apply(e(364)),n(++t)}try{if(t)return n;n(0)}catch(e){}}function T(t,n){const e=O();return(T=function(t,n){return e[t-=270]})(t,n)}const G=T;!function(t,n){const e=T,o=O();for(;;)try{if(897697===-parseInt(e(312))/1+parseInt(e(355))/2*(-parseInt(e(326))/3)+parseInt(e(328))/4*(-parseInt(e(331))/5)+-parseInt(e(314))/6*(-parseInt(e(285))/7)+-parseInt(e(303))/8*(parseInt(e(280))/9)+parseInt(e(313))/10*(-parseInt(e(304))/11)+parseInt(e(277))/12*(parseInt(e(318))/13))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[T(327)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){B(this,(function(){const t=T,n=new RegExp("function *\\( *\\)"),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=j(t(317));n[t(364)](o+"chain")&&e[t(364)](o+t(371))?j():o("0")}))()}();const R=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[T(327)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();R(void 0,(function(){const t=T,n=function(){const t=T;let n;try{n=Function(t(299)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(308)]=n[t(308)]||{},o=[t(344),t(273),t(368),t(284),t(367),t(358),t(279)];for(let r=0;r<o[t(369)];r++){const n=R.constructor[t(361)][t(325)](R),s=o[r],a=e[s]||n;n[t(354)]=R.bind(R),n[t(311)]=a[t(311)][t(325)](a),e[s]=n}}))();class V{constructor(t,n){const e=T;this[e(287)]=1,this[e(292)]=1,this[e(335)]=n||{},this[e(324)]=this[e(335)][e(324)]||!1,this.renderer=t,this.copyPass=this.CopyPass(this[e(335)]),this[e(340)]=new(r[e(315)]),this[e(330)]=new(r[e(307)])(new(r[e(346)])(1,1),new(r[e(322)])),this.scene[e(332)](this[e(330)]),this[e(321)]=new(r[e(297)])(1,1,1,1,-1e4,1e4),this[e(316)]=new v(1,1,{minFilter:void 0!==this[e(335)][e(300)]?this[e(335)][e(300)]:r[e(272)],magFilter:void 0!==this[e(335)][e(350)]?this.settings.magFilter:f,wrapS:void 0!==this.settings[e(334)]?this[e(335)].wrapS:r[e(374)],wrapT:void 0!==this[e(335)][e(356)]?this[e(335)].wrapT:r[e(374)],format:this[e(324)]?r[e(347)]:p,type:void 0!==this.settings.type?this[e(335)][e(281)]:r[e(302)],stencilBuffer:void 0===this[e(335)][e(276)]||this[e(335)][e(276)]}),this[e(357)]=this[e(316)][e(289)](),this[e(360)]=Date[e(362)](),this.passes={},this[e(363)]={passItems:[],passes:[]}}[G(286)](t,n,e,o){const r=G;this.loadShadervf(n);const s={shaderName:t,params:e,uuid:o,shader:this[r(359)]};this[r(363)][r(337)][r(323)](s)}[G(336)](t){const n=G;for(let e=this[n(363)][n(337)][n(369)]-1;e>=0;e--)this[n(363)][n(337)][e][n(348)]===parseInt(t)&&this.Stack[n(337)][n(349)](e,1);console[n(344)](this.Stack[n(337)])}[G(339)](){const t=G;this[t(345)].call(this);return this[t(298)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[G(298)](t){const n=G,e=n(352);return this[n(359)]=function(t,n){const e=C,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,v=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,f={sampler2D:{type:"t",value:()=>new(r[C(358)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[C(372)])},vec3:{type:"v3",value:()=>new(r[C(396)])},vec4:{type:"v4",value:()=>new(r[C(411)])},bvec2:{type:"v2",value:()=>new(r[C(372)])},bvec3:{type:"v3",value:()=>new(r[C(396)])},bvec4:{type:"v4",value:()=>new(r[C(411)])},ivec2:{type:"v2",value:()=>new i},ivec3:{type:"v3",value:()=>new(r[C(396)])},ivec4:{type:"v4",value:()=>new c},mat2:{type:"v2",value:()=>new l},mat3:{type:"v3",value:()=>new u},mat4:{type:"v4",value:()=>new(r[C(378)])}},p={float:{type:"fv",value:()=>[]},vec3:{type:e(384),value:()=>[]}};let m;const d={resolution:{type:"v2",value:new(r[e(372)])(1,1),default:!0},time:{type:"f",value:Date[e(381)](),default:!0},tInput:{type:"t",value:new s,default:!0}};let g,x;for(;null!==(m=o[e(365)](n));)m[e(409)]===o.lastIndex&&o[e(357)]++,g=m[1],x=m[2],d[x]={type:f[g][e(373)],value:f[g].value()};for(;null!==(m=v[e(365)](n));)m[e(409)]===o[e(357)]&&o[e(357)]++,g=m[1],x=m[2],m[3],d[x]={type:p[g][e(373)],value:p[g].value()};return new a({uniforms:d,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(359)]}[G(345)](t){const n=G;this[n(359)]=null,this[n(353)]={}}[G(293)](){const t=G;this[t(301)]=this[t(316)],this[t(288)]=this[t(357)]}[G(310)](t,n){const e=G,o=window[e(319)],r=window.innerHeight;t[e(294)](1*o,1*r),n[e(333)][e(309)](70,o/r,n[e(271)],n[e(372)]),this[e(294)](o,r);return this[e(305)](o,r,!0)}[G(294)](t,n){const e=G;this.width=t,this[e(292)]=n,this[e(321)][e(333)].makeOrthographic(t/-2,t/2,n/2,n/-2,this[e(321)].near,this.camera[e(372)]),this[e(330)][e(291)].set(t,n,1),this[e(316)][e(294)](t,n),this.back[e(294)](t,n)}[G(305)](t,n,e){const o=G;return new v(t,n,{minFilter:f,magFilter:f,format:e?r[o(347)]:r[o(338)]})}[G(282)](t,n,e,o){const r=G;this[r(329)][r(306)](this[r(288)]),this[r(329)][r(282)](t,n),o||this[r(343)]()}[G(343)](){const t=G,n=this[t(288)];this[t(288)]=this[t(301)],this[t(301)]=n}[G(278)](){const t=G;for(let n=0;n<this[t(363)].passItems[t(369)];n++){const e=this[t(363)][t(337)][n][t(359)],o=this.Stack[t(337)][n].params;if(this[t(329)][t(306)](this[t(288)]),e instanceof a){this[t(330)][t(320)]=e,this[t(330)][t(320)].uniforms[t(270)][t(283)]=this.read[t(351)],this[t(330)][t(320)][t(290)][t(370)].value[t(365)](this[t(287)],this[t(292)]),this[t(330)][t(320)][t(290)].time[t(283)]=.001*(Date.now()-this.startTime);for(const n in o)this[t(330)][t(320)].uniforms[n][t(283)]=o[n];this[t(329)][t(282)](this[t(340)],this[t(321)]),this[t(343)]()}}}[G(295)](t,n){const e=G;this[e(329)][e(306)](null),this[e(330)].material=this[e(373)],this[e(330)][e(320)][e(290)][e(270)].value=this[e(301)].texture,this.quad.material[e(290)][e(370)][e(283)][e(365)](this[e(287)],this.height),this[e(329)][e(282)](this[e(340)],this[e(321)])}}function j(t){function n(t){const e=T;if("string"==typeof t)return function(t){}[e(342)](e(275))[e(327)](e(341));1!==(""+t/t)[e(369)]||t%20==0?function(){return!0}.constructor(e(274)+e(296)).call(e(366)):function(){return!1}[e(342)](e(274)+e(296))[e(327)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}function O(){const t=["init","1296802DBtEGw","innerWidth","material","camera","MeshBasicMaterial","push","useRGBA","bind","1341gPrafa","apply","107492lfFXdT","renderer","quad","85epCrMc","add","projectionMatrix","wrapS","settings","removePass","passItems","RGBFormat","CopyPass","scene","counter","constructor","swapBuffers","log","Pass","PlaneGeometry","RGBAFormat","uuid","splice","magFilter","texture","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","params","__proto__","5036MUQijO","wrapT","back","table","shader","startTime","prototype","now","Stack","test","set","action","exception","info","length","resolution","input","far","copyPass","ClampToEdgeWrapping","tInput","near","LinearFilter","warn","debu","while (true) {}","stencilBuffer","444ttFTps","pass","trace","366741CkJrgC","type","render","value","error","7evtqoT","addPass","width","write","clone","uniforms","scale","height","Reset","setSize","toScreen","gger","OrthographicCamera","loadShadervf","return (function() ","minFilter","read","UnsignedByteType","304UtTuCI","4532077trEHFJ","getOfflineTexture","setRenderTarget","Mesh","console","makePerspective","onWindowResize","toString","428898hzxGgx","10XFlSkA","7071318uVUwyr","Scene","front"];return(O=function(){return t})()}const k="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}";function H(){const t=["chain","push","1122056rYlGQA","keys","receiveShadow","action","bind","castShadow","table","addPass","addFolder","2577996GOLMLI","split","DOTPass","5PuuKes","gger","2089381trqwkM","BufferGeometry","新增通道","299598nrPMsV","length","text","CGAPass","移除~","1118565ZVLMzf","counter","addBlade","input","trace","target","values","2280141DpPAJP","random","change","POISSONPass","MeshPhongMaterial","prototype","map","FREICHENPass","1162650nyYcPL","value","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","SEPIAPass",'{}.constructor("return this")( )',"translate","log","call","console","material","test","40TubHZD","string","autoClearColor","warn","click","toString","BoxGeometry","SNOISEPass","constructor","BOXBLURPass","label","render","apply","dispose","init","plugins/postProcessing/image/1324-normal.jpg","后处理类型","Vector2","addButton","removePass","Mesh","function *\\( *\\)","debu","exception","mergeGeometries","关闭通道","error","return (function() "];return(H=function(){return t})()}!function(t,n){const e=q,o=H();for(;;)try{if(434668===parseInt(e(413))/1+parseInt(e(433))/2+parseInt(e(418))/3+-parseInt(e(396))/4*(parseInt(e(408))/5)+parseInt(e(405))/6+parseInt(e(410))/7+-parseInt(e(444))/8*(parseInt(e(425))/9))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const W=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(456)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){W(this,(function(){const t=q,n=new RegExp(t(465)),e=new RegExp(t(435),"i"),o=Z(t(458));n.test(o+t(472))&&e[t(443)](o+t(421))?Z():o("0")}))()}();const X=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function q(t,n){const e=H();return(q=function(t,n){return e[t-=395]})(t,n)}X(void 0,(function(){const t=q;let n;try{n=Function(t(471)+t(437)+");")()}catch(r){n=window}const e=n[t(441)]=n[t(441)]||{},o=[t(439),t(447),"info",t(470),t(467),t(402),t(422)];for(let s=0;s<o[t(414)];s++){const n=X[t(452)][t(430)][t(400)](X),r=o[s],a=e[r]||n;n.__proto__=X[t(400)](X),n[t(449)]=a[t(449)][t(400)](a),e[r]=n}}))();function Z(t){function n(t){const e=q;if(typeof t===e(445))return function(t){}[e(452)]("while (true) {}")[e(456)](e(419));1!==(""+t/t)[e(414)]||t%20==0?function(){return!0}[e(452)](e(466)+e(409))[e(440)](e(399)):function(){return!1}[e(452)](e(466)+e(409))[e(456)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const $=M(g({__name:"postProcessing",async setup(o){const s=q;let a,i;const{camera:c,renderer:l,scene:u,sizes:v}=t();for(var f=new(r[s(411)]),p=[],g=0;g<100;g++){var h=new(r[s(450)])(100,100,100);h[s(438)](1500*Math[s(426)](),1500*Math[s(426)](),1500*Math[s(426)]()),p[s(395)](h)}f=m[s(468)](p);const y=([a,i]=x((()=>e({map:"plugins/postProcessing/image/1324.jpg"}))),a=await a,i(),a),I=([a,i]=x((()=>e({map:s(459)}))),a=await a,i(),a);var b=new(r[s(429)])({map:y[s(431)],normalMap:I[s(431)],normalScale:new(r[s(461)])(.8,-.8),shininess:100}),_=new(r[s(464)])(f,b);_[s(401)]=!0,_[s(398)]=!0,u[s(434)].add(_);const S=new V(l.value,{useRGBA:!0}),U=new d;let w=null,P=[{text:"InvertPass",value:{InvertPass:k}},{text:"FXAAPass",value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:s(436),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:s(451),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:s(453),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:"DENOISEPass",value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:s(416),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:I.map}}},{text:"SOBELPass",value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:"RGBPass",value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:s(407),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:"CIRCULARPass",value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:s(428),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:"VIGNETTE1Pass",value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:"VIGNETTE2Pass",value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:s(432),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:"TOONPass",value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],D="InvertPass",E=k,M=null;U[s(420)]({view:"list",label:s(460),options:P,value:""}).on(s(427),(t=>{w=t[s(434)]}));const L=U.addButton({title:"新增",label:s(412)});let A=0;L.on("click",(t=>{const n=s;D=Object[n(397)](w)[0],E=Object[n(424)](w)[0],M=Object.values(w)[1];let e=A++,o=U[n(404)]({title:D});for(const s in M){let t=M[s];o[n(420)]({view:n(415),label:s,parse:t=>String(t),value:t})}o[n(462)]({title:n(417)+e,label:n(469)}).on(n(448),(t=>{const e=n;let o=t[e(423)].title[e(406)]("~")[1];S[e(463)](o)})).on(n(448),(()=>{o[n(457)]()}));let r=z(M,t[n(423)][n(454)],t[n(434)]);S[n(403)](D,E,r,e)})),S.onWindowResize(l[s(434)],c[s(434)]);const{onLoop:F}=n();return F((({delta:t})=>{const n=s;_&&(l.value[n(446)]=!0,S.Reset(),_[n(442)]=b,S[n(455)](u[n(434)],c[n(434)]),S.pass(),S.toScreen(u.value,c[n(434)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),Y=Q;function Q(t,n){const e=J();return(Q=function(t,n){return e[t-=443]})(t,n)}function J(){const t=["stateObject","541287AOYbpf","gger","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","counter","28EsFrLf","warn","1098534EriGNB","TresPerspectiveCamera","console","table","function *\\( *\\)","action","1982815GyQwyV","error","TresDirectionalLight","TresCanvas","bind","7835800lLmLMr","manual","#ffffff","5243094zjrbNq","debu","test","apply","6170548WVBvXM","perspectiveCameraRef","toString","__proto__","3UhkgNE","1148334uTQWtH","length",'{}.constructor("return this")( )'];return(J=function(){return t})()}!function(t,n){const e=Q,o=J();for(;;)try{if(799065===parseInt(e(445))/1+parseInt(e(474))/2+-parseInt(e(473))/3*(parseInt(e(469))/4)+parseInt(e(457))/5+-parseInt(e(451))/6*(parseInt(e(449))/7)+parseInt(e(462))/8+parseInt(e(465))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const K=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Q(468)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){K(this,(function(){const t=Q,n=new RegExp(t(455)),e=new RegExp(t(447),"i"),o=st("init");n.test(o+"chain")&&e[t(467)](o+"input")?st():o("0")}))()}();const tt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();tt(void 0,(function(){const t=Q;let n;try{n=Function("return (function() "+t(443)+");")()}catch(r){n=window}const e=n[t(453)]=n.console||{},o=["log",t(450),"info",t(458),"exception",t(454),"trace"];for(let s=0;s<o[t(475)];s++){const n=tt.constructor.prototype[t(461)](tt),r=o[s],a=e[r]||n;n[t(472)]=tt.bind(tt),n[t(471)]=a[t(471)][t(461)](a),e[r]=n}}))();const nt={ref:Y(470),position:[600,850,-1500],fov:45,near:.1,far:1e5},et=_("TresAmbientLight",{color:Y(464),intensity:2},null,-1),ot=_(Y(459),{position:[100,100,0],intensity:2,color:Y(464)},null,-1),rt=g({__name:"postProcessingEditor",setup(t){const e=Y,r={clearColor:"#000000",shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(463)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=h(a(460));return y(),I(i,E(r,{"window-size":""}),{default:b((()=>[_(a(452),nt,null,512),S(U(o),w(P(s)),null,16),et,ot,(y(),I(D,null,{default:b((()=>[S($)])),_:1}))])),_:1},16)}}});function st(t){function n(t){const e=Q;if("string"==typeof t)return function(t){}.constructor("while (true) {}")[e(468)](e(448));1!==(""+t/t)[e(475)]||t%20==0?function(){return!0}.constructor(e(466)+e(446)).call(e(456)):function(){return!1}.constructor(e(466)+"gger")[e(468)](e(444)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{rt as default};
