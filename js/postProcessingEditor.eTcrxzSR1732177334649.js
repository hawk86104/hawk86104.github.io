import{m as t,e as n,b as e,U as o}from"./@tresjs.ty5XF8T_1732177334649.js";import{_ as r,cO as s,i as a,M as i,s as c,n as l,b6 as u,bX as v}from"./three.rV-MfnQb1732177334649.js";import{P as f}from"./tweakpane.yHWGBmom1732177334649.js";import{d as p,a6 as d,e as m,o as g,f as x,g as h,J as y,j as I,u as b,aj as _,ak as S,al as U,m as w}from"./@vue.-THQH3GC1732177334649.js";import{_ as P}from"./@fesjs.jFXTKHIV1732177334649.js";import"./@vueuse.n223N0GC1732177334649.js";import"./vue-router.mzGhX2Y31732177334649.js";import"./lodash-es.kYt-_xTG1732177334649.js";import"./@qlin.yHhFDldE1732177334649.js";import"./pinia.gDmc4Bet1732177334649.js";import"./vue-demi.C4xddsk91732177334649.js";import"./@floating-ui.BPbuo5Gx1732177334649.js";import"./@juggle.7yjBMqoW1732177334649.js";!function(t,n){const e=M,o=L();for(;;)try{if(211171===parseInt(e(319))/1*(-parseInt(e(315))/2)+parseInt(e(301))/3*(parseInt(e(270))/4)+-parseInt(e(266))/5+parseInt(e(312))/6*(-parseInt(e(286))/7)+-parseInt(e(287))/8+parseInt(e(264))/9*(parseInt(e(274))/10)+-parseInt(e(268))/11*(parseInt(e(280))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const E=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[M(326)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){E(this,(function(){const t=M,n=new RegExp(t(269)),e=new RegExp(t(316),"i"),o=C(t(288));n[t(283)](o+"chain")&&e[t(283)](o+t(290))?C():o("0")}))()}();const D=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();D(void 0,(function(){const t=M,n=function(){const t=M;let n;try{n=Function("return (function() "+t(306)+");")()}catch(e){n=window}return n}(),e=n[t(324)]=n[t(324)]||{},o=[t(267),t(285),t(271),t(322),t(314),t(320),"trace"];for(let r=0;r<o[t(318)];r++){const n=D[t(293)][t(305)][t(296)](D),s=o[r],a=e[s]||n;n.__proto__=D[t(296)](D),n.toString=a[t(281)][t(296)](a),e[s]=n}}))();function A(t,n,e){const o=M;if(typeof t!==o(309)||null===t)return t;const r=Array.isArray(t)?[]:{};for(const s in t)t[o(278)](s)&&(r[s]=A(t[s])),s==n&&(r[n]=e);return r}function M(t,n){const e=L();return(M=function(t,n){return e[t-=262]})(t,n)}function L(){const t=["object","onerror",'" load was aborted.',"246MEpBPV","get","exception","121964EELQzn","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","stateObject","length","1jTRXqa","table","onload","error","message","console","open","apply","onabort","send","ShaderMaterial","1257156gystkq","lastIndex","264865SoFLZM","log","7799KJJPpI","function *\\( *\\)","3644UGOUZO","info","replace","responseText","10SVpYiG","while (true) {}",'Shader "',"index","hasOwnProperty","call","876nFTCqk","toString","\" couldn't be loaded.","test","name","warn","5019KtcuLz","680400OHUVuv","init","debu","input","Vector3","gger","constructor","exec","Texture","bind","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","type","value","v3v","1158YpkECX","Vector4","counter","Vector2","prototype",'{}.constructor("return this")( )',"string","WagnerLoadShaderException"];return(L=function(){return t})()}function C(t){function n(t){const e=M;if(typeof t===e(307))return function(t){}[e(293)](e(275))[e(326)](e(303));1!==(""+t/t)[e(318)]||t%20==0?function(){return!0}[e(293)](e(289)+e(292))[e(279)]("action"):function(){return!1}.constructor(e(289)+"gger")[e(326)](e(317)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const F=T;!function(t,n){const e=T,o=G();for(;;)try{if(692519===-parseInt(e(227))/1+parseInt(e(166))/2+-parseInt(e(234))/3*(-parseInt(e(261))/4)+parseInt(e(225))/5*(parseInt(e(201))/6)+-parseInt(e(228))/7*(parseInt(e(255))/8)+-parseInt(e(204))/9+parseInt(e(182))/10*(parseInt(e(180))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function T(t,n){const e=G();return(T=function(t,n){return e[t-=160]})(t,n)}!function(){z(this,(function(){const t=T,n=new RegExp(t(181)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=B("init");n[t(196)](o+t(179))&&e[t(196)](o+t(237))?B():o("0")}))()}();const N=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[T(164)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function G(){const t=["onWindowResize","copyPass","makeOrthographic","magFilter","ShaderMaterial","Scene","shader","call","PlaneGeometry","scale","type","near","test","trace","CopyPass","info","height","714KSBWZc","push","return (function() ","6997437SSTJMY","startTime","read","console","__proto__","MeshBasicMaterial","material","innerWidth","makePerspective","loadShadervf","WebGLRenderTarget","innerHeight","projectionMatrix","length","wrapT","RGBFormat","addPass","useRGBA","toString","now","ClampToEdgeWrapping","12010urwxVH","Stack","822438OewhDa","28AZAWKb","gger","minFilter","constructor","prototype","Reset","3aGnfSi","wrapS","stencilBuffer","input","back","front","setRenderTarget","resolution","UnsignedByteType","uniforms","quad","Pass","warn","add","OrthographicCamera","renderer","setSize","width","LinearFilter","params","write","2358152brXwdH","scene","uuid","passes","log","render","2880408ExRnnF","splice","value","error","while (true) {}","apply","getOfflineTexture","1147556qZUIxZ","settings","camera","swapBuffers","stateObject","passItems","texture","set","RGBAFormat","far","debu","bind","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","chain","88AWjpVr","function *\\( *\\)","2364760ZAKyei","exception"];return(G=function(){return t})()}N(void 0,(function(){const t=T;let n;try{n=Function(t(203)+'{}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(207)]=n[t(207)]||{},o=[t(259),t(246),t(199),t(162),t(183),"table",t(197)];for(let s=0;s<o[t(217)];s++){const n=N[t(231)][t(232)][t(177)](N),r=o[s],a=e[r]||n;n[t(208)]=N.bind(N),n[t(222)]=a.toString.bind(a),e[r]=n}}))();class R{constructor(t,n){const e=T;this[e(251)]=1,this[e(200)]=1,this[e(167)]=n||{},this[e(221)]=this.settings.useRGBA||!1,this[e(249)]=t,this[e(185)]=this[e(198)](this.settings),this[e(256)]=new(r[e(189)]),this.quad=new c(new(r[e(192)])(1,1),new(r[e(209)])),this.scene[e(247)](this[e(244)]),this[e(168)]=new(r[e(248)])(1,1,1,1,-1e4,1e4),this[e(239)]=new(r[e(214)])(1,1,{minFilter:void 0!==this[e(167)][e(230)]?this[e(167)][e(230)]:l,magFilter:void 0!==this[e(167)][e(187)]?this[e(167)][e(187)]:r[e(252)],wrapS:void 0!==this[e(167)][e(235)]?this.settings[e(235)]:r[e(224)],wrapT:void 0!==this[e(167)][e(218)]?this.settings.wrapT:r[e(224)],format:this[e(221)]?u:r[e(219)],type:void 0!==this[e(167)][e(194)]?this.settings[e(194)]:r[e(242)],stencilBuffer:void 0===this[e(167)][e(236)]||this.settings[e(236)]}),this[e(238)]=this[e(239)].clone(),this[e(205)]=Date[e(223)](),this[e(258)]={},this[e(226)]={passItems:[],passes:[]}}[F(220)](t,n,e,o){const r=F;this[r(213)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(190)]};this[r(226)][r(171)][r(202)](s)}removePass(t){const n=F;for(let e=this.Stack[n(171)][n(217)]-1;e>=0;e--)this.Stack[n(171)][e][n(257)]===parseInt(t)&&this[n(226)][n(171)][n(160)](e,1);console[n(259)](this[n(226)][n(171)])}CopyPass(){const t=F;this[t(245)][t(191)](this);return this[t(213)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[F(213)](t){const n=F,e=n(178);return this[n(190)]=function(t,n){const e=M,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,c=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,l={sampler2D:{type:"t",value:()=>new(r[M(295)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[M(304)])},vec3:{type:"v3",value:()=>new(r[M(291)])},vec4:{type:"v4",value:()=>new(r[M(302)])},bvec2:{type:"v2",value:()=>new(r[M(304)])},bvec3:{type:"v3",value:()=>new(r[M(291)])},bvec4:{type:"v4",value:()=>new(r[M(302)])},ivec2:{type:"v2",value:()=>new(r[M(304)])},ivec3:{type:"v3",value:()=>new(r[M(291)])},ivec4:{type:"v4",value:()=>new(r[M(302)])},mat2:{type:"v2",value:()=>new s},mat3:{type:"v3",value:()=>new a},mat4:{type:"v4",value:()=>new i}},u={float:{type:"fv",value:()=>[]},vec3:{type:e(300),value:()=>[]}};let v;const f={resolution:{type:"v2",value:new(r[e(304)])(1,1),default:!0},time:{type:"f",value:Date.now(),default:!0},tInput:{type:"t",value:new(r[e(295)]),default:!0}};let p,d;for(;null!==(v=o[e(294)](n));)v[e(277)]===o[e(265)]&&o[e(265)]++,p=v[1],d=v[2],f[d]={type:l[p][e(298)],value:l[p][e(299)]()};for(;null!==(v=c[e(294)](n));)v[e(277)]===o[e(265)]&&o[e(265)]++,p=v[1],d=v[2],v[3],f[d]={type:u[p][e(298)],value:u[p].value()};return new(r[e(263)])({uniforms:f,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(190)]}[F(245)](t){const n=F;this[n(190)]=null,this[n(253)]={}}[F(233)](){const t=F;this[t(206)]=this[t(239)],this[t(254)]=this[t(238)]}[F(184)](t,n){const e=F,o=window[e(211)],r=window[e(215)];t[e(250)](1*o,1*r),n[e(216)][e(212)](70,o/r,n[e(195)],n[e(175)]),this.setSize(o,r);return this[e(165)](o,r,!0)}setSize(t,n){const e=F;this[e(251)]=t,this[e(200)]=n,this[e(168)][e(216)][e(186)](t/-2,t/2,n/2,n/-2,this[e(168)][e(195)],this.camera[e(175)]),this[e(244)][e(193)][e(173)](t,n,1),this[e(239)][e(250)](t,n),this.back[e(250)](t,n)}[F(165)](t,n,e){const o=F;return new(r[o(214)])(t,n,{minFilter:r[o(252)],magFilter:r[o(252)],format:e?r[o(174)]:r[o(219)]})}[F(260)](t,n,e,o){const r=F;this[r(249)][r(240)](this[r(254)]),this[r(249)].render(t,n),o||this[r(169)]()}[F(169)](){const t=F,n=this[t(254)];this[t(254)]=this.read,this.read=n}pass(){const t=F;for(let n=0;n<this[t(226)].passItems[t(217)];n++){const e=this[t(226)][t(171)][n][t(190)],o=this[t(226)].passItems[n][t(253)];if(this.renderer[t(240)](this[t(254)]),e instanceof r[t(188)]){this[t(244)][t(210)]=e,this[t(244)][t(210)][t(243)].tInput[t(161)]=this[t(206)][t(172)],this.quad[t(210)][t(243)][t(241)].value[t(173)](this.width,this[t(200)]),this[t(244)][t(210)][t(243)].time[t(161)]=.001*(Date[t(223)]()-this[t(205)]);for(const n in o)this.quad[t(210)].uniforms[n][t(161)]=o[n];this[t(249)][t(260)](this[t(256)],this[t(168)]),this.swapBuffers()}}}toScreen(t,n){const e=F;this.renderer.setRenderTarget(null),this[e(244)][e(210)]=this[e(185)],this.quad[e(210)][e(243)].tInput[e(161)]=this[e(206)].texture,this[e(244)][e(210)][e(243)][e(241)][e(161)][e(173)](this[e(251)],this.height),this.renderer.render(this.scene,this[e(168)])}}function B(t){function n(t){const e=T;if("string"==typeof t)return function(t){}.constructor(e(163)).apply("counter");1!==(""+t/t)[e(217)]||t%20==0?function(){return!0}[e(231)](e(176)+e(229)).call("action"):function(){return!1}[e(231)](e(176)+e(229))[e(164)](e(170)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const V="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}";!function(t,n){const e=k,o=H();for(;;)try{if(417152===-parseInt(e(426))/1+-parseInt(e(420))/2*(parseInt(e(473))/3)+-parseInt(e(443))/4*(-parseInt(e(408))/5)+-parseInt(e(456))/6+parseInt(e(422))/7+parseInt(e(444))/8+parseInt(e(447))/9*(parseInt(e(402))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const j=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){j(this,(function(){const t=k,n=new RegExp(t(405)),e=new RegExp(t(401),"i"),o=W("init");n[t(441)](o+t(404))&&e[t(441)](o+t(424))?W():o("0")}))()}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[k(438)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function H(){const t=["value","autoClearColor","gger","material","SOBELPass","error","后处理类型","apply","addButton","while (true) {}","test","map","4bSCxNp","460256hMYGOO","render","warn","9AioyUa","InvertPass","title","SNOISEPass","BufferGeometry","constructor","action","return (function() ","trace","2589990FeLoxV","Mesh","label","click","random","mergeGeometries","VIGNETTE2Pass","toString","plugins/postProcessing/image/1324.jpg","pass","console","addBlade","FREICHENPass","text","MeshPhongMaterial","add","target","6843SQAOVR","CIRCULARPass","BOXBLURPass","bind","BoxGeometry","Vector2","stateObject","push","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","7621870xodTLx","移除~","chain","function *\\( *\\)","debu","change","2743855iwYyuT","length","TOONPass","values",'{}.constructor("return this")( )',"addFolder","receiveShadow","FXAAPass","table","removePass","castShadow","prototype","194ynnjop","addPass","3196396ZjZiOk","keys","input","SEPIAPass","755044OZjVyg","关闭通道","plugins/postProcessing/image/1324-normal.jpg","CGAPass","call"];return(H=function(){return t})()}function k(t,n){const e=H();return(k=function(t,n){return e[t-=395]})(t,n)}O(void 0,(function(){const t=k;let n;try{n=Function(t(454)+t(412)+");")()}catch(r){n=window}const e=n[t(466)]=n[t(466)]||{},o=["log",t(446),"info",t(436),"exception",t(416),t(455)];for(let s=0;s<o[t(409)];s++){const n=O[t(452)][t(419)][t(396)](O),r=o[s],a=e[r]||n;n.__proto__=O.bind(O),n[t(463)]=a[t(463)][t(396)](a),e[r]=n}}))();function W(t){function n(t){const e=k;if("string"==typeof t)return function(t){}[e(452)](e(440)).apply("counter");1!==(""+t/t)[e(409)]||t%20==0?function(){return!0}[e(452)](e(406)+e(433))[e(430)](e(453)):function(){return!1}[e(452)]("debu"+e(433)).apply(e(399)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const X=P(p({__name:"postProcessing",async setup(o){const s=k;let a,i;const{camera:c,renderer:l,scene:u,sizes:p}=t();for(var m=new(r[s(451)]),g=[],x=0;x<100;x++){var h=new(r[s(397)])(100,100,100);h.translate(1500*Math[s(460)](),1500*Math.random(),1500*Math[s(460)]()),g[s(400)](h)}m=v[s(461)](g);const y=([a,i]=d((()=>e({map:s(464)}))),a=await a,i(),a),I=([a,i]=d((()=>e({map:s(428)}))),a=await a,i(),a);var b=new(r[s(470)])({map:y[s(442)],normalMap:I.map,normalScale:new(r[s(398)])(.8,-.8),shininess:100}),_=new(r[s(457)])(m,b);_[s(418)]=!0,_[s(414)]=!0,u[s(431)][s(471)](_);const S=new R(l[s(431)],{useRGBA:!0}),U=new f;let w=null,P=[{text:"InvertPass",value:{InvertPass:V}},{text:s(415),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:s(425),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:s(450),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:s(395),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:"DENOISEPass",value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:s(429),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:I[s(442)]}}},{text:s(435),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:"RGBPass",value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:"DOTPass",value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(474),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:"POISSONPass",value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:"VIGNETTE1Pass",value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(462),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:s(468),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:s(410),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],E=s(448),D=V,M=null;U[s(467)]({view:"list",label:s(437),options:P,value:""}).on(s(407),(t=>{w=t[s(431)]}));const L=U[s(439)]({title:"新增",label:"新增通道"});let C=0;L.on(s(459),(t=>{const n=s;E=Object[n(423)](w)[0],D=Object[n(411)](w)[0],M=Object[n(411)](w)[1];let e=C++,o=U[n(413)]({title:E});for(const s in M){let t=M[s];o[n(467)]({view:n(469),label:s,parse:t=>String(t),value:t})}o[n(439)]({title:n(403)+e,label:n(427)}).on("click",(t=>{const e=n;let o=t[e(472)][e(449)].split("~")[1];S[e(417)](o)})).on(n(459),(()=>{o.dispose()}));let r=A(M,t[n(472)][n(458)],t[n(431)]);S[n(421)](E,D,r,e)})),S.onWindowResize(l[s(431)],c[s(431)]);const{onLoop:F}=n();return F((({delta:t})=>{const n=s;_&&(l[n(431)][n(432)]=!0,S.Reset(),_[n(434)]=b,S[n(445)](u[n(431)],c.value),S[n(465)](),S.toScreen(u[n(431)],c[n(431)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),q=Q;!function(t,n){const e=Q,o=Y();for(;;)try{if(709249===parseInt(e(473))/1+-parseInt(e(445))/2*(parseInt(e(457))/3)+parseInt(e(461))/4*(parseInt(e(446))/5)+-parseInt(e(453))/6+parseInt(e(464))/7+-parseInt(e(465))/8*(-parseInt(e(469))/9)+-parseInt(e(441))/10*(parseInt(e(467))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Q(483)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){Z(this,(function(){const t=Q,n=new RegExp(t(477)),e=new RegExp(t(460),"i"),o=tt(t(478));n[t(462)](o+t(470))&&e.test(o+t(452))?tt():o("0")}))()}();const $=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Q(483)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();$(void 0,(function(){const t=Q;let n;try{n=Function(t(454)+t(449)+");")()}catch(r){n=window}const e=n[t(479)]=n[t(479)]||{},o=["log",t(456),t(476),t(481),t(444),"table",t(474)];for(let s=0;s<o[t(463)];s++){const n=$[t(480)].prototype[t(443)]($),r=o[s],a=e[r]||n;n[t(442)]=$[t(443)]($),n[t(472)]=a[t(472)][t(443)](a),e[r]=n}}))();const K={ref:q(482),position:[600,850,-1500],fov:45,near:.1,far:1e5};function Y(){const t=["manual","warn","1368843arTXWl","call","string","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","19424sRatXp","test","length","4327848tyCNCG","1876416fYMFfq","counter","5494511qnuZUk","TresAmbientLight","9chUrHH","chain","TresPerspectiveCamera","toString","542937bbtoEo","trace","gger","info","function *\\( *\\)","init","console","constructor","error","perspectiveCameraRef","apply","TresCanvas","while (true) {}","debu","10NbVTzP","__proto__","bind","exception","2pVMqEx","1375zKFVLm","action","TresDirectionalLight",'{}.constructor("return this")( )',"#000000","postProcessingEditor","input","6396732GvustA","return (function() "];return(Y=function(){return t})()}const J=p({__name:q(451),setup(t){const e=q,r={clearColor:e(450),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(455)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=m(a(484));return g(),x(i,w(r,{"window-size":""}),{default:h((()=>[y(a(471),K,null,512),I(b(o),_(S(s)),null,16),n[0]||(n[0]=y(a(468),{color:"#ffffff",intensity:2},null,-1)),n[1]||(n[1]=y(a(448),{position:[100,100,0],intensity:2,color:"#ffffff"},null,-1)),(g(),x(U,null,{default:h((()=>[I(X)])),_:1}))])),_:1},16)}}});function Q(t,n){const e=Y();return(Q=function(t,n){return e[t-=440]})(t,n)}function tt(t){function n(t){const e=Q;if(typeof t===e(459))return function(t){}.constructor(e(485)).apply(e(466));1!==(""+t/t).length||t%20==0?function(){return!0}[e(480)](e(440)+e(475))[e(458)](e(447)):function(){return!1}.constructor(e(440)+e(475))[e(483)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{J as default};
