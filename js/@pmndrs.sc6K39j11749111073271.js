import{b as e,n,K as t,u as r,N as o,r as a,X as i,Y as s,f as l,O as c,_ as m,$ as d,l as u,m as f,a0 as p,w as h,x as v,C as g,V as x,M as w,a1 as y,a2 as P,v as S,F as M,h as C,g as b,U as D,a3 as T,a4 as z,a5 as _,a6 as F,a7 as A,a8 as k,I as j,Q as R,a9 as O,aa as I,A as N,ab as U,ac as W,ad as B,ae as L,af as E,ag as V,a as G,ah as $}from"./three.B8H7tP0r1749111073271.js";function K(r,o,a,i){const s=Object.entries(r);class l extends n{constructor(e){super({uniforms:s.reduce(((e,[n,r])=>({...e,...t.clone({[n]:{value:r}})})),{}),vertexShader:o,fragmentShader:a});for(const[n]of s)Object.defineProperty(this,n,{get:()=>this.uniforms[n].value,set:e=>this.uniforms[n].value=e});Object.assign(this,e)}}return l.key=e.generateUUID(),l}function X(e=1024,n=1024,t={samples:0,depth:!1}){var l=e,c=n,m=t,d=m.samples||0,u=m.depth,f=Object.assign({},m);delete f.samples,delete f.depth;var p=new r(l,c,Object.assign({minFilter:a,magFilter:a,type:o},f));return u&&(p.depthTexture=new i(l,c,s)),p.samples=d,p}function q(e=P){const n={value:new w};return Object.assign(new T({side:e}),{viewMatrix:n,onBeforeCompile:e=>{e.uniforms.viewMatrix=n,e.fragmentShader="vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n           return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n         }\n"+e.fragmentShader.replace("#include <normal_fragment_maps>","#include <normal_fragment_maps>\n           normal = inverseTransformDirection( normal, viewMatrix );\n")}})}const H=K({causticsTexture:null,causticsTextureB:null,color:new g,lightProjMatrix:new w,lightViewMatrix:new w},"varying vec3 vWorldPosition;   \n   void main() {\n     gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);\n     vec4 worldPosition = modelMatrix * vec4(position, 1.);\n     vWorldPosition = worldPosition.xyz;\n   }",`varying vec3 vWorldPosition;\n  uniform vec3 color;\n  uniform sampler2D causticsTexture; \n  uniform sampler2D causticsTextureB; \n  uniform mat4 lightProjMatrix;\n  uniform mat4 lightViewMatrix;\n   void main() {\n    // Apply caustics  \n    vec4 lightSpacePos = lightProjMatrix * lightViewMatrix * vec4(vWorldPosition, 1.0);\n    lightSpacePos.xyz /= lightSpacePos.w;\n    lightSpacePos.xyz = lightSpacePos.xyz * 0.5 + 0.5; \n    vec3 front = texture2D(causticsTexture, lightSpacePos.xy).rgb;\n    vec3 back = texture2D(causticsTextureB, lightSpacePos.xy).rgb;\n    gl_FragColor = vec4((front + back) * color, 1.0);\n    #include <tonemapping_fragment>\n    #include <${parseInt(_.replace(/\D+/g,""))>=154?"colorspace_fragment":"encodings_fragment"}>\n   }`),Q=K({cameraMatrixWorld:new w,cameraProjectionMatrixInv:new w,normalTexture:null,depthTexture:null,lightDir:new x(0,1,0),lightPlaneNormal:new x(0,1,0),lightPlaneConstant:0,near:.1,far:100,modelMatrix:new w,worldRadius:1/40,ior:1.1,bounces:0,resolution:1024,size:10,intensity:.5},"\n  varying vec2 vUv;\n  void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }","  \n  uniform mat4 cameraMatrixWorld;\n  uniform mat4 cameraProjectionMatrixInv;\n  uniform vec3 lightDir;\n  uniform vec3 lightPlaneNormal;\n  uniform float lightPlaneConstant;\n  uniform float near;\n  uniform float far;\n  uniform float time;\n  uniform float worldRadius;\n  uniform float resolution;\n  uniform float size;\n  uniform float intensity;\n  uniform float ior;\n  precision highp isampler2D;\n  precision highp usampler2D;\n  uniform sampler2D normalTexture;\n  uniform sampler2D depthTexture;\n  uniform float bounces;\n  varying vec2 vUv;\n  vec3 WorldPosFromDepth(float depth, vec2 coord) {\n    float z = depth * 2.0 - 1.0;\n    vec4 clipSpacePosition = vec4(coord * 2.0 - 1.0, z, 1.0);\n    vec4 viewSpacePosition = cameraProjectionMatrixInv * clipSpacePosition;\n    // Perspective division\n    viewSpacePosition /= viewSpacePosition.w;\n    vec4 worldSpacePosition = cameraMatrixWorld * viewSpacePosition;\n    return worldSpacePosition.xyz;\n  }                  \n  float sdPlane( vec3 p, vec3 n, float h ) {\n    // n must be normalized\n    return dot(p,n) + h;\n  }\n  float planeIntersect( vec3 ro, vec3 rd, vec4 p ) {\n    return -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\n  }\n  vec3 totalInternalReflection(vec3 ro, vec3 rd, vec3 pos, vec3 normal, float ior, out vec3 rayOrigin, out vec3 rayDirection) {\n    rayOrigin = ro;\n    rayDirection = rd;\n    rayDirection = refract(rayDirection, normal, 1.0 / ior);\n    rayOrigin = pos + rayDirection * 0.1;\n    return rayDirection;\n  }\n  void main() {\n    // Each sample consists of random offset in the x and y direction\n    float caustic = 0.0;\n    float causticTexelSize = (1.0 / resolution) * size * 2.0;\n    float texelsNeeded = worldRadius / causticTexelSize;\n    float sampleRadius = texelsNeeded / resolution;\n    float sum = 0.0;\n    if (texture2D(depthTexture, vUv).x == 1.0) {\n      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n      return;\n    }\n    vec2 offset1 = vec2(-0.5, -0.5);//vec2(rand() - 0.5, rand() - 0.5);\n    vec2 offset2 = vec2(-0.5, 0.5);//vec2(rand() - 0.5, rand() - 0.5);\n    vec2 offset3 = vec2(0.5, 0.5);//vec2(rand() - 0.5, rand() - 0.5);\n    vec2 offset4 = vec2(0.5, -0.5);//vec2(rand() - 0.5, rand() - 0.5);\n    vec2 uv1 = vUv + offset1 * sampleRadius;\n    vec2 uv2 = vUv + offset2 * sampleRadius;\n    vec2 uv3 = vUv + offset3 * sampleRadius;\n    vec2 uv4 = vUv + offset4 * sampleRadius;\n    vec3 normal1 = texture2D(normalTexture, uv1, -10.0).rgb * 2.0 - 1.0;\n    vec3 normal2 = texture2D(normalTexture, uv2, -10.0).rgb * 2.0 - 1.0;\n    vec3 normal3 = texture2D(normalTexture, uv3, -10.0).rgb * 2.0 - 1.0;\n    vec3 normal4 = texture2D(normalTexture, uv4, -10.0).rgb * 2.0 - 1.0;\n    float depth1 = texture2D(depthTexture, uv1, -10.0).x;\n    float depth2 = texture2D(depthTexture, uv2, -10.0).x;\n    float depth3 = texture2D(depthTexture, uv3, -10.0).x;\n    float depth4 = texture2D(depthTexture, uv4, -10.0).x;\n    // Sanity check the depths\n    if (depth1 == 1.0 || depth2 == 1.0 || depth3 == 1.0 || depth4 == 1.0) {\n      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n      return;\n    }\n    vec3 pos1 = WorldPosFromDepth(depth1, uv1);\n    vec3 pos2 = WorldPosFromDepth(depth2, uv2);\n    vec3 pos3 = WorldPosFromDepth(depth3, uv3);\n    vec3 pos4 = WorldPosFromDepth(depth4, uv4);\n    vec3 originPos1 = WorldPosFromDepth(0.0, uv1);\n    vec3 originPos2 = WorldPosFromDepth(0.0, uv2);\n    vec3 originPos3 = WorldPosFromDepth(0.0, uv3);\n    vec3 originPos4 = WorldPosFromDepth(0.0, uv4);\n    vec3 endPos1, endPos2, endPos3, endPos4;\n    vec3 endDir1, endDir2, endDir3, endDir4;\n    totalInternalReflection(originPos1, lightDir, pos1, normal1, ior, endPos1, endDir1);\n    totalInternalReflection(originPos2, lightDir, pos2, normal2, ior, endPos2, endDir2);\n    totalInternalReflection(originPos3, lightDir, pos3, normal3, ior, endPos3, endDir3);\n    totalInternalReflection(originPos4, lightDir, pos4, normal4, ior, endPos4, endDir4);\n    float lightPosArea = length(cross(originPos2 - originPos1, originPos3 - originPos1)) + length(cross(originPos3 - originPos1, originPos4 - originPos1));\n    float t1 = planeIntersect(endPos1, endDir1, vec4(lightPlaneNormal, lightPlaneConstant));\n    float t2 = planeIntersect(endPos2, endDir2, vec4(lightPlaneNormal, lightPlaneConstant));\n    float t3 = planeIntersect(endPos3, endDir3, vec4(lightPlaneNormal, lightPlaneConstant));\n    float t4 = planeIntersect(endPos4, endDir4, vec4(lightPlaneNormal, lightPlaneConstant));\n    vec3 finalPos1 = endPos1 + endDir1 * t1;\n    vec3 finalPos2 = endPos2 + endDir2 * t2;\n    vec3 finalPos3 = endPos3 + endDir3 * t3;\n    vec3 finalPos4 = endPos4 + endDir4 * t4;\n    float finalArea = length(cross(finalPos2 - finalPos1, finalPos3 - finalPos1)) + length(cross(finalPos3 - finalPos1, finalPos4 - finalPos1));\n    caustic += intensity * (lightPosArea / finalArea);\n    // Calculate the area of the triangle in light spaces\n    gl_FragColor = vec4(vec3(max(caustic, 0.0)), 1.0);\n  }"),Y={depth:!0,minFilter:a,magFilter:a,type:D},J={minFilter:y,magFilter:a,type:s,generateMipmaps:!0};const Z=(e,{frames:n=1,causticsOnly:t=!1,ior:r=1.1,backside:o=!1,backsideIOR:a=1.1,worldRadius:i=.3125,color:s=new g("white"),intensity:y=.05,resolution:P=2024,lightSource:D=new x(1,1,1),near:T=.1,far:_=0}={})=>{const F={frames:n,ior:r,color:s,causticsOnly:t,backside:o,backsideIOR:a,worldRadius:i,intensity:y,resolution:P,lightSource:D,near:T,far:_},A=new l;A.name="caustics_group";const k=new c,j=new m;j.name="caustics_scene";const R=e,O=new d(k);O.name="caustics_helper";const I=F.resolution,N=X(I,I,Y),U=X(I,I,Y),W=X(I,I,J),B=X(I,I,J),L=new u(new f(1,1),new H({transparent:!0,color:F.color,causticsTexture:W.texture,causticsTextureB:B.texture,blending:v,blendSrc:h,blendDst:p,depthWrite:!1}));L.name="caustics_plane",L.rotation.x=-Math.PI/2,L.renderOrder=2,A.add(j,L),A.updateWorldMatrix(!1,!0);const E=function(e){const n=q(),t=q(z),r=new Q,o=new S(r);let a=0;const i=new x,s=new M,l=new w,c=new C,m=new x,d=new x,u=new b,f=new x,p=[],h=[],v=[],g=[],y=new x;for(let w=0;w<8;w++)p.push(new x),h.push(new x),v.push(new x),g.push(new x);return function(x){const{params:w,helper:P,camera:S,plane:M,normalTarget:C,normalTargetB:b,causticsTarget:D,causticsTargetB:T,scene:z,group:_}=e();if(w.frames===1/0||w.frames&&a++<w.frames){var F;(null==(A=w.lightSource)?void 0:A.isVector3)?m.copy(w.lightSource).normalize():w.lightSource&&m.copy(_.worldToLocal(w.lightSource.getWorldPosition(i)).normalize()),d.copy(m).multiplyScalar(-1),null==(F=z.parent)||F.matrixWorld.identity(),u.setFromObject(z,!0),p[0].set(u.min.x,u.min.y,u.min.z),p[1].set(u.min.x,u.min.y,u.max.z),p[2].set(u.min.x,u.max.y,u.min.z),p[3].set(u.min.x,u.max.y,u.max.z),p[4].set(u.max.x,u.min.y,u.min.z),p[5].set(u.max.x,u.min.y,u.max.z),p[6].set(u.max.x,u.max.y,u.min.z),p[7].set(u.max.x,u.max.y,u.max.z);for(let n=0;n<8;n++)h[n].copy(p[n]);u.getCenter(f),p.map((e=>e.sub(f)));const e=c.set(d,0);p.map(((n,t)=>e.projectPoint(n,v[t])));const a=v.reduce(((e,n)=>e.add(n)),i.set(0,0,0)).divideScalar(v.length),k=v.map((e=>e.distanceTo(a))).reduce(((e,n)=>Math.max(e,n))),j=p.map((e=>e.dot(m))).reduce(((e,n)=>Math.max(e,n)));S.position.copy(y.copy(m).multiplyScalar(j).add(f)),S.lookAt(z.localToWorld(f));const R=l.lookAt(S.position,f,i.set(0,1,0));if(S.left=-k,S.right=k,S.top=k,S.bottom=-k,w.near&&(S.near=w.near),w.far)S.far=w.far;else{const e=i.set(0,k,0).applyMatrix4(R),n=(S.position.y+e.y)/m.y;S.far=n}S.updateProjectionMatrix(),S.updateMatrixWorld();const O=h.map(((e,n)=>e.add(g[n].copy(m).multiplyScalar(-e.y/m.y)))),I=O.reduce(((e,n)=>e.add(n)),i.set(0,0,0)).divideScalar(O.length),N=2*O.map((e=>Math.hypot(e.x-I.x,e.z-I.z))).reduce(((e,n)=>Math.max(e,n)));M.scale.setScalar(N),M.position.copy(I),null!=P&&P.parent&&P.update(),t.viewMatrix.value=n.viewMatrix.value=S.matrixWorldInverse;const U=s.setFromProjectionMatrix(l.multiplyMatrices(S.projectionMatrix,S.matrixWorldInverse)).planes[4];r.cameraMatrixWorld=S.matrixWorld,r.cameraProjectionMatrixInv=S.projectionMatrixInverse,r.lightDir=d,r.lightPlaneNormal=U.normal,r.lightPlaneConstant=U.constant,r.near=S.near,r.far=S.far,w.resolution&&(r.resolution=w.resolution),r.size=k,w.intensity&&(r.intensity=w.intensity),w.worldRadius&&(r.worldRadius=w.worldRadius),z.visible=!0,x.setRenderTarget(C),x.clear(),z.overrideMaterial=n,x.render(z,S),x.setRenderTarget(b),x.clear(),w.backside&&(z.overrideMaterial=t,x.render(z,S)),z.overrideMaterial=null,w.ior&&(r.ior=w.ior),M.material.lightProjMatrix=S.projectionMatrix,M.material.lightViewMatrix=S.matrixWorldInverse,r.normalTexture=C.texture,r.depthTexture=C.depthTexture,x.setRenderTarget(D),x.clear(),o.render(x),w.backsideIOR&&(r.ior=w.backsideIOR),r.normalTexture=b.texture,r.depthTexture=b.depthTexture,x.setRenderTarget(T),x.clear(),w.backside&&o.render(x),x.setRenderTarget(null),w.causticsOnly&&(z.visible=!1)}var A}}((()=>({params:F,scene:j,group:A,camera:k,plane:L,normalTarget:N,normalTargetB:U,causticsTarget:W,causticsTargetB:B,helper:O})));return{scene:j,group:A,helper:O,params:F,update:E.bind({},R),normalTarget:N,normalTargetB:U,causticsTarget:W,causticsTargetB:B}},ee=K({},"void main() { }","void main() { gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0); discard;  }");const ne=K({color:new g(0),blend:2,alphaTest:.75,opacity:0,map:null},"varying vec2 vUv;\n   void main() {\n     gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);\n     vUv = uv;\n   }",`varying vec2 vUv;\n   uniform sampler2D map;\n   uniform vec3 color;\n   uniform float opacity;\n   uniform float alphaTest;\n   uniform float blend;\n   void main() {\n     vec4 sampledDiffuseColor = texture2D(map, vUv);\n     gl_FragColor = vec4(color * sampledDiffuseColor.r * blend, max(0.0, (1.0 - (sampledDiffuseColor.r + sampledDiffuseColor.g + sampledDiffuseColor.b) / alphaTest)) * opacity);\n     #include <tonemapping_fragment>\n     #include <${parseInt(_.replace(/\D+/g,""))>=154?"colorspace_fragment":"encodings_fragment"}>\n   }`);class te{constructor(e,n,t=1024){this.renderer=e,this.res=t,this.scene=n,this.buffer1Active=!1,this.lights=[],this.meshes=[],this.object=null,this.clearColor=new g,this.clearAlpha=0;const a=/(Android|iPad|iPhone|iPod)/g.test(navigator.userAgent)?o:s;this.progressiveLightMap1=new r(this.res,this.res,{type:a}),this.progressiveLightMap2=new r(this.res,this.res,{type:a}),this.discardMat=new ee,this.targetMat=new F({fog:!1}),this.previousShadowMap={value:this.progressiveLightMap1.texture},this.averagingWindow={value:100},this.targetMat.onBeforeCompile=e=>{e.vertexShader="varying vec2 vUv;\n"+e.vertexShader.slice(0,-1)+"vUv = uv; gl_Position = vec4((uv - 0.5) * 2.0, 1.0, 1.0); }";const n=e.fragmentShader.indexOf("void main() {");e.fragmentShader="varying vec2 vUv;\n"+e.fragmentShader.slice(0,n)+"uniform sampler2D previousShadowMap;\n\tuniform float averagingWindow;\n"+e.fragmentShader.slice(n-1,-1)+"\nvec3 texelOld = texture2D(previousShadowMap, vUv).rgb;\n        gl_FragColor.rgb = mix(texelOld, gl_FragColor.rgb, 1.0/ averagingWindow);\n      }",e.uniforms.previousShadowMap=this.previousShadowMap,e.uniforms.averagingWindow=this.averagingWindow}}clear(){this.renderer.getClearColor(this.clearColor),this.clearAlpha=this.renderer.getClearAlpha(),this.renderer.setClearColor("black",1),this.renderer.setRenderTarget(this.progressiveLightMap1),this.renderer.clear(),this.renderer.setRenderTarget(this.progressiveLightMap2),this.renderer.clear(),this.renderer.setRenderTarget(null),this.renderer.setClearColor(this.clearColor,this.clearAlpha),this.lights=[],this.meshes=[],this.scene.traverse((e=>{!function(e){return!!e.geometry}(e)?function(e){return e.isLight}(e)&&this.lights.push({object:e,intensity:e.intensity}):this.meshes.push({object:e,material:e.material})}))}prepare(){this.lights.forEach((e=>e.object.intensity=0)),this.meshes.forEach((e=>e.object.material=this.discardMat))}finish(){this.lights.forEach((e=>e.object.intensity=e.intensity)),this.meshes.forEach((e=>e.object.material=e.material))}configure(e){this.object=e}update(e,n=100){if(!this.object)return;this.averagingWindow.value=n,this.object.material=this.targetMat;const t=this.buffer1Active?this.progressiveLightMap1:this.progressiveLightMap2,r=this.buffer1Active?this.progressiveLightMap2:this.progressiveLightMap1,o=this.scene.background;this.scene.background=null,this.renderer.setRenderTarget(t),this.previousShadowMap.value=r.texture,this.buffer1Active=!this.buffer1Active,this.renderer.render(this.scene,e),this.renderer.setRenderTarget(null),this.scene.background=o}}const re=(e,n)=>{"updateRanges"in e?e.updateRanges[0]=n:e.updateRange=n},oe=new w,ae=new x,ie=new R,se=new x,le=new R,ce=new x,me=e=>class extends e{constructor(){super();const e=parseInt(_.replace(/\D+/g,""))>=154?"opaque_fragment":"output_fragment";this.onBeforeCompile=n=>{n.vertexShader="attribute float cloudOpacity;\n               varying float vOpacity;\n              "+n.vertexShader.replace("#include <fog_vertex>","#include <fog_vertex>\n                 vOpacity = cloudOpacity;\n                "),n.fragmentShader="varying float vOpacity;\n              "+n.fragmentShader.replace(`#include <${e}>`,`#include <${e}>\n                 gl_FragColor = vec4(outgoingLight, diffuseColor.a * vOpacity);\n                `)}}};class de extends l{constructor({limit:e=200,range:n,material:t=F,texture:r,frustumCulled:o=!0}={}){super(),this.name="Clouds",this.ref=this;const a=new f(1,1),i=new Float32Array(Array.from({length:e},(()=>1))),s=new Float32Array(Array.from({length:e},(()=>[1,1,1])).flat()),l=new A(i,1);l.setUsage(k),a.setAttribute("cloudOpacity",l);const c=new(me(t));c.map=r,c.transparent=!0,c.depthWrite=!1,c.needsUpdate=!0,this.cloudMaterial=c,this.instance=new j(a,c,e);const m=this.instance;m.matrixAutoUpdate=!1,m.frustumCulled=o,m.instanceColor=new A(s,3),m.instanceColor.setUsage(k),this.add(m);const d=[],u=()=>{const e=d.length;let n=0;for(let t=0;t<this.ref.children.length;t++){const e=this.ref.children[t];e.cloudStateArray&&(n+=e.cloudStateArray.length)}if(e===n)return d;d.length=0;for(let t=0;t<this.ref.children.length;t++){const e=this.ref.children[t];e.cloudStateArray&&d.push(...e.cloudStateArray)}return p(),d},p=()=>{const t=Math.min(e,void 0!==n?n:e,d.length);m.count=t,re(m.instanceMatrix,{offset:0,count:16*t}),m.instanceColor&&re(m.instanceColor,{offset:0,count:3*t}),re(m.geometry.attributes.cloudOpacity,{offset:0,count:t})};let h,v=0,g=0;const w=new R,y=new x(0,0,1),P=new x;this.update=(e,n,t)=>{v=n,oe.copy(m.matrixWorld).invert(),e.matrixWorld.decompose(se,le,ce);const r=u();for(g=0;g<r.length;g++)h=r[g],h.ref.matrixWorld.decompose(ae,ie,ce),ae.add(P.copy(h.position).applyQuaternion(ie).multiply(ce)),ie.copy(le).multiply(w.setFromAxisAngle(y,h.rotation+=t*h.rotationFactor)),ce.multiplyScalar(h.volume+(1+Math.sin(v*h.density*h.speed))/2*h.growth),h.matrix.compose(ae,ie,ce).premultiply(oe),h.dist=ae.distanceTo(se);for(r.sort(((e,n)=>n.dist-e.dist)),g=0;g<r.length;g++)h=r[g],i[g]=h.opacity*(h.dist<h.fade-1?h.dist/h.fade:1),m.setMatrixAt(g,h.matrix),m.setColorAt(g,h.color);m.geometry.attributes.cloudOpacity.needsUpdate=!0,m.instanceMatrix.needsUpdate=!0,m.instanceColor&&(m.instanceColor.needsUpdate=!0)}}}let ue=0;class fe extends l{constructor({opacity:e=1,speed:n=0,bounds:t=(new x).fromArray([5,1,1]),segments:r=20,color:o=new g("#ffffff"),fade:a=10,volume:i=6,smallestVolume:s=.25,distribute:l=null,growth:c=4,concentrate:m="inside",seed:d=Math.random()}={}){super(),this.name="cloud_"+ue++,this.seed=d,this.segments=r,this.bounds=t,this.concentrate=m,this.volume=i,this.smallestVolume=s,this.distribute=l,this.growth=c,this.speed=n,this.fade=a,this.opacity=e,this.color=o,this.ref=this,this.cloudStateArray=[],this.updateCloud()}updateCloudStateArray(){if(this.cloudStateArray.length===this.segments)return;const{segments:e,uuid:n}=this;if(this.cloudStateArray.length>this.segments)this.cloudStateArray.splice(0,this.cloudStateArray.length-this.segments);else for(let t=this.cloudStateArray.length;t<e;t++)this.cloudStateArray.push({segments:e,bounds:new x(1,1,1),position:new x,uuid:n,index:t,ref:this,dist:0,matrix:new w,volume:0,length:0,speed:0,growth:0,opacity:1,fade:0,density:0,rotation:t*(Math.PI/e),rotationFactor:0,color:new g})}updateCloud(){const{volume:e,color:n,speed:t,growth:r,opacity:o,fade:a,bounds:i,seed:s,cloudStateArray:l,distribute:c,segments:m,concentrate:d,smallestVolume:u}=this;this.updateCloudStateArray();let f=0;function p(){const e=1e4*Math.sin(s+f);return f++,e-Math.floor(e)}l.forEach(((s,l)=>{s.segments=m,s.volume=e,s.color=n,s.speed=t,s.growth=r,s.opacity=o,s.fade=a,s.bounds.copy(i),s.density=Math.max(.5,p()),s.rotationFactor=Math.max(.2,.5*p())*t;const f=null==c?void 0:c(s,l);var h;(f||m>1)&&s.position.copy(s.bounds).multiply(null!==(h=null==f?void 0:f.point)&&void 0!==h?h:{x:2*p()-1,y:2*p()-1,z:2*p()-1});const v=Math.abs(s.position.x),g=Math.abs(s.position.y),x=Math.abs(s.position.z),w=Math.max(v,g,x);s.length=1,v===w&&(s.length-=v/s.bounds.x),g===w&&(s.length-=g/s.bounds.y),x===w&&(s.length-=x/s.bounds.z),s.volume=(void 0!==(null==f?void 0:f.volume)?f.volume:Math.max(Math.max(0,u),"random"===d?p():"inside"===d?s.length:1-s.length))*e}))}}const pe=({startFrame:e,endFrame:n,fps:t,frameName:r,textureDataURL:o,textureImageURL:a,loop:i,numberOfFrames:s,autoPlay:c,animationNames:m,onStart:d,onEnd:p,onLoopEnd:h,onFrame:v,play:g,pause:w,flipX:y,alphaTest:P,asSprite:S})=>{let M={frames:[],meta:{version:"1.0",size:{w:1,h:1},scale:"1"}},C=new O;const b=new I({toneMapped:!1,transparent:!0,map:C,alphaTest:P}),D=new N({toneMapped:!1,side:U,map:C,transparent:!0,alphaTest:P}),T=new W(b),z=new u(new f(1,1),D);let _=b,F=T;const A=new l;A.add(F);let k=window.performance.now(),j=0,R=r||"";const E=1e3/t,V=new x(1,1,1),G=e=>{V.copy(e)},$=y?-1:1;let K=S;K=K,K?(_=b,F=T,A.add(T),A.remove(z)):(_=D,F=z,A.remove(T),A.add(z));const X=(e,n)=>{const t=n/e;return F.scale.set(1,t,1),F.scale},q=(e,n)=>{if(null===e){if(n&&s){const e=n.image.width,t=n.image.height,r=e/s,o=t;if(M={frames:[],meta:{version:"1.0",size:{w:e,h:t},scale:"1"}},parseInt(r.toString(),10)===r)for(let n=0;n<s;n++)M.frames.push({frame:{x:n*r,y:0,w:r,h:o},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:r,h:o},sourceSize:{w:r,h:t}})}}else if(n){M=e,M.frames=Array.isArray(e.frames)?e.frames:H();const{w:t,h:r}=Y(e.frames).sourceSize,o=X(t,r);G(o),_&&(_.map=n)}var t;n.premultiplyAlpha=!1,C=t=n,_&&(_.map=t),Q()},H=()=>{const e={},n=M,t=m;if(t)for(let r=0;r<t.length;r++){e[t[r]]=[];for(const o in n.frames){const a=n.frames[o],i=a.frame,s=i.x,l=i.y,c=i.w,m=i.h,d=a.sourceSize.w,u=a.sourceSize.h;"string"==typeof o&&-1!==o.toLowerCase().indexOf(t[r].toLowerCase())&&e[t[r]].push({x:s,y:l,w:c,h:m,frame:i,sourceSize:{w:d,h:u}})}}return e},Q=()=>{if(!M||!_.map)return;const{meta:{size:e},frames:n}=M,{w:t,h:o}=Array.isArray(n)?n[0].sourceSize:r&&n[r]?n[r][0].sourceSize:{w:0,h:0};_.map.wrapS=_.map.wrapT=L,_.map.center.set(0,0),_.map.repeat.set(1*$/(e.w/t),1/(e.h/o));const a=1/((e.h-1)/o);_.map.offset.x=0,_.map.offset.y=1-a,d&&d({currentFrameName:r,currentFrame:j})},Y=e=>{if(Array.isArray(e))return e[0];if("object"==typeof e&&null!==e){return e[Object.keys(e)[0]][0]}return{w:0,h:0}};return{group:A,init:async()=>{await async function(e,n,t){const r=new B,o=fetch(e).then((e=>e.json())),a=new Promise((e=>{r.load(n,e)}));await Promise.all([o,a]).then((e=>{t(e[0],e[1])}))}(o,a,q)},update:()=>{var t,o;null!=(t=M)&&t.frames&&null!=(o=_)&&o.map&&(w||((()=>{if(!M||!_.map)return;const t=window.performance.now(),o=t-k,{meta:{size:a},frames:i}=M,{w:s,h:l}=Y(i).sourceSize,c=Array.isArray(i)?i:r?i[r]:[];let m=0,d=0;const u=n||c.length-1;if(j>u&&(j=e,null==h||h({currentFrameName:r,currentFrame:j})),o<=E)return;k=t-o%E,X(s,l);const f=(a.w-1)/s,p=(a.h-1)/l,{frame:{x:v,y:g},sourceSize:{w:x,h:w}}=c[j],y=1/f,P=1/p;m=$>0?y*(v/x):y*(v/x)-_.map.repeat.x,d=Math.abs(1-P)-P*(g/w),_.map.offset.x=m,_.map.offset.y=d,j+=1})(),v&&v({currentFrameName:R,currentFrame:j})))},playAnimation:()=>{w=!1},pauseAnimation:()=>{w=!0},setFrameName:e=>{R!==(r=e)&&r&&(j=0,R=r)}}},he=K({screenspace:!1,color:new g("black"),opacity:1,thickness:.05,size:new G},"\n   #include <common>\n   #include <morphtarget_pars_vertex>\n   #include <skinning_pars_vertex>\n   uniform float thickness;\n   uniform float screenspace;\n   uniform vec2 size;\n   void main() {\n     #if defined (USE_SKINNING)\n\t   #include <beginnormal_vertex>\n       #include <morphnormal_vertex>\n       #include <skinbase_vertex>\n       #include <skinnormal_vertex>\n       #include <defaultnormal_vertex>\n     #endif\n     #include <begin_vertex>\n\t   #include <morphtarget_vertex>\n\t   #include <skinning_vertex>\n     #include <project_vertex>\n     vec4 tNormal = vec4(normal, 0.0);\n     vec4 tPosition = vec4(transformed, 1.0);\n     #ifdef USE_INSTANCING\n       tNormal = instanceMatrix * tNormal;\n       tPosition = instanceMatrix * tPosition;\n     #endif\n     if (screenspace == 0.0) {\n       vec3 newPosition = tPosition.xyz + tNormal.xyz * thickness;\n       gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0); \n     } else {\n       vec4 clipPosition = projectionMatrix * modelViewMatrix * tPosition;\n       vec4 clipNormal = projectionMatrix * modelViewMatrix * tNormal;\n       vec2 offset = normalize(clipNormal.xy) * thickness / size * clipPosition.w * 2.0;\n       clipPosition.xy += offset;\n       gl_Position = clipPosition;\n     }\n   }",`\n   uniform vec3 color;\n   uniform float opacity;\n   void main(){\n     gl_FragColor = vec4(color, opacity);\n     #include <tonemapping_fragment>\n     #include <${parseInt(_.replace(/\D+/g,""))>=154?"colorspace_fragment":"encodings_fragment"}>\n   }`);function ve({color:e=new g("black"),opacity:n=1,transparent:t=!1,screenspace:r=!1,toneMapped:o=!0,polygonOffset:a=!1,polygonOffsetFactor:i=0,renderOrder:s=0,thickness:c=.05,angle:m=Math.PI,gl:d}={}){const f=new l;let p={color:e,opacity:n,transparent:t,screenspace:r,toneMapped:o,polygonOffset:a,polygonOffsetFactor:i,renderOrder:s,thickness:c,angle:m};function h(e){const n=f.parent;if(f.clear(),n&&n.geometry){let t;const r=new he({side:z});n.skeleton?(t=new E,t.material=r,t.bind(n.skeleton,n.bindMatrix),f.add(t)):n.isInstancedMesh?(t=new j(n.geometry,r,n.count),t.instanceMatrix=n.instanceMatrix,f.add(t)):(t=new u,t.material=r,f.add(t)),t.geometry=e?V(n.geometry,e):n.geometry}}function v(e){p={...p,...e};const n=f.children[0];if(n){const{transparent:e,thickness:t,color:r,opacity:o,screenspace:a,toneMapped:i,polygonOffset:s,polygonOffsetFactor:l,renderOrder:c}=p,m=new G;!d&&p.screenspace&&console.warn('Outlines: "screenspace" requires a WebGLRenderer instance to calculate the outline size'),d&&d.getSize(m),Object.assign(n.material,{transparent:e,thickness:t,color:r,opacity:o,size:m,screenspace:a,toneMapped:i,polygonOffset:s,polygonOffsetFactor:l}),void 0!==c&&(n.renderOrder=c)}}return{group:f,updateProps(e){var n;const t=null!==(n=e.angle)&&void 0!==n?n:p.angle;t!==p.angle&&h(t),v(e)},generate(){h(p.angle),v(p)}}}const ge=K({cellSize:.5,sectionSize:1,fadeDistance:100,fadeStrength:1,cellThickness:.5,sectionThickness:1,cellColor:new g,sectionColor:new g,infiniteGrid:!1,followCamera:!1,worldCamProjPosition:new x,worldPlanePosition:new x},"\n      varying vec3 localPosition;\n      varying vec4 worldPosition;\n  \n      uniform vec3 worldCamProjPosition;\n      uniform vec3 worldPlanePosition;\n      uniform float fadeDistance;\n      uniform bool infiniteGrid;\n      uniform bool followCamera;\n  \n      void main() {\n        localPosition = position.xzy;\n        if (infiniteGrid) localPosition *= 1.0 + fadeDistance;\n        \n        worldPosition = modelMatrix * vec4(localPosition, 1.0);\n        if (followCamera) {\n          worldPosition.xyz += (worldCamProjPosition - worldPlanePosition);\n          localPosition = (inverse(modelMatrix) * worldPosition).xyz;\n        }\n  \n        gl_Position = projectionMatrix * viewMatrix * worldPosition;\n      }\n    ",`\n      varying vec3 localPosition;\n      varying vec4 worldPosition;\n  \n      uniform vec3 worldCamProjPosition;\n      uniform float cellSize;\n      uniform float sectionSize;\n      uniform vec3 cellColor;\n      uniform vec3 sectionColor;\n      uniform float fadeDistance;\n      uniform float fadeStrength;\n      uniform float cellThickness;\n      uniform float sectionThickness;\n  \n      float getGrid(float size, float thickness) {\n        vec2 r = localPosition.xz / size;\n        vec2 grid = abs(fract(r - 0.5) - 0.5) / fwidth(r);\n        float line = min(grid.x, grid.y) + 1.0 - thickness;\n        return 1.0 - min(line, 1.0);\n      }\n  \n      void main() {\n        float g1 = getGrid(cellSize, cellThickness);\n        float g2 = getGrid(sectionSize, sectionThickness);\n  \n        float dist = distance(worldCamProjPosition, worldPosition.xyz);\n        float d = 1.0 - min(dist / fadeDistance, 1.0);\n        vec3 color = mix(cellColor, sectionColor, min(1.0, sectionThickness * g2));\n  \n        gl_FragColor = vec4(color, (g1 + g2) * pow(d, fadeStrength));\n        gl_FragColor.a = mix(0.75 * gl_FragColor.a, gl_FragColor.a, g2);\n        if (gl_FragColor.a <= 0.0) discard;\n  \n        #include <tonemapping_fragment>\n        #include <${parseInt(_.replace(/\D+/g,""))>=154?"colorspace_fragment":"encodings_fragment"}>\n      }\n    `),xe=({args:e=[1,1],cellColor:n=new g("#000000"),sectionColor:t=new g("#2080ff"),cellSize:r=.5,sectionSize:o=1,followCamera:a=!1,infiniteGrid:i=!1,fadeDistance:s=100,fadeStrength:l=1,cellThickness:c=.5,sectionThickness:m=1,side:d=z}={})=>{const p=new ge({transparent:!0,side:d,...{cellSize:r,sectionSize:o,cellColor:n,sectionColor:t,cellThickness:c,sectionThickness:m},...{fadeDistance:s,fadeStrength:l,infiniteGrid:i,followCamera:a}}),h=new f(e[0],e[1]),v=new u(h,p);v.frustumCulled=!1;const w=new C,y=new x(0,1,0),P=new x(0,0,0);return{mesh:v,update:e=>{if(!v.parent)return;w.setFromNormalAndCoplanarPoint(y,P).applyMatrix4(v.matrixWorld);const n=v.material,t=n.uniforms.worldCamProjPosition,r=n.uniforms.worldPlanePosition;w.projectPoint(e.position,t.value),r.value.set(0,0,0).applyMatrix4(v.matrixWorld)}}};class we extends ${constructor({samples:e=6,transmissionSampler:n=!1,chromaticAberration:t=.05,transmission:r=0,_transmission:o=1,transmissionMap:a=null,roughness:i=0,thickness:s=0,thicknessMap:l=null,attenuationDistance:c=1/0,attenuationColor:m=new g("white"),anisotropicBlur:d=.1,time:u=0,distortion:f=0,distortionScale:p=.5,temporalDistortion:h=0,buffer:v=null}={}){super(),this.uniforms={chromaticAberration:{value:t},transmission:{value:r},_transmission:{value:o},transmissionMap:{value:a},roughness:{value:i},thickness:{value:s},thicknessMap:{value:l},attenuationDistance:{value:c},attenuationColor:{value:m},anisotropicBlur:{value:d},time:{value:u},distortion:{value:f},distortionScale:{value:p},temporalDistortion:{value:h},buffer:{value:v}},this.onBeforeCompile=t=>{t.uniforms={...t.uniforms,...this.uniforms},n?t.defines.USE_SAMPLER="":t.defines.USE_TRANSMISSION="",t.fragmentShader="\n      uniform float chromaticAberration;         \n      uniform float anisotropicBlur;      \n      uniform float time;\n      uniform float distortion;\n      uniform float distortionScale;\n      uniform float temporalDistortion;\n      uniform sampler2D buffer;\n\n      vec3 random3(vec3 c) {\n        float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n        vec3 r;\n        r.z = fract(512.0*j);\n        j *= .125;\n        r.x = fract(512.0*j);\n        j *= .125;\n        r.y = fract(512.0*j);\n        return r-0.5;\n      }\n\n      uint hash( uint x ) {\n        x += ( x << 10u );\n        x ^= ( x >>  6u );\n        x += ( x <<  3u );\n        x ^= ( x >> 11u );\n        x += ( x << 15u );\n        return x;\n      }\n\n      // Compound versions of the hashing algorithm I whipped together.\n      uint hash( uvec2 v ) { return hash( v.x ^ hash(v.y)                         ); }\n      uint hash( uvec3 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z)             ); }\n      uint hash( uvec4 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z) ^ hash(v.w) ); }\n\n      // Construct a float with half-open range [0:1] using low 23 bits.\n      // All zeroes yields 0.0, all ones yields the next smallest representable value below 1.0.\n      float floatConstruct( uint m ) {\n        const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask\n        const uint ieeeOne      = 0x3F800000u; // 1.0 in IEEE binary32\n        m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)\n        m |= ieeeOne;                          // Add fractional part to 1.0\n        float  f = uintBitsToFloat( m );       // Range [1:2]\n        return f - 1.0;                        // Range [0:1]\n      }\n\n      // Pseudo-random value in half-open range [0:1].\n      float randomBase( float x ) { return floatConstruct(hash(floatBitsToUint(x))); }\n      float randomBase( vec2  v ) { return floatConstruct(hash(floatBitsToUint(v))); }\n      float randomBase( vec3  v ) { return floatConstruct(hash(floatBitsToUint(v))); }\n      float randomBase( vec4  v ) { return floatConstruct(hash(floatBitsToUint(v))); }\n      float rand(float seed) {\n        float result = randomBase(vec3(gl_FragCoord.xy, seed));\n        return result;\n      }\n\n      const float F3 =  0.3333333;\n      const float G3 =  0.1666667;\n\n      float snoise(vec3 p) {\n        vec3 s = floor(p + dot(p, vec3(F3)));\n        vec3 x = p - s + dot(s, vec3(G3));\n        vec3 e = step(vec3(0.0), x - x.yzx);\n        vec3 i1 = e*(1.0 - e.zxy);\n        vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n        vec3 x1 = x - i1 + G3;\n        vec3 x2 = x - i2 + 2.0*G3;\n        vec3 x3 = x - 1.0 + 3.0*G3;\n        vec4 w, d;\n        w.x = dot(x, x);\n        w.y = dot(x1, x1);\n        w.z = dot(x2, x2);\n        w.w = dot(x3, x3);\n        w = max(0.6 - w, 0.0);\n        d.x = dot(random3(s), x);\n        d.y = dot(random3(s + i1), x1);\n        d.z = dot(random3(s + i2), x2);\n        d.w = dot(random3(s + 1.0), x3);\n        w *= w;\n        w *= w;\n        d *= w;\n        return dot(d, vec4(52.0));\n      }\n\n      float snoiseFractal(vec3 m) {\n        return 0.5333333* snoise(m)\n              +0.2666667* snoise(2.0*m)\n              +0.1333333* snoise(4.0*m)\n              +0.0666667* snoise(8.0*m);\n      }\n"+t.fragmentShader,t.fragmentShader=t.fragmentShader.replace("#include <transmission_pars_fragment>","\n        #ifdef USE_TRANSMISSION\n          // Transmission code is based on glTF-Sampler-Viewer\n          // https://github.com/KhronosGroup/glTF-Sample-Viewer\n          uniform float _transmission;\n          uniform float thickness;\n          uniform float attenuationDistance;\n          uniform vec3 attenuationColor;\n          #ifdef USE_TRANSMISSIONMAP\n            uniform sampler2D transmissionMap;\n          #endif\n          #ifdef USE_THICKNESSMAP\n            uniform sampler2D thicknessMap;\n          #endif\n          uniform vec2 transmissionSamplerSize;\n          uniform sampler2D transmissionSamplerMap;\n          uniform mat4 modelMatrix;\n          uniform mat4 projectionMatrix;\n          varying vec3 vWorldPosition;\n          vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n            // Direction of refracted light.\n            vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n            // Compute rotation-independant scaling of the model matrix.\n            vec3 modelScale;\n            modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n            modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n            modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n            // The thickness is specified in local space.\n            return normalize( refractionVector ) * thickness * modelScale;\n          }\n          float applyIorToRoughness( const in float roughness, const in float ior ) {\n            // Scale roughness with IOR so that an IOR of 1.0 results in no microfacet refraction and\n            // an IOR of 1.5 results in the default amount of microfacet refraction.\n            return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n          }\n          vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n            float framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );            \n            #ifdef USE_SAMPLER\n              #ifdef texture2DLodEXT\n                return texture2DLodEXT(transmissionSamplerMap, fragCoord.xy, framebufferLod);\n              #else\n                return texture2D(transmissionSamplerMap, fragCoord.xy, framebufferLod);\n              #endif\n            #else\n              return texture2D(buffer, fragCoord.xy);\n            #endif\n          }\n          vec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n            if ( isinf( attenuationDistance ) ) {\n              // Attenuation distance is +∞, i.e. the transmitted color is not attenuated at all.\n              return radiance;\n            } else {\n              // Compute light attenuation using Beer's law.\n              vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n              vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance ); // Beer's law\n              return transmittance * radiance;\n            }\n          }\n          vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n            const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n            const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n            const in vec3 attenuationColor, const in float attenuationDistance ) {\n            vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n            vec3 refractedRayExit = position + transmissionRay;\n            // Project refracted vector on the framebuffer, while mapping to normalized device coordinates.\n            vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n            vec2 refractionCoords = ndcPos.xy / ndcPos.w;\n            refractionCoords += 1.0;\n            refractionCoords /= 2.0;\n            // Sample framebuffer to get pixel the refracted ray hits.\n            vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n            vec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n            // Get the specular component.\n            vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n            return vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n          }\n        #endif\n"),t.fragmentShader=t.fragmentShader.replace("#include <transmission_fragment>",`  \n        // Improve the refraction to use the world pos\n        material.transmission = _transmission;\n        material.transmissionAlpha = 1.0;\n        material.thickness = thickness;\n        material.attenuationDistance = attenuationDistance;\n        material.attenuationColor = attenuationColor;\n        #ifdef USE_TRANSMISSIONMAP\n          material.transmission *= texture2D( transmissionMap, vUv ).r;\n        #endif\n        #ifdef USE_THICKNESSMAP\n          material.thickness *= texture2D( thicknessMap, vUv ).g;\n        #endif\n        \n        vec3 pos = vWorldPosition;\n        float runningSeed = 0.0;\n        vec3 v = normalize( cameraPosition - pos );\n        vec3 n = inverseTransformDirection( normal, viewMatrix );\n        vec3 transmission = vec3(0.0);\n        float transmissionR, transmissionB, transmissionG;\n        float randomCoords = rand(runningSeed++);\n        float thickness_smear = thickness * max(pow(roughnessFactor, 0.33), anisotropicBlur);\n        vec3 distortionNormal = vec3(0.0);\n        vec3 temporalOffset = vec3(time, -time, -time) * temporalDistortion;\n        if (distortion > 0.0) {\n          distortionNormal = distortion * vec3(snoiseFractal(vec3((pos * distortionScale + temporalOffset))), snoiseFractal(vec3(pos.zxy * distortionScale - temporalOffset)), snoiseFractal(vec3(pos.yxz * distortionScale + temporalOffset)));\n        }\n        for (float i = 0.0; i < ${e}.0; i ++) {\n          vec3 sampleNorm = normalize(n + roughnessFactor * roughnessFactor * 2.0 * normalize(vec3(rand(runningSeed++) - 0.5, rand(runningSeed++) - 0.5, rand(runningSeed++) - 0.5)) * pow(rand(runningSeed++), 0.33) + distortionNormal);\n          transmissionR = getIBLVolumeRefraction(\n            sampleNorm, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n            pos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness  + thickness_smear * (i + randomCoords) / float(${e}),\n            material.attenuationColor, material.attenuationDistance\n          ).r;\n          transmissionG = getIBLVolumeRefraction(\n            sampleNorm, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n            pos, modelMatrix, viewMatrix, projectionMatrix, material.ior  * (1.0 + chromaticAberration * (i + randomCoords) / float(${e})) , material.thickness + thickness_smear * (i + randomCoords) / float(${e}),\n            material.attenuationColor, material.attenuationDistance\n          ).g;\n          transmissionB = getIBLVolumeRefraction(\n            sampleNorm, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n            pos, modelMatrix, viewMatrix, projectionMatrix, material.ior * (1.0 + 2.0 * chromaticAberration * (i + randomCoords) / float(${e})), material.thickness + thickness_smear * (i + randomCoords) / float(${e}),\n            material.attenuationColor, material.attenuationDistance\n          ).b;\n          transmission.r += transmissionR;\n          transmission.g += transmissionG;\n          transmission.b += transmissionB;\n        }\n        transmission /= ${e}.0;\n        totalDiffuse = mix( totalDiffuse, transmission.rgb, material.transmission );\n`)},Object.keys(this.uniforms).forEach((e=>Object.defineProperty(this,e,{get:()=>this.uniforms[e].value,set:n=>this.uniforms[e].value=n})))}}export{de as C,xe as G,we as M,ve as O,te as P,pe as S,ee as a,fe as b,Z as c,ne as d};
