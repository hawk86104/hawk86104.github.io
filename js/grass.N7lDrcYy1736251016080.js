import{_ as t,C as n,a0 as e,as as o,ai as r}from"./three.RuuDeeIf1736251016080.js";import{e as i,b as a,U as s,c}from"./@tresjs.8C7OKmBm1736251016080.js";import"./index.v4ddpCyA1736251016080.js";import{c as l}from"./simplex-noise.jB2HxhHB1736251016080.js";import{C as u}from"./index.7xUuYu7h1736251016080.js";import{d as f,a4 as p,o as h,D as m,J as v,u as d,r as g,f as x,g as w,j as y,aj as b,ak as _,al as z}from"./@vue.-Mz_IXfk1736251016080.js";import{_ as j}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.GNJkq5Pu1736251016080.js";import"./@vueuse.HhUha1mw1736251016080.js";import"./lamina.ZJPgv6ZY1736251016080.js";import"./glsl-tokenizer.AUwyQM8Q1736251016080.js";import"./@amap.RhAVlD5U1736251016080.js";import"./glsl-token-descope.xae98sOM1736251016080.js";import"./glsl-token-depth.ILKRVgii1736251016080.js";import"./glsl-token-scope.aRevXs5U1736251016080.js";import"./glsl-token-properties.vLtPyA8X1736251016080.js";import"./glsl-token-assignments.I8rdeLA61736251016080.js";import"./glsl-token-string.Xqw5nt6H1736251016080.js";import"./glsl-token-functions.JW-gfxEy1736251016080.js";import"./object-hash.m8vc-d4L1736251016080.js";import"./jszip.BteQlHnJ1736251016080.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.QNejSY5O1736251016080.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.AWp-lCZW1736251016080.js";import"./three-stdlib.9SgBjS5j1736251016080.js";import"./@pmndrs.eJMj1neG1736251016080.js";import"./utils.dUTkRvGE1736251016080.js";const M=D;function A(){const t=["instances","trace","log","__proto__","alphaMap","map","length","warn","cos","5823670DEQOCt","sin","console","TresInstancedBufferGeometry","1549479ZzjHiy","position","847472TriGWN","return (function() ","halfRootAngleCosF32","needsUpdate","call","material","attributes-halfRootAngleSin","error","InstancedBufferAttribute","array","table","debu","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","action","1580242xIFEow","gger","index","attributes-halfRootAngleCos","lookAt","DoubleSide","width","1883rpWaCZ","uniforms","value","computeVertexNormals","convertSRGBToLinear","constructor","attributes-position","Vector4","halfRootAngleSinF32","stretchesF32","function *\\( *\\)","apply","stateObject","offsetsF32","geometry","test","6990050lzUJuL","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","attributes-orientation","push","TresMeshStandardMaterial","attributes","834ttvtlw","Vector3","PlaneGeometry","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","TresMesh","toString","random","init","side","while (true) {}","attributes-uv","joints","orientationsF32","bind","set","input","2UhpAZZ","toneMapped","attributes-offset","18PGmQmv",'{}.constructor("return this")( )',"normalize","2279260ZKeomO"];return(A=function(){return t})()}!function(t,n){const e=D,o=A();for(;;)try{if(967281===-parseInt(e(297))/1+-parseInt(e(261))/2*(parseInt(e(281))/3)+parseInt(e(267))/4+parseInt(e(277))/5+-parseInt(e(245))/6*(-parseInt(e(304))/7)+-parseInt(e(283))/8+-parseInt(e(264))/9*(-parseInt(e(320))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const I=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){I(this,(function(){const t=D,n=new RegExp(t(314)),e=new RegExp(t(321),"i"),o=E(t(252));n[t(319)](o+"chain")&&e[t(319)](o+t(260))?E():o("0")}))()}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[D(315)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();C(void 0,(function(){const t=D,n=function(){const t=D;let n;try{n=Function(t(284)+t(265)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(279)]||{},o=[t(270),t(275),"info",t(290),"exception",t(293),t(269)];for(let r=0;r<o[t(274)];r++){const n=C[t(309)].prototype.bind(C),i=o[r],a=e[i]||n;n[t(271)]=C.bind(C),n[t(250)]=a.toString[t(258)](a),e[i]=n}}))();const S=[M(288)],k=["index",M(310),M(255),M(263),M(322),"attributes-stretch",M(289),M(300)],F=[M(318)],R=[M(253)];function D(t,n){const e=A();return(D=function(t,n){return e[t-=244]})(t,n)}const T=f({__name:"grass",props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(r){const s=M;let c,f;const g=([c,f]=p((()=>a({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),c=await c,f(),c),x=r,w=l(Math[s(251)]);function y(n,e){const o=s,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,i=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,a=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,c=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(311)])(r,i,a,c)}function b(t,n){var e=2*w(t/50,n/50);return e+=4*w(t/100,n/100),e+=.2*w(t/10,n/10)}const _=function(n,e){const r=s,i=[],a=[],c=[],l=[],u=[];let f=new(t[r(311)]),p=new o;const h=-.25;for(let o=0;o<n;o++){const s=Math[r(251)]()*e-e/2,m=Math[r(251)]()*e-e/2,v=b(s,m);i.push(s,v,m);let d=Math.PI-Math.random()*(2*Math.PI);l[r(323)](Math.sin(.5*d)),u[r(323)](Math.cos(.5*d));let g=new(t[r(246)])(0,1,0),x=g.x*Math.sin(d/2),w=g.y*Math[r(278)](d/2),_=g.z*Math[r(278)](d/2),z=Math[r(276)](d/2);f[r(259)](x,w,_,z)[r(266)](),d=.5*Math[r(251)]()+h,g=new(t[r(246)])(1,0,0),x=g.x*Math.sin(d/2),w=g.y*Math.sin(d/2),_=g.z*Math.sin(d/2),z=Math[r(276)](d/2),p[r(259)](x,w,_,z)[r(266)](),f=y(f,p),d=.5*Math[r(251)]()+h,g=new(t[r(246)])(0,0,1),x=g.x*Math.sin(d/2),w=g.y*Math[r(278)](d/2),_=g.z*Math[r(278)](d/2),z=Math.cos(d/2),p.set(x,w,_,z)[r(266)](),f=y(f,p),a[r(323)](f.x,f.y,f.z,f.w),o<n/3?c[r(323)](1.8*Math.random()):c.push(Math[r(251)]())}return{offsetsF32:new(t[r(291)])(new Float32Array(i),3),orientationsF32:new(t[r(291)])(new Float32Array(a),4),stretchesF32:new(t[r(291)])(new Float32Array(c),1),halfRootAngleCosF32:new(t[r(291)])(new Float32Array(u),1),halfRootAngleSinF32:new(t[r(291)])(new Float32Array(l),1)}}(x[s(268)],x.width),z=new(t[s(247)])(x.bW,x.bH,1,x[s(256)]).translate(0,x.bH/2,0),j=new(t[s(247)])(x[s(303)],x.width,32,32);j[s(301)](new(t[s(246)])(0,1,0));const A=j[s(244)][s(282)];for(let t=0;t<A[s(292)][s(274)];t+=3)A[s(292)][t+1]=b(A[s(292)][t],A.array[t+2]);j[s(244)][s(282)][s(286)]=!0,j[s(307)]();const I=new(u({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new n(.3,.9,0)[s(308)](),bottomColor:new n(0,.2,0).convertSRGBToLinear()},s(295),s(248),(n=>{const e=s;n[e(253)]=t[e(302)]})));I[s(273)]=g[s(273)],I[s(272)]=g[s(272)],I[s(262)]=!1;const{onLoop:C}=i();return C((({elapsed:t})=>{const n=s;I[n(305)].time[n(306)]=t/4})),(t,n)=>{const o=s;return h(),m("TresGroup",null,[v(o(249),{material:d(I)},[v(o(280),{index:d(z)[o(299)],"attributes-position":d(z)[o(244)][o(282)],"attributes-uv":d(z)[o(244)].uv,"attributes-offset":d(_)[o(317)],"attributes-orientation":d(_)[o(257)],"attributes-stretch":d(_)[o(313)],"attributes-halfRootAngleSin":d(_)[o(312)],"attributes-halfRootAngleCos":d(_)[o(285)]},null,8,k)],8,S),v(o(249),{position:[0,0,0],geometry:d(j)},[v(o(324),{color:"#000f00",side:e},null,8,R)],8,F)])}}});function E(t){function n(t){const e=D;if("string"==typeof t)return function(t){}.constructor(e(254)).apply("counter");1!==(""+t/t)[e(274)]||t%20==0?function(){return!0}.constructor(e(294)+e(298))[e(287)](e(296)):function(){return!1}[e(309)](e(294)+"gger").apply(e(316)),n(++t)}try{if(t)return n;n(0)}catch(e){}}function O(){const t=["108eGCzlC","console","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","error","gger","62Acgoni","input","prototype","action","__proto__","info","function *\\( *\\)","warn","stateObject","apply","length",'{}.constructor("return this")( )',"counter","bind","2291450nMYTOV","9491GHjZNp","string","return (function() ","constructor","54187paUiPL","TresPerspectiveCamera","96UAipur","exception","2330640HJbmYb","init","32276ANXPzs","65277cpINzt","test","call","1261890UWeIiy","chain","debu","toString"];return(O=function(){return t})()}!function(t,n){const e=U,o=O();for(;;)try{if(152247===-parseInt(e(337))/1*(-parseInt(e(322))/2)+-parseInt(e(343))/3*(-parseInt(e(309))/4)+parseInt(e(313))/5+parseInt(e(317))/6*(-parseInt(e(341))/7)+-parseInt(e(307))/8+parseInt(e(310))/9+-parseInt(e(336))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const P=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[U(331)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function U(t,n){const e=O();return(U=function(t,n){return e[t-=306]})(t,n)}!function(){P(this,(function(){const t=U,n=new RegExp(t(328)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=G(t(308));n[t(311)](o+t(314))&&e[t(311)](o+t(323))?G():o("0")}))()}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[U(331)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();H(void 0,(function(){const t=U;let n;try{n=Function(t(339)+t(333)+");")()}catch(r){n=window}const e=n[t(318)]=n[t(318)]||{},o=["log",t(329),t(327),t(320),t(306),"table","trace"];for(let i=0;i<o.length;i++){const n=H[t(340)][t(324)][t(335)](H),r=o[i],a=e[r]||n;n[t(326)]=H[t(335)](H),n[t(316)]=a.toString[t(335)](a),e[r]=n}}))();const L=f({__name:"grass",setup(t){const n=g({alpha:!0,toneMapping:r,windowSize:!0,clearColor:6710886}),e=g({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=U;return h(),x(d(c),b(_(n)),{default:w((()=>[o[0]||(o[0]=v(r(342),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),y(d(s),b(_(e)),null,16),(h(),x(z,null,{default:w((()=>[y(T)])),_:1})),(h(),x(z,null,{default:w((()=>[y(d(j),{texture:r(319)})])),_:1}))])),_:1},16)}}});function G(t){function n(t){const e=U;if(typeof t===e(338))return function(t){}[e(340)]("while (true) {}")[e(331)](e(334));1!==(""+t/t)[e(332)]||t%20==0?function(){return!0}[e(340)]("debu"+e(321))[e(312)](e(325)):function(){return!1}[e(340)](e(315)+e(321))[e(331)](e(330)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{L as default};
