import{b as e,m as s,e as t,T as o,a as r}from"./@tresjs.CIKSfeCC1746335712058.js";import{l as n}from"./utils.D8s_SEFO1746335712058.js";import{f as i}from"./utils.DlDUSNyS1746335712058.js";import{a5 as a,b as p,a3 as l,H as m,o as c,F as u,X as d,e as h,I as f,f as j,J as y,N as g,m as T,u as v,d as b,r as w,h as M,j as L,ak as x,al as z,am as C}from"./@vue.DK6ok9LJ1746335712058.js";import{m as S}from"./d3-geo.D6Sx8H4d1746335712058.js";import{cu as k,ab as _,B,l as E,C as O,g as D,V as G,cF as P}from"./three.Bj3hPI0l1746335712058.js";import{c as F,d as H,a as I}from"./three-mesh-bvh.DG4TGIgZ1746335712058.js";import"./postprocessing.Dxg1zmor1746335712058.js";import"./@vueuse.BtSShokC1746335712058.js";import"./@fesjs.B__Hyo051746335712058.js";import"./vue-router.CeDYLsLY1746335712058.js";import"./lodash-es.BOsRjQhS1746335712058.js";import"./@qlin.q6OWdsQV1746335712058.js";import"./pinia.C9yokyLV1746335712058.js";import"./@babel.BPq7uOAK1746335712058.js";import"./@floating-ui.BFjFSAYt1746335712058.js";import"./@juggle.CcBCnTIR1746335712058.js";import"./@tweenjs.ULy8-5Ku1746335712058.js";import"./axios.CEYx3Qyl1746335712058.js";import"./axios.DLTVXJci1746335712058.js";import"./color.CRTR_j831746335712058.js";import"./@amap.CGUF9xH41746335712058.js";import"./color-string.D0yCRMkS1746335712058.js";import"./color-name.BQ5IbGbl1746335712058.js";import"./simple-swizzle.BhlXoyp51746335712058.js";import"./is-arrayish.CLsR9Wfx1746335712058.js";import"./color-convert.CFQyuyui1746335712058.js";import"./lodash.DV5cjME21746335712058.js";import"./d3-array.G5ptHY8Z1746335712058.js";const $=["position"],A=["blending","map"],q=["name","renderOrder","pCenter"],J=["args"],N=["color","side"],R=["renderOrder","position-z"],V=["position"],X=["renderOrder"],K=["position"],Q={__name:"jiangSuMapMesh",async setup(r){let b,w;B.prototype.computeBoundsTree=F,B.prototype.disposeBoundsTree=H,E.prototype.raycast=I;const M=([b,w]=a((()=>n("./plugins/simpleGIS/json/320000_full.json","features"))),b=await b,w(),b),{map:L}=([b,w]=a((()=>e({map:"./plugins/simpleGIS/image/icon.png"}))),b=await b,w(),b),x=M[0].properties.centroid,z=S();z.center(x).translate([0,0]);const C=[];M.forEach((e=>{const s=new O(`hsl( 16, ${30*Math.random()+55}%, ${30*Math.random()+55}%)`).getHex(),t=.3*Math.random()+.3,{centroid:o,oneCenter:r,center:n,name:i}=e.properties,{coordinates:a,type:p}=e.geometry,l=o||r||n||[0,0],m=z(l);m[1]=-m[1],m[2]=t,C.push({type:"Html",position:m,name:i});const c=z(l);c[1]=.2-c[1],c[2]=t+.22,C.push({type:"Sprite",position:c}),a.forEach((e=>{function o(e){const o=new P;e.forEach(((e,s)=>{const[t,r]=z(e);0===s?o.moveTo(t,-r):o.lineTo(t,-r)})),C.push({type:"Shape",shape:o,name:i,color:s,depth:t,pCenter:c});const r=[];e.forEach((e=>{const[s,t]=z(e);r.push(s,-t,0)})),C.push({type:"Line",points:new Float32Array(r),depth:t})}"MultiPolygon"===p&&e.forEach((e=>o(e))),"Polygon"===p&&o(e)}))}));const Q=p();l((()=>{Q.value&&((e=>{e.rotation.x=-Math.PI/2;const s=(new D).setFromObject(e).getCenter(new G),t=[0,0];e.position.x=e.position.x-s.x-t[0],e.position.z=e.position.z-s.z-t[1]})(Q.value),Q.value.children.forEach((e=>{"Mesh"===e.type&&e.geometry.computeBoundsTree()})))}));const U=e=>{e.object.material.opacity=.4},W=e=>{e.eventObject.material.opacity=1},{camera:Y,controls:Z}=s();let ee=null;const se=e=>{const s=new G;s.x=e.point.x,s.y=e.point.y+10,s.z=e.point.z,ee=i(Y,s,Z)},{onBeforeLoop:te}=t();te((()=>{ee?.update()}));const oe={wrapperClass:"wrapper",as:"div",center:!0,sprite:!0,prepend:!0,transform:!0};return(e,s)=>(c(),m("TresGroup",{ref_key:"tgRef",ref:Q},[(c(),m(u,null,d(C,((e,t)=>(c(),m(u,{key:`${t}`},["Html"===e.type?(c(),h(v(o),T({key:0,ref_for:!0},oe,{position:e.position}),{default:j((()=>[y("span",null,g(e.name),1)])),_:2},1040,["position"])):f("",!0),"Sprite"===e.type?(c(),m("TresSprite",{key:1,position:e.position,scale:.3,renderOrder:1e3},[y("TresSpriteMaterial",{color:16711680,blending:k,map:v(L)},null,8,A)],8,$)):f("",!0),"Shape"===e.type?(c(),m("TresMesh",{key:2,name:e.name,renderOrder:t,pCenter:e.pCenter,onPointerEnter:U,onPointerLeave:W,onClick:se},[y("TresExtrudeGeometry",{args:[e.shape,{depth:e.depth,bevelEnabled:!1}]},null,8,J),y("TresMeshStandardMaterial",{color:e.color,emissive:0,roughness:.45,metalness:.8,transparent:!0,side:_},null,8,N)],40,q)):f("",!0),"Line"===e.type?(c(),m(u,{key:3},[y("TresLine",{renderOrder:t,"position-z":e.depth+1e-4},[y("TresBufferGeometry",{position:[e.points,3]},null,8,V),s[0]||(s[0]=y("TresLineBasicMaterial",{color:16777215,linewidth:.5},null,-1))],8,R),y("TresLine",{renderOrder:t,"position-z":-1e-4},[y("TresBufferGeometry",{position:[e.points,3]},null,8,K),s[1]||(s[1]=y("TresLineBasicMaterial",{color:0,linewidth:.5},null,-1))],8,X)],64)):f("",!0)],64)))),64))],512))}},U=b({__name:"jiangSuMap",setup(e){const s=w({clearColor:"#ffdbd1",alpha:!0,antialias:!0}),t=w({enableDamping:!0,dampingFactor:.05,makeDefault:!0});return(e,o)=>{const n=M("TresCanvas");return c(),h(n,T(s,{"window-size":""}),{default:j((()=>[o[0]||(o[0]=y("TresPerspectiveCamera",{position:[0,12,0],fov:75,near:.1,far:1e3,up:[0,0,-1]},null,-1)),L(v(r),x(z(t)),null,16),o[1]||(o[1]=y("TresAmbientLight",{intensity:8.8},null,-1)),o[2]||(o[2]=y("TresDirectionalLight",{position:[0,10,5],intensity:.2},null,-1)),o[3]||(o[3]=y("TresDirectionalLight",{position:[0,10,-5],intensity:.2},null,-1)),o[4]||(o[4]=y("TresDirectionalLight",{position:[5,10,0],intensity:.2},null,-1)),o[5]||(o[5]=y("TresDirectionalLight",{position:[-5,10,0],intensity:.2},null,-1)),o[6]||(o[6]=y("TresGridHelper",{args:[20,10]},null,-1)),(c(),h(C,null,{default:j((()=>[L(Q)])),_:1}))])),_:1},16)}}});export{U as default};
