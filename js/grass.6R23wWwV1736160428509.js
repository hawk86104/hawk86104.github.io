import{_ as t,V as n,ab as e}from"./three.rmsIv-u_1736160428509.js";import{b as o,e as r,c as i,U as a}from"./@tresjs.8MtVPQyb1736160428509.js";import"./index.VTggza7v1736160428509.js";import{c as s}from"./simplex-noise.jB2HxhHB1736160428509.js";import{C as c}from"./index.er1mwMyA1736160428509.js";import{d as l,a6 as u,o as f,D as p,J as h,u as m,r as v,f as d,g,aj as x,ak as w,j as y,al as b}from"./@vue.4u_eOGex1736160428509.js";import{_}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.0g51_OGd1736160428509.js";import"./@vueuse.GObPVvIB1736160428509.js";import"./lamina.Boi3ofle1736160428509.js";import"./glsl-tokenizer.YxIzq-qR1736160428509.js";import"./@amap.uuGbEc9W1736160428509.js";import"./glsl-token-descope.jVXHqPvj1736160428509.js";import"./glsl-token-depth.llwbfWgv1736160428509.js";import"./glsl-token-scope.-GgbuPUQ1736160428509.js";import"./glsl-token-properties.doCnjA4P1736160428509.js";import"./glsl-token-assignments.UP_Fi_Ia1736160428509.js";import"./glsl-token-string.3bcsx6Kz1736160428509.js";import"./glsl-token-functions.VTBzkoh51736160428509.js";import"./object-hash.6_ROEVvk1736160428509.js";import"./jszip.gYriRClA1736160428509.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.EQCpyJnB1736160428509.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.QsGSKilG1736160428509.js";import"./three-stdlib.MDmepMCW1736160428509.js";import"./@pmndrs.4WMPGHRZ1736160428509.js";import"./utils.Vk2bnPWi1736160428509.js";const M=A;!function(t,n){const e=A,o=R();for(;;)try{if(804865===parseInt(e(183))/1*(-parseInt(e(185))/2)+parseInt(e(186))/3+parseInt(e(188))/4+-parseInt(e(190))/5+-parseInt(e(206))/6*(parseInt(e(158))/7)+parseInt(e(167))/8+-parseInt(e(205))/9*(parseInt(e(165))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[A(179)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){z(this,(function(){const t=A,n=new RegExp(t(155)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=F("init");n[t(204)](o+t(160))&&e[t(204)](o+t(180))?F():o("0")}))()}();const j=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[A(179)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function A(t,n){const e=R();return(A=function(t,n){return e[t-=137]})(t,n)}j(void 0,(function(){const t=A;let n;try{n=Function('return (function() {}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(176)]=n[t(176)]||{},o=[t(140),t(162),t(195),t(173),t(153),t(138),t(161)];for(let i=0;i<o[t(142)];i++){const n=j[t(137)][t(198)][t(147)](j),r=o[i],a=e[r]||n;n[t(192)]=j.bind(j),n.toString=a[t(149)][t(147)](a),e[r]=n}}))();const I=[M(187)],C=[M(169),"attributes-position","attributes-uv",M(207),"attributes-orientation",M(202),M(178),"attributes-halfRootAngleCos"],S=[M(175)],k=[M(210)];function R(){const t=["instances","49534iMOnqa","4403934Dyniyp","material","3011008wuvGsI","counter","674005dqYUKd","Vector3","__proto__","array","halfRootAngleCosF32","info","alphaMap","action","prototype","#000f00","string","set","attributes-stretch","push","test","9zTKjKO","4068lRuzDe","attributes-offset","uniforms","normalize","side","stretchesF32","toneMapped","time","debu","position","constructor","table","attributes","log","PlaneGeometry","length","lookAt","sin","Vector4","Color","bind","translate","toString","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","orientationsF32","width","exception","random","function *\\( *\\)","convertSRGBToLinear","TresMeshStandardMaterial","3563ESYWrF","value","chain","trace","warn","DoubleSide","TresGroup","18323610XngfDq","InstancedBufferAttribute","8161872JOzUnb","TresInstancedBufferGeometry","index","call","map","halfRootAngleSinF32","error","TresMesh","geometry","console","while (true) {}","attributes-halfRootAngleSin","apply","input","cos","needsUpdate","5HMqisp"];return(R=function(){return t})()}const D=l({__name:"grass",props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(e){const i=M;let a,l;const v=([a,l]=u((()=>o({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),a=await a,l(),a),d=e,g=s(Math[i(154)]);function x(n,e){const o=i,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,a=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,s=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,c=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(145)])(r,a,s,c)}function w(t,n){var e=2*g(t/50,n/50);return e+=4*g(t/100,n/100),e+=.2*g(t/10,n/10)}const y=function(e,o){const r=i,a=[],s=[],c=[],l=[],u=[];let f=new(t[r(145)]),p=new(t[r(145)]);const h=-.25;for(let i=0;i<e;i++){const m=Math.random()*o-o/2,v=Math[r(154)]()*o-o/2,d=w(m,v);a[r(203)](m,d,v);let g=Math.PI-Math[r(154)]()*(2*Math.PI);l[r(203)](Math[r(144)](.5*g)),u.push(Math[r(181)](.5*g));let y=new(t[r(191)])(0,1,0),b=y.x*Math[r(144)](g/2),_=y.y*Math.sin(g/2),M=y.z*Math[r(144)](g/2),z=Math.cos(g/2);f[r(201)](b,_,M,z)[r(209)](),g=.5*Math[r(154)]()+h,y=new(t[r(191)])(1,0,0),b=y.x*Math[r(144)](g/2),_=y.y*Math[r(144)](g/2),M=y.z*Math[r(144)](g/2),z=Math[r(181)](g/2),p[r(201)](b,_,M,z).normalize(),f=x(f,p),g=.5*Math[r(154)]()+h,y=new n(0,0,1),b=y.x*Math.sin(g/2),_=y.y*Math.sin(g/2),M=y.z*Math[r(144)](g/2),z=Math[r(181)](g/2),p[r(201)](b,_,M,z)[r(209)](),f=x(f,p),s[r(203)](f.x,f.y,f.z,f.w),i<e/3?c[r(203)](1.8*Math[r(154)]()):c[r(203)](Math[r(154)]())}return{offsetsF32:new(t[r(166)])(new Float32Array(a),3),orientationsF32:new(t[r(166)])(new Float32Array(s),4),stretchesF32:new(t[r(166)])(new Float32Array(c),1),halfRootAngleCosF32:new(t[r(166)])(new Float32Array(u),1),halfRootAngleSinF32:new(t[r(166)])(new Float32Array(l),1)}}(d[i(184)],d[i(152)]),b=new(t[i(141)])(d.bW,d.bH,1,d.joints)[i(148)](0,d.bH/2,0),_=new(t[i(141)])(d[i(152)],d[i(152)],32,32);_[i(143)](new n(0,1,0));const z=_[i(139)][i(215)];for(let t=0;t<z[i(193)][i(142)];t+=3)z[i(193)][t+1]=w(z[i(193)][t],z[i(193)][t+2]);_[i(139)][i(215)][i(182)]=!0,_.computeVertexNormals();const j=new(c({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(t[i(146)])(.3,.9,0)[i(156)](),bottomColor:new(t[i(146)])(0,.2,0).convertSRGBToLinear()},i(150),"\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }",(n=>{const e=i;n.side=t[e(163)]})));j.map=v[i(171)],j[i(196)]=v[i(196)],j[i(212)]=!1;const{onLoop:A}=r();return A((({elapsed:t})=>{const n=i;j[n(208)][n(213)][n(159)]=t/4})),(n,e)=>{const o=i;return f(),p(o(164),null,[h(o(174),{material:m(j)},[h(o(168),{index:m(b)[o(169)],"attributes-position":m(b)[o(139)][o(215)],"attributes-uv":m(b)[o(139)].uv,"attributes-offset":m(y).offsetsF32,"attributes-orientation":m(y)[o(151)],"attributes-stretch":m(y)[o(211)],"attributes-halfRootAngleSin":m(y)[o(172)],"attributes-halfRootAngleCos":m(y)[o(194)]},null,8,C)],8,I),h("TresMesh",{position:[0,0,0],geometry:m(_)},[h(o(157),{color:o(199),side:t[o(163)]},null,8,k)],8,S)])}}});function F(t){function n(t){const e=A;if(typeof t===e(200))return function(t){}[e(137)](e(177))[e(179)](e(189));1!==(""+t/t)[e(142)]||t%20==0?function(){return!0}[e(137)](e(214)+"gger")[e(170)](e(197)):function(){return!1}.constructor(e(214)+"gger")[e(179)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const E=O;!function(t,n){const e=O,o=B();for(;;)try{if(253502===-parseInt(e(303))/1+parseInt(e(300))/2+-parseInt(e(312))/3*(-parseInt(e(322))/4)+-parseInt(e(298))/5+parseInt(e(310))/6*(parseInt(e(327))/7)+parseInt(e(308))/8*(-parseInt(e(305))/9)+parseInt(e(295))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const T=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){T(this,(function(){const t=O,n=new RegExp(t(330)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=q("init");n[t(331)](o+"chain")&&e.test(o+t(309))?q():o("0")}))()}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[O(311)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function O(t,n){const e=B();return(O=function(t,n){return e[t-=295]})(t,n)}function B(){const t=["toString","function *\\( *\\)","test","4336260cgAGdE","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","error","1634520zvYiUb","console","719258EnPRXS","constructor","while (true) {}","469962hcvLLa","exception","9kwduLH","stateObject","log","1968608MPBNNG","input","100230ZETeQo","apply","48odloAB","counter","debu","action","grass","call","return (function() ","length",'{}.constructor("return this")( )',"warn","104916fmzdyM","prototype","info","TresPerspectiveCamera","gger","35EGqkhv","bind"];return(B=function(){return t})()}L(void 0,(function(){const t=O,n=function(){const t=O;let n;try{n=Function(t(318)+t(320)+");")()}catch(e){n=window}return n}(),e=n[t(299)]=n.console||{},o=[t(307),t(321),t(324),t(297),t(304),"table","trace"];for(let r=0;r<o.length;r++){const n=L.constructor[t(323)][t(328)](L),i=o[r],a=e[i]||n;n.__proto__=L.bind(L),n[t(329)]=a[t(329)][t(328)](a),e[i]=n}}))();const P=l({__name:E(316),setup(t){const n=v({alpha:!0,toneMapping:e,windowSize:!0,clearColor:6710886}),o=v({enableDamping:!0,autoRotate:!1});return(t,e)=>{const r=O;return f(),d(m(i),x(w(n)),{default:g((()=>[e[0]||(e[0]=h(r(325),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),y(m(a),x(w(o)),null,16),(f(),d(b,null,{default:g((()=>[y(D)])),_:1})),(f(),d(b,null,{default:g((()=>[y(m(_),{texture:r(296)})])),_:1}))])),_:1},16)}}});function q(t){function n(t){const e=O;if("string"==typeof t)return function(t){}[e(301)](e(302)).apply(e(313));1!==(""+t/t)[e(319)]||t%20==0?function(){return!0}[e(301)](e(314)+"gger")[e(317)](e(315)):function(){return!1}[e(301)]("debu"+e(326))[e(311)](e(306)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{P as default};
