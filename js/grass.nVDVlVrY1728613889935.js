import{_ as t,t as n,T as e,ai as o}from"./three.-yu4716U1728613889935.js";import{U as r,z as a,Y as i,L as s}from"./@tresjs.BSMy0VpY1728613889935.js";import"./index.hiaC5I4W1728613889935.js";import{a as c}from"./simplex-noise.P9JMzoHY1728613889935.js";import{C as l}from"./index.xPgac_ew1728613889935.js";import{d as u,a4 as f,o as p,E as h,L as m,u as v,r as d,f as g,g as x,j as y,aj as w,ak as b,al as _}from"./@vue.JNsx1iN61728613889935.js";import{_ as j}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.4QWbGW631728613889935.js";import"./@vueuse.lr_j1bUm1728613889935.js";import"./lamina.8RuVmLSI1728613889935.js";import"./glsl-tokenizer.bRDW_uEr1728613889935.js";import"./@amap.CWBvQ_Sh1728613889935.js";import"./glsl-token-descope.flcLE1_s1728613889935.js";import"./glsl-token-depth.uCFXXtT71728613889935.js";import"./glsl-token-scope.1u7g77h_1728613889935.js";import"./glsl-token-properties.QWWCc0IA1728613889935.js";import"./glsl-token-assignments.iJyX9tZk1728613889935.js";import"./glsl-token-string.SZwK8njp1728613889935.js";import"./glsl-token-functions.3G0pXnDz1728613889935.js";import"./object-hash.bAoGVkRV1728613889935.js";import"./jszip.jnD6f9ab1728613889935.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.fBPTgKCp1728613889935.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.p3EoI7KZ1728613889935.js";import"./three-stdlib.IhUZHHaV1728613889935.js";import"./@pmndrs.BfweosZT1728613889935.js";import"./utils.WzDoKuGX1728613889935.js";const M=F;!function(t,n){const e=F,o=k();for(;;)try{if(529188===parseInt(e(251))/1+-parseInt(e(248))/2*(parseInt(e(262))/3)+-parseInt(e(234))/4+parseInt(e(227))/5*(-parseInt(e(250))/6)+parseInt(e(269))/7*(-parseInt(e(240))/8)+parseInt(e(217))/9+parseInt(e(220))/10*(parseInt(e(212))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[F(237)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){z(this,(function(){const t=F,n=new RegExp(t(266)),e=new RegExp(t(244),"i"),o=T(t(272));n[t(238)](o+"chain")&&e[t(238)](o+t(236))?T():o("0")}))()}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();A(void 0,(function(){const t=F;let n;try{n=Function(t(230)+t(213)+");")()}catch(r){n=window}const e=n.console=n[t(263)]||{},o=[t(228),t(223),t(268),t(231),"exception",t(257),"trace"];for(let a=0;a<o[t(259)];a++){const n=A.constructor.prototype[t(232)](A),r=o[a],i=e[r]||n;n[t(241)]=A[t(232)](A),n[t(205)]=i[t(205)].bind(i),e[r]=n}}))();const I=["material"],C=["index",M(242),M(256),"attributes-offset","attributes-orientation",M(202),M(206),M(245)],R=[M(216)],S=[M(222)];function k(){const t=["3RkxaBC","console","width","#000f00","function *\\( *\\)","Vector3","info","2146501sGrYjH","set","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","init","debu","normalize","push","InstancedBufferAttribute","stretchesF32","while (true) {}","attributes-stretch","counter","translate","toString","attributes-halfRootAngleSin","toneMapped","map","constructor","Color","position","2464SjUFJd",'{}.constructor("return this")( )',"action","computeVertexNormals","geometry","1726956kYtUZF","time","stateObject","91490NSioby","offsetsF32","side","warn","sin","call","cos","5PRMdjl","log","PlaneGeometry","return (function() ","error","bind","value","3366416YVKcrq","convertSRGBToLinear","input","apply","test","random","24DDoXbC","__proto__","attributes-position","TresMesh","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","attributes-halfRootAngleCos","grass","alphaMap","81058MvrjYP","Vector4","1696038WHKDwm","372663rRucvX","gger","array","TresGroup","DoubleSide","attributes-uv","table","lookAt","length","attributes","needsUpdate"];return(k=function(){return t})()}function F(t,n){const e=k();return(F=function(t,n){return e[t-=198]})(t,n)}const D=u({__name:M(246),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(o){const i=M;let s,u;const d=([s,u]=f((()=>a({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),s=await s,u(),s),g=o,x=c(Math.random);function y(n,e){const o=F,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,a=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,i=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,s=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(249)])(r,a,i,s)}function w(t,n){var e=2*x(t/50,n/50);return e+=4*x(t/100,n/100),e+=.2*x(t/10,n/10)}const b=function(n,o){const r=F,a=[],i=[],s=[],c=[],l=[];let u=new(t[r(249)]),f=new(t[r(249)]);const p=-.25;for(let e=0;e<n;e++){const h=Math[r(239)]()*o-o/2,m=Math[r(239)]()*o-o/2,v=w(h,m);a[r(198)](h,v,m);let d=Math.PI-Math[r(239)]()*(2*Math.PI);c[r(198)](Math[r(224)](.5*d)),l[r(198)](Math[r(226)](.5*d));let g=new(t[r(267)])(0,1,0),x=g.x*Math[r(224)](d/2),b=g.y*Math.sin(d/2),_=g.z*Math[r(224)](d/2),j=Math[r(226)](d/2);u[r(270)](x,b,_,j).normalize(),d=.5*Math[r(239)]()+p,g=new(t[r(267)])(1,0,0),x=g.x*Math[r(224)](d/2),b=g.y*Math.sin(d/2),_=g.z*Math[r(224)](d/2),j=Math[r(226)](d/2),f[r(270)](x,b,_,j)[r(274)](),u=y(u,f),d=.5*Math.random()+p,g=new(t[r(267)])(0,0,1),x=g.x*Math[r(224)](d/2),b=g.y*Math[r(224)](d/2),_=g.z*Math[r(224)](d/2),j=Math.cos(d/2),f[r(270)](x,b,_,j)[r(274)](),u=y(u,f),i[r(198)](u.x,u.y,u.z,u.w),e<n/3?s[r(198)](1.8*Math.random()):s[r(198)](Math[r(239)]())}return{offsetsF32:new(t[r(199)])(new Float32Array(a),3),orientationsF32:new(t[r(199)])(new Float32Array(i),4),stretchesF32:new(t[r(199)])(new Float32Array(s),1),halfRootAngleCosF32:new(t[r(199)])(new Float32Array(l),1),halfRootAngleSinF32:new e(new Float32Array(c),1)}}(g.instances,g[i(264)]),_=new(t[i(229)])(g.bW,g.bH,1,g.joints)[i(204)](0,g.bH/2,0),j=new n(g[i(264)],g[i(264)],32,32);j[i(258)](new(t[i(267)])(0,1,0));const z=j[i(260)][i(211)];for(let t=0;t<z[i(253)][i(259)];t+=3)z[i(253)][t+1]=w(z[i(253)][t],z[i(253)][t+2]);j[i(260)][i(211)][i(261)]=!0,j[i(215)]();const A=new(l({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(t[i(210)])(.3,.9,0).convertSRGBToLinear(),bottomColor:new(t[i(210)])(0,.2,0)[i(235)]()},"   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }",i(271),(n=>{const e=i;n[e(222)]=t[e(255)]})));A[i(208)]=d[i(208)],A[i(247)]=d[i(247)],A[i(207)]=!1;const{onLoop:k}=r();return k((({elapsed:t})=>{const n=i;A.uniforms[n(218)][n(233)]=t/4})),(n,e)=>{const o=i;return p(),h(o(254),null,[m(o(243),{material:v(A)},[m("TresInstancedBufferGeometry",{index:v(_).index,"attributes-position":v(_)[o(260)][o(211)],"attributes-uv":v(_)[o(260)].uv,"attributes-offset":v(b)[o(221)],"attributes-orientation":v(b).orientationsF32,"attributes-stretch":v(b)[o(200)],"attributes-halfRootAngleSin":v(b).halfRootAngleSinF32,"attributes-halfRootAngleCos":v(b).halfRootAngleCosF32},null,8,C)],8,I),m(o(243),{position:[0,0,0],geometry:v(j)},[m("TresMeshStandardMaterial",{color:o(265),side:t[o(255)]},null,8,S)],8,R)])}}});function T(t){function n(t){const e=F;if("string"==typeof t)return function(t){}[e(209)](e(201))[e(237)](e(203));1!==(""+t/t).length||t%20==0?function(){return!0}.constructor(e(273)+e(252))[e(225)](e(214)):function(){return!1}[e(209)](e(273)+"gger").apply(e(219)),n(++t)}try{if(t)return n;n(0)}catch(e){}}!function(t,n){const e=O,o=B();for(;;)try{if(502322===parseInt(e(263))/1+-parseInt(e(262))/2*(parseInt(e(279))/3)+parseInt(e(275))/4+-parseInt(e(291))/5*(-parseInt(e(280))/6)+-parseInt(e(257))/7*(parseInt(e(285))/8)+parseInt(e(287))/9*(-parseInt(e(290))/10)+parseInt(e(288))/11*(parseInt(e(284))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[O(272)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){L(this,(function(){const t=O,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(281),"i"),o=U(t(266));n.test(o+t(271))&&e.test(o+t(269))?U():o("0")}))()}();const E=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[O(272)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function O(t,n){const e=B();return(O=function(t,n){return e[t-=256]})(t,n)}E(void 0,(function(){const t=O,n=function(){const t=O;let n;try{n=Function(t(260)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(265)]=n.console||{},o=["log",t(283),t(258),t(282),"exception","table",t(261)];for(let r=0;r<o[t(273)];r++){const n=E[t(277)][t(270)][t(276)](E),a=o[r],i=e[a]||n;n[t(259)]=E.bind(E),n[t(289)]=i[t(289)].bind(i),e[a]=n}}))();const P=m("TresPerspectiveCamera",{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1);function B(){const t=["stateObject","2692050UmToOX","177468RSZMjA","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","error","warn","12YNXetz","41176aiyyOX","counter","11511QAkoCx","12191190QJWbzx","toString","5710PpbJbH","20KoqXYd","action","while (true) {}","63YMBmTJ","info","__proto__","return (function() ","trace","2lTOyLR","797708RFYtvF","gger","console","init","call","string","input","prototype","chain","apply","length","debu","607976ZNDVEG","bind","constructor"];return(B=function(){return t})()}const H=u({__name:"grass",setup(t){const n=d({alpha:!0,toneMapping:o,windowSize:!0,clearColor:6710886}),e=d({enableDamping:!0,autoRotate:!1});return(t,o)=>(p(),g(v(s),w(b(n)),{default:x((()=>[P,y(v(i),w(b(e)),null,16),(p(),g(_,null,{default:x((()=>[y(D)])),_:1})),(p(),g(_,null,{default:x((()=>[y(v(j),{texture:"https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr"})])),_:1}))])),_:1},16))}});function U(t){function n(t){const e=O;if(typeof t===e(268))return function(t){}.constructor(e(256)).apply(e(286));1!==(""+t/t).length||t%20==0?function(){return!0}.constructor(e(274)+e(264))[e(267)](e(292)):function(){return!1}[e(277)](e(274)+"gger")[e(272)](e(278)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{H as default};
