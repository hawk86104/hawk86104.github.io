import{a5 as t,V as n,K as e,ab as o}from"./three.OZpCYxlY1718787583077.js";import{r,N as i,d as a,P as s}from"./@tresjs.yMGhEK7G1718787583077.js";import"./index.fb0n9oqN1718787583077.js";import{a as c}from"./simplex-noise.MycypUyu1718787583077.js";import{C as l}from"./index.NWNYYgod1718787583077.js";import{d as u,a3 as f,o as p,D as h,J as m,u as d,r as v,f as g,g as x,j as w,aj as y,ak as b,al as _}from"./@vue.CpOXM7bB1718787583077.js";import{_ as M}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.9a_nyNKw1718787583077.js";import"./@vueuse.jAwx0y-e1718787583077.js";import"./tweakpane.qqn77PB81718787583077.js";import"./lamina.EM09UZd01718787583077.js";import"./glsl-tokenizer.gaAYmyHH1718787583077.js";import"./@amap.SdFHYHOw1718787583077.js";import"./glsl-token-descope.WITn4SnT1718787583077.js";import"./glsl-token-depth.WJK937rd1718787583077.js";import"./glsl-token-scope.0Ws-7ynL1718787583077.js";import"./glsl-token-properties.344yCZF41718787583077.js";import"./glsl-token-assignments.FD8VSdI41718787583077.js";import"./glsl-token-string.I-C2eR7Z1718787583077.js";import"./glsl-token-functions.9MA3WN5r1718787583077.js";import"./object-hash.qNEzwKzz1718787583077.js";import"./jszip.b_9tpgnb1718787583077.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.lNMSjlmE1718787583077.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.xXBhxFs61718787583077.js";import"./three-stdlib.qiumRy5f1718787583077.js";import"./@pmndrs.14-i3u7y1718787583077.js";import"./utils.pbNHyb-y1718787583077.js";const j=A;!function(t,n){const e=A,o=k();for(;;)try{if(961642===parseInt(e(164))/1*(parseInt(e(170))/2)+parseInt(e(202))/3+-parseInt(e(199))/4+-parseInt(e(135))/5+parseInt(e(181))/6*(-parseInt(e(178))/7)+-parseInt(e(201))/8+-parseInt(e(196))/9*(-parseInt(e(158))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[A(191)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){z(this,(function(){const t=A,n=new RegExp(t(197)),e=new RegExp(t(167),"i"),o=B(t(192));n.test(o+t(132))&&e.test(o+t(189))?B():o("0")}))()}();const I=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[A(191)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function A(t,n){const e=k();return(A=function(t,n){return e[t-=125]})(t,n)}function k(){const t=["string","7bOkikw",'{}.constructor("return this")( )',"toneMapped","8672226aOgpHH","info","instances","return (function() ","stretchesF32","attributes","TresMeshStandardMaterial","attributes-uv","input","needsUpdate","apply","init","#000f00","exception","call","9cqcswa","function *\\( *\\)","log","3100948Qdrlfp","width","14827032Byefok","3372402WmGVKZ","length","Color","time","gger","action","geometry","value","chain","computeVertexNormals","grass","4457400ujdByI","cos","index","random","TresGroup","lookAt","halfRootAngleSinF32","stateObject","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","alphaMap","DoubleSide","sin","toString","material","position","console","set","Vector4","array","trace","bind","counter","PlaneGeometry","46554290EDnxBq","normalize","TresInstancedBufferGeometry","__proto__","Vector3","map","49182GfJToH","convertSRGBToLinear","offsetsF32","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","table","orientationsF32","6tJMZne","InstancedBufferAttribute","side","TresMesh","constructor","push","attributes-offset"];return(k=function(){return t})()}I(void 0,(function(){const t=A,n=function(){const t=A;let n;try{n=Function(t(184)+t(179)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(150)]||{},o=[t(198),"warn",t(182),"error",t(194),t(168),t(154)];for(let r=0;r<o.length;r++){const n=I[t(174)].prototype.bind(I),i=o[r],a=e[i]||n;n[t(161)]=I[t(155)](I),n[t(147)]=a[t(147)].bind(a),e[i]=n}}))();const C=[j(148)],S=[j(137),"attributes-position",j(188),j(176),"attributes-orientation","attributes-stretch","attributes-halfRootAngleSin","attributes-halfRootAngleCos"],F=[j(130)],D=[j(172)],R=u({__name:j(134),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(o){const a=j;let s,u;const v=([s,u]=f((()=>i({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),s=await s,u(),s),g=o,x=c(Math[a(138)]);function w(n,e){const o=a,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,i=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,s=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,c=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(152)])(r,i,s,c)}function y(t,n){var e=2*x(t/50,n/50);return e+=4*x(t/100,n/100),e+=.2*x(t/10,n/10)}const b=function(o,r){const i=a,s=[],c=[],l=[],u=[],f=[];let p=new(t[i(152)]),h=new(t[i(152)]);const m=-.25;for(let e=0;e<o;e++){const a=Math[i(138)]()*r-r/2,d=Math[i(138)]()*r-r/2,v=y(a,d);s[i(175)](a,v,d);let g=Math.PI-Math[i(138)]()*(2*Math.PI);u[i(175)](Math[i(146)](.5*g)),f[i(175)](Math[i(136)](.5*g));let x=new n(0,1,0),b=x.x*Math.sin(g/2),_=x.y*Math.sin(g/2),M=x.z*Math[i(146)](g/2),j=Math[i(136)](g/2);p[i(151)](b,_,M,j)[i(159)](),g=.5*Math[i(138)]()+m,x=new n(1,0,0),b=x.x*Math.sin(g/2),_=x.y*Math.sin(g/2),M=x.z*Math[i(146)](g/2),j=Math[i(136)](g/2),h[i(151)](b,_,M,j).normalize(),p=w(p,h),g=.5*Math[i(138)]()+m,x=new(t[i(162)])(0,0,1),b=x.x*Math[i(146)](g/2),_=x.y*Math[i(146)](g/2),M=x.z*Math[i(146)](g/2),j=Math.cos(g/2),h.set(b,_,M,j)[i(159)](),p=w(p,h),c[i(175)](p.x,p.y,p.z,p.w),e<o/3?l[i(175)](1.8*Math[i(138)]()):l[i(175)](Math[i(138)]())}return{offsetsF32:new(t[i(171)])(new Float32Array(s),3),orientationsF32:new e(new Float32Array(c),4),stretchesF32:new(t[i(171)])(new Float32Array(l),1),halfRootAngleCosF32:new e(new Float32Array(f),1),halfRootAngleSinF32:new(t[i(171)])(new Float32Array(u),1)}}(g[a(183)],g.width),_=new(t[a(157)])(g.bW,g.bH,1,g.joints).translate(0,g.bH/2,0),M=new(t[a(157)])(g[a(200)],g[a(200)],32,32);M[a(140)](new(t[a(162)])(0,1,0));const z=M.attributes.position;for(let t=0;t<z[a(153)][a(125)];t+=3)z[a(153)][t+1]=y(z[a(153)][t],z[a(153)][t+2]);M[a(186)].position[a(190)]=!0,M[a(133)]();const I=new(l({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(t[a(126)])(.3,.9,0)[a(165)](),bottomColor:new(t[a(126)])(0,.2,0)[a(165)]()},"   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }",a(143),(n=>{const e=a;n[e(172)]=t[e(145)]})));I[a(163)]=v.map,I[a(144)]=v[a(144)],I[a(180)]=!1;const{onLoop:A}=r();return A((({elapsed:t})=>{const n=a;I.uniforms[n(127)][n(131)]=t/4})),(n,e)=>{const o=a;return p(),h(o(139),null,[m(o(173),{material:d(I)},[m(o(160),{index:d(_)[o(137)],"attributes-position":d(_).attributes[o(149)],"attributes-uv":d(_)[o(186)].uv,"attributes-offset":d(b)[o(166)],"attributes-orientation":d(b)[o(169)],"attributes-stretch":d(b)[o(185)],"attributes-halfRootAngleSin":d(b)[o(141)],"attributes-halfRootAngleCos":d(b).halfRootAngleCosF32},null,8,S)],8,C),m(o(173),{position:[0,0,0],geometry:d(M)},[m(o(187),{color:o(193),side:t[o(145)]},null,8,D)],8,F)])}}});function B(t){function n(t){const e=A;if(typeof t===e(177))return function(t){}.constructor("while (true) {}")[e(191)](e(156));1!==(""+t/t)[e(125)]||t%20==0?function(){return!0}[e(174)]("debu"+e(128))[e(195)](e(129)):function(){return!1}[e(174)]("debu"+e(128)).apply(e(142)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const E=T;!function(t,n){const e=T,o=N();for(;;)try{if(607206===-parseInt(e(138))/1*(-parseInt(e(139))/2)+parseInt(e(135))/3*(-parseInt(e(142))/4)+-parseInt(e(148))/5+-parseInt(e(116))/6*(parseInt(e(127))/7)+parseInt(e(146))/8+parseInt(e(154))/9*(parseInt(e(124))/10)+parseInt(e(145))/11*(parseInt(e(149))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[T(129)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){O(this,(function(){const t=T,n=new RegExp(t(144)),e=new RegExp(t(151),"i"),o=q("init");n[t(125)](o+"chain")&&e[t(125)](o+t(119))?q():o("0")}))()}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[T(129)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();H(void 0,(function(){const t=T,n=function(){const t=T;let n;try{n=Function(t(136)+t(150)+");")()}catch(e){n=window}return n}(),e=n[t(143)]=n[t(143)]||{},o=[t(123),"warn",t(122),"error",t(153),t(137),t(128)];for(let r=0;r<o.length;r++){const n=H.constructor[t(134)][t(126)](H),i=o[r],a=e[i]||n;n[t(118)]=H.bind(H),n[t(121)]=a.toString[t(126)](a),e[i]=n}}))();const P=m(E(152),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1);function T(t,n){const e=N();return(T=function(t,n){return e[t-=116]})(t,n)}const L=u({__name:E(141),setup(t){const n=v({alpha:!0,toneMapping:o,windowSize:!0,clearColor:6710886}),e=v({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=T;return p(),g(d(s),y(b(n)),{default:x((()=>[P,w(d(a),y(b(e)),null,16),(p(),g(_,null,{default:x((()=>[w(R)])),_:1})),(p(),g(_,null,{default:x((()=>[w(d(M),{texture:r(132)})])),_:1}))])),_:1},16)}}});function q(t){function n(t){const e=T;if(typeof t===e(140))return function(t){}[e(133)](e(131))[e(129)]("counter");1!==(""+t/t).length||t%20==0?function(){return!0}.constructor(e(130)+e(117)).call(e(120)):function(){return!1}[e(133)](e(130)+"gger")[e(129)](e(147)),n(++t)}try{if(t)return n;n(0)}catch(e){}}function N(){const t=["info","log","538810NsImNv","test","bind","772324YKdnbd","trace","apply","debu","while (true) {}","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","constructor","prototype","8109rgzxyM","return (function() ","table","55yIqSfi","15118MFFYSW","string","grass","1356vwVdIj","console","function *\\( *\\)","11CzfMSI","5230560NvbfLr","stateObject","2980760MtdPkl","11985588FhxKZF",'{}.constructor("return this")( )',"\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","TresPerspectiveCamera","exception","27enIWBE","6woXele","gger","__proto__","input","action","toString"];return(N=function(){return t})()}export{L as default};
