import{_ as t,V as n,C as e,T as o,ai as r}from"./three.QbUqWzuy1728531791220.js";import{U as a,z as i,Y as s,L as c}from"./@tresjs.TFxw2EXb1728531791220.js";import"./index.SgOK8SdX1728531791220.js";import{a as l}from"./simplex-noise.P9JMzoHY1728531791220.js";import{C as u}from"./index.odAJy2kG1728531791220.js";import{d as f,a4 as p,o as h,E as m,L as d,u as v,r as g,f as x,g as y,j as w,aj as b,ak as _,al as M}from"./@vue.bvMz0l_u1728531791220.js";import{_ as j}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.iTvmZoLG1728531791220.js";import"./@vueuse.MmMw6bXQ1728531791220.js";import"./lamina.BVcbd2e31728531791220.js";import"./glsl-tokenizer.jsOyVPm91728531791220.js";import"./@amap.OnfPw1bC1728531791220.js";import"./glsl-token-descope.iDUzRAf21728531791220.js";import"./glsl-token-depth.4At2eULK1728531791220.js";import"./glsl-token-scope.Ce8rfnmi1728531791220.js";import"./glsl-token-properties.KMApxaCZ1728531791220.js";import"./glsl-token-assignments.6ibt8BoJ1728531791220.js";import"./glsl-token-string.fnhoLvhE1728531791220.js";import"./glsl-token-functions.41nYPUTK1728531791220.js";import"./object-hash.lBPFZZ1y1728531791220.js";import"./jszip.v4-zSwTx1728531791220.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.AoVMiQ121728531791220.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.1gKQZ8iF1728531791220.js";import"./three-stdlib.STo_3R0X1728531791220.js";import"./@pmndrs._tHjs8qy1728531791220.js";import"./utils._G0H-Pxm1728531791220.js";const z=D;!function(t,n){const e=D,o=I();for(;;)try{if(402782===parseInt(e(462))/1+-parseInt(e(461))/2*(parseInt(e(471))/3)+parseInt(e(470))/4+-parseInt(e(466))/5+-parseInt(e(424))/6+-parseInt(e(414))/7+parseInt(e(428))/8)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[D(441)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function I(){const t=["counter","info","cos","time","geometry","DoubleSide","TresInstancedBufferGeometry","Vector3","console","attributes-offset","406756xcRxPy","needsUpdate","value","PlaneGeometry","test","joints","prototype","alphaMap","string","attributes-halfRootAngleSin","1355364kDuCPC","TresMeshStandardMaterial","array","Vector4","7852304wjpbjL","warn","attributes-uv","TresGroup","normalize","convertSRGBToLinear","TresMesh","push","side","attributes-stretch","grass","attributes-halfRootAngleCos","toneMapped","apply","constructor","map","chain","sin","attributes","uniforms","attributes-orientation","set","instances","index","lookAt","InstancedBufferAttribute","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","error","stateObject","position","gger","__proto__","init","428YDdYmr","359477ZnKOQQ","random","width","trace","684155AsRaEf","while (true) {}","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","toString","1067640rxqEyz","10995ejzGnm","stretchesF32","debu","bind","Color","action","translate","length","function *\\( *\\)","log","#000f00"];return(I=function(){return t})()}!function(){A(this,(function(){const t=D,n=new RegExp(t(479)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=E(t(460));n[t(418)](o+t(444))&&e[t(418)](o+"input")?E():o("0")}))()}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[D(441)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();C(void 0,(function(){const t=D;let n;try{n=Function('return (function() {}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(412)]=n.console||{},o=[t(480),t(429),t(483),t(455),"exception","table",t(465)];for(let a=0;a<o[t(478)];a++){const n=C[t(442)][t(420)][t(474)](C),r=o[a],i=e[r]||n;n[t(459)]=C.bind(C),n.toString=i[t(469)].bind(i),e[r]=n}}))();const S=["material"],R=[z(451),"attributes-position",z(430),z(413),z(448),z(437),z(423),z(439)],F=[z(486)],k=[z(436)];function D(t,n){const e=I();return(D=function(t,n){return e[t-=409]})(t,n)}const L=f({__name:z(438),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(r){const s=z;let c,f;const g=([c,f]=p((()=>i({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),c=await c,f(),c),x=r,y=l(Math[s(463)]);function w(n,e){const o=s,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,a=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,i=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,c=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(427)])(r,a,i,c)}function b(t,n){var e=2*y(t/50,n/50);return e+=4*y(t/100,n/100),e+=.2*y(t/10,n/10)}const _=function(e,r){const a=s,i=[],c=[],l=[],u=[],f=[];let p=new(t[a(427)]),h=new(t[a(427)]);const m=-.25;for(let o=0;o<e;o++){const s=Math.random()*r-r/2,d=Math[a(463)]()*r-r/2,v=b(s,d);i[a(435)](s,v,d);let g=Math.PI-Math.random()*(2*Math.PI);u.push(Math[a(445)](.5*g)),f.push(Math[a(484)](.5*g));let x=new n(0,1,0),y=x.x*Math.sin(g/2),_=x.y*Math[a(445)](g/2),M=x.z*Math[a(445)](g/2),j=Math[a(484)](g/2);p[a(449)](y,_,M,j)[a(432)](),g=.5*Math[a(463)]()+m,x=new(t[a(411)])(1,0,0),y=x.x*Math[a(445)](g/2),_=x.y*Math[a(445)](g/2),M=x.z*Math[a(445)](g/2),j=Math[a(484)](g/2),h[a(449)](y,_,M,j)[a(432)](),p=w(p,h),g=.5*Math[a(463)]()+m,x=new(t[a(411)])(0,0,1),y=x.x*Math[a(445)](g/2),_=x.y*Math[a(445)](g/2),M=x.z*Math.sin(g/2),j=Math[a(484)](g/2),h[a(449)](y,_,M,j)[a(432)](),p=w(p,h),c.push(p.x,p.y,p.z,p.w),o<e/3?l[a(435)](1.8*Math[a(463)]()):l.push(Math[a(463)]())}return{offsetsF32:new(t[a(453)])(new Float32Array(i),3),orientationsF32:new(t[a(453)])(new Float32Array(c),4),stretchesF32:new(t[a(453)])(new Float32Array(l),1),halfRootAngleCosF32:new o(new Float32Array(f),1),halfRootAngleSinF32:new(t[a(453)])(new Float32Array(u),1)}}(x[s(450)],x[s(464)]),M=new(t[s(417)])(x.bW,x.bH,1,x[s(419)])[s(477)](0,x.bH/2,0),j=new(t[s(417)])(x[s(464)],x[s(464)],32,32);j[s(452)](new n(0,1,0));const A=j.attributes[s(457)];for(let t=0;t<A[s(426)][s(478)];t+=3)A.array[t+1]=b(A[s(426)][t],A[s(426)][t+2]);j[s(446)][s(457)][s(415)]=!0,j.computeVertexNormals();const I=new(u({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new e(.3,.9,0).convertSRGBToLinear(),bottomColor:new(t[s(475)])(0,.2,0)[s(433)]()},s(468),s(454),(n=>{const e=s;n[e(436)]=t[e(409)]})));I.map=g[s(443)],I.alphaMap=g[s(421)],I[s(440)]=!1;const{onLoop:C}=a();return C((({elapsed:t})=>{const n=s;I[n(447)][n(485)][n(416)]=t/4})),(n,e)=>{const o=s;return h(),m(o(431),null,[d(o(434),{material:v(I)},[d(o(410),{index:v(M).index,"attributes-position":v(M)[o(446)].position,"attributes-uv":v(M)[o(446)].uv,"attributes-offset":v(_).offsetsF32,"attributes-orientation":v(_).orientationsF32,"attributes-stretch":v(_)[o(472)],"attributes-halfRootAngleSin":v(_).halfRootAngleSinF32,"attributes-halfRootAngleCos":v(_).halfRootAngleCosF32},null,8,R)],8,S),d(o(434),{position:[0,0,0],geometry:v(j)},[d(o(425),{color:o(481),side:t[o(409)]},null,8,k)],8,F)])}}});function E(t){function n(t){const e=D;if(typeof t===e(422))return function(t){}.constructor(e(467))[e(441)](e(482));1!==(""+t/t)[e(478)]||t%20==0?function(){return!0}[e(442)](e(473)+e(458)).call(e(476)):function(){return!1}[e(442)]("debu"+e(458)).apply(e(456)),n(++t)}try{if(t)return n;n(0)}catch(e){}}!function(t,n){const e=O,o=H();for(;;)try{if(188483===-parseInt(e(474))/1*(-parseInt(e(502))/2)+-parseInt(e(500))/3*(-parseInt(e(470))/4)+-parseInt(e(505))/5*(parseInt(e(480))/6)+-parseInt(e(499))/7*(parseInt(e(506))/8)+-parseInt(e(475))/9*(parseInt(e(492))/10)+-parseInt(e(477))/11+parseInt(e(481))/12)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const P=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[O(491)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function O(t,n){const e=H();return(O=function(t,n){return e[t-=469]})(t,n)}!function(){P(this,(function(){const t=O,n=new RegExp(t(490)),e=new RegExp(t(488),"i"),o=U(t(478));n[t(471)](o+t(498))&&e[t(471)](o+t(485))?U():o("0")}))()}();const T=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[O(491)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();T(void 0,(function(){const t=O,n=function(){const t=O;let n;try{n=Function(t(497)+t(507)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(493)]||{},o=[t(504),"warn","info",t(494),t(483),t(496),t(501)];for(let r=0;r<o[t(472)];r++){const n=T.constructor[t(479)][t(476)](T),a=o[r],i=e[a]||n;n.__proto__=T[t(476)](T),n[t(503)]=i.toString.bind(i),e[a]=n}}))();const B=d("TresPerspectiveCamera",{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1),G=f({__name:"grass",setup(t){const n=g({alpha:!0,toneMapping:r,windowSize:!0,clearColor:6710886}),e=g({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=O;return h(),x(v(c),b(_(n)),{default:y((()=>[B,w(v(s),b(_(e)),null,16),(h(),x(M,null,{default:y((()=>[w(L)])),_:1})),(h(),x(M,null,{default:y((()=>[w(v(j),{texture:r(489)})])),_:1}))])),_:1},16)}}});function H(){const t=["error","while (true) {}","table","return (function() ","chain","301LWzCjp","309MJsKnv","trace","4VMRFIQ","toString","log","400110PDySbd","17672WhBQUO",'{}.constructor("return this")( )',"call","10792yZYAQF","test","length","constructor","152638oIUwWb","1693485MGgWLK","bind","1773244FACpCt","init","prototype","18uiCEdd","3476820WzyAph","debu","exception","counter","input","string","stateObject","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","function *\\( *\\)","apply","10ohNDNo","console"];return(H=function(){return t})()}function U(t){function n(t){const e=O;if(typeof t===e(486))return function(t){}[e(473)](e(495))[e(491)](e(484));1!==(""+t/t)[e(472)]||t%20==0?function(){return!0}.constructor(e(482)+"gger")[e(469)]("action"):function(){return!1}[e(473)]("debugger")[e(491)](e(487)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{G as default};
