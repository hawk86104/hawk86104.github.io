import{_ as t,C as n,ar as e,T as o,ai as r}from"./three.8y0_KTxz1741594518249.js";import{e as a,a as i,o as s,f as c}from"./@tresjs.gjafZgVK1741594518249.js";import"./index.91pejpum1741594518249.js";import{c as l}from"./simplex-noise.jB2HxhHB1741594518249.js";import{C as u}from"./index.gRDhHVVn1741594518249.js";import{d as f,a3 as p,o as h,H as m,N as v,u as d,r as g,f as x,g as w,j as y,aj as b,ak as _,al as j}from"./@vue.NRI7TcgI1741594518249.js";import{_ as M}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.pL7jiwNJ1741594518249.js";import"./postprocessing.iiPTtJPW1741594518249.js";import"./@vueuse.8xnC6EWf1741594518249.js";import"./lamina.fvc30juh1741594518249.js";import"./glsl-tokenizer.ByNJXxDD1741594518249.js";import"./@amap.gPFcnYXF1741594518249.js";import"./glsl-token-descope.i-CbwBc31741594518249.js";import"./glsl-token-depth.pG4dIEuv1741594518249.js";import"./glsl-token-scope.0N0nDPFi1741594518249.js";import"./glsl-token-properties.S15FJd6N1741594518249.js";import"./glsl-token-assignments.E54OmvUz1741594518249.js";import"./glsl-token-string.WvVZttm21741594518249.js";import"./glsl-token-functions.vmjqLljt1741594518249.js";import"./object-hash.sZxA5Asp1741594518249.js";import"./jszip.VTnDVY9z1741594518249.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.teE2SXCI1741594518249.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.hiWUOBwD1741594518249.js";import"./three-stdlib.uPGGcbR71741594518249.js";import"./@pmndrs.0VhNBP751741594518249.js";import"./utils.IHH62vY71741594518249.js";const I=C;!function(t,n){const e=C,o=B();for(;;)try{if(872960===parseInt(e(180))/1*(parseInt(e(161))/2)+parseInt(e(151))/3*(parseInt(e(124))/4)+parseInt(e(176))/5+parseInt(e(175))/6*(-parseInt(e(154))/7)+-parseInt(e(118))/8+-parseInt(e(160))/9+-parseInt(e(158))/10*(-parseInt(e(177))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(168)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){z(this,(function(){const t=C,n=new RegExp(t(153)),e=new RegExp(t(191),"i"),o=T(t(134));n.test(o+"chain")&&e[t(172)](o+t(128))?T():o("0")}))()}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(168)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function C(t,n){const e=B();return(C=function(t,n){return e[t-=117]})(t,n)}A(void 0,(function(){const t=C;let n;try{n=Function("return (function() "+t(182)+");")()}catch(r){n=window}const e=n[t(164)]=n[t(164)]||{},o=[t(201),t(167),t(148),t(139),"exception",t(186),t(179)];for(let a=0;a<o[t(166)];a++){const n=A.constructor[t(165)][t(189)](A),r=o[a],i=e[r]||n;n[t(188)]=A[t(189)](A),n[t(143)]=i[t(143)][t(189)](i),e[r]=n}}))();const k=[I(123)],S=[I(171),"attributes-position","attributes-uv","attributes-offset",I(150),I(200),I(170),I(152)],R=[I(178)],F=[I(149)];function B(){const t=["lookAt","cos","init","normalize","sin","value","Color","error","debu","halfRootAngleSinF32","stretchesF32","toString","instances","toneMapped","convertSRGBToLinear","constructor","info","side","attributes-orientation","370113mbPRhm","attributes-halfRootAngleCos","function *\\( *\\)","272503ulmtgd","counter","TresInstancedBufferGeometry","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","488570vKrVSc","joints","13276062JPhIBp","64ZNEtBg","#000f00","alphaMap","console","prototype","length","warn","apply","gger","attributes-halfRootAngleSin","index","test","Vector4","DoubleSide","180FKsvVy","4869375IfuYGa","297tIKNpw","geometry","trace","18749Khcyop","random",'{}.constructor("return this")( )',"attributes","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","InstancedBufferAttribute","table","map","__proto__","bind","push","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","Vector3","TresMesh","TresMeshStandardMaterial","orientationsF32","call","computeVertexNormals","TresGroup","set","attributes-stretch","log","PlaneGeometry","6859888ewBbvZ","array","time","halfRootAngleCosF32","string","material","48eMfOyC","position","action","offsetsF32","input","width","translate","stateObject"];return(B=function(){return t})()}const D=f({__name:"grass",props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(r){const s=I;let c,f;const g=([c,f]=p((()=>i({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),c=await c,f(),c),x=r,w=l(Math[s(181)]);function y(t,n){const o=t.x*n.w+t.y*n.z-t.z*n.y+t.w*n.x,r=-t.x*n.z+t.y*n.w+t.z*n.x+t.w*n.y,a=t.x*n.y-t.y*n.x+t.z*n.w+t.w*n.z,i=-t.x*n.x-t.y*n.y-t.z*n.z+t.w*n.w;return new e(o,r,a,i)}function b(t,n){var e=2*w(t/50,n/50);return e+=4*w(t/100,n/100),e+=.2*w(t/10,n/10)}const _=function(n,r){const a=s,i=[],c=[],l=[],u=[],f=[];let p=new e,h=new(t[a(173)]);const m=-.25;for(let e=0;e<n;e++){const o=Math[a(181)]()*r-r/2,s=Math[a(181)]()*r-r/2,v=b(o,s);i[a(190)](o,v,s);let d=Math.PI-Math[a(181)]()*(2*Math.PI);u[a(190)](Math.sin(.5*d)),f[a(190)](Math[a(133)](.5*d));let g=new(t[a(192)])(0,1,0),x=g.x*Math[a(136)](d/2),w=g.y*Math[a(136)](d/2),_=g.z*Math.sin(d/2),j=Math[a(133)](d/2);p[a(199)](x,w,_,j)[a(135)](),d=.5*Math[a(181)]()+m,g=new(t[a(192)])(1,0,0),x=g.x*Math[a(136)](d/2),w=g.y*Math[a(136)](d/2),_=g.z*Math[a(136)](d/2),j=Math[a(133)](d/2),h[a(199)](x,w,_,j)[a(135)](),p=y(p,h),d=.5*Math[a(181)]()+m,g=new(t[a(192)])(0,0,1),x=g.x*Math[a(136)](d/2),w=g.y*Math[a(136)](d/2),_=g.z*Math[a(136)](d/2),j=Math[a(133)](d/2),h[a(199)](x,w,_,j)[a(135)](),p=y(p,h),c[a(190)](p.x,p.y,p.z,p.w),e<n/3?l.push(1.8*Math[a(181)]()):l[a(190)](Math.random())}return{offsetsF32:new(t[a(185)])(new Float32Array(i),3),orientationsF32:new(t[a(185)])(new Float32Array(c),4),stretchesF32:new o(new Float32Array(l),1),halfRootAngleCosF32:new(t[a(185)])(new Float32Array(f),1),halfRootAngleSinF32:new(t[a(185)])(new Float32Array(u),1)}}(x[s(144)],x[s(129)]),j=new(t[s(117)])(x.bW,x.bH,1,x[s(159)])[s(130)](0,x.bH/2,0),M=new(t[s(117)])(x.width,x[s(129)],32,32);M[s(132)](new(t[s(192)])(0,1,0));const z=M.attributes[s(125)];for(let t=0;t<z.array[s(166)];t+=3)z[s(119)][t+1]=b(z[s(119)][t],z[s(119)][t+2]);M.attributes.position.needsUpdate=!0,M[s(197)]();const A=new(u({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new n(.3,.9,0)[s(146)](),bottomColor:new(t[s(138)])(0,.2,0).convertSRGBToLinear()},s(157),s(184),(n=>{const e=s;n[e(149)]=t[e(174)]})));A[s(187)]=g[s(187)],A.alphaMap=g[s(163)],A[s(145)]=!1;const{onLoop:C}=a();return C((({elapsed:t})=>{const n=s;A.uniforms[n(120)][n(137)]=t/4})),(n,e)=>{const o=s;return h(),m(o(198),null,[v(o(193),{material:d(A)},[v(o(156),{index:d(j)[o(171)],"attributes-position":d(j).attributes[o(125)],"attributes-uv":d(j)[o(183)].uv,"attributes-offset":d(_)[o(127)],"attributes-orientation":d(_)[o(195)],"attributes-stretch":d(_)[o(142)],"attributes-halfRootAngleSin":d(_)[o(141)],"attributes-halfRootAngleCos":d(_)[o(121)]},null,8,S)],8,k),v(o(193),{position:[0,0,0],geometry:d(M)},[v(o(194),{color:o(162),side:t[o(174)]},null,8,F)],8,R)])}}});function T(t){function n(t){const e=C;if(typeof t===e(122))return function(t){}[e(147)]("while (true) {}").apply(e(155));1!==(""+t/t).length||t%20==0?function(){return!0}[e(147)](e(140)+e(169))[e(196)](e(126)):function(){return!1}[e(147)]("debu"+e(169))[e(168)](e(131)),n(++t)}try{if(t)return n;n(0)}catch(e){}}function P(){const t=["while (true) {}","log","13039002pilfxa","TresPerspectiveCamera","action","return (function() ","8oNyLEe","init","2143839OOJpcw","bind","console","length",'{}.constructor("return this")( )',"295UGtavi","string","toString","__proto__","call","constructor","gger","2413850IeQulH","45980590IKQnsG","debu","error","grass","warn","table","input","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","842951pfcrBi","exception","trace","98708YPLreG","info","102sTTkBI","counter","110278fqLBjq","apply"];return(P=function(){return t})()}const E=G;!function(t,n){const e=G,o=P();for(;;)try{if(882569===parseInt(e(505))/1+-parseInt(e(496))/2+-parseInt(e(484))/3+parseInt(e(508))/4*(-parseInt(e(489))/5)+-parseInt(e(510))/6*(-parseInt(e(512))/7)+parseInt(e(482))/8*(-parseInt(e(478))/9)+parseInt(e(497))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[G(513)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){L(this,(function(){const t=G,n=new RegExp("function *\\( *\\)"),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=N(t(483));n.test(o+"chain")&&e.test(o+t(503))?N():o("0")}))()}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[G(513)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function G(t,n){const e=P();return(G=function(t,n){return e[t-=478]})(t,n)}O(void 0,(function(){const t=G,n=function(){const t=G;let n;try{n=Function(t(481)+t(488)+");")()}catch(e){n=window}return n}(),e=n[t(486)]=n[t(486)]||{},o=[t(515),t(501),t(509),t(499),t(506),t(502),t(507)];for(let r=0;r<o.length;r++){const n=O[t(494)].prototype.bind(O),a=o[r],i=e[a]||n;n[t(492)]=O[t(485)](O),n[t(491)]=i[t(491)][t(485)](i),e[a]=n}}))();const H=f({__name:E(500),setup(t){const n=g({alpha:!0,toneMapping:r,windowSize:!0,clearColor:6710886}),e=g({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=G;return h(),x(d(c),b(_(n)),{default:w((()=>[o[0]||(o[0]=v(r(479),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),y(d(s),b(_(e)),null,16),(h(),x(j,null,{default:w((()=>[y(D)])),_:1})),(h(),x(j,null,{default:w((()=>[y(d(M),{texture:r(504)})])),_:1}))])),_:1},16)}}});function N(t){function n(t){const e=G;if(typeof t===e(490))return function(t){}[e(494)](e(514))[e(513)](e(511));1!==(""+t/t)[e(487)]||t%20==0?function(){return!0}[e(494)](e(498)+e(495))[e(493)](e(480)):function(){return!1}[e(494)](e(498)+e(495)).apply("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{H as default};
