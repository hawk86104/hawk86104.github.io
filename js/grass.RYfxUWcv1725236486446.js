import{a6 as t,r as n,V as e,K as o,a9 as r}from"./three.0IuNGJsA1725236486446.js";import{$ as a,N as i,d as s,x as c}from"./@tresjs.DDzpLB7Q1725236486446.js";import"./index.fWg11D2b1725236486446.js";import{a as l}from"./simplex-noise.MycypUyu1725236486446.js";import{C as u}from"./index.ZLp4rBxn1725236486446.js";import{d as f,a4 as p,o as h,D as m,J as v,u as d,r as g,f as x,g as w,j as y,aj as b,ak as _,al as j}from"./@vue.9bHx4gg21725236486446.js";import{_ as M}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.cZ7AKF891725236486446.js";import"./tweakpane.yHWGBmom1725236486446.js";import"./@vueuse.XXpXaOwX1725236486446.js";import"./lamina.TBfxFkDI1725236486446.js";import"./glsl-tokenizer.5A8V64LF1725236486446.js";import"./@amap.YiJorLHg1725236486446.js";import"./glsl-token-descope.syPv0gob1725236486446.js";import"./glsl-token-depth.KfYNumgb1725236486446.js";import"./glsl-token-scope.w5_I9jsK1725236486446.js";import"./glsl-token-properties.HZLsFibx1725236486446.js";import"./glsl-token-assignments.tN2qh8IB1725236486446.js";import"./glsl-token-string.UAuwSUH71725236486446.js";import"./glsl-token-functions.GpZWHJDq1725236486446.js";import"./object-hash.p3nCq7ez1725236486446.js";import"./jszip.F8iULAGn1725236486446.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.1CcLPCKr1725236486446.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.FHA6ut0I1725236486446.js";import"./three-stdlib.qd5YYSA01725236486446.js";import"./@pmndrs.wB6eVnfc1725236486446.js";import"./utils.jDhnREVe1725236486446.js";const z=D;!function(t,n){const e=D,o=T();for(;;)try{if(831397===parseInt(e(450))/1*(parseInt(e(495))/2)+parseInt(e(449))/3+parseInt(e(499))/4+parseInt(e(492))/5+-parseInt(e(488))/6*(-parseInt(e(438))/7)+-parseInt(e(454))/8*(parseInt(e(423))/9)+parseInt(e(431))/10*(-parseInt(e(466))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[D(475)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){A(this,(function(){const t=D,n=new RegExp(t(428)),e=new RegExp(t(418),"i"),o=P("init");n.test(o+t(493))&&e.test(o+t(435))?P():o("0")}))()}();const I=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();I(void 0,(function(){const t=D,n=function(){const t=D;let n;try{n=Function(t(498)+t(477)+");")()}catch(e){n=window}return n}(),e=n[t(436)]=n[t(436)]||{},o=["log",t(461),t(482),t(419),t(426),t(437),"trace"];for(let r=0;r<o[t(469)];r++){const n=I[t(439)][t(445)][t(462)](I),a=o[r],i=e[a]||n;n[t(500)]=I[t(462)](I),n[t(416)]=i[t(416)][t(462)](i),e[a]=n}}))();const C=[z(485)],k=["index",z(441),z(430),z(476),z(494),z(468),z(458),z(459)],R=[z(424)],S=[z(478)];function D(t,n){const e=T();return(D=function(t,n){return e[t-=415]})(t,n)}function T(){const t=["attributes","convertSRGBToLinear","info","cos","action","material","TresInstancedBufferGeometry","grass","2240808JrMEaF","width","stretchesF32","InstancedBufferAttribute","7332500sHvAmB","chain","attributes-orientation","52CKPJCU","stateObject","sin","return (function() ","2903352MljcPw","__proto__","array","toString","translate","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","error","call","Color","TresMeshStandardMaterial","98442RiLNPY","geometry","push","exception","Vector4","function *\\( *\\)","halfRootAngleSinF32","attributes-uv","4470030jgXjaE","Vector3","offsetsF32","gger","input","console","table","28JJrCuu","constructor","toneMapped","attributes-position","while (true) {}","computeVertexNormals","position","prototype","DoubleSide","index","joints","4678335HAsDRc","11821ThNRfD","alphaMap","TresGroup","set","184TpDNIg","instances","normalize","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","attributes-halfRootAngleSin","attributes-halfRootAngleCos","random","warn","bind","map","orientationsF32","counter","110szsMhS","lookAt","attributes-stretch","length","TresMesh","PlaneGeometry","debu","needsUpdate","string","apply","attributes-offset",'{}.constructor("return this")( )',"side","halfRootAngleCosF32"];return(T=function(){return t})()}const F=f({__name:z(487),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(r){const s=z;let c,f;const g=([c,f]=p((()=>i({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),c=await c,f(),c),x=r,w=l(Math[s(460)]);function y(n,e){const o=s,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,a=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,i=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,c=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(427)])(r,a,i,c)}function b(t,n){var e=2*w(t/50,n/50);return e+=4*w(t/100,n/100),e+=.2*w(t/10,n/10)}const _=function(n,r){const a=s,i=[],c=[],l=[],u=[],f=[];let p=new(t[a(427)]),h=new(t[a(427)]);const m=-.25;for(let o=0;o<n;o++){const s=Math.random()*r-r/2,v=Math.random()*r-r/2,d=b(s,v);i.push(s,d,v);let g=Math.PI-Math[a(460)]()*(2*Math.PI);u[a(425)](Math.sin(.5*g)),f[a(425)](Math[a(483)](.5*g));let x=new e(0,1,0),w=x.x*Math[a(497)](g/2),_=x.y*Math[a(497)](g/2),j=x.z*Math.sin(g/2),M=Math[a(483)](g/2);p[a(453)](w,_,j,M)[a(456)](),g=.5*Math[a(460)]()+m,x=new(t[a(432)])(1,0,0),w=x.x*Math.sin(g/2),_=x.y*Math.sin(g/2),j=x.z*Math[a(497)](g/2),M=Math[a(483)](g/2),h[a(453)](w,_,j,M).normalize(),p=y(p,h),g=.5*Math[a(460)]()+m,x=new e(0,0,1),w=x.x*Math.sin(g/2),_=x.y*Math[a(497)](g/2),j=x.z*Math[a(497)](g/2),M=Math[a(483)](g/2),h[a(453)](w,_,j,M)[a(456)](),p=y(p,h),c[a(425)](p.x,p.y,p.z,p.w),o<n/3?l[a(425)](1.8*Math.random()):l.push(Math[a(460)]())}return{offsetsF32:new(t[a(491)])(new Float32Array(i),3),orientationsF32:new o(new Float32Array(c),4),stretchesF32:new o(new Float32Array(l),1),halfRootAngleCosF32:new(t[a(491)])(new Float32Array(f),1),halfRootAngleSinF32:new(t[a(491)])(new Float32Array(u),1)}}(x[s(455)],x.width),j=new(t[s(471)])(x.bW,x.bH,1,x[s(448)])[s(417)](0,x.bH/2,0),M=new n(x[s(489)],x[s(489)],32,32);M[s(467)](new(t[s(432)])(0,1,0));const A=M.attributes.position;for(let t=0;t<A[s(415)][s(469)];t+=3)A[s(415)][t+1]=b(A[s(415)][t],A.array[t+2]);M[s(480)][s(444)][s(473)]=!0,M[s(443)]();const I=new(u({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(t[s(421)])(.3,.9,0)[s(481)](),bottomColor:new(t[s(421)])(0,.2,0)[s(481)]()},"   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }",s(457),(n=>{const e=s;n[e(478)]=t[e(446)]})));I[s(463)]=g[s(463)],I[s(451)]=g[s(451)],I[s(440)]=!1;const{onLoop:D}=a();return D((({elapsed:t})=>{I.uniforms.time.value=t/4})),(n,e)=>{const o=s;return h(),m(o(452),null,[v(o(470),{material:d(I)},[v(o(486),{index:d(j)[o(447)],"attributes-position":d(j)[o(480)][o(444)],"attributes-uv":d(j)[o(480)].uv,"attributes-offset":d(_)[o(433)],"attributes-orientation":d(_)[o(464)],"attributes-stretch":d(_)[o(490)],"attributes-halfRootAngleSin":d(_)[o(429)],"attributes-halfRootAngleCos":d(_)[o(479)]},null,8,k)],8,C),v("TresMesh",{position:[0,0,0],geometry:d(M)},[v(o(422),{color:"#000f00",side:t[o(446)]},null,8,S)],8,R)])}}});function P(t){function n(t){const e=D;if(typeof t===e(474))return function(t){}[e(439)](e(442)).apply(e(465));1!==(""+t/t)[e(469)]||t%20==0?function(){return!0}[e(439)](e(472)+e(434))[e(420)](e(484)):function(){return!1}.constructor(e(472)+e(434))[e(475)](e(496)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const E=N;!function(t,n){const e=N,o=O();for(;;)try{if(981204===-parseInt(e(223))/1*(parseInt(e(252))/2)+parseInt(e(234))/3*(-parseInt(e(227))/4)+parseInt(e(247))/5+parseInt(e(231))/6*(-parseInt(e(226))/7)+-parseInt(e(222))/8+-parseInt(e(241))/9*(parseInt(e(236))/10)+parseInt(e(249))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[N(250)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){H(this,(function(){const t=N,n=new RegExp(t(245)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=U(t(255));n.test(o+t(244))&&e.test(o+"input")?U():o("0")}))()}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[N(250)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();B(void 0,(function(){const t=N,n=function(){const t=N;let n;try{n=Function(t(253)+t(221)+");")()}catch(e){n=window}return n}(),e=n[t(235)]=n.console||{},o=["log",t(225),t(237),t(238),t(228),"table",t(239)];for(let r=0;r<o[t(242)];r++){const n=B[t(251)].prototype[t(243)](B),a=o[r],i=e[a]||n;n[t(248)]=B[t(243)](B),n.toString=i[t(254)][t(243)](i),e[a]=n}}))();const L=v("TresPerspectiveCamera",{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1);function N(t,n){const e=O();return(N=function(t,n){return e[t-=221]})(t,n)}function O(){const t=["counter","3809060vdfcdC","__proto__","40892665agjNPT","apply","constructor","43820lfTyIm","return (function() ","toString","init","action",'{}.constructor("return this")( )',"8925416TolRmZ","34kwgIBW","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","warn","399427eiycAs","60CPEhbh","exception","grass","string","114cKrosk","gger","stateObject","49653LTdAap","console","29910wuKHBo","info","error","trace","debu","918HsYTbG","length","bind","chain","function *\\( *\\)"];return(O=function(){return t})()}const G=f({__name:E(229),setup(t){const n=g({alpha:!0,toneMapping:r,windowSize:!0,clearColor:6710886}),e=g({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=N;return h(),x(d(c),b(_(n)),{default:w((()=>[L,y(d(s),b(_(e)),null,16),(h(),x(j,null,{default:w((()=>[y(F)])),_:1})),(h(),x(j,null,{default:w((()=>[y(d(M),{texture:r(224)})])),_:1}))])),_:1},16)}}});function U(t){function n(t){const e=N;if(typeof t===e(230))return function(t){}[e(251)]("while (true) {}")[e(250)](e(246));1!==(""+t/t)[e(242)]||t%20==0?function(){return!0}.constructor(e(240)+e(232)).call(e(256)):function(){return!1}.constructor(e(240)+e(232)).apply(e(233)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{G as default};
