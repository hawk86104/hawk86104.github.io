import{e}from"./events.CafAsz9H1755073624354.js";import{m as t}from"./mqtt.DxgoMxFx1755073624354.js";class s extends e.EventEmitter{constructor(e){super(),this.config=e,this.client=null,this.connected=!1}connect(){const{host:e="localhost",port:s=8083,clientId:n=`tvt-client-${Math.random().toString(16).slice(2,8)}`,username:o,password:c,protocol:i="ws",path:r="/mqtt"}=this.config,l=`${i}://${e}:${s}${r}`;this.client=t.connect(l,{clientId:n,username:o,password:c,reconnectPeriod:2e3,clean:!0}),this.client.on("connect",(()=>{this.connected=!0,this.emit("connected"),console.log("[MQTT] Connected to:",l)})),this.client.on("reconnect",(()=>{this.emit("reconnect"),console.log("[MQTT] Reconnecting...")})),this.client.on("close",(()=>{this.connected=!1,this.emit("close"),console.warn("[MQTT] Connection closed")})),this.client.on("error",(e=>{this.emit("error",e),console.error("[MQTT] Error:",e)})),this.client.on("message",((e,t)=>{try{const s=JSON.parse(t.toString());this.emit("message",e,s),this.emit(`message:${e}`,s)}catch(s){console.error("[MQTT] JSON Parse Error:",s)}}))}subscribe(e){this.client&&this.connected&&this.client.subscribe(e,(t=>{t?console.error("[MQTT] Subscribe Error:",t):(console.log(`[MQTT] Subscribed to ${e}`),this.emit("subscribed",e))}))}publish(e,t){if(this.client&&this.connected)try{const s=JSON.stringify(t);this.client.publish(e,s)}catch(s){console.error("[MQTT] Publish Error:",s)}}unsubscribe(e){this.client&&this.connected&&this.client.unsubscribe(e,(t=>{t?console.error("[MQTT] Unsubscribe Error:",t):console.log(`[MQTT] Unsubscribed from ${e}`)}))}disconnect(){this.client&&(this.client.end(),this.connected=!1,this.emit("disconnected"),console.log("[MQTT] Disconnected"))}}export{s as M};
