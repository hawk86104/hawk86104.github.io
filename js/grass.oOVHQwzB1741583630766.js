import{s as t,_ as n,ar as e,b as o,T as r,ai as a}from"./three.sQDbNBks1741583630766.js";import{e as i,a as s,o as c,f as l}from"./@tresjs.ZmhvXhx31741583630766.js";import"./index.ankvh9aD1741583630766.js";import{c as u}from"./simplex-noise.jB2HxhHB1741583630766.js";import{C as f}from"./index.tJ5USi7G1741583630766.js";import{d as p,a3 as h,o as m,H as d,N as v,u as g,r as x,f as w,g as y,j as b,aj as _,ak as j,al as M}from"./@vue.NRI7TcgI1741583630766.js";import{_ as z}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.XrTB-66Y1741583630766.js";import"./postprocessing.7Yq_IN-m1741583630766.js";import"./@vueuse.Z9_WSajh1741583630766.js";import"./lamina.PaylzPKu1741583630766.js";import"./glsl-tokenizer.tSAvyOyd1741583630766.js";import"./@amap.-0-3lXdo1741583630766.js";import"./glsl-token-descope.nUCkm1wH1741583630766.js";import"./glsl-token-depth.GGW4NA-Q1741583630766.js";import"./glsl-token-scope.CRQcazx31741583630766.js";import"./glsl-token-properties.uUYyuzEU1741583630766.js";import"./glsl-token-assignments.qFRt00J11741583630766.js";import"./glsl-token-string.Cg7nn5lE1741583630766.js";import"./glsl-token-functions.WRiV-5A91741583630766.js";import"./object-hash.0KhWAYO_1741583630766.js";import"./jszip.aE9nyDsq1741583630766.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.v5ancJDf1741583630766.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.y5OCAzA61741583630766.js";import"./three-stdlib.apjMrEFM1741583630766.js";import"./@pmndrs.tHVKIvRt1741583630766.js";import"./utils.AA2HVEtH1741583630766.js";const A=D;!function(t,n){const e=D,o=T();for(;;)try{if(842435===parseInt(e(505))/1*(parseInt(e(548))/2)+-parseInt(e(509))/3+-parseInt(e(566))/4+parseInt(e(547))/5+-parseInt(e(499))/6+parseInt(e(504))/7*(-parseInt(e(549))/8)+parseInt(e(501))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const I=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[D(513)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){I(this,(function(){const t=D,n=new RegExp(t(496)),e=new RegExp(t(550),"i"),o=H(t(506));n.test(o+t(536))&&e[t(532)](o+t(551))?H():o("0")}))()}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[D(513)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();C(void 0,(function(){const t=D;let n;try{n=Function("return (function() "+t(539)+");")()}catch(r){n=window}const e=n.console=n[t(493)]||{},o=[t(558),t(518),t(502),t(530),"exception",t(541),"trace"];for(let a=0;a<o.length;a++){const n=C.constructor[t(492)].bind(C),r=o[a],i=e[r]||n;n.__proto__=C[t(569)](C),n.toString=i[t(523)].bind(i),e[r]=n}}))();const R=["material"],k=["index",A(568),A(517),"attributes-offset","attributes-orientation","attributes-stretch",A(516),A(563)],S=[A(507)],F=[A(570)];function D(t,n){const e=T();return(D=function(t,n){return e[t-=491]})(t,n)}function T(){const t=["apply","attributes","call","attributes-halfRootAngleSin","attributes-uv","warn","halfRootAngleCosF32","DoubleSide","joints","toneMapped","toString","set","index","stretchesF32","halfRootAngleSinF32","value","normalize","error","alphaMap","test","uniforms","cos","TresMeshStandardMaterial","chain","TresInstancedBufferGeometry","TresMesh",'{}.constructor("return this")( )',"position","table","translate","string","constructor","sin","stateObject","6679655beVkeo","2145658NAhaWT","9425896GXmHMq","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","input","PlaneGeometry","debu","gger","Vector3","time","InstancedBufferAttribute","log","Vector4","random","counter","array","attributes-halfRootAngleCos","computeVertexNormals","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","1896272uxyIjO","action","attributes-position","bind","side","push","prototype","console","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","map","function *\\( *\\)","#000f00","width","2352504eAPtMa","offsetsF32","11267514jwVmDf","info","length","7nUFRJH","1zYbPCu","init","geometry","Color","2321646OAsaRe","grass","while (true) {}","TresGroup"];return(T=function(){return t})()}const E=p({__name:A(510),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(a){const c=A;let l,p;const x=([l,p]=h((()=>s({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),l=await l,p(),l),w=a,y=u(Math[c(560)]);function b(t,e){const o=c,r=t.x*e.w+t.y*e.z-t.z*e.y+t.w*e.x,a=-t.x*e.z+t.y*e.w+t.z*e.x+t.w*e.y,i=t.x*e.y-t.y*e.x+t.z*e.w+t.w*e.z,s=-t.x*e.x-t.y*e.y-t.z*e.z+t.w*e.w;return new(n[o(559)])(r,a,i,s)}function _(t,n){var e=2*y(t/50,n/50);return e+=4*y(t/100,n/100),e+=.2*y(t/10,n/10)}const j=function(t,a){const i=c,s=[],l=[],u=[],f=[],p=[];let h=new e,m=new(n[i(559)]);const d=-.25;for(let e=0;e<t;e++){const r=Math[i(560)]()*a-a/2,c=Math.random()*a-a/2,v=_(r,c);s[i(491)](r,v,c);let g=Math.PI-Math[i(560)]()*(2*Math.PI);f[i(491)](Math.sin(.5*g)),p[i(491)](Math[i(534)](.5*g));let x=new(n[i(555)])(0,1,0),w=x.x*Math.sin(g/2),y=x.y*Math[i(545)](g/2),j=x.z*Math[i(545)](g/2),M=Math[i(534)](g/2);h[i(524)](w,y,j,M)[i(529)](),g=.5*Math[i(560)]()+d,x=new o(1,0,0),w=x.x*Math.sin(g/2),y=x.y*Math[i(545)](g/2),j=x.z*Math[i(545)](g/2),M=Math[i(534)](g/2),m.set(w,y,j,M)[i(529)](),h=b(h,m),g=.5*Math[i(560)]()+d,x=new o(0,0,1),w=x.x*Math[i(545)](g/2),y=x.y*Math[i(545)](g/2),j=x.z*Math[i(545)](g/2),M=Math.cos(g/2),m.set(w,y,j,M)[i(529)](),h=b(h,m),l.push(h.x,h.y,h.z,h.w),e<t/3?u[i(491)](1.8*Math[i(560)]()):u[i(491)](Math.random())}return{offsetsF32:new(n[i(557)])(new Float32Array(s),3),orientationsF32:new r(new Float32Array(l),4),stretchesF32:new(n[i(557)])(new Float32Array(u),1),halfRootAngleCosF32:new(n[i(557)])(new Float32Array(p),1),halfRootAngleSinF32:new r(new Float32Array(f),1)}}(w.instances,w.width),M=new t(w.bW,w.bH,1,w[c(521)])[c(542)](0,w.bH/2,0),z=new(n[c(552)])(w[c(498)],w[c(498)],32,32);z.lookAt(new(n[c(555)])(0,1,0));const I=z[c(514)][c(540)];for(let t=0;t<I[c(562)][c(503)];t+=3)I[c(562)][t+1]=_(I[c(562)][t],I.array[t+2]);z[c(514)][c(540)].needsUpdate=!0,z[c(564)]();const C=new(f({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(n[c(508)])(.3,.9,0).convertSRGBToLinear(),bottomColor:new(n[c(508)])(0,.2,0).convertSRGBToLinear()},c(494),c(565),(t=>{const e=c;t.side=n[e(520)]})));C[c(495)]=x.map,C.alphaMap=x[c(531)],C[c(522)]=!1;const{onLoop:D}=i();return D((({elapsed:t})=>{const n=c;C[n(533)][n(556)][n(528)]=t/4})),(t,e)=>{const o=c;return m(),d(o(512),null,[v(o(538),{material:g(C)},[v(o(537),{index:g(M)[o(525)],"attributes-position":g(M)[o(514)][o(540)],"attributes-uv":g(M).attributes.uv,"attributes-offset":g(j)[o(500)],"attributes-orientation":g(j).orientationsF32,"attributes-stretch":g(j)[o(526)],"attributes-halfRootAngleSin":g(j)[o(527)],"attributes-halfRootAngleCos":g(j)[o(519)]},null,8,k)],8,R),v(o(538),{position:[0,0,0],geometry:g(z)},[v(o(535),{color:o(497),side:n[o(520)]},null,8,F)],8,S)])}}});function H(t){function n(t){const e=D;if(typeof t===e(543))return function(t){}[e(544)](e(511))[e(513)](e(561));1!==(""+t/t)[e(503)]||t%20==0?function(){return!0}[e(544)](e(553)+e(554))[e(515)](e(567)):function(){return!1}[e(544)](e(553)+e(554))[e(513)](e(546)),n(++t)}try{if(t)return n;n(0)}catch(e){}}function O(t,n){const e=G();return(O=function(t,n){return e[t-=251]})(t,n)}const P=O;!function(t,n){const e=O,o=G();for(;;)try{if(233503===parseInt(e(272))/1*(parseInt(e(281))/2)+-parseInt(e(258))/3*(parseInt(e(290))/4)+parseInt(e(269))/5*(parseInt(e(292))/6)+parseInt(e(277))/7*(-parseInt(e(286))/8)+-parseInt(e(275))/9+-parseInt(e(287))/10*(-parseInt(e(252))/11)+parseInt(e(280))/12*(parseInt(e(279))/13))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[O(264)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){L(this,(function(){const t=O,n=new RegExp(t(271)),e=new RegExp(t(268),"i"),o=N(t(291));n.test(o+t(266))&&e[t(267)](o+"input")?N():o("0")}))()}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[O(264)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();B(void 0,(function(){const t=O,n=function(){const t=O;let n;try{n=Function(t(261)+t(283)+");")()}catch(e){n=window}return n}(),e=n[t(254)]=n.console||{},o=[t(293),t(256),t(270),t(257),t(259),t(282),t(262)];for(let r=0;r<o[t(285)];r++){const n=B[t(253)].prototype[t(276)](B),a=o[r],i=e[a]||n;n[t(273)]=B.bind(B),n[t(288)]=i[t(288)].bind(i),e[a]=n}}))();const U=p({__name:P(263),setup(t){const n=x({alpha:!0,toneMapping:a,windowSize:!0,clearColor:6710886}),e=x({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=O;return m(),w(g(l),_(j(n)),{default:y((()=>[o[0]||(o[0]=v("TresPerspectiveCamera",{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),b(g(c),_(j(e)),null,16),(m(),w(M,null,{default:y((()=>[b(E)])),_:1})),(m(),w(M,null,{default:y((()=>[b(g(z),{texture:r(284)})])),_:1}))])),_:1},16)}}});function G(){const t=["10824dTkkxf","constructor","console","string","warn","error","3fwWtxh","exception","counter","return (function() ","trace","grass","apply","action","chain","test","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","3465ioLOiT","info","function *\\( *\\)","1Ytttgv","__proto__","debu","753912vsRsJr","bind","321244SUNaqa","while (true) {}","299949bRsTED","144cfxWVL","221884wUSBnz","table",'{}.constructor("return this")( )',"https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","length","72iGnuja","3280aIRwVj","toString","gger","314708xeUhkE","init","852iHFRNZ","log","call"];return(G=function(){return t})()}function N(t){function n(t){const e=O;if(typeof t===e(255))return function(t){}.constructor(e(278))[e(264)](e(260));1!==(""+t/t)[e(285)]||t%20==0?function(){return!0}.constructor(e(274)+e(289))[e(251)](e(265)):function(){return!1}[e(253)](e(274)+e(289)).apply("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{U as default};
