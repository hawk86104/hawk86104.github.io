import{a6 as t,C as n,Z as e,V as o,K as r,a9 as a}from"./three.6cxCQsIj1724511658098.js";import{$ as i,N as s,d as c,x as l}from"./@tresjs.6SjGVF2a1724511658098.js";import"./index.3FQqgELt1724511658098.js";import{a as u}from"./simplex-noise.MycypUyu1724511658098.js";import{C as f}from"./index.HtCYeuim1724511658098.js";import{d as p,a4 as h,o as m,D as v,J as d,u as g,r as x,f as w,g as y,j as b,aj as _,ak as j,al as M}from"./@vue.Q1VpS3901724511658098.js";import{_ as z}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.1ZI2MRFz1724511658098.js";import"./tweakpane.yHWGBmom1724511658098.js";import"./@vueuse.rsVLbIR91724511658098.js";import"./lamina.L5j_82YY1724511658098.js";import"./glsl-tokenizer.iUIReWhC1724511658098.js";import"./@amap.T3VNXNvb1724511658098.js";import"./glsl-token-descope.UsmeT3I51724511658098.js";import"./glsl-token-depth.SdyVdc9w1724511658098.js";import"./glsl-token-scope.Pafmu2CS1724511658098.js";import"./glsl-token-properties.gmYp9w_t1724511658098.js";import"./glsl-token-assignments.BAfF5dAa1724511658098.js";import"./glsl-token-string._w0o_gSI1724511658098.js";import"./glsl-token-functions.OlCnqPaR1724511658098.js";import"./object-hash.Ic9VzAZ81724511658098.js";import"./jszip.GTkatbFy1724511658098.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.PdJ4szY01724511658098.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.bhsiX0Op1724511658098.js";import"./three-stdlib.eSyESjZu1724511658098.js";import"./@pmndrs.ZvP486_R1724511658098.js";import"./utils.EpZEBIyF1724511658098.js";const A=F;!function(t,n){const e=F,o=L();for(;;)try{if(144515===-parseInt(e(219))/1+-parseInt(e(234))/2+-parseInt(e(248))/3+-parseInt(e(276))/4*(-parseInt(e(227))/5)+-parseInt(e(281))/6*(-parseInt(e(265))/7)+parseInt(e(271))/8*(-parseInt(e(298))/9)+parseInt(e(257))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const I=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[F(236)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){I(this,(function(){const t=F,n=new RegExp("function *\\( *\\)"),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=T(t(290));n[t(267)](o+t(266))&&e.test(o+t(249))?T():o("0")}))()}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();C(void 0,(function(){const t=F,n=function(){const t=F;let n;try{n=Function(t(260)+t(238)+");")()}catch(e){n=window}return n}(),e=n[t(264)]=n[t(264)]||{},o=[t(218),t(233),t(243),t(293),"exception",t(282),t(224)];for(let r=0;r<o[t(273)];r++){const n=C[t(297)][t(278)][t(246)](C),a=o[r],i=e[a]||n;n[t(270)]=C[t(246)](C),n[t(263)]=i.toString[t(246)](i),e[a]=n}}))();const k=[A(286)],S=[A(283),A(220),A(239),"attributes-offset",A(237),A(256),A(284),A(217)],D=[A(251)],R=[A(269)],B=p({__name:"grass",props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(a){const c=A;let l,p;const x=([l,p]=h((()=>s({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),l=await l,p(),l),w=a,y=u(Math[c(230)]);function b(n,e){const o=c,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,a=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,i=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,s=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(223)])(r,a,i,s)}function _(t,n){var e=2*y(t/50,n/50);return e+=4*y(t/100,n/100),e+=.2*y(t/10,n/10)}const j=function(n,e){const a=c,i=[],s=[],l=[],u=[],f=[];let p=new(t[a(223)]),h=new(t[a(223)]);const m=-.25;for(let r=0;r<n;r++){const c=Math[a(230)]()*e-e/2,v=Math[a(230)]()*e-e/2,d=_(c,v);i.push(c,d,v);let g=Math.PI-Math[a(230)]()*(2*Math.PI);u.push(Math[a(291)](.5*g)),f[a(289)](Math[a(295)](.5*g));let x=new o(0,1,0),w=x.x*Math[a(291)](g/2),y=x.y*Math[a(291)](g/2),j=x.z*Math.sin(g/2),M=Math[a(295)](g/2);p[a(240)](w,y,j,M)[a(229)](),g=.5*Math[a(230)]()+m,x=new(t[a(255)])(1,0,0),w=x.x*Math[a(291)](g/2),y=x.y*Math[a(291)](g/2),j=x.z*Math[a(291)](g/2),M=Math[a(295)](g/2),h.set(w,y,j,M)[a(229)](),p=b(p,h),g=.5*Math.random()+m,x=new(t[a(255)])(0,0,1),w=x.x*Math[a(291)](g/2),y=x.y*Math[a(291)](g/2),j=x.z*Math[a(291)](g/2),M=Math[a(295)](g/2),h[a(240)](w,y,j,M).normalize(),p=b(p,h),s[a(289)](p.x,p.y,p.z,p.w),r<n/3?l[a(289)](1.8*Math[a(230)]()):l[a(289)](Math[a(230)]())}return{offsetsF32:new r(new Float32Array(i),3),orientationsF32:new(t[a(277)])(new Float32Array(s),4),stretchesF32:new(t[a(277)])(new Float32Array(l),1),halfRootAngleCosF32:new(t[a(277)])(new Float32Array(f),1),halfRootAngleSinF32:new(t[a(277)])(new Float32Array(u),1)}}(w[c(288)],w[c(222)]),M=new(t[c(254)])(w.bW,w.bH,1,w.joints)[c(287)](0,w.bH/2,0),z=new(t[c(254)])(w[c(222)],w[c(222)],32,32);z.lookAt(new(t[c(255)])(0,1,0));const I=z.attributes.position;for(let t=0;t<I.array[c(273)];t+=3)I[c(231)][t+1]=_(I[c(231)][t],I[c(231)][t+2]);z.attributes[c(235)][c(285)]=!0,z.computeVertexNormals();const C=new(f({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(t[c(252)])(.3,.9,0).convertSRGBToLinear(),bottomColor:new n(0,.2,0)[c(292)]()},c(247),c(259),(n=>{const e=c;n.side=t[e(280)]})));C[c(294)]=x[c(294)],C[c(242)]=x[c(242)],C.toneMapped=!1;const{onLoop:B}=i();return B((({elapsed:t})=>{const n=c;C[n(262)][n(244)][n(268)]=t/4})),(t,n)=>{const o=c;return m(),v(o(232),null,[d(o(253),{material:g(C)},[d(o(275),{index:g(M).index,"attributes-position":g(M).attributes.position,"attributes-uv":g(M)[o(226)].uv,"attributes-offset":g(j)[o(221)],"attributes-orientation":g(j)[o(241)],"attributes-stretch":g(j)[o(225)],"attributes-halfRootAngleSin":g(j)[o(279)],"attributes-halfRootAngleCos":g(j)[o(228)]},null,8,S)],8,k),d(o(253),{position:[0,0,0],geometry:g(z)},[d(o(296),{color:o(261),side:e},null,8,R)],8,D)])}}});function F(t,n){const e=L();return(F=function(t,n){return e[t-=217]})(t,n)}function L(){const t=["input","counter","geometry","Color","TresMesh","PlaneGeometry","Vector3","attributes-stretch","3985160GyzSjK","gger","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","return (function() ","#000f00","uniforms","toString","console","3353uKKpvK","chain","test","value","side","__proto__","13440gQBuOK","call","length","debu","TresInstancedBufferGeometry","4xjKYQX","InstancedBufferAttribute","prototype","halfRootAngleSinF32","DoubleSide","444QdkwYZ","table","index","attributes-halfRootAngleSin","needsUpdate","material","translate","instances","push","init","sin","convertSRGBToLinear","error","map","cos","TresMeshStandardMaterial","constructor","972Bttflb","attributes-halfRootAngleCos","log","86854VlMoCB","attributes-position","offsetsF32","width","Vector4","trace","stretchesF32","attributes","965390irWdHI","halfRootAngleCosF32","normalize","random","array","TresGroup","warn","233070jWAquP","position","apply","attributes-orientation",'{}.constructor("return this")( )',"attributes-uv","set","orientationsF32","alphaMap","info","time","stateObject","bind","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","293088UKflDA"];return(L=function(){return t})()}function T(t){function n(t){const e=F;if("string"==typeof t)return function(t){}.constructor("while (true) {}")[e(236)](e(250));1!==(""+t/t).length||t%20==0?function(){return!0}[e(297)](e(274)+e(258))[e(272)]("action"):function(){return!1}.constructor(e(274)+e(258)).apply(e(245)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const E=H;!function(t,n){const e=H,o=V();for(;;)try{if(408538===parseInt(e(282))/1+-parseInt(e(277))/2+-parseInt(e(260))/3+-parseInt(e(266))/4+-parseInt(e(258))/5+parseInt(e(259))/6+parseInt(e(254))/7)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[H(280)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){O(this,(function(){const t=H,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(256),"i"),o=N(t(261));n[t(278)](o+t(268))&&e.test(o+t(279))?N():o("0")}))()}();const P=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[H(280)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();P(void 0,(function(){const t=H;let n;try{n=Function('return (function() {}.constructor("return this")( ));')()}catch(r){n=window}const e=n.console=n[t(267)]||{},o=[t(281),t(269),t(262),t(276),t(263),t(251),t(255)];for(let a=0;a<o[t(283)];a++){const n=P[t(273)][t(257)][t(253)](P),r=o[a],i=e[r]||n;n.__proto__=P[t(253)](P),n[t(284)]=i[t(284)].bind(i),e[r]=n}}))();const q=d(E(252),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1),G=p({__name:"grass",setup(t){const n=x({alpha:!0,toneMapping:a,windowSize:!0,clearColor:6710886}),e=x({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=H;return m(),w(g(l),_(j(n)),{default:y((()=>[q,b(g(c),_(j(e)),null,16),(m(),w(M,null,{default:y((()=>[b(B)])),_:1})),(m(),w(M,null,{default:y((()=>[b(g(z),{texture:r(275)})])),_:1}))])),_:1},16)}}});function H(t,n){const e=V();return(H=function(t,n){return e[t-=251]})(t,n)}function V(){const t=["1396104IoqGzu","console","chain","warn","counter","call","while (true) {}","constructor","gger","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","error","1572702jxjbQA","test","input","apply","log","80244eqBCxr","length","toString","table","TresPerspectiveCamera","bind","15940932ctBtBL","trace","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","prototype","3247350kVIGNL","2689650AQqDDL","1837230WBKjkm","init","info","exception","string","debu"];return(V=function(){return t})()}function N(t){function n(t){const e=H;if(typeof t===e(264))return function(t){}[e(273)](e(272))[e(280)](e(270));1!==(""+t/t)[e(283)]||t%20==0?function(){return!0}[e(273)](e(265)+"gger")[e(271)]("action"):function(){return!1}[e(273)]("debu"+e(274)).apply("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{G as default};
