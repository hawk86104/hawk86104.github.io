import"./index.Ll1hMrXd1750295690454.js";import{m as e,k as a,V as t,a as r}from"./@tresjs.wZhcVcHe1750295690454.js";import{d as o,w as s,a3 as n,G as l,o as i,I as m,u as c,e as p,f as d,b as u,r as h,h as g,j as f,am as v,ak as _,al as S,F as w}from"./@vue.Mugdq9o81750295690454.js";import"./index.CtpK8Mi51750295690454.js";import{P as y}from"./tweakpane.C0HtAJSg1750295690454.js";import{_ as b}from"./randomLoading.vue_vue_type_script_setup_true_lang.DoQlO2Q91750295690454.js";import{bW as j,l as M,O,ax as T}from"./three.BCtXTlZY1750295690454.js";import"./utils.CND_qGth1750295690454.js";import"./@fesjs.DMJyiXGl1750295690454.js";import"./vue-router.88WhL0T41750295690454.js";import"./lodash-es.C7pWAXPe1750295690454.js";import"./@qlin.q6OWdsQV1750295690454.js";import"./pinia.eIwiwG2d1750295690454.js";import"./@babel.BPq7uOAK1750295690454.js";import"./@floating-ui.BFjFSAYt1750295690454.js";import"./@juggle.CcBCnTIR1750295690454.js";import"./index.Di7Z8xNN1750295690454.js";import"./three-mesh-ui.module.D73brVjB1750295690454.js";import"./postprocessing.B3dpkXpp1750295690454.js";import"./@vueuse.8goBbrUr1750295690454.js";import"./object-hash.Ddll2Azb1750295690454.js";import"./@amap.CGUF9xH41750295690454.js";import"./jszip.BdEZ802S1750295690454.js";import"./starLoading.Bc1XS17R1750295690454.js";import"./cssLoaders.BUFMabJn1750295690454.js";import"./bubbleLoading.C2nJkcT71750295690454.js";import"./yangyangLoading.2vs4zCBE1750295690454.js";const R=({focus:e=0,size:a=25,samples:t=10}={})=>{const r=j.shadowmap_pars_fragment;return j.shadowmap_pars_fragment=j.shadowmap_pars_fragment.replace("#ifdef USE_SHADOWMAP",`#ifdef USE_SHADOWMAP\n\n    #define PENUMBRA_FILTER_SIZE float(${a})\n    #define RGB_NOISE_FUNCTION(uv) (randRGB(uv))\n    vec3 randRGB(vec2 uv) {\n      return vec3(\n        fract(sin(dot(uv, vec2(12.75613, 38.12123))) * 13234.76575),\n        fract(sin(dot(uv, vec2(19.45531, 58.46547))) * 43678.23431),\n        fract(sin(dot(uv, vec2(23.67817, 78.23121))) * 93567.23423)\n      );\n    }\n    \n    vec3 lowPassRandRGB(vec2 uv) {\n      // 3x3 convolution (average)\n      // can be implemented as separable with an extra buffer for a total of 6 samples instead of 9\n      vec3 result = vec3(0);\n      result += RGB_NOISE_FUNCTION(uv + vec2(-1.0, -1.0));\n      result += RGB_NOISE_FUNCTION(uv + vec2(-1.0,  0.0));\n      result += RGB_NOISE_FUNCTION(uv + vec2(-1.0, +1.0));\n      result += RGB_NOISE_FUNCTION(uv + vec2( 0.0, -1.0));\n      result += RGB_NOISE_FUNCTION(uv + vec2( 0.0,  0.0));\n      result += RGB_NOISE_FUNCTION(uv + vec2( 0.0, +1.0));\n      result += RGB_NOISE_FUNCTION(uv + vec2(+1.0, -1.0));\n      result += RGB_NOISE_FUNCTION(uv + vec2(+1.0,  0.0));\n      result += RGB_NOISE_FUNCTION(uv + vec2(+1.0, +1.0));\n      result *= 0.111111111; // 1.0 / 9.0\n      return result;\n    }\n    vec3 highPassRandRGB(vec2 uv) {\n      // by subtracting the low-pass signal from the original signal, we're being left with the high-pass signal\n      // hp(x) = x - lp(x)\n      return RGB_NOISE_FUNCTION(uv) - lowPassRandRGB(uv) + 0.5;\n    }\n    \n    \n    vec2 vogelDiskSample(int sampleIndex, int sampleCount, float angle) {\n      const float goldenAngle = 2.399963f; // radians\n      float r = sqrt(float(sampleIndex) + 0.5f) / sqrt(float(sampleCount));\n      float theta = float(sampleIndex) * goldenAngle + angle;\n      float sine = sin(theta);\n      float cosine = cos(theta);\n      return vec2(cosine, sine) * r;\n    }\n    float penumbraSize( const in float zReceiver, const in float zBlocker ) { // Parallel plane estimation\n      return (zReceiver - zBlocker) / zBlocker;\n    }\n    float findBlocker(sampler2D shadowMap, vec2 uv, float compare, float angle) {\n      float texelSize = 1.0 / float(textureSize(shadowMap, 0).x);\n      float blockerDepthSum = float(${e});\n      float blockers = 0.0;\n    \n      int j = 0;\n      vec2 offset = vec2(0.);\n      float depth = 0.;\n    \n      #pragma unroll_loop_start\n      for(int i = 0; i < ${t}; i ++) {\n        offset = (vogelDiskSample(j, ${t}, angle) * texelSize) * 2.0 * PENUMBRA_FILTER_SIZE;\n        depth = unpackRGBAToDepth( texture2D( shadowMap, uv + offset));\n        if (depth < compare) {\n          blockerDepthSum += depth;\n          blockers++;\n        }\n        j++;\n      }\n      #pragma unroll_loop_end\n    \n      if (blockers > 0.0) {\n        return blockerDepthSum / blockers;\n      }\n      return -1.0;\n    }\n            \n    float vogelFilter(sampler2D shadowMap, vec2 uv, float zReceiver, float filterRadius, float angle) {\n      float texelSize = 1.0 / float(textureSize(shadowMap, 0).x);\n      float shadow = 0.0f;\n      int j = 0;\n      vec2 vogelSample = vec2(0.0);\n      vec2 offset = vec2(0.0);\n      #pragma unroll_loop_start\n      for (int i = 0; i < ${t}; i++) {\n        vogelSample = vogelDiskSample(j, ${t}, angle) * texelSize;\n        offset = vogelSample * (1.0 + filterRadius * float(${a}));\n        shadow += step( zReceiver, unpackRGBAToDepth( texture2D( shadowMap, uv + offset ) ) );\n        j++;\n      }\n      #pragma unroll_loop_end\n      return shadow * 1.0 / ${t}.0;\n    }\n    \n    float PCSS (sampler2D shadowMap, vec4 coords) {\n      vec2 uv = coords.xy;\n      float zReceiver = coords.z; // Assumed to be eye-space z in this code\n      float angle = highPassRandRGB(gl_FragCoord.xy).r * PI2;\n      float avgBlockerDepth = findBlocker(shadowMap, uv, zReceiver, angle);\n      if (avgBlockerDepth == -1.0) {\n        return 1.0;\n      }\n      float penumbraRatio = penumbraSize(zReceiver, avgBlockerDepth);\n      return vogelFilter(shadowMap, uv, zReceiver, 1.25 * penumbraRatio, angle);\n    }`).replace("#if defined( SHADOWMAP_TYPE_PCF )","\nreturn PCSS(shadowMap, shadowCoord);\n#if defined( SHADOWMAP_TYPE_PCF )"),(e,a,t)=>{j.shadowmap_pars_fragment=r,function(e,a,t){a.traverse((a=>{a.material&&(Array.isArray(a.material)?a.material.forEach((a=>{e.properties.remove(a),a.dispose()})):(e.properties.remove(a.material),a.material.dispose()))})),e.info.programs.length=0,e.compile(a,t)}(e,a,t)}},k=o({__name:"index",props:{enabled:{type:Boolean,default:!0},size:{default:25},focus:{default:0},samples:{default:10}},setup(a){const t=a,{camera:r,renderer:o,scene:n}=e();let l=null;const i=e=>{const{enabled:a,size:t,focus:s,samples:i}=e;l&&(l(o.value,n.value,r.value),l=null),a&&(l=R({focus:s,size:t,samples:i}),n.value.traverse((e=>{e instanceof M&&e.material.dispose()})))};return i(t),s(t,(()=>{i(t)})),(e,a)=>null}}),z=["rotation"],B=["geometry","material"],N=["geometry","material"],I=["geometry","material"],x=["geometry","material"],C=["geometry","material"],E=["geometry","material"],P=["geometry","material"],D=["geometry","material"],G=["geometry","material"],F=["geometry","material"],A=["geometry","material"],U=["geometry","material"],L=["geometry"],$=["geometry","material"],W=["geometry","material"],H=["geometry","material"],q=["geometry","material"],Y=o({__name:"roomMesh",async setup(e){let t,r;const{nodes:o,materials:s}=([t,r]=n((()=>a("./plugins/visualArts/model/room-transformed.glb",{draco:!0,decoderPath:"./draco/"}))),t=await t,r(),t);return(e,a)=>(i(),l("TresGroup",{rotation:[-Math.PI/2,0,0]},[m("TresMesh",{castShadow:"",receiveShadow:"",geometry:c(o).Object_2.geometry,material:c(s).Material},null,8,B),m("TresMesh",{castShadow:"",receiveShadow:"",geometry:c(o).Object_3.geometry,material:c(s)["Material.002"]},null,8,N),m("TresMesh",{castShadow:"",receiveShadow:"",geometry:c(o).Object_4.geometry,material:c(s)["Material.003"]},null,8,I),m("TresMesh",{castShadow:"",receiveShadow:"",geometry:c(o).Object_6.geometry,material:c(s).krzeslo_1},null,8,x),m("TresMesh",{castShadow:"",receiveShadow:"",geometry:c(o).Object_7.geometry,material:c(s).krzeslo_okno},null,8,C),m("TresMesh",{castShadow:"",receiveShadow:"",geometry:c(o).Object_8.geometry,material:c(s).krzeslo_prawe},null,8,E),m("TresMesh",{castShadow:"",receiveShadow:"",geometry:c(o).Object_9.geometry,material:c(s).krzeslo_srodek},null,8,P),m("TresMesh",{castShadow:"",receiveShadow:"",geometry:c(o).Object_10.geometry,material:c(s).podloga},null,8,D),m("TresMesh",{castShadow:"",receiveShadow:"",geometry:c(o).Object_11.geometry,material:c(s).sciana_okno},null,8,G),m("TresMesh",{castShadow:"",receiveShadow:"",geometry:c(o).Object_12.geometry,material:c(s)["stolik.001"]},null,8,F),m("TresMesh",{castShadow:"",receiveShadow:"",geometry:c(o).Object_16.geometry,material:c(s)["Material.006"]},null,8,A),m("TresMesh",{castShadow:"",receiveShadow:"",geometry:c(o).Object_5.geometry,material:c(s)["Material.004"]},null,8,U),m("TresMesh",{geometry:c(o).Object_13.geometry},a[0]||(a[0]=[m("TresMeshStandardMaterial",{transparent:"",opacity:.5},null,-1)]),8,L),m("TresMesh",{castShadow:"",receiveShadow:"",geometry:c(o).Object_14.geometry,material:c(s)["Material.002"]},null,8,$),m("TresMesh",{castShadow:"",receiveShadow:"",geometry:c(o).Object_15.geometry,material:c(s)["Material.005"]},null,8,W),m("TresMesh",{castShadow:"",receiveShadow:"",geometry:c(o).Object_17.geometry,material:c(s).mata},null,8,H),m("TresMesh",{castShadow:"",receiveShadow:"",geometry:c(o).Object_18.geometry,material:c(s).stolik},null,8,q)],8,z))}}),Z=o({__name:"sphere",setup:e=>(e,a)=>(i(),p(c(t),{floatFactor:15,speed:2},{default:d((()=>a[0]||(a[0]=[m("TresMesh",{castShadow:"",position:[0,5,0]},[m("TresSphereGeometry"),m("TresMeshBasicMaterial",{color:"hotpink",roughness:1})],-1)]))),_:1}))}),V=o({__name:"roomup",setup(e){const a=u(null);s(a,(e=>{e&&(e.shadow.camera=new O(-8.5,8.5,8.5,-8.5,.1,20))}));const o={clearColor:"#d0d0d0",windowSize:!0,toneMapping:T,toneMappingExposure:.8,shadows:!0},n=h({enabled:!0,size:25,focus:0,samples:10}),j=new y({title:"参数"});return j.addBinding(n,"enabled",{label:"开启PCSS"}),j.addBinding(n,"size",{label:"size",min:1,max:100,step:1}),j.addBinding(n,"focus",{label:"focus",min:0,max:2,step:.1}),j.addBinding(n,"samples",{label:"samples",min:1,max:20,step:1}),(e,s)=>{const u=g("TresCanvas");return i(),l(w,null,[f(c(b)),f(u,_(S(o)),{default:d((()=>[s[0]||(s[0]=m("TresPerspectiveCamera",{position:[5,2,10],fov:45,near:.1,far:1e3},null,-1)),f(c(r),{enableDamping:""}),s[1]||(s[1]=m("TresAmbientLight",{intensity:2},null,-1)),f(c(t),null,{default:d((()=>[m("TresDirectionalLight",{ref_key:"dLight",ref:a,position:[5,5,-8],castShadow:"",intensity:5,"shadow-mapSize":2048,"shadow-bias":-.001},null,512)])),_:1}),(i(),p(v,null,{default:d((()=>[f(Y,{scale:.5,position:[0,-1,0]})])),_:1})),f(Z,{position:[0,5,-8]}),f(Z,{position:[2,4,-8],scale:.9}),f(Z,{position:[-2,2,-8],scale:.8}),f(c(k),_(S(n)),null,16)])),_:1},16)],64)}}});export{V as default};
