import{p as t,U as n,z as e,Y as o}from"./@tresjs.ED4ePb8T1728467445434.js";import{_ as r,V as a,cK as s,M as i,n as c,cL as l,cq as u}from"./three.5octV-9b1728467445434.js";import{P as v}from"./tweakpane.yHWGBmom1728467445434.js";import{d as f,a4 as p,e as d,o as m,f as g,g as x,L as h,j as y,u as b,aj as I,ak as _,al as S,m as U}from"./@vue.JNsx1iN61728467445434.js";import{_ as w}from"./@fesjs.BZc1KM0D1728467445434.js";import"./@vueuse.G8I04tzi1728467445434.js";import"./vue-router.2EyA_Lnc1728467445434.js";import"./lodash-es.kYt-_xTG1728467445434.js";import"./@qlin.yHhFDldE1728467445434.js";import"./pinia.Y0XmpKlm1728467445434.js";import"./@floating-ui.BPbuo5Gx1728467445434.js";import"./@juggle.7yjBMqoW1728467445434.js";!function(t,n){const e=P,o=E();for(;;)try{if(466098===parseInt(e(388))/1*(-parseInt(e(382))/2)+-parseInt(e(383))/3+parseInt(e(432))/4+parseInt(e(406))/5+-parseInt(e(396))/6+parseInt(e(412))/7*(-parseInt(e(395))/8)+parseInt(e(405))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const D=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[P(418)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function P(t,n){const e=E();return(P=function(t,n){return e[t-=382]})(t,n)}function E(){const t=["616822Jesvwl","656490BmpiaG","WagnerLoadShaderException","toString","table","counter","1rDjpzq","Matrix3","Vector3","call","Vector4","value","string","4673008RSEbOT","2525310eEyiRc","stateObject","bind","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)",'Shader "',"exec","onabort","send","v3v","8940483NnhpnQ","3046000HIcOVD","chain","hasOwnProperty","random","Texture","onerror","7YaARaB","function *\\( *\\)","action",'{}.constructor("return this")( )',"length","while (true) {}","apply","prototype","log","error","replace","test","return (function() ","onload","__proto__","isArray","now","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","message","gger","1583052pvuqGb","responseText","index",'" load was aborted.',"ShaderMaterial","init","console","input","constructor","lastIndex","Vector2","debu","info","object"];return(E=function(){return t})()}!function(){D(this,(function(){const t=P,n=new RegExp(t(413)),e=new RegExp(t(399),"i"),o=L(t(437));n[t(423)](o+t(407))&&e[t(423)](o+t(439))?L():o("0")}))()}();const M=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[P(418)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();M(void 0,(function(){const t=P,n=function(){const t=P;let n;try{n=Function(t(424)+t(415)+");")()}catch(e){n=window}return n}(),e=n[t(438)]=n[t(438)]||{},o=[t(420),"warn",t(444),t(421),"exception",t(386),"trace"];for(let r=0;r<o[t(416)];r++){const n=M[t(440)][t(419)][t(398)](M),a=o[r],s=e[a]||n;n[t(426)]=M.bind(M),n[t(385)]=s[t(385)][t(398)](s),e[a]=n}}))();function A(t,n,e){const o=P;if(typeof t!==o(445)||null===t)return t;const r=Array[o(427)](t)?[]:{};for(const a in t)t[o(408)](a)&&(r[a]=A(t[a])),a==n&&(r[n]=e);return r}function L(t){function n(t){const e=P;if(typeof t===e(394))return function(t){}[e(440)](e(417))[e(418)](e(387));1!==(""+t/t)[e(416)]||t%20==0?function(){return!0}.constructor(e(443)+e(431))[e(391)](e(414)):function(){return!1}[e(440)](e(443)+e(431))[e(418)](e(397)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const z=N;!function(t,n){const e=N,o=T();for(;;)try{if(366875===parseInt(e(495))/1+-parseInt(e(487))/2*(parseInt(e(548))/3)+parseInt(e(567))/4+-parseInt(e(496))/5*(-parseInt(e(530))/6)+parseInt(e(529))/7+parseInt(e(539))/8+-parseInt(e(553))/9*(parseInt(e(552))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const F=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[N(481)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){F(this,(function(){const t=N,n=new RegExp(t(510)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=G(t(546));n[t(562)](o+t(483))&&e[t(562)](o+t(500))?G():o("0")}))()}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function N(t,n){const e=T();return(N=function(t,n){return e[t-=481]})(t,n)}C(void 0,(function(){const t=N;let n;try{n=Function(t(489)+t(560)+");")()}catch(r){n=window}const e=n[t(579)]=n[t(579)]||{},o=[t(541),t(578),t(506),t(580),t(524),"table",t(533)];for(let a=0;a<o.length;a++){const n=C[t(551)][t(504)][t(507)](C),r=o[a],s=e[r]||n;n[t(486)]=C[t(507)](C),n[t(522)]=s.toString.bind(s),e[r]=n}}))();class R{constructor(t,n){const e=N;this.width=1,this[e(542)]=1,this[e(488)]=n||{},this[e(492)]=this[e(488)].useRGBA||!1,this[e(503)]=t,this[e(534)]=this[e(482)](this[e(488)]),this[e(587)]=new(r[e(498)]),this[e(505)]=new(r[e(550)])(new(r[e(583)])(1,1),new(r[e(565)])),this[e(587)][e(563)](this.quad),this.camera=new(r[e(538)])(1,1,1,1,-1e4,1e4),this[e(543)]=new(r[e(517)])(1,1,{minFilter:void 0!==this[e(488)][e(570)]?this[e(488)].minFilter:c,magFilter:void 0!==this[e(488)][e(526)]?this[e(488)][e(526)]:r[e(527)],wrapS:void 0!==this[e(488)].wrapS?this[e(488)][e(584)]:r[e(491)],wrapT:void 0!==this.settings[e(537)]?this.settings[e(537)]:r[e(491)],format:this.useRGBA?r[e(581)]:r[e(490)],type:void 0!==this[e(488)][e(585)]?this[e(488)][e(585)]:r[e(485)],stencilBuffer:void 0===this[e(488)].stencilBuffer||this[e(488)][e(516)]}),this[e(520)]=this[e(543)][e(571)](),this[e(540)]=Date.now(),this.passes={},this[e(499)]={passItems:[],passes:[]}}[z(513)](t,n,e,o){const r=z;this[r(512)](n);const a={shaderName:t,params:e,uuid:o,shader:this[r(569)]};this[r(499)][r(494)][r(525)](a)}[z(575)](t){const n=z;for(let e=this[n(499)][n(494)][n(531)]-1;e>=0;e--)this[n(499)][n(494)][e][n(518)]===parseInt(t)&&this.Stack[n(494)].splice(e,1);console[n(541)](this[n(499)][n(494)])}[z(482)](){const t=z;this[t(559)][t(549)](this);return this[t(512)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[z(512)](t){const n=z,e=n(515);return this[n(569)]=function(t,n){const e=P,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,c=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,l={sampler2D:{type:"t",value:()=>new(r[P(410)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[P(442)])},vec3:{type:"v3",value:()=>new(r[P(390)])},vec4:{type:"v4",value:()=>new(r[P(392)])},bvec2:{type:"v2",value:()=>new(r[P(442)])},bvec3:{type:"v3",value:()=>new(r[P(390)])},bvec4:{type:"v4",value:()=>new(r[P(392)])},ivec2:{type:"v2",value:()=>new(r[P(442)])},ivec3:{type:"v3",value:()=>new a},ivec4:{type:"v4",value:()=>new(r[P(392)])},mat2:{type:"v2",value:()=>new s},mat3:{type:"v3",value:()=>new(r[P(389)])},mat4:{type:"v4",value:()=>new i}},u={float:{type:"fv",value:()=>[]},vec3:{type:e(404),value:()=>[]}};let v;const f={resolution:{type:"v2",value:new(r[e(442)])(1,1),default:!0},time:{type:"f",value:Date[e(428)](),default:!0},tInput:{type:"t",value:new(r[e(410)]),default:!0}};let p,d;for(;null!==(v=o[e(401)](n));)v[e(434)]===o.lastIndex&&o[e(441)]++,p=v[1],d=v[2],f[d]={type:l[p].type,value:l[p][e(393)]()};for(;null!==(v=c.exec(n));)v[e(434)]===o[e(441)]&&o[e(441)]++,p=v[1],d=v[2],v[3],f[d]={type:u[p].type,value:u[p].value()};return new(r[e(436)])({uniforms:f,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(569)]}[z(559)](t){const n=z;this[n(569)]=null,this[n(528)]={}}[z(561)](){const t=z;this.read=this[t(543)],this[t(566)]=this[t(520)]}[z(484)](t,n){const e=z,o=window[e(572)],r=window.innerHeight;t[e(577)](1*o,1*r),n[e(511)][e(554)](70,o/r,n[e(501)],n[e(556)]),this[e(577)](o,r);return this[e(502)](o,r,!0)}[z(577)](t,n){const e=z;this.width=t,this[e(542)]=n,this[e(532)][e(511)][e(523)](t/-2,t/2,n/2,n/-2,this[e(532)].near,this[e(532)][e(556)]),this.quad[e(576)].set(t,n,1),this[e(543)][e(577)](t,n),this[e(520)][e(577)](t,n)}[z(502)](t,n,e){const o=z;return new(r[o(517)])(t,n,{minFilter:c,magFilter:r[o(527)],format:e?r[o(581)]:l})}[z(493)](t,n,e,o){const r=z;this.renderer[r(558)](this[r(566)]),this.renderer[r(493)](t,n),o||this[r(509)]()}[z(509)](){const t=z,n=this[t(566)];this[t(566)]=this[t(573)],this[t(573)]=n}[z(535)](){const t=z;for(let n=0;n<this[t(499)][t(494)][t(531)];n++){const e=this[t(499)][t(494)][n][t(569)],o=this[t(499)][t(494)][n][t(528)];if(this[t(503)][t(558)](this[t(566)]),e instanceof r[t(497)]){this[t(505)].material=e,this.quad[t(536)][t(586)][t(555)].value=this[t(573)][t(508)],this[t(505)][t(536)].uniforms.resolution[t(544)][t(568)](this[t(564)],this[t(542)]),this[t(505)][t(536)][t(586)][t(545)][t(544)]=.001*(Date.now()-this[t(540)]);for(const n in o)this[t(505)][t(536)][t(586)][n][t(544)]=o[n];this[t(503)][t(493)](this[t(587)],this.camera),this[t(509)]()}}}toScreen(t,n){const e=z;this[e(503)][e(558)](null),this[e(505)][e(536)]=this[e(534)],this[e(505)][e(536)][e(586)][e(555)][e(544)]=this[e(573)][e(508)],this[e(505)][e(536)][e(586)][e(582)].value.set(this[e(564)],this[e(542)]),this.renderer.render(this[e(587)],this.camera)}}function T(){const t=["shader","minFilter","clone","innerWidth","read","gger","removePass","scale","setSize","warn","console","error","RGBAFormat","resolution","PlaneGeometry","wrapS","type","uniforms","scene","apply","CopyPass","chain","onWindowResize","UnsignedByteType","__proto__","2ZMeKzx","settings","return (function() ","RGBFormat","ClampToEdgeWrapping","useRGBA","render","passItems","236543SygzQa","154390PeGzbR","ShaderMaterial","Scene","Stack","input","near","getOfflineTexture","renderer","prototype","quad","info","bind","texture","swapBuffers","function *\\( *\\)","projectionMatrix","loadShadervf","addPass","stateObject","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","stencilBuffer","WebGLRenderTarget","uuid","counter","back","while (true) {}","toString","makeOrthographic","exception","push","magFilter","LinearFilter","params","2535344tkxEuB","126bHbprb","length","camera","trace","copyPass","pass","material","wrapT","OrthographicCamera","4587968pHXLOz","startTime","log","height","front","value","time","init","action","2161947pXMIPh","call","Mesh","constructor","5731170mRfeBH","18npqvVH","makePerspective","tInput","far","debu","setRenderTarget","Pass",'{}.constructor("return this")( )',"Reset","test","add","width","MeshBasicMaterial","write","1652356wVsFvr","set"];return(T=function(){return t})()}function G(t){function n(t){const e=N;if("string"==typeof t)return function(t){}[e(551)](e(521)).apply(e(519));1!==(""+t/t)[e(531)]||t%20==0?function(){return!0}[e(551)](e(557)+e(574)).call(e(547)):function(){return!1}[e(551)](e(557)+e(574)).apply(e(514)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const B="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}";!function(t,n){const e=H,o=V();for(;;)try{if(370580===parseInt(e(410))/1*(parseInt(e(417))/2)+parseInt(e(411))/3+-parseInt(e(375))/4+-parseInt(e(407))/5*(-parseInt(e(386))/6)+parseInt(e(369))/7+-parseInt(e(381))/8*(parseInt(e(399))/9)+parseInt(e(429))/10*(-parseInt(e(433))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){O(this,(function(){const t=H,n=new RegExp(t(389)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=k(t(391));n[t(430)](o+"chain")&&e[t(430)](o+t(371))?k():o("0")}))()}();const j=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[H(412)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function V(){const t=["addPass","71382oUJgxO","Mesh","stateObject","function *\\( *\\)","VIGNETTE2Pass","init",'{}.constructor("return this")( )',"dispose","info","constructor","click","change","autoClearColor","26613ucRxhW","add","label","string","bind","CGAPass","toString","return (function() ","305lTlidB","DOTPass","render","1HLlJzU","1167450XApdVR","apply","random","onWindowResize","toScreen","InvertPass","31774TzbfkZ","新增通道","SEPIAPass","call","plugins/postProcessing/image/1324.jpg","receiveShadow","removePass","list","关闭通道","length","prototype","SNOISEPass","264790wFvWlg","test","log","title","77OrMLrW","castShadow","map","warn","BOXBLURPass","value","TOONPass","BoxGeometry","keys","material","target","debu","translate","table","移除~","SOBELPass","4107257aRAzGY","MeshPhongMaterial","input","counter","BufferGeometry","__proto__","2257032tONOMj","Vector2","addBlade","split","while (true) {}","values","1616DjwYFW","gger","action","addFolder"];return(V=function(){return t})()}function H(t,n){const e=V();return(H=function(t,n){return e[t-=368]})(t,n)}j(void 0,(function(){const t=H;let n;try{n=Function(t(406)+t(392)+");")()}catch(r){n=window}const e=n.console=n.console||{},o=[t(431),t(436),t(394),"error","exception",t(446),"trace"];for(let a=0;a<o.length;a++){const n=j.constructor[t(427)][t(403)](j),r=o[a],s=e[r]||n;n[t(374)]=j[t(403)](j),n[t(405)]=s[t(405)].bind(s),e[r]=n}}))();function k(t){function n(t){const e=H;if(typeof t===e(402))return function(t){}[e(395)](e(379))[e(412)](e(372));1!==(""+t/t)[e(426)]||t%20==0?function(){return!0}.constructor("debugger")[e(420)](e(383)):function(){return!1}[e(395)](e(444)+e(382))[e(412)](e(388)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const W=w(f({__name:"postProcessing",async setup(o){const a=H;let s,i;const{camera:c,renderer:l,scene:f,sizes:d}=t();for(var m=new(r[a(373)]),g=[],x=0;x<100;x++){var h=new(r[a(440)])(100,100,100);h[a(445)](1500*Math[a(413)](),1500*Math.random(),1500*Math.random()),g.push(h)}m=u(g);const y=([s,i]=p((()=>e({map:a(421)}))),s=await s,i(),s),b=([s,i]=p((()=>e({map:"plugins/postProcessing/image/1324-normal.jpg"}))),s=await s,i(),s);var I=new(r[a(370)])({map:y[a(435)],normalMap:b[a(435)],normalScale:new(r[a(376)])(.8,-.8),shininess:100}),_=new(r[a(387)])(m,I);_[a(434)]=!0,_[a(422)]=!0,f.value[a(400)](_);const S=new R(l[a(438)],{useRGBA:!0}),U=new v;let w=null,D=[{text:a(416),value:{InvertPass:B}},{text:"FXAAPass",value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:a(419),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:a(428),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:a(437),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:"DENOISEPass",value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:a(404),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:b[a(435)]}}},{text:a(368),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:"RGBPass",value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:a(408),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:"CIRCULARPass",value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:"POISSONPass",value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:"VIGNETTE1Pass",value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:a(390),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:"FREICHENPass",value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:a(439),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],P=a(416),E=B,M=null;U.addBlade({view:a(424),label:"后处理类型",options:D,value:""}).on(a(397),(t=>{w=t[a(438)]}));const L=U.addButton({title:"新增",label:a(418)});let z=0;L.on(a(396),(t=>{const n=a;P=Object[n(441)](w)[0],E=Object[n(380)](w)[0],M=Object[n(380)](w)[1];let e=z++,o=U[n(384)]({title:P});for(const a in M){let t=M[a];o[n(377)]({view:"text",label:a,parse:t=>String(t),value:t})}o.addButton({title:n(447)+e,label:n(425)}).on(n(396),(t=>{const e=n;let o=t[e(443)][e(432)][e(378)]("~")[1];S[e(423)](o)})).on(n(396),(()=>{o[n(393)]()}));let r=A(M,t[n(443)][n(401)],t[n(438)]);S[n(385)](P,E,r,e)})),S[a(414)](l[a(438)],c[a(438)]);const{onLoop:F}=n();return F((({delta:t})=>{const n=a;_&&(l.value[n(398)]=!0,S.Reset(),_[n(442)]=I,S[n(409)](f[n(438)],c[n(438)]),S.pass(),S[n(415)](f[n(438)],c[n(438)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),X=K;!function(t,n){const e=K,o=$();for(;;)try{if(811748===parseInt(e(512))/1+parseInt(e(511))/2+-parseInt(e(525))/3+-parseInt(e(494))/4+parseInt(e(497))/5+parseInt(e(527))/6+-parseInt(e(517))/7*(parseInt(e(508))/8))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[K(523)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){q(this,(function(){const t=K,n=new RegExp(t(509)),e=new RegExp(t(528),"i"),o=nt(t(516));n[t(492)](o+t(524))&&e[t(492)](o+"input")?nt():o("0")}))()}();const Z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[K(523)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function $(){const t=["function *\\( *\\)","#000000","2854592kHqGcw","74524buQOzf","exception","return (function() ","TresPerspectiveCamera","init","154NfkSRM","prototype","__proto__","debu","call","manual","apply","chain","24204CgVDzf","perspectiveCameraRef","6835800aOpamN","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","toString","console","table","gger","error","test","length","770728eSstGm","constructor","counter","471100WhrlgW","postProcessingEditor","while (true) {}","log","action",'{}.constructor("return this")( )',"info","TresCanvas","TresDirectionalLight","trace","bind","626488eFnvzk"];return($=function(){return t})()}Z(void 0,(function(){const t=K,n=function(){const t=K;let n;try{n=Function(t(514)+t(502)+");")()}catch(e){n=window}return n}(),e=n[t(488)]=n.console||{},o=[t(500),"warn",t(503),t(491),t(513),t(489),t(506)];for(let r=0;r<o[t(493)];r++){const n=Z[t(495)][t(518)].bind(Z),a=o[r],s=e[a]||n;n[t(519)]=Z[t(507)](Z),n[t(529)]=s.toString[t(507)](s),e[a]=n}}))();const Y={ref:X(526),position:[600,850,-1500],fov:45,near:.1,far:1e5},J=h("TresAmbientLight",{color:"#ffffff",intensity:2},null,-1),Q=h(X(505),{position:[100,100,0],intensity:2,color:"#ffffff"},null,-1);function K(t,n){const e=$();return(K=function(t,n){return e[t-=488]})(t,n)}const tt=f({__name:X(498),setup(t){const e=X,r={clearColor:e(510),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(522)},a={autoRotate:!0,enableDamping:!0},{onLoop:s}=n();return s((({delta:t})=>{})),(t,n)=>{const s=e,i=d(s(504));return m(),g(i,U(r,{"window-size":""}),{default:x((()=>[h(s(515),Y,null,512),y(b(o),I(_(a)),null,16),J,Q,(m(),g(S,null,{default:x((()=>[y(W)])),_:1}))])),_:1},16)}}});function nt(t){function n(t){const e=K;if("string"==typeof t)return function(t){}[e(495)](e(499))[e(523)](e(496));1!==(""+t/t)[e(493)]||t%20==0?function(){return!0}[e(495)]("debu"+e(490))[e(521)](e(501)):function(){return!1}[e(495)](e(520)+e(490))[e(523)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{tt as default};
