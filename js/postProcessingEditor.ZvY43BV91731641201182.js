import{m as t,e as n,b as e,U as o}from"./@tresjs.b88d4FZI1731641201182.js";import{_ as r,t as s,O as a,W as i,bg as l,n as c,cx as u}from"./three.-z-VOBM71731641201182.js";import{P as v}from"./tweakpane.yHWGBmom1731641201182.js";import{d as f,a6 as p,e as m,o as d,f as g,g as x,J as h,j as y,u as I,aj as b,ak as _,al as S,m as U}from"./@vue.-THQH3GC1731641201182.js";import{_ as w}from"./@fesjs.Y6wvFf_31731641201182.js";import"./@vueuse.XeXqlNFe1731641201182.js";import"./vue-router.JI-MlJL41731641201182.js";import"./lodash-es.kYt-_xTG1731641201182.js";import"./@qlin.yHhFDldE1731641201182.js";import"./pinia.KbEhbnNi1731641201182.js";import"./vue-demi.C4xddsk91731641201182.js";import"./@floating-ui.BPbuo5Gx1731641201182.js";import"./@juggle.7yjBMqoW1731641201182.js";!function(t,n){const e=E,o=L();for(;;)try{if(227555===-parseInt(e(295))/1+parseInt(e(234))/2+parseInt(e(246))/3*(-parseInt(e(272))/4)+parseInt(e(254))/5*(parseInt(e(280))/6)+parseInt(e(270))/7*(-parseInt(e(261))/8)+parseInt(e(236))/9*(-parseInt(e(269))/10)+-parseInt(e(251))/11*(-parseInt(e(268))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const P=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[E(244)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){P(this,(function(){const t=E,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(240),"i"),o=A(t(282));n.test(o+"chain")&&e.test(o+t(253))?A():o("0")}))()}();const D=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();D(void 0,(function(){const t=E;let n;try{n=Function('return (function() {}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(264)]=n[t(264)]||{},o=[t(235),"warn",t(279),t(292),"exception",t(287),"trace"];for(let s=0;s<o[t(250)];s++){const n=D.constructor[t(285)][t(278)](D),r=o[s],a=e[r]||n;n[t(263)]=D[t(278)](D),n.toString=a[t(247)][t(278)](a),e[r]=n}}))();function E(t,n){const e=L();return(E=function(t,n){return e[t-=234]})(t,n)}function M(t,n,e){const o=E;if(typeof t!==o(262)||null===t)return t;const r=Array[o(267)](t)?[]:{};for(const s in t)t[o(273)](s)&&(r[s]=M(t[s])),s==n&&(r[n]=e);return r}function A(t){function n(t){const e=E;if(typeof t===e(283))return function(t){}.constructor(e(257))[e(244)](e(266));1!==(""+t/t)[e(250)]||t%20==0?function(){return!0}[e(286)](e(274)+e(248)).call(e(249)):function(){return!1}[e(286)](e(274)+e(248))[e(244)](e(276)),n(++t)}try{if(t)return n;n(0)}catch(e){}}function L(){const t=["13368holySt","96610mCxxwX","892318gTfaTU","exec","949528obsTqf","hasOwnProperty","debu","onerror","stateObject","random","bind","info","42Wjlirx","replace","init","string","Matrix4","prototype","constructor","table","onabort","Texture","onload",'Shader "',"error","Vector2","type","228490MTgfMS","name","369740QefFrL","log","171mRsKHi","Vector4","get","Vector3","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","message","ShaderMaterial","\" couldn't be loaded.","apply","Matrix3","3vPEeAU","toString","gger","action","length","7502qspaKb","responseText","input","224850kJJRuf","lastIndex","now","while (true) {}","Matrix2","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","v3v","24XUMhKx","object","__proto__","console","open","counter","isArray"];return(L=function(){return t})()}const C=R;!function(t,n){const e=R,o=z();for(;;)try{if(717380===parseInt(e(306))/1*(-parseInt(e(286))/2)+-parseInt(e(281))/3*(-parseInt(e(276))/4)+parseInt(e(307))/5+parseInt(e(261))/6*(parseInt(e(296))/7)+-parseInt(e(235))/8+-parseInt(e(260))/9+parseInt(e(243))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const F=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(303)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function z(){const t=["shader","clone","pass","LinearFilter","copyPass","innerWidth","type","482818bQKeHx","info","camera","projectionMatrix","loadShadervf","uuid","console","apply","passes","value","3512halQhC","1733670CCDjlJ","wrapT","texture","makeOrthographic","passItems","magFilter","input","material","prototype","near","swapBuffers","render","ShaderMaterial","removePass","height","debu","toString","useRGBA","scene","minFilter","MeshBasicMaterial","log","read","trace","1504136UbjmDl","width","RGBFormat","Pass","push","params","while (true) {}","length","7348930rZqPsv","renderer","ClampToEdgeWrapping","UnsignedByteType","Stack","set","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","constructor","getOfflineTexture","addPass","settings","RGBAFormat","stencilBuffer","return (function() ","makePerspective","resolution","Reset","3277422zktIze","60ImycKw","write","CopyPass","wrapS","table","error","far","Mesh","warn","action","startTime","function *\\( *\\)","__proto__","quad","now","105764akNoKk","setSize","bind","Scene","uniforms","12pYhXlY","exception","gger","front","setRenderTarget","346zPvvrT","stateObject","back"];return(z=function(){return t})()}!function(){F(this,(function(){const t=R,n=new RegExp(t(272)),e=new RegExp(t(249),"i"),o=G("init");n.test(o+"chain")&&e.test(o+t(313))?G():o("0")}))()}();const T=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(303)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();T(void 0,(function(){const t=R,n=function(){const t=R;let n;try{n=Function(t(256)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(302)]=n[t(302)]||{},o=[t(232),t(269),t(297),t(266),t(282),t(265),t(234)];for(let r=0;r<o[t(242)];r++){const n=T[t(250)][t(315)][t(278)](T),s=o[r],a=e[s]||n;n[t(273)]=T.bind(T),n[t(323)]=a[t(323)][t(278)](a),e[s]=n}}))();class N{constructor(t,n){const e=R;this.width=1,this.height=1,this.settings=n||{},this[e(324)]=this[e(253)][e(324)]||!1,this[e(244)]=t,this[e(293)]=this.CopyPass(this[e(253)]),this[e(325)]=new(r[e(279)]),this[e(274)]=new(r[e(268)])(new s(1,1),new(r[e(231)])),this[e(325)].add(this[e(274)]),this[e(298)]=new a(1,1,1,1,-1e4,1e4),this[e(284)]=new i(1,1,{minFilter:void 0!==this[e(253)][e(230)]?this[e(253)][e(230)]:r[e(292)],magFilter:void 0!==this[e(253)].magFilter?this[e(253)][e(312)]:r[e(292)],wrapS:void 0!==this[e(253)][e(264)]?this[e(253)].wrapS:r[e(245)],wrapT:void 0!==this[e(253)][e(308)]?this.settings.wrapT:l,format:this[e(324)]?r[e(254)]:r[e(237)],type:void 0!==this.settings[e(295)]?this[e(253)].type:r[e(246)],stencilBuffer:void 0===this.settings[e(255)]||this[e(253)][e(255)]}),this[e(288)]=this.front[e(290)](),this[e(271)]=Date[e(275)](),this[e(304)]={},this[e(247)]={passItems:[],passes:[]}}[C(252)](t,n,e,o){const r=C;this.loadShadervf(n);const s={shaderName:t,params:e,uuid:o,shader:this[r(289)]};this[r(247)][r(311)][r(239)](s)}[C(320)](t){const n=C;for(let e=this[n(247)][n(311)][n(242)]-1;e>=0;e--)this[n(247)][n(311)][e][n(301)]===parseInt(t)&&this[n(247)].passItems.splice(e,1);console[n(232)](this[n(247)][n(311)])}[C(263)](){const t=C;this[t(238)].call(this);return this[t(300)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[C(300)](t){const n=C;return this[n(289)]=function(t,n){const e=E,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,s=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,a={sampler2D:{type:"t",value:()=>new(r[E(289)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[E(293)])},vec3:{type:"v3",value:()=>new(r[E(239)])},vec4:{type:"v4",value:()=>new(r[E(237)])},bvec2:{type:"v2",value:()=>new(r[E(293)])},bvec3:{type:"v3",value:()=>new(r[E(239)])},bvec4:{type:"v4",value:()=>new(r[E(237)])},ivec2:{type:"v2",value:()=>new(r[E(293)])},ivec3:{type:"v3",value:()=>new(r[E(239)])},ivec4:{type:"v4",value:()=>new(r[E(237)])},mat2:{type:"v2",value:()=>new(r[E(258)])},mat3:{type:"v3",value:()=>new(r[E(245)])},mat4:{type:"v4",value:()=>new(r[E(284)])}},i={float:{type:"fv",value:()=>[]},vec3:{type:e(260),value:()=>[]}};let l;const c={resolution:{type:"v2",value:new(r[e(293)])(1,1),default:!0},time:{type:"f",value:Date[e(256)](),default:!0},tInput:{type:"t",value:new(r[e(289)]),default:!0}};let u,v;for(;null!==(l=o[e(271)](n));)l.index===o.lastIndex&&o[e(255)]++,u=l[1],v=l[2],c[v]={type:a[u][e(294)],value:a[u].value()};for(;null!==(l=s[e(271)](n));)l.index===o[e(255)]&&o[e(255)]++,u=l[1],v=l[2],l[3],c[v]={type:i[u].type,value:i[u].value()};return new(r[e(242)])({uniforms:c,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}("varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }",t),this[n(289)]}[C(238)](t){const n=C;this[n(289)]=null,this[n(240)]={}}[C(259)](){const t=C;this[t(233)]=this.front,this.write=this[t(288)]}onWindowResize(t,n){const e=C,o=window[e(294)],r=window.innerHeight;t[e(277)](1*o,1*r),n[e(299)][e(257)](70,o/r,n[e(316)],n.far),this[e(277)](o,r);return this[e(251)](o,r,!0)}[C(277)](t,n){const e=C;this[e(236)]=t,this[e(321)]=n,this[e(298)][e(299)][e(310)](t/-2,t/2,n/2,n/-2,this[e(298)].near,this.camera[e(267)]),this.quad.scale[e(248)](t,n,1),this.front[e(277)](t,n),this[e(288)][e(277)](t,n)}[C(251)](t,n,e){const o=C;return new i(t,n,{minFilter:r[o(292)],magFilter:c,format:e?r[o(254)]:r[o(237)]})}[C(318)](t,n,e,o){const r=C;this.renderer[r(285)](this[r(262)]),this[r(244)][r(318)](t,n),o||this.swapBuffers()}[C(317)](){const t=C,n=this[t(262)];this[t(262)]=this[t(233)],this.read=n}[C(291)](){const t=C;for(let n=0;n<this[t(247)][t(311)][t(242)];n++){const e=this[t(247)][t(311)][n][t(289)],o=this[t(247)][t(311)][n][t(240)];if(this.renderer[t(285)](this.write),e instanceof r[t(319)]){this.quad[t(314)]=e,this[t(274)].material.uniforms.tInput[t(305)]=this[t(233)][t(309)],this[t(274)][t(314)][t(280)][t(258)].value.set(this[t(236)],this[t(321)]),this[t(274)].material[t(280)].time[t(305)]=.001*(Date[t(275)]()-this[t(271)]);for(const n in o)this[t(274)][t(314)][t(280)][n][t(305)]=o[n];this[t(244)][t(318)](this[t(325)],this[t(298)]),this.swapBuffers()}}}toScreen(t,n){const e=C;this[e(244)][e(285)](null),this[e(274)].material=this[e(293)],this[e(274)][e(314)].uniforms.tInput[e(305)]=this.read[e(309)],this[e(274)][e(314)][e(280)][e(258)].value[e(248)](this[e(236)],this.height),this[e(244)][e(318)](this[e(325)],this[e(298)])}}function R(t,n){const e=z();return(R=function(t,n){return e[t-=230]})(t,n)}function G(t){function n(t){const e=R;if("string"==typeof t)return function(t){}[e(250)](e(241))[e(303)]("counter");1!==(""+t/t)[e(242)]||t%20==0?function(){return!0}[e(250)](e(322)+e(283)).call(e(270)):function(){return!1}[e(250)]("debugger")[e(303)](e(287)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const B="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",j=k;!function(t,n){const e=k,o=O();for(;;)try{if(356272===parseInt(e(275))/1+-parseInt(e(304))/2+-parseInt(e(281))/3+-parseInt(e(259))/4*(parseInt(e(271))/5)+parseInt(e(290))/6*(parseInt(e(276))/7)+parseInt(e(246))/8*(parseInt(e(244))/9)+-parseInt(e(273))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const V=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){V(this,(function(){const t=k,n=new RegExp(t(232)),e=new RegExp(t(305),"i"),o=W(t(266));n[t(288)](o+t(297))&&e[t(288)](o+"input")?W():o("0")}))()}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[k(283)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function O(){const t=["stateObject","addButton","warn","error","1205WIADgF","BufferGeometry","805500oTPehS","removePass","668542JRWlXD","28721DUJsVj","map","CIRCULARPass","click","MeshPhongMaterial","855969EgtNFS","push","apply","InvertPass","关闭通道","SOBELPass","value","test","debu","414kPmpOh","string","trace","constructor","BoxGeometry","postProcessing","plugins/postProcessing/image/1324.jpg","chain","material","Mesh","table","toString","target","counter","224780IqjMMB","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","addFolder","while (true) {}","后处理类型","label","change","info","DOTPass","SNOISEPass","function *\\( *\\)","addBlade","receiveShadow","Reset","新增通道","call","VIGNETTE2Pass",'{}.constructor("return this")( )',"values","exception","__proto__","plugins/postProcessing/image/1324-normal.jpg","4127715gJitnu","console","8NaUPFB","CGAPass","gger","bind","add","mergeGeometries","list","onWindowResize","prototype","DENOISEPass","action","split","length","9556pgGxVk","FXAAPass","dispose","title","Vector2","castShadow","random","init"];return(O=function(){return t})()}H(void 0,(function(){const t=k;let n;try{n=Function("return (function() "+t(239)+");")()}catch(r){n=window}const e=n[t(245)]=n.console||{},o=["log",t(269),t(229),t(270),t(241),t(300),t(292)];for(let s=0;s<o.length;s++){const n=H.constructor[t(254)][t(249)](H),r=o[s],a=e[r]||n;n[t(242)]=H[t(249)](H),n[t(301)]=a[t(301)].bind(a),e[r]=n}}))();function k(t,n){const e=O();return(k=function(t,n){return e[t-=227]})(t,n)}function W(t){function n(t){const e=k;if(typeof t===e(291))return function(t){}[e(293)](e(307))[e(283)](e(303));1!==(""+t/t)[e(258)]||t%20==0?function(){return!0}.constructor("debu"+e(248))[e(237)](e(256)):function(){return!1}[e(293)](e(289)+e(248))[e(283)](e(267)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const X=w(f({__name:j(295),async setup(o){const s=j;let a,i;const{camera:l,renderer:c,scene:f,sizes:m}=t();for(var d=new(r[s(272)]),g=[],x=0;x<100;x++){var h=new(r[s(294)])(100,100,100);h.translate(1500*Math[s(265)](),1500*Math[s(265)](),1500*Math[s(265)]()),g[s(282)](h)}d=u[s(251)](g);const y=([a,i]=p((()=>e({map:s(296)}))),a=await a,i(),a),I=([a,i]=p((()=>e({map:s(243)}))),a=await a,i(),a);var b=new(r[s(280)])({map:y[s(277)],normalMap:I.map,normalScale:new(r[s(263)])(.8,-.8),shininess:100}),_=new(r[s(299)])(d,b);_[s(264)]=!0,_[s(234)]=!0,f[s(287)][s(250)](_);const S=new N(c.value,{useRGBA:!0}),U=new v;let w=null,P=[{text:s(284),value:{InvertPass:B}},{text:s(260),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:"SEPIAPass",value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:s(231),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:"BOXBLURPass",value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:s(255),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:s(247),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:I[s(277)]}}},{text:s(286),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:"RGBPass",value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:s(230),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(278),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:"POISSONPass",value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:"VIGNETTE1Pass",value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(238),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:"FREICHENPass",value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:"TOONPass",value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],D=s(284),E=B,A=null;U[s(233)]({view:s(252),label:s(308),options:P,value:""}).on(s(228),(t=>{w=t[s(287)]}));const L=U[s(268)]({title:"新增",label:s(236)});let C=0;L.on(s(279),(t=>{const n=s;D=Object.keys(w)[0],E=Object[n(240)](w)[0],A=Object[n(240)](w)[1];let e=C++,o=U[n(306)]({title:D});for(const s in A){let t=A[s];o[n(233)]({view:"text",label:s,parse:t=>String(t),value:t})}o[n(268)]({title:"移除~"+e,label:n(285)}).on(n(279),(t=>{const e=n;let o=t[e(302)][e(262)][e(257)]("~")[1];S[e(274)](o)})).on(n(279),(()=>{o[n(261)]()}));let r=M(A,t.target[n(227)],t[n(287)]);S.addPass(D,E,r,e)})),S[s(253)](c[s(287)],l[s(287)]);const{onLoop:F}=n();return F((({delta:t})=>{const n=s;_&&(c.value.autoClearColor=!0,S[n(235)](),_[n(298)]=b,S.render(f.value,l.value),S.pass(),S.toScreen(f[n(287)],l[n(287)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),q=Z;!function(t,n){const e=Z,o=Q();for(;;)try{if(837251===-parseInt(e(271))/1+parseInt(e(285))/2+parseInt(e(277))/3+parseInt(e(265))/4*(-parseInt(e(268))/5)+parseInt(e(276))/6+parseInt(e(256))/7+-parseInt(e(279))/8*(parseInt(e(252))/9))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const J=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function Z(t,n){const e=Q();return(Z=function(t,n){return e[t-=250]})(t,n)}!function(){J(this,(function(){const t=Z,n=new RegExp(t(262)),e=new RegExp(t(260),"i"),o=tt(t(253));n[t(258)](o+"chain")&&e.test(o+"input")?tt():o("0")}))()}();const $=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Z(259)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();$(void 0,(function(){const t=Z;let n;try{n=Function(t(263)+t(251)+");")()}catch(r){n=window}const e=n.console=n[t(273)]||{},o=[t(287),"warn",t(278),"error",t(290),t(291),t(266)];for(let s=0;s<o[t(274)];s++){const n=$[t(261)][t(289)][t(286)]($),r=o[s],a=e[r]||n;n[t(264)]=$[t(286)]($),n[t(267)]=a[t(267)][t(286)](a),e[r]=n}}))();const K={ref:"perspectiveCameraRef",position:[600,850,-1500],fov:45,near:.1,far:1e5};function Q(){const t=["6452460glxAUP","2944962fHniHd","info","2778008dRGGDp","#ffffff","gger","TresPerspectiveCamera","TresCanvas","TresAmbientLight","1468442LjwCJn","bind","log","postProcessingEditor","prototype","exception","table","while (true) {}",'{}.constructor("return this")( )',"36azwEJJ","init","counter","TresDirectionalLight","9193506JhkrWs","call","test","apply","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","constructor","function *\\( *\\)","return (function() ","__proto__","1765772dickgx","trace","toString","15WGZBnY","manual","action","554059FEbadj","stateObject","console","length","debu"];return(Q=function(){return t})()}const Y=f({__name:q(288),setup(t){const e=q,r={clearColor:"#000000",shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(269)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=m(a(283));return d(),g(i,U(r,{"window-size":""}),{default:x((()=>[h(a(282),K,null,512),y(I(o),b(_(s)),null,16),n[0]||(n[0]=h(a(284),{color:a(280),intensity:2},null,-1)),n[1]||(n[1]=h(a(255),{position:[100,100,0],intensity:2,color:a(280)},null,-1)),(d(),g(S,null,{default:x((()=>[y(X)])),_:1}))])),_:1},16)}}});function tt(t){function n(t){const e=Z;if("string"==typeof t)return function(t){}[e(261)](e(250)).apply(e(254));1!==(""+t/t)[e(274)]||t%20==0?function(){return!0}.constructor(e(275)+e(281))[e(257)](e(270)):function(){return!1}[e(261)]("debu"+e(281)).apply(e(272)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{Y as default};
