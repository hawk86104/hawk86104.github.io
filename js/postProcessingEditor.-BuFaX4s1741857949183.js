import{m as t,e as n,a as e,o}from"./@tresjs.8SAr0PX_1741857949183.js";import{_ as r,l as s,b as a,aR as i,cd as c,bk as l}from"./three.Gi_-4zeu1741857949183.js";import{P as u}from"./tweakpane.yDiyAAkA1741857949183.js";import{d as v,a3 as f,e as p,o as d,f as m,g,N as x,j as h,u as y,aj as I,ak as b,al as _,m as S}from"./@vue.NRI7TcgI1741857949183.js";import{_ as U}from"./@fesjs._GqZBaJ41741857949183.js";import"./postprocessing.D5IzAGSN1741857949183.js";import"./@vueuse.PrSwDteH1741857949183.js";import"./vue-router.vV-TPEpQ1741857949183.js";import"./lodash-es.pklfUAS51741857949183.js";import"./@qlin.yHhFDldE1741857949183.js";import"./pinia.m-1lhBPB1741857949183.js";import"./@floating-ui.BPbuo5Gx1741857949183.js";import"./@juggle.7yjBMqoW1741857949183.js";function w(t,n){const e=M();return(w=function(t,n){return e[t-=275]})(t,n)}!function(t,n){const e=w,o=M();for(;;)try{if(578969===parseInt(e(335))/1*(-parseInt(e(321))/2)+-parseInt(e(338))/3+parseInt(e(289))/4+parseInt(e(331))/5*(parseInt(e(304))/6)+-parseInt(e(288))/7+-parseInt(e(315))/8*(parseInt(e(322))/9)+parseInt(e(320))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const P=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[w(339)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){P(this,(function(){const t=w,n=new RegExp(t(283)),e=new RegExp(t(302),"i"),o=L(t(328));n.test(o+t(295))&&e[t(301)](o+"input")?L():o("0")}))()}();const D=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[w(339)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();D(void 0,(function(){const t=w;let n;try{n=Function(t(336)+t(296)+");")()}catch(r){n=window}const e=n[t(314)]=n[t(314)]||{},o=["log",t(277),t(310),t(297),t(340),"table",t(332)];for(let s=0;s<o[t(327)];s++){const n=D.constructor[t(325)][t(330)](D),r=o[s],a=e[r]||n;n[t(329)]=D[t(330)](D),n[t(324)]=a.toString[t(330)](a),e[r]=n}}))();function E(t,n,e){const o=w;if(typeof t!==o(275)||null===t)return t;const r=Array[o(317)](t)?[]:{};for(const s in t)t.hasOwnProperty(s)&&(r[s]=E(t[s])),s==n&&(r[n]=e);return r}function M(){const t=["prototype","type","length","init","__proto__","bind","10poJMhB","trace","index","now","74ZMmdpe","return (function() ","send","3428718otnzAE","apply","exception",'" load was aborted.',"Matrix4","object","name","warn","random","counter","string","\" couldn't be loaded.","stateObject","function *\\( *\\)","v3v","Matrix2","action","constructor","2621192epjNwC","2035516tRenlp","value","message","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","WagnerLoadShaderException","exec","chain",'{}.constructor("return this")( )',"error","gger","Vector3","lastIndex","test","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","Texture","3456510wPefSb","get","call","open","onload","Vector2","info","Vector4",'Shader "',"replace","console","1840ESHwJa","onerror","isArray","onabort","debu","23296680QCETEY","24818BzSXmW","38196xklYYo","Matrix3","toString"];return(M=function(){return t})()}function L(t){function n(t){const e=w;if(typeof t===e(280))return function(t){}[e(287)]("while (true) {}").apply(e(279));1!==(""+t/t)[e(327)]||t%20==0?function(){return!0}[e(287)](e(319)+e(298))[e(306)](e(286)):function(){return!1}[e(287)]("debugger")[e(339)](e(282)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const A=F;!function(t,n){const e=F,o=R();for(;;)try{if(290123===parseInt(e(397))/1*(parseInt(e(418))/2)+parseInt(e(386))/3*(-parseInt(e(392))/4)+-parseInt(e(437))/5+-parseInt(e(401))/6*(parseInt(e(453))/7)+parseInt(e(458))/8*(-parseInt(e(395))/9)+-parseInt(e(442))/10*(parseInt(e(445))/11)+parseInt(e(414))/12)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[F(387)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){C(this,(function(){const t=F,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(374),"i"),o=T("init");n[t(454)](o+t(367))&&e[t(454)](o+t(405))?T():o("0")}))()}();const z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function F(t,n){const e=R();return(F=function(t,n){return e[t-=366]})(t,n)}z(void 0,(function(){const t=F,n=function(){const t=F;let n;try{n=Function(t(381)+t(466)+");")()}catch(e){n=window}return n}(),e=n[t(450)]=n.console||{},o=[t(448),t(373),t(449),t(422),t(452),t(462),t(399)];for(let r=0;r<o[t(447)];r++){const n=z.constructor[t(383)][t(396)](z),s=o[r],a=e[s]||n;n[t(378)]=z[t(396)](z),n[t(456)]=a[t(456)].bind(a),e[s]=n}}))();class N{constructor(t,n){const e=F;this[e(420)]=1,this[e(368)]=1,this[e(372)]=n||{},this[e(435)]=this[e(372)][e(435)]||!1,this[e(427)]=t,this[e(434)]=this[e(412)](this[e(372)]),this[e(426)]=new(r[e(457)]),this[e(389)]=new(r[e(455)])(new(r[e(471)])(1,1),new(r[e(470)])),this.scene.add(this[e(389)]),this[e(429)]=new(r[e(431)])(1,1,1,1,-1e4,1e4),this.front=new(r[e(366)])(1,1,{minFilter:void 0!==this.settings[e(388)]?this[e(372)][e(388)]:r[e(393)],magFilter:void 0!==this[e(372)][e(410)]?this[e(372)][e(410)]:r[e(393)],wrapS:void 0!==this[e(372)][e(424)]?this[e(372)].wrapS:r[e(398)],wrapT:void 0!==this.settings[e(413)]?this[e(372)][e(413)]:r[e(398)],format:this[e(435)]?i:r[e(382)],type:void 0!==this[e(372)][e(384)]?this.settings[e(384)]:r[e(411)],stencilBuffer:void 0===this[e(372)][e(371)]||this.settings[e(371)]}),this.back=this[e(406)][e(380)](),this[e(407)]=Date[e(400)](),this[e(391)]={},this[e(376)]={passItems:[],passes:[]}}[A(377)](t,n,e,o){const r=A;this[r(370)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(459)]};this[r(376)][r(440)][r(402)](s)}[A(433)](t){const n=A;for(let e=this[n(376)][n(440)][n(447)]-1;e>=0;e--)this[n(376)].passItems[e].uuid===parseInt(t)&&this[n(376)][n(440)].splice(e,1);console[n(448)](this[n(376)][n(440)])}CopyPass(){const t=A;this[t(419)][t(428)](this);return this[t(370)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[A(370)](t){const n=A(467);return this.shader=function(t,n){const e=w,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,i=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,c={sampler2D:{type:"t",value:()=>new(r[w(303)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[w(309)])},vec3:{type:"v3",value:()=>new(r[w(299)])},vec4:{type:"v4",value:()=>new(r[w(311)])},bvec2:{type:"v2",value:()=>new(r[w(309)])},bvec3:{type:"v3",value:()=>new a},bvec4:{type:"v4",value:()=>new(r[w(311)])},ivec2:{type:"v2",value:()=>new(r[w(309)])},ivec3:{type:"v3",value:()=>new(r[w(299)])},ivec4:{type:"v4",value:()=>new(r[w(311)])},mat2:{type:"v2",value:()=>new(r[w(285)])},mat3:{type:"v3",value:()=>new(r[w(323)])},mat4:{type:"v4",value:()=>new(r[w(342)])}},l={float:{type:"fv",value:()=>[]},vec3:{type:e(284),value:()=>[]}};let u;const v={resolution:{type:"v2",value:new(r[e(309)])(1,1),default:!0},time:{type:"f",value:Date[e(334)](),default:!0},tInput:{type:"t",value:new(r[e(303)]),default:!0}};let f,p;for(;null!==(u=o[e(294)](n));)u[e(333)]===o[e(300)]&&o.lastIndex++,f=u[1],p=u[2],v[p]={type:c[f][e(326)],value:c[f][e(290)]()};for(;null!==(u=i.exec(n));)u[e(333)]===o[e(300)]&&o[e(300)]++,f=u[1],p=u[2],u[3],v[p]={type:l[f].type,value:l[f].value()};return new s({uniforms:v,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(n,t),this.shader}[A(419)](t){this[A(459)]=null,this.params={}}[A(403)](){const t=A;this[t(460)]=this.front,this[t(468)]=this[t(394)]}onWindowResize(t,n){const e=A,o=window[e(375)],r=window[e(432)];t[e(423)](1*o,1*r),n[e(451)][e(446)](70,o/r,n[e(430)],n.far),this[e(423)](o,r);return this[e(390)](o,r,!0)}[A(423)](t,n){const e=A;this[e(420)]=t,this.height=n,this[e(429)].projectionMatrix[e(425)](t/-2,t/2,n/2,n/-2,this[e(429)][e(430)],this[e(429)][e(409)]),this[e(389)][e(472)][e(436)](t,n,1),this[e(406)][e(423)](t,n),this[e(394)][e(423)](t,n)}getOfflineTexture(t,n,e){const o=A;return new(r[o(366)])(t,n,{minFilter:r[o(393)],magFilter:r[o(393)],format:e?r[o(408)]:r[o(382)]})}render(t,n,e,o){const r=A;this[r(427)][r(465)](this[r(468)]),this[r(427)][r(416)](t,n),o||this[r(464)]()}[A(464)](){const t=A,n=this[t(468)];this[t(468)]=this[t(460)],this[t(460)]=n}[A(463)](){const t=A;for(let n=0;n<this.Stack.passItems[t(447)];n++){const e=this[t(376)][t(440)][n][t(459)],o=this[t(376)][t(440)][n].params;if(this[t(427)].setRenderTarget(this[t(468)]),e instanceof s){this[t(389)].material=e,this[t(389)][t(417)][t(439)][t(404)][t(443)]=this[t(460)].texture,this[t(389)].material[t(439)][t(441)][t(443)][t(436)](this[t(420)],this[t(368)]),this[t(389)].material[t(439)][t(379)][t(443)]=.001*(Date[t(400)]()-this[t(407)]);for(const n in o)this.quad[t(417)][t(439)][n].value=o[n];this[t(427)][t(416)](this.scene,this[t(429)]),this.swapBuffers()}}}[A(438)](t,n){const e=A;this.renderer[e(465)](null),this[e(389)][e(417)]=this[e(434)],this.quad.material.uniforms.tInput[e(443)]=this[e(460)][e(421)],this.quad[e(417)].uniforms[e(441)].value[e(436)](this.width,this.height),this[e(427)][e(416)](this[e(426)],this[e(429)])}}function T(t){function n(t){const e=F;if("string"==typeof t)return function(t){}.constructor(e(385))[e(387)](e(444));1!==(""+t/t)[e(447)]||t%20==0?function(){return!0}[e(461)](e(415)+"gger")[e(428)]("action"):function(){return!1}[e(461)](e(415)+e(469))[e(387)](e(369)),n(++t)}try{if(t)return n;n(0)}catch(e){}}function R(){const t=["return (function() ","RGBFormat","prototype","type","while (true) {}","415419QkteDS","apply","minFilter","quad","getOfflineTexture","passes","4IWzfrb","LinearFilter","back","81PmMMYi","bind","871kpTfXI","ClampToEdgeWrapping","trace","now","216666zSeBgC","push","Reset","tInput","input","front","startTime","RGBAFormat","far","magFilter","UnsignedByteType","CopyPass","wrapT","22033500ZRrIHf","debu","render","material","26GUZpLt","Pass","width","texture","error","setSize","wrapS","makeOrthographic","scene","renderer","call","camera","near","OrthographicCamera","innerHeight","removePass","copyPass","useRGBA","set","1704965Odfxft","toScreen","uniforms","passItems","resolution","10Ivuihv","value","counter","4433033arSvdw","makePerspective","length","log","info","console","projectionMatrix","exception","63rRGXxM","test","Mesh","toString","Scene","310984ZTstnk","shader","read","constructor","table","pass","swapBuffers","setRenderTarget",'{}.constructor("return this")( )',"varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","write","gger","MeshBasicMaterial","PlaneGeometry","scale","WebGLRenderTarget","chain","height","stateObject","loadShadervf","stencilBuffer","settings","warn","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","innerWidth","Stack","addPass","__proto__","time","clone"];return(R=function(){return t})()}const G="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",B=k;!function(t,n){const e=k,o=V();for(;;)try{if(933029===parseInt(e(269))/1*(parseInt(e(265))/2)+parseInt(e(268))/3*(-parseInt(e(261))/4)+parseInt(e(213))/5+-parseInt(e(256))/6+-parseInt(e(224))/7*(parseInt(e(270))/8)+parseInt(e(229))/9*(-parseInt(e(225))/10)+parseInt(e(252))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const j=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[k(232)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){j(this,(function(){const t=k,n=new RegExp(t(204)),e=new RegExp(t(272),"i"),o=H(t(223));n[t(243)](o+t(207))&&e[t(243)](o+t(271))?H():o("0")}))()}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[k(232)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function V(){const t=["Mesh","RGBPass","keys","DENOISEPass","318568dHNsOI","length","__proto__","split","54joNURg","exception","stateObject","57dhoXKF","63355UggCbv","3781496cYOLwc","input","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","移除~","add","bind","translate","warn","action","TOONPass","VIGNETTE1Pass","debu","plugins/postProcessing/image/1324-normal.jpg","while (true) {}","postProcessing","pass","target","title","InvertPass","click","关闭通道","console","function *\\( *\\)","error","toScreen","chain","BufferGeometry","receiveShadow","string","SOBELPass","新增通道","5515475iucWTv","log","addPass","CGAPass","toString","table","BoxGeometry","Vector2","counter","Reset","init","14WFdleV","230qmGfbk","POISSONPass","dispose","value","368217xsuPSg","addFolder","VIGNETTE2Pass","apply","CIRCULARPass","onWindowResize","map","SNOISEPass","gger","constructor","SEPIAPass","FXAAPass","addButton","values","test","material","addBlade","render","DOTPass","mergeGeometries","push","list","trace","17535386PTqXof","random","autoClearColor","text","451236snLSSq"];return(V=function(){return t})()}function k(t,n){const e=V();return(k=function(t,n){return e[t-=188]})(t,n)}O(void 0,(function(){const t=k,n=function(){let t;try{t=Function('return (function() {}.constructor("return this")( ));')()}catch(n){t=window}return t}(),e=n[t(203)]=n[t(203)]||{},o=[t(214),t(189),"info",t(205),t(266),t(218),t(251)];for(let r=0;r<o[t(262)];r++){const n=O[t(238)].prototype[t(275)](O),s=o[r],a=e[s]||n;n[t(263)]=O[t(275)](O),n[t(217)]=a.toString.bind(a),e[s]=n}}))();function H(t){function n(t){const e=k;if(typeof t===e(210))return function(t){}.constructor(e(195))[e(232)](e(221));1!==(""+t/t)[e(262)]||t%20==0?function(){return!0}[e(238)](e(193)+"gger").call(e(190)):function(){return!1}[e(238)](e(193)+e(237))[e(232)](e(267)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const W=U(v({__name:B(196),async setup(o){const s=B;let a,i;const{camera:v,renderer:p,scene:d,sizes:m}=t();for(var g=new(r[s(208)]),x=[],h=0;h<100;h++){var y=new(r[s(219)])(100,100,100);y[s(188)](1500*Math[s(253)](),1500*Math[s(253)](),1500*Math[s(253)]()),x[s(249)](y)}g=c[s(248)](x);const I=([a,i]=f((()=>e({map:"plugins/postProcessing/image/1324.jpg"}))),a=await a,i(),a),b=([a,i]=f((()=>e({map:s(194)}))),a=await a,i(),a);var _=new l({map:I[s(235)],normalMap:b[s(235)],normalScale:new(r[s(220)])(.8,-.8),shininess:100}),S=new(r[s(257)])(g,_);S.castShadow=!0,S[s(209)]=!0,d[s(228)][s(274)](S);const U=new N(p[s(228)],{useRGBA:!0}),w=new u;let P=null,D=[{text:s(200),value:{InvertPass:G}},{text:s(240),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:s(239),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:s(236),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:"BOXBLURPass",value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:s(260),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:s(216),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:b.map}}},{text:s(211),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:s(258),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:s(247),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(233),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:s(226),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:s(192),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(231),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:"FREICHENPass",value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:s(191),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],M=s(200),L=G,A=null;w.addBlade({view:s(250),label:"后处理类型",options:D,value:""}).on("change",(t=>{P=t[s(228)]}));const C=w[s(241)]({title:"新增",label:s(212)});let z=0;C.on(s(201),(t=>{const n=s;M=Object[n(259)](P)[0],L=Object.values(P)[0],A=Object[n(242)](P)[1];let e=z++,o=w[n(230)]({title:M});for(const s in A){let t=A[s];o[n(245)]({view:n(255),label:s,parse:t=>String(t),value:t})}o[n(241)]({title:n(273)+e,label:n(202)}).on("click",(t=>{const e=n;let o=t[e(198)][e(199)][e(264)]("~")[1];U.removePass(o)})).on("click",(()=>{o[n(227)]()}));let r=E(A,t[n(198)].label,t[n(228)]);U[n(215)](M,L,r,e)})),U[s(234)](p[s(228)],v.value);const{onLoop:F}=n();return F((({delta:t})=>{const n=s;S&&(p.value[n(254)]=!0,U[n(222)](),S[n(244)]=_,U[n(246)](d.value,v[n(228)]),U[n(197)](),U[n(206)](d[n(228)],v[n(228)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),X=Y;!function(t,n){const e=Y,o=$();for(;;)try{if(527143===-parseInt(e(139))/1+parseInt(e(157))/2*(-parseInt(e(132))/3)+-parseInt(e(118))/4*(-parseInt(e(127))/5)+-parseInt(e(152))/6+parseInt(e(153))/7+parseInt(e(123))/8*(parseInt(e(128))/9)+-parseInt(e(130))/10*(parseInt(e(116))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){q(this,(function(){const t=Y,n=new RegExp(t(136)),e=new RegExp(t(131),"i"),o=Q(t(120));n[t(146)](o+t(144))&&e[t(146)](o+"input")?Q():o("0")}))()}();const Z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Y(145)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function $(){const t=["913305hLdMxa","console","constructor","warn","TresPerspectiveCamera","chain","apply","test","while (true) {}","TresDirectionalLight","toString","debu",'{}.constructor("return this")( )',"4196856FsCIlV","3667202VrRzNR","length","prototype","counter","45614xsNlGH","#ffffff","gger","440goiEzC","manual","3913948MwrgLK","log","init","stateObject","bind","664CJFipq","string","TresAmbientLight","table","5wHDTUa","102177yanMtb","trace","53380BKHJZc","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","12yOfhVN","return (function() ","__proto__","action","function *\\( *\\)","postProcessingEditor","info"];return($=function(){return t})()}function Y(t,n){const e=$();return(Y=function(t,n){return e[t-=114]})(t,n)}Z(void 0,(function(){const t=Y;let n;try{n=Function(t(133)+t(151)+");")()}catch(r){n=window}const e=n[t(140)]=n[t(140)]||{},o=[t(119),t(142),t(138),"error","exception",t(126),t(129)];for(let s=0;s<o[t(154)];s++){const n=Z[t(141)][t(155)].bind(Z),r=o[s],a=e[r]||n;n[t(134)]=Z[t(122)](Z),n.toString=a[t(149)][t(122)](a),e[r]=n}}))();const J={ref:"perspectiveCameraRef",position:[600,850,-1500],fov:45,near:.1,far:1e5},K=v({__name:X(137),setup(t){const e=X,r={clearColor:"#000000",shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(117)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=p("TresCanvas");return d(),m(i,S(r,{"window-size":""}),{default:g((()=>[x(a(143),J,null,512),h(y(o),I(b(s)),null,16),n[0]||(n[0]=x(a(125),{color:a(114),intensity:2},null,-1)),n[1]||(n[1]=x(a(148),{position:[100,100,0],intensity:2,color:"#ffffff"},null,-1)),(d(),m(_,null,{default:g((()=>[h(W)])),_:1}))])),_:1},16)}}});function Q(t){function n(t){const e=Y;if(typeof t===e(124))return function(t){}[e(141)](e(147))[e(145)](e(156));1!==(""+t/t)[e(154)]||t%20==0?function(){return!0}[e(141)](e(150)+e(115)).call(e(135)):function(){return!1}[e(141)](e(150)+e(115))[e(145)](e(121)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{K as default};
