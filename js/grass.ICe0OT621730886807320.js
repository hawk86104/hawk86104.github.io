import{_ as t,T as n,ai as e}from"./three._P_a_E_Z1730886807320.js";import{e as o,b as r,U as a,c as i}from"./@tresjs.iUmyNPdW1730886807320.js";import"./index.mCPqGCmN1730886807320.js";import{a as s}from"./simplex-noise.Yx8GBgKo1730886807320.js";import{C as c}from"./index.xgqHHD_Y1730886807320.js";import{d as l,a6 as u,o as f,D as p,J as h,u as m,r as v,f as d,g,j as x,aj as w,ak as y,al as b}from"./@vue.-THQH3GC1730886807320.js";import{_}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.o3gQ8_oG1730886807320.js";import"./@vueuse.Uoe2bW0Q1730886807320.js";import"./lamina.dL9Qr7BG1730886807320.js";import"./glsl-tokenizer.9xeMFtxX1730886807320.js";import"./@amap.T-fZ7qS81730886807320.js";import"./glsl-token-descope.e2LTx8ee1730886807320.js";import"./glsl-token-depth.tAu6yNB41730886807320.js";import"./glsl-token-scope.5ENyd1lh1730886807320.js";import"./glsl-token-properties.N-pch2aR1730886807320.js";import"./glsl-token-assignments.KEuj18pA1730886807320.js";import"./glsl-token-string.E9fY-dJQ1730886807320.js";import"./glsl-token-functions.QUkaU8Sj1730886807320.js";import"./object-hash.rH2Wt7qx1730886807320.js";import"./jszip._dv5DHfD1730886807320.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.eBJXyXfG1730886807320.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.VJW-uC1G1730886807320.js";import"./three-stdlib.-Lz596Q01730886807320.js";import"./@pmndrs.wWpbS2XU1730886807320.js";import"./utils.9H2u5jAu1730886807320.js";const M=j;function j(t,n){const e=k();return(j=function(t,n){return e[t-=221]})(t,n)}!function(t,n){const e=j,o=k();for(;;)try{if(764826===-parseInt(e(254))/1+-parseInt(e(285))/2*(-parseInt(e(232))/3)+parseInt(e(240))/4+-parseInt(e(226))/5*(-parseInt(e(255))/6)+-parseInt(e(278))/7+parseInt(e(267))/8*(-parseInt(e(258))/9)+-parseInt(e(286))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[j(230)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){z(this,(function(){const t=j,n=new RegExp(t(243)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=R(t(256));n[t(241)](o+t(277))&&e[t(241)](o+"input")?R():o("0")}))()}();const I=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();I(void 0,(function(){const t=j,n=function(){const t=j;let n;try{n=Function("return (function() "+t(279)+");")()}catch(e){n=window}return n}(),e=n[t(246)]=n[t(246)]||{},o=[t(261),t(221),t(251),"error",t(287),"table",t(273)];for(let r=0;r<o[t(234)];r++){const n=I.constructor[t(242)][t(237)](I),a=o[r],i=e[a]||n;n.__proto__=I.bind(I),n[t(227)]=i[t(227)].bind(i),e[a]=n}}))();const A=[M(249)],C=[M(229),"attributes-position","attributes-uv","attributes-offset",M(283),"attributes-stretch",M(270),M(250)],D=[M(294)],S=[M(264)];function k(){const t=["443880odBspY","8186166IIOxkD","init","Vector3","9bjAigB","instances","halfRootAngleSinF32","log","alphaMap","TresMesh","side","cos","call","1864176YjMitI","random","Vector4","attributes-halfRootAngleSin","normalize","position","trace","halfRootAngleCosF32","orientationsF32","while (true) {}","chain","7203091HDOTlq",'{}.constructor("return this")( )',"DoubleSide","joints","Color","attributes-orientation","uniforms","310kIyGrS","9078290zFGEeh","exception","attributes","map","push","translate","offsetsF32","action","geometry","width","toneMapped","warn","PlaneGeometry","needsUpdate","debu","lookAt","5cqKHBK","toString","InstancedBufferAttribute","index","apply","#000f00","14487DmSxCN","set","length","TresMeshStandardMaterial","grass","bind","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","constructor","5062856sVbDuw","test","prototype","function *\\( *\\)","sin","time","console","convertSRGBToLinear","gger","material","attributes-halfRootAngleCos","info","array","stretchesF32"];return(k=function(){return t})()}const F=l({__name:M(236),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(e){const a=M;let i,l;const v=([i,l]=u((()=>r({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),i=await i,l(),i),d=e,g=s(Math[a(268)]);function x(n,e){const o=a,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,i=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,s=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,c=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(269)])(r,i,s,c)}function w(t,n){var e=2*g(t/50,n/50);return e+=4*g(t/100,n/100),e+=.2*g(t/10,n/10)}const y=function(e,o){const r=a,i=[],s=[],c=[],l=[],u=[];let f=new(t[r(269)]),p=new(t[r(269)]);const h=-.25;for(let n=0;n<e;n++){const a=Math[r(268)]()*o-o/2,m=Math.random()*o-o/2,v=w(a,m);i[r(290)](a,v,m);let d=Math.PI-Math.random()*(2*Math.PI);l[r(290)](Math[r(244)](.5*d)),u[r(290)](Math[r(265)](.5*d));let g=new(t[r(257)])(0,1,0),y=g.x*Math.sin(d/2),b=g.y*Math[r(244)](d/2),_=g.z*Math[r(244)](d/2),M=Math[r(265)](d/2);f[r(233)](y,b,_,M)[r(271)](),d=.5*Math[r(268)]()+h,g=new(t[r(257)])(1,0,0),y=g.x*Math.sin(d/2),b=g.y*Math[r(244)](d/2),_=g.z*Math[r(244)](d/2),M=Math[r(265)](d/2),p[r(233)](y,b,_,M)[r(271)](),f=x(f,p),d=.5*Math[r(268)]()+h,g=new(t[r(257)])(0,0,1),y=g.x*Math[r(244)](d/2),b=g.y*Math[r(244)](d/2),_=g.z*Math[r(244)](d/2),M=Math[r(265)](d/2),p[r(233)](y,b,_,M)[r(271)](),f=x(f,p),s[r(290)](f.x,f.y,f.z,f.w),n<e/3?c[r(290)](1.8*Math[r(268)]()):c.push(Math[r(268)]())}return{offsetsF32:new(t[r(228)])(new Float32Array(i),3),orientationsF32:new n(new Float32Array(s),4),stretchesF32:new(t[r(228)])(new Float32Array(c),1),halfRootAngleCosF32:new n(new Float32Array(u),1),halfRootAngleSinF32:new(t[r(228)])(new Float32Array(l),1)}}(d[a(259)],d[a(295)]),b=new(t[a(222)])(d.bW,d.bH,1,d[a(281)])[a(291)](0,d.bH/2,0),_=new(t[a(222)])(d.width,d.width,32,32);_[a(225)](new(t[a(257)])(0,1,0));const j=_[a(288)][a(272)];for(let t=0;t<j[a(252)][a(234)];t+=3)j[a(252)][t+1]=w(j[a(252)][t],j.array[t+2]);_[a(288)][a(272)][a(223)]=!0,_.computeVertexNormals();const z=new(c({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(t[a(282)])(.3,.9,0)[a(247)](),bottomColor:new(t[a(282)])(0,.2,0)[a(247)]()},a(238),"\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }",(n=>{const e=a;n.side=t[e(280)]})));z[a(289)]=v.map,z[a(262)]=v[a(262)],z[a(296)]=!1;const{onLoop:I}=o();return I((({elapsed:t})=>{const n=a;z[n(284)][n(245)].value=t/4})),(n,e)=>{const o=a;return f(),p("TresGroup",null,[h(o(263),{material:m(z)},[h("TresInstancedBufferGeometry",{index:m(b)[o(229)],"attributes-position":m(b)[o(288)][o(272)],"attributes-uv":m(b)[o(288)].uv,"attributes-offset":m(y)[o(292)],"attributes-orientation":m(y)[o(275)],"attributes-stretch":m(y)[o(253)],"attributes-halfRootAngleSin":m(y)[o(260)],"attributes-halfRootAngleCos":m(y)[o(274)]},null,8,C)],8,A),h("TresMesh",{position:[0,0,0],geometry:m(_)},[h(o(235),{color:o(231),side:t[o(280)]},null,8,S)],8,D)])}}});function R(t){function n(t){const e=j;if("string"==typeof t)return function(t){}.constructor(e(276)).apply("counter");1!==(""+t/t)[e(234)]||t%20==0?function(){return!0}[e(239)](e(224)+e(248))[e(266)](e(293)):function(){return!1}.constructor(e(224)+"gger").apply("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}function T(){const t=["445SmoNSD","console","282688WIovms","test","457804bKrnHW","exception","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","error","grass","20182xlAUGY","counter","stateObject","8152600dpJvFv","table","warn","63978pusqsF","info","length","action","constructor","11067291kYXnQD","TresPerspectiveCamera","debu","apply","while (true) {}","bind","return (function() ","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","input","117ZTJTuu","init","232FnEqMY",'{}.constructor("return this")( )',"log","prototype","trace","function *\\( *\\)","gger","1098582IzAqsv","call","chain","toString"];return(T=function(){return t})()}const E=B;function B(t,n){const e=T();return(B=function(t,n){return e[t-=207]})(t,n)}!function(t,n){const e=B,o=T();for(;;)try{if(665766===parseInt(e(225))/1+parseInt(e(238))/2*(-parseInt(e(216))/3)+-parseInt(e(233))/4+parseInt(e(229))/5*(parseInt(e(244))/6)+parseInt(e(231))/7*(parseInt(e(218))/8)+-parseInt(e(207))/9+-parseInt(e(241))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){H(this,(function(){const t=B,n=new RegExp(t(223)),e=new RegExp(t(235),"i"),o=G(t(217));n[t(232)](o+t(227))&&e[t(232)](o+t(215))?G():o("0")}))()}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[B(210)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();O(void 0,(function(){const t=B,n=function(){const t=B;let n;try{n=Function(t(213)+t(219)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(230)]||{},o=[t(220),t(243),t(245),t(236),t(234),t(242),t(222)];for(let r=0;r<o[t(246)];r++){const n=O[t(248)][t(221)][t(212)](O),a=o[r],i=e[a]||n;n.__proto__=O.bind(O),n[t(228)]=i[t(228)][t(212)](i),e[a]=n}}))();const q=l({__name:E(237),setup(t){const n=v({alpha:!0,toneMapping:e,windowSize:!0,clearColor:6710886}),o=v({enableDamping:!0,autoRotate:!1});return(t,e)=>{const r=B;return f(),d(m(i),w(y(n)),{default:g((()=>[e[0]||(e[0]=h(r(208),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),x(m(a),w(y(o)),null,16),(f(),d(b,null,{default:g((()=>[x(F)])),_:1})),(f(),d(b,null,{default:g((()=>[x(m(_),{texture:r(214)})])),_:1}))])),_:1},16)}}});function G(t){function n(t){const e=B;if("string"==typeof t)return function(t){}[e(248)](e(211))[e(210)](e(239));1!==(""+t/t)[e(246)]||t%20==0?function(){return!0}[e(248)](e(209)+e(224))[e(226)](e(247)):function(){return!1}[e(248)](e(209)+e(224))[e(210)](e(240)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{q as default};
