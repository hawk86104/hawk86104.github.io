import{p as t,U as n,z as e,Y as o}from"./@tresjs.2zzrlbpQ1728446741233.js";import{_ as r,k as s,V as a,at as i,M as c,s as l,n as u,m as v,aB as f,cp as p}from"./three.GKtOCofD1728446741233.js";import{P as m}from"./tweakpane.yHWGBmom1728446741233.js";import{d,a4 as g,e as x,o as h,f as y,g as I,L as b,j as _,u as S,aj as U,ak as w,al as P,m as D}from"./@vue.JNsx1iN61728446741233.js";import{_ as E}from"./@fesjs.tvRFRo261728446741233.js";import"./@vueuse.M29bYW2K1728446741233.js";import"./vue-router.GYb5A3dV1728446741233.js";import"./lodash-es.kYt-_xTG1728446741233.js";import"./@qlin.yHhFDldE1728446741233.js";import"./pinia.xS8D_FkU1728446741233.js";import"./@floating-ui.BPbuo5Gx1728446741233.js";import"./@juggle.7yjBMqoW1728446741233.js";function M(t,n){const e=L();return(M=function(t,n){return e[t-=228]})(t,n)}!function(t,n){const e=M,o=L();for(;;)try{if(330632===-parseInt(e(253))/1*(-parseInt(e(230))/2)+parseInt(e(256))/3+parseInt(e(252))/4*(parseInt(e(279))/5)+-parseInt(e(240))/6+-parseInt(e(238))/7+-parseInt(e(285))/8+parseInt(e(294))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[M(290)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function L(){const t=["type","responseText","WagnerLoadShaderException",'Shader "',"index","3791816AcmPuS","toString","function *\\( *\\)","debu","chain","apply","ShaderMaterial","input","return (function() ","5577039GEMfrl","Matrix2","init","name","open","3986kfdPwe","\" couldn't be loaded.","counter","prototype","Vector2","stateObject","onabort","value","4327148gpQyom","hasOwnProperty","1504842RyNPin","trace","gger","Vector3","get","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)",'" load was aborted.',"Vector4","isArray","send","object","info","880980tMBRuM","155rxIsxD","constructor","log","252777BMpBAb","bind","call","string",'{}.constructor("return this")( )',"exception","console","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","v3v","replace","Texture","exec","now","table","message","onerror","test","__proto__","Matrix3","onload","length","lastIndex","random","15zmsMrp"];return(L=function(){return t})()}!function(){A(this,(function(){const t=M,n=new RegExp(t(287)),e=new RegExp(t(245),"i"),o=F(t(296));n[t(272)](o+t(289))&&e.test(o+t(292))?F():o("0")}))()}();const z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[M(290)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();z(void 0,(function(){const t=M;let n;try{n=Function(t(293)+t(260)+");")()}catch(r){n=window}const e=n[t(262)]=n.console||{},o=[t(255),"warn",t(251),"error",t(261),t(269),t(241)];for(let s=0;s<o[t(276)];s++){const n=z[t(254)][t(233)][t(257)](z),r=o[s],a=e[r]||n;n[t(273)]=z[t(257)](z),n.toString=a.toString[t(257)](a),e[r]=n}}))();function C(t,n,e){const o=M;if(typeof t!==o(250)||null===t)return t;const r=Array[o(248)](t)?[]:{};for(const s in t)t[o(239)](s)&&(r[s]=C(t[s])),s==n&&(r[n]=e);return r}function F(t){function n(t){const e=M;if(typeof t===e(259))return function(t){}[e(254)]("while (true) {}")[e(290)](e(232));1!==(""+t/t)[e(276)]||t%20==0?function(){return!0}[e(254)](e(288)+e(242))[e(258)]("action"):function(){return!1}[e(254)](e(288)+e(242))[e(290)](e(235)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const T=R;!function(t,n){const e=R,o=G();for(;;)try{if(519501===parseInt(e(369))/1+parseInt(e(309))/2+-parseInt(e(313))/3+parseInt(e(325))/4*(parseInt(e(319))/5)+-parseInt(e(320))/6+parseInt(e(332))/7*(-parseInt(e(303))/8)+-parseInt(e(330))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){B(this,(function(){const t=R,n=new RegExp(t(351)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=O(t(371));n[t(353)](o+"chain")&&e[t(353)](o+t(318))?O():o("0")}))()}();const N=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(368)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function R(t,n){const e=G();return(R=function(t,n){return e[t-=286]})(t,n)}function G(){const t=["makeOrthographic","settings","innerWidth","uuid","useRGBA","Stack","far","Pass","WebGLRenderTarget","setSize","warn","swapBuffers","RGBAFormat","scene","tInput","stencilBuffer","passItems","startTime","innerHeight","back","resolution","ClampToEdgeWrapping","texture","params","while (true) {}","pass","height","set","counter","72488gecdnp","front","write","type","copyPass","read","69502rcyWah","length","MeshBasicMaterial","makePerspective","5250AFLIPz","toString","prototype","shader","projectionMatrix","input","5tinuSr","243054CxzGnM","renderer","OrthographicCamera","scale","call","2674108wPZHcT","stateObject","debu",'{}.constructor("return this")( )',"log","6404454hSCsBO","wrapT","91yOpQuq","RGBFormat","loadShadervf","CopyPass","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","render","uniforms","constructor","push","LinearFilter","near","setRenderTarget","time","__proto__","value","now","exception","bind","info","function *\\( *\\)","table","test","string","magFilter","Scene","action","camera","console","quad","addPass","UnsignedByteType","material","PlaneGeometry","width","minFilter","toScreen","apply","687881yBfJhI","getOfflineTexture","init"];return(G=function(){return t})()}N(void 0,(function(){const t=R,n=function(){const t=R;let n;try{n=Function("return (function() "+t(328)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(359)]||{},o=["log",t(382),t(350),"error",t(348),t(352),"trace"];for(let r=0;r<o[t(310)];r++){const n=N.constructor[t(315)].bind(N),s=o[r],a=e[s]||n;n[t(345)]=N[t(349)](N),n[t(314)]=a[t(314)][t(349)](a),e[s]=n}}))();class j{constructor(t,n){const e=R;this[e(365)]=1,this[e(300)]=1,this[e(373)]=n||{},this[e(376)]=this[e(373)].useRGBA||!1,this[e(321)]=t,this[e(307)]=this[e(335)](this[e(373)]),this[e(287)]=new(r[e(356)]),this[e(360)]=new l(new(r[e(364)])(1,1),new(r[e(311)])),this[e(287)].add(this[e(360)]),this[e(358)]=new(r[e(322)])(1,1,1,1,-1e4,1e4),this[e(304)]=new(r[e(380)])(1,1,{minFilter:void 0!==this[e(373)][e(366)]?this.settings[e(366)]:r[e(341)],magFilter:void 0!==this[e(373)][e(355)]?this[e(373)][e(355)]:r[e(341)],wrapS:void 0!==this[e(373)].wrapS?this[e(373)].wrapS:r[e(295)],wrapT:void 0!==this.settings.wrapT?this.settings[e(331)]:r[e(295)],format:this.useRGBA?r[e(286)]:r[e(333)],type:void 0!==this[e(373)].type?this.settings[e(306)]:r[e(362)],stencilBuffer:void 0===this[e(373)][e(289)]||this.settings.stencilBuffer}),this.back=this[e(304)].clone(),this[e(291)]=Date[e(347)](),this.passes={},this[e(377)]={passItems:[],passes:[]}}[T(361)](t,n,e,o){const r=T;this[r(334)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(316)]};this[r(377)][r(290)][r(340)](s)}removePass(t){const n=T;for(let e=this[n(377)][n(290)][n(310)]-1;e>=0;e--)this[n(377)][n(290)][e][n(375)]===parseInt(t)&&this[n(377)][n(290)].splice(e,1);console[n(329)](this.Stack[n(290)])}[T(335)](){const t=T;this[t(379)][t(324)](this);return this.loadShadervf("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}loadShadervf(t){const n=T,e=n(336);return this[n(316)]=function(t,n){const e=M,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,l=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,u={sampler2D:{type:"t",value:()=>new(r[M(266)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new s},vec3:{type:"v3",value:()=>new a},vec4:{type:"v4",value:()=>new(r[M(247)])},bvec2:{type:"v2",value:()=>new(r[M(234)])},bvec3:{type:"v3",value:()=>new a},bvec4:{type:"v4",value:()=>new(r[M(247)])},ivec2:{type:"v2",value:()=>new s},ivec3:{type:"v3",value:()=>new(r[M(243)])},ivec4:{type:"v4",value:()=>new i},mat2:{type:"v2",value:()=>new(r[M(295)])},mat3:{type:"v3",value:()=>new(r[M(274)])},mat4:{type:"v4",value:()=>new c}},v={float:{type:"fv",value:()=>[]},vec3:{type:e(264),value:()=>[]}};let f;const p={resolution:{type:"v2",value:new(r[e(234)])(1,1),default:!0},time:{type:"f",value:Date[e(268)](),default:!0},tInput:{type:"t",value:new(r[e(266)]),default:!0}};let m,d;for(;null!==(f=o[e(267)](n));)f[e(284)]===o[e(277)]&&o.lastIndex++,m=f[1],d=f[2],p[d]={type:u[m][e(280)],value:u[m][e(237)]()};for(;null!==(f=l.exec(n));)f[e(284)]===o[e(277)]&&o[e(277)]++,m=f[1],d=f[2],f[3],p[d]={type:v[m][e(280)],value:v[m].value()};return new(r[e(291)])({uniforms:p,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(316)]}[T(379)](t){const n=T;this[n(316)]=null,this[n(297)]={}}Reset(){const t=T;this[t(308)]=this[t(304)],this[t(305)]=this[t(293)]}onWindowResize(t,n){const e=T,o=window[e(374)],r=window[e(292)];t[e(381)](1*o,1*r),n[e(317)][e(312)](70,o/r,n[e(342)],n[e(378)]),this[e(381)](o,r);return this[e(370)](o,r,!0)}[T(381)](t,n){const e=T;this[e(365)]=t,this[e(300)]=n,this[e(358)].projectionMatrix[e(372)](t/-2,t/2,n/2,n/-2,this[e(358)][e(342)],this[e(358)].far),this.quad[e(323)][e(301)](t,n,1),this[e(304)].setSize(t,n),this[e(293)].setSize(t,n)}[T(370)](t,n,e){const o=T;return new(r[o(380)])(t,n,{minFilter:r[o(341)],magFilter:u,format:e?r[o(286)]:r[o(333)]})}[T(337)](t,n,e,o){const r=T;this[r(321)][r(343)](this[r(305)]),this.renderer[r(337)](t,n),o||this[r(383)]()}swapBuffers(){const t=T,n=this[t(305)];this[t(305)]=this.read,this[t(308)]=n}[T(299)](){const t=T;for(let n=0;n<this[t(377)].passItems[t(310)];n++){const e=this.Stack[t(290)][n][t(316)],o=this[t(377)][t(290)][n].params;if(this[t(321)][t(343)](this.write),e instanceof v){this[t(360)][t(363)]=e,this[t(360)][t(363)].uniforms.tInput[t(346)]=this[t(308)].texture,this[t(360)][t(363)].uniforms[t(294)].value[t(301)](this.width,this[t(300)]),this[t(360)][t(363)][t(338)][t(344)][t(346)]=.001*(Date[t(347)]()-this[t(291)]);for(const n in o)this[t(360)].material[t(338)][n][t(346)]=o[n];this[t(321)][t(337)](this[t(287)],this.camera),this.swapBuffers()}}}[T(367)](t,n){const e=T;this[e(321)][e(343)](null),this[e(360)][e(363)]=this[e(307)],this[e(360)][e(363)][e(338)][e(288)][e(346)]=this[e(308)][e(296)],this.quad[e(363)][e(338)][e(294)][e(346)][e(301)](this[e(365)],this.height),this[e(321)][e(337)](this[e(287)],this.camera)}}function O(t){function n(t){const e=R;if(typeof t===e(354))return function(t){}[e(339)](e(298))[e(368)](e(302));1!==(""+t/t)[e(310)]||t%20==0?function(){return!0}[e(339)](e(327)+"gger")[e(324)](e(357)):function(){return!1}[e(339)](e(327)+"gger")[e(368)](e(326)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const V="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",k=X;!function(t,n){const e=X,o=q();for(;;)try{if(266246===parseInt(e(220))/1*(-parseInt(e(204))/2)+parseInt(e(177))/3+-parseInt(e(199))/4*(-parseInt(e(160))/5)+parseInt(e(236))/6+parseInt(e(216))/7*(parseInt(e(201))/8)+parseInt(e(183))/9*(-parseInt(e(198))/10)+parseInt(e(164))/11*(parseInt(e(186))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[X(231)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){H(this,(function(){const t=X,n=new RegExp(t(158)),e=new RegExp(t(213),"i"),o=Z("init");n[t(191)](o+t(166))&&e[t(191)](o+t(153))?Z():o("0")}))()}();const W=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[X(231)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function q(){const t=["RGBPass","10142IjkwKV","text","chain","warn","FXAAPass","pass","click","title","CGAPass","values","TOONPass","移除~","addBlade","70035fejTmc","exception","addButton","error","SOBELPass","postProcessing","9EqLzBG","SEPIAPass","bind","3636iRgFZA","prototype","InvertPass","POISSONPass","receiveShadow","test","while (true) {}","castShadow","toString","__proto__","label",'{}.constructor("return this")( )',"4199870hTRpIL","2060ORVzCU","return (function() ","143264WUknxI","counter","info","18YbPnTl","addPass","MeshPhongMaterial","translate","VIGNETTE2Pass","VIGNETTE1Pass","string","value","push","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","onWindowResize","action","161ebvOTM","gger","table","后处理类型","24468WDRxma","CIRCULARPass","mergeGeometries","call","dispose","Vector2","target","random","map","constructor","Reset","apply","material","render","BOXBLURPass","BufferGeometry","1055310QRURkn","DENOISEPass","input","list","stateObject","DOTPass","toScreen","function *\\( *\\)","debu","155vGZySq","FREICHENPass","add"];return(q=function(){return t})()}function X(t,n){const e=q();return(X=function(t,n){return e[t-=153]})(t,n)}W(void 0,(function(){const t=X;let n;try{n=Function(t(200)+t(197)+");")()}catch(r){n=window}const e=n.console=n.console||{},o=["log",t(167),t(203),t(180),t(178),t(218),"trace"];for(let s=0;s<o.length;s++){const n=W[t(229)][t(187)][t(185)](W),r=o[s],a=e[r]||n;n[t(195)]=W[t(185)](W),n[t(194)]=a[t(194)][t(185)](a),e[r]=n}}))();function Z(t){function n(t){const e=X;if(typeof t===e(210))return function(t){}[e(229)](e(192))[e(231)](e(202));1!==(""+t/t).length||t%20==0?function(){return!0}.constructor(e(159)+e(217))[e(223)](e(215)):function(){return!1}[e(229)]("debu"+e(217))[e(231)](e(155)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const $=E(d({__name:k(182),async setup(o){const s=k;let a,i;const{camera:c,renderer:u,scene:v,sizes:d}=t();for(var x=new(r[s(235)]),h=[],y=0;y<100;y++){var I=new f(100,100,100);I[s(207)](1500*Math[s(227)](),1500*Math[s(227)](),1500*Math[s(227)]()),h[s(212)](I)}x=p[s(222)](h);const b=([a,i]=g((()=>e({map:"plugins/postProcessing/image/1324.jpg"}))),a=await a,i(),a),_=([a,i]=g((()=>e({map:"plugins/postProcessing/image/1324-normal.jpg"}))),a=await a,i(),a);var S=new(r[s(206)])({map:b.map,normalMap:_.map,normalScale:new(r[s(225)])(.8,-.8),shininess:100}),U=new l(x,S);U[s(193)]=!0,U[s(190)]=!0,v[s(211)][s(162)](U);const w=new j(u[s(211)],{useRGBA:!0}),P=new m;let D=null,E=[{text:s(188),value:{InvertPass:V}},{text:s(168),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:s(184),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:"SNOISEPass",value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:s(234),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:s(237),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:s(172),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:_[s(228)]}}},{text:s(181),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:s(163),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:s(156),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(221),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:s(189),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:s(209),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(208),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:s(161),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:s(174),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],M="InvertPass",A=V,L=null;P[s(176)]({view:s(154),label:s(219),options:E,value:""}).on("change",(t=>{D=t[s(211)]}));const z=P[s(179)]({title:"新增",label:"新增通道"});let F=0;z.on("click",(t=>{const n=s;M=Object.keys(D)[0],A=Object[n(173)](D)[0],L=Object.values(D)[1];let e=F++,o=P.addFolder({title:M});for(const s in L){let t=L[s];o.addBlade({view:n(165),label:s,parse:t=>String(t),value:t})}o[n(179)]({title:n(175)+e,label:"关闭通道"}).on(n(170),(t=>{const e=n;let o=t.target[e(171)].split("~")[1];w.removePass(o)})).on(n(170),(()=>{o[n(224)]()}));let r=C(L,t[n(226)][n(196)],t.value);w[n(205)](M,A,r,e)})),w[s(214)](u.value,c.value);const{onLoop:T}=n();return T((({delta:t})=>{const n=s;U&&(u[n(211)].autoClearColor=!0,w[n(230)](),U[n(232)]=S,w[n(233)](v.value,c[n(211)]),w[n(169)](),w[n(157)](v[n(211)],c[n(211)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),K=ot;function Q(){const t=["length","test","324137GOXqDF","TresCanvas","perspectiveCameraRef","console","postProcessingEditor","1irzkng","24ypHosO","apply","TresPerspectiveCamera",'{}.constructor("return this")( )',"__proto__","while (true) {}","return (function() ","manual","toString","#000000","bind","warn","constructor","3028405LBoVCd","36xBZqGv","function *\\( *\\)","1619954lmPILq","#ffffff","2823658KBEMFl","log","1070PPvpNN","call","string","input","chain","action","info","981567DhXIoK","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","2028726GWKnqm","gger","counter","prototype","10943000zUSCoc","debu"];return(Q=function(){return t})()}!function(t,n){const e=ot,o=Q();for(;;)try{if(985838===parseInt(e(235))/1*(-parseInt(e(211))/2)+parseInt(e(220))/3*(parseInt(e(236))/4)+parseInt(e(206))/5+-parseInt(e(207))/6*(-parseInt(e(209))/7)+parseInt(e(226))/8+parseInt(e(222))/9+-parseInt(e(213))/10*(parseInt(e(230))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Y=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[ot(237)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){Y(this,(function(){const t=ot,n=new RegExp(t(208)),e=new RegExp(t(221),"i"),o=st("init");n.test(o+t(217))&&e[t(229)](o+t(216))?st():o("0")}))()}();const J=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();J(void 0,(function(){const t=ot,n=function(){const t=ot;let n;try{n=Function(t(242)+t(239)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(233)]||{},o=[t(212),t(247),t(219),"error","exception","table","trace"];for(let r=0;r<o[t(228)];r++){const n=J[t(205)][t(225)][t(246)](J),s=o[r],a=e[s]||n;n[t(240)]=J[t(246)](J),n[t(244)]=a.toString[t(246)](a),e[s]=n}}))();const tt={ref:K(232),position:[600,850,-1500],fov:45,near:.1,far:1e5},nt=b("TresAmbientLight",{color:K(210),intensity:2},null,-1),et=b("TresDirectionalLight",{position:[100,100,0],intensity:2,color:"#ffffff"},null,-1);function ot(t,n){const e=Q();return(ot=function(t,n){return e[t-=205]})(t,n)}const rt=d({__name:K(234),setup(t){const e=K,r={clearColor:e(245),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(243)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=x(a(231));return h(),y(i,D(r,{"window-size":""}),{default:I((()=>[b(a(238),tt,null,512),_(S(o),U(w(s)),null,16),nt,et,(h(),y(P,null,{default:I((()=>[_($)])),_:1}))])),_:1},16)}}});function st(t){function n(t){const e=ot;if(typeof t===e(215))return function(t){}.constructor(e(241)).apply(e(224));1!==(""+t/t).length||t%20==0?function(){return!0}.constructor(e(227)+e(223))[e(214)](e(218)):function(){return!1}.constructor(e(227)+e(223))[e(237)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{rt as default};
