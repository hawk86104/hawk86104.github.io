import"./@fesjs.C0vFiD6Z1758524188831.js";import"./Resource.DxdCIUkg1758524188831.js";/* empty css                                                                             */import{_ as e}from"./default.vue_vue_type_script_setup_true_lang.agXMs6XO1758524188831.js";import"./three-mesh-ui.module.CE9rtod61758524188831.js";import"./global.B9GyzW9k1758524188831.js";/* empty css                                                              */import{m as r,e as o}from"./@tresjs.BL1sBIDK1758524188831.js";import"./vanilla.esm.5.5.0.UWCjMdOF1758524188831.js";import{u as t}from"./index.DwMcWPwK1758524188831.js";import{d as i,ab as a,w as s,G as n,o as l,I as u,a7 as m,a8 as p,r as d,v as f,a2 as v,j as c,u as h,f as j,m as g,F as _}from"./@vue.pEDXJ_3Z1758524188831.js";import{C,a as y,a3 as b,bj as x}from"./three.CC50Wz7a1758524188831.js";import"./SPE.DXumTiR41758524188831.js";import"./HeightCorrection.Bq98L9tL1758524188831.js";import"./three-custom-shader-material.BNfPN_sa1758524188831.js";import{P as w}from"./tweakpane.C0HtAJSg1758524188831.js";import{b as z}from"./pagesShow.vue_vue_type_script_setup_true_lang.B8JOcE9w1758524188831.js";import"./vue-router.DFx_OtVs1758524188831.js";import"./lodash-es.C7pWAXPe1758524188831.js";import"./pinia.DVrvLNCY1758524188831.js";import"./@qlin.q6OWdsQV1758524188831.js";import"./@babel.BPq7uOAK1758524188831.js";import"./@floating-ui.BFjFSAYt1758524188831.js";import"./@juggle.CcBCnTIR1758524188831.js";import"./color.D9QGz8GJ1758524188831.js";import"./@amap.CGUF9xH41758524188831.js";import"./color-string.BDbH6wEP1758524188831.js";import"./color-name.BQ5IbGbl1758524188831.js";import"./simple-swizzle.Bkblhu7y1758524188831.js";import"./is-arrayish.CLsR9Wfx1758524188831.js";import"./color-convert.P-wMblBM1758524188831.js";import"./lodash.iw1WOawC1758524188831.js";import"./postprocessing.DYlQqnRh1758524188831.js";import"./@vueuse.C-O_6is-1758524188831.js";import"./object-hash.COWhg4aZ1758524188831.js";import"./jszip.BzP0QdiD1758524188831.js";import"./buildingsCustomShaderMaterial.DyBo--wu1758524188831.js";const D={renderOrder:2200},N=["args"],R=i({__name:"depthBufferDiffuse",props:{radius:{default:100},shieldColor:{default:"#ffff00"},rimColor:{default:"#ffffff"},threshold:{default:.005}},setup(e){const i=e,{sizes:d,camera:f}=r(),v=d.aspectRatio.value,c=d.width.value,h=d.height.value,j=t({height:c*v,width:h*v,depth:!0,isLoop:!0}),g={blending:x,transparent:!0,depthWrite:!1,depthTest:!0,side:b,vertexShader:"\n\tvarying vec2 vUv;\n\tvarying vec3 vNormal;\n\tvarying vec3 vPosition;\n\tvoid main() {\n\t\tvUv = uv;\n\t\tvec4 worldPos = modelMatrix * vec4(position, 1.0);\n\t\tvec4 modelNormal = modelMatrix * vec4(normal, 0.0);\n\t\tvec4 mvPosition = viewMatrix * worldPos;\n\t\tgl_Position = projectionMatrix * mvPosition;\n\t\tvNormal = modelNormal.xyz;\n\t\tvPosition = worldPos.xyz;\n\t}\n  ",fragmentShader:"\nuniform sampler2D uDepthTexture; \nuniform vec2 uResolution;\nuniform float uNear;\nuniform float uFar;\nuniform float uThreshold;\nuniform vec3 uShieldColor;\nuniform vec3 uRimColor;\n\nvarying vec2 vUv;\nvarying vec3 vNormal;\nvarying vec3 vPosition;\n\n#include <packing>\n\nfloat LinearizeDepth(float depth) {\n\tfloat zNdc = 2.0 * depth - 1.0;\n\tfloat zEye = (2.0 * uFar * uNear) / ((uFar + uNear) - zNdc * (uFar - uNear));\n\tfloat linearDepth = (zEye - uNear) / (uFar - uNear);\n\treturn linearDepth;\n}\n\nvoid main() {\n\n  vec3 normal = normalize(vNormal);\n  if(gl_FrontFacing) {\n    normal *= -1.0;\n  }\n\n  vec3 viewDirection = normalize(cameraPosition - vPosition);\n  float fresnel = 1. + dot(normal, viewDirection);\n  fresnel = pow(fresnel, 4.0);\n\n  vec2 worldCoords = gl_FragCoord.xy/uResolution;\n\n  float sceneDepth = LinearizeDepth(texture2D(uDepthTexture, worldCoords).r);\n  float bubbleDepth = LinearizeDepth(gl_FragCoord.z);\n\n  float difference = abs( sceneDepth - bubbleDepth);\n  float normalizedDistance = clamp(difference / uThreshold, 0.0, 1.0);\n  vec4 intersection = mix(vec4(1.0), vec4(0.0), normalizedDistance) ;\n  intersection.rgb *= uRimColor;\n  vec4 color = vec4(uShieldColor, 0.3);\n  gl_FragColor = color + intersection + vec4(uRimColor, 1.0) * fresnel ;\n}\n  ",uniforms:{uDepthTexture:{value:a(j?.value?.depthTexture)},uResolution:{value:new y(c,h)},uNear:{value:1},uFar:{value:1e4},uThreshold:{value:.005},uShieldColor:{value:new C(i.shieldColor)},uRimColor:{value:new C(i.rimColor)}}},{onLoop:_}=o();return _((()=>{})),s((()=>[i.rimColor,i.shieldColor,i.threshold]),(([e,r,o])=>{g.uniforms.uRimColor.value.setStyle(e),g.uniforms.uShieldColor.value.setStyle(r),g.uniforms.uThreshold.value=o})),(e,r)=>(l(),n("TresMesh",D,[u("TresSphereGeometry",{args:[i.radius,64,64]},null,8,N),u("TresShaderMaterial",m(p(g)),null,16)]))}}),P=i({__name:"depthBufferDiffuse",setup(r){const o=d({shieldColor:"#ffff00",rimColor:"#ffffff",threshold:.005,radius:100}),t=new w;t.addBinding(o,"shieldColor",{label:"圈颜色"}),t.addBinding(o,"rimColor",{label:"条颜色"}),t.addBinding(o,"threshold",{label:"线条参数",min:1e-5,max:.01,step:1e-5}),t.addBinding(o,"radius",{label:"大小",min:10,max:200,step:1});const i=f(null);return v((()=>{i.value&&(i.value.$refs.tcRef?i.value.$refs.tcRef.context.camera.value.position.set(-135,250,320):i.value.$refs.perspectiveCameraRef&&i.value.$refs.perspectiveCameraRef.position.set(-135,250,320))})),(r,t)=>(l(),n(_,null,[c(h(e)),c(z,{ref_key:"pagesShowRef",ref:i},{ability:j((()=>[c(h(R),g({position:[0,30,0]},o),null,16)])),_:1},512)],64))}});export{P as default};
