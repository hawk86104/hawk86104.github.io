import{_ as t,t as n,V as e,C as o,T as r,a0 as a,ai as i}from"./three.aWgA1gea1733214749102.js";import{e as s,b as c,U as l,c as u}from"./@tresjs.lftldzUe1733214749102.js";import"./index.QeONzJj-1733214749102.js";import{a as f}from"./simplex-noise.Yx8GBgKo1733214749102.js";import{C as p}from"./index.lVnY7P4X1733214749102.js";import{d as h,a6 as m,o as v,D as d,J as g,u as x,r as w,f as y,g as b,j as _,aj as j,ak as M,al as z}from"./@vue.-THQH3GC1733214749102.js";import{_ as A}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.baJ8JPuS1733214749102.js";import"./@vueuse.xtU2GBMi1733214749102.js";import"./lamina.lWT7tulF1733214749102.js";import"./glsl-tokenizer.6lVb-dwO1733214749102.js";import"./@amap.ICsgtrgy1733214749102.js";import"./glsl-token-descope.uqT2mci21733214749102.js";import"./glsl-token-depth.QBcnEmlo1733214749102.js";import"./glsl-token-scope.SzyUeiGY1733214749102.js";import"./glsl-token-properties.m2gPEV-B1733214749102.js";import"./glsl-token-assignments.Ojn-qJCz1733214749102.js";import"./glsl-token-string.13IiltoE1733214749102.js";import"./glsl-token-functions.QxGXYUW51733214749102.js";import"./object-hash.qVCBUHAu1733214749102.js";import"./jszip._enF9xwA1733214749102.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.EArwoGu21733214749102.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.kLfq72ne1733214749102.js";import"./three-stdlib.kzq9IQVk1733214749102.js";import"./@pmndrs.EXEjBNTl1733214749102.js";import"./utils.lwjbS1lg1733214749102.js";const I=k;function C(){const t=["cos","exception","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","width","time","Color","2040579jHDjEy","call","init","attributes-orientation","joints","toneMapped","geometry","2268qxMZWr","Vector4","5895ojXqiw","length","1671728ukSrid","toString","stretchesF32","alphaMap","console","warn","instances","debu","__proto__","return (function() ","input","TresGroup","log","TresMesh","24tSKQBe","side","counter","2YXSmdX","prototype","map","attributes-stretch","random","PlaneGeometry","InstancedBufferAttribute","set","test","TresInstancedBufferGeometry","error","bind","Vector3","translate","lookAt","value","attributes","index","position","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","29176642MvHCua","array","stateObject","808285BcxcrL","action","computeVertexNormals","push","apply","2321139LrqixC","while (true) {}","5100725qABQYi","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","halfRootAngleSinF32","constructor","trace","convertSRGBToLinear","chain","10rVilRp","sin","table","attributes-position","normalize","material","needsUpdate","DoubleSide","halfRootAngleCosF32","offsetsF32","TresMeshStandardMaterial","gger"];return(C=function(){return t})()}!function(t,n){const e=k,o=C();for(;;)try{if(414532===parseInt(e(458))/1+parseInt(e(435))/2*(-parseInt(e(463))/3)+-parseInt(e(501))/4+parseInt(e(499))/5*(-parseInt(e(497))/6)+-parseInt(e(465))/7+-parseInt(e(432))/8*(parseInt(e(490))/9)+-parseInt(e(472))/10*(-parseInt(e(455))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const S=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function k(t,n){const e=C();return(k=function(t,n){return e[t-=421]})(t,n)}!function(){S(this,(function(){const t=k,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(466),"i"),o=E(t(492));n[t(443)](o+t(471))&&e[t(443)](o+t(428))?E():o("0")}))()}();const F=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[k(462)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();F(void 0,(function(){const t=k,n=function(){const t=k;let n;try{n=Function(t(427)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n.console=n[t(422)]||{},o=[t(430),t(423),"info",t(445),t(485),t(474),t(469)];for(let r=0;r<o[t(500)];r++){const n=F.constructor[t(436)][t(446)](F),a=o[r],i=e[a]||n;n[t(426)]=F.bind(F),n[t(502)]=i[t(502)][t(446)](i),e[a]=n}}))();const R=[I(477)],D=[I(452),I(475),"attributes-uv","attributes-offset",I(493),I(438),"attributes-halfRootAngleSin","attributes-halfRootAngleCos"],L=[I(496)],T=[I(433)],B=h({__name:"grass",props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(i){const l=I;let u,h;const w=([u,h]=m((()=>c({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),u=await u,h(),u),y=i,b=f(Math.random);function _(n,e){const o=k,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,a=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,i=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,s=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(498)])(r,a,i,s)}function j(t,n){var e=2*b(t/50,n/50);return e+=4*b(t/100,n/100),e+=.2*b(t/10,n/10)}const M=function(n,o){const a=k,i=[],s=[],c=[],l=[],u=[];let f=new(t[a(498)]),p=new(t[a(498)]);const h=-.25;for(let r=0;r<n;r++){const m=Math[a(439)]()*o-o/2,v=Math[a(439)]()*o-o/2,d=j(m,v);i.push(m,d,v);let g=Math.PI-Math[a(439)]()*(2*Math.PI);l.push(Math[a(473)](.5*g)),u[a(461)](Math.cos(.5*g));let x=new(t[a(447)])(0,1,0),w=x.x*Math[a(473)](g/2),y=x.y*Math[a(473)](g/2),b=x.z*Math[a(473)](g/2),M=Math.cos(g/2);f[a(442)](w,y,b,M)[a(476)](),g=.5*Math[a(439)]()+h,x=new(t[a(447)])(1,0,0),w=x.x*Math[a(473)](g/2),y=x.y*Math[a(473)](g/2),b=x.z*Math.sin(g/2),M=Math[a(484)](g/2),p.set(w,y,b,M)[a(476)](),f=_(f,p),g=.5*Math[a(439)]()+h,x=new e(0,0,1),w=x.x*Math.sin(g/2),y=x.y*Math[a(473)](g/2),b=x.z*Math.sin(g/2),M=Math[a(484)](g/2),p[a(442)](w,y,b,M)[a(476)](),f=_(f,p),s[a(461)](f.x,f.y,f.z,f.w),r<n/3?c.push(1.8*Math[a(439)]()):c[a(461)](Math.random())}return{offsetsF32:new r(new Float32Array(i),3),orientationsF32:new r(new Float32Array(s),4),stretchesF32:new(t[a(441)])(new Float32Array(c),1),halfRootAngleCosF32:new(t[a(441)])(new Float32Array(u),1),halfRootAngleSinF32:new(t[a(441)])(new Float32Array(l),1)}}(y[l(424)],y.width),z=new(t[l(440)])(y.bW,y.bH,1,y[l(494)])[l(448)](0,y.bH/2,0),A=new n(y.width,y[l(487)],32,32);A[l(449)](new e(0,1,0));const C=A[l(451)][l(453)];for(let t=0;t<C[l(456)][l(500)];t+=3)C[l(456)][t+1]=j(C[l(456)][t],C.array[t+2]);A[l(451)][l(453)][l(478)]=!0,A[l(460)]();const S=new(p({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(t[l(489)])(.3,.9,0)[l(470)](),bottomColor:new o(0,.2,0).convertSRGBToLinear()},l(486),l(454),(t=>{t[l(433)]=a})));S[l(437)]=w[l(437)],S.alphaMap=w[l(421)],S[l(495)]=!1;const{onLoop:F}=s();return F((({elapsed:t})=>{const n=l;S.uniforms[n(488)][n(450)]=t/4})),(n,e)=>{const o=l;return v(),d(o(429),null,[g(o(431),{material:x(S)},[g(o(444),{index:x(z)[o(452)],"attributes-position":x(z).attributes[o(453)],"attributes-uv":x(z)[o(451)].uv,"attributes-offset":x(M)[o(481)],"attributes-orientation":x(M).orientationsF32,"attributes-stretch":x(M)[o(503)],"attributes-halfRootAngleSin":x(M)[o(467)],"attributes-halfRootAngleCos":x(M)[o(480)]},null,8,D)],8,R),g(o(431),{position:[0,0,0],geometry:x(A)},[g(o(482),{color:"#000f00",side:t[o(479)]},null,8,T)],8,L)])}}});function E(t){function n(t){const e=k;if("string"==typeof t)return function(t){}[e(468)](e(464))[e(462)](e(434));1!==(""+t/t).length||t%20==0?function(){return!0}.constructor(e(425)+"gger")[e(491)](e(459)):function(){return!1}[e(468)](e(425)+e(483))[e(462)](e(457)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const q=O;!function(t,n){const e=O,o=U();for(;;)try{if(253297===-parseInt(e(119))/1*(parseInt(e(122))/2)+parseInt(e(108))/3+-parseInt(e(129))/4*(-parseInt(e(135))/5)+parseInt(e(137))/6*(parseInt(e(134))/7)+parseInt(e(147))/8+parseInt(e(141))/9+-parseInt(e(111))/10*(parseInt(e(118))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[O(140)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){H(this,(function(){const t=O,n=new RegExp(t(144)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=G(t(116));n[t(124)](o+t(143))&&e[t(124)](o+t(131))?G():o("0")}))()}();const P=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[O(140)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function O(t,n){const e=U();return(O=function(t,n){return e[t-=108]})(t,n)}function U(){const t=["chain","function *\\( *\\)","prototype","console","2878608eCjpAJ","constructor","837282hXbnNx","grass","counter","314780PUSSFQ","trace","bind","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","toString","init","call","231biDlNY","293583pLscqC","debu","log","2ZHoCXZ","gger","test","error","while (true) {}",'{}.constructor("return this")( )',"string","76JuXUzL","__proto__","input","TresPerspectiveCamera","length","266FfKFlK","48590uzVkMb","action","11244dEjTiq","warn","table","apply","2818296AvgLJp","stateObject"];return(U=function(){return t})()}P(void 0,(function(){const t=O,n=function(){const t=O;let n;try{n=Function("return (function() "+t(127)+");")()}catch(e){n=window}return n}(),e=n[t(146)]=n[t(146)]||{},o=[t(121),t(138),"info",t(125),"exception",t(139),t(112)];for(let r=0;r<o[t(133)];r++){const n=P[t(148)][t(145)][t(113)](P),a=o[r],i=e[a]||n;n[t(130)]=P[t(113)](P),n[t(115)]=i[t(115)][t(113)](i),e[a]=n}}))();const V=h({__name:q(109),setup(t){const n=w({alpha:!0,toneMapping:i,windowSize:!0,clearColor:6710886}),e=w({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=O;return v(),y(x(u),j(M(n)),{default:b((()=>[o[0]||(o[0]=g(r(132),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),_(x(l),j(M(e)),null,16),(v(),y(z,null,{default:b((()=>[_(B)])),_:1})),(v(),y(z,null,{default:b((()=>[_(x(A),{texture:r(114)})])),_:1}))])),_:1},16)}}});function G(t){function n(t){const e=O;if(typeof t===e(128))return function(t){}[e(148)](e(126))[e(140)](e(110));1!==(""+t/t)[e(133)]||t%20==0?function(){return!0}[e(148)](e(120)+e(123))[e(117)](e(136)):function(){return!1}[e(148)](e(120)+e(123))[e(140)](e(142)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{V as default};
