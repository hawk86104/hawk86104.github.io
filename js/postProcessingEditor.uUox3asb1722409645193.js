import{p as t,$ as n,N as e,d as o}from"./@tresjs.qmCJ68Vp1722409645193.js";import{a6 as r,T as s,al as a,q as i,bf as c,y as l,cE as u,bV as v,bk as f,j as p}from"./three.6E5muTWJ1722409645193.js";import{P as d}from"./tweakpane.yHWGBmom1722409645193.js";import{d as m,a4 as x,e as g,o as h,f as y,g as I,J as b,j as _,u as S,aj as w,ak as U,al as P,m as D}from"./@vue.9bHx4gg21722409645193.js";import{_ as E}from"./@fesjs.QnrTigdw1722409645193.js";import"./@vueuse.NFOCyQQL1722409645193.js";import"./vue-router.14za1TD_1722409645193.js";import"./lodash-es.nFpJXAf-1722409645193.js";import"./@qlin.yHhFDldE1722409645193.js";import"./pinia.QNLxZzKW1722409645193.js";import"./@floating-ui.BPbuo5Gx1722409645193.js";import"./@juggle.7yjBMqoW1722409645193.js";function M(t,n){const e=z();return(M=function(t,n){return e[t-=404]})(t,n)}!function(t,n){const e=M,o=z();for(;;)try{if(264250===-parseInt(e(445))/1+-parseInt(e(449))/2*(parseInt(e(455))/3)+parseInt(e(451))/4+parseInt(e(438))/5+-parseInt(e(420))/6*(-parseInt(e(450))/7)+parseInt(e(412))/8*(parseInt(e(432))/9)+-parseInt(e(418))/10*(parseInt(e(407))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[M(406)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){A(this,(function(){const t=M,n=new RegExp(t(417)),e=new RegExp(t(439),"i"),o=F(t(448));n.test(o+t(415))&&e[t(444)](o+t(425))?F():o("0")}))()}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();L(void 0,(function(){const t=M;let n;try{n=Function(t(457)+t(443)+");")()}catch(r){n=window}const e=n.console=n[t(463)]||{},o=[t(424),t(411),t(453),t(435),t(433),t(465),t(413)];for(let s=0;s<o[t(461)];s++){const n=L[t(421)][t(464)][t(423)](L),r=o[s],a=e[r]||n;n[t(440)]=L[t(423)](L),n[t(414)]=a[t(414)][t(423)](a),e[r]=n}}))();function C(t,n,e){const o=M;if(typeof t!==o(462)||null===t)return t;const r=Array[o(416)](t)?[]:{};for(const s in t)t[o(428)](s)&&(r[s]=C(t[s])),s==n&&(r[n]=e);return r}function z(){const t=["trace","toString","chain","isArray","function *\\( *\\)","50AUkgPd","string","6cPXrse","constructor","lastIndex","bind","log","input","value","now","hasOwnProperty","onload","index","Vector4","710928VfxlID","exception","onabort","error","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","ShaderMaterial","662835ZMNpRf","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","__proto__","\" couldn't be loaded.","exec",'{}.constructor("return this")( )',"test","117695rxZkPg","Vector3","gger","init","20EzYXLF","2854894GSQFSC","1318172KdXCjy","Matrix3","info","v3v","39222wNPLHI","responseText","return (function() ","WagnerLoadShaderException","action","random","length","object","console","prototype","table","name","call","message","Texture","debu","send",'Shader "',"onerror","apply","1481117IRROcb","Matrix4","Vector2","get","warn","32uobJqM"];return(z=function(){return t})()}function F(t){function n(t){const e=M;if(typeof t===e(419))return function(t){}[e(421)]("while (true) {}")[e(406)]("counter");1!==(""+t/t)[e(461)]||t%20==0?function(){return!0}[e(421)](e(470)+e(447))[e(467)](e(459)):function(){return!1}[e(421)](e(470)+e(447))[e(406)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}function N(t,n){const e=G();return(N=function(t,n){return e[t-=469]})(t,n)}const T=N;!function(t,n){const e=N,o=G();for(;;)try{if(366762===-parseInt(e(566))/1+-parseInt(e(506))/2+parseInt(e(529))/3*(parseInt(e(515))/4)+-parseInt(e(535))/5*(parseInt(e(560))/6)+parseInt(e(500))/7*(parseInt(e(553))/8)+-parseInt(e(518))/9+parseInt(e(526))/10*(parseInt(e(532))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const R=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[N(490)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function G(){const t=["onWindowResize","975501OqPCMr","near","chain","Pass","info","call","pass","startTime","20bTovMQ","string","now","91911chmyJb","quad","WebGLRenderTarget","5133766VOyXHx","ShaderMaterial","write","15ShWpjH","wrapT","material","renderer","PlaneGeometry","camera","action","resolution","return (function() ","CopyPass","width","removePass","render","read","shader","Reset","front","stencilBuffer","9440mKuypF","function *\\( *\\)","loadShadervf","splice","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","height","value","143010nxritq","log","warn","scale","swapBuffers","length","438746NfuEbC","projectionMatrix","settings","set","time","clone","init","input","test","scene","innerWidth","table","far","bind","back","uuid","while (true) {}","setSize","Scene","uniforms","type","texture","useRGBA","LinearFilter","OrthographicCamera","setRenderTarget","minFilter","tInput","debu","apply","stateObject","addPass","magFilter","add","RGBAFormat","makePerspective","RGBFormat","wrapS","makeOrthographic","3766MRzGxG","error","getOfflineTexture","innerHeight","Stack","exception","1410796Arhgfz","passes","console","gger","constructor","copyPass","trace","params","passItems","16VOOuWl","MeshBasicMaterial"];return(G=function(){return t})()}!function(){R(this,(function(){const t=N,n=new RegExp(t(554)),e=new RegExp(t(557),"i"),o=O(t(572));n[t(469)](o+t(520))&&e[t(469)](o+t(573))?O():o("0")}))()}();const j=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();j(void 0,(function(){const t=N,n=function(){const t=N;let n;try{n=Function(t(543)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(508)]=n.console||{},o=[t(561),t(562),t(522),t(501),t(505),t(472),t(512)];for(let r=0;r<o[t(565)];r++){const n=j[t(510)].prototype.bind(j),s=o[r],a=e[s]||n;n.__proto__=j[t(474)](j),n.toString=a.toString[t(474)](a),e[s]=n}}))();class B{constructor(t,n){const e=N;this.width=1,this[e(558)]=1,this[e(568)]=n||{},this[e(483)]=this[e(568)][e(483)]||!1,this[e(538)]=t,this[e(511)]=this.CopyPass(this[e(568)]),this[e(470)]=new(r[e(479)]),this[e(530)]=new i(new(r[e(539)])(1,1),new(r[e(516)])),this[e(470)][e(494)](this[e(530)]),this[e(540)]=new(r[e(485)])(1,1,1,1,-1e4,1e4),this[e(551)]=new(r[e(531)])(1,1,{minFilter:void 0!==this[e(568)].minFilter?this[e(568)][e(487)]:r[e(484)],magFilter:void 0!==this[e(568)][e(493)]?this[e(568)][e(493)]:r[e(484)],wrapS:void 0!==this[e(568)][e(498)]?this[e(568)][e(498)]:c,wrapT:void 0!==this[e(568)].wrapT?this[e(568)][e(536)]:c,format:this[e(483)]?r[e(495)]:r[e(497)],type:void 0!==this[e(568)].type?this.settings[e(481)]:l,stencilBuffer:void 0===this[e(568)][e(552)]||this[e(568)][e(552)]}),this[e(475)]=this[e(551)][e(571)](),this[e(525)]=Date[e(528)](),this[e(507)]={},this[e(504)]={passItems:[],passes:[]}}[T(492)](t,n,e,o){const r=T;this[r(555)](n);const s={shaderName:t,params:e,uuid:o,shader:this.shader};this[r(504)][r(514)].push(s)}[T(546)](t){const n=T;for(let e=this[n(504)][n(514)][n(565)]-1;e>=0;e--)this.Stack[n(514)][e][n(476)]===parseInt(t)&&this[n(504)].passItems[n(556)](e,1);console[n(561)](this.Stack[n(514)])}[T(544)](){const t=T;this.Pass.call(this);return this[t(555)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[T(555)](t){const n=T;return this[n(549)]=function(t,n){const e=M,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,i=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,c={sampler2D:{type:"t",value:()=>new(r[M(469)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[M(409)])},vec3:{type:"v3",value:()=>new(r[M(446)])},vec4:{type:"v4",value:()=>new(r[M(431)])},bvec2:{type:"v2",value:()=>new(r[M(409)])},bvec3:{type:"v3",value:()=>new(r[M(446)])},bvec4:{type:"v4",value:()=>new(r[M(431)])},ivec2:{type:"v2",value:()=>new(r[M(409)])},ivec3:{type:"v3",value:()=>new(r[M(446)])},ivec4:{type:"v4",value:()=>new a},mat2:{type:"v2",value:()=>new(void 0)},mat3:{type:"v3",value:()=>new(r[M(452)])},mat4:{type:"v4",value:()=>new(r[M(408)])}},l={float:{type:"fv",value:()=>[]},vec3:{type:e(454),value:()=>[]}};let u;const v={resolution:{type:"v2",value:new(r[e(409)])(1,1),default:!0},time:{type:"f",value:Date[e(427)](),default:!0},tInput:{type:"t",value:new s,default:!0}};let f,p;for(;null!==(u=o[e(442)](n));)u[e(430)]===o[e(422)]&&o[e(422)]++,f=u[1],p=u[2],v[p]={type:c[f].type,value:c[f][e(426)]()};for(;null!==(u=i[e(442)](n));)u[e(430)]===o[e(422)]&&o[e(422)]++,f=u[1],p=u[2],u[3],v[p]={type:l[f].type,value:l[f][e(426)]()};return new(r[e(437)])({uniforms:v,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}("varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }",t),this[n(549)]}[T(521)](t){const n=T;this.shader=null,this[n(513)]={}}[T(550)](){const t=T;this.read=this.front,this.write=this[t(475)]}[T(517)](t,n){const e=T,o=window[e(471)],r=window[e(503)];t[e(478)](1*o,1*r),n.projectionMatrix[e(496)](70,o/r,n[e(519)],n[e(473)]),this.setSize(o,r);return this[e(502)](o,r,!0)}setSize(t,n){const e=T;this[e(545)]=t,this[e(558)]=n,this.camera[e(567)][e(499)](t/-2,t/2,n/2,n/-2,this[e(540)][e(519)],this[e(540)][e(473)]),this.quad[e(563)].set(t,n,1),this.front[e(478)](t,n),this.back[e(478)](t,n)}[T(502)](t,n,e){const o=T;return new(r[o(531)])(t,n,{minFilter:r[o(484)],magFilter:r[o(484)],format:e?r[o(495)]:u})}render(t,n,e,o){const r=T;this.renderer[r(486)](this[r(534)]),this.renderer[r(547)](t,n),o||this[r(564)]()}[T(564)](){const t=T,n=this[t(534)];this.write=this[t(548)],this[t(548)]=n}[T(524)](){const t=T;for(let n=0;n<this[t(504)].passItems[t(565)];n++){const e=this[t(504)][t(514)][n][t(549)],o=this[t(504)][t(514)][n][t(513)];if(this.renderer[t(486)](this[t(534)]),e instanceof r[t(533)]){this[t(530)][t(537)]=e,this[t(530)][t(537)][t(480)][t(488)][t(559)]=this.read.texture,this[t(530)][t(537)][t(480)][t(542)][t(559)][t(569)](this[t(545)],this[t(558)]),this[t(530)][t(537)][t(480)][t(570)][t(559)]=.001*(Date[t(528)]()-this[t(525)]);for(const n in o)this[t(530)][t(537)][t(480)][n][t(559)]=o[n];this.renderer.render(this.scene,this[t(540)]),this[t(564)]()}}}toScreen(t,n){const e=T;this[e(538)][e(486)](null),this[e(530)][e(537)]=this.copyPass,this.quad[e(537)][e(480)][e(488)][e(559)]=this.read[e(482)],this.quad[e(537)].uniforms[e(542)][e(559)][e(569)](this.width,this.height),this[e(538)][e(547)](this[e(470)],this[e(540)])}}function O(t){function n(t){const e=N;if(typeof t===e(527))return function(t){}[e(510)](e(477))[e(490)]("counter");1!==(""+t/t)[e(565)]||t%20==0?function(){return!0}.constructor(e(489)+e(509))[e(523)](e(541)):function(){return!1}.constructor(e(489)+e(509))[e(490)](e(491)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const H="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}";!function(t,n){const e=X,o=W();for(;;)try{if(507383===-parseInt(e(130))/1+parseInt(e(160))/2*(-parseInt(e(155))/3)+parseInt(e(113))/4+parseInt(e(176))/5+-parseInt(e(144))/6*(parseInt(e(172))/7)+parseInt(e(106))/8*(parseInt(e(182))/9)+-parseInt(e(139))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const V=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[X(181)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){V(this,(function(){const t=X,n=new RegExp("function *\\( *\\)"),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=q(t(159));n[t(116)](o+t(178))&&e.test(o+t(119))?q():o("0")}))()}();const k=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[X(181)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function X(t,n){const e=W();return(X=function(t,n){return e[t-=105]})(t,n)}function W(){const t=["bind","VIGNETTE1Pass","plugins/postProcessing/image/1324.jpg","value","RGBPass","values","castShadow","table","label","text","warn","51226jFcbId","FXAAPass","string","return (function() ","4436950WYewrR","VIGNETTE2Pass","chain","dispose","while (true) {}","apply","2363913fWTyWI","BufferGeometry","24sJfOaS","toScreen","list","onWindowResize","trace","random","receiveShadow","495876RCYstT","BOXBLURPass","CIRCULARPass","test","BoxGeometry","pass","input","后处理类型","addButton","mergeGeometries","keys","SOBELPass","title","debu","Mesh","target","map","317598McqHXd","translate","counter","关闭通道","call","新增通道","addBlade","gger","CGAPass","143170dIFmAO","render","removePass","constructor","toString","102bOfjZM","DENOISEPass","FREICHENPass","addPass","__proto__","add","error","Reset","change","info","移除~","417813tDRXXX","click","length","console","init","12XTrUzH"];return(W=function(){return t})()}k(void 0,(function(){const t=X,n=function(){const t=X;let n;try{n=Function(t(175)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n.console=n[t(158)]||{},o=["log",t(171),t(153),t(150),"exception",t(168),t(110)];for(let r=0;r<o[t(157)];r++){const n=k[t(142)].prototype[t(161)](k),s=o[r],a=e[s]||n;n[t(148)]=k[t(161)](k),n[t(143)]=a.toString[t(161)](a),e[s]=n}}))();function q(t){function n(t){const e=X;if(typeof t===e(174))return function(t){}.constructor(e(180))[e(181)](e(132));1!==(""+t/t)[e(157)]||t%20==0?function(){return!0}.constructor(e(126)+e(137))[e(134)]("action"):function(){return!1}[e(142)](e(126)+e(137)).apply("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const Z=E(m({__name:"postProcessing",async setup(o){const s=X;let a,i;const{camera:c,renderer:l,scene:u,sizes:m}=t();for(var g=new(r[s(105)]),h=[],y=0;y<100;y++){var I=new(r[s(117)])(100,100,100);I[s(131)](1500*Math[s(111)](),1500*Math[s(111)](),1500*Math[s(111)]()),h.push(I)}g=v[s(122)](h);const b=([a,i]=x((()=>e({map:s(163)}))),a=await a,i(),a),_=([a,i]=x((()=>e({map:"plugins/postProcessing/image/1324-normal.jpg"}))),a=await a,i(),a);var S=new f({map:b[s(129)],normalMap:_[s(129)],normalScale:new p(.8,-.8),shininess:100}),w=new(r[s(127)])(g,S);w[s(167)]=!0,w[s(112)]=!0,u.value[s(149)](w);const U=new B(l[s(164)],{useRGBA:!0}),P=new d;let D=null,E=[{text:"InvertPass",value:{InvertPass:H}},{text:s(173),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:"SEPIAPass",value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:"SNOISEPass",value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:s(114),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:s(145),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:s(138),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:_[s(129)]}}},{text:s(124),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:s(165),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:"DOTPass",value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(115),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:"POISSONPass",value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:s(162),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(177),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:s(146),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:"TOONPass",value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],M="InvertPass",A=H,L=null;P[s(136)]({view:s(108),label:s(120),options:E,value:""}).on(s(152),(t=>{D=t.value}));const z=P[s(121)]({title:"新增",label:s(135)});let F=0;z.on(s(156),(t=>{const n=s;M=Object[n(123)](D)[0],A=Object[n(166)](D)[0],L=Object[n(166)](D)[1];let e=F++,o=P.addFolder({title:M});for(const s in L){let t=L[s];o[n(136)]({view:n(170),label:s,parse:t=>String(t),value:t})}o[n(121)]({title:n(154)+e,label:n(133)}).on(n(156),(t=>{const e=n;let o=t.target[e(125)].split("~")[1];U[e(141)](o)})).on(n(156),(()=>{o[n(179)]()}));let r=C(L,t[n(128)][n(169)],t[n(164)]);U[n(147)](M,A,r,e)})),U[s(109)](l.value,c[s(164)]);const{onLoop:N}=n();return N((({delta:t})=>{const n=s;w&&(l[n(164)].autoClearColor=!0,U[n(151)](),w.material=S,U[n(140)](u.value,c[n(164)]),U[n(118)](),U[n(107)](u[n(164)],c[n(164)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),$=et;!function(t,n){const e=et,o=Q();for(;;)try{if(667925===parseInt(e(313))/1*(parseInt(e(318))/2)+parseInt(e(301))/3+-parseInt(e(317))/4+parseInt(e(290))/5*(parseInt(e(295))/6)+parseInt(e(289))/7*(parseInt(e(294))/8)+-parseInt(e(329))/9*(parseInt(e(307))/10)+parseInt(e(299))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const J=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[et(328)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){J(this,(function(){const t=et,n=new RegExp(t(310)),e=new RegExp(t(296),"i"),o=rt(t(292));n.test(o+t(311))&&e.test(o+t(321))?rt():o("0")}))()}();const Y=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[et(328)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function Q(){const t=["34776YgqEAP","TresPerspectiveCamera","action","stateObject","bind","__proto__","10uLJxGM","postProcessingEditor","gger","function *\\( *\\)","chain","constructor","1AHpXME","error","table","toString","4911200IQZZIG","760706rRerBB","warn","prototype","input","manual","#ffffff","call","TresAmbientLight","length","debu","apply","3581073eTzDRg","203EQbREw","5PAwbPr","#000000","init",'{}.constructor("return this")( )',"1816jhjYKO","1954614DLqosr","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","return (function() ","string","17262575luuXHm","counter"];return(Q=function(){return t})()}Y(void 0,(function(){const t=et,n=function(){const t=et;let n;try{n=Function(t(297)+t(293)+");")()}catch(e){n=window}return n}(),e=n.console=n.console||{},o=["log",t(319),"info",t(314),"exception",t(315),"trace"];for(let r=0;r<o[t(326)];r++){const n=Y[t(312)][t(320)][t(305)](Y),s=o[r],a=e[s]||n;n[t(306)]=Y[t(305)](Y),n[t(316)]=a[t(316)][t(305)](a),e[s]=n}}))();const K={ref:"perspectiveCameraRef",position:[600,850,-1500],fov:45,near:.1,far:1e5},tt=b($(325),{color:$(323),intensity:2},null,-1),nt=b("TresDirectionalLight",{position:[100,100,0],intensity:2,color:$(323)},null,-1);function et(t,n){const e=Q();return(et=function(t,n){return e[t-=289]})(t,n)}const ot=m({__name:$(308),setup(t){const e=$,r={clearColor:e(291),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(322)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=g("TresCanvas");return h(),y(i,D(r,{"window-size":""}),{default:I((()=>[b(a(302),K,null,512),_(S(o),w(U(s)),null,16),tt,nt,(h(),y(P,null,{default:I((()=>[_(Z)])),_:1}))])),_:1},16)}}});function rt(t){function n(t){const e=et;if(typeof t===e(298))return function(t){}[e(312)]("while (true) {}")[e(328)](e(300));1!==(""+t/t)[e(326)]||t%20==0?function(){return!0}[e(312)]("debu"+e(309))[e(324)](e(303)):function(){return!1}.constructor(e(327)+e(309))[e(328)](e(304)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{ot as default};
