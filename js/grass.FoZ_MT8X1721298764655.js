import{a6 as t,V as n,K as e,a9 as o}from"./three.0bBjBDi41721298764655.js";import{$ as r,N as a,d as i,x as s}from"./@tresjs.iXEJQd7J1721298764655.js";import"./index.bqP-mlDu1721298764655.js";import{a as c}from"./simplex-noise.MycypUyu1721298764655.js";import{C as l}from"./index.2g5Dz76W1721298764655.js";import{d as u,a4 as f,o as p,D as h,J as m,u as d,r as v,f as g,g as x,j as y,aj as w,ak as b,al as _}from"./@vue.Q1VpS3901721298764655.js";import{_ as z}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.tJ1uF5jO1721298764655.js";import"./tweakpane.yHWGBmom1721298764655.js";import"./@vueuse.hS-CVzal1721298764655.js";import"./lamina.s7g5Hbpd1721298764655.js";import"./glsl-tokenizer.ZFLos1PC1721298764655.js";import"./@amap.x_Go35DX1721298764655.js";import"./glsl-token-descope.uzn2k2IM1721298764655.js";import"./glsl-token-depth.LYrfF1iB1721298764655.js";import"./glsl-token-scope.ROXosGzr1721298764655.js";import"./glsl-token-properties.X2jYf3tK1721298764655.js";import"./glsl-token-assignments.aC65gGIr1721298764655.js";import"./glsl-token-string.BCXfLWyP1721298764655.js";import"./glsl-token-functions._ALfgfbj1721298764655.js";import"./object-hash.eR6rYsIK1721298764655.js";import"./jszip.-g-_Ii-P1721298764655.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.v56XWjGh1721298764655.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.oc3ios8U1721298764655.js";import"./three-stdlib.z4qNuiyK1721298764655.js";import"./@pmndrs.18kFuzzQ1721298764655.js";import"./utils.VzBZaUGW1721298764655.js";const j=C;function M(){const t=["PlaneGeometry","convertSRGBToLinear","log","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","bind","geometry","__proto__","apply","orientationsF32","console","559896XHGDxt","push","DoubleSide","attributes-halfRootAngleCos","width",'{}.constructor("return this")( )',"27qCjrVn","counter","Color","toString","Vector3","warn","value","halfRootAngleSinF32","#000f00","InstancedBufferAttribute","attributes-position","alphaMap","map","test","needsUpdate","while (true) {}","gger","2wRnlaR","550149BlMAoN","halfRootAngleCosF32","normalize","436405NRSWzq","588580dKOgfy","offsetsF32","TresInstancedBufferGeometry","length","TresMeshStandardMaterial","index","lookAt","stateObject","info","prototype","side","TresMesh","string","instances","input","debu","165272OYyhTK","function *\\( *\\)","table","error","array","Vector4","attributes-halfRootAngleSin","trace","translate","6Snfmxz","random","sin","action","time","constructor","return (function() ","cos","293284zpvidw","chain","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","1469531NzyHDH","material","set","attributes","position","attributes-orientation"];return(M=function(){return t})()}!function(t,n){const e=C,o=M();for(;;)try{if(107497===-parseInt(e(543))/1+parseInt(e(522))/2*(parseInt(e(523))/3)+parseInt(e(480))/4+parseInt(e(526))/5*(-parseInt(e(472))/6)+parseInt(e(483))/7+parseInt(e(499))/8+-parseInt(e(505))/9*(parseInt(e(527))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(496)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){A(this,(function(){const t=C,n=new RegExp(t(544)),e=new RegExp(t(492),"i"),o=H("init");n[t(518)](o+t(481))&&e[t(518)](o+t(541))?H():o("0")}))()}();const I=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(496)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function C(t,n){const e=M();return(C=function(t,n){return e[t-=465]})(t,n)}I(void 0,(function(){const t=C,n=function(){const t=C;let n;try{n=Function(t(478)+t(504)+");")()}catch(e){n=window}return n}(),e=n[t(498)]=n[t(498)]||{},o=[t(491),t(510),t(535),t(466),"exception",t(465),t(470)];for(let r=0;r<o[t(530)];r++){const n=I[t(477)][t(536)][t(493)](I),a=o[r],i=e[a]||n;n[t(495)]=I[t(493)](I),n[t(508)]=i[t(508)][t(493)](i),e[a]=n}}))();const S=[j(484)],k=[j(532),j(515),"attributes-uv","attributes-offset",j(488),"attributes-stretch",j(469),j(502)],R=[j(494)],D=[j(537)],F=u({__name:"grass",props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(o){const i=j;let s,u;const v=([s,u]=f((()=>a({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),s=await s,u(),s),g=o,x=c(Math.random);function y(n,e){const o=C,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,a=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,i=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,s=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(468)])(r,a,i,s)}function w(t,n){var e=2*x(t/50,n/50);return e+=4*x(t/100,n/100),e+=.2*x(t/10,n/10)}const b=function(o,r){const a=C,i=[],s=[],c=[],l=[],u=[];let f=new(t[a(468)]),p=new(t[a(468)]);const h=-.25;for(let e=0;e<o;e++){const m=Math[a(473)]()*r-r/2,d=Math.random()*r-r/2,v=w(m,d);i[a(500)](m,v,d);let g=Math.PI-Math[a(473)]()*(2*Math.PI);l.push(Math[a(474)](.5*g)),u[a(500)](Math[a(479)](.5*g));let x=new n(0,1,0),b=x.x*Math[a(474)](g/2),_=x.y*Math[a(474)](g/2),z=x.z*Math.sin(g/2),j=Math.cos(g/2);f[a(485)](b,_,z,j)[a(525)](),g=.5*Math[a(473)]()+h,x=new(t[a(509)])(1,0,0),b=x.x*Math.sin(g/2),_=x.y*Math.sin(g/2),z=x.z*Math[a(474)](g/2),j=Math[a(479)](g/2),p.set(b,_,z,j)[a(525)](),f=y(f,p),g=.5*Math[a(473)]()+h,x=new(t[a(509)])(0,0,1),b=x.x*Math.sin(g/2),_=x.y*Math[a(474)](g/2),z=x.z*Math[a(474)](g/2),j=Math[a(479)](g/2),p.set(b,_,z,j)[a(525)](),f=y(f,p),s.push(f.x,f.y,f.z,f.w),e<o/3?c[a(500)](1.8*Math[a(473)]()):c[a(500)](Math[a(473)]())}return{offsetsF32:new e(new Float32Array(i),3),orientationsF32:new(t[a(514)])(new Float32Array(s),4),stretchesF32:new(t[a(514)])(new Float32Array(c),1),halfRootAngleCosF32:new(t[a(514)])(new Float32Array(u),1),halfRootAngleSinF32:new e(new Float32Array(l),1)}}(g[i(540)],g[i(503)]),_=new(t[i(489)])(g.bW,g.bH,1,g.joints)[i(471)](0,g.bH/2,0),z=new(t[i(489)])(g[i(503)],g[i(503)],32,32);z[i(533)](new(t[i(509)])(0,1,0));const M=z[i(486)].position;for(let t=0;t<M[i(467)][i(530)];t+=3)M[i(467)][t+1]=w(M[i(467)][t],M.array[t+2]);z[i(486)].position[i(519)]=!0,z.computeVertexNormals();const A=new(l({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(t[i(507)])(.3,.9,0)[i(490)](),bottomColor:new(t[i(507)])(0,.2,0)[i(490)]()},"   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }",i(482),(n=>{const e=i;n[e(537)]=t[e(501)]})));A[i(517)]=v[i(517)],A[i(516)]=v[i(516)],A.toneMapped=!1;const{onLoop:I}=r();return I((({elapsed:t})=>{const n=i;A.uniforms[n(476)][n(511)]=t/4})),(n,e)=>{const o=i;return p(),h("TresGroup",null,[m(o(538),{material:d(A)},[m(o(529),{index:d(_)[o(532)],"attributes-position":d(_)[o(486)][o(487)],"attributes-uv":d(_).attributes.uv,"attributes-offset":d(b)[o(528)],"attributes-orientation":d(b)[o(497)],"attributes-stretch":d(b).stretchesF32,"attributes-halfRootAngleSin":d(b)[o(512)],"attributes-halfRootAngleCos":d(b)[o(524)]},null,8,k)],8,S),m(o(538),{position:[0,0,0],geometry:d(z)},[m(o(531),{color:o(513),side:t[o(501)]},null,8,D)],8,R)])}}});function H(t){function n(t){const e=C;if(typeof t===e(539))return function(t){}[e(477)](e(520))[e(496)](e(506));1!==(""+t/t).length||t%20==0?function(){return!0}.constructor("debu"+e(521)).call(e(475)):function(){return!1}.constructor(e(542)+e(521))[e(496)](e(534)),n(++t)}try{if(t)return n;n(0)}catch(e){}}function B(t,n){const e=E();return(B=function(t,n){return e[t-=464]})(t,n)}function E(){const t=["length","2830638UrmBXD","exception","trace","grass","14Wafnkh","debu","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","info","gger","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","6lpVmFz","bind","string","1839784ExSArp","20788770szLHdc","console","chain","13879mqlARS","1349800ikyicV","toString","prototype","__proto__",'{}.constructor("return this")( )',"return (function() ","warn","while (true) {}","test","stateObject","action","log","apply","counter","call","input","3799025RsBwDD","constructor","45meihvK","TresPerspectiveCamera","1161041AfmcVN"];return(E=function(){return t})()}const O=B;!function(t,n){const e=B,o=E();for(;;)try{if(670837===parseInt(e(499))/1*(parseInt(e(486))/2)+-parseInt(e(482))/3+-parseInt(e(500))/4+-parseInt(e(476))/5*(-parseInt(e(492))/6)+parseInt(e(480))/7+parseInt(e(495))/8*(-parseInt(e(478))/9)+parseInt(e(496))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const T=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){T(this,(function(){const t=B,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(491),"i"),o=V("init");n.test(o+t(498))&&e[t(468)](o+t(475))?V():o("0")}))()}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[B(472)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();L(void 0,(function(){const t=B,n=function(){const t=B;let n;try{n=Function(t(465)+t(464)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(497)]||{},o=[t(471),t(466),t(489),"error",t(483),"table",t(484)];for(let r=0;r<o[t(481)];r++){const n=L.constructor[t(502)][t(493)](L),a=o[r],i=e[a]||n;n[t(503)]=L[t(493)](L),n[t(501)]=i[t(501)].bind(i),e[a]=n}}))();const N=m(O(479),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1),P=u({__name:O(485),setup(t){const n=v({alpha:!0,toneMapping:o,windowSize:!0,clearColor:6710886}),e=v({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=B;return p(),g(d(s),w(b(n)),{default:x((()=>[N,y(d(i),w(b(e)),null,16),(p(),g(_,null,{default:x((()=>[y(F)])),_:1})),(p(),g(_,null,{default:x((()=>[y(d(z),{texture:r(488)})])),_:1}))])),_:1},16)}}});function V(t){function n(t){const e=B;if(typeof t===e(494))return function(t){}[e(477)](e(467)).apply(e(473));1!==(""+t/t)[e(481)]||t%20==0?function(){return!0}[e(477)](e(487)+"gger")[e(474)](e(470)):function(){return!1}.constructor("debu"+e(490)).apply(e(469)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{P as default};
