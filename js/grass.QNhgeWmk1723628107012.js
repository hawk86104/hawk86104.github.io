import{a6 as t,al as n,a9 as e}from"./three.LOnTLfxo1723628107012.js";import{$ as o,N as r,d as a,x as i}from"./@tresjs.SUe87xao1723628107012.js";import"./index.2LlJoce31723628107012.js";import{a as s}from"./simplex-noise.MycypUyu1723628107012.js";import{C as c}from"./index.wzkl4CyW1723628107012.js";import{d as l,a4 as u,o as f,D as p,J as h,u as m,r as d,f as v,g,j as x,aj as y,ak as w,al as b}from"./@vue.9bHx4gg21723628107012.js";import{_}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.NSp1NYo71723628107012.js";import"./tweakpane.yHWGBmom1723628107012.js";import"./@vueuse.t-c8gU4-1723628107012.js";import"./lamina.M83FU-O31723628107012.js";import"./glsl-tokenizer.ZmKauzU31723628107012.js";import"./@amap.XsUkMUkF1723628107012.js";import"./glsl-token-descope.Cy6-8P0i1723628107012.js";import"./glsl-token-depth.UdQ61DYQ1723628107012.js";import"./glsl-token-scope.Tqkx1Nfv1723628107012.js";import"./glsl-token-properties.-7vI6tF61723628107012.js";import"./glsl-token-assignments.7f_Z5tCL1723628107012.js";import"./glsl-token-string.Z6_i_sVZ1723628107012.js";import"./glsl-token-functions.0T11p6mD1723628107012.js";import"./object-hash.eRIADBNa1723628107012.js";import"./jszip.TSgBnMkQ1723628107012.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.xznMRv_D1723628107012.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.vCqxvNWx1723628107012.js";import"./three-stdlib.kNzZmNMy1723628107012.js";import"./@pmndrs.m3RZ2qRu1723628107012.js";import"./utils.iGzrL9PO1723628107012.js";const j=M;function M(t,n){const e=D();return(M=function(t,n){return e[t-=438]})(t,n)}!function(t,n){const e=M,o=D();for(;;)try{if(703214===-parseInt(e(457))/1+parseInt(e(504))/2+parseInt(e(459))/3*(-parseInt(e(453))/4)+-parseInt(e(469))/5+-parseInt(e(484))/6+-parseInt(e(501))/7+-parseInt(e(450))/8*(-parseInt(e(511))/9))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){z(this,(function(){const t=M,n=new RegExp(t(500)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=R(t(506));n[t(441)](o+t(462))&&e[t(441)](o+t(458))?R():o("0")}))()}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[M(467)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();A(void 0,(function(){const t=M,n=function(){const t=M;let n;try{n=Function(t(486)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(515)]=n[t(515)]||{},o=[t(449),t(478),"info",t(473),t(499),t(470),t(454)];for(let r=0;r<o[t(465)];r++){const n=A[t(485)][t(502)].bind(A),a=o[r],i=e[a]||n;n[t(497)]=A.bind(A),n[t(491)]=i.toString.bind(i),e[a]=n}}))();const I=[j(440)],C=[j(455),j(510),j(495),j(490),j(471),j(496),j(492),j(482)],k=[j(447)],S=["side"];function D(){const t=["TresInstancedBufferGeometry","attributes-halfRootAngleCos","push","7840236YQmjAW","constructor","return (function() ","stretchesF32","Color","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","attributes-offset","toString","attributes-halfRootAngleSin","attributes","array","attributes-uv","attributes-stretch","__proto__","grass","exception","function *\\( *\\)","5061273NhjmZU","prototype","uniforms","2263396UHLGXb","TresMesh","init","PlaneGeometry","Vector3","gger","attributes-position","18blPnjg","TresMeshStandardMaterial","side","position","console","cos","action","alphaMap","material","test","toneMapped","joints","#000f00","debu","string","geometry","needsUpdate","log","9231016NWUWXV","Vector4","set","2112344WhiSfW","trace","index","while (true) {}","23473MZmwye","input","3rMKylj","InstancedBufferAttribute","random","chain","convertSRGBToLinear","width","length","sin","apply","DoubleSide","774670nOkETv","table","attributes-orientation","orientationsF32","error","offsetsF32","time","counter","normalize","warn","stateObject","translate"];return(D=function(){return t})()}const F=l({__name:j(498),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(e){const a=j;let i,l;const d=([i,l]=u((()=>r({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),i=await i,l(),i),v=e,g=s(Math.random);function x(n,e){const o=M,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,a=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,i=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,s=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(451)])(r,a,i,s)}function y(t,n){var e=2*g(t/50,n/50);return e+=4*g(t/100,n/100),e+=.2*g(t/10,n/10)}const w=function(e,o){const r=M,a=[],i=[],s=[],c=[],l=[];let u=new(t[r(451)]),f=new n;const p=-.25;for(let n=0;n<e;n++){const h=Math[r(461)]()*o-o/2,m=Math[r(461)]()*o-o/2,d=y(h,m);a.push(h,d,m);let v=Math.PI-Math.random()*(2*Math.PI);c.push(Math.sin(.5*v)),l[r(483)](Math.cos(.5*v));let g=new(t[r(508)])(0,1,0),w=g.x*Math[r(466)](v/2),b=g.y*Math[r(466)](v/2),_=g.z*Math[r(466)](v/2),j=Math[r(516)](v/2);u[r(452)](w,b,_,j)[r(477)](),v=.5*Math.random()+p,g=new(t[r(508)])(1,0,0),w=g.x*Math.sin(v/2),b=g.y*Math[r(466)](v/2),_=g.z*Math[r(466)](v/2),j=Math[r(516)](v/2),f[r(452)](w,b,_,j)[r(477)](),u=x(u,f),v=.5*Math.random()+p,g=new(t[r(508)])(0,0,1),w=g.x*Math.sin(v/2),b=g.y*Math[r(466)](v/2),_=g.z*Math[r(466)](v/2),j=Math.cos(v/2),f[r(452)](w,b,_,j).normalize(),u=x(u,f),i.push(u.x,u.y,u.z,u.w),n<e/3?s.push(1.8*Math[r(461)]()):s[r(483)](Math.random())}return{offsetsF32:new(t[r(460)])(new Float32Array(a),3),orientationsF32:new(t[r(460)])(new Float32Array(i),4),stretchesF32:new(t[r(460)])(new Float32Array(s),1),halfRootAngleCosF32:new(t[r(460)])(new Float32Array(l),1),halfRootAngleSinF32:new(t[r(460)])(new Float32Array(c),1)}}(v.instances,v[a(464)]),b=new(t[a(507)])(v.bW,v.bH,1,v[a(443)])[a(480)](0,v.bH/2,0),_=new(t[a(507)])(v[a(464)],v[a(464)],32,32);_.lookAt(new(t[a(508)])(0,1,0));const z=_[a(493)][a(514)];for(let t=0;t<z[a(494)][a(465)];t+=3)z.array[t+1]=y(z[a(494)][t],z[a(494)][t+2]);_.attributes[a(514)][a(448)]=!0,_.computeVertexNormals();const A=new(c({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(t[a(488)])(.3,.9,0)[a(463)](),bottomColor:new(t[a(488)])(0,.2,0)[a(463)]()},a(489),"\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }",(n=>{const e=a;n[e(513)]=t[e(468)]})));A.map=d.map,A[a(439)]=d[a(439)],A[a(442)]=!1;const{onLoop:D}=o();return D((({elapsed:t})=>{const n=a;A[n(503)][n(475)].value=t/4})),(n,e)=>{const o=a;return f(),p("TresGroup",null,[h(o(505),{material:m(A)},[h(o(481),{index:m(b)[o(455)],"attributes-position":m(b)[o(493)][o(514)],"attributes-uv":m(b)[o(493)].uv,"attributes-offset":m(w)[o(474)],"attributes-orientation":m(w)[o(472)],"attributes-stretch":m(w)[o(487)],"attributes-halfRootAngleSin":m(w).halfRootAngleSinF32,"attributes-halfRootAngleCos":m(w).halfRootAngleCosF32},null,8,C)],8,I),h(o(505),{position:[0,0,0],geometry:m(_)},[h(o(512),{color:o(444),side:t[o(468)]},null,8,S)],8,k)])}}});function R(t){function n(t){const e=M;if(typeof t===e(446))return function(t){}[e(485)](e(456))[e(467)](e(476));1!==(""+t/t)[e(465)]||t%20==0?function(){return!0}[e(485)](e(445)+e(509)).call(e(438)):function(){return!1}[e(485)](e(445)+e(509))[e(467)](e(479)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const E=H;!function(t,n){const e=H,o=P();for(;;)try{if(739713===-parseInt(e(398))/1+parseInt(e(383))/2*(parseInt(e(410))/3)+-parseInt(e(384))/4*(-parseInt(e(395))/5)+parseInt(e(397))/6+parseInt(e(407))/7*(-parseInt(e(389))/8)+parseInt(e(391))/9+parseInt(e(404))/10*(parseInt(e(416))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[H(392)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){O(this,(function(){const t=H,n=new RegExp(t(394)),e=new RegExp(t(385),"i"),o=B(t(402));n[t(390)](o+t(413))&&e[t(390)](o+"input")?B():o("0")}))()}();const T=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[H(392)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();T(void 0,(function(){const t=H,n=function(){const t=H;let n;try{n=Function(t(401)+t(399)+");")()}catch(e){n=window}return n}(),e=n[t(386)]=n[t(386)]||{},o=[t(382),t(417),"info",t(405),"exception",t(400),t(381)];for(let r=0;r<o[t(411)];r++){const n=T[t(414)][t(408)][t(396)](T),a=o[r],i=e[a]||n;n[t(388)]=T[t(396)](T),n[t(409)]=i[t(409)][t(396)](i),e[a]=n}}))();const L=h(E(380),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1);function H(t,n){const e=P();return(H=function(t,n){return e[t-=380]})(t,n)}function P(){const t=["test","6906915YunKEI","apply","debu","function *\\( *\\)","65EDLZny","bind","1316946ZZocNu","745105Sbugcm",'{}.constructor("return this")( )',"table","return (function() ","init","stateObject","7583910KJAqKZ","error","counter","6678inoUKO","prototype","toString","1698yJHLOT","length","while (true) {}","chain","constructor","action","11xWUlhE","warn","gger","TresPerspectiveCamera","trace","log","1776zBqIlY","86916DJtYnK","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","console","call","__proto__","8768lojErd"];return(P=function(){return t})()}const U=l({__name:"grass",setup(t){const n=d({alpha:!0,toneMapping:e,windowSize:!0,clearColor:6710886}),o=d({enableDamping:!0,autoRotate:!1});return(t,e)=>(f(),v(m(i),y(w(n)),{default:g((()=>[L,x(m(a),y(w(o)),null,16),(f(),v(b,null,{default:g((()=>[x(F)])),_:1})),(f(),v(b,null,{default:g((()=>[x(m(_),{texture:"https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr"})])),_:1}))])),_:1},16))}});function B(t){function n(t){const e=H;if("string"==typeof t)return function(t){}.constructor(e(412))[e(392)](e(406));1!==(""+t/t).length||t%20==0?function(){return!0}[e(414)](e(393)+e(418))[e(387)](e(415)):function(){return!1}[e(414)](e(393)+e(418)).apply(e(403)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{U as default};
