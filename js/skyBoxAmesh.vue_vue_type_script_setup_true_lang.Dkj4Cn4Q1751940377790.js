import{b as t}from"./@tresjs.P1mAtqbp1751940377790.js";import{d as e,a3 as a,G as r,o as s,I as n,ak as i,al as o}from"./@vue.Mugdq9o81751940377790.js";import{b6 as m,r as l,a4 as p}from"./three.hm_8tMpN1751940377790.js";const v=["args"],u=e({__name:"skyBoxAmesh",props:{texture:{},size:{default:1e3}},async setup(e){let u,c;const d=e,{map:g}=([u,c]=a((()=>t({map:d.texture}))),u=await u,c(),u);g.wrapS=g.wrapT=m,g.generateMipmaps=!1,g.magFilter=l,g.minFilter=l;const x={uniforms:{uSkybox:{type:"t",value:g}},side:p,vertexShader:"\n\t\tvarying vec3 vFragPos;\n\n\t\tvoid main() {\n\t\t\t\tvFragPos = position.xyz;\n\t\t\t\tvec4 viewSpace = vec4(mat3(modelViewMatrix) * position, 0.0);\n\t\t\t\tviewSpace.w = 1.0;\n\t\t\t\tgl_Position = projectionMatrix * viewSpace;    \n\t\t}",fragmentShader:"\n\t\tuniform sampler2D uSkybox;\n\t\tvarying vec3 vFragPos;\n\t\tconst float PI = 3.14159265359;\n\t\tvoid main() {\n\t\t\t\tvec3 dir = normalize(vFragPos);\n\t\t\t\tfloat v = (asin(dir.y) + PI * 0.5) / (PI); \n\t\t\t\tfloat u = (atan(dir.x, dir.z) + PI) / (PI * 2.0);\n\t\t\t\tgl_FragColor = texture2D(uSkybox, vec2(u, v));\n\t\t}",depthWrite:!1};return(t,e)=>(s(),r("TresMesh",null,[n("TresBoxGeometry",{args:[d.size,d.size,d.size]},null,8,v),n("TresShaderMaterial",i(o(x)),null,16)]))}});export{u as _};
