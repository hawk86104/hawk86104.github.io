import{m as t,e as n,b as e,U as o}from"./@tresjs.KsuCtVXf1731055558423.js";import{_ as r,V as s,k as a,cO as i,M as c,$ as l,n as u,aW as v,aD as f,bY as p,s as m}from"./three.3b9CEYeV1731055558423.js";import{P as d}from"./tweakpane.yHWGBmom1731055558423.js";import{d as g,a6 as x,e as h,o as y,f as I,g as b,J as _,j as S,u as U,aj as w,ak as P,al as D,m as E}from"./@vue.u2cBPEWn1731055558423.js";import{_ as A}from"./@fesjs.yotB665w1731055558423.js";import"./@vueuse.GLWi_e1b1731055558423.js";import"./vue-router.IFFB8cPj1731055558423.js";import"./lodash-es.guXTxyfJ1731055558423.js";import"./@qlin.yHhFDldE1731055558423.js";import"./pinia.c8BQk2fm1731055558423.js";import"./vue-demi.C4xddsk91731055558423.js";import"./@floating-ui.BPbuo5Gx1731055558423.js";import"./@juggle.7yjBMqoW1731055558423.js";!function(t,n){const e=C,o=F();for(;;)try{if(522102===parseInt(e(218))/1+parseInt(e(205))/2+parseInt(e(248))/3*(-parseInt(e(234))/4)+parseInt(e(216))/5*(parseInt(e(196))/6)+parseInt(e(207))/7*(parseInt(e(201))/8)+-parseInt(e(208))/9+parseInt(e(215))/10*(-parseInt(e(223))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const M=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(192)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){M(this,(function(){const t=C,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(229),"i"),o=T("init");n[t(235)](o+t(190))&&e[t(235)](o+t(237))?T():o("0")}))()}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(192)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function C(t,n){const e=F();return(C=function(t,n){return e[t-=187]})(t,n)}L(void 0,(function(){const t=C;let n;try{n=Function(t(200)+t(187)+");")()}catch(r){n=window}const e=n[t(210)]=n[t(210)]||{},o=["log","warn",t(219),t(193),t(230),t(221),t(194)];for(let s=0;s<o[t(222)];s++){const n=L.constructor[t(245)][t(211)](L),r=o[s],a=e[r]||n;n[t(213)]=L.bind(L),n[t(209)]=a.toString[t(211)](a),e[r]=n}}))();function z(t,n,e){const o=C;if(typeof t!==o(189)||null===t)return t;const r=Array.isArray(t)?[]:{};for(const s in t)t[o(246)](s)&&(r[s]=z(t[s])),s==n&&(r[n]=e);return r}function F(){const t=["input","WagnerLoadShaderException",'" load was aborted.',"type","\" couldn't be loaded.","replace","onabort","v3v","prototype","hasOwnProperty","Vector2","104469iEmYTu",'{}.constructor("return this")( )',"onload","object","chain","responseText","apply","error","trace","Vector4","36QKnhEv","Vector3","call",'Shader "',"return (function() ","8GsRScL","Matrix3","debu","send","779832novVPB","action","5374299qgSbeK","889524JWWGZi","toString","console","bind","stateObject","__proto__","message","130efUiqv","803845abWXaB","constructor","285069AnramV","info","open","table","length","1010669MeYzep","lastIndex","while (true) {}","onerror","name","value","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","exception","now","Texture","ShaderMaterial","68RZrZMZ","test","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx"];return(F=function(){return t})()}function T(t){function n(t){const e=C;if("string"==typeof t)return function(t){}[e(217)](e(225))[e(192)]("counter");1!==(""+t/t)[e(222)]||t%20==0?function(){return!0}[e(217)](e(203)+"gger")[e(198)](e(206)):function(){return!1}[e(217)](e(203)+"gger")[e(192)](e(212)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const N=R;!function(t,n){const e=R,o=j();for(;;)try{if(602898===parseInt(e(447))/1+parseInt(e(525))/2*(parseInt(e(472))/3)+-parseInt(e(510))/4+-parseInt(e(453))/5*(parseInt(e(480))/6)+parseInt(e(497))/7+parseInt(e(543))/8*(parseInt(e(514))/9)+parseInt(e(445))/10*(-parseInt(e(502))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(523)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function R(t,n){const e=j();return(R=function(t,n){return e[t-=438]})(t,n)}!function(){G(this,(function(){const t=R,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(501),"i"),o=O("init");n[t(475)](o+t(522))&&e[t(475)](o+t(478))?O():o("0")}))()}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(523)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function j(){const t=["camera","back","loadShadervf","Stack","uniforms","makeOrthographic","prototype","120wAtRFW","Mesh","946178wkhjTB","time","innerHeight","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","Scene","trace","420QGEuoX","now","near","magFilter","width","useRGBA","setSize","string","onWindowResize","LinearFilter","CopyPass","uuid","makePerspective","ClampToEdgeWrapping","set","while (true) {}","settings","startTime","scale","57ZnXBaY",'{}.constructor("return this")( )',"innerWidth","test","copyPass","quad","input","exception","38262CDqweb","push","tInput","height","texture","action","bind","table","log","return (function() ","clone","debu","wrapT","info","passes","addPass","projectionMatrix","3880254elZPTB","minFilter","pass","shader","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","676423DFOIZc","render","wrapS","write","WebGLRenderTarget","__proto__","OrthographicCamera","PlaneGeometry","2424912hPeHzD","Reset","getOfflineTexture","material","1726803JeWgUR","ShaderMaterial","far","RGBFormat","length","swapBuffers","toScreen","type","chain","apply","console","83194svhyRG","stencilBuffer","splice","read","constructor","gger","value","passItems","renderer","setRenderTarget","resolution","scene","error","RGBAFormat","front","call","UnsignedByteType","toString","8KYGTle"];return(j=function(){return t})()}B(void 0,(function(){const t=R;let n;try{n=Function(t(489)+t(473)+");")()}catch(r){n=window}const e=n[t(524)]=n.console||{},o=[t(488),"warn",t(493),t(537),t(479),t(487),t(452)];for(let s=0;s<o[t(518)];s++){const n=B[t(529)][t(444)][t(486)](B),r=o[s],a=e[r]||n;n[t(507)]=B.bind(B),n[t(542)]=a[t(542)][t(486)](a),e[r]=n}}))();class V{constructor(t,n){const e=R;this[e(457)]=1,this.height=1,this[e(469)]=n||{},this[e(458)]=this.settings.useRGBA||!1,this[e(533)]=t,this[e(476)]=this.CopyPass(this[e(469)]),this[e(536)]=new(r[e(451)]),this[e(477)]=new(r[e(446)])(new(r[e(509)])(1,1),new l),this[e(536)].add(this[e(477)]),this[e(438)]=new(r[e(508)])(1,1,1,1,-1e4,1e4),this.front=new(r[e(506)])(1,1,{minFilter:void 0!==this.settings[e(498)]?this.settings[e(498)]:u,magFilter:void 0!==this.settings.magFilter?this.settings[e(456)]:r[e(462)],wrapS:void 0!==this[e(469)][e(504)]?this[e(469)][e(504)]:r[e(466)],wrapT:void 0!==this[e(469)][e(492)]?this[e(469)][e(492)]:r[e(466)],format:this[e(458)]?r[e(538)]:r[e(517)],type:void 0!==this[e(469)][e(521)]?this.settings[e(521)]:r[e(541)],stencilBuffer:void 0===this[e(469)][e(526)]||this[e(469)][e(526)]}),this.back=this[e(539)][e(490)](),this[e(470)]=Date.now(),this[e(494)]={},this[e(441)]={passItems:[],passes:[]}}[N(495)](t,n,e,o){const r=N;this[r(440)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(500)]};this[r(441)][r(532)][r(481)](s)}removePass(t){const n=N;for(let e=this[n(441)][n(532)][n(518)]-1;e>=0;e--)this.Stack[n(532)][e][n(464)]===parseInt(t)&&this[n(441)].passItems[n(527)](e,1);console.log(this[n(441)][n(532)])}[N(463)](){const t=N;this.Pass[t(540)](this);return this[t(440)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[N(440)](t){const n=N,e=n(450);return this[n(500)]=function(t,n){const e=C,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,l=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,u={sampler2D:{type:"t",value:()=>new(r[C(232)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[C(247)])},vec3:{type:"v3",value:()=>new s},vec4:{type:"v4",value:()=>new(r[C(195)])},bvec2:{type:"v2",value:()=>new a},bvec3:{type:"v3",value:()=>new(r[C(197)])},bvec4:{type:"v4",value:()=>new(r[C(195)])},ivec2:{type:"v2",value:()=>new(r[C(247)])},ivec3:{type:"v3",value:()=>new(r[C(197)])},ivec4:{type:"v4",value:()=>new(r[C(195)])},mat2:{type:"v2",value:()=>new i},mat3:{type:"v3",value:()=>new(r[C(202)])},mat4:{type:"v4",value:()=>new c}},v={float:{type:"fv",value:()=>[]},vec3:{type:e(244),value:()=>[]}};let f;const p={resolution:{type:"v2",value:new(r[e(247)])(1,1),default:!0},time:{type:"f",value:Date[e(231)](),default:!0},tInput:{type:"t",value:new(r[e(232)]),default:!0}};let m,d;for(;null!==(f=o.exec(n));)f.index===o[e(224)]&&o[e(224)]++,m=f[1],d=f[2],p[d]={type:u[m][e(240)],value:u[m][e(228)]()};for(;null!==(f=l.exec(n));)f.index===o[e(224)]&&o[e(224)]++,m=f[1],d=f[2],f[3],p[d]={type:v[m][e(240)],value:v[m].value()};return new(r[e(233)])({uniforms:p,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(500)]}Pass(t){this[N(500)]=null,this.params={}}[N(511)](){const t=N;this[t(528)]=this[t(539)],this[t(505)]=this.back}[N(461)](t,n){const e=N,o=window[e(474)],r=window[e(449)];t[e(459)](1*o,1*r),n.projectionMatrix[e(465)](70,o/r,n[e(455)],n[e(516)]),this.setSize(o,r);return this[e(512)](o,r,!0)}[N(459)](t,n){const e=N;this.width=t,this.height=n,this.camera[e(496)][e(443)](t/-2,t/2,n/2,n/-2,this[e(438)][e(455)],this.camera[e(516)]),this[e(477)][e(471)][e(467)](t,n,1),this[e(539)][e(459)](t,n),this[e(439)][e(459)](t,n)}[N(512)](t,n,e){const o=N;return new(r[o(506)])(t,n,{minFilter:u,magFilter:u,format:e?v:r[o(517)]})}[N(503)](t,n,e,o){const r=N;this.renderer[r(534)](this[r(505)]),this.renderer[r(503)](t,n),o||this[r(519)]()}[N(519)](){const t=N,n=this[t(505)];this.write=this[t(528)],this[t(528)]=n}[N(499)](){const t=N;for(let n=0;n<this[t(441)].passItems[t(518)];n++){const e=this[t(441)].passItems[n].shader,o=this[t(441)][t(532)][n].params;if(this[t(533)][t(534)](this[t(505)]),e instanceof r[t(515)]){this[t(477)][t(513)]=e,this.quad.material.uniforms[t(482)][t(531)]=this.read[t(484)],this.quad.material.uniforms.resolution[t(531)][t(467)](this[t(457)],this[t(483)]),this[t(477)][t(513)][t(442)][t(448)].value=.001*(Date[t(454)]()-this.startTime);for(const n in o)this[t(477)][t(513)][t(442)][n][t(531)]=o[n];this[t(533)][t(503)](this[t(536)],this.camera),this[t(519)]()}}}[N(520)](t,n){const e=N;this[e(533)][e(534)](null),this.quad.material=this.copyPass,this[e(477)][e(513)][e(442)][e(482)][e(531)]=this[e(528)][e(484)],this.quad.material[e(442)][e(535)][e(531)][e(467)](this.width,this[e(483)]),this[e(533)][e(503)](this[e(536)],this[e(438)])}}function O(t){function n(t){const e=R;if(typeof t===e(460))return function(t){}[e(529)](e(468))[e(523)]("counter");1!==(""+t/t)[e(518)]||t%20==0?function(){return!0}.constructor(e(491)+e(530))[e(540)](e(485)):function(){return!1}[e(529)](e(491)+e(530))[e(523)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const H="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}";!function(t,n){const e=q,o=X();for(;;)try{if(800004===-parseInt(e(343))/1+-parseInt(e(344))/2+parseInt(e(355))/3*(-parseInt(e(393))/4)+parseInt(e(372))/5*(parseInt(e(380))/6)+-parseInt(e(339))/7+parseInt(e(403))/8+parseInt(e(371))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const k=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(379)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){k(this,(function(){const t=q,n=new RegExp(t(386)),e=new RegExp(t(418),"i"),o=Z("init");n[t(364)](o+"chain")&&e[t(364)](o+t(387))?Z():o("0")}))()}();const W=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function q(t,n){const e=X();return(q=function(t,n){return e[t-=336]})(t,n)}function X(){const t=["toScreen","SEPIAPass","render","return (function() ","21231NqLqUw","length","addPass","change","log","RGBPass","while (true) {}","target","castShadow","test","autoClearColor","stateObject","InvertPass","gger","info","values","20507103XElvll","14005rMsHgI","warn","addButton","click","pass","map","VIGNETTE1Pass","apply","2406YJqxzT","value","title","VIGNETTE2Pass","mergeGeometries","removePass","function *\\( *\\)","input","MeshPhongMaterial","bind","action","后处理类型","addBlade","548Ibutzn","CGAPass","__proto__","error","BOXBLURPass","add","text","trace","random","plugins/postProcessing/image/1324.jpg","8806152jCfMcl","SOBELPass","POISSONPass","TOONPass","CIRCULARPass","toString","SNOISEPass","BufferGeometry","DOTPass","label","push","FREICHENPass","constructor","Reset","console","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","onWindowResize","translate","exception","5598131qeVdEP","string","material","table","884063gfkZTx","2098376hjrTrg","新增通道","receiveShadow","call","FXAAPass","counter","DENOISEPass"];return(X=function(){return t})()}W(void 0,(function(){const t=q;let n;try{n=Function(t(354)+'{}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(417)]=n.console||{},o=[t(359),t(373),t(369),t(396),t(338),t(342),t(400)];for(let s=0;s<o[t(356)];s++){const n=W.constructor.prototype[t(389)](W),r=o[s],a=e[r]||n;n[t(395)]=W[t(389)](W),n[t(408)]=a[t(408)].bind(a),e[r]=n}}))();function Z(t){function n(t){const e=q;if(typeof t===e(340))return function(t){}[e(415)](e(361)).apply(e(349));1!==(""+t/t)[e(356)]||t%20==0?function(){return!0}.constructor("debu"+e(368))[e(347)](e(390)):function(){return!1}[e(415)]("debu"+e(368))[e(379)](e(366)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const $=A(g({__name:"postProcessing",async setup(o){const s=q;let i,c;const{camera:l,renderer:u,scene:v,sizes:g}=t();for(var h=new(r[s(410)]),y=[],I=0;I<100;I++){var b=new f(100,100,100);b[s(337)](1500*Math[s(401)](),1500*Math[s(401)](),1500*Math.random()),y[s(413)](b)}h=p[s(384)](y);const _=([i,c]=x((()=>e({map:s(402)}))),i=await i,c(),i),S=([i,c]=x((()=>e({map:"plugins/postProcessing/image/1324-normal.jpg"}))),i=await i,c(),i);var U=new(r[s(388)])({map:_[s(377)],normalMap:S[s(377)],normalScale:new a(.8,-.8),shininess:100}),w=new m(h,U);w[s(363)]=!0,w[s(346)]=!0,v[s(381)][s(398)](w);const P=new V(u[s(381)],{useRGBA:!0}),D=new d;let E=null,A=[{text:"InvertPass",value:{InvertPass:H}},{text:s(348),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:s(352),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:s(409),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:s(397),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:s(350),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:s(394),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:S[s(377)]}}},{text:s(404),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:s(360),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:s(411),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(407),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:s(405),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:s(378),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(383),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:s(414),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:s(406),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],M=s(367),L=H,C=null;D[s(392)]({view:"list",label:s(391),options:A,value:""}).on(s(358),(t=>{E=t.value}));const F=D[s(374)]({title:"新增",label:s(345)});let T=0;F.on("click",(t=>{const n=s;M=Object.keys(E)[0],L=Object.values(E)[0],C=Object[n(370)](E)[1];let e=T++,o=D.addFolder({title:M});for(const s in C){let t=C[s];o[n(392)]({view:n(399),label:s,parse:t=>String(t),value:t})}o[n(374)]({title:"移除~"+e,label:"关闭通道"}).on(n(375),(t=>{const e=n;let o=t[e(362)][e(382)].split("~")[1];P[e(385)](o)})).on(n(375),(()=>{o.dispose()}));let r=z(C,t[n(362)][n(412)],t.value);P[n(357)](M,L,r,e)})),P[s(336)](u[s(381)],l[s(381)]);const{onLoop:N}=n();return N((({delta:t})=>{const n=s;w&&(u[n(381)][n(365)]=!0,P[n(416)](),w[n(341)]=U,P[n(353)](v[n(381)],l[n(381)]),P[n(376)](),P[n(351)](v.value,l[n(381)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]);function Y(t,n){const e=Q();return(Y=function(t,n){return e[t-=361]})(t,n)}const J=Y;!function(t,n){const e=Y,o=Q();for(;;)try{if(674800===-parseInt(e(376))/1+parseInt(e(375))/2+-parseInt(e(383))/3*(parseInt(e(394))/4)+-parseInt(e(381))/5+-parseInt(e(385))/6+parseInt(e(382))/7+parseInt(e(374))/8*(-parseInt(e(391))/9))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const K=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Y(378)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function Q(){const t=["__proto__","input","4738743IYJISA",'{}.constructor("return this")( )',"TresDirectionalLight","4684vGrHhe","info","TresCanvas","init","stateObject","return (function() ","bind","while (true) {}","TresAmbientLight","gger","call","trace","table","counter","#000000","prototype","function *\\( *\\)","console","#ffffff","postProcessingEditor","test","log","length","8LBTmzy","2526444uIfLhD","94003JcBsgH","action","apply","exception","TresPerspectiveCamera","1875000vtLSae","5285196CTntdM","69EZqhaU","toString","1925922DOghEG","constructor","error","debu"];return(Q=function(){return t})()}!function(){K(this,(function(){const t=Y,n=new RegExp(t(367)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=ot(t(397));n[t(371)](o+"chain")&&e[t(371)](o+t(390))?ot():o("0")}))()}();const tt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Y(378)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();tt(void 0,(function(){const t=Y;let n;try{n=Function(t(399)+t(392)+");")()}catch(r){n=window}const e=n[t(368)]=n[t(368)]||{},o=[t(372),"warn",t(395),t(387),t(379),t(363),t(362)];for(let s=0;s<o[t(373)];s++){const n=tt[t(386)][t(366)][t(400)](tt),r=o[s],a=e[r]||n;n[t(389)]=tt.bind(tt),n[t(384)]=a[t(384)][t(400)](a),e[r]=n}}))();const nt={ref:"perspectiveCameraRef",position:[600,850,-1500],fov:45,near:.1,far:1e5},et=g({__name:J(370),setup(t){const e=J,r={clearColor:e(365),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:"manual"},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=h(a(396));return y(),I(i,E(r,{"window-size":""}),{default:b((()=>[_(a(380),nt,null,512),S(U(o),w(P(s)),null,16),n[0]||(n[0]=_(a(402),{color:a(369),intensity:2},null,-1)),n[1]||(n[1]=_(a(393),{position:[100,100,0],intensity:2,color:"#ffffff"},null,-1)),(y(),I(D,null,{default:b((()=>[S($)])),_:1}))])),_:1},16)}}});function ot(t){function n(t){const e=Y;if("string"==typeof t)return function(t){}.constructor(e(401))[e(378)](e(364));1!==(""+t/t).length||t%20==0?function(){return!0}[e(386)](e(388)+e(403))[e(361)](e(377)):function(){return!1}[e(386)](e(388)+e(403)).apply(e(398)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{et as default};
