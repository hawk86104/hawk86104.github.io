import{m as t,e as n,b as e,U as o}from"./@tresjs.0qL_P2CE1735517803200.js";import{k as r,_ as a,V as s,as as i,M as c,s as l,O as u,W as v,b6 as f,n as p,aF as d,c2 as m}from"./three.-uH5I3Xp1735517803200.js";import{P as g}from"./tweakpane.yHWGBmom1735517803200.js";import{d as x,a6 as h,e as y,o as I,f as b,g as _,J as S,j as U,u as w,aj as P,ak as D,al as E,m as M}from"./@vue.-THQH3GC1735517803200.js";import{_ as A}from"./@fesjs.2Oz5LDgh1735517803200.js";import"./@vueuse.oT9wchAS1735517803200.js";import"./vue-router.alj9m51K1735517803200.js";import"./lodash-es.kYt-_xTG1735517803200.js";import"./@qlin.yHhFDldE1735517803200.js";import"./pinia.7wRRlR_11735517803200.js";import"./vue-demi.C4xddsk91735517803200.js";import"./@floating-ui.BPbuo5Gx1735517803200.js";import"./@juggle.7yjBMqoW1735517803200.js";function L(){const t=["v3v",'Shader "',"length","info","console","replace","constructor","349348lifdAM","log","1224290oQcWcg","counter","5958JdJdBP","ShaderMaterial","responseText","message","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","Vector4","1044SClIhk","error","debu","exec","get","prototype","value",'{}.constructor("return this")( )',"stateObject","apply","Matrix2","call","name","5LINQYT","function *\\( *\\)","action","Vector2","1703304RPtrRI",'" load was aborted.',"toString","gger","input","random","return (function() ","onabort","\" couldn't be loaded.","now","type","exception","init","open","lastIndex","36OyXLNU","trace","2897034KXUMfT","Matrix3","warn","WagnerLoadShaderException","send","index","test","__proto__","Texture","bind","16105Crtpst","onload","string","47062mdgUti"];return(L=function(){return t})()}!function(t,n){const e=F,o=L();for(;;)try{if(349059===-parseInt(e(360))/1*(parseInt(e(394))/2)+-parseInt(e(341))/3+-parseInt(e(337))/4+parseInt(e(391))/5*(-parseInt(e(347))/6)+parseInt(e(381))/7+parseInt(e(364))/8+parseInt(e(379))/9*(parseInt(e(339))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[F(356)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){C(this,(function(){const t=F,n=new RegExp(t(361)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=T(t(376));n.test(o+"chain")&&e[t(387)](o+t(368))?T():o("0")}))()}();const z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[F(356)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function F(t,n){const e=L();return(F=function(t,n){return e[t-=333]})(t,n)}z(void 0,(function(){const t=F;let n;try{n=Function(t(370)+t(354)+");")()}catch(r){n=window}const e=n[t(334)]=n[t(334)]||{},o=[t(338),t(383),t(333),t(348),t(375),"table",t(380)];for(let a=0;a<o[t(397)];a++){const n=z[t(336)][t(352)][t(390)](z),r=o[a],s=e[r]||n;n[t(388)]=z[t(390)](z),n[t(366)]=s[t(366)][t(390)](s),e[r]=n}}))();function N(t,n,e){if("object"!=typeof t||null===t)return t;const o=Array.isArray(t)?[]:{};for(const r in t)t.hasOwnProperty(r)&&(o[r]=N(t[r])),r==n&&(o[n]=e);return o}function T(t){function n(t){const e=F;if(typeof t===e(393))return function(t){}.constructor("while (true) {}")[e(356)](e(340));1!==(""+t/t)[e(397)]||t%20==0?function(){return!0}[e(336)]("debu"+e(367))[e(358)](e(362)):function(){return!1}[e(336)](e(349)+e(367))[e(356)](e(355)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const R=j;!function(t,n){const e=j,o=H();for(;;)try{if(175567===parseInt(e(433))/1+parseInt(e(425))/2+parseInt(e(361))/3*(parseInt(e(460))/4)+parseInt(e(453))/5+parseInt(e(370))/6*(-parseInt(e(438))/7)+-parseInt(e(459))/8+parseInt(e(412))/9*(-parseInt(e(401))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[j(431)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){B(this,(function(){const t=j,n=new RegExp(t(439)),e=new RegExp(t(445),"i"),o=O(t(426));n[t(451)](o+"chain")&&e[t(451)](o+t(432))?O():o("0")}))()}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function j(t,n){const e=H();return(j=function(t,n){return e[t-=359]})(t,n)}G(void 0,(function(){const t=j,n=function(){const t=j;let n;try{n=Function(t(359)+t(380)+");")()}catch(e){n=window}return n}(),e=n[t(391)]=n.console||{},o=[t(393),"warn",t(436),t(369),t(406),t(375),t(390)];for(let r=0;r<o[t(449)];r++){const n=G[t(398)][t(440)].bind(G),a=o[r],s=e[a]||n;n.__proto__=G[t(463)](G),n[t(454)]=s[t(454)].bind(s),e[a]=n}}))();class V{constructor(t,n){const e=j;this.width=1,this[e(407)]=1,this[e(428)]=n||{},this[e(402)]=this.settings.useRGBA||!1,this[e(372)]=t,this.copyPass=this[e(399)](this[e(428)]),this[e(420)]=new(a[e(448)]),this[e(429)]=new l(new(a[e(415)])(1,1),new(a[e(411)])),this[e(420)][e(437)](this[e(429)]),this.camera=new u(1,1,1,1,-1e4,1e4),this[e(381)]=new v(1,1,{minFilter:void 0!==this[e(428)][e(444)]?this[e(428)][e(444)]:a[e(455)],magFilter:void 0!==this[e(428)][e(378)]?this[e(428)][e(378)]:a[e(455)],wrapS:void 0!==this.settings[e(409)]?this[e(428)][e(409)]:a[e(383)],wrapT:void 0!==this[e(428)][e(360)]?this.settings[e(360)]:a[e(383)],format:this[e(402)]?f:a[e(362)],type:void 0!==this[e(428)][e(435)]?this[e(428)][e(435)]:a[e(461)],stencilBuffer:void 0===this[e(428)][e(419)]||this.settings[e(419)]}),this.back=this[e(381)][e(376)](),this.startTime=Date[e(374)](),this[e(366)]={},this[e(392)]={passItems:[],passes:[]}}[R(365)](t,n,e,o){const r=R;this[r(424)](n);const a={shaderName:t,params:e,uuid:o,shader:this[r(404)]};this[r(392)][r(413)][r(396)](a)}[R(423)](t){const n=R;for(let e=this[n(392)][n(413)].length-1;e>=0;e--)this.Stack[n(413)][e][n(400)]===parseInt(t)&&this[n(392)][n(413)].splice(e,1);console[n(393)](this[n(392)][n(413)])}[R(399)](){const t=R;this[t(367)][t(434)](this);return this.loadShadervf("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[R(424)](t){const n=R;return this[n(404)]=function(t,n){const e=F,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,l=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,u={sampler2D:{type:"t",value:()=>new(a[F(389)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(a[F(363)])},vec3:{type:"v3",value:()=>new s},vec4:{type:"v4",value:()=>new i},bvec2:{type:"v2",value:()=>new(a[F(363)])},bvec3:{type:"v3",value:()=>new s},bvec4:{type:"v4",value:()=>new(a[F(346)])},ivec2:{type:"v2",value:()=>new(a[F(363)])},ivec3:{type:"v3",value:()=>new s},ivec4:{type:"v4",value:()=>new i},mat2:{type:"v2",value:()=>new(a[F(357)])},mat3:{type:"v3",value:()=>new(a[F(382)])},mat4:{type:"v4",value:()=>new c}},v={float:{type:"fv",value:()=>[]},vec3:{type:e(395),value:()=>[]}};let f;const p={resolution:{type:"v2",value:new r(1,1),default:!0},time:{type:"f",value:Date[e(373)](),default:!0},tInput:{type:"t",value:new(a[e(389)]),default:!0}};let d,m;for(;null!==(f=o[e(350)](n));)f[e(386)]===o.lastIndex&&o[e(378)]++,d=f[1],m=f[2],p[m]={type:u[d].type,value:u[d][e(353)]()};for(;null!==(f=l[e(350)](n));)f[e(386)]===o[e(378)]&&o[e(378)]++,d=f[1],m=f[2],f[3],p[m]={type:v[d][e(374)],value:v[d].value()};return new(a[e(342)])({uniforms:p,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}("varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }",t),this[n(404)]}Pass(t){const n=R;this.shader=null,this[n(414)]={}}[R(422)](){const t=R;this.read=this.front,this[t(458)]=this.back}onWindowResize(t,n){const e=R,o=window[e(408)],r=window[e(371)];t[e(386)](1*o,1*r),n[e(385)][e(442)](70,o/r,n[e(443)],n[e(388)]),this[e(386)](o,r);return this[e(363)](o,r,!0)}[R(386)](t,n){const e=R;this[e(456)]=t,this[e(407)]=n,this.camera.projectionMatrix[e(430)](t/-2,t/2,n/2,n/-2,this.camera[e(443)],this[e(394)][e(388)]),this.quad[e(379)][e(389)](t,n,1),this.front.setSize(t,n),this[e(364)][e(386)](t,n)}getOfflineTexture(t,n,e){const o=R;return new(a[o(403)])(t,n,{minFilter:p,magFilter:a[o(455)],format:e?a[o(416)]:a[o(362)]})}[R(377)](t,n,e,o){const r=R;this[r(372)][r(421)](this[r(458)]),this[r(372)].render(t,n),o||this[r(410)]()}[R(410)](){const t=R,n=this[t(458)];this.write=this.read,this[t(395)]=n}[R(397)](){const t=R;for(let n=0;n<this[t(392)][t(413)][t(449)];n++){const e=this[t(392)][t(413)][n].shader,o=this[t(392)][t(413)][n][t(414)];if(this[t(372)][t(421)](this[t(458)]),e instanceof a[t(405)]){this[t(429)][t(447)]=e,this[t(429)][t(447)].uniforms.tInput[t(462)]=this.read[t(387)],this[t(429)][t(447)][t(457)][t(427)][t(462)][t(389)](this[t(456)],this[t(407)]),this[t(429)].material[t(457)][t(450)][t(462)]=.001*(Date[t(374)]()-this[t(441)]);for(const n in o)this[t(429)][t(447)][t(457)][n][t(462)]=o[n];this[t(372)][t(377)](this[t(420)],this[t(394)]),this.swapBuffers()}}}[R(418)](t,n){const e=R;this[e(372)].setRenderTarget(null),this[e(429)].material=this.copyPass,this.quad[e(447)][e(457)][e(384)][e(462)]=this.read[e(387)],this.quad[e(447)][e(457)][e(427)][e(462)][e(389)](this[e(456)],this[e(407)]),this.renderer.render(this.scene,this[e(394)])}}function H(){const t=["WebGLRenderTarget","shader","ShaderMaterial","exception","height","innerWidth","wrapS","swapBuffers","MeshBasicMaterial","150534wtHXBJ","passItems","params","PlaneGeometry","RGBAFormat","debu","toScreen","stencilBuffer","scene","setRenderTarget","Reset","removePass","loadShadervf","289926OiMZAJ","init","resolution","settings","quad","makeOrthographic","apply","input","129354hrrGHn","call","type","info","add","2863mmrHiH","function *\\( *\\)","prototype","startTime","makePerspective","near","minFilter","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","action","material","Scene","length","time","test","counter","1123240vnYZoJ","toString","LinearFilter","width","uniforms","write","1850352hauDax","2620CdIlJi","UnsignedByteType","value","bind","return (function() ","wrapT","1545hLIGlF","RGBFormat","getOfflineTexture","back","addPass","passes","Pass","gger","error","3846XqCPhp","innerHeight","renderer","string","now","table","clone","render","magFilter","scale",'{}.constructor("return this")( )',"front","stateObject","ClampToEdgeWrapping","tInput","projectionMatrix","setSize","texture","far","set","trace","console","Stack","log","camera","read","push","pass","constructor","CopyPass","uuid","100QaiLAl","useRGBA"];return(H=function(){return t})()}function O(t){function n(t){const e=j;if(typeof t===e(373))return function(t){}[e(398)]("while (true) {}")[e(431)](e(452));1!==(""+t/t)[e(449)]||t%20==0?function(){return!0}[e(398)]("debu"+e(368))[e(434)](e(446)):function(){return!1}[e(398)](e(417)+"gger")[e(431)](e(382)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const k="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}";!function(t,n){const e=q,o=J();for(;;)try{if(832458===-parseInt(e(503))/1+-parseInt(e(509))/2*(parseInt(e(450))/3)+parseInt(e(478))/4*(-parseInt(e(488))/5)+-parseInt(e(489))/6*(-parseInt(e(456))/7)+parseInt(e(441))/8+-parseInt(e(481))/9*(parseInt(e(449))/10)+parseInt(e(455))/11*(parseInt(e(491))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const W=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){W(this,(function(){const t=q,n=new RegExp(t(482)),e=new RegExp(t(510),"i"),o=Z(t(485));n[t(452)](o+t(490))&&e[t(452)](o+t(444))?Z():o("0")}))()}();const X=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(492)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function q(t,n){const e=J();return(q=function(t,n){return e[t-=429]})(t,n)}X(void 0,(function(){const t=q;let n;try{n=Function(t(498)+t(507)+");")()}catch(r){n=window}const e=n[t(435)]=n[t(435)]||{},o=["log","warn",t(447),"error",t(453),t(445),t(462)];for(let a=0;a<o[t(505)];a++){const n=X[t(464)][t(493)][t(470)](X),r=o[a],s=e[r]||n;n[t(448)]=X[t(470)](X),n.toString=s[t(486)][t(470)](s),e[r]=n}}))();function Z(t){function n(t){const e=q;if("string"==typeof t)return function(t){}[e(464)]("while (true) {}")[e(492)](e(501));1!==(""+t/t).length||t%20==0?function(){return!0}.constructor(e(473)+e(480))[e(484)](e(472)):function(){return!1}.constructor(e(473)+e(480))[e(492)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}function J(){const t=["VIGNETTE1Pass","SEPIAPass","addButton","Mesh","value","bind","material","action","debu","addFolder","push","add","translate","5268zqdIrH","BufferGeometry","gger","72Eyojor","function *\\( *\\)","Vector2","call","init","toString","random","5855dwVxye","480RamDNL","chain","523164BSMcbL","apply","prototype","CGAPass","VIGNETTE2Pass","mergeGeometries","addBlade","return (function() ","change","pass","counter","receiveShadow","837144VECRTs","后处理类型","length","autoClearColor",'{}.constructor("return this")( )',"dispose","2YaYlis","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","移除~","DOTPass","InvertPass","render","onWindowResize","target","Reset","console","plugins/postProcessing/image/1324.jpg","removePass","关闭通道","title","click","12261320uyefjX","TOONPass","toScreen","input","table","FREICHENPass","info","__proto__","1431710jqZsDe","2467167DlINAZ","RGBPass","test","exception","POISSONPass","803zHioSM","40628cIaTsV","新增通道","MeshPhongMaterial","label","split","castShadow","trace","CIRCULARPass","constructor"];return(J=function(){return t})()}const $=A(x({__name:"postProcessing",async setup(o){const r=q;let s,i;const{camera:c,renderer:l,scene:u,sizes:v}=t();for(var f=new(a[r(479)]),p=[],x=0;x<100;x++){var y=new d(100,100,100);y[r(477)](1500*Math[r(487)](),1500*Math.random(),1500*Math[r(487)]()),p[r(475)](y)}f=m[r(496)](p);const I=([s,i]=h((()=>e({map:r(436)}))),s=await s,i(),s),b=([s,i]=h((()=>e({map:"plugins/postProcessing/image/1324-normal.jpg"}))),s=await s,i(),s);var _=new(a[r(458)])({map:I.map,normalMap:b.map,normalScale:new(a[r(483)])(.8,-.8),shininess:100}),S=new(a[r(468)])(f,_);S[r(461)]=!0,S[r(502)]=!0,u.value[r(476)](S);const U=new V(l[r(469)],{useRGBA:!0}),w=new g;let P=null,D=[{text:r(430),value:{InvertPass:k}},{text:"FXAAPass",value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:r(466),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:"SNOISEPass",value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:"BOXBLURPass",value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:"DENOISEPass",value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:r(494),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:b.map}}},{text:"SOBELPass",value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:r(451),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:r(429),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:r(463),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:r(454),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:r(465),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:r(495),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:r(446),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:r(442),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],E=r(430),M=k,A=null;w[r(497)]({view:"list",label:r(504),options:D,value:""}).on(r(499),(t=>{P=t[r(469)]}));const L=w[r(467)]({title:"新增",label:r(457)});let C=0;L.on(r(440),(t=>{const n=r;E=Object.keys(P)[0],M=Object.values(P)[0],A=Object.values(P)[1];let e=C++,o=w[n(474)]({title:E});for(const r in A){let t=A[r];o[n(497)]({view:"text",label:r,parse:t=>String(t),value:t})}o[n(467)]({title:n(511)+e,label:n(438)}).on(n(440),(t=>{const e=n;let o=t[e(433)][e(439)][e(460)]("~")[1];U[e(437)](o)})).on(n(440),(()=>{o[n(508)]()}));let a=N(A,t.target[n(459)],t[n(469)]);U.addPass(E,M,a,e)})),U[r(432)](l[r(469)],c[r(469)]);const{onLoop:z}=n();return z((({delta:t})=>{const n=r;S&&(l[n(469)][n(506)]=!0,U[n(434)](),S[n(471)]=_,U[n(431)](u[n(469)],c[n(469)]),U[n(500)](),U[n(443)](u[n(469)],c[n(469)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),Y=Q;function Q(t,n){const e=nt();return(Q=function(t,n){return e[t-=109]})(t,n)}!function(t,n){const e=Q,o=nt();for(;;)try{if(178337===-parseInt(e(131))/1+parseInt(e(110))/2*(parseInt(e(147))/3)+-parseInt(e(154))/4+parseInt(e(144))/5*(-parseInt(e(142))/6)+-parseInt(e(148))/7*(-parseInt(e(141))/8)+-parseInt(e(130))/9+-parseInt(e(116))/10*(parseInt(e(118))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const K=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Q(136)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){K(this,(function(){const t=Q,n=new RegExp(t(123)),e=new RegExp(t(124),"i"),o=rt(t(146));n[t(140)](o+t(111))&&e[t(140)](o+t(149))?rt():o("0")}))()}();const tt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Q(136)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function nt(){const t=["1295163DUgKnz","16885LaCFnN","gger","TresAmbientLight","trace","while (true) {}","apply","TresDirectionalLight","debu","TresCanvas","test","4064mplfVW","6wUqnne","length","690915eWaBXB","table","init","413064wBJkdh","4655ZyXNpU","input","console","call","#000000","perspectiveCameraRef","342196bBaRor","return (function() ","4DBptkE","chain","info","#ffffff","toString",'{}.constructor("return this")( )',"10fgGUOC","action","553685SSzjHs","constructor","postProcessingEditor","log","counter","function *\\( *\\)","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","bind","prototype","stateObject","TresPerspectiveCamera","__proto__"];return(nt=function(){return t})()}tt(void 0,(function(){const t=Q,n=function(){const t=Q;let n;try{n=Function(t(109)+t(115)+");")()}catch(e){n=window}return n}(),e=n[t(150)]=n[t(150)]||{},o=[t(121),"warn",t(112),"error","exception",t(145),t(134)];for(let r=0;r<o[t(143)];r++){const n=tt[t(119)][t(126)][t(125)](tt),a=o[r],s=e[a]||n;n[t(129)]=tt[t(125)](tt),n[t(114)]=s[t(114)][t(125)](s),e[a]=n}}))();const et={ref:Y(153),position:[600,850,-1500],fov:45,near:.1,far:1e5},ot=x({__name:Y(120),setup(t){const e=Y,r={clearColor:e(152),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:"manual"},a={autoRotate:!0,enableDamping:!0},{onLoop:s}=n();return s((({delta:t})=>{})),(t,n)=>{const s=e,i=y(s(139));return I(),b(i,M(r,{"window-size":""}),{default:_((()=>[S(s(128),et,null,512),U(w(o),P(D(a)),null,16),n[0]||(n[0]=S(s(133),{color:s(113),intensity:2},null,-1)),n[1]||(n[1]=S(s(137),{position:[100,100,0],intensity:2,color:s(113)},null,-1)),(I(),b(E,null,{default:_((()=>[U($)])),_:1}))])),_:1},16)}}});function rt(t){function n(t){const e=Q;if("string"==typeof t)return function(t){}.constructor(e(135))[e(136)](e(122));1!==(""+t/t).length||t%20==0?function(){return!0}.constructor(e(138)+e(132))[e(151)](e(117)):function(){return!1}[e(119)]("debugger")[e(136)](e(127)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{ot as default};
