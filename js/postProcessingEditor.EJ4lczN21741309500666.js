import{m as t,e as n,a as e,o}from"./@tresjs.yaBKiR-I1741309500666.js";import{_ as r,Y as s,b as a,V as i,ar as c,M as l,m as u,aR as v,cX as f,av as p,cd as d,r as m}from"./three.8tDGqmLF1741309500666.js";import{P as g}from"./tweakpane.yDiyAAkA1741309500666.js";import{d as x,a3 as h,e as y,o as I,f as b,g as _,N as S,j as U,u as w,aj as D,ak as P,al as E,m as M}from"./@vue.NRI7TcgI1741309500666.js";import{_ as A}from"./@fesjs.x4z0tZxE1741309500666.js";import"./postprocessing.5pHDeDVF1741309500666.js";import"./@vueuse.7Aa9Vkmy1741309500666.js";import"./vue-router.vxk1Hu8C1741309500666.js";import"./lodash-es.pklfUAS51741309500666.js";import"./@qlin.yHhFDldE1741309500666.js";import"./pinia.f1wUCX_f1741309500666.js";import"./@floating-ui.BPbuo5Gx1741309500666.js";import"./@juggle.7yjBMqoW1741309500666.js";function L(){const t=["onerror","object","message","action","warn","info","random","open","exception","return (function() ","370icjgHI","Texture","ShaderMaterial","Vector2",'{}.constructor("return this")( )',"Matrix2","2475204bSCRSz","v3v","value","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","2895860DODEXI","responseText","1681875JxrOGb","type",'Shader "',"lastIndex","onabort","Vector4","error","string","82260eJyhJN","send","index","get","gger","\" couldn't be loaded.","40BsAOEO","Vector3","bind","table","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","WagnerLoadShaderException","apply","counter","onload","601916wXelWn","debu","1309850xDUILJ","length","name","constructor","toString","function *\\( *\\)","1538MijJEd","init","replace","console","Matrix3","hasOwnProperty"];return(L=function(){return t})()}!function(t,n){const e=N,o=L();for(;;)try{if(418248===-parseInt(e(141))/1*(-parseInt(e(157))/2)+parseInt(e(163))/3+-parseInt(e(167))/4+parseInt(e(135))/5+parseInt(e(118))/6+-parseInt(e(133))/7*(parseInt(e(124))/8)+parseInt(e(169))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[N(130)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){C(this,(function(){const t=N,n=new RegExp(t(140)),e=new RegExp(t(128),"i"),o=T(t(142));n.test(o+"chain")&&e.test(o+"input")?T():o("0")}))()}();const F=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();F(void 0,(function(){const t=N,n=function(){const t=N;let n;try{n=Function(t(156)+t(161)+");")()}catch(e){n=window}return n}(),e=n[t(144)]=n[t(144)]||{},o=["log",t(151),t(152),t(116),t(155),t(127),"trace"];for(let r=0;r<o[t(136)];r++){const n=F.constructor.prototype[t(126)](F),s=o[r],a=e[s]||n;n.__proto__=F[t(126)](F),n.toString=a[t(139)][t(126)](a),e[s]=n}}))();function z(t,n,e){const o=N;if(typeof t!==o(148)||null===t)return t;const r=Array.isArray(t)?[]:{};for(const s in t)t[o(146)](s)&&(r[s]=z(t[s])),s==n&&(r[n]=e);return r}function N(t,n){const e=L();return(N=function(t,n){return e[t-=116]})(t,n)}function T(t){function n(t){const e=N;if(typeof t===e(117))return function(t){}.constructor("while (true) {}")[e(130)](e(131));1!==(""+t/t)[e(136)]||t%20==0?function(){return!0}[e(138)](e(134)+e(122)).call(e(150)):function(){return!1}.constructor(e(134)+e(122))[e(130)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}function R(t,n){const e=G();return(R=function(t,n){return e[t-=166]})(t,n)}const j=R;function G(){const t=["magFilter","scene","PlaneGeometry","width","OrthographicCamera","error","toScreen","action","WebGLRenderTarget","settings","clone","RGBAFormat","Mesh","init","swapBuffers","renderer","input","399JpNlxO","set","back","wrapT","MeshBasicMaterial","stencilBuffer","apply","startTime","uniforms","Reset","RGBFormat","texture","innerHeight","getOfflineTexture","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","table","pass","innerWidth","145cIFjlf","7226ivsvGb","function *\\( *\\)","uuid","console","addPass","warn","camera","constructor","chain","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","735834JkZkkF","shader","427npfcto","2066136AaMEgu","CopyPass","write","setRenderTarget","setSize","exception","info","test","height","5141097dxeEyX","projectionMatrix","stateObject","UnsignedByteType","resolution","removePass","read","Pass","string","value","ShaderMaterial","useRGBA","toString","material","quad","time","30921680keiZWP","__proto__","debu","minFilter","73208DQMZYe","trace","length",'{}.constructor("return this")( )',"onWindowResize","loadShadervf","type","params","makePerspective","ClampToEdgeWrapping","copyPass","bind","now","172524ePruan","front","Stack","render","passItems","far","near","push","call","LinearFilter","log","Scene"];return(G=function(){return t})()}!function(t,n){const e=R,o=G();for(;;)try{if(429029===-parseInt(e(241))/1+-parseInt(e(231))/2*(parseInt(e(212))/3)+parseInt(e(244))/4+-parseInt(e(230))/5*(parseInt(e(183))/6)+-parseInt(e(243))/7*(parseInt(e(170))/8)+-parseInt(e(253))/9+parseInt(e(166))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){B(this,(function(){const t=R,n=new RegExp(t(232)),e=new RegExp(t(226),"i"),o=V(t(208));n[t(251)](o+t(239))&&e[t(251)](o+t(211))?V():o("0")}))()}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(218)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();O(void 0,(function(){const t=R,n=function(){const t=R;let n;try{n=Function("return (function() "+t(173)+");")()}catch(e){n=window}return n}(),e=n[t(234)]=n[t(234)]||{},o=[t(193),t(236),t(250),t(200),t(249),t(227),t(171)];for(let r=0;r<o[t(172)];r++){const n=O.constructor.prototype[t(181)](O),s=o[r],a=e[s]||n;n[t(167)]=O[t(181)](O),n[t(265)]=a[t(265)][t(181)](a),e[s]=n}}))();class k{constructor(t,n){const e=R;this[e(198)]=1,this[e(252)]=1,this[e(204)]=n||{},this[e(264)]=this.settings[e(264)]||!1,this[e(210)]=t,this[e(180)]=this[e(245)](this[e(204)]),this.scene=new(r[e(194)]),this.quad=new(r[e(207)])(new(r[e(197)])(1,1),new(r[e(216)])),this[e(196)].add(this[e(267)]),this[e(237)]=new(r[e(199)])(1,1,1,1,-1e4,1e4),this[e(184)]=new(r[e(203)])(1,1,{minFilter:void 0!==this[e(204)][e(169)]?this[e(204)][e(169)]:r[e(192)],magFilter:void 0!==this.settings.magFilter?this[e(204)][e(195)]:u,wrapS:void 0!==this[e(204)].wrapS?this[e(204)].wrapS:r[e(179)],wrapT:void 0!==this[e(204)].wrapT?this.settings[e(215)]:r[e(179)],format:this[e(264)]?r[e(206)]:r[e(222)],type:void 0!==this.settings[e(176)]?this[e(204)][e(176)]:r[e(256)],stencilBuffer:void 0===this[e(204)][e(217)]||this.settings.stencilBuffer}),this[e(214)]=this[e(184)][e(205)](),this[e(219)]=Date.now(),this.passes={},this[e(185)]={passItems:[],passes:[]}}[j(235)](t,n,e,o){const r=j;this[r(175)](n);const s={shaderName:t,params:e,uuid:o,shader:this.shader};this[r(185)][r(187)][r(190)](s)}[j(258)](t){const n=j;for(let e=this.Stack.passItems[n(172)]-1;e>=0;e--)this[n(185)][n(187)][e][n(233)]===parseInt(t)&&this[n(185)][n(187)].splice(e,1);console[n(193)](this[n(185)][n(187)])}[j(245)](){const t=j;this[t(260)][t(191)](this);return this[t(175)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[j(175)](t){const n=j,e=n(240);return this[n(242)]=function(t,n){const e=N,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,u=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,v={sampler2D:{type:"t",value:()=>new(r[N(158)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[N(160)])},vec3:{type:"v3",value:()=>new a},vec4:{type:"v4",value:()=>new(r[N(174)])},bvec2:{type:"v2",value:()=>new i},bvec3:{type:"v3",value:()=>new a},bvec4:{type:"v4",value:()=>new(r[N(174)])},ivec2:{type:"v2",value:()=>new i},ivec3:{type:"v3",value:()=>new(r[N(125)])},ivec4:{type:"v4",value:()=>new c},mat2:{type:"v2",value:()=>new(r[N(162)])},mat3:{type:"v3",value:()=>new(r[N(145)])},mat4:{type:"v4",value:()=>new l}},f={float:{type:"fv",value:()=>[]},vec3:{type:e(164),value:()=>[]}};let p;const d={resolution:{type:"v2",value:new(r[e(160)])(1,1),default:!0},time:{type:"f",value:Date.now(),default:!0},tInput:{type:"t",value:new s,default:!0}};let m,g;for(;null!==(p=o.exec(n));)p[e(120)]===o[e(172)]&&o[e(172)]++,m=p[1],g=p[2],d[g]={type:v[m][e(170)],value:v[m][e(165)]()};for(;null!==(p=u.exec(n));)p[e(120)]===o.lastIndex&&o[e(172)]++,m=p[1],g=p[2],p[3],d[g]={type:f[m][e(170)],value:f[m].value()};return new(r[e(159)])({uniforms:d,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(242)]}[j(260)](t){const n=j;this[n(242)]=null,this[n(177)]={}}[j(221)](){const t=j;this.read=this[t(184)],this[t(246)]=this.back}[j(174)](t,n){const e=j,o=window[e(229)],r=window[e(224)];t[e(248)](1*o,1*r),n[e(254)][e(178)](70,o/r,n[e(189)],n[e(188)]),this[e(248)](o,r);return this[e(225)](o,r,!0)}[j(248)](t,n){const e=j;this[e(198)]=t,this[e(252)]=n,this[e(237)].projectionMatrix.makeOrthographic(t/-2,t/2,n/2,n/-2,this[e(237)][e(189)],this[e(237)].far),this[e(267)].scale[e(213)](t,n,1),this.front[e(248)](t,n),this.back[e(248)](t,n)}getOfflineTexture(t,n,e){const o=j;return new(r[o(203)])(t,n,{minFilter:r[o(192)],magFilter:r[o(192)],format:e?v:f})}[j(186)](t,n,e,o){const r=j;this[r(210)].setRenderTarget(this[r(246)]),this[r(210)][r(186)](t,n),o||this[r(209)]()}[j(209)](){const t=j,n=this.write;this[t(246)]=this[t(259)],this[t(259)]=n}[j(228)](){const t=j;for(let n=0;n<this[t(185)][t(187)].length;n++){const e=this[t(185)][t(187)][n].shader,o=this[t(185)].passItems[n][t(177)];if(this[t(210)][t(247)](this[t(246)]),e instanceof r[t(263)]){this[t(267)].material=e,this[t(267)].material[t(220)].tInput[t(262)]=this[t(259)][t(223)],this[t(267)][t(266)].uniforms.resolution[t(262)][t(213)](this[t(198)],this[t(252)]),this[t(267)][t(266)][t(220)][t(268)].value=.001*(Date[t(182)]()-this[t(219)]);for(const n in o)this.quad.material.uniforms[n][t(262)]=o[n];this[t(210)][t(186)](this.scene,this[t(237)]),this[t(209)]()}}}[j(201)](t,n){const e=j;this[e(210)][e(247)](null),this.quad[e(266)]=this[e(180)],this[e(267)][e(266)][e(220)].tInput[e(262)]=this[e(259)][e(223)],this[e(267)][e(266)][e(220)][e(257)][e(262)][e(213)](this[e(198)],this.height),this.renderer[e(186)](this[e(196)],this[e(237)])}}function V(t){function n(t){const e=R;if(typeof t===e(261))return function(t){}[e(238)]("while (true) {}")[e(218)]("counter");1!==(""+t/t)[e(172)]||t%20==0?function(){return!0}[e(238)]("debugger")[e(191)](e(202)):function(){return!1}[e(238)](e(168)+"gger").apply(e(255)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const H="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",W=J;!function(t,n){const e=J,o=Z();for(;;)try{if(725442===-parseInt(e(361))/1*(parseInt(e(352))/2)+-parseInt(e(368))/3*(parseInt(e(354))/4)+-parseInt(e(318))/5+-parseInt(e(375))/6*(parseInt(e(326))/7)+-parseInt(e(382))/8*(-parseInt(e(366))/9)+-parseInt(e(362))/10*(parseInt(e(315))/11)+parseInt(e(369))/12)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const X=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[J(308)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){X(this,(function(){const t=J,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(347),"i"),o=$(t(383));n[t(336)](o+t(380))&&e[t(336)](o+"input")?$():o("0")}))()}();const q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[J(308)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function Z(){const t=["postProcessing","change","render","call","debu","material","test","title","plugins/postProcessing/image/1324-normal.jpg","VIGNETTE1Pass","console","click","list","toString","exception","castShadow","dispose","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","DOTPass","while (true) {}","addBlade","split","170lOYcRW","counter","20yGORCl","BufferGeometry","bind","return (function() ","新增通道","string","values","10666oNyFEj","1360jEOIkg","pass","random","warn","2394yxGeRd","map","50604FoXCJD","24477960NZsuYC","移除~","log","SNOISEPass","info","translate","2468868JcvjFj","FXAAPass","DENOISEPass","InvertPass","receiveShadow","chain","VIGNETTE2Pass","13912cBdHCf","init","error","trace","prototype","push","apply","SOBELPass","keys","onWindowResize","FREICHENPass","MeshPhongMaterial","stateObject","19547hlOagm","__proto__","value","664310iIXlde","CIRCULARPass","mergeGeometries","label","gger","关闭通道","constructor","addButton","7PWedNc","后处理类型","CGAPass","target"];return(Z=function(){return t})()}function J(t,n){const e=Z();return(J=function(t,n){return e[t-=308]})(t,n)}q(void 0,(function(){const t=J;let n;try{n=Function(t(357)+'{}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(340)]=n[t(340)]||{},o=[t(371),t(365),t(373),t(384),t(344),"table",t(385)];for(let s=0;s<o.length;s++){const n=q[t(324)][t(386)][t(356)](q),r=o[s],a=e[r]||n;n[t(316)]=q[t(356)](q),n[t(343)]=a[t(343)][t(356)](a),e[r]=n}}))();function $(t){function n(t){const e=J;if(typeof t===e(359))return function(t){}[e(324)](e(349))[e(308)](e(353));1!==(""+t/t).length||t%20==0?function(){return!0}[e(324)](e(334)+e(322))[e(333)]("action"):function(){return!1}[e(324)](e(334)+e(322))[e(308)](e(314)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const Y=A(x({__name:W(330),async setup(o){const s=W;let a,c;const{camera:l,renderer:u,scene:v,sizes:f}=t();for(var x=new(r[s(355)]),y=[],I=0;I<100;I++){var b=new p(100,100,100);b[s(374)](1500*Math.random(),1500*Math.random(),1500*Math[s(364)]()),y[s(387)](b)}x=d[s(320)](y);const _=([a,c]=h((()=>e({map:"plugins/postProcessing/image/1324.jpg"}))),a=await a,c(),a),S=([a,c]=h((()=>e({map:s(338)}))),a=await a,c(),a);var U=new(r[s(313)])({map:_[s(367)],normalMap:S[s(367)],normalScale:new i(.8,-.8),shininess:100}),w=new m(x,U);w[s(345)]=!0,w[s(379)]=!0,v[s(317)].add(w);const D=new k(u[s(317)],{useRGBA:!0}),P=new g;let E=null,M=[{text:s(378),value:{InvertPass:H}},{text:s(376),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:"SEPIAPass",value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:s(372),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:"BOXBLURPass",value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:s(377),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:s(328),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:S[s(367)]}}},{text:s(309),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:"RGBPass",value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:s(348),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(319),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:"POISSONPass",value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:s(339),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(381),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:s(312),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:"TOONPass",value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],A=s(378),L=H,C=null;P[s(350)]({view:s(342),label:s(327),options:M,value:""}).on(s(331),(t=>{E=t[s(317)]}));const F=P.addButton({title:"新增",label:s(358)});let N=0;F.on(s(341),(t=>{const n=s;A=Object[n(310)](E)[0],L=Object[n(360)](E)[0],C=Object[n(360)](E)[1];let e=N++,o=P.addFolder({title:A});for(const s in C){let t=C[s];o[n(350)]({view:"text",label:s,parse:t=>String(t),value:t})}o[n(325)]({title:n(370)+e,label:n(323)}).on("click",(t=>{const e=n;let o=t[e(329)][e(337)][e(351)]("~")[1];D.removePass(o)})).on("click",(()=>{o[n(346)]()}));let r=z(C,t.target[n(321)],t.value);D.addPass(A,L,r,e)})),D[s(311)](u[s(317)],l[s(317)]);const{onLoop:T}=n();return T((({delta:t})=>{const n=s;w&&(u.value.autoClearColor=!0,D.Reset(),w[n(335)]=U,D[n(332)](v.value,l[n(317)]),D[n(363)](),D.toScreen(v[n(317)],l.value))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),K=ot;!function(t,n){const e=ot,o=et();for(;;)try{if(952631===-parseInt(e(404))/1*(parseInt(e(445))/2)+-parseInt(e(434))/3+parseInt(e(440))/4+-parseInt(e(436))/5*(parseInt(e(422))/6)+-parseInt(e(415))/7*(-parseInt(e(432))/8)+-parseInt(e(424))/9*(parseInt(e(430))/10)+-parseInt(e(418))/11*(-parseInt(e(427))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[ot(416)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){Q(this,(function(){const t=ot,n=new RegExp(t(420)),e=new RegExp(t(423),"i"),o=st("init");n[t(443)](o+t(409))&&e[t(443)](o+t(433))?st():o("0")}))()}();const tt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[ot(416)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();tt(void 0,(function(){const t=ot;let n;try{n=Function('return (function() {}.constructor("return this")( ));')()}catch(r){n=window}const e=n.console=n[t(421)]||{},o=[t(414),t(435),"info",t(437),t(426),t(419),t(438)];for(let s=0;s<o[t(407)];s++){const n=tt[t(441)].prototype[t(411)](tt),r=o[s],a=e[r]||n;n[t(446)]=tt[t(411)](tt),n[t(405)]=a[t(405)][t(411)](a),e[r]=n}}))();const nt={ref:"perspectiveCameraRef",position:[600,850,-1500],fov:45,near:.1,far:1e5};function et(){const t=["bind","string","action","log","3836840dnWsFA","apply","TresPerspectiveCamera","253vWBpbi","table","function *\\( *\\)","console","162816LMhNTz","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","1942326fIRgxm","stateObject","exception","628476jbgmGo","TresCanvas","TresAmbientLight","20PXNJmF","#000000","16jKuulI","input","1835922anaIpM","warn","190kXwdST","error","trace","call","5232156qeDwjr","constructor","debu","test","#ffffff","1162914fnxUCA","__proto__","1MscVXX","toString","TresDirectionalLight","length","postProcessingEditor","chain","gger"];return(et=function(){return t})()}function ot(t,n){const e=et();return(ot=function(t,n){return e[t-=404]})(t,n)}const rt=x({__name:K(408),setup(t){const e=K,r={clearColor:e(431),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:"manual"},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=y(a(428));return I(),b(i,M(r,{"window-size":""}),{default:_((()=>[S(a(417),nt,null,512),U(w(o),D(P(s)),null,16),n[0]||(n[0]=S(a(429),{color:"#ffffff",intensity:2},null,-1)),n[1]||(n[1]=S(a(406),{position:[100,100,0],intensity:2,color:a(444)},null,-1)),(I(),b(E,null,{default:_((()=>[U(Y)])),_:1}))])),_:1},16)}}});function st(t){function n(t){const e=ot;if(typeof t===e(412))return function(t){}[e(441)]("while (true) {}").apply("counter");1!==(""+t/t)[e(407)]||t%20==0?function(){return!0}[e(441)](e(442)+e(410))[e(439)](e(413)):function(){return!1}.constructor(e(442)+e(410))[e(416)](e(425)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{rt as default};
