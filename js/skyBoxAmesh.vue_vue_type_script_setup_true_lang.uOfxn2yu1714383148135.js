import{a1 as p,aD as c,bj as l,cK as m,aI as s,o as v,c as u,Y as o,aa as d,ab as g,b6 as x}from"./vendor.67sOx1cX1714383148135.js";const _=["args"],S=p({__name:"skyBoxAmesh",props:{texture:{},size:{default:1e3}},async setup(i){let a,t;const r=i,{map:e}=([a,t]=c(()=>l({map:r.texture})),a=await a,t(),a);e.wrapS=e.wrapT=m,e.generateMipmaps=!1,e.magFilter=s,e.minFilter=s;const n={uniforms:{uSkybox:{type:"t",value:e}},side:x,vertexShader:"\n		varying vec3 vFragPos;\n\n		void main() {\n				vFragPos = position.xyz;\n				vec4 viewSpace = vec4(mat3(modelViewMatrix) * position, 0.0);\n				viewSpace.w = 1.0;\n				gl_Position = projectionMatrix * viewSpace;    \n		}",fragmentShader:"\n		uniform sampler2D uSkybox;\n		varying vec3 vFragPos;\n		const float PI = 3.14159265359;\n		void main() {\n				vec3 dir = normalize(vFragPos);\n				float v = (asin(dir.y) + PI * 0.5) / (PI); \n				float u = (atan(dir.x, dir.z) + PI) / (PI * 2.0);\n				gl_FragColor = texture2D(uSkybox, vec2(u, v));\n		}",depthWrite:!1};return(f,y)=>(v(),u("TresMesh",null,[o("TresBoxGeometry",{args:[r.size,r.size,r.size]},null,8,_),o("TresShaderMaterial",d(g(n)),null,16)]))}});export{S as _};
