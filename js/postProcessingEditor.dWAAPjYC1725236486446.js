import{p as t,$ as n,N as e,d as o}from"./@tresjs.DDzpLB7Q1725236486446.js";import{j as r,a6 as s,i as a,q as i,O as c,l,cL as u,W as v,k as f,ay as p,bU as d}from"./three.0IuNGJsA1725236486446.js";import{P as g}from"./tweakpane.yHWGBmom1725236486446.js";import{d as m,a4 as x,e as h,o as y,f as I,g as b,J as _,j as S,u as U,aj as w,ak as D,al as P,m as E}from"./@vue.9bHx4gg21725236486446.js";import{_ as A}from"./@fesjs.W9B5RBCy1725236486446.js";import"./@vueuse.XXpXaOwX1725236486446.js";import"./vue-router.g5JZ8VPj1725236486446.js";import"./lodash-es.nFpJXAf-1725236486446.js";import"./@qlin.yHhFDldE1725236486446.js";import"./pinia.OsYF28_k1725236486446.js";import"./@floating-ui.BPbuo5Gx1725236486446.js";import"./@juggle.7yjBMqoW1725236486446.js";!function(t,n){const e=C,o=L();for(;;)try{if(586005===-parseInt(e(139))/1+-parseInt(e(110))/2*(parseInt(e(158))/3)+parseInt(e(153))/4*(-parseInt(e(151))/5)+-parseInt(e(121))/6*(-parseInt(e(105))/7)+parseInt(e(112))/8+-parseInt(e(155))/9*(-parseInt(e(132))/10)+parseInt(e(102))/11*(parseInt(e(161))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const M=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(104)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function L(){const t=['Shader "',"gger","4566llHLbn","send","Vector2","3084HOdBcN","console","replace","length","warn","hasOwnProperty","log","7205IhTyqB","\" couldn't be loaded.","apply","523999jPVeqw","action","stateObject","test","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","18UtrmSP","onerror","2472552zLbaUW","Matrix4","object","open","Vector3","input",'" load was aborted.',"prototype","exec","18QodBfA","Vector4","type","Texture","lastIndex","bind","onabort","call","init","WagnerLoadShaderException","responseText","20cVVNgo","v3v","now",'{}.constructor("return this")( )',"toString","message","ShaderMaterial","377549pGdApe","debu","random","onload","get","while (true) {}","isArray","constructor","name","table","index","value","5uZMAro","chain","1574260XotdAM","string","3009789GfTOae"];return(L=function(){return t})()}!function(){M(this,(function(){const t=C,n=new RegExp("function *\\( *\\)"),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=T(t(129));n[t(108)](o+t(152))&&e[t(108)](o+t(117))?T():o("0")}))()}();const z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(104)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();z(void 0,(function(){const t=C;let n;try{n=Function("return (function() "+t(135)+");")()}catch(r){n=window}const e=n[t(162)]=n[t(162)]||{},o=[t(101),t(165),"info","error","exception",t(148),"trace"];for(let s=0;s<o[t(164)];s++){const n=z.constructor[t(119)].bind(z),r=o[s],a=e[r]||n;n.__proto__=z[t(126)](z),n[t(136)]=a[t(136)][t(126)](a),e[r]=n}}))();function C(t,n){const e=L();return(C=function(t,n){return e[t-=101]})(t,n)}function F(t,n,e){const o=C;if(typeof t!==o(114)||null===t)return t;const r=Array[o(145)](t)?[]:{};for(const s in t)t[o(166)](s)&&(r[s]=F(t[s])),s==n&&(r[n]=e);return r}function T(t){function n(t){const e=C;if(typeof t===e(154))return function(t){}.constructor(e(144))[e(104)]("counter");1!==(""+t/t)[e(164)]||t%20==0?function(){return!0}[e(146)](e(140)+e(157))[e(128)](e(106)):function(){return!1}[e(146)]("debugger")[e(104)](e(107)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const N=R;!function(t,n){const e=R,o=V();for(;;)try{if(291849===parseInt(e(451))/1+parseInt(e(457))/2+-parseInt(e(504))/3*(-parseInt(e(448))/4)+parseInt(e(503))/5+-parseInt(e(497))/6*(parseInt(e(465))/7)+parseInt(e(499))/8*(-parseInt(e(505))/9)+-parseInt(e(513))/10*(-parseInt(e(420))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){B(this,(function(){const t=R,n=new RegExp(t(474)),e=new RegExp(t(501),"i"),o=O(t(480));n[t(439)](o+"chain")&&e[t(439)](o+"input")?O():o("0")}))()}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(416)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function R(t,n){const e=V();return(R=function(t,n){return e[t-=416]})(t,n)}G(void 0,(function(){const t=R;let n;try{n=Function("return (function() "+t(494)+");")()}catch(r){n=window}const e=n[t(478)]=n[t(478)]||{},o=["log",t(493),t(433),t(514),"exception",t(454),"trace"];for(let s=0;s<o.length;s++){const n=G[t(447)].prototype[t(431)](G),r=o[s],a=e[r]||n;n[t(435)]=G[t(431)](G),n[t(449)]=a[t(449)][t(431)](a),e[r]=n}}))();class j{constructor(t,n){const e=R;this[e(479)]=1,this[e(489)]=1,this[e(443)]=n||{},this[e(418)]=this[e(443)][e(418)]||!1,this[e(472)]=t,this.copyPass=this[e(455)](this[e(443)]),this[e(486)]=new(s[e(484)]),this[e(462)]=new i(new(s[e(441)])(1,1),new(s[e(438)])),this[e(486)][e(432)](this.quad),this.camera=new c(1,1,1,1,-1e4,1e4),this[e(444)]=new(s[e(488)])(1,1,{minFilter:void 0!==this.settings[e(440)]?this[e(443)][e(440)]:s[e(445)],magFilter:void 0!==this.settings[e(469)]?this[e(443)][e(469)]:l,wrapS:void 0!==this.settings[e(490)]?this[e(443)].wrapS:s[e(468)],wrapT:void 0!==this[e(443)][e(452)]?this[e(443)].wrapT:s[e(468)],format:this[e(418)]?s[e(423)]:u,type:void 0!==this[e(443)][e(417)]?this.settings[e(417)]:s[e(421)],stencilBuffer:void 0===this.settings[e(510)]||this[e(443)].stencilBuffer}),this[e(512)]=this[e(444)][e(491)](),this.startTime=Date[e(473)](),this.passes={},this[e(425)]={passItems:[],passes:[]}}[N(463)](t,n,e,o){const r=N;this[r(475)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(509)]};this.Stack[r(483)][r(482)](s)}[N(426)](t){const n=N;for(let e=this[n(425)][n(483)].length-1;e>=0;e--)this[n(425)].passItems[e][n(453)]===parseInt(t)&&this.Stack[n(483)][n(459)](e,1);console[n(430)](this[n(425)][n(483)])}[N(455)](){const t=N;this[t(461)][t(506)](this);return this.loadShadervf("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[N(475)](t){const n=N,e=n(498);return this.shader=function(t,n){const e=C,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,i=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,c={sampler2D:{type:"t",value:()=>new(s[C(124)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(s[C(160)])},vec3:{type:"v3",value:()=>new(s[C(116)])},vec4:{type:"v4",value:()=>new(s[C(122)])},bvec2:{type:"v2",value:()=>new r},bvec3:{type:"v3",value:()=>new(s[C(116)])},bvec4:{type:"v4",value:()=>new(s[C(122)])},ivec2:{type:"v2",value:()=>new(s[C(160)])},ivec3:{type:"v3",value:()=>new(s[C(116)])},ivec4:{type:"v4",value:()=>new(s[C(122)])},mat2:{type:"v2",value:()=>new(void 0)},mat3:{type:"v3",value:()=>new a},mat4:{type:"v4",value:()=>new(s[C(113)])}},l={float:{type:"fv",value:()=>[]},vec3:{type:e(133),value:()=>[]}};let u;const v={resolution:{type:"v2",value:new r(1,1),default:!0},time:{type:"f",value:Date[e(134)](),default:!0},tInput:{type:"t",value:new(s[e(124)]),default:!0}};let f,p;for(;null!==(u=o[e(120)](n));)u.index===o[e(125)]&&o[e(125)]++,f=u[1],p=u[2],v[p]={type:c[f][e(123)],value:c[f][e(150)]()};for(;null!==(u=i[e(120)](n));)u[e(149)]===o[e(125)]&&o[e(125)]++,f=u[1],p=u[2],u[3],v[p]={type:l[f][e(123)],value:l[f][e(150)]()};return new(s[e(138)])({uniforms:v,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(509)]}[N(461)](t){this[N(509)]=null,this.params={}}Reset(){const t=N;this[t(471)]=this[t(444)],this[t(476)]=this.back}onWindowResize(t,n){const e=N,o=window[e(485)],r=window[e(437)];t[e(419)](1*o,1*r),n.projectionMatrix[e(496)](70,o/r,n[e(495)],n[e(477)]),this.setSize(o,r);return this[e(467)](o,r,!0)}[N(419)](t,n){const e=N;this[e(479)]=t,this[e(489)]=n,this[e(487)][e(460)][e(507)](t/-2,t/2,n/2,n/-2,this[e(487)][e(495)],this.camera.far),this[e(462)][e(466)][e(456)](t,n,1),this[e(444)][e(419)](t,n),this[e(512)][e(419)](t,n)}[N(467)](t,n,e){const o=N;return new v(t,n,{minFilter:l,magFilter:s[o(445)],format:e?s[o(423)]:u})}render(t,n,e,o){const r=N;this[r(472)].setRenderTarget(this[r(476)]),this[r(472)][r(428)](t,n),o||this[r(427)]()}[N(427)](){const t=N,n=this[t(476)];this[t(476)]=this[t(471)],this[t(471)]=n}[N(436)](){const t=N;for(let n=0;n<this.Stack[t(483)][t(424)];n++){const e=this[t(425)][t(483)][n].shader,o=this[t(425)][t(483)][n][t(429)];if(this[t(472)][t(446)](this.write),e instanceof f){this[t(462)][t(502)]=e,this.quad[t(502)].uniforms.tInput.value=this.read[t(511)],this[t(462)].material[t(492)][t(458)][t(508)][t(456)](this[t(479)],this[t(489)]),this[t(462)][t(502)][t(492)][t(470)][t(508)]=.001*(Date[t(473)]()-this[t(481)]);for(const n in o)this[t(462)][t(502)].uniforms[n][t(508)]=o[n];this[t(472)][t(428)](this.scene,this[t(487)]),this.swapBuffers()}}}toScreen(t,n){const e=N;this[e(472)].setRenderTarget(null),this[e(462)][e(502)]=this[e(442)],this[e(462)][e(502)][e(492)][e(422)][e(508)]=this[e(471)][e(511)],this[e(462)][e(502)][e(492)][e(458)][e(508)][e(456)](this[e(479)],this[e(489)]),this[e(472)][e(428)](this.scene,this[e(487)])}}function V(){const t=["innerWidth","scene","camera","WebGLRenderTarget","height","wrapS","clone","uniforms","warn",'{}.constructor("return this")( )',"near","makePerspective","1584564sMyVNb","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","128SleUwu","while (true) {}","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","material","2060630Mkxjtp","3NZDtbV","302877DtaxLq","call","makeOrthographic","value","shader","stencilBuffer","texture","back","76510dODSiF","error","apply","type","useRGBA","setSize","77nhvCHv","UnsignedByteType","tInput","RGBAFormat","length","Stack","removePass","swapBuffers","render","params","log","bind","add","info","action","__proto__","pass","innerHeight","MeshBasicMaterial","test","minFilter","PlaneGeometry","copyPass","settings","front","LinearFilter","setRenderTarget","constructor","1340876dSwWfm","toString","debu","161392MyUHyr","wrapT","uuid","table","CopyPass","set","792382rwyysD","resolution","splice","projectionMatrix","Pass","quad","addPass","counter","14jBdxMA","scale","getOfflineTexture","ClampToEdgeWrapping","magFilter","time","read","renderer","now","function *\\( *\\)","loadShadervf","write","far","console","width","init","startTime","push","passItems","Scene"];return(V=function(){return t})()}function O(t){function n(t){const e=R;if("string"==typeof t)return function(t){}[e(447)](e(500))[e(416)](e(464));1!==(""+t/t).length||t%20==0?function(){return!0}.constructor("debugger")[e(506)](e(434)):function(){return!1}[e(447)](e(450)+"gger")[e(416)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const k="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}";function H(){const t=["84413mreEXe","keys","RGBPass","12MoZgQO","length","render","call","关闭通道","BufferGeometry","2117799nDbKtX","label","SNOISEPass","InvertPass","POISSONPass","VIGNETTE1Pass","values","receiveShadow","4YVigLs","2617784hctZAg","mergeGeometries","text","gger","removePass","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","exception","addFolder","init","1182035GllaOq","function *\\( *\\)","bind","chain","action","error","log","pass","click","CIRCULARPass","271430lJYdvr","CGAPass","debu","apply","split","material","addPass","plugins/postProcessing/image/1324-normal.jpg","MeshPhongMaterial","addBlade","1106386JASMDs","27TeHsjz","__proto__","FREICHENPass","SOBELPass","BOXBLURPass","value","random","297qvcmng","prototype","table","constructor","input","while (true) {}","1568520UCitbY","498ODGqeY","stateObject","DENOISEPass","dispose",'{}.constructor("return this")( )',"test","toString","2ETIBvx","Vector2","onWindowResize","Reset","change","title","push","counter","移除~","string"];return(H=function(){return t})()}!function(t,n){const e=q,o=H();for(;;)try{if(710071===-parseInt(e(450))/1*(parseInt(e(428))/2)+parseInt(e(469))/3*(parseInt(e(398))/4)+-parseInt(e(408))/5+-parseInt(e(443))/6*(-parseInt(e(460))/7)+parseInt(e(442))/8*(-parseInt(e(429))/9)+-parseInt(e(418))/10*(-parseInt(e(436))/11)+parseInt(e(463))/12*(parseInt(e(399))/13))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const W=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(421)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){W(this,(function(){const t=q,n=new RegExp(t(409)),e=new RegExp(t(404),"i"),o=Z(t(407));n[t(448)](o+t(411))&&e.test(o+t(440))?Z():o("0")}))()}();const X=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(421)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function q(t,n){const e=H();return(q=function(t,n){return e[t-=395]})(t,n)}X(void 0,(function(){const t=q,n=function(){const t=q;let n;try{n=Function("return (function() "+t(447)+");")()}catch(e){n=window}return n}(),e=n.console=n.console||{},o=[t(414),"warn","info",t(413),t(405),t(438),"trace"];for(let r=0;r<o[t(464)];r++){const n=X.constructor[t(437)].bind(X),s=o[r],a=e[s]||n;n[t(430)]=X[t(410)](X),n[t(449)]=a[t(449)][t(410)](a),e[s]=n}}))();function Z(t){function n(t){const e=q;if(typeof t===e(459))return function(t){}[e(439)](e(441)).apply(e(457));1!==(""+t/t)[e(464)]||t%20==0?function(){return!0}[e(439)](e(420)+"gger")[e(466)](e(412)):function(){return!1}[e(439)]("debu"+e(402))[e(421)](e(444)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const $=A(m({__name:"postProcessing",async setup(o){const r=q;let a,c;const{camera:l,renderer:u,scene:v,sizes:f}=t();for(var m=new(s[r(468)]),h=[],y=0;y<100;y++){var I=new p(100,100,100);I.translate(1500*Math[r(435)](),1500*Math[r(435)](),1500*Math[r(435)]()),h[r(456)](I)}m=d[r(400)](h);const b=([a,c]=x((()=>e({map:"plugins/postProcessing/image/1324.jpg"}))),a=await a,c(),a),_=([a,c]=x((()=>e({map:r(425)}))),a=await a,c(),a);var S=new(s[r(426)])({map:b.map,normalMap:_.map,normalScale:new(s[r(451)])(.8,-.8),shininess:100}),U=new i(m,S);U.castShadow=!0,U[r(397)]=!0,v[r(434)].add(U);const w=new j(u[r(434)],{useRGBA:!0}),D=new g;let P=null,E=[{text:r(472),value:{InvertPass:k}},{text:"FXAAPass",value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:"SEPIAPass",value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:r(471),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:r(433),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:r(445),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:r(419),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:_.map}}},{text:r(432),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:r(462),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:"DOTPass",value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:r(417),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:r(473),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:r(395),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:"VIGNETTE2Pass",value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:r(431),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:"TOONPass",value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],A=r(472),M=k,L=null;D[r(427)]({view:"list",label:"后处理类型",options:E,value:""}).on(r(454),(t=>{P=t.value}));const z=D.addButton({title:"新增",label:"新增通道"});let C=0;z.on(r(416),(t=>{const n=r;A=Object[n(461)](P)[0],M=Object[n(396)](P)[0],L=Object[n(396)](P)[1];let e=C++,o=D[n(406)]({title:A});for(const r in L){let t=L[r];o.addBlade({view:n(401),label:r,parse:t=>String(t),value:t})}o.addButton({title:n(458)+e,label:n(467)}).on(n(416),(t=>{const e=n;let o=t.target[e(455)][e(422)]("~")[1];w[e(403)](o)})).on("click",(()=>{o[n(446)]()}));let s=F(L,t.target[n(470)],t.value);w[n(424)](A,M,s,e)})),w[r(452)](u[r(434)],l[r(434)]);const{onLoop:T}=n();return T((({delta:t})=>{const n=r;U&&(u.value.autoClearColor=!0,w[n(453)](),U[n(423)]=S,w[n(465)](v[n(434)],l.value),w[n(415)](),w.toScreen(v[n(434)],l[n(434)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),J=Y;!function(t,n){const e=Y,o=rt();for(;;)try{if(995552===-parseInt(e(286))/1+-parseInt(e(313))/2*(-parseInt(e(294))/3)+parseInt(e(305))/4+parseInt(e(291))/5*(-parseInt(e(279))/6)+-parseInt(e(318))/7*(parseInt(e(311))/8)+parseInt(e(300))/9+parseInt(e(312))/10*(-parseInt(e(306))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Y(309)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function Y(t,n){const e=rt();return(Y=function(t,n){return e[t-=276]})(t,n)}!function(){Q(this,(function(){const t=Y,n=new RegExp(t(284)),e=new RegExp(t(314),"i"),o=st(t(276));n[t(303)](o+"chain")&&e[t(303)](o+t(281))?st():o("0")}))()}();const K=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();K(void 0,(function(){const t=Y,n=function(){const t=Y;let n;try{n=Function(t(280)+t(307)+");")()}catch(e){n=window}return n}(),e=n[t(302)]=n[t(302)]||{},o=[t(288),t(315),t(283),t(290),t(277),"table","trace"];for(let r=0;r<o[t(298)];r++){const n=K.constructor[t(287)][t(289)](K),s=o[r],a=e[s]||n;n[t(282)]=K[t(289)](K),n[t(295)]=a.toString.bind(a),e[s]=n}}))();const tt={ref:J(299),position:[600,850,-1500],fov:45,near:.1,far:1e5},nt=_(J(308),{color:J(310),intensity:2},null,-1),et=_("TresDirectionalLight",{position:[100,100,0],intensity:2,color:J(310)},null,-1),ot=m({__name:J(296),setup(t){const e={clearColor:"#000000",shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:"manual"},r={autoRotate:!0,enableDamping:!0},{onLoop:s}=n();return s((({delta:t})=>{})),(t,n)=>{const s=h(Y(278));return y(),I(s,E(e,{"window-size":""}),{default:b((()=>[_("TresPerspectiveCamera",tt,null,512),S(U(o),w(D(r)),null,16),nt,et,(y(),I(P,null,{default:b((()=>[S($)])),_:1}))])),_:1},16)}}});function rt(){const t=["info","function *\\( *\\)","string","814730VgvJtO","prototype","log","bind","error","8465uqMyCe","while (true) {}","gger","24RnkVvk","toString","postProcessingEditor","debu","length","perspectiveCameraRef","13340313LhKTsQ","counter","console","test","action","1339236XQVOec","418099kdJohz",'{}.constructor("return this")( )',"TresAmbientLight","apply","#ffffff","6352kBwJso","10QUisrh","444390HMYLOv","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","warn","stateObject","constructor","13769JhWVzA","init","exception","TresCanvas","654ZjpysJ","return (function() ","input","__proto__"];return(rt=function(){return t})()}function st(t){function n(t){const e=Y;if(typeof t===e(285))return function(t){}[e(317)](e(292))[e(309)](e(301));1!==(""+t/t)[e(298)]||t%20==0?function(){return!0}[e(317)]("debu"+e(293)).call(e(304)):function(){return!1}[e(317)](e(297)+"gger")[e(309)](e(316)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{ot as default};
