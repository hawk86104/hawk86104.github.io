import{_ as t,T as n,ai as e}from"./three.eGpwEcxC1731053920743.js";import{e as o,b as r,U as a,c as i}from"./@tresjs.hJVQLtpa1731053920743.js";import"./index.XhjtUxm21731053920743.js";import{a as s}from"./simplex-noise.Yx8GBgKo1731053920743.js";import{C as c}from"./index.m4EhFlZy1731053920743.js";import{d as l,a6 as u,o as f,D as p,J as h,u as m,r as v,f as d,g,j as x,aj as y,ak as w,al as _}from"./@vue.u2cBPEWn1731053920743.js";import{_ as b}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.s647CRoB1731053920743.js";import"./@vueuse.weJ7f3dz1731053920743.js";import"./lamina.O7uY6Me81731053920743.js";import"./glsl-tokenizer.FkBaVhVS1731053920743.js";import"./@amap.p7X0bWcq1731053920743.js";import"./glsl-token-descope.3XUhL_sr1731053920743.js";import"./glsl-token-depth.g56a3_Nf1731053920743.js";import"./glsl-token-scope.kJt09uTL1731053920743.js";import"./glsl-token-properties.7N2ooJwZ1731053920743.js";import"./glsl-token-assignments.dFM481ie1731053920743.js";import"./glsl-token-string.kMgVnZFH1731053920743.js";import"./glsl-token-functions.PDG3hHe91731053920743.js";import"./object-hash.g-Wl-r3f1731053920743.js";import"./jszip.djQt-NeA1731053920743.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.AH7JafJH1731053920743.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.eX3JEvCZ1731053920743.js";import"./three-stdlib.6SZFIoWk1731053920743.js";import"./@pmndrs.cFq3swDI1731053920743.js";import"./utils.kNk43uyQ1731053920743.js";function M(){const t=["side","needsUpdate","2392004erXZcM","bind","Vector3","input","joints","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","map","constructor","toneMapped","string","log","2NFnmLT","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","computeVertexNormals","stretchesF32","chain","console","Color","length","TresInstancedBufferGeometry","attributes-uv","convertSRGBToLinear","attributes-position","grass","error","random","halfRootAngleSinF32",'{}.constructor("return this")( )',"orientationsF32","lookAt","position","5399175pRcasn","attributes-halfRootAngleCos","attributes-orientation","TresMesh","set","normalize","width","Vector4","3594186FkXbgM","513307uRsuyG","offsetsF32","halfRootAngleCosF32","alphaMap","toString","cos","return (function() ","instances","action","apply","push","stateObject","__proto__","geometry","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","7748790iLDTAS","attributes-offset","4683eWFPhE","info","TresMeshStandardMaterial","test","init","index","translate","sin","array","table","call","PlaneGeometry","InstancedBufferAttribute","material","2894706nGTyBO","TresGroup","1112gHCPsv","DoubleSide","attributes"];return(M=function(){return t})()}const z=R;!function(t,n){const e=R,o=M();for(;;)try{if(787435===-parseInt(e(304))/1*(parseInt(e(275))/2)+-parseInt(e(257))/3+-parseInt(e(264))/4+parseInt(e(295))/5+parseInt(e(241))/6+-parseInt(e(243))/7*(-parseInt(e(259))/8)+parseInt(e(303))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const j=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(235)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){j(this,(function(){const t=R,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(240),"i"),o=D(t(247));n[t(246)](o+t(279))&&e[t(246)](o+t(267))?D():o("0")}))()}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(235)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();A(void 0,(function(){const t=R,n=function(){const t=R;let n;try{n=Function(t(232)+t(291)+");")()}catch(e){n=window}return n}(),e=n[t(280)]=n[t(280)]||{},o=[t(274),"warn",t(244),t(288),"exception",t(252),"trace"];for(let r=0;r<o[t(282)];r++){const n=A[t(271)].prototype[t(265)](A),a=o[r],i=e[a]||n;n[t(238)]=A[t(265)](A),n[t(308)]=i[t(308)][t(265)](i),e[a]=n}}))();const I=[z(256)],C=[z(248),z(286),z(284),z(242),z(297),"attributes-stretch","attributes-halfRootAngleSin",z(296)],S=[z(239)],F=[z(262)];function R(t,n){const e=M();return(R=function(t,n){return e[t-=231]})(t,n)}const k=l({__name:z(287),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(e){const a=z;let i,l;const v=([i,l]=u((()=>r({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),i=await i,l(),i),d=e,g=s(Math.random);function x(n,e){const o=R,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,a=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,i=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,s=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(302)])(r,a,i,s)}function y(t,n){var e=2*g(t/50,n/50);return e+=4*g(t/100,n/100),e+=.2*g(t/10,n/10)}const w=function(e,o){const r=R,a=[],i=[],s=[],c=[],l=[];let u=new(t[r(302)]),f=new(t[r(302)]);const p=-.25;for(let n=0;n<e;n++){const h=Math[r(289)]()*o-o/2,m=Math.random()*o-o/2,v=y(h,m);a[r(236)](h,v,m);let d=Math.PI-Math.random()*(2*Math.PI);c[r(236)](Math[r(250)](.5*d)),l[r(236)](Math[r(231)](.5*d));let g=new(t[r(266)])(0,1,0),w=g.x*Math.sin(d/2),_=g.y*Math[r(250)](d/2),b=g.z*Math[r(250)](d/2),M=Math[r(231)](d/2);u.set(w,_,b,M)[r(300)](),d=.5*Math.random()+p,g=new(t[r(266)])(1,0,0),w=g.x*Math[r(250)](d/2),_=g.y*Math[r(250)](d/2),b=g.z*Math[r(250)](d/2),M=Math.cos(d/2),f[r(299)](w,_,b,M)[r(300)](),u=x(u,f),d=.5*Math[r(289)]()+p,g=new(t[r(266)])(0,0,1),w=g.x*Math[r(250)](d/2),_=g.y*Math[r(250)](d/2),b=g.z*Math[r(250)](d/2),M=Math[r(231)](d/2),f[r(299)](w,_,b,M)[r(300)](),u=x(u,f),i[r(236)](u.x,u.y,u.z,u.w),n<e/3?s.push(1.8*Math[r(289)]()):s[r(236)](Math[r(289)]())}return{offsetsF32:new(t[r(255)])(new Float32Array(a),3),orientationsF32:new(t[r(255)])(new Float32Array(i),4),stretchesF32:new(t[r(255)])(new Float32Array(s),1),halfRootAngleCosF32:new n(new Float32Array(l),1),halfRootAngleSinF32:new n(new Float32Array(c),1)}}(d[a(233)],d[a(301)]),_=new(t[a(254)])(d.bW,d.bH,1,d[a(268)])[a(249)](0,d.bH/2,0),b=new(t[a(254)])(d.width,d[a(301)],32,32);b[a(293)](new(t[a(266)])(0,1,0));const M=b[a(261)][a(294)];for(let t=0;t<M[a(251)][a(282)];t+=3)M.array[t+1]=y(M.array[t],M[a(251)][t+2]);b[a(261)][a(294)][a(263)]=!0,b[a(277)]();const j=new(c({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(t[a(281)])(.3,.9,0).convertSRGBToLinear(),bottomColor:new(t[a(281)])(0,.2,0)[a(285)]()},a(269),a(276),(n=>{const e=a;n[e(262)]=t[e(260)]})));j[a(270)]=v[a(270)],j[a(307)]=v[a(307)],j[a(272)]=!1;const{onLoop:A}=o();return A((({elapsed:t})=>{j.uniforms.time.value=t/4})),(n,e)=>{const o=a;return f(),p(o(258),null,[h(o(298),{material:m(j)},[h(o(283),{index:m(_)[o(248)],"attributes-position":m(_)[o(261)][o(294)],"attributes-uv":m(_)[o(261)].uv,"attributes-offset":m(w)[o(305)],"attributes-orientation":m(w)[o(292)],"attributes-stretch":m(w)[o(278)],"attributes-halfRootAngleSin":m(w)[o(290)],"attributes-halfRootAngleCos":m(w)[o(306)]},null,8,C)],8,I),h("TresMesh",{position:[0,0,0],geometry:m(b)},[h(o(245),{color:"#000f00",side:t[o(260)]},null,8,F)],8,S)])}}});function D(t){function n(t){const e=R;if(typeof t===e(273))return function(t){}[e(271)]("while (true) {}")[e(235)]("counter");1!==(""+t/t).length||t%20==0?function(){return!0}[e(271)]("debugger")[e(253)](e(234)):function(){return!1}.constructor("debugger")[e(235)](e(237)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const T=L;function L(t,n){const e=E();return(L=function(t,n){return e[t-=330]})(t,n)}function E(){const t=["trace","22567jNWoco","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","while (true) {}","294nyqLUJ","return (function() ","6513416cjlsPd","grass","226035OtyEyz","log","toString","prototype","apply","info","action","call","7dyRjzm",'{}.constructor("return this")( )',"807708MOLzZn","constructor","5509194cVZzMY","string","stateObject","gger","length","init","892015lvGMzJ","test","bind","30zFuSYh","counter","console","TresPerspectiveCamera","debu","input","chain","2421CrCdBJ"];return(E=function(){return t})()}!function(t,n){const e=L,o=E();for(;;)try{if(550203===parseInt(e(347))/1+-parseInt(e(350))/2*(-parseInt(e(345))/3)+parseInt(e(364))/4+parseInt(e(335))/5+parseInt(e(366))/6*(parseInt(e(362))/7)+-parseInt(e(352))/8+parseInt(e(354))/9*(-parseInt(e(338))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(358)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){O(this,(function(){const t=L,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(348),"i"),o=G(t(334));n[t(336)](o+t(344))&&e[t(336)](o+t(343))?G():o("0")}))()}();const P=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();P(void 0,(function(){const t=L;let n;try{n=Function(t(351)+t(363)+");")()}catch(r){n=window}const e=n[t(340)]=n[t(340)]||{},o=[t(355),"warn",t(359),"error","exception","table",t(346)];for(let a=0;a<o[t(333)];a++){const n=P[t(365)][t(357)][t(337)](P),r=o[a],i=e[r]||n;n.__proto__=P[t(337)](P),n.toString=i[t(356)][t(337)](i),e[r]=n}}))();const B=l({__name:T(353),setup(t){const n=v({alpha:!0,toneMapping:e,windowSize:!0,clearColor:6710886}),o=v({enableDamping:!0,autoRotate:!1});return(t,e)=>{const r=L;return f(),d(m(i),y(w(n)),{default:g((()=>[e[0]||(e[0]=h(r(341),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),x(m(a),y(w(o)),null,16),(f(),d(_,null,{default:g((()=>[x(k)])),_:1})),(f(),d(_,null,{default:g((()=>[x(m(b),{texture:"https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr"})])),_:1}))])),_:1},16)}}});function G(t){function n(t){const e=L;if(typeof t===e(330))return function(t){}[e(365)](e(349)).apply(e(339));1!==(""+t/t)[e(333)]||t%20==0?function(){return!0}[e(365)](e(342)+"gger")[e(361)](e(360)):function(){return!1}[e(365)](e(342)+e(332))[e(358)](e(331)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{B as default};
