import{_ as t,C as n,b as e,a7 as o,t as r,ap as a}from"./three.DqHgeVY11742895693222.js";import{e as i,a as s,o as c}from"./@tresjs.xCsT8yve1742895693222.js";import"./index.emEhBlg21742895693222.js";import{c as l}from"./simplex-noise.jB2HxhHB1742895693222.js";import{C as u}from"./index.hoamjIa41742895693222.js";import{d as f,a3 as p,o as h,H as m,N as v,u as d,r as g,e as x,f as w,g as y,j as b,aj as _,ak as j,al as M}from"./@vue.C4dqouNn1742895693222.js";import{_ as z}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.-z4vai2w1742895693222.js";import"./postprocessing.vTwfsnPH1742895693222.js";import"./@vueuse.q8TRDI1e1742895693222.js";import"./lamina.dV9qdPFD1742895693222.js";import"./glsl-tokenizer.ln5kBr-e1742895693222.js";import"./@amap.hJQcpQRT1742895693222.js";import"./glsl-token-descope.VWep_7DK1742895693222.js";import"./glsl-token-depth.U92rWhsZ1742895693222.js";import"./glsl-token-scope.pJ-VUYL-1742895693222.js";import"./glsl-token-properties.358HI4TL1742895693222.js";import"./glsl-token-assignments.Az2isGDI1742895693222.js";import"./glsl-token-string.OdTf9tMn1742895693222.js";import"./glsl-token-functions.uMTYfeip1742895693222.js";import"./object-hash.nWaMbOK21742895693222.js";import"./jszip.-Z3W6wk-1742895693222.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.pLKHfOZC1742895693222.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.ua97OQr71742895693222.js";import"./three-stdlib.RjQ8hpvq1742895693222.js";import"./@pmndrs.hpTTkqV81742895693222.js";import"./utils.VkmIAWB81742895693222.js";const I=F;!function(t,n){const e=F,o=E();for(;;)try{if(451507===-parseInt(e(198))/1*(parseInt(e(171))/2)+-parseInt(e(174))/3+parseInt(e(170))/4*(-parseInt(e(193))/5)+parseInt(e(185))/6*(-parseInt(e(227))/7)+-parseInt(e(168))/8*(parseInt(e(177))/9)+parseInt(e(180))/10*(parseInt(e(219))/11)+-parseInt(e(188))/12*(-parseInt(e(190))/13))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[F(194)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){A(this,(function(){const t=F,n=new RegExp(t(215)),e=new RegExp(t(172),"i"),o=T(t(184));n.test(o+t(217))&&e[t(163)](o+t(147))?T():o("0")}))()}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[F(194)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();C(void 0,(function(){const t=F,n=function(){const t=F;let n;try{n=Function(t(214)+t(225)+");")()}catch(e){n=window}return n}(),e=n[t(154)]=n[t(154)]||{},o=[t(176),t(173),t(229),t(183),t(175),t(169),t(202)];for(let r=0;r<o[t(203)];r++){const n=C[t(191)][t(222)][t(209)](C),a=o[r],i=e[a]||n;n.__proto__=C[t(209)](C),n[t(230)]=i[t(230)][t(209)](i),e[a]=n}}))();const S=[I(178)],k=[I(156),I(187),I(195),I(224),"attributes-orientation","attributes-stretch","attributes-halfRootAngleSin",I(161)],R=[I(207)],D=["side"];function F(t,n){const e=E();return F=function(t,n){return e[t-=146]},F(t,n)}function E(){const t=["bind","position","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","string","joints","return (function() ","function *\\( *\\)","halfRootAngleCosF32","chain","value","4367671fZleuh","call","DoubleSide","prototype","TresInstancedBufferGeometry","attributes-offset",'{}.constructor("return this")( )',"normalize","42HDCYpy","gger","info","toString","Vector3","set","#000f00","input","Vector4","orientationsF32","array","push","grass","convertSRGBToLinear","console","width","index","counter","offsetsF32","InstancedBufferAttribute","uniforms","attributes-halfRootAngleCos","Color","test","attributes","computeVertexNormals","translate","needsUpdate","592336MWvTXn","table","949928cxRMwk","1402318taUdSB","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","warn","1362282Dsrbqi","exception","log","54xpEpmW","material","sin","10tQidQS","stateObject","while (true) {}","error","init","750900jjoHVW","instances","attributes-position","31707996nZEYuj","cos","13Cosrgg","constructor","toneMapped","5CBIXow","apply","attributes-uv","time","side","1GAEDSr","alphaMap","debu","TresMesh","trace","length","PlaneGeometry","random","action","geometry","map"];return(E=function(){return t})()}const B=f({__name:I(152),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(a){const c=I;let f,g;const x=([f,g]=p((()=>s({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),f=await f,g(),f),w=a,y=l(Math[c(205)]);function b(t,n){const e=t.x*n.w+t.y*n.z-t.z*n.y+t.w*n.x,o=-t.x*n.z+t.y*n.w+t.z*n.x+t.w*n.y,a=t.x*n.y-t.y*n.x+t.z*n.w+t.w*n.z,i=-t.x*n.x-t.y*n.y-t.z*n.z+t.w*n.w;return new r(e,o,a,i)}function _(t,n){var e=2*y(t/50,n/50);return e+=4*y(t/100,n/100),e+=.2*y(t/10,n/10)}const j=function(n,r){const a=c,i=[],s=[],l=[],u=[],f=[];let p=new(t[a(148)]),h=new(t[a(148)]);const m=-.25;for(let o=0;o<n;o++){const c=Math[a(205)]()*r-r/2,v=Math[a(205)]()*r-r/2,d=_(c,v);i[a(151)](c,d,v);let g=Math.PI-Math.random()*(2*Math.PI);u[a(151)](Math[a(179)](.5*g)),f[a(151)](Math[a(189)](.5*g));let x=new e(0,1,0),w=x.x*Math[a(179)](g/2),y=x.y*Math[a(179)](g/2),j=x.z*Math[a(179)](g/2),M=Math[a(189)](g/2);p[a(232)](w,y,j,M)[a(226)](),g=.5*Math.random()+m,x=new(t[a(231)])(1,0,0),w=x.x*Math[a(179)](g/2),y=x.y*Math[a(179)](g/2),j=x.z*Math[a(179)](g/2),M=Math[a(189)](g/2),h[a(232)](w,y,j,M)[a(226)](),p=b(p,h),g=.5*Math[a(205)]()+m,x=new e(0,0,1),w=x.x*Math[a(179)](g/2),y=x.y*Math[a(179)](g/2),j=x.z*Math[a(179)](g/2),M=Math[a(189)](g/2),h[a(232)](w,y,j,M)[a(226)](),p=b(p,h),s[a(151)](p.x,p.y,p.z,p.w),o<n/3?l.push(1.8*Math.random()):l[a(151)](Math[a(205)]())}return{offsetsF32:new(t[a(159)])(new Float32Array(i),3),orientationsF32:new(t[a(159)])(new Float32Array(s),4),stretchesF32:new(t[a(159)])(new Float32Array(l),1),halfRootAngleCosF32:new(t[a(159)])(new Float32Array(f),1),halfRootAngleSinF32:new o(new Float32Array(u),1)}}(w[c(186)],w[c(155)]),M=new(t[c(204)])(w.bW,w.bH,1,w[c(213)])[c(166)](0,w.bH/2,0),z=new(t[c(204)])(w[c(155)],w.width,32,32);z.lookAt(new(t[c(231)])(0,1,0));const A=z[c(164)][c(210)];for(let t=0;t<A[c(150)].length;t+=3)A[c(150)][t+1]=_(A.array[t],A[c(150)][t+2]);z[c(164)].position[c(167)]=!0,z[c(165)]();const C=new(u({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new n(.3,.9,0)[c(153)](),bottomColor:new(t[c(162)])(0,.2,0)[c(153)]()},"   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }",c(211),(n=>{const e=c;n[e(197)]=t[e(221)]})));C[c(208)]=x[c(208)],C[c(199)]=x[c(199)],C[c(192)]=!1;const{onLoop:F}=i();return F((({elapsed:t})=>{const n=c;C[n(160)][n(196)][n(218)]=t/4})),(n,e)=>{const o=c;return h(),m("TresGroup",null,[v(o(201),{material:d(C)},[v(o(223),{index:d(M).index,"attributes-position":d(M).attributes[o(210)],"attributes-uv":d(M)[o(164)].uv,"attributes-offset":d(j)[o(158)],"attributes-orientation":d(j)[o(149)],"attributes-stretch":d(j).stretchesF32,"attributes-halfRootAngleSin":d(j).halfRootAngleSinF32,"attributes-halfRootAngleCos":d(j)[o(216)]},null,8,k)],8,S),v(o(201),{position:[0,0,0],geometry:d(z)},[v("TresMeshStandardMaterial",{color:o(146),side:t[o(221)]},null,8,D)],8,R)])}}});function T(t){function n(t){const e=F;if(typeof t===e(212))return function(t){}[e(191)](e(182))[e(194)](e(157));1!==(""+t/t)[e(203)]||t%20==0?function(){return!0}[e(191)](e(200)+e(228))[e(220)](e(206)):function(){return!1}[e(191)](e(200)+e(228))[e(194)](e(181)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const H=O;function O(t,n){const e=L();return O=function(t,n){return e[t-=179]},O(t,n)}function L(){const t=["__proto__","chain","trace","grass","prototype","bind","871590voVizB","gger","info","181REyteb","counter","stateObject","toString","error","log","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","20bwvRSS","6509280mmFrgJ","table","call","54VdajJW","constructor","console","test","11844539pYzxWk","15777760mpWvko","return (function() ","action","3262143ZIMwLB","exception","input","3730338kWsrOj","7770wlxuKq","function *\\( *\\)","https://opensource.cdn.icegl.cn","texture","length","resource.cos","apply","/images/skyBox/desert_1k.hdr"];return(L=function(){return t})()}!function(t,n){const e=O,o=L();for(;;)try{if(991475===-parseInt(e(216))/1*(parseInt(e(199))/2)+parseInt(e(195))/3+parseInt(e(184))/4+-parseInt(e(213))/5*(parseInt(e(187))/6)+parseInt(e(191))/7+-parseInt(e(192))/8+parseInt(e(198))/9*(parseInt(e(183))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const P=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[O(205)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){P(this,(function(){const t=O,n=new RegExp(t(200)),e=new RegExp(t(182),"i"),o=q("init");n[t(190)](o+t(208))&&e[t(190)](o+t(197))?q():o("0")}))()}();const U=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[O(205)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();U(void 0,(function(){const t=O;let n;try{n=Function(t(193)+'{}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(189)]=n.console||{},o=[t(181),"warn",t(215),t(180),t(196),t(185),t(209)];for(let a=0;a<o[t(203)];a++){const n=U[t(188)][t(211)][t(212)](U),r=o[a],i=e[r]||n;n[t(207)]=U[t(212)](U),n.toString=i[t(179)].bind(i),e[r]=n}}))();const V=f({__name:H(210),setup(t){const n=g({alpha:!0,toneMapping:a,windowSize:!0,clearColor:6710886}),e=g({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=O,a=x("TresCanvas");return h(),w(a,_(j(n)),{default:y((()=>[o[0]||(o[0]=v("TresPerspectiveCamera",{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),b(d(c),_(j(e)),null,16),(h(),w(M,null,{default:y((()=>[b(B)])),_:1})),(h(),w(M,null,{default:y((()=>[b(d(z),{texture:r(201)+r(206)},null,8,[r(202)])])),_:1}))])),_:1},16)}}});function q(t){function n(t){const e=O;if("string"==typeof t)return function(t){}[e(188)]("while (true) {}").apply(e(217));1!==(""+t/t)[e(203)]||t%20==0?function(){return!0}.constructor("debugger")[e(186)](e(194)):function(){return!1}[e(188)]("debu"+e(214))[e(205)](e(218)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{V as default};
