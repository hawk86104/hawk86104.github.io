import{_ as t,s as n,a0 as e,ar as o,T as r,ai as a}from"./three.LxxvsMJG1742205305014.js";import{e as i,a as s,o as c}from"./@tresjs.nk0nhZ9a1742205305014.js";import"./index.Hv0I9r_n1742205305014.js";import{c as l}from"./simplex-noise.jB2HxhHB1742205305014.js";import{C as u}from"./index.KoRDsF6I1742205305014.js";import{d as f,a3 as p,o as h,H as m,N as v,u as d,r as g,e as x,f as w,g as y,j as b,aj as _,ak as j,al as M}from"./@vue.NRI7TcgI1742205305014.js";import{_ as z}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.46pmBJiE1742205305014.js";import"./postprocessing.lrLv6HE21742205305014.js";import"./@vueuse.w6JAmAgA1742205305014.js";import"./lamina.IQaZk_Ce1742205305014.js";import"./glsl-tokenizer.cEgYKGGV1742205305014.js";import"./@amap.sbhX68WO1742205305014.js";import"./glsl-token-descope.M4avg2yP1742205305014.js";import"./glsl-token-depth.Iex18u171742205305014.js";import"./glsl-token-scope.D4qLTPfs1742205305014.js";import"./glsl-token-properties.smyB9Lke1742205305014.js";import"./glsl-token-assignments.Lr7Pj_351742205305014.js";import"./glsl-token-string.pty48RMx1742205305014.js";import"./glsl-token-functions.zSL5ewaM1742205305014.js";import"./object-hash.dbNkxbaC1742205305014.js";import"./jszip.SZt2c-at1742205305014.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.d58CHUuV1742205305014.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.r6rmjbPf1742205305014.js";import"./three-stdlib.VHPWJjlE1742205305014.js";import"./@pmndrs.kWqDV5VA1742205305014.js";import"./utils.yJJs36td1742205305014.js";const I=S;!function(t,n){const e=S,o=k();for(;;)try{if(110736===parseInt(e(344))/1*(-parseInt(e(361))/2)+parseInt(e(299))/3+-parseInt(e(324))/4+-parseInt(e(336))/5*(-parseInt(e(306))/6)+parseInt(e(318))/7+-parseInt(e(358))/8+parseInt(e(349))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){A(this,(function(){const t=S,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(351),"i"),o=P("init");n.test(o+t(332))&&e[t(353)](o+"input")?P():o("0")}))()}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[S(347)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function k(){const t=["push","length","22494xOpOhn","counter","value","orientationsF32","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","index","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","exception","while (true) {}","attributes","TresMeshStandardMaterial","action","1543696KDaPBm","InstancedBufferAttribute","cos","debu","geometry","uniforms","519432FvTnwe","sin","constructor","TresInstancedBufferGeometry","attributes-uv","side","attributes-offset","needsUpdate","chain",'{}.constructor("return this")( )',"instances","alphaMap","285AksAby","stateObject","toString","call","attributes-halfRootAngleSin","map","TresMesh","error","439kfIZbY","time","Color","apply","#000f00","516492hCvekQ","random","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","Vector4","test","PlaneGeometry","stretchesF32","set","joints","1005392NUadsI","array","halfRootAngleSinF32","830qDfyBj","material","return (function() ","normalize","bind","log","position","trace","DoubleSide","translate","offsetsF32","width","lookAt","170532LeztPu","gger","halfRootAngleCosF32","attributes-halfRootAngleCos","Vector3"];return(k=function(){return t})()}function S(t,n){const e=k();return(S=function(t,n){return e[t-=297]})(t,n)}C(void 0,(function(){const t=S;let n;try{n=Function(t(363)+t(333)+");")()}catch(r){n=window}const e=n.console=n.console||{},o=[t(366),"warn","info",t(343),t(313),"table",t(368)];for(let a=0;a<o.length;a++){const n=C[t(326)].prototype[t(365)](C),r=o[a],i=e[r]||n;n.__proto__=C[t(365)](C),n[t(338)]=i.toString[t(365)](i),e[r]=n}}))();const D=[I(362)],R=[I(311),"attributes-position",I(328),I(330),"attributes-orientation","attributes-stretch",I(340),I(302)],F=[I(322)],T=[I(329)],O=f({__name:"grass",props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(a){const c=I;let f,g;const x=([f,g]=p((()=>s({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),f=await f,g(),f),w=a,y=l(Math[c(350)]);function b(t,n){const e=t.x*n.w+t.y*n.z-t.z*n.y+t.w*n.x,r=-t.x*n.z+t.y*n.w+t.z*n.x+t.w*n.y,a=t.x*n.y-t.y*n.x+t.z*n.w+t.w*n.z,i=-t.x*n.x-t.y*n.y-t.z*n.z+t.w*n.w;return new o(e,r,a,i)}function _(t,n){var e=2*y(t/50,n/50);return e+=4*y(t/100,n/100),e+=.2*y(t/10,n/10)}const j=function(n,e){const a=c,i=[],s=[],l=[],u=[],f=[];let p=new o,h=new(t[a(352)]);const m=-.25;for(let o=0;o<n;o++){const r=Math[a(350)]()*e-e/2,c=Math[a(350)]()*e-e/2,v=_(r,c);i[a(304)](r,v,c);let d=Math.PI-Math[a(350)]()*(2*Math.PI);u[a(304)](Math[a(325)](.5*d)),f[a(304)](Math[a(320)](.5*d));let g=new(t[a(303)])(0,1,0),x=g.x*Math.sin(d/2),w=g.y*Math.sin(d/2),y=g.z*Math[a(325)](d/2),j=Math.cos(d/2);p[a(356)](x,w,y,j)[a(364)](),d=.5*Math.random()+m,g=new(t[a(303)])(1,0,0),x=g.x*Math[a(325)](d/2),w=g.y*Math[a(325)](d/2),y=g.z*Math.sin(d/2),j=Math[a(320)](d/2),h[a(356)](x,w,y,j)[a(364)](),p=b(p,h),d=.5*Math.random()+m,g=new(t[a(303)])(0,0,1),x=g.x*Math.sin(d/2),w=g.y*Math[a(325)](d/2),y=g.z*Math[a(325)](d/2),j=Math[a(320)](d/2),h[a(356)](x,w,y,j)[a(364)](),p=b(p,h),s[a(304)](p.x,p.y,p.z,p.w),o<n/3?l[a(304)](1.8*Math.random()):l.push(Math[a(350)]())}return{offsetsF32:new r(new Float32Array(i),3),orientationsF32:new(t[a(319)])(new Float32Array(s),4),stretchesF32:new(t[a(319)])(new Float32Array(l),1),halfRootAngleCosF32:new(t[a(319)])(new Float32Array(f),1),halfRootAngleSinF32:new(t[a(319)])(new Float32Array(u),1)}}(w[c(334)],w[c(297)]),M=new(t[c(354)])(w.bW,w.bH,1,w[c(357)])[c(370)](0,w.bH/2,0),z=new n(w[c(297)],w.width,32,32);z[c(298)](new(t[c(303)])(0,1,0));const A=z[c(315)].position;for(let t=0;t<A[c(359)][c(305)];t+=3)A.array[t+1]=_(A[c(359)][t],A[c(359)][t+2]);z[c(315)].position[c(331)]=!0,z.computeVertexNormals();const C=new(u({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(t[c(346)])(.3,.9,0).convertSRGBToLinear(),bottomColor:new(t[c(346)])(0,.2,0).convertSRGBToLinear()},c(310),c(312),(n=>{const e=c;n.side=t[e(369)]})));C[c(341)]=x[c(341)],C[c(335)]=x[c(335)],C.toneMapped=!1;const{onLoop:k}=i();return k((({elapsed:t})=>{const n=c;C[n(323)][n(345)][n(308)]=t/4})),(t,n)=>{const o=c;return h(),m("TresGroup",null,[v(o(342),{material:d(C)},[v(o(327),{index:d(M).index,"attributes-position":d(M).attributes[o(367)],"attributes-uv":d(M)[o(315)].uv,"attributes-offset":d(j)[o(371)],"attributes-orientation":d(j)[o(309)],"attributes-stretch":d(j)[o(355)],"attributes-halfRootAngleSin":d(j)[o(360)],"attributes-halfRootAngleCos":d(j)[o(301)]},null,8,R)],8,D),v("TresMesh",{position:[0,0,0],geometry:d(z)},[v(o(316),{color:o(348),side:e},null,8,T)],8,F)])}}});function P(t){function n(t){const e=S;if("string"==typeof t)return function(t){}[e(326)](e(314))[e(347)](e(307));1!==(""+t/t)[e(305)]||t%20==0?function(){return!0}[e(326)]("debu"+e(300))[e(339)](e(317)):function(){return!1}[e(326)](e(321)+"gger")[e(347)](e(337)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const B=E;!function(t,n){const e=E,o=L();for(;;)try{if(641090===-parseInt(e(166))/1*(-parseInt(e(155))/2)+-parseInt(e(144))/3+parseInt(e(165))/4*(parseInt(e(140))/5)+parseInt(e(146))/6*(-parseInt(e(157))/7)+-parseInt(e(152))/8*(-parseInt(e(141))/9)+-parseInt(e(160))/10+-parseInt(e(171))/11*(-parseInt(e(151))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[E(159)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){G(this,(function(){const t=E,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(173),"i"),o=U("init");n.test(o+"chain")&&e[t(147)](o+"input")?U():o("0")}))()}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[E(159)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function E(t,n){const e=L();return(E=function(t,n){return e[t-=140]})(t,n)}function L(){const t=["test","bind","table","TresPerspectiveCamera","19392DsDGIc","9985264wrodDO","string","TresCanvas","992798aGdGSF","stateObject","336063zvkglq","info","apply","11578800VOfHJk","trace","toString","console","length","4mbqPGR","1qXlcpp","texture","return (function() ","debu","call","2277RSJWrj","grass","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","counter",'{}.constructor("return this")( )',"exception","warn","4456805vWyCbG","9kwjBcp","constructor","__proto__","345786ogWrHG","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com","132pOfnvj"];return(L=function(){return t})()}H(void 0,(function(){const t=E;let n;try{n=Function(t(168)+t(175)+");")()}catch(r){n=window}const e=n[t(163)]=n[t(163)]||{},o=["log",t(177),t(158),"error",t(176),t(149),t(161)];for(let a=0;a<o[t(164)];a++){const n=H[t(142)].prototype[t(148)](H),r=o[a],i=e[r]||n;n[t(143)]=H.bind(H),n[t(162)]=i.toString.bind(i),e[r]=n}}))();const q=f({__name:B(172),setup(t){const n=g({alpha:!0,toneMapping:a,windowSize:!0,clearColor:6710886}),e=g({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=E,a=x(r(154));return h(),w(a,_(j(n)),{default:y((()=>[o[0]||(o[0]=v(r(150),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),b(d(c),_(j(e)),null,16),(h(),w(M,null,{default:y((()=>[b(O)])),_:1})),(h(),w(M,null,{default:y((()=>[b(d(z),{texture:r(145)+"/images/skyBox/desert_1k.hdr"},null,8,[r(167)])])),_:1}))])),_:1},16)}}});function U(t){function n(t){const e=E;if(typeof t===e(153))return function(t){}.constructor("while (true) {}")[e(159)](e(174));1!==(""+t/t)[e(164)]||t%20==0?function(){return!0}[e(142)]("debugger")[e(170)]("action"):function(){return!1}[e(142)](e(169)+"gger")[e(159)](e(156)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{q as default};
