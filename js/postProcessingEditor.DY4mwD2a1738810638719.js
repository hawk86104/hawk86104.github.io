import{m as t,e as n,a as e,o}from"./@tresjs.8axf5yqM1738810638719.js";import{_ as r,b as a,ar as s,aV as i,W as l,aR as c,c2 as u,bk as v,r as f}from"./three.6w8Allze1738810638719.js";import{P as p}from"./tweakpane.yDiyAAkA1738810638719.js";import{d,a3 as m,e as g,o as x,f as h,g as y,N as I,j as b,u as _,aj as S,ak as U,al as w,m as P}from"./@vue.NRI7TcgI1738810638719.js";import{_ as D}from"./@fesjs.5sDv5KaN1738810638719.js";import"./@vueuse.hJpps2zM1738810638719.js";import"./vue-router.bGXYs4Br1738810638719.js";import"./lodash-es.pklfUAS51738810638719.js";import"./@qlin.yHhFDldE1738810638719.js";import"./pinia.a31yeUkM1738810638719.js";import"./@floating-ui.BPbuo5Gx1738810638719.js";import"./@juggle.7yjBMqoW1738810638719.js";!function(t,n){const e=C,o=M();for(;;)try{if(499245===-parseInt(e(198))/1+-parseInt(e(195))/2*(-parseInt(e(181))/3)+-parseInt(e(227))/4*(parseInt(e(224))/5)+parseInt(e(187))/6+parseInt(e(228))/7*(-parseInt(e(178))/8)+parseInt(e(186))/9+parseInt(e(197))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const E=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(203)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){E(this,(function(){const t=C,n=new RegExp(t(223)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=z(t(182));n[t(219)](o+t(220))&&e[t(219)](o+t(192))?z():o("0")}))()}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(203)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function M(){const t=["3351752RbVFgN","539FSBCni","return (function() ","lastIndex",'" load was aborted.',"info","WagnerLoadShaderException","onload",'{}.constructor("return this")( )',"prototype","while (true) {}","Matrix2","get","Matrix3","v3v","ShaderMaterial","8520fgFGQb","index","console","39138HEERld","init","string","log","type","1297665RzhbOX","3142104aZXLvk","hasOwnProperty","__proto__","debu","Texture","input","object","replace","38jOYztU",'Shader "',"12454820UUAnAR","742037qRYykv","warn","message","length","Matrix4","apply","call","action","Vector4","stateObject","trace","bind","Vector2","value","name","toString","Vector3","isArray","constructor","exec","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","test","chain","counter","random","function *\\( *\\)","5JiBkpB","onerror","\" couldn't be loaded."];return(M=function(){return t})()}A(void 0,(function(){const t=C,n=function(){const t=C;let n;try{n=Function(t(229)+t(235)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(180)]||{},o=[t(184),t(199),t(232),"error","exception","table",t(208)];for(let r=0;r<o[t(201)];r++){const n=A.constructor[t(236)][t(209)](A),a=o[r],s=e[a]||n;n[t(189)]=A[t(209)](A),n.toString=s[t(213)][t(209)](s),e[a]=n}}))();function L(t,n,e){const o=C;if(typeof t!==o(193)||null===t)return t;const r=Array[o(215)](t)?[]:{};for(const a in t)t[o(188)](a)&&(r[a]=L(t[a])),a==n&&(r[n]=e);return r}function C(t,n){const e=M();return(C=function(t,n){return e[t-=173]})(t,n)}function z(t){function n(t){const e=C;if(typeof t===e(183))return function(t){}[e(216)](e(237))[e(203)](e(221));1!==(""+t/t).length||t%20==0?function(){return!0}[e(216)](e(190)+"gger")[e(204)](e(205)):function(){return!1}[e(216)](e(190)+"gger")[e(203)](e(207)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const F=T;function T(t,n){const e=B();return(T=function(t,n){return e[t-=279]})(t,n)}!function(t,n){const e=T,o=B();for(;;)try{if(445394===-parseInt(e(349))/1+parseInt(e(288))/2+parseInt(e(353))/3+parseInt(e(369))/4*(parseInt(e(362))/5)+parseInt(e(322))/6*(-parseInt(e(332))/7)+-parseInt(e(299))/8*(parseInt(e(300))/9)+parseInt(e(359))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const N=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[T(279)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){N(this,(function(){const t=T,n=new RegExp(t(342)),e=new RegExp(t(306),"i"),o=j(t(373));n[t(379)](o+t(296))&&e[t(379)](o+t(308))?j():o("0")}))()}();const R=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function B(){const t=["warn","MeshBasicMaterial","time","uniforms","Stack","stencilBuffer","722658NOeWZV","table","type","quad","material","Reset","width","CopyPass","ShaderMaterial","debu","28TUYCmR","RGBFormat","prototype","tInput","PlaneGeometry","clone","removePass","passItems","action","while (true) {}","function *\\( *\\)","push","constructor","set","gger","settings","scene","467005kahtkc","scale","copyPass","Scene","1595736fbTJKd","shader","setSize","UnsignedByteType","stateObject","pass","9391150bCJKaz","setRenderTarget","splice","5860WCRHOB","useRGBA","length","makePerspective","__proto__","wrapS","OrthographicCamera","1732odUoFM","Pass","addPass","counter","init","front","console","projectionMatrix","bind","log","test","passes","texture","params","write","apply","innerWidth","near","innerHeight","height","WebGLRenderTarget","render","RGBAFormat","onWindowResize","127130SQjDwD","error","camera","wrapT","swapBuffers","LinearFilter","minFilter","back","chain","now","call","8hWTlOm","5831073paJVYk","add","renderer","read","magFilter","loadShadervf","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","Mesh","input","far","makeOrthographic","resolution","ClampToEdgeWrapping","value","toString","getOfflineTexture"];return(B=function(){return t})()}R(void 0,(function(){const t=T,n=function(){let t;try{t=Function('return (function() {}.constructor("return this")( ));')()}catch(n){t=window}return t}(),e=n[t(375)]=n[t(375)]||{},o=["log",t(316),"info",t(289),"exception",t(323),"trace"];for(let r=0;r<o[t(364)];r++){const n=R[t(344)][t(334)][t(377)](R),a=o[r],s=e[a]||n;n[t(366)]=R.bind(R),n[t(314)]=s[t(314)][t(377)](s),e[a]=n}}))();class G{constructor(t,n){const e=T;this.width=1,this.height=1,this.settings=n||{},this[e(363)]=this[e(347)][e(363)]||!1,this[e(302)]=t,this[e(351)]=this.CopyPass(this.settings),this[e(348)]=new(r[e(352)]),this[e(325)]=new(r[e(307)])(new(r[e(336)])(1,1),new(r[e(317)])),this[e(348)][e(301)](this.quad),this[e(290)]=new(r[e(368)])(1,1,1,1,-1e4,1e4),this[e(374)]=new(r[e(284)])(1,1,{minFilter:void 0!==this[e(347)][e(294)]?this.settings[e(294)]:r[e(293)],magFilter:void 0!==this[e(347)][e(304)]?this[e(347)][e(304)]:r[e(293)],wrapS:void 0!==this[e(347)][e(367)]?this[e(347)].wrapS:r[e(312)],wrapT:void 0!==this[e(347)][e(291)]?this[e(347)][e(291)]:i,format:this[e(363)]?r[e(286)]:r[e(333)],type:void 0!==this[e(347)][e(324)]?this.settings.type:r[e(356)],stencilBuffer:void 0===this[e(347)].stencilBuffer||this[e(347)][e(321)]}),this[e(295)]=this.front[e(337)](),this.startTime=Date[e(297)](),this[e(380)]={},this.Stack={passItems:[],passes:[]}}[F(371)](t,n,e,o){const r=F;this[r(305)](n);const a={shaderName:t,params:e,uuid:o,shader:this[r(354)]};this[r(320)][r(339)][r(343)](a)}[F(338)](t){const n=F;for(let e=this[n(320)].passItems[n(364)]-1;e>=0;e--)this[n(320)][n(339)][e].uuid===parseInt(t)&&this.Stack[n(339)][n(361)](e,1);console[n(378)](this[n(320)][n(339)])}[F(329)](){const t=F;this[t(370)][t(298)](this);return this.loadShadervf("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[F(305)](t){return this[F(354)]=function(t,n){const e=C,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,i=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,l={sampler2D:{type:"t",value:()=>new(r[C(191)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[C(210)])},vec3:{type:"v3",value:()=>new a},vec4:{type:"v4",value:()=>new s},bvec2:{type:"v2",value:()=>new(r[C(210)])},bvec3:{type:"v3",value:()=>new a},bvec4:{type:"v4",value:()=>new(r[C(206)])},ivec2:{type:"v2",value:()=>new(r[C(210)])},ivec3:{type:"v3",value:()=>new(r[C(214)])},ivec4:{type:"v4",value:()=>new(r[C(206)])},mat2:{type:"v2",value:()=>new(r[C(173)])},mat3:{type:"v3",value:()=>new(r[C(175)])},mat4:{type:"v4",value:()=>new(r[C(202)])}},c={float:{type:"fv",value:()=>[]},vec3:{type:e(176),value:()=>[]}};let u;const v={resolution:{type:"v2",value:new(r[e(210)])(1,1),default:!0},time:{type:"f",value:Date.now(),default:!0},tInput:{type:"t",value:new(r[e(191)]),default:!0}};let f,p;for(;null!==(u=o[e(217)](n));)u[e(179)]===o[e(230)]&&o[e(230)]++,f=u[1],p=u[2],v[p]={type:l[f][e(185)],value:l[f][e(211)]()};for(;null!==(u=i[e(217)](n));)u[e(179)]===o[e(230)]&&o[e(230)]++,f=u[1],p=u[2],u[3],v[p]={type:c[f][e(185)],value:c[f][e(211)]()};return new(r[e(177)])({uniforms:v,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}("varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }",t),this.shader}[F(370)](t){const n=F;this.shader=null,this[n(382)]={}}[F(327)](){const t=F;this[t(303)]=this[t(374)],this.write=this[t(295)]}[F(287)](t,n){const e=F,o=window[e(280)],r=window[e(282)];t.setSize(1*o,1*r),n.projectionMatrix[e(365)](70,o/r,n[e(281)],n.far),this[e(355)](o,r);return this[e(315)](o,r,!0)}setSize(t,n){const e=F;this[e(328)]=t,this.height=n,this[e(290)][e(376)][e(310)](t/-2,t/2,n/2,n/-2,this[e(290)].near,this[e(290)][e(309)]),this.quad[e(350)].set(t,n,1),this.front[e(355)](t,n),this[e(295)][e(355)](t,n)}getOfflineTexture(t,n,e){const o=F;return new l(t,n,{minFilter:r[o(293)],magFilter:r[o(293)],format:e?c:r[o(333)]})}[F(285)](t,n,e,o){const r=F;this.renderer.setRenderTarget(this.write),this[r(302)][r(285)](t,n),o||this[r(292)]()}[F(292)](){const t=F,n=this[t(383)];this.write=this[t(303)],this[t(303)]=n}[F(358)](){const t=F;for(let n=0;n<this[t(320)].passItems.length;n++){const e=this.Stack[t(339)][n][t(354)],o=this[t(320)][t(339)][n][t(382)];if(this[t(302)].setRenderTarget(this[t(383)]),e instanceof r[t(330)]){this[t(325)][t(326)]=e,this.quad[t(326)].uniforms[t(335)][t(313)]=this[t(303)][t(381)],this[t(325)][t(326)].uniforms.resolution.value[t(345)](this[t(328)],this[t(283)]),this[t(325)][t(326)][t(319)][t(318)][t(313)]=.001*(Date.now()-this.startTime);for(const n in o)this[t(325)].material.uniforms[n].value=o[n];this[t(302)][t(285)](this[t(348)],this[t(290)]),this[t(292)]()}}}toScreen(t,n){const e=F;this[e(302)][e(360)](null),this.quad.material=this[e(351)],this[e(325)][e(326)][e(319)].tInput[e(313)]=this.read[e(381)],this.quad[e(326)][e(319)][e(311)][e(313)][e(345)](this.width,this[e(283)]),this[e(302)][e(285)](this[e(348)],this[e(290)])}}function j(t){function n(t){const e=T;if("string"==typeof t)return function(t){}[e(344)](e(341))[e(279)](e(372));1!==(""+t/t)[e(364)]||t%20==0?function(){return!0}.constructor("debu"+e(346))[e(298)](e(340)):function(){return!1}[e(344)](e(331)+e(346))[e(279)](e(357)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const O="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",V=H;!function(t,n){const e=H,o=X();for(;;)try{if(929036===-parseInt(e(200))/1+-parseInt(e(206))/2*(parseInt(e(223))/3)+parseInt(e(220))/4+-parseInt(e(186))/5*(parseInt(e(165))/6)+parseInt(e(229))/7+parseInt(e(234))/8*(parseInt(e(192))/9)+-parseInt(e(207))/10*(parseInt(e(205))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const k=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[H(172)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function H(t,n){const e=X();return(H=function(t,n){return e[t-=155]})(t,n)}!function(){k(this,(function(){const t=H,n=new RegExp("function *\\( *\\)"),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=q(t(156));n[t(226)](o+"chain")&&e[t(226)](o+t(218))?q():o("0")}))()}();const W=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[H(172)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function X(){const t=["5000394elczhx",'{}.constructor("return this")( )',"values","addButton","CGAPass","1949800zzQgWr","removePass","translate","counter","warn","map","后处理类型","prototype","init","BoxGeometry","constructor","dispose","pass","table","change","string","plugins/postProcessing/image/1324-normal.jpg","6uPMIpG","DOTPass","移除~","DENOISEPass","castShadow","console","toScreen","apply","TOONPass","random","InvertPass","click","postProcessing","push","value","trace","SOBELPass","FREICHENPass","exception","target","action","2475500DinMyL","新增通道","while (true) {}","list","BOXBLURPass","autoClearColor","45WvfkoV","plugins/postProcessing/image/1324.jpg","bind","Reset","RGBPass","addFolder","call","text","1210419uemdvj","label","BufferGeometry","error","length","4847821flCuAr","1301946JqkuRz","10sEAmtN","SEPIAPass","__proto__","toString","SNOISEPass","CIRCULARPass","log","material","mergeGeometries","FXAAPass","VIGNETTE1Pass","input","关闭通道","7173088wPeIDs","VIGNETTE2Pass","info","3NwTtMJ","Vector2","addPass","test","addBlade","debu"];return(X=function(){return t})()}W(void 0,(function(){const t=H;let n;try{n=Function("return (function() "+t(230)+");")()}catch(r){n=window}const e=n.console=n[t(170)]||{},o=[t(213),t(238),t(222),t(203),t(183),t(161),t(180)];for(let a=0;a<o.length;a++){const n=W[t(158)][t(155)][t(194)](W),r=o[a],s=e[r]||n;n[t(209)]=W.bind(W),n.toString=s[t(210)].bind(s),e[r]=n}}))();function q(t){function n(t){const e=H;if(typeof t===e(163))return function(t){}[e(158)](e(188))[e(172)](e(237));1!==(""+t/t)[e(204)]||t%20==0?function(){return!0}.constructor(e(228)+"gger")[e(198)](e(185)):function(){return!1}[e(158)]("debugger")[e(172)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const Z=D(d({__name:V(177),async setup(o){const a=V;let s,i;const{camera:l,renderer:c,scene:d,sizes:g}=t();for(var x=new(r[a(202)]),h=[],y=0;y<100;y++){var I=new(r[a(157)])(100,100,100);I[a(236)](1500*Math[a(174)](),1500*Math[a(174)](),1500*Math[a(174)]()),h[a(178)](I)}x=u[a(215)](h);const b=([s,i]=m((()=>e({map:a(193)}))),s=await s,i(),s),_=([s,i]=m((()=>e({map:a(164)}))),s=await s,i(),s);var S=new v({map:b[a(239)],normalMap:_[a(239)],normalScale:new(r[a(224)])(.8,-.8),shininess:100}),U=new f(x,S);U[a(169)]=!0,U.receiveShadow=!0,d[a(179)].add(U);const w=new G(c[a(179)],{useRGBA:!0}),P=new p;let D=null,E=[{text:"InvertPass",value:{InvertPass:O}},{text:a(216),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:a(208),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:a(211),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:a(190),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:a(168),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:a(233),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:_[a(239)]}}},{text:a(181),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:a(196),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:a(166),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:a(212),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:"POISSONPass",value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:a(217),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:a(221),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:a(182),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:a(173),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],A=a(175),M=O,C=null;P.addBlade({view:a(189),label:a(240),options:E,value:""}).on(a(162),(t=>{D=t.value}));const z=P[a(232)]({title:"新增",label:a(187)});let F=0;z.on(a(176),(t=>{const n=a;A=Object.keys(D)[0],M=Object.values(D)[0],C=Object[n(231)](D)[1];let e=F++,o=P[n(197)]({title:A});for(const a in C){let t=C[a];o[n(227)]({view:n(199),label:a,parse:t=>String(t),value:t})}o[n(232)]({title:n(167)+e,label:n(219)}).on(n(176),(t=>{const e=n;let o=t[e(184)].title.split("~")[1];w[e(235)](o)})).on(n(176),(()=>{o[n(159)]()}));let r=L(C,t[n(184)][n(201)],t.value);w[n(225)](A,M,r,e)})),w.onWindowResize(c[a(179)],l[a(179)]);const{onLoop:T}=n();return T((({delta:t})=>{const n=a;U&&(c[n(179)][n(191)]=!0,w[n(195)](),U[n(214)]=S,w.render(d.value,l[n(179)]),w[n(160)](),w[n(171)](d[n(179)],l[n(179)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),$=Q;!function(t,n){const e=Q,o=Y();for(;;)try{if(443393===-parseInt(e(494))/1+parseInt(e(493))/2*(parseInt(e(521))/3)+parseInt(e(491))/4*(-parseInt(e(515))/5)+-parseInt(e(519))/6+parseInt(e(489))/7+-parseInt(e(482))/8+-parseInt(e(501))/9*(-parseInt(e(516))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const J=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Q(497)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){J(this,(function(){const t=Q,n=new RegExp(t(500)),e=new RegExp(t(486),"i"),o=et(t(502));n.test(o+"chain")&&e[t(485)](o+t(487))?et():o("0")}))()}();const K=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Q(497)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function Q(t,n){const e=Y();return(Q=function(t,n){return e[t-=482]})(t,n)}function Y(){const t=["init","constructor","#ffffff","TresDirectionalLight","toString","return (function() ","call","#000000","postProcessingEditor","log","warn","perspectiveCameraRef","string","3826415nllKID","14090710egjBXt","prototype","console","3597432WEpjam","stateObject","279wsPZfj","4042840CAQpiE","__proto__","counter","test","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","input","debu","2358195BPIPKa","bind","4liKGQK","while (true) {}","18528bShvjL","293905EprsOq","trace","manual","apply","info","action","function *\\( *\\)","9IfqGTT"];return(Y=function(){return t})()}K(void 0,(function(){const t=Q;let n;try{n=Function(t(507)+'{}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(518)]=n[t(518)]||{},o=[t(511),t(512),t(498),"error","exception","table",t(495)];for(let a=0;a<o.length;a++){const n=K[t(503)][t(517)][t(490)](K),r=o[a],s=e[r]||n;n[t(483)]=K.bind(K),n[t(506)]=s.toString[t(490)](s),e[r]=n}}))();const tt={ref:$(513),position:[600,850,-1500],fov:45,near:.1,far:1e5},nt=d({__name:$(510),setup(t){const e=$,r={clearColor:e(509),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(496)},a={autoRotate:!0,enableDamping:!0},{onLoop:s}=n();return s((({delta:t})=>{})),(t,n)=>{const s=e,i=g("TresCanvas");return x(),h(i,P(r,{"window-size":""}),{default:y((()=>[I("TresPerspectiveCamera",tt,null,512),b(_(o),S(U(a)),null,16),n[0]||(n[0]=I("TresAmbientLight",{color:s(504),intensity:2},null,-1)),n[1]||(n[1]=I(s(505),{position:[100,100,0],intensity:2,color:"#ffffff"},null,-1)),(x(),h(w,null,{default:y((()=>[b(Z)])),_:1}))])),_:1},16)}}});function et(t){function n(t){const e=Q;if(typeof t===e(514))return function(t){}[e(503)](e(492))[e(497)](e(484));1!==(""+t/t).length||t%20==0?function(){return!0}[e(503)](e(488)+"gger")[e(508)](e(499)):function(){return!1}[e(503)]("debugger")[e(497)](e(520)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{nt as default};
