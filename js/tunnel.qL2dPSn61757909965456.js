import{e,a as n}from"./@tresjs.SQYUeS5s1757909965456.js";import{bQ as a,a3 as s}from"./three.BsQcsDwn1757909965456.js";import{s as i}from"./argestCircle.CQftMb9H1757909965456.js";import{d as r,h as o,e as t,o as l,f as u,I as f,j as v,u as c,a7 as m,a8 as d,m as p}from"./@vue.pEDXJ_3Z1757909965456.js";import"./postprocessing.B119XRU11757909965456.js";import"./@vueuse.CbmzGplN1757909965456.js";const T={ref:"perspectiveCameraRef",position:[600,750,-1221],fov:45,near:1,far:1e4},g=["rotation-x"],h=r({__name:"tunnel",setup(r){const h={clearColor:"#000000",shadows:!0,alpha:!1,useLegacyLights:!0},x={autoRotate:!0,enableDamping:!0},C={uniforms:{uTime:{type:"f",value:0}},vertexShader:i,fragmentShader:"\nvarying vec2 vUv;\nuniform float uTime;\nvec3 palette(float t) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(sin(uTime * 0.2) * 0.5 + 0.5, cos(uTime * 0.25) * 0.5 + 0.5, sin(uTime * 0.3 + 1.0) * 0.5 + 0.5);\n    \n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nvoid main(){\n    vec2 uv = vUv-vec2(0.5);\n    \n    float angle = atan(uv.y, uv.x);\n    float radius = length(uv);\n    \n    int sides = int(5.0 + 4.0 * sin(uTime * 0.5)); \n    angle = mod(angle, 6.28318 / float(sides)) * float(sides);\n    \n    vec2 uv0 = vec2(radius, angle);\n    vec3 finalColor = vec3(0.0);\n    \n    for(float i = 0.0; i < 5.0; i++) {\n        uv0.x = fract(uv0.x * (1.5 + 0.1 * sin(uTime)));\n        \n        float d = uv0.x * exp(-radius);\n\n        vec3 col = palette(uv0.x + i * 0.4 + uTime * 0.4);\n\n        d = sin(d * (8.0 + 4.0 * sin(uTime * 0.1)) + uTime) / 8.0;\n        d = abs(d);\n\n        d = pow(0.01 / d, 1.2 + 0.1 * sin(uTime));\n\n        finalColor += col * d;\n    }\n    \n    gl_FragColor = vec4(finalColor, 1.0);\n}\n",side:s,blending:a,depthWrite:!1,transparent:!0},{onLoop:j}=e();return j((({delta:e})=>{C.uniforms.uTime.value+=e})),(e,a)=>{const s=o("TresCanvas");return l(),t(s,p(h,{"window-size":""}),{default:u((()=>[f("TresPerspectiveCamera",T,null,512),v(c(n),m(d(x)),null,16),a[1]||(a[1]=f("TresAmbientLight",{color:"#ffffff"},null,-1)),a[2]||(a[2]=f("TresDirectionalLight",{position:[100,100,0],intensity:.5,color:"#ffffff"},null,-1)),f("TresMesh",{ref:"quanMeshRef",position:[0,100,0],"rotation-x":2*Math.PI/360*90},[a[0]||(a[0]=f("TresPlaneGeometry",{args:[1e3,1e3]},null,-1)),f("TresShaderMaterial",m(d(C)),null,16)],8,g),a[3]||(a[3]=f("TresAxesHelper",{args:[1e3],position:[0,19,0]},null,-1)),a[4]||(a[4]=f("TresGridHelper",{args:[6e3,100],position:[0,19,0]},null,-1))])),_:1},16)}}});export{h as default};
