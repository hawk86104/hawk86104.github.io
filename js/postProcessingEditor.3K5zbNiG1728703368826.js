import{p as t,U as n,z as e,Y as o}from"./@tresjs.JhHPALEY1728703368826.js";import{_ as r,V as s,at as a,q as i,n as c,bg as l,b6 as u,cK as v,A as f,bW as p,bn as d}from"./three.VoknrmS61728703368826.js";import{P as m}from"./tweakpane.yHWGBmom1728703368826.js";import{d as g,a4 as x,e as h,o as y,f as I,g as b,L as _,j as S,u as U,aj as w,ak as P,al as D,m as E}from"./@vue.JNsx1iN61728703368826.js";import{_ as A}from"./@fesjs.9xYVr0ET1728703368826.js";import"./@vueuse.yeA714RM1728703368826.js";import"./vue-router.mZGR5lVe1728703368826.js";import"./lodash-es.kYt-_xTG1728703368826.js";import"./@qlin.yHhFDldE1728703368826.js";import"./pinia.V-pS4Ukj1728703368826.js";import"./@floating-ui.BPbuo5Gx1728703368826.js";import"./@juggle.7yjBMqoW1728703368826.js";!function(t,n){const e=M,o=C();for(;;)try{if(713499===-parseInt(e(419))/1+-parseInt(e(382))/2*(-parseInt(e(385))/3)+-parseInt(e(433))/4+parseInt(e(413))/5*(-parseInt(e(396))/6)+-parseInt(e(408))/7*(-parseInt(e(394))/8)+-parseInt(e(425))/9*(parseInt(e(392))/10)+parseInt(e(409))/11*(parseInt(e(420))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[M(405)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function M(t,n){const e=C();return(M=function(t,n){return e[t-=372]})(t,n)}function C(){const t=["toString","232090oeLSxT","type","open","15uKygAN","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx",'{}.constructor("return this")( )',"action","get","Vector3","Matrix4","1660HsBYUc","error","379448omKRMp","info","122274gTizHb","message","bind","input","object","v3v","exception","exec","Matrix2","apply","prototype","console","77kXRvoK","913agwjNs","now","random","__proto__","280wJbZIm",'Shader "',"Texture","onabort","init","ShaderMaterial","713199AzCdYh","485796WoefCv","constructor","length","Vector2","Matrix3","44478NlzHQx","WagnerLoadShaderException","send","name","chain","Vector4","isArray","stateObject","4295044LkhdrO","trace",'" load was aborted.',"test","value","return (function() ","lastIndex","gger","call","log","responseText","index"];return(C=function(){return t})()}!function(){L(this,(function(){const t=M,n=new RegExp("function *\\( *\\)"),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=N(t(417));n.test(o+t(429))&&e[t(372)](o+t(399))?N():o("0")}))()}();const z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[M(405)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();z(void 0,(function(){const t=M,n=function(){const t=M;let n;try{n=Function(t(374)+t(387)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(407)]||{},o=[t(378),"warn",t(395),t(393),t(402),"table",t(434)];for(let r=0;r<o[t(422)];r++){const n=z[t(421)][t(406)][t(398)](z),s=o[r],a=e[s]||n;n[t(412)]=z.bind(z),n.toString=a[t(381)].bind(a),e[s]=n}}))();function F(t,n,e){const o=M;if(typeof t!==o(400)||null===t)return t;const r=Array[o(431)](t)?[]:{};for(const s in t)t.hasOwnProperty(s)&&(r[s]=F(t[s])),s==n&&(r[n]=e);return r}function N(t){function n(t){const e=M;if("string"==typeof t)return function(t){}[e(421)]("while (true) {}")[e(405)]("counter");1!==(""+t/t)[e(422)]||t%20==0?function(){return!0}.constructor("debu"+e(376))[e(377)](e(388)):function(){return!1}[e(421)]("debu"+e(376))[e(405)](e(432)),n(++t)}try{if(t)return n;n(0)}catch(e){}}function T(){const t=["call","write","add","ClampToEdgeWrapping","magFilter","stateObject","while (true) {}","console","warn","gger","Pass","155547vovAcI","set","width","addPass","chain","height","error","pass","log","table","front","CopyPass","time","toString",'{}.constructor("return this")( )',"stencilBuffer","4181445aGTEdP","setRenderTarget","constructor","settings","minFilter","makePerspective","loadShadervf","Mesh","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","WebGLRenderTarget","bind","debu","near","camera","counter","action","back","type","clone","splice","scene","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","quad","OrthographicCamera","useRGBA","texture","uniforms","setSize","innerWidth","119788tmkFNF","516RkLvUn","apply","2737160ATKUJO","uuid","PlaneGeometry","onWindowResize","getOfflineTexture","tInput","46LjIyTB","4061994kgjHOr","length","wrapT","15063pxmIYV","resolution","info","function *\\( *\\)","160VZbINy","value","Stack","222189vwQGbM","passes","RGBFormat","projectionMatrix","exception","ShaderMaterial","read","shader","wrapS","startTime","render","LinearFilter","copyPass","7tEeLhQ","renderer","21WcGRKC","string","now","material","return (function() ","params","__proto__","swapBuffers","removePass","input","passItems","MeshBasicMaterial","innerHeight","test"];return(T=function(){return t})()}const R=B;!function(t,n){const e=B,o=T();for(;;)try{if(530723===-parseInt(e(356))/1*(-parseInt(e(352))/2)+-parseInt(e(378))/3*(-parseInt(e(343))/4)+-parseInt(e(314))/5+parseInt(e(353))/6*(-parseInt(e(376))/7)+-parseInt(e(360))/8*(-parseInt(e(403))/9)+parseInt(e(346))/10+-parseInt(e(363))/11*(-parseInt(e(344))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[B(345)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function B(t,n){const e=T();return(B=function(t,n){return e[t-=299]})(t,n)}!function(){G(this,(function(){const t=B,n=new RegExp(t(359)),e=new RegExp(t(322),"i"),o=H("init");n[t(391)](o+t(302))&&e.test(o+t(387))?H():o("0")}))()}();const j=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();j(void 0,(function(){const t=B,n=function(){const t=B;let n;try{n=Function(t(382)+t(312)+");")()}catch(e){n=window}return n}(),e=n[t(399)]=n[t(399)]||{},o=[t(306),t(400),t(358),t(304),t(367),t(307),"trace"];for(let r=0;r<o.length;r++){const n=j[t(316)].prototype[t(324)](j),s=o[r],a=e[s]||n;n[t(384)]=j[t(324)](j),n[t(311)]=a.toString[t(324)](a),e[s]=n}}))();class V{constructor(t,n){const e=B;this[e(300)]=1,this.height=1,this[e(317)]=n||{},this[e(338)]=this[e(317)][e(338)]||!1,this.renderer=t,this[e(375)]=this[e(309)](this[e(317)]),this.scene=new i,this.quad=new(r[e(321)])(new(r[e(348)])(1,1),new(r[e(389)])),this[e(334)][e(394)](this[e(336)]),this[e(327)]=new(r[e(337)])(1,1,1,1,-1e4,1e4),this[e(308)]=new(r[e(323)])(1,1,{minFilter:void 0!==this.settings.minFilter?this.settings[e(318)]:c,magFilter:void 0!==this.settings[e(396)]?this[e(317)][e(396)]:r[e(374)],wrapS:void 0!==this[e(317)][e(371)]?this[e(317)][e(371)]:l,wrapT:void 0!==this[e(317)][e(355)]?this[e(317)][e(355)]:r[e(395)],format:this[e(338)]?u:v,type:void 0!==this[e(317)][e(331)]?this.settings[e(331)]:f,stencilBuffer:void 0===this[e(317)][e(313)]||this[e(317)].stencilBuffer}),this[e(330)]=this[e(308)][e(332)](),this[e(372)]=Date[e(380)](),this[e(364)]={},this[e(362)]={passItems:[],passes:[]}}[R(301)](t,n,e,o){const r=R;this[r(320)](n);const s={shaderName:t,params:e,uuid:o,shader:this.shader};this[r(362)][r(388)].push(s)}[R(386)](t){const n=R;for(let e=this[n(362)][n(388)][n(354)]-1;e>=0;e--)this[n(362)][n(388)][e][n(347)]===parseInt(t)&&this[n(362)][n(388)][n(333)](e,1);console[n(306)](this[n(362)][n(388)])}[R(309)](){this[R(402)].call(this);return this.loadShadervf("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[R(320)](t){const n=R,e=n(335);return this[n(370)]=function(t,n){const e=M,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,i=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,c={sampler2D:{type:"t",value:()=>new(r[M(415)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[M(423)])},vec3:{type:"v3",value:()=>new s},vec4:{type:"v4",value:()=>new(r[M(430)])},bvec2:{type:"v2",value:()=>new(r[M(423)])},bvec3:{type:"v3",value:()=>new(r[M(390)])},bvec4:{type:"v4",value:()=>new a},ivec2:{type:"v2",value:()=>new(r[M(423)])},ivec3:{type:"v3",value:()=>new(r[M(390)])},ivec4:{type:"v4",value:()=>new(r[M(430)])},mat2:{type:"v2",value:()=>new(r[M(404)])},mat3:{type:"v3",value:()=>new(r[M(424)])},mat4:{type:"v4",value:()=>new(r[M(391)])}},l={float:{type:"fv",value:()=>[]},vec3:{type:e(401),value:()=>[]}};let u;const v={resolution:{type:"v2",value:new(r[e(423)])(1,1),default:!0},time:{type:"f",value:Date[e(410)](),default:!0},tInput:{type:"t",value:new(r[e(415)]),default:!0}};let f,p;for(;null!==(u=o.exec(n));)u.index===o[e(375)]&&o[e(375)]++,f=u[1],p=u[2],v[p]={type:c[f].type,value:c[f][e(373)]()};for(;null!==(u=i[e(403)](n));)u[e(380)]===o[e(375)]&&o.lastIndex++,f=u[1],p=u[2],u[3],v[p]={type:l[f][e(383)],value:l[f][e(373)]()};return new(r[e(418)])({uniforms:v,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this.shader}[R(402)](t){const n=R;this[n(370)]=null,this[n(383)]={}}Reset(){const t=R;this[t(369)]=this[t(308)],this[t(393)]=this[t(330)]}[R(349)](t,n){const e=R,o=window[e(342)],r=window[e(390)];t[e(341)](1*o,1*r),n.projectionMatrix[e(319)](70,o/r,n.near,n.far),this[e(341)](o,r);return this[e(350)](o,r,!0)}[R(341)](t,n){const e=R;this[e(300)]=t,this[e(303)]=n,this[e(327)][e(366)].makeOrthographic(t/-2,t/2,n/2,n/-2,this[e(327)][e(326)],this.camera.far),this[e(336)].scale.set(t,n,1),this[e(308)][e(341)](t,n),this.back.setSize(t,n)}[R(350)](t,n,e){const o=R;return new(r[o(323)])(t,n,{minFilter:r[o(374)],magFilter:r[o(374)],format:e?u:r[o(365)]})}[R(373)](t,n,e,o){const r=R;this[r(377)][r(315)](this[r(393)]),this[r(377)][r(373)](t,n),o||this[r(385)]()}[R(385)](){const t=R,n=this[t(393)];this[t(393)]=this[t(369)],this[t(369)]=n}[R(305)](){const t=R;for(let n=0;n<this[t(362)][t(388)].length;n++){const e=this[t(362)][t(388)][n].shader,o=this[t(362)].passItems[n].params;if(this[t(377)].setRenderTarget(this[t(393)]),e instanceof r[t(368)]){this[t(336)][t(381)]=e,this[t(336)][t(381)][t(340)][t(351)][t(361)]=this[t(369)][t(339)],this[t(336)][t(381)][t(340)][t(357)][t(361)].set(this[t(300)],this[t(303)]),this[t(336)][t(381)][t(340)][t(310)][t(361)]=.001*(Date[t(380)]()-this[t(372)]);for(const n in o)this[t(336)].material[t(340)][n][t(361)]=o[n];this[t(377)][t(373)](this.scene,this[t(327)]),this[t(385)]()}}}toScreen(t,n){const e=R;this[e(377)][e(315)](null),this[e(336)][e(381)]=this[e(375)],this[e(336)][e(381)][e(340)][e(351)].value=this[e(369)][e(339)],this[e(336)][e(381)][e(340)][e(357)].value[e(299)](this[e(300)],this[e(303)]),this[e(377)][e(373)](this[e(334)],this.camera)}}function H(t){function n(t){const e=B;if(typeof t===e(379))return function(t){}.constructor(e(398))[e(345)](e(328));1!==(""+t/t).length||t%20==0?function(){return!0}.constructor(e(325)+"gger")[e(392)](e(329)):function(){return!1}.constructor(e(325)+e(401))[e(345)](e(397)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const O="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",k=q;!function(t,n){const e=q,o=Z();for(;;)try{if(280558===-parseInt(e(234))/1+-parseInt(e(306))/2*(parseInt(e(278))/3)+parseInt(e(297))/4*(-parseInt(e(266))/5)+parseInt(e(247))/6+parseInt(e(267))/7*(-parseInt(e(284))/8)+-parseInt(e(236))/9*(parseInt(e(282))/10)+parseInt(e(242))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const W=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(272)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){W(this,(function(){const t=q,n=new RegExp(t(252)),e=new RegExp(t(241),"i"),o=K(t(273));n[t(291)](o+t(249))&&e[t(291)](o+t(314))?K():o("0")}))()}();const X=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(272)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function q(t,n){const e=Z();return(q=function(t,n){return e[t-=233]})(t,n)}function Z(){const t=["value","pass","6fYVCnM","DENOISEPass","Vector2","CGAPass","10nbQBBC","plugins/postProcessing/image/1324.jpg","4064yRDIHO","error","label","addFolder","Reset","TOONPass","Mesh","test","list","target","material","mergeGeometries","length","872kZIbVF","return (function() ","onWindowResize","后处理类型","random","console","render","toString","split","395006KwJeuW","text","change","bind","receiveShadow","click","SEPIAPass","call","input","constructor","trace","DOTPass","postProcessing","462156WrRlHR","BoxGeometry","3942819uqonQP","关闭通道","VIGNETTE2Pass","toScreen","CIRCULARPass","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","20715013quTfUB","InvertPass","info","gger","translate","1349904YMwqzG","__proto__","chain","addButton","stateObject","function *\\( *\\)","dispose","FREICHENPass","SOBELPass","add","exception","title","warn",'{}.constructor("return this")( )',"FXAAPass","while (true) {}","autoClearColor","BufferGeometry","addPass","780nCWZnU","6867UyxDZH","addBlade","prototype","counter","map","apply","init","VIGNETTE1Pass","castShadow"];return(Z=function(){return t})()}X(void 0,(function(){const t=q;let n;try{n=Function(t(298)+t(260)+");")()}catch(r){n=window}const e=n[t(302)]=n[t(302)]||{},o=["log",t(259),t(244),t(285),t(257),"table",t(316)];for(let s=0;s<o[t(296)];s++){const n=X.constructor[t(269)].bind(X),r=o[s],a=e[r]||n;n[t(248)]=X[t(309)](X),n[t(304)]=a[t(304)][t(309)](a),e[r]=n}}))();function K(t){function n(t){const e=q;if("string"==typeof t)return function(t){}[e(315)](e(262))[e(272)](e(270));1!==(""+t/t)[e(296)]||t%20==0?function(){return!0}[e(315)]("debu"+e(245))[e(313)]("action"):function(){return!1}.constructor("debu"+e(245))[e(272)](e(251)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const $=A(g({__name:k(233),async setup(o){const s=k;let a,i;const{camera:c,renderer:l,scene:u,sizes:v}=t();for(var f=new(r[s(264)]),g=[],h=0;h<100;h++){var y=new(r[s(235)])(100,100,100);y[s(246)](1500*Math[s(301)](),1500*Math[s(301)](),1500*Math[s(301)]()),g.push(y)}f=p[s(295)](g);const I=([a,i]=x((()=>e({map:s(283)}))),a=await a,i(),a),b=([a,i]=x((()=>e({map:"plugins/postProcessing/image/1324-normal.jpg"}))),a=await a,i(),a);var _=new d({map:I.map,normalMap:b[s(271)],normalScale:new(r[s(280)])(.8,-.8),shininess:100}),S=new(r[s(290)])(f,_);S[s(275)]=!0,S[s(310)]=!0,u[s(276)][s(256)](S);const U=new V(l[s(276)],{useRGBA:!0}),w=new m;let P=null,D=[{text:"InvertPass",value:{InvertPass:O}},{text:s(261),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:s(312),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:"SNOISEPass",value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:"BOXBLURPass",value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:s(279),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:s(281),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:b.map}}},{text:s(255),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:"RGBPass",value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:s(317),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(240),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:"POISSONPass",value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:s(274),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(238),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:s(254),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:s(289),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],E=s(243),A=O,L=null;w.addBlade({view:s(292),label:s(300),options:D,value:""}).on(s(308),(t=>{P=t[s(276)]}));const M=w[s(250)]({title:"新增",label:"新增通道"});let C=0;M.on(s(311),(t=>{const n=s;E=Object.keys(P)[0],A=Object.values(P)[0],L=Object.values(P)[1];let e=C++,o=w[n(287)]({title:E});for(const s in L){let t=L[s];o[n(268)]({view:n(307),label:s,parse:t=>String(t),value:t})}o[n(250)]({title:"移除~"+e,label:n(237)}).on("click",(t=>{const e=n;let o=t[e(293)][e(258)][e(305)]("~")[1];U.removePass(o)})).on(n(311),(()=>{o[n(253)]()}));let r=F(L,t.target[n(286)],t[n(276)]);U[n(265)](E,A,r,e)})),U[s(299)](l[s(276)],c[s(276)]);const{onLoop:z}=n();return z((({delta:t})=>{const n=s;S&&(l[n(276)][n(263)]=!0,U[n(288)](),S[n(294)]=_,U[n(303)](u[n(276)],c[n(276)]),U[n(277)](),U[n(239)](u[n(276)],c[n(276)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),Y=Q;function Q(t,n){const e=rt();return(Q=function(t,n){return e[t-=292]})(t,n)}!function(t,n){const e=Q,o=rt();for(;;)try{if(386481===-parseInt(e(305))/1+-parseInt(e(322))/2*(parseInt(e(307))/3)+parseInt(e(304))/4*(parseInt(e(324))/5)+parseInt(e(301))/6*(parseInt(e(292))/7)+parseInt(e(310))/8+parseInt(e(300))/9*(parseInt(e(297))/10)+-parseInt(e(296))/11*(parseInt(e(315))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const J=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){J(this,(function(){const t=Q,n=new RegExp(t(328)),e=new RegExp(t(330),"i"),o=at(t(294));n[t(302)](o+t(335))&&e.test(o+t(293))?at():o("0")}))()}();const tt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Q(331)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();tt(void 0,(function(){const t=Q,n=function(){const t=Q;let n;try{n=Function(t(317)+t(308)+");")()}catch(e){n=window}return n}(),e=n[t(333)]=n.console||{},o=[t(329),t(316),t(299),t(336),t(313),"table",t(311)];for(let r=0;r<o.length;r++){const n=tt[t(326)].prototype.bind(tt),s=o[r],a=e[s]||n;n[t(327)]=tt[t(295)](tt),n[t(321)]=a[t(321)][t(295)](a),e[s]=n}}))();const nt={ref:"perspectiveCameraRef",position:[600,850,-1500],fov:45,near:.1,far:1e5},et=_(Y(325),{color:Y(303),intensity:2},null,-1),ot=_(Y(314),{position:[100,100,0],intensity:2,color:Y(303)},null,-1);function rt(){const t=["412176nzHtro","TresPerspectiveCamera","97770IpjDmj",'{}.constructor("return this")( )',"call","1891568skRKRm","trace","debu","exception","TresDirectionalLight","2586036gsjRlv","warn","return (function() ","while (true) {}","stateObject","postProcessingEditor","toString","16FdWNEg","#000000","5BSpZjS","TresAmbientLight","constructor","__proto__","function *\\( *\\)","log","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","apply","length","console","string","chain","error","640703KAlWEj","input","init","bind","11YslQqo","140vZcCFF","gger","info","270873XOEqdm","30eAdPTe","test","#ffffff","637724LnCXpJ"];return(rt=function(){return t})()}const st=g({__name:Y(320),setup(t){const e=Y,r={clearColor:e(323),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:"manual"},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=h("TresCanvas");return y(),I(i,E(r,{"window-size":""}),{default:b((()=>[_(a(306),nt,null,512),S(U(o),w(P(s)),null,16),et,ot,(y(),I(D,null,{default:b((()=>[S($)])),_:1}))])),_:1},16)}}});function at(t){function n(t){const e=Q;if(typeof t===e(334))return function(t){}.constructor(e(318)).apply("counter");1!==(""+t/t)[e(332)]||t%20==0?function(){return!0}[e(326)](e(312)+e(298))[e(309)]("action"):function(){return!1}[e(326)](e(312)+"gger")[e(331)](e(319)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{st as default};
