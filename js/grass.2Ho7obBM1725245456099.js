import{a6 as t,C as n,K as e,a9 as o}from"./three.KG2-8r0_1725245456099.js";import{$ as r,N as a,d as i,x as s}from"./@tresjs.j5vdYITq1725245456099.js";import"./index.EQnCUMTr1725245456099.js";import{a as c}from"./simplex-noise.MycypUyu1725245456099.js";import{C as l}from"./index.qrmSQE1-1725245456099.js";import{d as u,a4 as f,o as p,D as h,J as m,u as v,r as d,f as g,g as x,j as w,aj as y,ak as b,al as _}from"./@vue.Q1VpS3901725245456099.js";import{_ as M}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.7taRIlax1725245456099.js";import"./tweakpane.yHWGBmom1725245456099.js";import"./@vueuse.whMtq_7M1725245456099.js";import"./lamina.__jdKbdJ1725245456099.js";import"./glsl-tokenizer.FsI169p21725245456099.js";import"./@amap.jyJWu-u51725245456099.js";import"./glsl-token-descope.kjb7dnLU1725245456099.js";import"./glsl-token-depth.9B_zXzRC1725245456099.js";import"./glsl-token-scope.6O-Q3Uxy1725245456099.js";import"./glsl-token-properties.GAMRu41o1725245456099.js";import"./glsl-token-assignments.lmzse5JD1725245456099.js";import"./glsl-token-string.rmbt9Jq91725245456099.js";import"./glsl-token-functions.66NgBKOU1725245456099.js";import"./object-hash.ycpyO56T1725245456099.js";import"./jszip.Bn2AE-kY1725245456099.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.rQvgIypy1725245456099.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.g37N3ih31725245456099.js";import"./three-stdlib.7palOSci1725245456099.js";import"./@pmndrs.Ip0yUZ_e1725245456099.js";import"./utils.O-D06JMB1725245456099.js";const j=z;function z(t,n){const e=C();return(z=function(t,n){return e[t-=413]})(t,n)}!function(t,n){const e=z,o=C();for(;;)try{if(349221===parseInt(e(466))/1+-parseInt(e(465))/2+-parseInt(e(423))/3*(-parseInt(e(459))/4)+parseInt(e(436))/5+-parseInt(e(484))/6*(parseInt(e(440))/7)+-parseInt(e(489))/8*(parseInt(e(479))/9)+parseInt(e(471))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const I=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[z(491)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){I(this,(function(){const t=z,n=new RegExp(t(427)),e=new RegExp(t(453),"i"),o=D(t(430));n.test(o+t(454))&&e[t(496)](o+t(433))?D():o("0")}))()}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[z(491)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function C(){const t=["gger","618414DCTXrs","exception","random","attributes-halfRootAngleSin","__proto__","984dvEQug","TresInstancedBufferGeometry","apply","while (true) {}","material","position","length","test","counter","grass","string","map","width","value","warn","offsetsF32","TresMesh","DoubleSide","uniforms","constructor","attributes","453372AcIVeh","toneMapped","toString","cos","function *\\( *\\)","table","Vector4","init","log","stretchesF32","input","Color","#000f00","798010mXpnPH","index","attributes-stretch","TresMeshStandardMaterial","7tgCPtv","info","halfRootAngleCosF32","action","normalize","push","needsUpdate","error","PlaneGeometry","halfRootAngleSinF32","joints","translate","Vector3","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","chain","orientationsF32","prototype","return (function() ","geometry","8RkhfZJ","attributes-orientation","convertSRGBToLinear","array","console","side","1267698gzMpTR","44293fTKiFZ","alphaMap","instances","set","attributes-offset","6255060gsCzXU","debu","trace","attributes-uv","bind","time","sin","stateObject","3330TSvgMI","InstancedBufferAttribute","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","attributes-position"];return(C=function(){return t})()}A(void 0,(function(){const t=z;let n;try{n=Function(t(457)+'{}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(463)]=n[t(463)]||{},o=[t(431),t(416),t(441),t(447),t(485),t(428),t(473)];for(let a=0;a<o[t(495)];a++){const n=A.constructor[t(456)][t(475)](A),r=o[a],i=e[r]||n;n[t(488)]=A.bind(A),n[t(425)]=i[t(425)].bind(i),e[r]=n}}))();const k=[j(493)],R=[j(437),j(482),j(474),j(470),j(460),j(438),j(487),"attributes-halfRootAngleCos"],S=[j(458)],F=[j(464)],T=u({__name:j(498),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(o){const i=j;let s,u;const d=([s,u]=f((()=>a({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),s=await s,u(),s),g=o,x=c(Math[i(486)]);function w(n,e){const o=i,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,a=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,s=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,c=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(429)])(r,a,s,c)}function y(t,n){var e=2*x(t/50,n/50);return e+=4*x(t/100,n/100),e+=.2*x(t/10,n/10)}const b=function(n,o){const r=i,a=[],s=[],c=[],l=[],u=[];let f=new(t[r(429)]),p=new(t[r(429)]);const h=-.25;for(let e=0;e<n;e++){const i=Math[r(486)]()*o-o/2,m=Math[r(486)]()*o-o/2,v=y(i,m);a[r(445)](i,v,m);let d=Math.PI-Math[r(486)]()*(2*Math.PI);l.push(Math[r(477)](.5*d)),u[r(445)](Math[r(426)](.5*d));let g=new(t[r(452)])(0,1,0),x=g.x*Math[r(477)](d/2),b=g.y*Math.sin(d/2),_=g.z*Math[r(477)](d/2),M=Math.cos(d/2);f[r(469)](x,b,_,M)[r(444)](),d=.5*Math[r(486)]()+h,g=new(t[r(452)])(1,0,0),x=g.x*Math[r(477)](d/2),b=g.y*Math.sin(d/2),_=g.z*Math[r(477)](d/2),M=Math[r(426)](d/2),p[r(469)](x,b,_,M).normalize(),f=w(f,p),d=.5*Math[r(486)]()+h,g=new(t[r(452)])(0,0,1),x=g.x*Math.sin(d/2),b=g.y*Math[r(477)](d/2),_=g.z*Math.sin(d/2),M=Math[r(426)](d/2),p[r(469)](x,b,_,M)[r(444)](),f=w(f,p),s[r(445)](f.x,f.y,f.z,f.w),e<n/3?c[r(445)](1.8*Math[r(486)]()):c[r(445)](Math.random())}return{offsetsF32:new(t[r(480)])(new Float32Array(a),3),orientationsF32:new(t[r(480)])(new Float32Array(s),4),stretchesF32:new(t[r(480)])(new Float32Array(c),1),halfRootAngleCosF32:new(t[r(480)])(new Float32Array(u),1),halfRootAngleSinF32:new e(new Float32Array(l),1)}}(g[i(468)],g[i(414)]),_=new(t[i(448)])(g.bW,g.bH,1,g[i(450)])[i(451)](0,g.bH/2,0),M=new(t[i(448)])(g[i(414)],g[i(414)],32,32);M.lookAt(new(t[i(452)])(0,1,0));const z=M[i(422)].position;for(let t=0;t<z[i(462)][i(495)];t+=3)z[i(462)][t+1]=y(z.array[t],z[i(462)][t+2]);M.attributes[i(494)][i(446)]=!0,M.computeVertexNormals();const I=new(l({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(t[i(434)])(.3,.9,0)[i(461)](),bottomColor:new n(0,.2,0)[i(461)]()},"   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }",i(481),(n=>{const e=i;n[e(464)]=t[e(419)]})));I[i(413)]=d[i(413)],I[i(467)]=d[i(467)],I[i(424)]=!1;const{onLoop:A}=r();return A((({elapsed:t})=>{const n=i;I[n(420)][n(476)][n(415)]=t/4})),(n,e)=>{const o=i;return p(),h("TresGroup",null,[m("TresMesh",{material:v(I)},[m(o(490),{index:v(_).index,"attributes-position":v(_).attributes[o(494)],"attributes-uv":v(_).attributes.uv,"attributes-offset":v(b)[o(417)],"attributes-orientation":v(b)[o(455)],"attributes-stretch":v(b)[o(432)],"attributes-halfRootAngleSin":v(b)[o(449)],"attributes-halfRootAngleCos":v(b)[o(442)]},null,8,R)],8,k),m(o(418),{position:[0,0,0],geometry:v(M)},[m(o(439),{color:o(435),side:t[o(419)]},null,8,F)],8,S)])}}});function D(t){function n(t){const e=z;if(typeof t===e(499))return function(t){}.constructor(e(492)).apply(e(497));1!==(""+t/t)[e(495)]||t%20==0?function(){return!0}.constructor(e(472)+e(483)).call(e(443)):function(){return!1}[e(421)]("debu"+e(483))[e(491)](e(478)),n(++t)}try{if(t)return n;n(0)}catch(e){}}function P(t,n){const e=L();return(P=function(t,n){return e[t-=387]})(t,n)}const E=P;!function(t,n){const e=P,o=L();for(;;)try{if(141557===parseInt(e(400))/1+-parseInt(e(393))/2*(parseInt(e(390))/3)+parseInt(e(415))/4+parseInt(e(406))/5*(parseInt(e(414))/6)+parseInt(e(407))/7+-parseInt(e(416))/8*(parseInt(e(398))/9)+-parseInt(e(408))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[P(401)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){O(this,(function(){const t=P,n=new RegExp(t(423)),e=new RegExp(t(392),"i"),o=N(t(413));n[t(419)](o+t(410))&&e[t(419)](o+t(411))?N():o("0")}))()}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();B(void 0,(function(){const t=P,n=function(){const t=P;let n;try{n=Function("return (function() "+t(425)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(391)]||{},o=[t(404),t(394),"info",t(402),t(409),t(417),t(405)];for(let r=0;r<o[t(395)];r++){const n=B[t(387)][t(418)][t(412)](B),a=o[r],i=e[a]||n;n.__proto__=B[t(412)](B),n[t(397)]=i[t(397)][t(412)](i),e[a]=n}}))();const H=m(E(420),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1);function L(){const t=["153QPratx","debu","244344BJwCEP","apply","error","gger","log","trace","275KZmYSg","799736TYfNPQ","3448250RXZCfO","exception","chain","input","bind","init","28482WTEQKO","787084ystWRI","43528GwjNwC","table","prototype","test","TresPerspectiveCamera","call","counter","function *\\( *\\)","while (true) {}",'{}.constructor("return this")( )',"constructor","grass","action","2019seiILw","console","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","706GXdgWk","warn","length","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","toString"];return(L=function(){return t})()}const G=u({__name:E(388),setup(t){const n=d({alpha:!0,toneMapping:o,windowSize:!0,clearColor:6710886}),e=d({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=P;return p(),g(v(s),y(b(n)),{default:x((()=>[H,w(v(i),y(b(e)),null,16),(p(),g(_,null,{default:x((()=>[w(T)])),_:1})),(p(),g(_,null,{default:x((()=>[w(v(M),{texture:r(396)})])),_:1}))])),_:1},16)}}});function N(t){function n(t){const e=P;if("string"==typeof t)return function(t){}.constructor(e(424))[e(401)](e(422));1!==(""+t/t)[e(395)]||t%20==0?function(){return!0}[e(387)](e(399)+e(403))[e(421)](e(389)):function(){return!1}[e(387)](e(399)+"gger")[e(401)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{G as default};
