import{m as t,e as n,b as e,a as o}from"./@tresjs.DYJWvbJh1744075368226.js";import{a9 as a,T as r,A as s,d0 as i,a$ as l,r as v,n as c,B as u,ax as f,c8 as p,b9 as m,a as d,l as x}from"./three.Cqu7jvck1744075368226.js";import{P as g}from"./tweakpane.C0HtAJSg1744075368226.js";import{d as h,a5 as y,h as b,e as I,o as _,f as S,J as U,j as P,u as w,ak as D,al as E,am as A,m as L}from"./@vue.DK6ok9LJ1744075368226.js";import{_ as C}from"./@fesjs.DVzkLEh_1744075368226.js";import"./postprocessing.BQUpsS8o1744075368226.js";import"./@vueuse.3dpzNfMJ1744075368226.js";import"./vue-router.CdB5-8IK1744075368226.js";import"./lodash-es.BOsRjQhS1744075368226.js";import"./@qlin.q6OWdsQV1744075368226.js";import"./pinia.BwN9Gs_m1744075368226.js";import"./@babel.BPq7uOAK1744075368226.js";import"./@floating-ui.BFjFSAYt1744075368226.js";import"./@juggle.CcBCnTIR1744075368226.js";!function(){const t=T,n=F();for(;;)try{if(245661===-parseInt(t(299))/1+-parseInt(t(310))/2+parseInt(t(276))/3+parseInt(t(260))/4*(parseInt(t(308))/5)+-parseInt(t(312))/6*(-parseInt(t(254))/7)+-parseInt(t(313))/8+-parseInt(t(316))/9)break;n.push(n.shift())}catch(e){n.push(n.shift())}}();const M=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){M(this,(function(){const t=T,n=new RegExp(t(300)),e=new RegExp(t(275),"i"),o=R(t(283));n.test(o+t(297))&&e.test(o+t(251))?R():o("0")}))()}();const z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[T(309)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function F(){const t=["chain","trace","295409alsHqH","function *\\( *\\)","send","length","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","get","exec","console","random","485zCRbFy","apply","275812aodkFB","warn","2183088VEYVJm","752560gSewjN","object","replace","407988wfUsuT","input","toString","table","7ICiFzP","string","counter","onabort","hasOwnProperty","info","228WAaGAN","open","Vector3","gger","debu","Matrix3","Texture","Vector2",'{}.constructor("return this")( )',"Matrix4","message","value","index","bind","WagnerLoadShaderException","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","1347003LCsEdc","isArray","log","v3v","Matrix2","prototype","name","init","error","action","Vector4","stateObject","lastIndex","__proto__","constructor",'Shader "',"return (function() ","type","call","exception","ShaderMaterial"];return(F=function(){return t})()}function T(t,n){const e=F();return T=function(t,n){return e[t-=251]},T(t,n)}z(void 0,(function(){const t=T,n=function(){const t=T;let n;try{n=Function(t(292)+t(268)+");")()}catch(e){n=window}return n}(),e=n[t(306)]=n[t(306)]||{},o=[t(278),t(311),t(259),t(284),t(295),t(253),t(298)];for(let a=0;a<o[t(302)];a++){const n=z[t(290)][t(281)][t(273)](z),r=o[a],s=e[r]||n;n[t(289)]=z.bind(z),n.toString=s.toString.bind(s),e[r]=n}}))();function N(t,n,e){const o=T;if(typeof t!==o(314)||null===t)return t;const a=Array[o(277)](t)?[]:{};for(const r in t)t[o(258)](r)&&(a[r]=N(t[r])),r==n&&(a[n]=e);return a}function R(t){function n(t){const e=T;if(typeof t===e(255))return function(t){}[e(290)]("while (true) {}")[e(309)](e(256));1!==(""+t/t)[e(302)]||t%20==0?function(){return!0}[e(290)](e(264)+e(263))[e(294)](e(285)):function(){return!1}.constructor("debu"+e(263)).apply(e(287)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const G=H;!function(){const t=H,n=j();for(;;)try{if(273742===-parseInt(t(270))/1+parseInt(t(268))/2*(parseInt(t(315))/3)+parseInt(t(317))/4+-parseInt(t(308))/5*(-parseInt(t(303))/6)+-parseInt(t(297))/7+-parseInt(t(319))/8+-parseInt(t(301))/9)break;n.push(n.shift())}catch(e){n.push(n.shift())}}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[H(264)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function j(){const t=["uniforms","near","chain","startTime","pass","function *\\( *\\)","width","length","set","type","exception","splice","RGBAFormat","CopyPass","WebGLRenderTarget","setRenderTarget","write","counter","apply","copyPass","setSize","camera","551710zlGkhY","back","243675RjbEOI","height","LinearFilter","makePerspective","params","innerHeight","PlaneGeometry","clone","while (true) {}","OrthographicCamera","scene","magFilter","projectionMatrix","RGBFormat","addPass","test","stateObject","wrapS","quad","scale","minFilter","swapBuffers","useRGBA","call","input","render","uuid","1965894xWdqJr","getOfflineTexture","shader","Stack","2775537Aixzvz","bind","872604QbjyzL","__proto__","gger","Reset","onWindowResize","15cSWvuO","debu","constructor","toString","push","tInput","removePass","3HmTDkY","front","2025276giAiuG","passes","894592miKNRC","loadShadervf","read","wrapT","toScreen","info","now","warn","passItems","stencilBuffer","log","material","far","settings","renderer","value","string","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","texture","table","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","Scene","console","UnsignedByteType","Mesh","ClampToEdgeWrapping"];return(j=function(){return t})()}!function(){B(this,(function(){const t=H,n=new RegExp(t(251)),e=new RegExp(t(240),"i"),o=k("init");n[t(285)](o+t(248))&&e[t(285)](o+t(294))?k():o("0")}))()}();const V=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();V(void 0,(function(){const t=H;let n;try{n=Function('return (function() {}.constructor("return this")( ));')()}catch(a){n=window}const e=n[t(242)]=n[t(242)]||{},o=[t(329),t(326),t(324),"error",t(256),t(239),"trace"];for(let r=0;r<o[t(253)];r++){const n=V[t(310)].prototype[t(302)](V),a=o[r],s=e[a]||n;n[t(304)]=V[t(302)](V),n[t(311)]=s[t(311)][t(302)](s),e[a]=n}}))();class O{constructor(t,n){const e=H;this[e(252)]=1,this.height=1,this[e(233)]=n||{},this.useRGBA=this[e(233)][e(292)]||!1,this[e(234)]=t,this[e(265)]=this[e(259)](this[e(233)]),this[e(280)]=new(r[e(241)]),this[e(288)]=new(r[e(244)])(new(r[e(276)])(1,1),new s),this[e(280)].add(this.quad),this[e(267)]=new(r[e(279)])(1,1,1,1,-1e4,1e4),this[e(316)]=new(r[e(260)])(1,1,{minFilter:void 0!==this[e(233)][e(290)]?this[e(233)][e(290)]:r[e(272)],magFilter:void 0!==this[e(233)][e(281)]?this.settings[e(281)]:v,wrapS:void 0!==this[e(233)][e(287)]?this[e(233)][e(287)]:r[e(245)],wrapT:void 0!==this[e(233)][e(322)]?this[e(233)][e(322)]:l,format:this[e(292)]?r[e(258)]:i,type:void 0!==this.settings.type?this.settings[e(255)]:r[e(243)],stencilBuffer:void 0===this.settings[e(328)]||this[e(233)][e(328)]}),this[e(269)]=this[e(316)][e(277)](),this[e(249)]=Date[e(325)](),this[e(318)]={},this[e(300)]={passItems:[],passes:[]}}[G(284)](t,n,e,o){const a=G;this.loadShadervf(n);const r={shaderName:t,params:e,uuid:o,shader:this[a(299)]};this[a(300)][a(327)][a(312)](r)}[G(314)](t){const n=G;for(let e=this[n(300)][n(327)][n(253)]-1;e>=0;e--)this[n(300)][n(327)][e][n(296)]===parseInt(t)&&this[n(300)][n(327)][n(257)](e,1);console[n(329)](this[n(300)].passItems)}CopyPass(){const t=G;this.Pass.call(this);return this[t(320)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[G(320)](t){const n=G,e=n(237);return this[n(299)]=function(t,n){const e=T,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,s=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,i={sampler2D:{type:"t",value:()=>new(r[T(266)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[T(267)])},vec3:{type:"v3",value:()=>new(r[T(262)])},vec4:{type:"v4",value:()=>new(r[T(286)])},bvec2:{type:"v2",value:()=>new(r[T(267)])},bvec3:{type:"v3",value:()=>new(r[T(262)])},bvec4:{type:"v4",value:()=>new(r[T(286)])},ivec2:{type:"v2",value:()=>new(r[T(267)])},ivec3:{type:"v3",value:()=>new(r[T(262)])},ivec4:{type:"v4",value:()=>new(r[T(286)])},mat2:{type:"v2",value:()=>new(r[T(280)])},mat3:{type:"v3",value:()=>new(r[T(265)])},mat4:{type:"v4",value:()=>new(r[T(269)])}},l={float:{type:"fv",value:()=>[]},vec3:{type:e(279),value:()=>[]}};let v;const c={resolution:{type:"v2",value:new(r[e(267)])(1,1),default:!0},time:{type:"f",value:Date.now(),default:!0},tInput:{type:"t",value:new a,default:!0}};let u,f;for(;null!==(v=o[e(305)](n));)v[e(272)]===o[e(288)]&&o[e(288)]++,u=v[1],f=v[2],c[f]={type:i[u][e(293)],value:i[u][e(271)]()};for(;null!==(v=s.exec(n));)v.index===o[e(288)]&&o[e(288)]++,u=v[1],f=v[2],v[3],c[f]={type:l[u][e(293)],value:l[u][e(271)]()};return new(r[e(296)])({uniforms:c,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(299)]}Pass(t){this.shader=null,this.params={}}[G(306)](){const t=G;this.read=this[t(316)],this[t(262)]=this[t(269)]}[G(307)](t,n){const e=G,o=window.innerWidth,a=window[e(275)];t[e(266)](1*o,1*a),n.projectionMatrix[e(273)](70,o/a,n[e(247)],n.far),this[e(266)](o,a);return this[e(298)](o,a,!0)}[G(266)](t,n){const e=G;this[e(252)]=t,this[e(271)]=n,this[e(267)][e(282)].makeOrthographic(t/-2,t/2,n/2,n/-2,this.camera[e(247)],this.camera[e(232)]),this.quad[e(289)][e(254)](t,n,1),this.front[e(266)](t,n),this[e(269)][e(266)](t,n)}getOfflineTexture(t,n,e){const o=G;return new(r[o(260)])(t,n,{minFilter:r[o(272)],magFilter:r[o(272)],format:e?r[o(258)]:r[o(283)]})}[G(295)](t,n,e,o){const a=G;this.renderer.setRenderTarget(this.write),this[a(234)][a(295)](t,n),o||this[a(291)]()}[G(291)](){const t=G,n=this[t(262)];this[t(262)]=this[t(321)],this[t(321)]=n}[G(250)](){const t=G;for(let n=0;n<this[t(300)].passItems[t(253)];n++){const e=this[t(300)].passItems[n][t(299)],o=this.Stack[t(327)][n][t(274)];if(this.renderer[t(261)](this[t(262)]),e instanceof c){this[t(288)].material=e,this[t(288)][t(330)][t(246)][t(313)].value=this[t(321)][t(238)],this[t(288)][t(330)][t(246)].resolution[t(235)].set(this[t(252)],this[t(271)]),this[t(288)][t(330)][t(246)].time[t(235)]=.001*(Date[t(325)]()-this[t(249)]);for(const n in o)this[t(288)][t(330)][t(246)][n][t(235)]=o[n];this[t(234)][t(295)](this[t(280)],this[t(267)]),this[t(291)]()}}}[G(323)](t,n){const e=G;this[e(234)].setRenderTarget(null),this[e(288)][e(330)]=this.copyPass,this[e(288)][e(330)].uniforms[e(313)][e(235)]=this[e(321)][e(238)],this.quad[e(330)].uniforms.resolution.value.set(this[e(252)],this[e(271)]),this.renderer[e(295)](this.scene,this.camera)}}function H(t,n){const e=j();return H=function(t,n){return e[t-=232]},H(t,n)}function k(t){function n(t){const e=H;if(typeof t===e(236))return function(t){}[e(310)](e(278))[e(264)](e(263));1!==(""+t/t)[e(253)]||t%20==0?function(){return!0}[e(310)]("debu"+e(305))[e(293)]("action"):function(){return!1}[e(310)](e(309)+e(305))[e(264)](e(286)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const W="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",X=C(h({__name:"postProcessing",async setup(o){let a,r;const{camera:s,renderer:i,scene:l,sizes:v}=t();for(var c=new u,h=[],b=0;b<100;b++){var I=new f(100,100,100);I.translate(1500*Math.random(),1500*Math.random(),1500*Math.random()),h.push(I)}c=p(h);const _=([a,r]=y((()=>e({map:"plugins/postProcessing/image/1324.jpg"}))),a=await a,r(),a),S=([a,r]=y((()=>e({map:"plugins/postProcessing/image/1324-normal.jpg"}))),a=await a,r(),a);var U=new m({map:_.map,normalMap:S.map,normalScale:new d(.8,-.8),shininess:100}),P=new x(c,U);P.castShadow=!0,P.receiveShadow=!0,l.value.add(P);const w=new O(i.value,{useRGBA:!0}),D=new g;let E=null,A=[{text:"InvertPass",value:{InvertPass:W}},{text:"FXAAPass",value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:"SEPIAPass",value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:"SNOISEPass",value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:"BOXBLURPass",value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:"DENOISEPass",value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:"CGAPass",value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:S.map}}},{text:"SOBELPass",value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:"RGBPass",value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:"DOTPass",value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:"CIRCULARPass",value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:"POISSONPass",value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:"VIGNETTE1Pass",value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:"VIGNETTE2Pass",value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:"FREICHENPass",value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:"TOONPass",value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],L="InvertPass",C=W,M=null;D.addBlade({view:"list",label:"后处理类型",options:A,value:""}).on("change",(t=>{E=t.value}));const z=D.addButton({title:"新增",label:"新增通道"});let F=0;z.on("click",(t=>{L=Object.keys(E)[0],C=Object.values(E)[0],M=Object.values(E)[1];let n=F++,e=D.addFolder({title:L});for(const a in M){let t=M[a];e.addBlade({view:"text",label:a,parse:t=>String(t),value:t})}e.addButton({title:`移除~${n}`,label:"关闭通道"}).on("click",(t=>{let n=t.target.title.split("~")[1];w.removePass(n)})).on("click",(()=>{e.dispose()}));let o=N(M,t.target.label,t.value);w.addPass(L,C,o,n)})),w.onWindowResize(i.value,s.value);const{onLoop:T}=n();return T((({delta:t})=>{P&&(i.value.autoClearColor=!0,w.Reset(),P.material=U,w.render(l.value,s.value),w.pass(),w.toScreen(l.value,s.value))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),q={ref:"perspectiveCameraRef",position:[600,850,-1500],fov:45,near:.1,far:1e5},$=h({__name:"postProcessingEditor",setup(t){const e={clearColor:"#000000",shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:"manual"},a={autoRotate:!0,enableDamping:!0},{onLoop:r}=n();return r((({delta:t})=>{})),(t,n)=>{const r=b("TresCanvas");return _(),I(r,L(e,{"window-size":""}),{default:S((()=>[U("TresPerspectiveCamera",q,null,512),P(w(o),D(E(a)),null,16),n[0]||(n[0]=U("TresAmbientLight",{color:"#ffffff",intensity:2},null,-1)),n[1]||(n[1]=U("TresDirectionalLight",{position:[100,100,0],intensity:2,color:"#ffffff"},null,-1)),(_(),I(A,null,{default:S((()=>[P(X)])),_:1}))])),_:1},16)}}});export{$ as default};
