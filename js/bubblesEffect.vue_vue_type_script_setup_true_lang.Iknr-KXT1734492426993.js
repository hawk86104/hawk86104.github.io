import{_ as n,c2 as t,cz as e,m as o,h as i,ab as r}from"./three.-W-Avfc61734492426993.js";import{m as a,e as l,b as s}from"./@tresjs.WiFlZbqU1734492426993.js";import{d as u,b as c,a6 as f,a3 as p,o as m,D as g,J as b,aj as v,ak as y,u as d}from"./@vue.-THQH3GC1734492426993.js";const h=z;!function(n,t){const e=z,o=_();for(;;)try{if(242934===parseInt(e(484))/1+parseInt(e(512))/2+-parseInt(e(513))/3+-parseInt(e(488))/4+parseInt(e(486))/5*(-parseInt(e(535))/6)+-parseInt(e(525))/7*(parseInt(e(510))/8)+parseInt(e(504))/9*(parseInt(e(531))/10))break;o.push(o.shift())}catch(i){o.push(o.shift())}}();const w=function(){let n=!0;return function(t,e){const o=n?function(){if(e){const n=e[z(526)](t,arguments);return e=null,n}}:function(){};return n=!1,o}}();function _(){const n=["9420ZufxWM","error","1330664BpWiHf","call","table","init","counter","bind","info","xRayEffect","gger","console","toString","opacity","length","color","TresBufferGeometry","exception","9oCbgdh","verticesNeedUpdate","chain","stateObject","function *\\( *\\)","trace","134224nySxGF","TresMesh","360184angEJR","915543LCOZgT","position",'{}.constructor("return this")( )',"#84ccff","push","geometry","action","warn","Mesh","DoubleSide","input","glowColor","196MhOlGD","apply","__proto__","return (function() ","log","AdditiveBlending","13259110RcCTYu","Color","uTime","TresMeshRef","606Plulgy","map","uniforms","value","uOpacity","constructor","test","prototype","sin","34846xqxcVk","debu"];return(_=function(){return n})()}!function(){w(this,(function(){const n=z,t=new RegExp(n(508)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=T(n(491));t[n(541)](o+n(506))&&e.test(o+n(523))?T():o("0")}))()}();const x=function(){let n=!0;return function(t,e){const o=n?function(){if(e){const n=e.apply(t,arguments);return e=null,n}}:function(){};return n=!1,o}}();function z(n,t){const e=_();return(z=function(n,t){return e[n-=483]})(n,t)}x(void 0,(function(){const n=z;let t;try{t=Function(n(528)+n(515)+");")()}catch(i){t=window}const e=t[n(497)]=t[n(497)]||{},o=[n(529),n(520),n(494),n(487),n(503),n(490),n(509)];for(let r=0;r<o[n(500)];r++){const t=x.constructor[n(542)][n(493)](x),i=o[r],a=e[i]||t;t[n(527)]=x[n(493)](x),t.toString=a[n(498)][n(493)](a),e[i]=t}}))();const S=u({__name:h(495),props:{model:{},color:{default:h(516)},opacity:{default:1}},async setup(e){const o=h;let i,r;const u=e,d=c(),w=[];u.model.traverse((t=>{const e=z;t instanceof n[e(521)]&&(t[e(518)][e(505)]=!0,w[e(517)](t[e(518)]))}));const _=([i,r]=f((()=>s({map:"./plugins/medical/image/brainXRayLight.png"}))),i=await i,r(),i),x={uniforms:{c:{type:"f",value:1.11},p:{type:"f",value:1},glowColor:{type:"c",value:new(n[o(532)])(u[o(501)])},lightningTexture:{type:"t",value:_[o(536)]},offsetY:{type:"f",value:.1},uTime:{type:"f",value:0},uOpacity:{type:"f",value:u[o(499)]}},vertexShader:"uniform float c;\nuniform float p;\nuniform float uTime;\nvarying float intensity;\nvarying vec2 vUv;\nvoid main(){\n    vUv=uv;\n    vec3 vNormal=normalize(normalMatrix*normal);\n    intensity=pow(c-abs(dot(vNormal,vec3(0,0,1))),p);\n    gl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.);\n}",fragmentShader:"uniform vec3 glowColor;\nuniform sampler2D lightningTexture;\nvarying float intensity;\nvarying vec2 vUv;\nuniform float offsetY;\nuniform float uTime;\nuniform float uOpacity;\n\nvoid main(){\n  vec2 uv=vUv;\n  uv.y+=offsetY;\n  vec3 glow=glowColor*intensity;\n  vec3 color=vec3(step(.1,uv.y)-step(.2,uv.y))-vec3(texture2D(lightningTexture,uv));\n  float alpha=clamp(cos(uTime*3.),.5,1.);\n  gl_FragColor=vec4(glow+color,alpha*uOpacity);\n}",side:n[o(522)],blending:n[o(530)],depthWrite:!1};x.uniforms.offsetY[o(538)]=Math[o(483)](5);const{camera:S}=a(),{onLoop:T}=l();return T((({delta:n})=>{const t=o;S[t(538)][t(514)]&&d[t(538)]&&(x[t(537)][t(533)][t(538)]+=n)})),p((()=>{const e=o;d[e(538)]&&(d[e(538)][e(518)].dispose(),d[e(538)].geometry=t(w)),u[e(501)]&&(x[e(537)][e(524)][e(538)]=new(n[e(532)])(u[e(501)])),u[e(499)]&&(x[e(537)][e(539)][e(538)]=u[e(499)])})),(n,t)=>{const e=o;return m(),g(e(511),{ref_key:e(534),ref:d},[t[0]||(t[0]=b(e(502),null,null,-1)),b("TresShaderMaterial",v(y(x)),null,16)],512)}}});function T(n){function t(n){const e=z;if("string"==typeof n)return function(n){}[e(540)]("while (true) {}")[e(526)](e(492));1!==(""+n/n).length||n%20==0?function(){return!0}[e(540)](e(485)+e(496))[e(489)](e(519)):function(){return!1}[e(540)]("debu"+e(496)).apply(e(507)),t(++n)}try{if(n)return t;t(0)}catch(e){}}!function(n,t){const e=F,o=B();for(;;)try{if(647154===-parseInt(e(442))/1+parseInt(e(455))/2+parseInt(e(460))/3+parseInt(e(441))/4*(parseInt(e(438))/5)+-parseInt(e(456))/6+-parseInt(e(457))/7+-parseInt(e(440))/8*(-parseInt(e(463))/9))break;o.push(o.shift())}catch(i){o.push(o.shift())}}();const P=function(){let n=!0;return function(t,e){const o=n?function(){if(e){const n=e.apply(t,arguments);return e=null,n}}:function(){};return n=!1,o}}();!function(){P(this,(function(){const n=F,t=new RegExp(n(476)),e=new RegExp(n(480),"i"),o=I("init");t[n(475)](o+n(444))&&e.test(o+n(469))?I():o("0")}))()}();const C=function(){let n=!0;return function(t,e){const o=n?function(){if(e){const n=e.apply(t,arguments);return e=null,n}}:function(){};return n=!1,o}}();C(void 0,(function(){const n=F;let t;try{t=Function(n(486)+n(448)+");")()}catch(i){t=window}const e=t[n(435)]=t[n(435)]||{},o=["log","warn",n(425),"error",n(489),n(473),"trace"];for(let r=0;r<o[n(492)];r++){const t=C[n(465)].prototype[n(490)](C),i=o[r],a=e[i]||t;t.__proto__=C.bind(C),t[n(453)]=a[n(453)][n(490)](a),e[i]=t}}))();const M=u({__name:"bubblesEffect",props:{model:{},color:{default:"#FFF"},opacity:{default:1}},setup(t){const a=F,s=t,u=[a(484),"semantic",a(483),a(468),a(443),a(437),"bridge",a(445),a(467)],f={};s.model.traverse((t=>{const o=a;t instanceof n[o(472)]&&u[o(461)]((n=>{const i=o;if(t[i(450)][i(459)](n)){if(f[n]){const o=[f[n],t[i(482)]];return f[n]=e[i(433)](o),f}return f[n]=t[i(482)]}return[]}))}));const h=c(),w=new o({uniforms:{glowColor:{type:"c",value:new(n[a(487)])(s.color)},uTime:{type:"f",value:0},uSlowTime:{type:"f",value:0},uBubblesUp:{type:"f",value:1},uOpacity:{type:"f",value:s[a(434)]}},vertexShader:"uniform float p;\nuniform float uTime;\nuniform float uSlowTime;\nuniform float uBubblesUp;\nvarying float intensity;\nattribute vec2 aDelayDuration;\nattribute float size;\nattribute vec4 bubbles;\nvarying float alpha;\n\nfloat easeExpoInOut(float p){\n    return((p*=2.)<1.)?.5*pow(2.,10.*(p-1.)):.5*(2.-pow(2.,-10.*(p-1.)));\n}\n\nvoid main()\n{\n    intensity=.9;\n    vec4 mvPosition=modelViewMatrix*vec4(position,1.);\n    gl_PointSize=size*(300./-mvPosition.z);\n    float m=mod(size,sin(uSlowTime*.12+size));\n    \n    alpha=step(.5,abs(m));\n    if(m>.5&&m<.7){\n        gl_PointSize=.9*size;\n    }\n    if(m>.8){\n        gl_PointSize=.9*size;\n    }\n    \n    gl_Position=projectionMatrix*mvPosition;\n    \n    if(bubbles.w>0.&&bubbles.w<2.&&bubbles.x!=0.&&bubbles.y!=0.){\n        gl_PointSize=size+15.;\n        alpha=clamp(abs(sin(uTime-bubbles.y)),.3,1.);\n        \n        float tProgress=smoothstep(0.,aDelayDuration.x,uBubblesUp);\n        vec3 tranlated=mix(position,bubbles.xyz,tProgress);\n        vec4 bPosition=modelViewMatrix*vec4(tranlated,1.);\n        \n        gl_PointSize=uBubblesUp*gl_PointSize;\n        gl_Position+=projectionMatrix*bPosition;\n        alpha=5.;\n    }\n    \n    if(bubbles.w==2.){\n        alpha=clamp(abs(sin(uTime-bubbles.y)),.3,.6);\n        gl_PointSize=size+60.;\n        \n        gl_PointSize=uBubblesUp*gl_PointSize;\n        float normalized=clamp(uBubblesUp,0.,2.)*2.;\n        vec3 tranlated=mix(position,bubbles.xyz,normalized);\n        vec4 bPosition=modelViewMatrix*vec4(tranlated,1.);\n        gl_Position+=projectionMatrix*bPosition;\n    }\n    if(bubbles.w==3.){\n        alpha=clamp(abs(sin(uTime-bubbles.y)),.3,1.);\n        gl_PointSize=size+90.;\n        \n        gl_PointSize=uBubblesUp*gl_PointSize;\n        float normalized=clamp(uBubblesUp,0.,2.)*2.;\n        vec3 tranlated=mix(position,bubbles.xyz,normalized);\n        vec4 bPosition=modelViewMatrix*vec4(tranlated,1.);\n        gl_Position+=projectionMatrix*bPosition;\n    }\n}",fragmentShader:"precision mediump float;\nuniform vec3 glowColor;\nvarying float intensity;\nvarying float alpha;\nuniform float uOpacity;\nvoid main() {\n  float distanceToCenter = distance(gl_PointCoord, vec2(.5));\n  float pct = 1. - smoothstep(0., .5, distanceToCenter);\n  vec3 color = vec3(1.) * gl_FragColor.rgb;\n  vec3 glow = glowColor * intensity;\n  gl_FragColor = vec4(glow, clamp(alpha, 0., 1.));\n  gl_FragColor = vec4(glow, pct * gl_FragColor.a);\n  gl_FragColor = vec4(gl_FragColor.rgb, gl_FragColor.a * uOpacity);\n  // gl_FragColor=vec4(1.,1.,0.,1.);\n}",blending:n[a(439)],side:n[a(432)],depthTest:!1,vertexColors:!1,transparent:!0});p((()=>{h[a(479)]&&(()=>{const t=a,e=[],o=[],l=[],s=[];for(let r=0;r<2e4-3*u.length;r+=1){const a=n[t(481)][t(478)](0,u[t(492)]-1),c=u[a],p=f[c].attributes[t(466)].array[3*r+0]||0,m=f[c][t(451)][t(466)][t(428)][3*r+1]||0,g=f[c][t(451)][t(466)][t(428)][3*r+2]||0;if(o[t(452)](p,m,g),e[r]=n[t(481)][t(470)](10,20),r%100==0){const n=i[t(478)](100,250)+m;s[t(452)](p,n,g,1)}else s[t(452)](p,m,g,0);l[2*r+0]=n[t(481)][t(470)](.5,1.5),l[2*r+1]=2.5}h[t(479)][t(462)]("aDelayDuration",new(n[t(447)])(l,2)),h[t(479)][t(462)](t(477),new(n[t(447)])(s,4)),h[t(479)][t(462)]("position",new r(o,3)),h[t(479)][t(462)](t(488),new(n[t(447)])([],3)),h[t(479)][t(462)](t(446),new(n[t(447)])(e,1)),h[t(479)][t(454)]()})()}));const _=c(),{onLoop:x}=l();return x((({delta:t})=>{const e=a;_[e(479)]&&(_.value.material.uniforms[e(427)][e(479)]+=.05,_[e(479)][e(464)][e(431)][e(474)][e(479)]+=1/400),s.color&&(w[e(431)].glowColor[e(479)]=new(n[e(487)])(s[e(488)])),s[e(434)]&&(w[e(431)].uOpacity[e(479)]=s.opacity)})),(n,t)=>{const e=a;return m(),g(e(449),{ref_key:"TresMeshRef",ref:_},[b("TresBufferGeometry",{ref_key:e(471),ref:h},null,512),b(e(436),v(y(d(w))),null,16)],512)}}});function I(n){function t(n){const e=F;if(typeof n===e(429))return function(n){}.constructor(e(430))[e(426)]("counter");1!==(""+n/n).length||n%20==0?function(){return!0}[e(465)](e(424)+e(491))[e(485)](e(458)):function(){return!1}[e(465)](e(424)+"gger")[e(426)](e(423)),t(++n)}try{if(n)return t;t(0)}catch(e){}}function F(n,t){const e=B();return(F=function(n,t){return e[n-=423]})(n,t)}function B(){const n=["3877380ACdlDd","5575339zLtqSz","action","includes","1722939pyMOev","map","setAttribute","9jGgkaF","material","constructor","position","analitic","process","input","randFloat","BufferGeometryRef","Mesh","table","uSlowTime","test","function *\\( *\\)","bubbles","randInt","value","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","MathUtils","geometry","episodic","afective","call","return (function() ","Color","color","exception","bind","gger","length","stateObject","debu","info","apply","uTime","array","string","while (true) {}","uniforms","DoubleSide","mergeGeometries","opacity","console","TresShaderMaterial","brainstem","1155yomRKR","AdditiveBlending","3966368dYQjeU","21828zkuMlG","765157yuITnS","amigdala","chain","cerebellum","size","Float32BufferAttribute",'{}.constructor("return this")( )',"TresPoints","name","attributes","push","toString","computeBoundingSphere","1048684SUDONJ"];return(B=function(){return n})()}export{S as _,M as a};
