import{m as t,e as n,b as e,U as o}from"./@tresjs.xlnLF3O61731462043013.js";import{_ as r,Y as s,k as a,O as i,W as c,bg as l,A as u,n as v,B as f,bY as p,bn as d,s as m}from"./three.wKRaqyB-1731462043013.js";import{P as g}from"./tweakpane.yHWGBmom1731462043013.js";import{d as x,a6 as h,e as y,o as I,f as b,g as _,J as S,j as w,u as U,aj as D,ak as P,al as E,m as A}from"./@vue.-THQH3GC1731462043013.js";import{_ as L}from"./@fesjs.uG2EzMwn1731462043013.js";import"./@vueuse.W4jVx8WA1731462043013.js";import"./vue-router.9VsVDPG11731462043013.js";import"./lodash-es.kYt-_xTG1731462043013.js";import"./@qlin.yHhFDldE1731462043013.js";import"./pinia.TsQ0LDHQ1731462043013.js";import"./vue-demi.C4xddsk91731462043013.js";import"./@floating-ui.BPbuo5Gx1731462043013.js";import"./@juggle.7yjBMqoW1731462043013.js";!function(t,n){const e=C,o=T();for(;;)try{if(584675===parseInt(e(508))/1*(parseInt(e(517))/2)+parseInt(e(482))/3+-parseInt(e(476))/4*(parseInt(e(495))/5)+parseInt(e(524))/6*(-parseInt(e(512))/7)+-parseInt(e(494))/8*(parseInt(e(492))/9)+-parseInt(e(516))/10*(parseInt(e(500))/11)+parseInt(e(471))/12)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const M=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(472)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function C(t,n){const e=T();return(C=function(t,n){return e[t-=468]})(t,n)}!function(){M(this,(function(){const t=C,n=new RegExp("function *\\( *\\)"),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=N(t(487));n[t(504)](o+t(479))&&e.test(o+"input")?N():o("0")}))()}();const F=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(472)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();F(void 0,(function(){const t=C;let n;try{n=Function(t(480)+'{}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(481)]=n[t(481)]||{},o=[t(507),t(521),t(502),"error",t(478),t(496),"trace"];for(let s=0;s<o.length;s++){const n=F[t(475)][t(511)][t(503)](F),r=o[s],a=e[r]||n;n.__proto__=F[t(503)](F),n[t(510)]=a.toString[t(503)](a),e[r]=n}}))();function z(t,n,e){const o=C;if(typeof t!==o(531)||null===t)return t;const r=Array[o(522)](t)?[]:{};for(const s in t)t[o(506)](s)&&(r[s]=z(t[s])),s==n&&(r[n]=e);return r}function T(){const t=["bind","test","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","hasOwnProperty","log","656489KPcPwx","while (true) {}","toString","prototype","85295LyJZvT","random","call","Vector4","378150gLTFLF","2HKmsHb","value","ShaderMaterial","now","warn","isArray","send","438oVlnyr","string","type","name","lastIndex","WagnerLoadShaderException","v3v","object","exec","action","Vector2","27043212GIcOOd","apply","Matrix2","responseText","constructor","1468RTgliN","\" couldn't be loaded.","exception","chain","return (function() ","console","1305351CxEelU","stateObject","Vector3","Matrix4","Matrix3","init","length","gger","get","replace","3031065FcmsoR","debu","8wDmnAW","14205JcdAGE","table","message",'Shader "',"index","143oGeIwx","counter","info"];return(T=function(){return t})()}function N(t){function n(t){const e=C;if(typeof t===e(525))return function(t){}.constructor(e(509)).apply(e(501));1!==(""+t/t)[e(488)]||t%20==0?function(){return!0}[e(475)](e(493)+"gger")[e(514)](e(469)):function(){return!1}[e(475)]("debu"+e(489))[e(472)](e(483)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const R=j;!function(t,n){const e=j,o=O();for(;;)try{if(902846===-parseInt(e(447))/1+-parseInt(e(496))/2*(parseInt(e(453))/3)+parseInt(e(470))/4+parseInt(e(469))/5+-parseInt(e(503))/6*(parseInt(e(494))/7)+parseInt(e(531))/8*(parseInt(e(466))/9)+parseInt(e(509))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[j(488)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){G(this,(function(){const t=j,n=new RegExp(t(505)),e=new RegExp(t(451),"i"),o=k(t(532));n[t(530)](o+t(521))&&e[t(530)](o+"input")?k():o("0")}))()}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[j(488)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function j(t,n){const e=O();return(j=function(t,n){return e[t-=441]})(t,n)}function O(){const t=["settings","material","height","MeshBasicMaterial","constructor","camera","front","loadShadervf","scale","startTime","log","bind","6867LKcoBr","Stack","Pass","2060250BqVnNu","5817196IsrMyg","table","Mesh","stateObject","swapBuffers","resolution","wrapT","length","params","call","__proto__","LinearFilter","wrapS","far","setSize","passes","toScreen","info","apply","render","uniforms","texture","renderer","makePerspective","72261TojWyE","width","6CwaRdg","near","console","magFilter","scene","gger","removePass","456jvZKgd","getOfflineTexture","function *\\( *\\)","set","stencilBuffer","exception","647200UxkEEc","toString","back","tInput","minFilter","CopyPass","pass","ClampToEdgeWrapping","setRenderTarget","shader","Scene","string","chain","trace","useRGBA","RGBAFormat","read","uuid","copyPass","debu","now","test","17968CqVclD","init","PlaneGeometry","WebGLRenderTarget","makeOrthographic","push","error","write","ShaderMaterial","type","RGBFormat","splice","addPass","745319APkvLq","warn","passItems","quad","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","value","1212054cmDJRm"];return(O=function(){return t})()}B(void 0,(function(){const t=j;let n;try{n=Function('return (function() {}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(498)]=n[t(498)]||{},o=[t(464),t(448),t(487),t(537),t(508),t(471),t(522)];for(let s=0;s<o[t(477)];s++){const n=B.constructor.prototype.bind(B),r=o[s],a=e[r]||n;n[t(480)]=B.bind(B),n[t(510)]=a[t(510)][t(465)](a),e[r]=n}}))();class V{constructor(t,n){const e=j;this[e(495)]=1,this[e(456)]=1,this.settings=n||{},this[e(523)]=this[e(454)][e(523)]||!1,this[e(492)]=t,this[e(527)]=this.CopyPass(this[e(454)]),this[e(500)]=new(r[e(519)]),this.quad=new(r[e(472)])(new(r[e(533)])(1,1),new(r[e(457)])),this[e(500)].add(this[e(450)]),this[e(459)]=new i(1,1,1,1,-1e4,1e4),this[e(460)]=new c(1,1,{minFilter:void 0!==this.settings[e(513)]?this.settings[e(513)]:r[e(481)],magFilter:void 0!==this.settings[e(499)]?this[e(454)][e(499)]:r[e(481)],wrapS:void 0!==this[e(454)].wrapS?this.settings[e(482)]:l,wrapT:void 0!==this[e(454)][e(476)]?this[e(454)][e(476)]:r[e(516)],format:this[e(523)]?r[e(524)]:r[e(444)],type:void 0!==this.settings.type?this[e(454)][e(443)]:u,stencilBuffer:void 0===this[e(454)].stencilBuffer||this[e(454)][e(507)]}),this.back=this[e(460)].clone(),this[e(463)]=Date[e(529)](),this[e(485)]={},this[e(467)]={passItems:[],passes:[]}}[R(446)](t,n,e,o){const r=R;this[r(461)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(518)]};this[r(467)][r(449)][r(536)](s)}[R(502)](t){const n=R;for(let e=this[n(467)][n(449)].length-1;e>=0;e--)this[n(467)][n(449)][e][n(526)]===parseInt(t)&&this.Stack[n(449)][n(445)](e,1);console[n(464)](this.Stack.passItems)}[R(514)](){const t=R;this[t(468)][t(479)](this);return this[t(461)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[R(461)](t){return this[R(518)]=function(t,n){const e=C,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,i=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,c={sampler2D:{type:"t",value:()=>new s},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[C(470)])},vec3:{type:"v3",value:()=>new(r[C(484)])},vec4:{type:"v4",value:()=>new(r[C(515)])},bvec2:{type:"v2",value:()=>new(r[C(470)])},bvec3:{type:"v3",value:()=>new(r[C(484)])},bvec4:{type:"v4",value:()=>new(r[C(515)])},ivec2:{type:"v2",value:()=>new a},ivec3:{type:"v3",value:()=>new(r[C(484)])},ivec4:{type:"v4",value:()=>new(r[C(515)])},mat2:{type:"v2",value:()=>new(r[C(473)])},mat3:{type:"v3",value:()=>new(r[C(486)])},mat4:{type:"v4",value:()=>new(r[C(485)])}},l={float:{type:"fv",value:()=>[]},vec3:{type:e(530),value:()=>[]}};let u;const v={resolution:{type:"v2",value:new(r[e(470)])(1,1),default:!0},time:{type:"f",value:Date[e(520)](),default:!0},tInput:{type:"t",value:new s,default:!0}};let f,p;for(;null!==(u=o.exec(n));)u.index===o.lastIndex&&o.lastIndex++,f=u[1],p=u[2],v[p]={type:c[f].type,value:c[f][e(518)]()};for(;null!==(u=i[e(468)](n));)u[e(499)]===o[e(528)]&&o[e(528)]++,f=u[1],p=u[2],u[3],v[p]={type:l[f][e(526)],value:l[f][e(518)]()};return new(r[e(519)])({uniforms:v,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}("varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }",t),this.shader}[R(468)](t){const n=R;this[n(518)]=null,this[n(478)]={}}Reset(){const t=R;this[t(525)]=this[t(460)],this.write=this[t(511)]}onWindowResize(t,n){const e=R,o=window.innerWidth,r=window.innerHeight;t[e(484)](1*o,1*r),n.projectionMatrix[e(493)](70,o/r,n[e(497)],n.far),this[e(484)](o,r);return this[e(504)](o,r,!0)}[R(484)](t,n){const e=R;this.width=t,this[e(456)]=n,this[e(459)].projectionMatrix[e(535)](t/-2,t/2,n/2,n/-2,this[e(459)].near,this.camera[e(483)]),this[e(450)][e(462)].set(t,n,1),this[e(460)][e(484)](t,n),this[e(511)][e(484)](t,n)}[R(504)](t,n,e){const o=R;return new(r[o(534)])(t,n,{minFilter:r[o(481)],magFilter:v,format:e?r[o(524)]:r[o(444)]})}[R(489)](t,n,e,o){const r=R;this.renderer.setRenderTarget(this[r(441)]),this.renderer.render(t,n),o||this[r(474)]()}[R(474)](){const t=R,n=this[t(441)];this[t(441)]=this.read,this.read=n}[R(515)](){const t=R;for(let n=0;n<this[t(467)][t(449)][t(477)];n++){const e=this[t(467)].passItems[n].shader,o=this[t(467)][t(449)][n][t(478)];if(this[t(492)][t(517)](this[t(441)]),e instanceof r[t(442)]){this.quad.material=e,this[t(450)].material[t(490)][t(512)].value=this.read[t(491)],this[t(450)][t(455)][t(490)][t(475)][t(452)][t(506)](this[t(495)],this.height),this[t(450)][t(455)][t(490)].time.value=.001*(Date[t(529)]()-this[t(463)]);for(const n in o)this[t(450)][t(455)][t(490)][n].value=o[n];this.renderer.render(this[t(500)],this[t(459)]),this[t(474)]()}}}[R(486)](t,n){const e=R;this[e(492)].setRenderTarget(null),this.quad[e(455)]=this[e(527)],this[e(450)][e(455)].uniforms.tInput[e(452)]=this[e(525)][e(491)],this[e(450)][e(455)].uniforms[e(475)].value[e(506)](this.width,this[e(456)]),this[e(492)][e(489)](this[e(500)],this[e(459)])}}function k(t){function n(t){const e=j;if(typeof t===e(520))return function(t){}[e(458)]("while (true) {}")[e(488)]("counter");1!==(""+t/t)[e(477)]||t%20==0?function(){return!0}[e(458)](e(528)+e(501))[e(479)]("action"):function(){return!1}.constructor("debu"+e(501)).apply(e(473)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const H="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",W=Z;!function(t,n){const e=Z,o=$();for(;;)try{if(746707===-parseInt(e(176))/1+parseInt(e(162))/2*(-parseInt(e(168))/3)+-parseInt(e(205))/4+-parseInt(e(177))/5+-parseInt(e(174))/6+parseInt(e(188))/7*(-parseInt(e(190))/8)+parseInt(e(146))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Z(197)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){q(this,(function(){const t=Z,n=new RegExp(t(210)),e=new RegExp(t(199),"i"),o=J(t(147));n.test(o+t(141))&&e[t(209)](o+t(195))?J():o("0")}))()}();const X=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Z(197)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function Z(t,n){const e=$();return(Z=function(t,n){return e[t-=133]})(t,n)}function $(){const t=["action","234Cjkqkf","value","FXAAPass","TOONPass","BOXBLURPass","Reset","1911WjBDiI","warn","关闭通道","addButton","POISSONPass","SOBELPass","8752134TEfcur","console","1082354QnTNhb","336655DeOXkS","addFolder","__proto__","info","counter","return (function() ","gger","CIRCULARPass","push","random","postProcessing","2149arDLWn","SEPIAPass","17344JRAHed","keys","change","table","FREICHENPass","input","error","apply","VIGNETTE1Pass","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","text","receiveShadow","map","exception","移除~","4135772AooirY","call","stateObject","DOTPass","test","function *\\( *\\)","constructor","toString","mergeGeometries","RGBPass","新增通道","removePass","log","list","add","pass","addPass","chain","values","plugins/postProcessing/image/1324.jpg","dispose","onWindowResize","46162161IIBdfg","init","target","split","autoClearColor","toScreen","prototype","BoxGeometry","InvertPass","material","debu","后处理类型","bind","addBlade","while (true) {}"];return($=function(){return t})()}X(void 0,(function(){const t=Z,n=function(){const t=Z;let n;try{n=Function(t(182)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(175)]=n[t(175)]||{},o=[t(136),t(169),t(180),t(196),t(203),t(193),"trace"];for(let r=0;r<o.length;r++){const n=X[t(211)][t(152)].bind(X),s=o[r],a=e[s]||n;n[t(179)]=X[t(158)](X),n[t(212)]=a[t(212)][t(158)](a),e[s]=n}}))();function J(t){function n(t){const e=Z;if("string"==typeof t)return function(t){}.constructor(e(160)).apply(e(181));1!==(""+t/t).length||t%20==0?function(){return!0}[e(211)](e(156)+e(183))[e(206)](e(161)):function(){return!1}.constructor(e(156)+"gger")[e(197)](e(207)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const K=L(x({__name:W(187),async setup(o){const s=W;let i,c;const{camera:l,renderer:u,scene:v,sizes:x}=t();for(var y=new f,I=[],b=0;b<100;b++){var _=new(r[s(153)])(100,100,100);_.translate(1500*Math[s(186)](),1500*Math[s(186)](),1500*Math[s(186)]()),I[s(185)](_)}y=p[s(213)](I);const S=([i,c]=h((()=>e({map:s(143)}))),i=await i,c(),i),w=([i,c]=h((()=>e({map:"plugins/postProcessing/image/1324-normal.jpg"}))),i=await i,c(),i);var U=new d({map:S[s(202)],normalMap:w.map,normalScale:new a(.8,-.8),shininess:100}),D=new m(y,U);D.castShadow=!0,D[s(201)]=!0,v[s(163)][s(138)](D);const P=new V(u[s(163)],{useRGBA:!0}),E=new g;let A=null,L=[{text:s(154),value:{InvertPass:H}},{text:s(164),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:s(189),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:"SNOISEPass",value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:s(166),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:"DENOISEPass",value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:"CGAPass",value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:w[s(202)]}}},{text:s(173),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:s(133),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:s(208),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(184),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:s(172),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:s(198),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:"VIGNETTE2Pass",value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:s(194),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:s(165),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],M=s(154),C=H,F=null;E[s(159)]({view:s(137),label:s(157),options:L,value:""}).on(s(192),(t=>{A=t[s(163)]}));const T=E[s(171)]({title:"新增",label:s(134)});let N=0;T.on("click",(t=>{const n=s;M=Object[n(191)](A)[0],C=Object[n(142)](A)[0],F=Object.values(A)[1];let e=N++,o=E[n(178)]({title:M});for(const s in F){let t=F[s];o[n(159)]({view:n(200),label:s,parse:t=>String(t),value:t})}o[n(171)]({title:n(204)+e,label:n(170)}).on("click",(t=>{const e=n;let o=t[e(148)].title[e(149)]("~")[1];P[e(135)](o)})).on("click",(()=>{o[n(144)]()}));let r=z(F,t[n(148)].label,t[n(163)]);P[n(140)](M,C,r,e)})),P[s(145)](u[s(163)],l[s(163)]);const{onLoop:R}=n();return R((({delta:t})=>{const n=s;D&&(u[n(163)][n(150)]=!0,P[n(167)](),D[n(155)]=U,P.render(v[n(163)],l[n(163)]),P[n(139)](),P[n(151)](v[n(163)],l[n(163)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),Y=et;!function(t,n){const e=et,o=ot();for(;;)try{if(574103===-parseInt(e(343))/1+parseInt(e(344))/2*(parseInt(e(364))/3)+-parseInt(e(370))/4+parseInt(e(349))/5+parseInt(e(361))/6*(-parseInt(e(340))/7)+parseInt(e(377))/8+parseInt(e(345))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){Q(this,(function(){const t=et,n=new RegExp(t(378)),e=new RegExp(t(350),"i"),o=st(t(357));n[t(356)](o+t(375))&&e[t(356)](o+t(352))?st():o("0")}))()}();const tt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[et(367)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();tt(void 0,(function(){const t=et;let n;try{n=Function("return (function() "+t(362)+");")()}catch(r){n=window}const e=n[t(354)]=n[t(354)]||{},o=[t(347),"warn",t(373),t(346),t(348),"table","trace"];for(let s=0;s<o.length;s++){const n=tt[t(363)][t(358)].bind(tt),r=o[s],a=e[r]||n;n.__proto__=tt[t(341)](tt),n[t(359)]=a[t(359)][t(341)](a),e[r]=n}}))();const nt={ref:Y(353),position:[600,850,-1500],fov:45,near:.1,far:1e5};function et(t,n){const e=ot();return(et=function(t,n){return e[t-=338]})(t,n)}function ot(){const t=["input","perspectiveCameraRef","console","postProcessingEditor","test","init","prototype","toString","string","12OMYyqW",'{}.constructor("return this")( )',"constructor","8709phCFCR","TresAmbientLight","stateObject","apply","#000000","action","4081232ZuyFue","TresCanvas","gger","info","TresPerspectiveCamera","chain","counter","268056WwdCXn","function *\\( *\\)","while (true) {}","debu","2488962hluvQl","bind","length","540734jmVwJV","638WrbeQK","9172449CzyOSu","error","log","exception","4337760dqEGdq","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","#ffffff"];return(ot=function(){return t})()}const rt=x({__name:Y(355),setup(t){const e=Y,r={clearColor:e(368),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:"manual"},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=y(a(371));return I(),b(i,A(r,{"window-size":""}),{default:_((()=>[S(a(374),nt,null,512),w(U(o),D(P(s)),null,16),n[0]||(n[0]=S(a(365),{color:"#ffffff",intensity:2},null,-1)),n[1]||(n[1]=S("TresDirectionalLight",{position:[100,100,0],intensity:2,color:a(351)},null,-1)),(I(),b(E,null,{default:_((()=>[w(K)])),_:1}))])),_:1},16)}}});function st(t){function n(t){const e=et;if(typeof t===e(360))return function(t){}[e(363)](e(338))[e(367)](e(376));1!==(""+t/t)[e(342)]||t%20==0?function(){return!0}.constructor("debugger").call(e(369)):function(){return!1}[e(363)](e(339)+e(372))[e(367)](e(366)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{rt as default};
