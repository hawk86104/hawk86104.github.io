import{e,Q as o,J as r}from"./@tresjs.C3WO4ZW41730883607874.js";import{cl as t}from"./three.fIUcjaNz1730883607874.js";import{i as a,m as s,a as n,b as l,c as p,u as i,d as c,f as m}from"./mapShow._F8OrHAm1730883607874.js";import{g as d}from"./gsap.BMhr3K_w1730883607874.js";import{R as u}from"./index.DvO-963q1730883607874.js";import{m as f}from"./d3-geo.BpURvSnU1730883607874.js";import{b as h,q as y,w as g,o as S,D as T,J as x,F as b,V as C,u as v,I as w,f as z,j as N,g as j,H as M,m as k}from"./@vue.Cfu43fwq1730883607874.js";const O=["properties","pName"],G=["args"],I={key:0},_=["pName","position"],B=["position-z","scale","renderOrder"],L=["color","blending","map"],E={__name:"indexHtml",props:{lineColor:"#2bc4dc",topColor:"#f5f5f5",sideColor:"#00407c",iconColor:"#2bc4dc",fontColor:"#fff",fontSize:6,iconSize:.3,shadowColor:"#001c69",moveRoom:1.5,roughness:.8,metalness:.5,normalScale:6,geoJsonUrl:"",areaScale:{type:Number,default:10},centerCoordinates:{type:Array,default:[104,37.5]},showTextIcons:{type:Boolean,default:!0},hasMapTexture:{type:Boolean,default:!0},lineWidth:{type:Number,default:1}},setup(E){const J=E,P={wrapperClass:"wrapperDigitalMapBlockMapShow",as:"div",center:!0,sprite:!1,prepend:!1,transform:!0};a();const R=f().center(J.centerCoordinates).scale(J.areaScale).translate([0,0]),D=h({depth:.66,bevelEnabled:!0,bevelSegments:1,bevelThickness:.1}),W=D.value.depth+.11,q=JSON.parse(u.getItem("map.json")).features,{areaList:A,linesList:H,textList:V}=s(q,R),F=[n(J.roughness,J.metalness,J.normalScale),l(J.sideColor)];J.hasMapTexture||(F[0].map=null,F[0].normalMap=null);const{onLoop:Q}=e();Q((()=>{F[1].map.offset.y+=.002}));const U=h(null);y((()=>{let{boxSize:e,box3:o}=p(U.value.children[0]);U.value.children[0].children.map(((r,t)=>{"Mesh"===r.type&&(r.geometry.computeBoundsTree(),i(r.geometry,e.x,e.y,o.min.x,o.min.y))})),U.value.rotation.x=-Math.PI/2,setTimeout((()=>{Z(J.fontColor,J.shadowColor,J.fontSize)}),600)}));const K=(e,o)=>{let r=J.moveRoom,t=e.object;o||(t=e.eventObject,r=1);m(U.value,t.pName).map((e=>{"block"===e.pType&&d.to(e.scale,{duration:.3,z:r}),"line"===e.pType&&d.to(e.position,{duration:.3,z:W*r}),"text"===e.pType&&d.to(e.position,{duration:.3,z:W*r})}))},X=e=>{K(e,!0),document.body.style.cursor="pointer",e.stopPropagation()},Y=e=>{K(e,!1),document.body.style.cursor="default"};g((()=>[J.topColor,J.sideColor,J.roughness,J.metalness,J.normalScale]),(([e,o,r,t,a])=>{F[0].color.set(e),F[1].color.set(o),F[0].roughness=r,F[0].metalness=t,F[0].normalScale.set(a,a)}),{immediate:!0});const Z=(e,o,r)=>{document.querySelectorAll(".wrapperDigitalMapBlockMapShow #inner span").forEach((t=>{t.style.color="".concat(e),t.style.textShadow="1px 1px 2px ".concat(o),t.style.fontSize="".concat(r,"px")}))};g((()=>[J.fontColor,J.shadowColor,J.fontSize]),(([e,o,r])=>{Z(e,o,r)}),{immediate:!0});const $=u.getItem("icon.png");return(e,a)=>(S(),T("TresGroup",{ref_key:"groupRef",ref:U},[x("TresGroup",null,[(S(!0),T(b,null,C(v(A),((e,o)=>(S(),T("TresMesh",{key:"".concat(o),properties:e.properties,renderOrder:1,material:F,pName:e.pName,pType:"block",onPointerEnter:X,onPointerLeave:Y},[x("TresExtrudeGeometry",{args:[e.shape,D.value]},null,8,G)],40,O)))),128))]),x("TresGroup",null,[(S(!0),T(b,null,C(v(H),((e,r)=>(S(),z(v(o),{key:"".concat(r),renderOrder:r+1e4,pName:e.pName,"position-z":W,pType:"line",points:v(c)(e.points),"line-width":E.lineWidth,color:E.lineColor},null,8,["renderOrder","pName","points","line-width","color"])))),128))]),E.showTextIcons?(S(),T("TresGroup",I,[(S(!0),T(b,null,C(v(V),((e,o)=>(S(),T("TresGroup",{key:"".concat(o),pName:e.pName,pType:"text",position:[e.position[0],e.position[1],W]},[N(v(r),k({ref_for:!0},P),{default:j((()=>[x("span",null,M(e.pName),1)])),_:2},1040),x("TresSprite",{"position-z":E.iconSize,scale:E.iconSize,renderOrder:o+11e3},[x("TresSpriteMaterial",{color:E.iconColor,blending:t,map:v($),transparent:"",depthWrite:!1,depthTest:""},null,8,L)],8,B)],8,_)))),128))])):w("",!0)],512))}};export{E as _};
