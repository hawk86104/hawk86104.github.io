import{a5 as g,q as w,aH as h,bk as x,bt as p,a6 as f,at as M,aE as T,aD as s,aa as P,o as n,c as y,a1 as l,ae as k,af as S,ad as D,au as W,r as b,C as c,J as u,a as v,T as R,ag as B,ak as _,ac as O}from"./vendor.v0nfbpA-1717750029153.js";import{_ as U}from"./reflectorDUDV.vue_vue_type_script_setup_true_lang.PJ9f9fQy1717750029153.js";import"./dither.glsl.y2WXw1t-1717750029153.js";import"./Reflector.9wl9qzVb1717750029153.js";import"./OimoPhysicsBuffer.b5DejoFC1717750029153.js";const $=["rotation-x","scale"],A=l("TresPlaneGeometry",{args:[1,1]},null,-1),E=g({__name:"shaderCircleWave",props:{color:{default:"#ffffff"},colorDark:{default:"#000000"},speed:{default:1},scale:{default:2}},async setup(d){let t,e;const a=d,o=w(),{onLoop:m}=D();m(({delta:i})=>{o.value&&(o.value.material.uniforms.uTime.value+=i*a.speed)});const r=([t,e]=h(()=>x(["./plugins/floor/image/scan.png"])),t=await t,e(),t);r.wrapS=p,r.wrapT=p;const C=f({side:M,transparent:!0,blending:T,flatShading:!0,depthTest:!1,uniforms:{uTime:{type:"f",value:0},uScanTex:{type:"t",value:r},uScanColor:{type:"v3",value:new s(a.color)},uScanColorDark:{type:"v3",value:new s(a.colorDark)}},vertexShader:"\nvarying vec2 vUv;\nvarying vec3 vPosition;\nvoid main(){\n	vUv=uv;\n	vPosition=position;\n	gl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.);\n}\n",fragmentShader:"\n#define uScanOrigin vec3(0.,0.,0.)\n#define uScanWaveRatio1 3.2\n#define uScanWaveRatio2 2.8\n\nuniform float uTime;\nuniform sampler2D uScanTex;\nvarying vec2 vUv;\nvarying vec3 vPosition;\nuniform vec3 uScanColor;\nuniform vec3 uScanColorDark;\n\nfloat circleWave(vec3 p,vec3 origin,float distRatio){\n    float t=uTime;\n    float dist=distance(p,origin)*distRatio;\n    float radialMove=fract(dist-t);\n    float fadeOutMask=1.-smoothstep(1.,3.,dist);\n    radialMove*=fadeOutMask;\n    float cutInitialMask=1.-step(t,dist);\n    radialMove*=cutInitialMask;\n    return radialMove;\n}\n\nvec3 getScanColor(vec3 worldPos,vec2 uv,vec3 col){\n    // mask\n    float scanMask=texture(uScanTex,uv).r;\n    // waves\n    float cw=circleWave(worldPos,uScanOrigin,uScanWaveRatio1);\n    float cw2=circleWave(worldPos,uScanOrigin,uScanWaveRatio2);\n    // scan\n    float mask1=smoothstep(.3,0.,1.-cw);\n    mask1*=(1.+scanMask*.7);\n    \n    float mask2=smoothstep(.07,0.,1.-cw2)*.8;\n    mask1+=mask2;\n    \n    float mask3=smoothstep(.09,0.,1.-cw)*1.5;\n    mask1+=mask3;\n\n    // color\n    vec3 scanCol=mix(uScanColorDark,uScanColor,mask1);\n    col=mix(col,scanCol,mask1);\n    \n    return col;\n		// return vec3(cw);\n		// return vec3(scanMask);\n		// return worldPos;\n		// return vec3(mask1);\n		// return scanCol;\n}\n\nvoid main()\n{\n    vec3 col=vec3(0.);\n    col=getScanColor(vPosition,vUv*10.0,col);\n    gl_FragColor=vec4(col,1.);\n}\n"});return P(()=>{o.value&&(o.value.material.uniforms.uScanColor.value=new s(a.color),o.value.material.uniforms.uScanColorDark.value=new s(a.colorDark))}),(i,V)=>(n(),y("TresMesh",{ref_key:"tmRef",ref:o,"rotation-x":-Math.PI/2,scale:i.scale},[A,l("TresShaderMaterial",k(S(C)),null,16)],8,$))}}),I=l("TresPerspectiveCamera",{position:[3,3,0],fov:45,near:.1,far:1e4},null,-1),N=l("TresAmbientLight",{intensity:6},null,-1),q=g({__name:"circleWave",setup(d){const t=f({reflectivity:.1,showGridHelper:!1,scale:1}),e=f({color:"#ffffff",colorDark:"#000000",speed:1,scale:2}),a=new W({title:"shaderCircleWave地面",expanded:!0});return a.addBinding(e,"color",{label:"圈颜色"}),a.addBinding(e,"colorDark",{label:"圈渐变色"}),a.addBinding(e,"speed",{label:"速度",min:.1,max:5,step:.1}),a.addBinding(e,"scale",{label:"大小",min:.1,max:10,step:.1}),(o,m)=>{const r=b("TresCanvas");return n(),c(r,{clearColor:"#201919","window-size":""},{default:u(()=>[I,v(R(B),{enableDamping:""}),N,(n(),c(_,null,{default:u(()=>[v(E,k(S(e)),null,16)]),_:1})),(n(),c(_,null,{default:u(()=>[v(U,O({position:[0,-.5,0]},t),null,16)]),_:1}))]),_:1})}}});export{q as default};
