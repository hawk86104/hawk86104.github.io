import{m as t,e as n,a as e,o}from"./@tresjs.oW7bfow21742297875262.js";import{_ as r,Y as a,ar as s,V as i,r as c,s as l,aR as u,cW as v,m as f,av as p,cg as d}from"./three.N4lg2KsY1742297875262.js";import{P as m}from"./tweakpane.yDiyAAkA1742297875262.js";import{d as g,a3 as x,e as h,o as y,f as I,g as b,N as _,j as S,u as U,aj as w,ak as P,al as D,m as E}from"./@vue.NRI7TcgI1742297875262.js";import{_ as A}from"./@fesjs.5gYNbdbo1742297875262.js";import"./postprocessing.9PKUyDJ51742297875262.js";import"./@vueuse.Y8_DCJgq1742297875262.js";import"./vue-router.voBLX0XL1742297875262.js";import"./lodash-es.pklfUAS51742297875262.js";import"./@qlin.yHhFDldE1742297875262.js";import"./pinia.qX8pw0bq1742297875262.js";import"./@floating-ui.BPbuo5Gx1742297875262.js";import"./@juggle.7yjBMqoW1742297875262.js";function M(t,n){const e=C();return(M=function(t,n){return e[t-=369]})(t,n)}!function(t,n){const e=M,o=C();for(;;)try{if(218173===-parseInt(e(374))/1*(-parseInt(e(369))/2)+-parseInt(e(417))/3+-parseInt(e(373))/4*(parseInt(e(394))/5)+parseInt(e(384))/6*(-parseInt(e(392))/7)+-parseInt(e(399))/8+parseInt(e(382))/9*(-parseInt(e(427))/10)+parseInt(e(424))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function C(){const t=["counter","log","chain","value","random","Matrix4","init","type","message","string","return (function() ","1268721hreAnP","get","send","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","length",'" load was aborted.',"WagnerLoadShaderException","10092115jKyAIP","replace","apply","10460cKzccO","Vector4","info",'Shader "',"__proto__","Matrix3","trace","2sOXryC","onerror","gger","toString","4VhCRXw","402359rDYOKn","test","debu","Vector2","v3v","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","lastIndex","action","3258tovvsq","constructor","36222JVsVCg","stateObject","object","open","bind","Matrix2","name","ShaderMaterial","7mzYglG","prototype","97045oJtcIA","isArray","exec","warn","onload","2197168koNFLW","now","Vector3","function *\\( *\\)","call","Texture","index"];return(C=function(){return t})()}!function(){L(this,(function(){const t=M,n=new RegExp(t(402)),e=new RegExp(t(379),"i"),o=T(t(412));n[t(375)](o+t(408))&&e[t(375)](o+"input")?T():o("0")}))()}();const F=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[M(426)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();F(void 0,(function(){const t=M,n=function(){const t=M;let n;try{n=Function(t(416)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n.console=n.console||{},o=[t(407),t(397),t(429),"error","exception","table",t(433)];for(let r=0;r<o[t(421)];r++){const n=F[t(383)][t(393)][t(388)](F),a=o[r],s=e[a]||n;n[t(431)]=F.bind(F),n[t(372)]=s[t(372)][t(388)](s),e[a]=n}}))();function z(t,n,e){const o=M;if(typeof t!==o(386)||null===t)return t;const r=Array[o(395)](t)?[]:{};for(const a in t)t.hasOwnProperty(a)&&(r[a]=z(t[a])),a==n&&(r[n]=e);return r}function T(t){function n(t){const e=M;if(typeof t===e(415))return function(t){}[e(383)]("while (true) {}")[e(426)](e(406));1!==(""+t/t)[e(421)]||t%20==0?function(){return!0}[e(383)](e(376)+e(371))[e(403)](e(381)):function(){return!1}[e(383)](e(376)+e(371))[e(426)](e(385)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const N=R;function R(t,n){const e=V();return(R=function(t,n){return e[t-=102]})(t,n)}!function(t,n){const e=R,o=V();for(;;)try{if(925348===parseInt(e(111))/1*(-parseInt(e(178))/2)+parseInt(e(116))/3*(parseInt(e(130))/4)+-parseInt(e(123))/5+-parseInt(e(120))/6*(parseInt(e(202))/7)+-parseInt(e(122))/8+-parseInt(e(191))/9*(-parseInt(e(137))/10)+parseInt(e(170))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(196)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){G(this,(function(){const t=R,n=new RegExp(t(112)),e=new RegExp(t(195),"i"),o=B(t(142));n[t(154)](o+t(167))&&e.test(o+t(184))?B():o("0")}))()}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(196)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function V(){const t=["type","UnsignedByteType","ShaderMaterial","toScreen","useRGBA","chain","value","params","6112524pLKiqv","debu","length","CopyPass","far","wrapT","action","material","638164LAOXft","set","bind","splice","ClampToEdgeWrapping","Reset","input","shader","setRenderTarget","startTime","resolution","while (true) {}","call","9TYTKsC","swapBuffers","table","loadShadervf","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","apply","counter","read","removePass","stencilBuffer","back","27377tMxQCb","wrapS","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","render","Pass","innerWidth","magFilter","MeshBasicMaterial","renderer","minFilter","scene","passItems","uuid","push","1NrdfHE","function *\\( *\\)","makePerspective","Scene","copyPass","5032653KKzVlE","width","front","time","78xHXqvG","constructor","14405784zyLRbU","797555HwSJot","WebGLRenderTarget","RGBAFormat","write","Stack","toString","setSize","4PhuRDn","addPass","getOfflineTexture","warn","quad","uniforms","near","10222720WDldhP","camera","now","makeOrthographic","return (function() ","init","info","exception","stateObject","pass",'{}.constructor("return this")( )',"innerHeight","__proto__","height","log","settings","tInput","test","error","gger","clone","console","OrthographicCamera","LinearFilter","trace"];return(V=function(){return t})()}O(void 0,(function(){const t=R,n=function(){const t=R;let n;try{n=Function(t(141)+t(147)+");")()}catch(e){n=window}return n}(),e=n[t(158)]=n[t(158)]||{},o=[t(151),t(133),t(143),t(155),t(144),t(193),t(161)];for(let r=0;r<o[t(172)];r++){const n=O[t(121)].prototype.bind(O),a=o[r],s=e[a]||n;n[t(149)]=O[t(180)](O),n[t(128)]=s[t(128)][t(180)](s),e[a]=n}}))();class j{constructor(t,n){const e=R;this.width=1,this[e(150)]=1,this[e(152)]=n||{},this[e(166)]=this[e(152)][e(166)]||!1,this[e(105)]=t,this[e(115)]=this.CopyPass(this[e(152)]),this[e(107)]=new(r[e(114)]),this[e(134)]=new c(new l(1,1),new(r[e(104)])),this[e(107)].add(this.quad),this[e(138)]=new(r[e(159)])(1,1,1,1,-1e4,1e4),this[e(118)]=new(r[e(124)])(1,1,{minFilter:void 0!==this[e(152)][e(106)]?this[e(152)].minFilter:r[e(160)],magFilter:void 0!==this.settings[e(103)]?this[e(152)][e(103)]:r[e(160)],wrapS:void 0!==this[e(152)][e(203)]?this.settings[e(203)]:r[e(182)],wrapT:void 0!==this[e(152)].wrapT?this[e(152)][e(175)]:r[e(182)],format:this[e(166)]?u:v,type:void 0!==this[e(152)][e(162)]?this.settings[e(162)]:r[e(163)],stencilBuffer:void 0===this[e(152)][e(200)]||this[e(152)][e(200)]}),this[e(201)]=this.front[e(157)](),this[e(187)]=Date.now(),this.passes={},this.Stack={passItems:[],passes:[]}}[N(131)](t,n,e,o){const r=N;this.loadShadervf(n);const a={shaderName:t,params:e,uuid:o,shader:this.shader};this[r(127)].passItems[r(110)](a)}[N(199)](t){const n=N;for(let e=this[n(127)][n(108)][n(172)]-1;e>=0;e--)this.Stack[n(108)][e][n(109)]===parseInt(t)&&this[n(127)][n(108)][n(181)](e,1);console[n(151)](this[n(127)][n(108)])}[N(173)](){const t=N;this[t(206)][t(190)](this);return this[t(194)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[N(194)](t){const n=N,e=n(204);return this[n(185)]=function(t,n){const e=M,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,c=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,l={sampler2D:{type:"t",value:()=>new a},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[M(377)])},vec3:{type:"v3",value:()=>new(r[M(401)])},vec4:{type:"v4",value:()=>new s},bvec2:{type:"v2",value:()=>new i},bvec3:{type:"v3",value:()=>new(r[M(401)])},bvec4:{type:"v4",value:()=>new(r[M(428)])},ivec2:{type:"v2",value:()=>new i},ivec3:{type:"v3",value:()=>new(r[M(401)])},ivec4:{type:"v4",value:()=>new(r[M(428)])},mat2:{type:"v2",value:()=>new(r[M(389)])},mat3:{type:"v3",value:()=>new(r[M(432)])},mat4:{type:"v4",value:()=>new(r[M(411)])}},u={float:{type:"fv",value:()=>[]},vec3:{type:e(378),value:()=>[]}};let v;const f={resolution:{type:"v2",value:new(r[e(377)])(1,1),default:!0},time:{type:"f",value:Date[e(400)](),default:!0},tInput:{type:"t",value:new(r[e(404)]),default:!0}};let p,d;for(;null!==(v=o[e(396)](n));)v.index===o[e(380)]&&o[e(380)]++,p=v[1],d=v[2],f[d]={type:l[p][e(413)],value:l[p][e(409)]()};for(;null!==(v=c[e(396)](n));)v[e(405)]===o.lastIndex&&o[e(380)]++,p=v[1],d=v[2],v[3],f[d]={type:u[p][e(413)],value:u[p][e(409)]()};return new(r[e(391)])({uniforms:f,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(185)]}[N(206)](t){this[N(185)]=null,this.params={}}[N(183)](){const t=N;this[t(198)]=this.front,this[t(126)]=this[t(201)]}onWindowResize(t,n){const e=N,o=window[e(102)],r=window[e(148)];t[e(129)](1*o,1*r),n.projectionMatrix[e(113)](70,o/r,n[e(136)],n[e(174)]),this[e(129)](o,r);return this.getOfflineTexture(o,r,!0)}[N(129)](t,n){const e=N;this[e(117)]=t,this[e(150)]=n,this.camera.projectionMatrix[e(140)](t/-2,t/2,n/2,n/-2,this[e(138)].near,this.camera[e(174)]),this[e(134)].scale[e(179)](t,n,1),this[e(118)][e(129)](t,n),this[e(201)][e(129)](t,n)}[N(132)](t,n,e){const o=N;return new(r[o(124)])(t,n,{minFilter:r[o(160)],magFilter:f,format:e?r[o(125)]:v})}[N(205)](t,n,e,o){const r=N;this[r(105)].setRenderTarget(this[r(126)]),this[r(105)][r(205)](t,n),o||this[r(192)]()}[N(192)](){const t=N,n=this.write;this[t(126)]=this[t(198)],this[t(198)]=n}[N(146)](){const t=N;for(let n=0;n<this.Stack[t(108)][t(172)];n++){const e=this[t(127)].passItems[n][t(185)],o=this[t(127)].passItems[n][t(169)];if(this[t(105)][t(186)](this[t(126)]),e instanceof r[t(164)]){this[t(134)].material=e,this[t(134)].material[t(135)][t(153)][t(168)]=this[t(198)].texture,this[t(134)][t(177)].uniforms[t(188)][t(168)].set(this[t(117)],this[t(150)]),this[t(134)][t(177)][t(135)][t(119)][t(168)]=.001*(Date[t(139)]()-this[t(187)]);for(const n in o)this.quad[t(177)][t(135)][n][t(168)]=o[n];this.renderer.render(this[t(107)],this.camera),this[t(192)]()}}}[N(165)](t,n){const e=N;this[e(105)].setRenderTarget(null),this.quad[e(177)]=this[e(115)],this[e(134)][e(177)][e(135)][e(153)][e(168)]=this[e(198)].texture,this[e(134)][e(177)][e(135)][e(188)][e(168)][e(179)](this[e(117)],this[e(150)]),this[e(105)][e(205)](this[e(107)],this[e(138)])}}function B(t){function n(t){const e=R;if("string"==typeof t)return function(t){}[e(121)](e(189)).apply(e(197));1!==(""+t/t).length||t%20==0?function(){return!0}[e(121)]("debu"+e(156))[e(190)](e(176)):function(){return!1}[e(121)](e(171)+e(156))[e(196)](e(145)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const k="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",H=K;!function(t,n){const e=K,o=X();for(;;)try{if(918738===parseInt(e(172))/1+parseInt(e(176))/2+parseInt(e(206))/3+-parseInt(e(147))/4*(-parseInt(e(199))/5)+-parseInt(e(184))/6+-parseInt(e(192))/7*(parseInt(e(208))/8)+-parseInt(e(207))/9*(-parseInt(e(181))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const W=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function X(){const t=["移除~","castShadow","pass","value","error","autoClearColor","TOONPass","input","receiveShadow","warn","removePass","后处理类型","VIGNETTE2Pass","log","click","call","213464itZXOy","split","constructor","FREICHENPass","toString","target","toScreen","return (function() ","info","title","BOXBLURPass","SNOISEPass","MeshPhongMaterial","values","Mesh","POISSONPass","random","apply","关闭通道","bind","InvertPass","action","exception","add","plugins/postProcessing/image/1324.jpg","317077IVDUMT","SOBELPass","addBlade","BufferGeometry","897798UqDqbO","addButton","push","length","dispose","15088540EcpxWU","text","Reset","9219894FfCJWa","test","gger","__proto__","console","CIRCULARPass","chain","VIGNETTE1Pass","263095eADdOK","Vector2","init","change","translate","CGAPass","postProcessing","10hbjQuw",'{}.constructor("return this")( )',"string","RGBPass","prototype","addFolder","while (true) {}","2476575CZhtCA","9ZAWchM","160KGkBrN","DOTPass","debu","map","DENOISEPass"];return(X=function(){return t})()}!function(){W(this,(function(){const t=K,n=new RegExp("function *\\( *\\)"),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=Z(t(194));n.test(o+t(190))&&e[t(185)](o+t(138))?Z():o("0")}))()}();const q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[K(164)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function K(t,n){const e=X();return(K=function(t,n){return e[t-=138]})(t,n)}q(void 0,(function(){const t=K,n=function(){const t=K;let n;try{n=Function(t(154)+t(200)+");")()}catch(e){n=window}return n}(),e=n[t(188)]=n[t(188)]||{},o=[t(144),t(140),t(155),t(217),t(169),"table","trace"];for(let r=0;r<o[t(179)];r++){const n=q[t(149)][t(203)][t(166)](q),a=o[r],s=e[a]||n;n[t(187)]=q[t(166)](q),n[t(151)]=s[t(151)][t(166)](s),e[a]=n}}))();function Z(t){function n(t){const e=K;if(typeof t===e(201))return function(t){}[e(149)](e(205)).apply("counter");1!==(""+t/t)[e(179)]||t%20==0?function(){return!0}[e(149)](e(210)+"gger")[e(146)](e(168)):function(){return!1}[e(149)](e(210)+e(186))[e(164)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const $=A(g({__name:H(198),async setup(o){const a=H;let s,i;const{camera:c,renderer:l,scene:u,sizes:v}=t();for(var f=new(r[a(175)]),g=[],h=0;h<100;h++){var y=new p(100,100,100);y[a(196)](1500*Math[a(163)](),1500*Math[a(163)](),1500*Math.random()),g[a(178)](y)}f=d(g);const I=([s,i]=x((()=>e({map:a(171)}))),s=await s,i(),s),b=([s,i]=x((()=>e({map:"plugins/postProcessing/image/1324-normal.jpg"}))),s=await s,i(),s);var _=new(r[a(159)])({map:I.map,normalMap:b.map,normalScale:new(r[a(193)])(.8,-.8),shininess:100}),S=new(r[a(161)])(f,_);S[a(214)]=!0,S[a(139)]=!0,u[a(216)][a(170)](S);const U=new j(l.value,{useRGBA:!0}),w=new m;let P=null,D=[{text:"InvertPass",value:{InvertPass:k}},{text:"FXAAPass",value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:"SEPIAPass",value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:a(158),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:a(157),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:a(212),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:a(197),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:b[a(211)]}}},{text:a(173),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:a(202),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:a(209),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:a(189),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:a(162),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:a(191),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:a(143),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:a(150),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:a(219),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],E=a(167),A=k,M=null;w.addBlade({view:"list",label:a(142),options:D,value:""}).on(a(195),(t=>{P=t[a(216)]}));const L=w.addButton({title:"新增",label:"新增通道"});let C=0;L.on(a(145),(t=>{const n=a;E=Object.keys(P)[0],A=Object.values(P)[0],M=Object[n(160)](P)[1];let e=C++,o=w[n(204)]({title:E});for(const a in M){let t=M[a];o[n(174)]({view:n(182),label:a,parse:t=>String(t),value:t})}o[n(177)]({title:n(213)+e,label:n(165)}).on("click",(t=>{const e=n;let o=t[e(152)][e(156)][e(148)]("~")[1];U[e(141)](o)})).on(n(145),(()=>{o[n(180)]()}));let r=z(M,t[n(152)].label,t[n(216)]);U.addPass(E,A,r,e)})),U.onWindowResize(l[a(216)],c[a(216)]);const{onLoop:F}=n();return F((({delta:t})=>{const n=a;S&&(l[n(216)][n(218)]=!0,U[n(183)](),S.material=_,U.render(u.value,c[n(216)]),U[n(215)](),U[n(153)](u[n(216)],c[n(216)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),Y=tt;!function(t,n){const e=tt,o=Q();for(;;)try{if(712804===parseInt(e(285))/1*(-parseInt(e(274))/2)+-parseInt(e(314))/3+parseInt(e(282))/4*(-parseInt(e(301))/5)+parseInt(e(309))/6+parseInt(e(297))/7+-parseInt(e(304))/8*(-parseInt(e(276))/9)+parseInt(e(290))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const J=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function Q(){const t=["perspectiveCameraRef","input","exception","1199365NCVKqK","prototype","length","8zMFYuF","init","test","call","return (function() ","5977560kIdWEy","warn","constructor","trace","#ffffff","4082508nUtzDk","#000000","error","table","action","86TAbkFK","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","1244610aukihO","__proto__","stateObject","log","string","TresCanvas","4JNwSkT","apply","toString","21953VJsQws","postProcessingEditor","function *\\( *\\)","info","TresPerspectiveCamera","20268310VFOoYk","bind","TresDirectionalLight","gger","debu","console","chain","672777LhPYMx"];return(Q=function(){return t})()}function tt(t,n){const e=Q();return(tt=function(t,n){return e[t-=272]})(t,n)}!function(){J(this,(function(){const t=tt,n=new RegExp(t(287)),e=new RegExp(t(275),"i"),o=rt(t(305));n[t(306)](o+t(296))&&e[t(306)](o+t(299))?rt():o("0")}))()}();const nt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();nt(void 0,(function(){const t=tt;let n;try{n=Function(t(308)+'{}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(295)]=n[t(295)]||{},o=[t(279),t(310),t(288),t(316),t(300),t(272),t(312)];for(let a=0;a<o[t(303)];a++){const n=nt[t(311)][t(302)][t(291)](nt),r=o[a],s=e[r]||n;n[t(277)]=nt[t(291)](nt),n[t(284)]=s.toString[t(291)](s),e[r]=n}}))();const et={ref:Y(298),position:[600,850,-1500],fov:45,near:.1,far:1e5},ot=g({__name:Y(286),setup(t){const e=Y,r={clearColor:e(315),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:"manual"},a={autoRotate:!0,enableDamping:!0},{onLoop:s}=n();return s((({delta:t})=>{})),(t,n)=>{const s=e,i=h(s(281));return y(),I(i,E(r,{"window-size":""}),{default:b((()=>[_(s(289),et,null,512),S(U(o),w(P(a)),null,16),n[0]||(n[0]=_("TresAmbientLight",{color:s(313),intensity:2},null,-1)),n[1]||(n[1]=_(s(292),{position:[100,100,0],intensity:2,color:s(313)},null,-1)),(y(),I(D,null,{default:b((()=>[S($)])),_:1}))])),_:1},16)}}});function rt(t){function n(t){const e=tt;if(typeof t===e(280))return function(t){}[e(311)]("while (true) {}")[e(283)]("counter");1!==(""+t/t)[e(303)]||t%20==0?function(){return!0}.constructor(e(294)+e(293))[e(307)](e(273)):function(){return!1}[e(311)](e(294)+"gger").apply(e(278)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{ot as default};
