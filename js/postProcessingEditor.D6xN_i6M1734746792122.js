import{m as t,e as n,b as e,U as o}from"./@tresjs.vA_UT8oy1734746792122.js";import{_ as r,Y as s,m as a,k as i,V as c,as as l,t as u,bg as v,cW as f,A as p,c3 as d}from"./three.1FILWcBb1734746792122.js";import{P as m}from"./tweakpane.yHWGBmom1734746792122.js";import{d as g,a6 as x,e as h,o as y,f as I,g as b,J as _,j as S,u as U,aj as w,ak as P,al as E,m as D}from"./@vue.-THQH3GC1734746792122.js";import{_ as M}from"./@fesjs.Y0rSBxCv1734746792122.js";import"./@vueuse.lqJslAkC1734746792122.js";import"./vue-router.PPpNBBl21734746792122.js";import"./lodash-es.kYt-_xTG1734746792122.js";import"./@qlin.yHhFDldE1734746792122.js";import"./pinia.fA-Uqav61734746792122.js";import"./vue-demi.C4xddsk91734746792122.js";import"./@floating-ui.BPbuo5Gx1734746792122.js";import"./@juggle.7yjBMqoW1734746792122.js";function A(){const t=["1688571PEgGSQ","Matrix4","prototype","value","Vector3","function *\\( *\\)","exception","apply","table","901FWPwor","length","chain","type","7065fpztdj",'Shader "',"onabort","lastIndex","733624JtwVRY","info","Matrix3","1596JSVSBi","console","index","WagnerLoadShaderException","exec","6PpeXrK","action","Matrix2","Vector4","object","while (true) {}","11840IjqnFt","string","replace","\" couldn't be loaded.","gger","init","get","trace","random",'" load was aborted.',"__proto__","test","6787iixkDi","open","onerror","toString","constructor","8iklsUy","hasOwnProperty","1668NPTFUk","322343dIuExt","Vector2","error","v3v",'{}.constructor("return this")( )',"counter","12CbcBqZ","bind","onload","8017334jTwMno","message","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","stateObject"];return(A=function(){return t})()}function L(t,n){const e=A();return(L=function(t,n){return e[t-=383]})(t,n)}!function(t,n){const e=L,o=A();for(;;)try{if(413002===parseInt(e(445))/1*(parseInt(e(422))/2)+parseInt(e(397))/3*(-parseInt(e(389))/4)+-parseInt(e(385))/5*(-parseInt(e(392))/6)+parseInt(e(423))/7*(-parseInt(e(420))/8)+-parseInt(e(436))/9+-parseInt(e(403))/10*(parseInt(e(415))/11)+parseInt(e(429))/12*(parseInt(e(432))/13))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const F=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){F(this,(function(){const t=L,n=new RegExp(t(441)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=N(t(408));n.test(o+t(383))&&e[t(414)](o+"input")?N():o("0")}))()}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(443)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();C(void 0,(function(){const t=L;let n;try{n=Function("return (function() "+t(427)+");")()}catch(r){n=window}const e=n.console=n[t(393)]||{},o=["log","warn",t(390),t(425),t(442),t(444),t(410)];for(let s=0;s<o[t(446)];s++){const n=C[t(419)][t(438)][t(430)](C),r=o[s],a=e[r]||n;n[t(413)]=C.bind(C),n[t(418)]=a[t(418)][t(430)](a),e[r]=n}}))();function z(t,n,e){const o=L;if(typeof t!==o(401)||null===t)return t;const r=Array.isArray(t)?[]:{};for(const s in t)t[o(421)](s)&&(r[s]=z(t[s])),s==n&&(r[n]=e);return r}function N(t){function n(t){const e=L;if(typeof t===e(404))return function(t){}[e(419)](e(402))[e(443)](e(428));1!==(""+t/t)[e(446)]||t%20==0?function(){return!0}[e(419)]("debu"+e(407)).call(e(398)):function(){return!1}[e(419)]("debugger")[e(443)](e(435)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const T=G;!function(t,n){const e=G,o=V();for(;;)try{if(394537===-parseInt(e(342))/1*(-parseInt(e(337))/2)+parseInt(e(309))/3+-parseInt(e(271))/4+-parseInt(e(276))/5*(-parseInt(e(273))/6)+parseInt(e(307))/7+-parseInt(e(303))/8+-parseInt(e(281))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[G(344)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){B(this,(function(){const t=G,n=new RegExp(t(325)),e=new RegExp(t(312),"i"),o=k(t(305));n[t(280)](o+t(329))&&e[t(280)](o+"input")?k():o("0")}))()}();const R=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function G(t,n){const e=V();return(G=function(t,n){return e[t-=256]})(t,n)}R(void 0,(function(){const t=G;let n;try{n=Function(t(260)+'{}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(285)]=n[t(285)]||{},o=[t(316),t(290),t(261),"error","exception","table","trace"];for(let s=0;s<o[t(304)];s++){const n=R[t(319)][t(333)][t(287)](R),r=o[s],a=e[r]||n;n[t(318)]=R[t(287)](R),n.toString=a[t(286)][t(287)](a),e[r]=n}}))();class j{constructor(t,n){const e=G;this[e(296)]=1,this[e(288)]=1,this.settings=n||{},this[e(338)]=this[e(269)][e(338)]||!1,this[e(295)]=t,this.copyPass=this[e(340)](this[e(269)]),this[e(299)]=new(r[e(308)]),this[e(348)]=new(r[e(257)])(new u(1,1),new(r[e(293)])),this[e(299)][e(272)](this[e(348)]),this[e(264)]=new(r[e(326)])(1,1,1,1,-1e4,1e4),this[e(265)]=new(r[e(321)])(1,1,{minFilter:void 0!==this[e(269)][e(317)]?this.settings[e(317)]:r[e(259)],magFilter:void 0!==this[e(269)][e(282)]?this[e(269)][e(282)]:r[e(259)],wrapS:void 0!==this[e(269)][e(339)]?this[e(269)][e(339)]:r[e(262)],wrapT:void 0!==this[e(269)][e(289)]?this.settings.wrapT:v,format:this[e(338)]?r[e(352)]:f,type:void 0!==this.settings.type?this.settings[e(322)]:p,stencilBuffer:void 0===this[e(269)][e(331)]||this[e(269)][e(331)]}),this[e(256)]=this.front.clone(),this[e(292)]=Date.now(),this[e(314)]={},this[e(334)]={passItems:[],passes:[]}}[T(306)](t,n,e,o){const r=T;this[r(341)](n);const s={shaderName:t,params:e,uuid:o,shader:this.shader};this[r(334)][r(343)][r(313)](s)}[T(278)](t){const n=T;for(let e=this[n(334)][n(343)].length-1;e>=0;e--)this[n(334)].passItems[e][n(336)]===parseInt(t)&&this.Stack[n(343)][n(347)](e,1);console[n(316)](this[n(334)][n(343)])}[T(340)](){const t=T;this[t(323)][t(284)](this);return this[t(341)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[T(341)](t){const n=T,e=n(297);return this[n(335)]=function(t,n){const e=L,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,u=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,v={sampler2D:{type:"t",value:()=>new s},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[L(424)])},vec3:{type:"v3",value:()=>new(r[L(440)])},vec4:{type:"v4",value:()=>new(r[L(400)])},bvec2:{type:"v2",value:()=>new i},bvec3:{type:"v3",value:()=>new c},bvec4:{type:"v4",value:()=>new(r[L(400)])},ivec2:{type:"v2",value:()=>new i},ivec3:{type:"v3",value:()=>new(r[L(440)])},ivec4:{type:"v4",value:()=>new l},mat2:{type:"v2",value:()=>new(r[L(399)])},mat3:{type:"v3",value:()=>new(r[L(391)])},mat4:{type:"v4",value:()=>new(r[L(437)])}},f={float:{type:"fv",value:()=>[]},vec3:{type:e(426),value:()=>[]}};let p;const d={resolution:{type:"v2",value:new(r[e(424)])(1,1),default:!0},time:{type:"f",value:Date.now(),default:!0},tInput:{type:"t",value:new s,default:!0}};let m,g;for(;null!==(p=o[e(396)](n));)p[e(394)]===o[e(388)]&&o[e(388)]++,m=p[1],g=p[2],d[g]={type:v[m].type,value:v[m][e(439)]()};for(;null!==(p=u[e(396)](n));)p[e(394)]===o.lastIndex&&o[e(388)]++,m=p[1],g=p[2],p[3],d[g]={type:f[m][e(384)],value:f[m][e(439)]()};return new a({uniforms:d,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(335)]}Pass(t){const n=T;this[n(335)]=null,this[n(310)]={}}[T(349)](){const t=T;this[t(294)]=this.front,this.write=this[t(256)]}onWindowResize(t,n){const e=T,o=window[e(258)],r=window[e(279)];t[e(315)](1*o,1*r),n[e(298)][e(274)](70,o/r,n.near,n[e(324)]),this[e(315)](o,r);return this[e(311)](o,r,!0)}setSize(t,n){const e=T;this[e(296)]=t,this[e(288)]=n,this.camera[e(298)][e(263)](t/-2,t/2,n/2,n/-2,this[e(264)][e(283)],this[e(264)][e(324)]),this[e(348)].scale[e(351)](t,n,1),this[e(265)][e(315)](t,n),this.back[e(315)](t,n)}[T(311)](t,n,e){const o=T;return new(r[o(321)])(t,n,{minFilter:r[o(259)],magFilter:r[o(259)],format:e?r[o(352)]:f})}[T(275)](t,n,e,o){const r=T;this[r(295)][r(300)](this.write),this[r(295)].render(t,n),o||this[r(350)]()}[T(350)](){const t=T,n=this[t(346)];this[t(346)]=this[t(294)],this[t(294)]=n}pass(){const t=T;for(let n=0;n<this[t(334)][t(343)].length;n++){const e=this[t(334)][t(343)][n].shader,o=this[t(334)][t(343)][n][t(310)];if(this[t(295)][t(300)](this[t(346)]),e instanceof r[t(328)]){this[t(348)].material=e,this[t(348)][t(320)][t(291)][t(327)].value=this[t(294)][t(345)],this[t(348)][t(320)][t(291)][t(268)].value[t(351)](this.width,this[t(288)]),this[t(348)][t(320)].uniforms.time[t(330)]=.001*(Date[t(266)]()-this[t(292)]);for(const n in o)this.quad.material[t(291)][n][t(330)]=o[n];this[t(295)][t(275)](this[t(299)],this[t(264)]),this[t(350)]()}}}[T(270)](t,n){const e=T;this[e(295)][e(300)](null),this[e(348)][e(320)]=this[e(302)],this[e(348)].material.uniforms[e(327)].value=this.read.texture,this[e(348)][e(320)][e(291)][e(268)][e(330)][e(351)](this[e(296)],this.height),this[e(295)][e(275)](this.scene,this[e(264)])}}function k(t){function n(t){const e=G;if("string"==typeof t)return function(t){}[e(319)](e(267))[e(344)]("counter");1!==(""+t/t).length||t%20==0?function(){return!0}[e(319)](e(301)+e(332))[e(284)](e(277)):function(){return!1}.constructor(e(301)+e(332))[e(344)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}function V(){const t=["wrapS","CopyPass","loadShadervf","1aQvAFr","passItems","apply","texture","write","splice","quad","Reset","swapBuffers","set","RGBAFormat","back","Mesh","innerWidth","LinearFilter","return (function() ","info","ClampToEdgeWrapping","makeOrthographic","camera","front","now","while (true) {}","resolution","settings","toScreen","568112klntds","add","1161912TpXffw","makePerspective","render","10kiObUE","action","removePass","innerHeight","test","7122024ukJlVJ","magFilter","near","call","console","toString","bind","height","wrapT","warn","uniforms","startTime","MeshBasicMaterial","read","renderer","width","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","projectionMatrix","scene","setRenderTarget","debu","copyPass","285592chiOFl","length","init","addPass","2913071rUBMOB","Scene","714900uIACqf","params","getOfflineTexture","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","push","passes","setSize","log","minFilter","__proto__","constructor","material","WebGLRenderTarget","type","Pass","far","function *\\( *\\)","OrthographicCamera","tInput","ShaderMaterial","chain","value","stencilBuffer","gger","prototype","Stack","shader","uuid","643686jPFBlr","useRGBA"];return(V=function(){return t})()}const O="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}";function H(t,n){const e=Z();return(H=function(t,n){return e[t-=497]})(t,n)}const W=H;!function(t,n){const e=H,o=Z();for(;;)try{if(626273===-parseInt(e(520))/1+-parseInt(e(575))/2*(-parseInt(e(586))/3)+parseInt(e(567))/4*(-parseInt(e(517))/5)+-parseInt(e(497))/6*(-parseInt(e(544))/7)+-parseInt(e(557))/8+-parseInt(e(573))/9*(-parseInt(e(526))/10)+parseInt(e(572))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const X=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[H(560)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){X(this,(function(){const t=H,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(566),"i"),o=$(t(502));n[t(536)](o+t(580))&&e[t(536)](o+t(515))?$():o("0")}))()}();const q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[H(560)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function Z(){const t=["stateObject","while (true) {}","autoClearColor","change","console","addFolder","input","toString","20ZWSkRU","gger","material","1112339VQXFyl","push","Mesh","FREICHENPass","mergeGeometries","plugins/postProcessing/image/1324.jpg","2910ECTojF","split","bind","title","prototype","action","关闭通道","constructor","values","addButton","test","click","text","dispose","debu","string","CGAPass","label","7psElvp","trace","warn","translate","DOTPass","value","移除~","BoxGeometry","addPass","MeshPhongMaterial","postProcessing","keys","info","1217168kObTNW","Reset","removePass","apply","POISSONPass","castShadow","__proto__","call","receiveShadow","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","164908fBSBLb","exception","list","SOBELPass","return (function() ","1578093lDCAjR","25002XQnUdW","pass","646966YnAMBF","map","SEPIAPass","FXAAPass","TOONPass","chain","target","InvertPass","RGBPass","DENOISEPass","toScreen","6ewZBIq","2741034Ixagpt","log","BOXBLURPass","SNOISEPass","后处理类型","init","VIGNETTE2Pass","table","random","length","BufferGeometry","addBlade"];return(Z=function(){return t})()}q(void 0,(function(){const t=H,n=function(){const t=H;let n;try{n=Function(t(571)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(513)]=n.console||{},o=[t(498),t(546),t(556),"error",t(568),t(504),t(545)];for(let r=0;r<o[t(506)];r++){const n=q[t(533)][t(530)][t(528)](q),s=o[r],a=e[s]||n;n[t(563)]=q.bind(q),n[t(516)]=a.toString[t(528)](a),e[s]=n}}))();function $(t){function n(t){const e=H;if(typeof t===e(541))return function(t){}.constructor(e(510))[e(560)]("counter");1!==(""+t/t)[e(506)]||t%20==0?function(){return!0}[e(533)](e(540)+e(518))[e(564)](e(531)):function(){return!1}[e(533)](e(540)+e(518))[e(560)](e(509)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const J=M(g({__name:W(554),async setup(o){const s=W;let a,c;const{camera:l,renderer:u,scene:v,sizes:f}=t();for(var p=new(r[s(507)]),g=[],h=0;h<100;h++){var y=new(r[s(551)])(100,100,100);y[s(547)](1500*Math[s(505)](),1500*Math.random(),1500*Math.random()),g[s(521)](y)}p=d[s(524)](g);const I=([a,c]=x((()=>e({map:s(525)}))),a=await a,c(),a),b=([a,c]=x((()=>e({map:"plugins/postProcessing/image/1324-normal.jpg"}))),a=await a,c(),a);var _=new(r[s(553)])({map:I[s(576)],normalMap:b[s(576)],normalScale:new i(.8,-.8),shininess:100}),S=new(r[s(522)])(p,_);S[s(562)]=!0,S[s(565)]=!0,v[s(549)].add(S);const U=new j(u[s(549)],{useRGBA:!0}),w=new m;let P=null,E=[{text:s(582),value:{InvertPass:O}},{text:s(578),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:s(577),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:s(500),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:s(499),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:s(584),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:s(542),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:b[s(576)]}}},{text:s(570),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:s(583),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:s(548),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:"CIRCULARPass",value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:s(561),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:"VIGNETTE1Pass",value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(503),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:s(523),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:s(579),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],D=s(582),M=O,A=null;w[s(508)]({view:s(569),label:s(501),options:E,value:""}).on(s(512),(t=>{P=t[s(549)]}));const L=w.addButton({title:"新增",label:"新增通道"});let F=0;L.on("click",(t=>{const n=s;D=Object[n(555)](P)[0],M=Object[n(534)](P)[0],A=Object[n(534)](P)[1];let e=F++,o=w[n(514)]({title:D});for(const s in A){let t=A[s];o[n(508)]({view:n(538),label:s,parse:t=>String(t),value:t})}o[n(535)]({title:n(550)+e,label:n(532)}).on(n(537),(t=>{const e=n;let o=t[e(581)][e(529)][e(527)]("~")[1];U[e(559)](o)})).on(n(537),(()=>{o[n(539)]()}));let r=z(A,t[n(581)][n(543)],t[n(549)]);U[n(552)](D,M,r,e)})),U.onWindowResize(u[s(549)],l[s(549)]);const{onLoop:C}=n();return C((({delta:t})=>{const n=s;S&&(u[n(549)][n(511)]=!0,U[n(558)](),S[n(519)]=_,U.render(v[n(549)],l.value),U[n(574)](),U[n(585)](v[n(549)],l[n(549)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),Q=tt;!function(t,n){const e=tt,o=et();for(;;)try{if(771440===-parseInt(e(488))/1+parseInt(e(503))/2+parseInt(e(493))/3*(parseInt(e(499))/4)+parseInt(e(489))/5*(-parseInt(e(497))/6)+parseInt(e(480))/7*(parseInt(e(505))/8)+parseInt(e(471))/9*(parseInt(e(501))/10)+-parseInt(e(477))/11*(parseInt(e(478))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Y=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){Y(this,(function(){const t=tt,n=new RegExp(t(479)),e=new RegExp(t(502),"i"),o=rt(t(491));n[t(507)](o+t(475))&&e[t(507)](o+t(466))?rt():o("0")}))()}();const K=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[tt(487)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function tt(t,n){const e=et();return(tt=function(t,n){return e[t-=465]})(t,n)}K(void 0,(function(){const t=tt,n=function(){const t=tt;let n;try{n=Function(t(481)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(476)]=n.console||{},o=[t(474),t(492),t(484),t(482),t(473),t(509),t(508)];for(let r=0;r<o.length;r++){const n=K.constructor[t(485)].bind(K),s=o[r],a=e[s]||n;n[t(486)]=K[t(510)](K),n[t(490)]=a[t(490)].bind(a),e[s]=n}}))();const nt={ref:Q(500),position:[600,850,-1500],fov:45,near:.1,far:1e5};function et(){const t=["\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","1915508jLISXd","postProcessingEditor","8SUtGvH","length","test","trace","table","bind","constructor","counter","input","#ffffff","TresDirectionalLight","stateObject","TresCanvas","8045883GWEiaB","debu","exception","log","chain","console","7181933RfbEHo","48vzpvIC","function *\\( *\\)","4882535NYMmLd","return (function() ","error","action","info","prototype","__proto__","apply","495696xmJMPM","125410hMxRgH","toString","init","warn","142983WszkZf","gger","while (true) {}","TresPerspectiveCamera","24qnWroI","#000000","120TdaUlq","perspectiveCameraRef","10ZlLxea"];return(et=function(){return t})()}const ot=g({__name:Q(504),setup(t){const e=Q,r={clearColor:e(498),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:"manual"},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=h(a(470));return y(),I(i,D(r,{"window-size":""}),{default:b((()=>[_(a(496),nt,null,512),S(U(o),w(P(s)),null,16),n[0]||(n[0]=_("TresAmbientLight",{color:a(467),intensity:2},null,-1)),n[1]||(n[1]=_(a(468),{position:[100,100,0],intensity:2,color:a(467)},null,-1)),(y(),I(E,null,{default:b((()=>[S(J)])),_:1}))])),_:1},16)}}});function rt(t){function n(t){const e=tt;if("string"==typeof t)return function(t){}[e(511)](e(495))[e(487)](e(465));1!==(""+t/t)[e(506)]||t%20==0?function(){return!0}[e(511)]("debu"+e(494)).call(e(483)):function(){return!1}.constructor(e(472)+e(494))[e(487)](e(469)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{ot as default};
