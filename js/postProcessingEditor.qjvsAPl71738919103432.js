import{m as t,e as n,a as e,o}from"./@tresjs.G4idgyWs1738919103432.js";import{V as r,_ as a,i as s,M as i,O as c,W as l,m as u,aR as v,cv as f}from"./three.CYhYNU4g1738919103432.js";import{P as p}from"./tweakpane.yDiyAAkA1738919103432.js";import{d as m,a3 as d,e as g,o as x,f as h,g as y,N as I,j as b,u as _,aj as S,ak as w,al as U,m as D}from"./@vue.NRI7TcgI1738919103432.js";import{_ as P}from"./@fesjs.28Jx3VJe1738919103432.js";import"./@vueuse.DL3Lluw_1738919103432.js";import"./vue-router.NKoGOf7E1738919103432.js";import"./lodash-es.pklfUAS51738919103432.js";import"./@qlin.yHhFDldE1738919103432.js";import"./pinia.yqLlAjUg1738919103432.js";import"./@floating-ui.BPbuo5Gx1738919103432.js";import"./@juggle.7yjBMqoW1738919103432.js";!function(t,n){const e=A,o=L();for(;;)try{if(262998===-parseInt(e(149))/1*(-parseInt(e(151))/2)+parseInt(e(154))/3*(-parseInt(e(107))/4)+-parseInt(e(111))/5*(parseInt(e(113))/6)+-parseInt(e(132))/7+parseInt(e(128))/8*(parseInt(e(122))/9)+-parseInt(e(112))/10*(parseInt(e(152))/11)+parseInt(e(127))/12)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const E=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function A(t,n){const e=L();return(A=function(t,n){return e[t-=107]})(t,n)}!function(){E(this,(function(){const t=A,n=new RegExp(t(169)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=F(t(160));n[t(141)](o+"chain")&&e[t(141)](o+t(142))?F():o("0")}))()}();const M=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[A(123)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function L(){const t=["console","onerror","test","input","exception","onload","gger","while (true) {}","ShaderMaterial","get","513087nSoFKG","trace","2AvqaVm","979eRZOtW","Vector3","100767zprrsl","Matrix2","call","random","WagnerLoadShaderException","stateObject","init","toString","index","exec","replace","Vector4","counter","send","\" couldn't be loaded.","function *\\( *\\)","4RmzfkD","value",'Shader "',"lastIndex","65JhAOXj","57500rycSkN","169734IAamQh","Vector2","responseText","string","length","bind","error","message","open","72dtXvxe","apply",'{}.constructor("return this")( )',"warn","__proto__","10248360vKWnxF","216480YXdOau","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","info","prototype","2852521SToZAx","Texture","return (function() ","name","constructor","log",'" load was aborted.'];return(L=function(){return t})()}M(void 0,(function(){const t=A,n=function(){const t=A;let n;try{n=Function(t(134)+t(124)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(139)]||{},o=[t(137),t(125),t(130),t(119),t(143),"table",t(150)];for(let r=0;r<o[t(117)];r++){const n=M[t(136)][t(131)][t(118)](M),a=o[r],s=e[a]||n;n[t(126)]=M.bind(M),n[t(161)]=s.toString[t(118)](s),e[a]=n}}))();function C(t,n,e){if("object"!=typeof t||null===t)return t;const o=Array.isArray(t)?[]:{};for(const r in t)t.hasOwnProperty(r)&&(o[r]=C(t[r])),r==n&&(o[n]=e);return o}function F(t){function n(t){const e=A;if(typeof t===e(116))return function(t){}[e(136)](e(146))[e(123)](e(166));1!==(""+t/t)[e(117)]||t%20==0?function(){return!0}[e(136)]("debugger")[e(156)]("action"):function(){return!1}[e(136)]("debu"+e(145))[e(123)](e(159)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const z=G;!function(t,n){const e=G,o=N();for(;;)try{if(243899===-parseInt(e(241))/1*(parseInt(e(232))/2)+-parseInt(e(309))/3*(-parseInt(e(295))/4)+-parseInt(e(290))/5+-parseInt(e(294))/6+parseInt(e(252))/7+parseInt(e(307))/8+-parseInt(e(271))/9*(-parseInt(e(237))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const T=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[G(255)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function N(){const t=["texture","params","scale","innerHeight","scene","swapBuffers","back","PlaneGeometry","camera","settings","gger","resolution","far","getOfflineTexture","bind","9DZWECL","render","time","stencilBuffer","Pass","MeshBasicMaterial","wrapS","projectionMatrix","RGBAFormat","exception","set","read","clone","uuid","toString",'{}.constructor("return this")( )',"now","copyPass","value","1233695BcpsxN","info","counter","write","168594Svpugg","4sjRWQD","LinearFilter","shader","Scene","minFilter","uniforms","width","input","setSize","action","log","while (true) {}","3298896MGwiof","RGBFormat","351831dMsafY","setRenderTarget","type","__proto__","height","ShaderMaterial","Mesh","onWindowResize","near","length","add","ClampToEdgeWrapping","material","passItems","test","WebGLRenderTarget","return (function() ","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","startTime","warn","useRGBA","609702xBnCRu","prototype","string","toScreen","loadShadervf","680830efWTwK","constructor","init","stateObject","1IIZXec","Stack","quad","front","call","renderer","debu","CopyPass","passes","table","magFilter","1581062owmpQu","trace","UnsignedByteType","apply"];return(N=function(){return t})()}function G(t,n){const e=N();return(G=function(t,n){return e[t-=227]})(t,n)}!function(){T(this,(function(){const t=G,n=new RegExp("function *\\( *\\)"),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=j(t(239));n[t(323)](o+"chain")&&e[t(323)](o+t(302))?j():o("0")}))()}();const R=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[G(255)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();R(void 0,(function(){const t=G,n=function(){const t=G;let n;try{n=Function(t(227)+t(286)+");")()}catch(e){n=window}return n}(),e=n.console=n.console||{},o=[t(305),t(230),t(291),"error",t(280),t(250),t(253)];for(let r=0;r<o[t(318)];r++){const n=R[t(238)][t(233)][t(270)](R),a=o[r],s=e[a]||n;n[t(312)]=R.bind(R),n[t(285)]=s.toString.bind(s),e[a]=n}}))();class B{constructor(t,n){const e=G;this.width=1,this[e(313)]=1,this[e(265)]=n||{},this[e(231)]=this.settings[e(231)]||!1,this[e(246)]=t,this[e(288)]=this[e(248)](this[e(265)]),this[e(260)]=new(a[e(298)]),this[e(243)]=new(a[e(315)])(new(a[e(263)])(1,1),new(a[e(276)])),this[e(260)][e(319)](this[e(243)]),this.camera=new c(1,1,1,1,-1e4,1e4),this[e(244)]=new l(1,1,{minFilter:void 0!==this.settings[e(299)]?this[e(265)][e(299)]:u,magFilter:void 0!==this[e(265)][e(251)]?this[e(265)][e(251)]:a[e(296)],wrapS:void 0!==this[e(265)][e(277)]?this.settings[e(277)]:a[e(320)],wrapT:void 0!==this[e(265)].wrapT?this[e(265)].wrapT:a[e(320)],format:this[e(231)]?a[e(279)]:a[e(308)],type:void 0!==this[e(265)][e(311)]?this.settings[e(311)]:a[e(254)],stencilBuffer:void 0===this[e(265)].stencilBuffer||this[e(265)][e(274)]}),this.back=this[e(244)][e(283)](),this[e(229)]=Date[e(287)](),this[e(249)]={},this[e(242)]={passItems:[],passes:[]}}addPass(t,n,e,o){const r=G;this[r(236)](n);const a={shaderName:t,params:e,uuid:o,shader:this[r(297)]};this[r(242)].passItems.push(a)}removePass(t){const n=G;for(let e=this.Stack[n(322)][n(318)]-1;e>=0;e--)this.Stack[n(322)][e][n(284)]===parseInt(t)&&this[n(242)].passItems.splice(e,1);console[n(305)](this[n(242)].passItems)}[z(248)](){const t=z;this[t(275)][t(245)](this);return this.loadShadervf("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}loadShadervf(t){const n=z,e=n(228);return this.shader=function(t,n){const e=A,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,c=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,l={sampler2D:{type:"t",value:()=>new(a[A(133)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(a[A(114)])},vec3:{type:"v3",value:()=>new(a[A(153)])},vec4:{type:"v4",value:()=>new(a[A(165)])},bvec2:{type:"v2",value:()=>new(a[A(114)])},bvec3:{type:"v3",value:()=>new(a[A(153)])},bvec4:{type:"v4",value:()=>new(a[A(165)])},ivec2:{type:"v2",value:()=>new(a[A(114)])},ivec3:{type:"v3",value:()=>new(a[A(153)])},ivec4:{type:"v4",value:()=>new(a[A(165)])},mat2:{type:"v2",value:()=>new(a[A(155)])},mat3:{type:"v3",value:()=>new s},mat4:{type:"v4",value:()=>new i}},u={float:{type:"fv",value:()=>[]},vec3:{type:"v3v",value:()=>[]}};let v;const f={resolution:{type:"v2",value:new r(1,1),default:!0},time:{type:"f",value:Date.now(),default:!0},tInput:{type:"t",value:new(a[e(133)]),default:!0}};let p,m;for(;null!==(v=o[e(163)](n));)v[e(162)]===o[e(110)]&&o[e(110)]++,p=v[1],m=v[2],f[m]={type:l[p].type,value:l[p][e(108)]()};for(;null!==(v=c.exec(n));)v[e(162)]===o[e(110)]&&o[e(110)]++,p=v[1],m=v[2],v[3],f[m]={type:u[p].type,value:u[p].value()};return new(a[e(147)])({uniforms:f,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(297)]}[z(275)](t){this[z(297)]=null,this.params={}}Reset(){const t=z;this.read=this[t(244)],this[t(293)]=this[t(262)]}[z(316)](t,n){const e=z,o=window.innerWidth,r=window[e(259)];t.setSize(1*o,1*r),n[e(278)].makePerspective(70,o/r,n[e(317)],n[e(268)]),this[e(303)](o,r);return this[e(269)](o,r,!0)}[z(303)](t,n){const e=z;this[e(301)]=t,this[e(313)]=n,this[e(264)][e(278)].makeOrthographic(t/-2,t/2,n/2,n/-2,this[e(264)][e(317)],this.camera[e(268)]),this[e(243)][e(258)][e(281)](t,n,1),this.front.setSize(t,n),this[e(262)][e(303)](t,n)}[z(269)](t,n,e){const o=z;return new(a[o(324)])(t,n,{minFilter:a[o(296)],magFilter:u,format:e?v:a[o(308)]})}render(t,n,e,o){const r=z;this[r(246)][r(310)](this[r(293)]),this[r(246)].render(t,n),o||this[r(261)]()}swapBuffers(){const t=z,n=this[t(293)];this[t(293)]=this[t(282)],this[t(282)]=n}pass(){const t=z;for(let n=0;n<this[t(242)].passItems[t(318)];n++){const e=this[t(242)][t(322)][n][t(297)],o=this.Stack.passItems[n][t(257)];if(this[t(246)][t(310)](this.write),e instanceof a[t(314)]){this[t(243)][t(321)]=e,this[t(243)][t(321)][t(300)].tInput[t(289)]=this[t(282)][t(256)],this[t(243)].material.uniforms[t(267)][t(289)][t(281)](this.width,this.height),this[t(243)].material[t(300)][t(273)].value=.001*(Date[t(287)]()-this.startTime);for(const n in o)this[t(243)][t(321)][t(300)][n][t(289)]=o[n];this[t(246)].render(this[t(260)],this.camera),this.swapBuffers()}}}[z(235)](t,n){const e=z;this[e(246)][e(310)](null),this.quad.material=this[e(288)],this[e(243)][e(321)][e(300)].tInput[e(289)]=this[e(282)][e(256)],this[e(243)][e(321)][e(300)][e(267)][e(289)][e(281)](this.width,this[e(313)]),this[e(246)][e(272)](this[e(260)],this[e(264)])}}function j(t){function n(t){const e=G;if(typeof t===e(234))return function(t){}[e(238)](e(306)).apply(e(292));1!==(""+t/t)[e(318)]||t%20==0?function(){return!0}[e(238)](e(247)+"gger")[e(245)](e(304)):function(){return!1}[e(238)](e(247)+e(266))[e(255)](e(240)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const V="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",O=H;!function(t,n){const e=H,o=X();for(;;)try{if(195641===-parseInt(e(272))/1+parseInt(e(331))/2+-parseInt(e(264))/3*(parseInt(e(285))/4)+-parseInt(e(310))/5+parseInt(e(297))/6*(parseInt(e(275))/7)+-parseInt(e(277))/8+parseInt(e(301))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const k=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[H(330)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){k(this,(function(){const t=H,n=new RegExp(t(249)),e=new RegExp(t(271),"i"),o=q(t(287));n[t(253)](o+t(292))&&e.test(o+t(311))?q():o("0")}))()}();const W=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[H(330)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function H(t,n){const e=X();return(H=function(t,n){return e[t-=245]})(t,n)}function X(){const t=["Vector2","FXAAPass","关闭通道","constructor","function *\\( *\\)","Mesh","material","table","test","warn","BoxGeometry","plugins/postProcessing/image/1324.jpg","call","__proto__","plugins/postProcessing/image/1324-normal.jpg","console","Reset","prototype","toString","6999yWjjkJ","string","autoClearColor","random","trace","InvertPass","text","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","272382XFooZz","gger","VIGNETTE2Pass","51492QWXalN","mergeGeometries","1156032FYfDvK","action","postProcessing","pass","removePass","label","移除~",'{}.constructor("return this")( )',"68saFbCL","stateObject","init","castShadow","bind","exception","keys","chain","SNOISEPass","DOTPass","POISSONPass","add","228hMrBTk","values","TOONPass","SEPIAPass","4009833lGpqJD","FREICHENPass","map","后处理类型","BOXBLURPass","value","render","debu","receiveShadow","809415cQATZG","input","addButton","while (true) {}","SOBELPass","BufferGeometry","info","push","CIRCULARPass","length","title","addPass","error","RGBPass","addBlade","translate","click","dispose","onWindowResize","MeshPhongMaterial","apply","178012jHCSeD","target","return (function() "];return(X=function(){return t})()}W(void 0,(function(){const t=H;let n;try{n=Function(t(333)+t(284)+");")()}catch(r){n=window}const e=n[t(260)]=n[t(260)]||{},o=["log",t(254),t(316),t(322),t(290),t(252),t(268)];for(let a=0;a<o[t(319)];a++){const n=W[t(248)][t(262)].bind(W),r=o[a],s=e[r]||n;n[t(258)]=W[t(289)](W),n[t(263)]=s[t(263)][t(289)](s),e[r]=n}}))();function q(t){function n(t){const e=H;if(typeof t===e(265))return function(t){}[e(248)](e(313))[e(330)]("counter");1!==(""+t/t)[e(319)]||t%20==0?function(){return!0}[e(248)](e(308)+e(273))[e(257)](e(278)):function(){return!1}.constructor(e(308)+e(273))[e(330)](e(286)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const Z=P(m({__name:O(279),async setup(o){const r=O;let s,i;const{camera:c,renderer:l,scene:u,sizes:v}=t();for(var m=new(a[r(315)]),g=[],x=0;x<100;x++){var h=new(a[r(255)])(100,100,100);h[r(325)](1500*Math[r(267)](),1500*Math.random(),1500*Math[r(267)]()),g[r(317)](h)}m=f[r(276)](g);const y=([s,i]=d((()=>e({map:r(256)}))),s=await s,i(),s),I=([s,i]=d((()=>e({map:r(259)}))),s=await s,i(),s);var b=new(a[r(329)])({map:y.map,normalMap:I[r(303)],normalScale:new(a[r(245)])(.8,-.8),shininess:100}),_=new(a[r(250)])(m,b);_[r(288)]=!0,_[r(309)]=!0,u[r(306)][r(296)](_);const S=new B(l.value,{useRGBA:!0}),w=new p;let U=null,D=[{text:r(269),value:{InvertPass:V}},{text:r(246),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:r(300),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:r(293),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:r(305),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:"DENOISEPass",value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:"CGAPass",value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:I.map}}},{text:r(314),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:r(323),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:r(294),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:r(318),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:r(295),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:"VIGNETTE1Pass",value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:r(274),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:r(302),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:r(299),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],P=r(269),E=V,A=null;w.addBlade({view:"list",label:r(304),options:D,value:""}).on("change",(t=>{U=t[r(306)]}));const M=w[r(312)]({title:"新增",label:"新增通道"});let L=0;M.on(r(326),(t=>{const n=r;P=Object[n(291)](U)[0],E=Object[n(298)](U)[0],A=Object[n(298)](U)[1];let e=L++,o=w.addFolder({title:P});for(const r in A){let t=A[r];o[n(324)]({view:n(270),label:r,parse:t=>String(t),value:t})}o[n(312)]({title:n(283)+e,label:n(247)}).on("click",(t=>{const e=n;let o=t[e(332)][e(320)].split("~")[1];S[e(281)](o)})).on(n(326),(()=>{o[n(327)]()}));let a=C(A,t[n(332)][n(282)],t[n(306)]);S[n(321)](P,E,a,e)})),S[r(328)](l.value,c[r(306)]);const{onLoop:F}=n();return F((({delta:t})=>{const n=r;_&&(l[n(306)][n(266)]=!0,S[n(261)](),_[n(251)]=b,S[n(307)](u[n(306)],c.value),S[n(280)](),S.toScreen(u[n(306)],c[n(306)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),$=nt;!function(t,n){const e=nt,o=K();for(;;)try{if(805251===parseInt(e(407))/1*(parseInt(e(388))/2)+-parseInt(e(401))/3*(-parseInt(e(413))/4)+-parseInt(e(415))/5*(parseInt(e(395))/6)+parseInt(e(390))/7*(parseInt(e(411))/8)+-parseInt(e(398))/9+-parseInt(e(418))/10+-parseInt(e(422))/11*(-parseInt(e(384))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function K(){const t=["__proto__","test","31026WtBrIa","warn","3029579sVrKCE",'{}.constructor("return this")( )',"action","#ffffff","init","36ypzLtm","TresDirectionalLight","while (true) {}","10977804hchTXv","error","toString","36yVhTGm","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","TresPerspectiveCamera","console","apply","perspectiveCameraRef","9rFryZZ","constructor","chain","call","24pjxtyL","bind","374488etrCmX","stateObject","621165xowdXQ","counter","table","2576910wvyCyh","input","gger","trace","8096rxsqbp","log","debu","string","length","function *\\( *\\)","info","exception","TresAmbientLight","7608ixqAiX","manual"];return(K=function(){return t})()}!function(){Q(this,(function(){const t=nt,n=new RegExp(t(380)),e=new RegExp(t(402),"i"),o=et(t(394));n[t(387)](o+t(409))&&e[t(387)](o+t(419))?et():o("0")}))()}();const J=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[nt(405)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();J(void 0,(function(){const t=nt;let n;try{n=Function("return (function() "+t(391)+");")()}catch(r){n=window}const e=n[t(404)]=n[t(404)]||{},o=[t(376),t(389),t(381),t(399),t(382),t(417),t(421)];for(let a=0;a<o[t(379)];a++){const n=J.constructor.prototype[t(412)](J),r=o[a],s=e[r]||n;n[t(386)]=J[t(412)](J),n[t(400)]=s[t(400)][t(412)](s),e[r]=n}}))();const Y={ref:$(406),position:[600,850,-1500],fov:45,near:.1,far:1e5},tt=m({__name:"postProcessingEditor",setup(t){const e=$,r={clearColor:"#000000",shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(385)},a={autoRotate:!0,enableDamping:!0},{onLoop:s}=n();return s((({delta:t})=>{})),(t,n)=>{const s=e,i=g("TresCanvas");return x(),h(i,D(r,{"window-size":""}),{default:y((()=>[I(s(403),Y,null,512),b(_(o),S(w(a)),null,16),n[0]||(n[0]=I(s(383),{color:s(393),intensity:2},null,-1)),n[1]||(n[1]=I(s(396),{position:[100,100,0],intensity:2,color:s(393)},null,-1)),(x(),h(U,null,{default:y((()=>[b(Z)])),_:1}))])),_:1},16)}}});function nt(t,n){const e=K();return(nt=function(t,n){return e[t-=376]})(t,n)}function et(t){function n(t){const e=nt;if(typeof t===e(378))return function(t){}[e(408)](e(397))[e(405)](e(416));1!==(""+t/t).length||t%20==0?function(){return!0}[e(408)](e(377)+e(420))[e(410)](e(392)):function(){return!1}[e(408)]("debugger")[e(405)](e(414)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{tt as default};
