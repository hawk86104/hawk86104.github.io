import{bK as n,C as o,M as r,i as e,a,af as i,cp as t}from"./three.CMHPKQCP1757651394539.js";import{d as l}from"./dither.glsl.tNAdkJUa1757651394539.js";const f=`\nprecision highp float;\n\nuniform sampler2D tReflect;\nuniform vec3 uColor;\nuniform float uReflectivity;\nuniform float uMirror;\nuniform float uMixStrength;\n\n#ifdef USE_MAP\n    uniform sampler2D tMap;\n#endif\n\n#ifdef USE_NORMALMAP\n    uniform sampler2D tNormalMap;\n    uniform vec2 uNormalScale;\n#endif\n\n#ifdef USE_FOG\n    uniform vec3 uFogColor;\n    uniform float uFogNear;\n    uniform float uFogFar;\n#endif\n\nin vec2 vUv;\nin vec4 vCoord;\nin vec3 vNormal;\nin vec3 vToEye;\n\nout vec4 FragColor;\n\n${l}\n\nvoid main() {\n    #ifdef USE_MAP\n        vec4 color = texture(tMap, vUv);\n    #else\n        vec4 color = vec4(uColor, 1.0);\n    #endif\n\n    #ifdef USE_NORMALMAP\n        vec4 normalColor = texture(tNormalMap, vUv * uNormalScale);\n        vec3 normal = normalize(vec3(normalColor.r * 2.0 - 1.0, normalColor.b, normalColor.g * 2.0 - 1.0));\n        vec3 coord = vCoord.xyz / vCoord.w;\n        vec2 uv = coord.xy + coord.z * normal.xz * 0.05;\n        vec4 reflectColor = texture(tReflect, uv);\n    #else\n        vec3 normal = vNormal;\n        vec4 reflectColor = textureProj(tReflect, vCoord);\n    #endif\n\n    // Fresnel term\n    vec3 toEye = normalize(vToEye);\n    float theta = max(dot(toEye, normal), 0.0);\n    float reflectance = uReflectivity + (1.0 - uReflectivity) * pow((1.0 - theta), 5.0);\n\n    reflectColor = mix(vec4(0), reflectColor, reflectance);\n\n    FragColor.rgb = color.rgb * ((1.0 - min(1.0, uMirror)) + reflectColor.rgb * uMixStrength);\n\n    #ifdef USE_FOG\n        float fogDepth = gl_FragCoord.z / gl_FragCoord.w;\n        float fogFactor = smoothstep(uFogNear, uFogFar, fogDepth);\n\n        FragColor.rgb = mix(FragColor.rgb, uFogColor, fogFactor);\n    #endif\n\n    #ifdef DITHERING\n        FragColor.rgb = dither(FragColor.rgb);\n    #endif\n\n    FragColor.a = 1.0;\n}\n`;class u extends n{constructor({color:n=new o(1052688),map:l=null,normalMap:u=null,normalScale:m=new a(1,1),reflectivity:v=0,mirror:c=0,mixStrength:s=10,fog:d=null,dithering:g=!1}={}){const M={glslVersion:t,defines:{},uniforms:{tMap:{value:null},tReflect:{value:null},uMapTransform:{value:new e},uMatrix:{value:new r},uColor:{value:n instanceof o?n:new o(n)},uReflectivity:{value:v},uMirror:{value:c},uMixStrength:{value:s}},vertexShader:"\nin vec3 position;\nin vec3 normal;\nin vec2 uv;\n\nuniform mat4 modelMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\n\nuniform mat3 uMapTransform;\nuniform mat4 uMatrix;\n\nout vec2 vUv;\nout vec4 vCoord;\nout vec3 vNormal;\nout vec3 vToEye;\n\nvoid main() {\n    vUv = (uMapTransform * vec3(uv, 1.0)).xy;\n    vCoord = uMatrix * vec4(position, 1.0);\n    vNormal = normalMatrix * normal;\n\n    vec4 worldPosition = modelMatrix * vec4(position, 1.0);\n    vToEye = cameraPosition - worldPosition.xyz;\n\n    vec4 mvPosition = viewMatrix * worldPosition;\n    gl_Position = projectionMatrix * mvPosition;\n}\n",fragmentShader:f,blending:i};l&&(l.updateMatrix(),M.defines=Object.assign(M.defines,{USE_MAP:""}),M.uniforms=Object.assign(M.uniforms,{tMap:{value:l},uMapTransform:{value:l.matrix}})),u&&(M.defines=Object.assign(M.defines,{USE_NORMALMAP:""}),M.uniforms=Object.assign(M.uniforms,{tNormalMap:{value:u},uNormalScale:{value:m}}),l||(u.updateMatrix(),M.uniforms=Object.assign(M.uniforms,{uMapTransform:{value:u.matrix}}))),d&&(M.defines=Object.assign(M.defines,{USE_FOG:""}),M.uniforms=Object.assign(M.uniforms,{uFogColor:{value:d.color},uFogNear:{value:d.near},uFogFar:{value:d.far}})),g&&(M.defines=Object.assign(M.defines,{DITHERING:""})),super(M)}}export{u as R};
