import{t,_ as n,V as e,C as o,as as r,ai as a}from"./three.NPKhDGTA1734239885681.js";import{e as i,b as s,U as c,c as l}from"./@tresjs.qWeugQU61734239885681.js";import"./index.CWYJ4g8r1734239885681.js";import{a as u}from"./simplex-noise.Yx8GBgKo1734239885681.js";import{C as f}from"./index.uMqUHken1734239885681.js";import{d as p,a6 as h,o as m,D as v,J as d,u as g,r as x,f as w,g as y,j as b,aj as _,ak as M,al as j}from"./@vue.-THQH3GC1734239885681.js";import{_ as z}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.K4yFMImI1734239885681.js";import"./@vueuse.GyFlY0FM1734239885681.js";import"./lamina.IO8VQ1Ze1734239885681.js";import"./glsl-tokenizer.VHAUPHnP1734239885681.js";import"./@amap.NYHfUxYe1734239885681.js";import"./glsl-token-descope.oTrdFg1d1734239885681.js";import"./glsl-token-depth.iUaMXjx11734239885681.js";import"./glsl-token-scope.q253Sa1R1734239885681.js";import"./glsl-token-properties.HAxf6r_11734239885681.js";import"./glsl-token-assignments.4SwPdfEK1734239885681.js";import"./glsl-token-string.pNNuDHSs1734239885681.js";import"./glsl-token-functions.YpZHJwND1734239885681.js";import"./object-hash.ahc4Ouej1734239885681.js";import"./jszip.XVUCuuLk1734239885681.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.1aud5zZ61734239885681.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.oHgyfDOT1734239885681.js";import"./three-stdlib.VocBnxjF1734239885681.js";import"./@pmndrs.Pz587RFC1734239885681.js";import"./utils.ShfW1r4x1734239885681.js";const A=P;!function(t,n){const e=P,o=F();for(;;)try{if(990662===parseInt(e(231))/1+-parseInt(e(224))/2+parseInt(e(220))/3*(parseInt(e(262))/4)+-parseInt(e(275))/5*(-parseInt(e(259))/6)+parseInt(e(238))/7+parseInt(e(208))/8+-parseInt(e(223))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const I=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[P(203)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){I(this,(function(){const t=P,n=new RegExp(t(265)),e=new RegExp(t(256),"i"),o=B("init");n.test(o+"chain")&&e[t(241)](o+t(264))?B():o("0")}))()}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[P(203)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();C(void 0,(function(){const t=P,n=function(){let t;try{t=Function('return (function() {}.constructor("return this")( ));')()}catch(n){t=window}return t}(),e=n[t(216)]=n[t(216)]||{},o=[t(251),t(243),t(227),t(204),t(244),"table",t(263)];for(let r=0;r<o.length;r++){const n=C[t(196)][t(245)].bind(C),a=o[r],i=e[a]||n;n.__proto__=C[t(221)](C),n.toString=i[t(266)][t(221)](i),e[a]=n}}))();const D=[A(250)],S=[A(270),A(225),A(257),A(242),A(234),A(230),A(247),A(202)],k=[A(207)],R=["side"];function F(){const t=["action","instances","index","#000f00","DoubleSide","TresMeshStandardMaterial","position","1127710DTImei","constructor","side","alphaMap","counter","sin","PlaneGeometry","attributes-halfRootAngleCos","apply","error","needsUpdate","normalize","geometry","7742136gdaKha","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","width","stateObject","value","random","lookAt","Vector4","console","joints","orientationsF32","call","33OgLGXz","bind","Vector3","32782518hbaaHZ","2411638KXlbXB","attributes-position","halfRootAngleCosF32","info","map","cos","attributes-stretch","740148PQVLfA","halfRootAngleSinF32","push","attributes-orientation","computeVertexNormals","array","TresInstancedBufferGeometry","9537584JYTBvd","while (true) {}","attributes","test","attributes-offset","warn","exception","prototype","time","attributes-halfRootAngleSin","Color","debu","material","log","TresMesh","stretchesF32","set","offsetsF32","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","attributes-uv","length","36vZGFPM","InstancedBufferAttribute","translate","514656myZAxz","trace","input","function *\\( *\\)","toString","convertSRGBToLinear"];return(F=function(){return t})()}const T=p({__name:"grass",props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(a){const c=A;let l,p;const x=([l,p]=h((()=>s({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),l=await l,p(),l),w=a,y=u(Math[c(213)]);function b(t,e){const o=c,r=t.x*e.w+t.y*e.z-t.z*e.y+t.w*e.x,a=-t.x*e.z+t.y*e.w+t.z*e.x+t.w*e.y,i=t.x*e.y-t.y*e.x+t.z*e.w+t.w*e.z,s=-t.x*e.x-t.y*e.y-t.z*e.z+t.w*e.w;return new(n[o(215)])(r,a,i,s)}function _(t,n){var e=2*y(t/50,n/50);return e+=4*y(t/100,n/100),e+=.2*y(t/10,n/10)}const M=function(t,e){const o=c,a=[],i=[],s=[],l=[],u=[];let f=new r,p=new(n[o(215)]);const h=-.25;for(let r=0;r<t;r++){const c=Math.random()*e-e/2,m=Math[o(213)]()*e-e/2,v=_(c,m);a.push(c,v,m);let d=Math.PI-Math.random()*(2*Math.PI);l[o(233)](Math[o(200)](.5*d)),u[o(233)](Math.cos(.5*d));let g=new(n[o(222)])(0,1,0),x=g.x*Math[o(200)](d/2),w=g.y*Math[o(200)](d/2),y=g.z*Math[o(200)](d/2),M=Math.cos(d/2);f[o(254)](x,w,y,M).normalize(),d=.5*Math[o(213)]()+h,g=new(n[o(222)])(1,0,0),x=g.x*Math[o(200)](d/2),w=g.y*Math.sin(d/2),y=g.z*Math[o(200)](d/2),M=Math.cos(d/2),p.set(x,w,y,M)[o(206)](),f=b(f,p),d=.5*Math[o(213)]()+h,g=new(n[o(222)])(0,0,1),x=g.x*Math[o(200)](d/2),w=g.y*Math[o(200)](d/2),y=g.z*Math[o(200)](d/2),M=Math[o(229)](d/2),p[o(254)](x,w,y,M)[o(206)](),f=b(f,p),i[o(233)](f.x,f.y,f.z,f.w),r<t/3?s[o(233)](1.8*Math[o(213)]()):s[o(233)](Math.random())}return{offsetsF32:new(n[o(260)])(new Float32Array(a),3),orientationsF32:new(n[o(260)])(new Float32Array(i),4),stretchesF32:new(n[o(260)])(new Float32Array(s),1),halfRootAngleCosF32:new(n[o(260)])(new Float32Array(u),1),halfRootAngleSinF32:new(n[o(260)])(new Float32Array(l),1)}}(w[c(269)],w[c(210)]),j=new t(w.bW,w.bH,1,w[c(217)])[c(261)](0,w.bH/2,0),z=new(n[c(201)])(w[c(210)],w[c(210)],32,32);z[c(214)](new e(0,1,0));const I=z[c(240)][c(274)];for(let t=0;t<I[c(236)][c(258)];t+=3)I[c(236)][t+1]=_(I[c(236)][t],I[c(236)][t+2]);z.attributes.position[c(205)]=!0,z[c(235)]();const C=new(f({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(n[c(248)])(.3,.9,0)[c(267)](),bottomColor:new o(0,.2,0)[c(267)]()},c(209),"\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }",(t=>{const e=c;t[e(197)]=n[e(272)]})));C[c(228)]=x[c(228)],C[c(198)]=x.alphaMap,C.toneMapped=!1;const{onLoop:F}=i();return F((({elapsed:t})=>{const n=c;C.uniforms[n(246)][n(212)]=t/4})),(t,e)=>{const o=c;return m(),v("TresGroup",null,[d("TresMesh",{material:g(C)},[d(o(237),{index:g(j)[o(270)],"attributes-position":g(j)[o(240)][o(274)],"attributes-uv":g(j)[o(240)].uv,"attributes-offset":g(M)[o(255)],"attributes-orientation":g(M)[o(218)],"attributes-stretch":g(M)[o(253)],"attributes-halfRootAngleSin":g(M)[o(232)],"attributes-halfRootAngleCos":g(M)[o(226)]},null,8,S)],8,D),d(o(252),{position:[0,0,0],geometry:g(z)},[d(o(273),{color:o(271),side:n[o(272)]},null,8,R)],8,k)])}}});function P(t,n){const e=F();return(P=function(t,n){return e[t-=196]})(t,n)}function B(t){function n(t){const e=P;if("string"==typeof t)return function(t){}[e(196)](e(239))[e(203)](e(199));1!==(""+t/t)[e(258)]||t%20==0?function(){return!0}[e(196)](e(249)+"gger")[e(219)](e(268)):function(){return!1}.constructor(e(249)+"gger")[e(203)](e(211)),n(++t)}try{if(t)return n;n(0)}catch(e){}}!function(t,n){const e=O,o=G();for(;;)try{if(712197===parseInt(e(514))/1*(-parseInt(e(509))/2)+-parseInt(e(522))/3+-parseInt(e(505))/4*(parseInt(e(519))/5)+-parseInt(e(492))/6*(-parseInt(e(498))/7)+parseInt(e(517))/8+parseInt(e(511))/9+parseInt(e(504))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const E=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[O(507)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){E(this,(function(){const t=O,n=new RegExp(t(503)),e=new RegExp(t(515),"i"),o=U(t(501));n[t(513)](o+t(497))&&e[t(513)](o+"input")?U():o("0")}))()}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[O(507)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function O(t,n){const e=G();return(O=function(t,n){return e[t-=491]})(t,n)}L(void 0,(function(){const t=O;let n;try{n=Function("return (function() "+t(500)+");")()}catch(r){n=window}const e=n[t(516)]=n.console||{},o=["log",t(499),t(518),t(494),t(495),t(508),t(520)];for(let a=0;a<o[t(493)];a++){const n=L[t(496)][t(521)].bind(L),r=o[a],i=e[r]||n;n.__proto__=L[t(523)](L),n[t(506)]=i[t(506)][t(523)](i),e[r]=n}}))();const H=p({__name:"grass",setup(t){const n=x({alpha:!0,toneMapping:a,windowSize:!0,clearColor:6710886}),e=x({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=O;return m(),w(g(l),_(M(n)),{default:y((()=>[o[0]||(o[0]=d("TresPerspectiveCamera",{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),b(g(c),_(M(e)),null,16),(m(),w(j,null,{default:y((()=>[b(T)])),_:1})),(m(),w(j,null,{default:y((()=>[b(g(z),{texture:r(491)})])),_:1}))])),_:1},16)}}});function G(){const t=["while (true) {}","4717575SjcDCP","string","test","16228cHhfCt","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","console","6202608vBReAD","info","2284385skloax","trace","prototype","1750788vYKlvM","bind","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","3047010PTwATI","length","error","exception","constructor","chain","7dOTEdf","warn",'{}.constructor("return this")( )',"init","gger","function *\\( *\\)","21897840QGGXMD","12NVaUNR","toString","apply","table","164UlcLwj"];return(G=function(){return t})()}function U(t){function n(t){const e=O;if(typeof t===e(512))return function(t){}[e(496)](e(510))[e(507)]("counter");1!==(""+t/t).length||t%20==0?function(){return!0}[e(496)]("debu"+e(502)).call("action"):function(){return!1}[e(496)]("debugger")[e(507)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{H as default};
