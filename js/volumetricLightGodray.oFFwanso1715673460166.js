var at=Object.defineProperty,ot=Object.defineProperties;var lt=Object.getOwnPropertyDescriptors;var Ce=Object.getOwnPropertySymbols;var ut=Object.prototype.hasOwnProperty,ht=Object.prototype.propertyIsEnumerable;var pe=(e,t,i)=>t in e?at(e,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[t]=i,Ie=(e,t)=>{for(var i in t||(t={}))ut.call(t,i)&&pe(e,i,t[i]);if(Ce)for(var i of Ce(t))ht.call(t,i)&&pe(e,i,t[i]);return e},ze=(e,t)=>ot(e,lt(t));var M=(e,t,i)=>(pe(e,typeof t!="symbol"?t+"":t,i),i);import{ax as H,c9 as c,aH as w,bF as L,b9 as ue,aB as I,aI as V,bm as he,aF as ae,dB as Ve,au as We,av as Z,aw as Ee,bT as ct,a1 as Y,bY as dt,ak as Be,ad as q,v as ve,b2 as ft,b3 as $,bl as _e,bn as oe,bk as we,a6 as $e,dC as pt,c8 as Ke,o as j,c as Re,a8 as Xe,L as D,c7 as be,dD as vt,dE as mt,a9 as Ue,l as z,w as le,c1 as gt,c2 as xt,Y as P,a0 as St,aD as Tt,dF as _t,a4 as R,a as ne,E as Me,G as Mt,c4 as W,dG as yt,dH as Et,dI as Bt,az as ye,dJ as K,b6 as re,ap as se,bx as wt,d8 as De,cW as Ze,d7 as je,dK as Fe,bN as qe,bU as Ye,dL as Rt,dM as bt,dN as Ut,dO as Dt,dP as Pt,dQ as At,dR as Ct,bQ as It,cR as zt,c5 as Ft,a2 as Ne,x as me,bb as Nt,aa as Ht,ab as Lt,ac as Ot,ag as Gt,Z as kt,X as Vt}from"./vendor._sK3qi2g1715673460166.js";import"./index.vue_vue_type_script_setup_true_lang.9Tshvxj11715673460166.js";const Wt=()=>parseInt(ue.replace(/\D+/g,"")),$t=Wt();class Kt extends H{constructor(i=new w){super({uniforms:{inputBuffer:new c(null),depthBuffer:new c(null),resolution:new c(new w),texelSize:new c(new w),halfTexelSize:new c(new w),kernel:new c(0),scale:new c(1),cameraNear:new c(0),cameraFar:new c(1),minDepthThreshold:new c(0),maxDepthThreshold:new c(1),depthScale:new c(0),depthToBlurRatioBias:new c(.25)},fragmentShader:"#include <common>\n        #include <dithering_pars_fragment>      \n        uniform sampler2D inputBuffer;\n        uniform sampler2D depthBuffer;\n        uniform float cameraNear;\n        uniform float cameraFar;\n        uniform float minDepthThreshold;\n        uniform float maxDepthThreshold;\n        uniform float depthScale;\n        uniform float depthToBlurRatioBias;\n        varying vec2 vUv;\n        varying vec2 vUv0;\n        varying vec2 vUv1;\n        varying vec2 vUv2;\n        varying vec2 vUv3;\n\n        void main() {\n          float depthFactor = 0.0;\n          \n          #ifdef USE_DEPTH\n            vec4 depth = texture2D(depthBuffer, vUv);\n            depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\n            depthFactor *= depthScale;\n            depthFactor = max(0.0, min(1.0, depthFactor + 0.25));\n          #endif\n          \n          vec4 sum = texture2D(inputBuffer, mix(vUv0, vUv, depthFactor));\n          sum += texture2D(inputBuffer, mix(vUv1, vUv, depthFactor));\n          sum += texture2D(inputBuffer, mix(vUv2, vUv, depthFactor));\n          sum += texture2D(inputBuffer, mix(vUv3, vUv, depthFactor));\n          gl_FragColor = sum * 0.25 ;\n\n          #include <dithering_fragment>\n          #include <tonemapping_fragment>\n          #include <".concat($t>=154?"colorspace_fragment":"encodings_fragment",">\n        }"),vertexShader:"uniform vec2 texelSize;\n        uniform vec2 halfTexelSize;\n        uniform float kernel;\n        uniform float scale;\n        varying vec2 vUv;\n        varying vec2 vUv0;\n        varying vec2 vUv1;\n        varying vec2 vUv2;\n        varying vec2 vUv3;\n\n        void main() {\n          vec2 uv = position.xy * 0.5 + 0.5;\n          vUv = uv;\n\n          vec2 dUv = (texelSize * vec2(kernel) + halfTexelSize) * scale;\n          vUv0 = vec2(uv.x - dUv.x, uv.y + dUv.y);\n          vUv1 = vec2(uv.x + dUv.x, uv.y + dUv.y);\n          vUv2 = vec2(uv.x + dUv.x, uv.y - dUv.y);\n          vUv3 = vec2(uv.x - dUv.x, uv.y - dUv.y);\n\n          gl_Position = vec4(position.xy, 1.0, 1.0);\n        }",blending:L,depthWrite:!1,depthTest:!1});M(this,"kernel");this.toneMapped=!1,this.setTexelSize(i.x,i.y),this.kernel=new Float32Array([0,1,2,2,3])}setTexelSize(i,r){this.uniforms.texelSize.value.set(i,r),this.uniforms.halfTexelSize.value.set(i,r).multiplyScalar(.5)}setResolution(i){this.uniforms.resolution.value.copy(i)}}class Xt{constructor({resolution:t,width:i=500,height:r=500,minDepthThreshold:s=0,maxDepthThreshold:n=1,depthScale:a=0,depthToBlurRatioBias:o=.25}){M(this,"renderTargetA");M(this,"renderTargetB");M(this,"convolutionMaterial");M(this,"scene");M(this,"camera");M(this,"screen");M(this,"renderToScreen",!1);this.renderTargetA=new I(t,t,{minFilter:V,magFilter:V,stencilBuffer:!1,depthBuffer:!1,type:he}),this.renderTargetB=this.renderTargetA.clone(),this.convolutionMaterial=new Kt,this.convolutionMaterial.setTexelSize(1/i,1/r),this.convolutionMaterial.setResolution(new w(i,r)),this.scene=new ae,this.camera=new Ve,this.convolutionMaterial.uniforms.minDepthThreshold.value=s,this.convolutionMaterial.uniforms.maxDepthThreshold.value=n,this.convolutionMaterial.uniforms.depthScale.value=a,this.convolutionMaterial.uniforms.depthToBlurRatioBias.value=o,this.convolutionMaterial.defines.USE_DEPTH=a>0;const u=new Float32Array([-1,-1,0,3,-1,0,-1,3,0]),h=new Float32Array([0,0,2,0,0,2]),v=new We;v.setAttribute("position",new Z(u,3)),v.setAttribute("uv",new Z(h,2)),this.screen=new Ee(v,this.convolutionMaterial),this.screen.frustumCulled=!1,this.scene.add(this.screen)}render(t,i,r){const s=this.scene,n=this.camera,a=this.renderTargetA,o=this.renderTargetB,u=this.convolutionMaterial,h=u.uniforms;h.depthBuffer.value=i.depthTexture;const v=u.kernel;let d=i,m,g,S;for(g=0,S=v.length-1;g<S;++g)m=g&1?o:a,h.kernel.value=v[g],h.inputBuffer.value=d.texture,t.setRenderTarget(m),t.render(s,n),d=m;h.kernel.value=v[g],h.inputBuffer.value=d.texture,t.setRenderTarget(this.renderToScreen?null:r),t.render(s,n)}}class Zt extends ct{constructor(i={}){super(i);M(this,"_tDepth",{value:null});M(this,"_distortionMap",{value:null});M(this,"_tDiffuse",{value:null});M(this,"_tDiffuseBlur",{value:null});M(this,"_textureMatrix",{value:null});M(this,"_hasBlur",{value:!1});M(this,"_mirror",{value:0});M(this,"_mixBlur",{value:0});M(this,"_blurStrength",{value:.5});M(this,"_minDepthThreshold",{value:.9});M(this,"_maxDepthThreshold",{value:1});M(this,"_depthScale",{value:0});M(this,"_depthToBlurRatioBias",{value:.25});M(this,"_distortion",{value:1});M(this,"_mixContrast",{value:1});this.setValues(i)}onBeforeCompile(i){var r;(r=i.defines)!=null&&r.USE_UV||(i.defines.USE_UV=""),i.uniforms.hasBlur=this._hasBlur,i.uniforms.tDiffuse=this._tDiffuse,i.uniforms.tDepth=this._tDepth,i.uniforms.distortionMap=this._distortionMap,i.uniforms.tDiffuseBlur=this._tDiffuseBlur,i.uniforms.textureMatrix=this._textureMatrix,i.uniforms.mirror=this._mirror,i.uniforms.mixBlur=this._mixBlur,i.uniforms.mixStrength=this._blurStrength,i.uniforms.minDepthThreshold=this._minDepthThreshold,i.uniforms.maxDepthThreshold=this._maxDepthThreshold,i.uniforms.depthScale=this._depthScale,i.uniforms.depthToBlurRatioBias=this._depthToBlurRatioBias,i.uniforms.distortion=this._distortion,i.uniforms.mixContrast=this._mixContrast,i.vertexShader="\n        uniform mat4 textureMatrix;\n        varying vec4 my_vUv;\n      ".concat(i.vertexShader),i.vertexShader=i.vertexShader.replace("#include <project_vertex>","#include <project_vertex>\n        my_vUv = textureMatrix * vec4( position, 1.0 );\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );"),i.fragmentShader="\n        uniform sampler2D tDiffuse;\n        uniform sampler2D tDiffuseBlur;\n        uniform sampler2D tDepth;\n        uniform sampler2D distortionMap;\n        uniform float distortion;\n        uniform float cameraNear;\n			  uniform float cameraFar;\n        uniform bool hasBlur;\n        uniform float mixBlur;\n        uniform float mirror;\n        uniform float mixStrength;\n        uniform float minDepthThreshold;\n        uniform float maxDepthThreshold;\n        uniform float mixContrast;\n        uniform float depthScale;\n        uniform float depthToBlurRatioBias;\n        varying vec4 my_vUv;\n        ".concat(i.fragmentShader),i.fragmentShader=i.fragmentShader.replace("#include <emissivemap_fragment>","#include <emissivemap_fragment>\n\n      float distortionFactor = 0.0;\n      #ifdef USE_DISTORTION\n        distortionFactor = texture2D(distortionMap, vUv).r * distortion;\n      #endif\n\n      vec4 new_vUv = my_vUv;\n      new_vUv.x += distortionFactor;\n      new_vUv.y += distortionFactor;\n\n      vec4 base = texture2DProj(tDiffuse, new_vUv);\n      vec4 blur = texture2DProj(tDiffuseBlur, new_vUv);\n\n      vec4 merge = base;\n\n      #ifdef USE_NORMALMAP\n        vec2 normal_uv = vec2(0.0);\n        vec4 normalColor = texture2D(normalMap, vUv * normalScale);\n        vec3 my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b,  normalColor.g * 2.0 - 1.0 ) );\n        vec3 coord = new_vUv.xyz / new_vUv.w;\n        normal_uv = coord.xy + coord.z * my_normal.xz * 0.05;\n        vec4 base_normal = texture2D(tDiffuse, normal_uv);\n        vec4 blur_normal = texture2D(tDiffuseBlur, normal_uv);\n        merge = base_normal;\n        blur = blur_normal;\n      #endif\n\n      float depthFactor = 0.0001;\n      float blurFactor = 0.0;\n\n      #ifdef USE_DEPTH\n        vec4 depth = texture2DProj(tDepth, new_vUv);\n        depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\n        depthFactor *= depthScale;\n        depthFactor = max(0.0001, min(1.0, depthFactor));\n\n        #ifdef USE_BLUR\n          blur = blur * min(1.0, depthFactor + depthToBlurRatioBias);\n          merge = merge * min(1.0, depthFactor + 0.5);\n        #else\n          merge = merge * depthFactor;\n        #endif\n\n      #endif\n\n      float reflectorRoughnessFactor = roughness;\n      #ifdef USE_ROUGHNESSMAP\n        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\n        reflectorRoughnessFactor *= reflectorTexelRoughness.g;\n      #endif\n\n      #ifdef USE_BLUR\n        blurFactor = min(1.0, mixBlur * reflectorRoughnessFactor);\n        merge = mix(merge, blur, blurFactor);\n      #endif\n\n      vec4 newMerge = vec4(0.0, 0.0, 0.0, 1.0);\n      newMerge.r = (merge.r - 0.5) * mixContrast + 0.5;\n      newMerge.g = (merge.g - 0.5) * mixContrast + 0.5;\n      newMerge.b = (merge.b - 0.5) * mixContrast + 0.5;\n\n      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + newMerge.rgb * mixStrength);\n      ")}get tDiffuse(){return this._tDiffuse.value}set tDiffuse(i){this._tDiffuse.value=i}get tDepth(){return this._tDepth.value}set tDepth(i){this._tDepth.value=i}get distortionMap(){return this._distortionMap.value}set distortionMap(i){this._distortionMap.value=i}get tDiffuseBlur(){return this._tDiffuseBlur.value}set tDiffuseBlur(i){this._tDiffuseBlur.value=i}get textureMatrix(){return this._textureMatrix.value}set textureMatrix(i){this._textureMatrix.value=i}get hasBlur(){return this._hasBlur.value}set hasBlur(i){this._hasBlur.value=i}get mirror(){return this._mirror.value}set mirror(i){this._mirror.value=i}get mixBlur(){return this._mixBlur.value}set mixBlur(i){this._mixBlur.value=i}get mixStrength(){return this._blurStrength.value}set mixStrength(i){this._blurStrength.value=i}get minDepthThreshold(){return this._minDepthThreshold.value}set minDepthThreshold(i){this._minDepthThreshold.value=i}get maxDepthThreshold(){return this._maxDepthThreshold.value}set maxDepthThreshold(i){this._maxDepthThreshold.value=i}get depthScale(){return this._depthScale.value}set depthScale(i){this._depthScale.value=i}get depthToBlurRatioBias(){return this._depthToBlurRatioBias.value}set depthToBlurRatioBias(i){this._depthToBlurRatioBias.value=i}get distortion(){return this._distortion.value}set distortion(i){this._distortion.value=i}get mixContrast(){return this._mixContrast.value}set mixContrast(i){this._mixContrast.value=i}}const jt=["texture-matrix","mirror","t-diffuse","t-depth","t-diffuse-blur","has-blur","mix-strength","min-depth-threshold","max-depth-threshold","depth-scale","depth-to-blur-ratio-bias","distortion","distortionMap","mix-contrast","defines-USE_BLUR","defines-USE_DEPTH","defines-USE_DISTORTION"],qt=Y({__name:"index",props:{resolution:{default:256},mixBlur:{default:0},mixStrength:{default:1},blur:{default:()=>[0,0]},mirror:{default:0},minDepthThreshold:{default:.9},maxDepthThreshold:{default:1},depthScale:{default:0},depthToBlurRatioBias:{default:.25},distortionMap:{},distortion:{default:1},mixContrast:{default:1},reflectorOffset:{default:0}},setup(e){const t=e;function i(E,B){let N;return E.traverse(A=>{A.isMesh&&A.material&&A.material.uuid===B&&(N=A)}),N}function r(E){var N,A;if(l.reflectorWorldPosition.setFromMatrixPosition(E.matrixWorld),l.cameraWorldPosition.setFromMatrixPosition((N=_.value)==null?void 0:N.matrixWorld),l.rotationMatrix.extractRotation(E.matrixWorld),l.normal.set(0,0,1),l.normal.applyMatrix4(l.rotationMatrix),l.reflectorWorldPosition.addScaledVector(l.normal,t.reflectorOffset),l.view.subVectors(l.reflectorWorldPosition,l.cameraWorldPosition),l.view.dot(l.normal)>0)return;l.view.reflect(l.normal).negate(),l.view.add(l.reflectorWorldPosition),l.rotationMatrix.extractRotation((A=_.value)==null?void 0:A.matrixWorld),l.lookAtPosition.set(0,0,-1),l.lookAtPosition.applyMatrix4(l.rotationMatrix),l.lookAtPosition.add(l.cameraWorldPosition),l.target.subVectors(l.reflectorWorldPosition,l.lookAtPosition),l.target.reflect(l.normal).negate(),l.target.add(l.reflectorWorldPosition),l.virtualCamera.position.copy(l.view),l.virtualCamera.up.set(0,1,0),l.virtualCamera.up.applyMatrix4(l.rotationMatrix),l.virtualCamera.up.reflect(l.normal),l.virtualCamera.lookAt(l.target),l.virtualCamera.far=(_==null?void 0:_.value).far,l.virtualCamera.updateMatrixWorld(),l.virtualCamera.projectionMatrix.copy((_==null?void 0:_.value).projectionMatrix),l.textureMatrix.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),l.textureMatrix.multiply(l.virtualCamera.projectionMatrix),l.textureMatrix.multiply(l.virtualCamera.matrixWorldInverse),l.textureMatrix.multiply(E.matrixWorld),l.reflectorPlane.setFromNormalAndCoplanarPoint(l.normal,l.reflectorWorldPosition),l.reflectorPlane.applyMatrix4(l.virtualCamera.matrixWorldInverse),l.clipPlane.set(l.reflectorPlane.normal.x,l.reflectorPlane.normal.y,l.reflectorPlane.normal.z,l.reflectorPlane.constant);const B=l.virtualCamera.projectionMatrix;l.q.x=(Math.sign(l.clipPlane.x)+B.elements[8])/B.elements[0],l.q.y=(Math.sign(l.clipPlane.y)+B.elements[9])/B.elements[5],l.q.z=-1,l.q.w=(1+B.elements[10])/B.elements[14],l.clipPlane.multiplyScalar(2/l.clipPlane.dot(l.q)),B.elements[2]=l.clipPlane.x,B.elements[6]=l.clipPlane.y,B.elements[10]=l.clipPlane.z+1,B.elements[14]=l.clipPlane.w}const{resolution:s,minDepthThreshold:n,maxDepthThreshold:a,depthScale:o,depthToBlurRatioBias:u,blur:h,mirror:v,mixBlur:d,mixStrength:m,distortion:g,distortionMap:S,mixContrast:T}=dt(t),{camera:_,scene:y,renderer:p,extend:b}=Be();b({MeshReflectorMaterial:Zt});const U=q(),X=q(),J=q(),ee=q(),te=ve(()=>typeof h.value=="number"?[h.value,h.value]:h.value),ie=ve(()=>te.value[0]>0||te.value[1]>0),l={reflectorPlane:new ft,normal:new $,reflectorWorldPosition:new $,cameraWorldPosition:new $,rotationMatrix:new _e,lookAtPosition:new $(0,0,-1),clipPlane:new oe,view:new $,target:new $,q:new oe,virtualCamera:new we,textureMatrix:new _e};$e(()=>{var B;(B=U.value)==null||B.texture.dispose();const E={minFilter:V,magFilter:V,type:he};U.value=new I(s.value,s.value,ze(Ie({},E),{depthBuffer:!0,depthTexture:new be(s.value,s.value,vt,mt)})),X.value=new I(s.value,s.value,E),J.value=new Xt({resolution:s.value,width:te.value[0],height:te.value[1],minDepthThreshold:n.value,maxDepthThreshold:a.value,depthScale:o.value,depthToBlurRatioBias:u.value}),ee.value={mirror:v,textureMatrix:l.textureMatrix,mixBlur:d,tDiffuse:U.value.texture,tDepth:U.value.depthTexture,tDiffuseBlur:U.value.texture,hasBlur:ie,mixStrength:m,minDepthThreshold:n,maxDepthThreshold:a,depthScale:o,depthToBlurRatioBias:u,distortion:g,distortionMap:S.value,mixContrast:T,"defines-USE_BLUR":ie.value?"":void 0,"defines-USE_DEPTH":o.value>0?"":void 0,"defines-USE_DISTORTION":S.value?"":void 0}});const fe=q(),{onLoop:rt}=Ue();rt(()=>{var A;if(!fe.value||!p.value||!U.value||!_.value)return;const E=i(y.value,fe.value.uuid);if(!E)return;E.visible=!1;const B=p.value.xr.enabled,N=p.value.shadowMap.autoUpdate;r(E),p.value.shadowMap.autoUpdate=!1,p.value.setRenderTarget(U.value),p.value.autoClear||p.value.clear(),p.value.render(y.value,l.virtualCamera),(A=J==null?void 0:J.value)==null||A.render(p.value,U.value,X.value),p.value.xr.enabled=B,p.value.shadowMap.autoUpdate=N,E.visible=!0,p.value.setRenderTarget(null)});const st=pt(),nt=ve(()=>{const E={};return Object.assign(E,t),Object.assign(E,st.value),E});return Ke(()=>{var E,B;(E=U==null?void 0:U.value)==null||E.dispose(),(B=X==null?void 0:X.value)==null||B.dispose()}),(E,B)=>{var N,A,Ae;return j(),Re("TresMeshReflectorMaterial",Xe({key:"key".concat(ee.value["defines-USE_BLUR"]).concat(ee.value["defines-USE_DEPTH"]).concat(ee.value["defines-USE_DISTORTION"]),ref_key:"materialRef",ref:fe},nt.value,{"texture-matrix":l.textureMatrix,mirror:D(v),"t-diffuse":(N=U.value)==null?void 0:N.texture,"t-depth":(A=U.value)==null?void 0:A.depthTexture,"t-diffuse-blur":(Ae=X.value)==null?void 0:Ae.texture,"has-blur":ie.value,"mix-strength":D(m),"min-depth-threshold":D(n),"max-depth-threshold":D(a),"depth-scale":D(o),"depth-to-blur-ratio-bias":D(u),distortion:D(g),distortionMap:D(S),"mix-contrast":D(T),"defines-USE_BLUR":ie.value?"":void 0,"defines-USE_DEPTH":D(o)>0?"":void 0,"defines-USE_DISTORTION":D(S)?"":void 0}),null,16,jt)}}});function Yt({resolution:e=256,near:t=.1,far:i=1e3,envMap:r,fog:s}={}){const{renderer:n,scene:a}=Be(),o=z(null),u=z(e),h=z(t),v=z(i),d=z(null);le(()=>u,T=>{var _;(_=o.value)==null||_.dispose(),o.value=new gt(T.value),o.value.texture.type=he},{immediate:!0}),le([h,v,o],([T,_,y])=>{y&&(d.value=new xt(T,_,y))},{immediate:!0}),Ke(()=>{var T;(T=o.value)==null||T.dispose()});let m,g;return{fbo:o,camera:d,update:()=>{var T;m=a.value.fog,g=a.value.background,a.value.background=r||g,a.value.fog=s||m,(T=d.value)==null||T.update(n.value,a.value),a.value.fog=m,a.value.background=g}}}const Qt=["object"],Jt=Y({__name:"index",props:{resolution:{default:256},near:{default:.1},far:{default:1e3},envMap:{default:null},fog:{default:null},frames:{default:1/0}},setup(e,{expose:t}){var h;const i=e,{fbo:r,camera:s,update:n}=Yt({resolution:i.resolution,near:i.near,far:i.far,envMap:i.envMap,fog:i.fog}),{onBeforeLoop:a}=Ue();let o=0;const u=z(null);return a(()=>{u.value&&(i.frames===1/0||o<i.frames)&&(u.value.visible=!1,n(),u.value.visible=!0,o++)}),t({texture:(h=r.value)==null?void 0:h.texture}),(v,d)=>(j(),Re("TresGroup",null,[P("primitive",{object:D(s)},null,8,Qt),P("TresGroup",{ref_key:"rgRef",ref:u},[St(v.$slots,"default")],512)]))}}),ei=P("TresPlaneGeometry",{args:[16,10]},null,-1),ti=["map"],ii=P("TresMesh",{scale:[16.05,10.05,1],position:[0,0,-.01]},[P("TresPlaneGeometry"),P("TresMeshBasicMaterial",{color:"black"})],-1),ri=P("TresSphereGeometry",{args:[2,32,32]},null,-1),si=["envMap"],ni=Y({__name:"screen",async setup(e){let t,i;const r=z();r.value=([t,i]=Tt(()=>_t("./plugins/visualArts/video/vlg.mp4",{loop:!0})),t=await t,i(),t),r.value.colorSpace=R;const s=z(),n=z();le(s,o=>{n.value=o.texture});const a=z();return(o,u)=>(j(),Re(Mt,null,[P("TresMesh",{ref_key:"tmSceen",ref:a,position:[0,0,-16]},[ei,P("TresMeshBasicMaterial",{map:r.value},null,8,ti),ii],512),ne(D(Jt),{ref_key:"cubeCameraRef",ref:s,position:[-3,-1,-5],resolution:256},{default:Me(()=>[P("TresMesh",null,[ri,P("TresMeshStandardMaterial",{metalness:1,roughness:.1,envMap:n.value},null,8,si)])]),_:1},512)],64))}});/**
 * postprocessing v6.35.4 build Fri Apr 26 2024
 * https://github.com/pmndrs/postprocessing
 * Copyright 2015-2024 Raoul van Rüschen
 * @license Zlib
 */var ge=1/1e3,ai=1e3,oi=class{constructor(){this.startTime=performance.now(),this.previousTime=0,this.currentTime=0,this._delta=0,this._elapsed=0,this._fixedDelta=1e3/60,this.timescale=1,this.useFixedDelta=!1,this._autoReset=!1}get autoReset(){return this._autoReset}set autoReset(e){typeof document<"u"&&document.hidden!==void 0&&(e?document.addEventListener("visibilitychange",this):document.removeEventListener("visibilitychange",this),this._autoReset=e)}get delta(){return this._delta*ge}get fixedDelta(){return this._fixedDelta*ge}set fixedDelta(e){this._fixedDelta=e*ai}get elapsed(){return this._elapsed*ge}update(e){this.useFixedDelta?this._delta=this.fixedDelta:(this.previousTime=this.currentTime,this.currentTime=(e!==void 0?e:performance.now())-this.startTime,this._delta=this.currentTime-this.previousTime),this._delta*=this.timescale,this._elapsed+=this._delta}reset(){this._delta=0,this._elapsed=0,this.currentTime=performance.now()-this.startTime}getDelta(){return this.delta}getElapsed(){return this.elapsed}handleEvent(e){document.hidden||(this.currentTime=performance.now()-this.startTime)}dispose(){this.autoReset=!1}},li=new Ve,O=null;function ui(){if(O===null){const e=new Float32Array([-1,-1,0,3,-1,0,-1,3,0]),t=new Float32Array([0,0,2,0,0,2]);O=new We,O.setAttribute!==void 0?(O.setAttribute("position",new Z(e,3)),O.setAttribute("uv",new Z(t,2))):(O.addAttribute("position",new Z(e,3)),O.addAttribute("uv",new Z(t,2)))}return O}var F=class Qe{constructor(t="Pass",i=new ae,r=li){this.name=t,this.renderer=null,this.scene=i,this.camera=r,this.screen=null,this.rtt=!0,this.needsSwap=!0,this.needsDepthTexture=!1,this.enabled=!0}get renderToScreen(){return!this.rtt}set renderToScreen(t){if(this.rtt===t){const i=this.fullscreenMaterial;i!==null&&(i.needsUpdate=!0),this.rtt=!t}}set mainScene(t){}set mainCamera(t){}setRenderer(t){this.renderer=t}isEnabled(){return this.enabled}setEnabled(t){this.enabled=t}get fullscreenMaterial(){return this.screen!==null?this.screen.material:null}set fullscreenMaterial(t){let i=this.screen;i!==null?i.material=t:(i=new Ee(ui(),t),i.frustumCulled=!1,this.scene===null&&(this.scene=new ae),this.scene.add(i),this.screen=i)}getFullscreenMaterial(){return this.fullscreenMaterial}setFullscreenMaterial(t){this.fullscreenMaterial=t}getDepthTexture(){return null}setDepthTexture(t,i=K){}render(t,i,r,s,n){throw new Error("Render method not implemented!")}setSize(t,i){}initialize(t,i,r){}dispose(){for(const t of Object.keys(this)){const i=this[t];(i instanceof I||i instanceof qe||i instanceof Ye||i instanceof Qe)&&this[t].dispose()}}},hi=class extends F{constructor(){super("ClearMaskPass",null,null),this.needsSwap=!1}render(e,t,i,r,s){const n=e.state.buffers.stencil;n.setLocked(!1),n.setTest(!1)}},ci=Number(ue.replace(/\D+/g,""));function Q(e){return ci<154?e.replace("colorspace_fragment","encodings_fragment"):e}var di="#include <common>\n#include <dithering_pars_fragment>\n#ifdef FRAMEBUFFER_PRECISION_HIGH\nuniform mediump sampler2D inputBuffer;\n#else\nuniform lowp sampler2D inputBuffer;\n#endif\nuniform float opacity;varying vec2 vUv;void main(){vec4 texel=texture2D(inputBuffer,vUv);gl_FragColor=opacity*texel;\n#include <colorspace_fragment>\n#include <dithering_fragment>\n}",ce="varying vec2 vUv;void main(){vUv=position.xy*0.5+0.5;gl_Position=vec4(position.xy,1.0,1.0);}",Je=class extends H{constructor(){super({name:"CopyMaterial",uniforms:{inputBuffer:new c(null),opacity:new c(1)},blending:L,toneMapped:!1,depthWrite:!1,depthTest:!1,fragmentShader:di,vertexShader:ce}),this.fragmentShader=Q(this.fragmentShader)}set inputBuffer(e){this.uniforms.inputBuffer.value=e}setInputBuffer(e){this.uniforms.inputBuffer.value=e}getOpacity(e){return this.uniforms.opacity.value}setOpacity(e){this.uniforms.opacity.value=e}},fi=class extends F{constructor(e,t=!0){super("CopyPass"),this.fullscreenMaterial=new Je,this.needsSwap=!1,this.renderTarget=e,e===void 0&&(this.renderTarget=new I(1,1,{minFilter:V,magFilter:V,stencilBuffer:!1,depthBuffer:!1}),this.renderTarget.texture.name="CopyPass.Target"),this.autoResize=t}get resize(){return this.autoResize}set resize(e){this.autoResize=e}get texture(){return this.renderTarget.texture}getTexture(){return this.renderTarget.texture}setAutoResizeEnabled(e){this.autoResize=e}render(e,t,i,r,s){this.fullscreenMaterial.inputBuffer=t.texture,e.setRenderTarget(this.renderToScreen?null:this.renderTarget),e.render(this.scene,this.camera)}setSize(e,t){this.autoResize&&this.renderTarget.setSize(e,t)}initialize(e,t,i){i!==void 0&&(this.renderTarget.texture.type=i,i!==W?this.fullscreenMaterial.defines.FRAMEBUFFER_PRECISION_HIGH="1":e!==null&&e.outputColorSpace===R&&(this.renderTarget.texture.colorSpace=R))}},He=new ye,Pe=class extends F{constructor(e=!0,t=!0,i=!1){super("ClearPass",null,null),this.needsSwap=!1,this.color=e,this.depth=t,this.stencil=i,this.overrideClearColor=null,this.overrideClearAlpha=-1}setClearFlags(e,t,i){this.color=e,this.depth=t,this.stencil=i}getOverrideClearColor(){return this.overrideClearColor}setOverrideClearColor(e){this.overrideClearColor=e}getOverrideClearAlpha(){return this.overrideClearAlpha}setOverrideClearAlpha(e){this.overrideClearAlpha=e}render(e,t,i,r,s){const n=this.overrideClearColor,a=this.overrideClearAlpha,o=e.getClearAlpha(),u=n!==null,h=a>=0;u?(e.getClearColor(He),e.setClearColor(n,h?a:o)):h&&e.setClearAlpha(a),e.setRenderTarget(this.renderToScreen?null:t),e.clear(this.color,this.depth,this.stencil),u?e.setClearColor(He,o):h&&e.setClearAlpha(o)}},pi=class extends F{constructor(e,t){super("MaskPass",e,t),this.needsSwap=!1,this.clearPass=new Pe(!1,!1,!0),this.inverse=!1}set mainScene(e){this.scene=e}set mainCamera(e){this.camera=e}get inverted(){return this.inverse}set inverted(e){this.inverse=e}get clear(){return this.clearPass.enabled}set clear(e){this.clearPass.enabled=e}getClearPass(){return this.clearPass}isInverted(){return this.inverted}setInverted(e){this.inverted=e}render(e,t,i,r,s){const n=e.getContext(),a=e.state.buffers,o=this.scene,u=this.camera,h=this.clearPass,v=this.inverted?0:1,d=1-v;a.color.setMask(!1),a.depth.setMask(!1),a.color.setLocked(!0),a.depth.setLocked(!0),a.stencil.setTest(!0),a.stencil.setOp(n.REPLACE,n.REPLACE,n.REPLACE),a.stencil.setFunc(n.ALWAYS,v,4294967295),a.stencil.setClear(d),a.stencil.setLocked(!0),this.clearPass.enabled&&(this.renderToScreen?h.render(e,null):(h.render(e,t),h.render(e,i))),this.renderToScreen?(e.setRenderTarget(null),e.render(o,u)):(e.setRenderTarget(t),e.render(o,u),e.setRenderTarget(i),e.render(o,u)),a.color.setLocked(!1),a.depth.setLocked(!1),a.stencil.setLocked(!1),a.stencil.setFunc(n.EQUAL,1,4294967295),a.stencil.setOp(n.KEEP,n.KEEP,n.KEEP),a.stencil.setLocked(!0)}},vi=class{constructor(e=null,{depthBuffer:t=!0,stencilBuffer:i=!1,multisampling:r=0,frameBufferType:s}={}){this.renderer=null,this.inputBuffer=this.createBuffer(t,i,s,r),this.outputBuffer=this.inputBuffer.clone(),this.copyPass=new fi,this.depthTexture=null,this.passes=[],this.timer=new oi,this.autoRenderToScreen=!0,this.setRenderer(e)}get multisampling(){return this.inputBuffer.samples||0}set multisampling(e){const t=this.inputBuffer,i=this.multisampling;i>0&&e>0?(this.inputBuffer.samples=e,this.outputBuffer.samples=e,this.inputBuffer.dispose(),this.outputBuffer.dispose()):i!==e&&(this.inputBuffer.dispose(),this.outputBuffer.dispose(),this.inputBuffer=this.createBuffer(t.depthBuffer,t.stencilBuffer,t.texture.type,e),this.inputBuffer.depthTexture=this.depthTexture,this.outputBuffer=this.inputBuffer.clone())}getTimer(){return this.timer}getRenderer(){return this.renderer}setRenderer(e){if(this.renderer=e,e!==null){const t=e.getSize(new w),i=e.getContext().getContextAttributes().alpha,r=this.inputBuffer.texture.type;r===W&&e.outputColorSpace===R&&(this.inputBuffer.texture.colorSpace=R,this.outputBuffer.texture.colorSpace=R,this.inputBuffer.dispose(),this.outputBuffer.dispose()),e.autoClear=!1,this.setSize(t.width,t.height);for(const s of this.passes)s.initialize(e,i,r)}}replaceRenderer(e,t=!0){const i=this.renderer,r=i.domElement.parentNode;return this.setRenderer(e),t&&r!==null&&(r.removeChild(i.domElement),r.appendChild(e.domElement)),i}createDepthTexture(){const e=this.depthTexture=new be;return this.inputBuffer.depthTexture=e,this.inputBuffer.dispose(),this.inputBuffer.stencilBuffer?(e.format=yt,e.type=Et):e.type=Bt,e}deleteDepthTexture(){if(this.depthTexture!==null){this.depthTexture.dispose(),this.depthTexture=null,this.inputBuffer.depthTexture=null,this.inputBuffer.dispose();for(const e of this.passes)e.setDepthTexture(null)}}createBuffer(e,t,i,r){const s=this.renderer,n=s===null?new w:s.getDrawingBufferSize(new w),a={minFilter:V,magFilter:V,stencilBuffer:t,depthBuffer:e,type:i},o=new I(n.width,n.height,a);return r>0&&(o.ignoreDepthForMultisampleCopy=!1,o.samples=r),i===W&&s!==null&&s.outputColorSpace===R&&(o.texture.colorSpace=R),o.texture.name="EffectComposer.Buffer",o.texture.generateMipmaps=!1,o}setMainScene(e){for(const t of this.passes)t.mainScene=e}setMainCamera(e){for(const t of this.passes)t.mainCamera=e}addPass(e,t){const i=this.passes,r=this.renderer,s=r.getDrawingBufferSize(new w),n=r.getContext().getContextAttributes().alpha,a=this.inputBuffer.texture.type;if(e.setRenderer(r),e.setSize(s.width,s.height),e.initialize(r,n,a),this.autoRenderToScreen&&(i.length>0&&(i[i.length-1].renderToScreen=!1),e.renderToScreen&&(this.autoRenderToScreen=!1)),t!==void 0?i.splice(t,0,e):i.push(e),this.autoRenderToScreen&&(i[i.length-1].renderToScreen=!0),e.needsDepthTexture||this.depthTexture!==null)if(this.depthTexture===null){const o=this.createDepthTexture();for(e of i)e.setDepthTexture(o)}else e.setDepthTexture(this.depthTexture)}removePass(e){const t=this.passes,i=t.indexOf(e);if(i!==-1&&t.splice(i,1).length>0){if(this.depthTexture!==null){const n=(o,u)=>o||u.needsDepthTexture;t.reduce(n,!1)||(e.getDepthTexture()===this.depthTexture&&e.setDepthTexture(null),this.deleteDepthTexture())}this.autoRenderToScreen&&i===t.length&&(e.renderToScreen=!1,t.length>0&&(t[t.length-1].renderToScreen=!0))}}removeAllPasses(){const e=this.passes;this.deleteDepthTexture(),e.length>0&&(this.autoRenderToScreen&&(e[e.length-1].renderToScreen=!1),this.passes=[])}render(e){const t=this.renderer,i=this.copyPass;let r=this.inputBuffer,s=this.outputBuffer,n=!1,a,o,u;e===void 0&&(this.timer.update(),e=this.timer.getDelta());for(const h of this.passes)h.enabled&&(h.render(t,r,s,e,n),h.needsSwap&&(n&&(i.renderToScreen=h.renderToScreen,a=t.getContext(),o=t.state.buffers.stencil,o.setFunc(a.NOTEQUAL,1,4294967295),i.render(t,r,s,e,n),o.setFunc(a.EQUAL,1,4294967295)),u=r,r=s,s=u),h instanceof pi?n=!0:h instanceof hi&&(n=!1))}setSize(e,t,i){const r=this.renderer,s=r.getSize(new w);(e===void 0||t===void 0)&&(e=s.width,t=s.height),(s.width!==e||s.height!==t)&&r.setSize(e,t,i);const n=r.getDrawingBufferSize(new w);this.inputBuffer.setSize(n.width,n.height),this.outputBuffer.setSize(n.width,n.height);for(const a of this.passes)a.setSize(n.width,n.height)}reset(){this.dispose(),this.autoRenderToScreen=!0}dispose(){for(const e of this.passes)e.dispose();this.passes=[],this.inputBuffer!==null&&this.inputBuffer.dispose(),this.outputBuffer!==null&&this.outputBuffer.dispose(),this.deleteDepthTexture(),this.copyPass.dispose(),this.timer.dispose()}},k={NONE:0,DEPTH:1,CONVOLUTION:2},x={FRAGMENT_HEAD:"FRAGMENT_HEAD",FRAGMENT_MAIN_UV:"FRAGMENT_MAIN_UV",FRAGMENT_MAIN_IMAGE:"FRAGMENT_MAIN_IMAGE",VERTEX_HEAD:"VERTEX_HEAD",VERTEX_MAIN_SUPPORT:"VERTEX_MAIN_SUPPORT"},mi=class{constructor(){this.shaderParts=new Map([[x.FRAGMENT_HEAD,null],[x.FRAGMENT_MAIN_UV,null],[x.FRAGMENT_MAIN_IMAGE,null],[x.VERTEX_HEAD,null],[x.VERTEX_MAIN_SUPPORT,null]]),this.defines=new Map,this.uniforms=new Map,this.blendModes=new Map,this.extensions=new Set,this.attributes=k.NONE,this.varyings=new Set,this.uvTransformation=!1,this.readDepth=!1,this.colorSpace=Ze}},xe=!1,Le=class{constructor(e=null){this.originalMaterials=new Map,this.material=null,this.materials=null,this.materialsBackSide=null,this.materialsDoubleSide=null,this.materialsFlatShaded=null,this.materialsFlatShadedBackSide=null,this.materialsFlatShadedDoubleSide=null,this.setMaterial(e),this.meshCount=0,this.replaceMaterial=t=>{if(t.isMesh){let i;if(t.material.flatShading)switch(t.material.side){case se:i=this.materialsFlatShadedDoubleSide;break;case re:i=this.materialsFlatShadedBackSide;break;default:i=this.materialsFlatShaded;break}else switch(t.material.side){case se:i=this.materialsDoubleSide;break;case re:i=this.materialsBackSide;break;default:i=this.materials;break}this.originalMaterials.set(t,t.material),t.isSkinnedMesh?t.material=i[2]:t.isInstancedMesh?t.material=i[1]:t.material=i[0],++this.meshCount}}}cloneMaterial(e){if(!(e instanceof H))return e.clone();const t=e.uniforms,i=new Map;for(const s in t){const n=t[s].value;n.isRenderTargetTexture&&(t[s].value=null,i.set(s,n))}const r=e.clone();for(const s of i)t[s[0]].value=s[1],r.uniforms[s[0]].value=s[1];return r}setMaterial(e){if(this.disposeMaterials(),this.material=e,e!==null){const t=this.materials=[this.cloneMaterial(e),this.cloneMaterial(e),this.cloneMaterial(e)];for(const i of t)i.uniforms=Object.assign({},e.uniforms),i.side=wt;t[2].skinning=!0,this.materialsBackSide=t.map(i=>{const r=this.cloneMaterial(i);return r.uniforms=Object.assign({},e.uniforms),r.side=re,r}),this.materialsDoubleSide=t.map(i=>{const r=this.cloneMaterial(i);return r.uniforms=Object.assign({},e.uniforms),r.side=se,r}),this.materialsFlatShaded=t.map(i=>{const r=this.cloneMaterial(i);return r.uniforms=Object.assign({},e.uniforms),r.flatShading=!0,r}),this.materialsFlatShadedBackSide=t.map(i=>{const r=this.cloneMaterial(i);return r.uniforms=Object.assign({},e.uniforms),r.flatShading=!0,r.side=re,r}),this.materialsFlatShadedDoubleSide=t.map(i=>{const r=this.cloneMaterial(i);return r.uniforms=Object.assign({},e.uniforms),r.flatShading=!0,r.side=se,r})}}render(e,t,i){const r=e.shadowMap.enabled;if(e.shadowMap.enabled=!1,xe){const s=this.originalMaterials;this.meshCount=0,t.traverse(this.replaceMaterial),e.render(t,i);for(const n of s)n[0].material=n[1];this.meshCount!==s.size&&s.clear()}else{const s=t.overrideMaterial;t.overrideMaterial=this.material,e.render(t,i),t.overrideMaterial=s}e.shadowMap.enabled=r}disposeMaterials(){if(this.material!==null){const e=this.materials.concat(this.materialsBackSide).concat(this.materialsDoubleSide).concat(this.materialsFlatShaded).concat(this.materialsFlatShadedBackSide).concat(this.materialsFlatShadedDoubleSide);for(const t of e)t.dispose()}}dispose(){this.originalMaterials.clear(),this.disposeMaterials()}static get workaroundEnabled(){return xe}static set workaroundEnabled(e){xe=e}},G=-1,C=class extends De{constructor(e,t=G,i=G,r=1){super(),this.resizable=e,this.baseSize=new w(1,1),this.preferredSize=new w(t,i),this.target=this.preferredSize,this.s=r,this.effectiveSize=new w,this.addEventListener("change",()=>this.updateEffectiveSize()),this.updateEffectiveSize()}updateEffectiveSize(){const e=this.baseSize,t=this.preferredSize,i=this.effectiveSize,r=this.scale;t.width!==G?i.width=t.width:t.height!==G?i.width=Math.round(t.height*(e.width/Math.max(e.height,1))):i.width=Math.round(e.width*r),t.height!==G?i.height=t.height:t.width!==G?i.height=Math.round(t.width/Math.max(e.width/Math.max(e.height,1),1)):i.height=Math.round(e.height*r)}get width(){return this.effectiveSize.width}set width(e){this.preferredWidth=e}get height(){return this.effectiveSize.height}set height(e){this.preferredHeight=e}getWidth(){return this.width}getHeight(){return this.height}get scale(){return this.s}set scale(e){this.s!==e&&(this.s=e,this.preferredSize.setScalar(G),this.dispatchEvent({type:"change"}),this.resizable.setSize(this.baseSize.width,this.baseSize.height))}getScale(){return this.scale}setScale(e){this.scale=e}get baseWidth(){return this.baseSize.width}set baseWidth(e){this.baseSize.width!==e&&(this.baseSize.width=e,this.dispatchEvent({type:"change"}),this.resizable.setSize(this.baseSize.width,this.baseSize.height))}getBaseWidth(){return this.baseWidth}setBaseWidth(e){this.baseWidth=e}get baseHeight(){return this.baseSize.height}set baseHeight(e){this.baseSize.height!==e&&(this.baseSize.height=e,this.dispatchEvent({type:"change"}),this.resizable.setSize(this.baseSize.width,this.baseSize.height))}getBaseHeight(){return this.baseHeight}setBaseHeight(e){this.baseHeight=e}setBaseSize(e,t){(this.baseSize.width!==e||this.baseSize.height!==t)&&(this.baseSize.set(e,t),this.dispatchEvent({type:"change"}),this.resizable.setSize(this.baseSize.width,this.baseSize.height))}get preferredWidth(){return this.preferredSize.width}set preferredWidth(e){this.preferredSize.width!==e&&(this.preferredSize.width=e,this.dispatchEvent({type:"change"}),this.resizable.setSize(this.baseSize.width,this.baseSize.height))}getPreferredWidth(){return this.preferredWidth}setPreferredWidth(e){this.preferredWidth=e}get preferredHeight(){return this.preferredSize.height}set preferredHeight(e){this.preferredSize.height!==e&&(this.preferredSize.height=e,this.dispatchEvent({type:"change"}),this.resizable.setSize(this.baseSize.width,this.baseSize.height))}getPreferredHeight(){return this.preferredHeight}setPreferredHeight(e){this.preferredHeight=e}setPreferredSize(e,t){(this.preferredSize.width!==e||this.preferredSize.height!==t)&&(this.preferredSize.set(e,t),this.dispatchEvent({type:"change"}),this.resizable.setSize(this.baseSize.width,this.baseSize.height))}copy(e){this.s=e.scale,this.baseSize.set(e.baseWidth,e.baseHeight),this.preferredSize.set(e.preferredWidth,e.preferredHeight),this.dispatchEvent({type:"change"}),this.resizable.setSize(this.baseSize.width,this.baseSize.height)}static get AUTO_SIZE(){return G}},f={SKIP:9,SET:30,ADD:0,ALPHA:1,AVERAGE:2,COLOR:3,COLOR_BURN:4,COLOR_DODGE:5,DARKEN:6,DIFFERENCE:7,DIVIDE:8,DST:9,EXCLUSION:10,HARD_LIGHT:11,HARD_MIX:12,HUE:13,INVERT:14,INVERT_RGB:15,LIGHTEN:16,LINEAR_BURN:17,LINEAR_DODGE:18,LINEAR_LIGHT:19,LUMINOSITY:20,MULTIPLY:21,NEGATION:22,NORMAL:23,OVERLAY:24,PIN_LIGHT:25,REFLECT:26,SATURATION:27,SCREEN:28,SOFT_LIGHT:29,SRC:30,SUBTRACT:31,VIVID_LIGHT:32},gi="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,x+y,opacity);}",xi="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,y,min(y.a,opacity));}",Si="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,(x+y)*0.5,opacity);}",Ti="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec3 xHSL=RGBToHSL(x.rgb);vec3 yHSL=RGBToHSL(y.rgb);vec3 z=HSLToRGB(vec3(yHSL.rg,xHSL.b));return vec4(mix(x.rgb,z,opacity),y.a);}",_i="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec4 z=mix(step(0.0,y)*(1.0-min(vec4(1.0),(1.0-x)/y)),vec4(1.0),step(1.0,x));return mix(x,z,opacity);}",Mi="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec4 z=step(0.0,x)*mix(min(vec4(1.0),x/max(1.0-y,1e-9)),vec4(1.0),step(1.0,y));return mix(x,z,opacity);}",yi="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,min(x,y),opacity);}",Ei="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,abs(x-y),opacity);}",Bi="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,x/max(y,1e-12),opacity);}",wi="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,(x+y-2.0*x*y),opacity);}",Ri="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec4 a=min(x,1.0),b=min(y,1.0);vec4 z=mix(2.0*a*b,1.0-2.0*(1.0-a)*(1.0-b),step(0.5,y));return mix(x,z,opacity);}",bi="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,step(1.0,x+y),opacity);}",Ui="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec3 xHSL=RGBToHSL(x.rgb);vec3 yHSL=RGBToHSL(y.rgb);vec3 z=HSLToRGB(vec3(yHSL.r,xHSL.gb));return vec4(mix(x.rgb,z,opacity),y.a);}",Di="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,1.0-y,opacity);}",Pi="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,y*(1.0-x),opacity);}",Ai="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,max(x,y),opacity);}",Ci="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,clamp(y+x-1.0,0.0,1.0),opacity);}",Ii="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,min(x+y,1.0),opacity);}",zi="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,clamp(2.0*y+x-1.0,0.0,1.0),opacity);}",Fi="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec3 xHSL=RGBToHSL(x.rgb);vec3 yHSL=RGBToHSL(y.rgb);vec3 z=HSLToRGB(vec3(xHSL.rg,yHSL.b));return vec4(mix(x.rgb,z,opacity),y.a);}",Ni="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,x*y,opacity);}",Hi="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,1.0-abs(1.0-x-y),opacity);}",Li="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,y,opacity);}",Oi="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec4 z=mix(2.0*y*x,1.0-2.0*(1.0-y)*(1.0-x),step(0.5,x));return mix(x,z,opacity);}",Gi="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec4 y2=2.0*y;vec4 z=mix(mix(y2,x,step(0.5*x,y)),max(vec4(0.0),y2-1.0),step(x,(y2-1.0)));return mix(x,z,opacity);}",ki="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec4 z=mix(min(x*x/max(1.0-y,1e-12),1.0),y,step(1.0,y));return mix(x,z,opacity);}",Vi="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec3 xHSL=RGBToHSL(x.rgb);vec3 yHSL=RGBToHSL(y.rgb);vec3 z=HSLToRGB(vec3(xHSL.r,yHSL.g,xHSL.b));return vec4(mix(x.rgb,z,opacity),y.a);}",Wi="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,x+y-min(x*y,1.0),opacity);}",$i="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec4 y2=2.0*y;vec4 w=step(0.5,y);vec4 z=mix(x-(1.0-y2)*x*(1.0-x),mix(x+(y2-1.0)*(sqrt(x)-x),x+(y2-1.0)*x*((16.0*x-12.0)*x+3.0),w*(1.0-step(0.25,x))),w);return mix(x,z,opacity);}",Ki="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return y;}",Xi="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,max(x+y-1.0,0.0),opacity);}",Zi="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec4 z=mix(max(1.0-min((1.0-x)/(2.0*y),1.0),0.0),min(x/(2.0*(1.0-y)),1.0),step(0.5,y));return mix(x,z,opacity);}",ji=new Map([[f.ADD,gi],[f.ALPHA,xi],[f.AVERAGE,Si],[f.COLOR,Ti],[f.COLOR_BURN,_i],[f.COLOR_DODGE,Mi],[f.DARKEN,yi],[f.DIFFERENCE,Ei],[f.DIVIDE,Bi],[f.DST,null],[f.EXCLUSION,wi],[f.HARD_LIGHT,Ri],[f.HARD_MIX,bi],[f.HUE,Ui],[f.INVERT,Di],[f.INVERT_RGB,Pi],[f.LIGHTEN,Ai],[f.LINEAR_BURN,Ci],[f.LINEAR_DODGE,Ii],[f.LINEAR_LIGHT,zi],[f.LUMINOSITY,Fi],[f.MULTIPLY,Ni],[f.NEGATION,Hi],[f.NORMAL,Li],[f.OVERLAY,Oi],[f.PIN_LIGHT,Gi],[f.REFLECT,ki],[f.SATURATION,Vi],[f.SCREEN,Wi],[f.SOFT_LIGHT,$i],[f.SRC,Ki],[f.SUBTRACT,Xi],[f.VIVID_LIGHT,Zi]]),qi=class extends De{constructor(e,t=1){super(),this._blendFunction=e,this.opacity=new c(t)}getOpacity(){return this.opacity.value}setOpacity(e){this.opacity.value=e}get blendFunction(){return this._blendFunction}set blendFunction(e){this._blendFunction=e,this.dispatchEvent({type:"change"})}getBlendFunction(){return this.blendFunction}setBlendFunction(e){this.blendFunction=e}getShaderCode(){return ji.get(this.blendFunction)}},de={VERY_SMALL:0,SMALL:1,MEDIUM:2,LARGE:3,VERY_LARGE:4,HUGE:5},Yi="#ifdef FRAMEBUFFER_PRECISION_HIGH\nuniform mediump sampler2D inputBuffer;\n#else\nuniform lowp sampler2D inputBuffer;\n#endif\nvarying vec2 vUv0;varying vec2 vUv1;varying vec2 vUv2;varying vec2 vUv3;void main(){vec4 sum=texture2D(inputBuffer,vUv0);sum+=texture2D(inputBuffer,vUv1);sum+=texture2D(inputBuffer,vUv2);sum+=texture2D(inputBuffer,vUv3);gl_FragColor=sum*0.25;\n#include <colorspace_fragment>\n}",Qi="uniform vec4 texelSize;uniform float kernel;uniform float scale;varying vec2 vUv0;varying vec2 vUv1;varying vec2 vUv2;varying vec2 vUv3;void main(){vec2 uv=position.xy*0.5+0.5;vec2 dUv=(texelSize.xy*vec2(kernel)+texelSize.zw)*scale;vUv0=vec2(uv.x-dUv.x,uv.y+dUv.y);vUv1=vec2(uv.x+dUv.x,uv.y+dUv.y);vUv2=vec2(uv.x+dUv.x,uv.y-dUv.y);vUv3=vec2(uv.x-dUv.x,uv.y-dUv.y);gl_Position=vec4(position.xy,1.0,1.0);}",Ji=[new Float32Array([0,0]),new Float32Array([0,1,1]),new Float32Array([0,1,1,2]),new Float32Array([0,1,2,2,3]),new Float32Array([0,1,2,3,4,4,5]),new Float32Array([0,1,2,3,4,5,7,8,9,10])],er=class extends H{constructor(e=new oe){super({name:"KawaseBlurMaterial",uniforms:{inputBuffer:new c(null),texelSize:new c(new oe),scale:new c(1),kernel:new c(0)},blending:L,toneMapped:!1,depthWrite:!1,depthTest:!1,fragmentShader:Yi,vertexShader:Qi}),this.fragmentShader=Q(this.fragmentShader),this.setTexelSize(e.x,e.y),this.kernelSize=de.MEDIUM}set inputBuffer(e){this.uniforms.inputBuffer.value=e}setInputBuffer(e){this.inputBuffer=e}get kernelSequence(){return Ji[this.kernelSize]}get scale(){return this.uniforms.scale.value}set scale(e){this.uniforms.scale.value=e}getScale(){return this.uniforms.scale.value}setScale(e){this.uniforms.scale.value=e}getKernel(){return null}get kernel(){return this.uniforms.kernel.value}set kernel(e){this.uniforms.kernel.value=e}setKernel(e){this.kernel=e}setTexelSize(e,t){this.uniforms.texelSize.value.set(e,t,e*.5,t*.5)}setSize(e,t){const i=1/e,r=1/t;this.uniforms.texelSize.value.set(i,r,i*.5,r*.5)}},et=class extends F{constructor({kernelSize:e=de.MEDIUM,resolutionScale:t=.5,width:i=C.AUTO_SIZE,height:r=C.AUTO_SIZE,resolutionX:s=i,resolutionY:n=r}={}){super("KawaseBlurPass"),this.renderTargetA=new I(1,1,{depthBuffer:!1}),this.renderTargetA.texture.name="Blur.Target.A",this.renderTargetB=this.renderTargetA.clone(),this.renderTargetB.texture.name="Blur.Target.B";const a=this.resolution=new C(this,s,n,t);a.addEventListener("change",o=>this.setSize(a.baseWidth,a.baseHeight)),this._blurMaterial=new er,this._blurMaterial.kernelSize=e,this.copyMaterial=new Je}getResolution(){return this.resolution}get blurMaterial(){return this._blurMaterial}set blurMaterial(e){this._blurMaterial=e}get dithering(){return this.copyMaterial.dithering}set dithering(e){this.copyMaterial.dithering=e}get kernelSize(){return this.blurMaterial.kernelSize}set kernelSize(e){this.blurMaterial.kernelSize=e}get width(){return this.resolution.width}set width(e){this.resolution.preferredWidth=e}get height(){return this.resolution.height}set height(e){this.resolution.preferredHeight=e}get scale(){return this.blurMaterial.scale}set scale(e){this.blurMaterial.scale=e}getScale(){return this.blurMaterial.scale}setScale(e){this.blurMaterial.scale=e}getKernelSize(){return this.kernelSize}setKernelSize(e){this.kernelSize=e}getResolutionScale(){return this.resolution.scale}setResolutionScale(e){this.resolution.scale=e}render(e,t,i,r,s){const n=this.scene,a=this.camera,o=this.renderTargetA,u=this.renderTargetB,h=this.blurMaterial,v=h.kernelSequence;let d=t;this.fullscreenMaterial=h;for(let m=0,g=v.length;m<g;++m){const S=m&1?u:o;h.kernel=v[m],h.inputBuffer=d.texture,e.setRenderTarget(S),e.render(n,a),d=S}this.fullscreenMaterial=this.copyMaterial,this.copyMaterial.inputBuffer=d.texture,e.setRenderTarget(this.renderToScreen?null:i),e.render(n,a)}setSize(e,t){const i=this.resolution;i.setBaseSize(e,t);const r=i.width,s=i.height;this.renderTargetA.setSize(r,s),this.renderTargetB.setSize(r,s),this.blurMaterial.setSize(e,t)}initialize(e,t,i){i!==void 0&&(this.renderTargetA.texture.type=i,this.renderTargetB.texture.type=i,i!==W?(this.blurMaterial.defines.FRAMEBUFFER_PRECISION_HIGH="1",this.copyMaterial.defines.FRAMEBUFFER_PRECISION_HIGH="1"):e!==null&&e.outputColorSpace===R&&(this.renderTargetA.texture.colorSpace=R,this.renderTargetB.texture.colorSpace=R))}static get AUTO_SIZE(){return C.AUTO_SIZE}},tr="#include <common>\n#ifdef FRAMEBUFFER_PRECISION_HIGH\nuniform mediump sampler2D inputBuffer;\n#else\nuniform lowp sampler2D inputBuffer;\n#endif\n#ifdef RANGE\nuniform vec2 range;\n#elif defined(THRESHOLD)\nuniform float threshold;uniform float smoothing;\n#endif\nvarying vec2 vUv;void main(){vec4 texel=texture2D(inputBuffer,vUv);float l=luminance(texel.rgb);\n#ifdef RANGE\nfloat low=step(range.x,l);float high=step(l,range.y);l*=low*high;\n#elif defined(THRESHOLD)\nl=smoothstep(threshold,threshold+smoothing,l)*l;\n#endif\n#ifdef COLOR\ngl_FragColor=vec4(texel.rgb*clamp(l,0.0,1.0),l);\n#else\ngl_FragColor=vec4(l);\n#endif\n}",ir=class extends H{constructor(e=!1,t=null){super({name:"LuminanceMaterial",defines:{THREE_REVISION:ue.replace(/\D+/g,"")},uniforms:{inputBuffer:new c(null),threshold:new c(0),smoothing:new c(1),range:new c(null)},blending:L,toneMapped:!1,depthWrite:!1,depthTest:!1,fragmentShader:tr,vertexShader:ce}),this.colorOutput=e,this.luminanceRange=t}set inputBuffer(e){this.uniforms.inputBuffer.value=e}setInputBuffer(e){this.uniforms.inputBuffer.value=e}get threshold(){return this.uniforms.threshold.value}set threshold(e){this.smoothing>0||e>0?this.defines.THRESHOLD="1":delete this.defines.THRESHOLD,this.uniforms.threshold.value=e}getThreshold(){return this.threshold}setThreshold(e){this.threshold=e}get smoothing(){return this.uniforms.smoothing.value}set smoothing(e){this.threshold>0||e>0?this.defines.THRESHOLD="1":delete this.defines.THRESHOLD,this.uniforms.smoothing.value=e}getSmoothingFactor(){return this.smoothing}setSmoothingFactor(e){this.smoothing=e}get useThreshold(){return this.threshold>0||this.smoothing>0}set useThreshold(e){}get colorOutput(){return this.defines.COLOR!==void 0}set colorOutput(e){e?this.defines.COLOR="1":delete this.defines.COLOR,this.needsUpdate=!0}isColorOutputEnabled(e){return this.colorOutput}setColorOutputEnabled(e){this.colorOutput=e}get useRange(){return this.luminanceRange!==null}set useRange(e){this.luminanceRange=null}get luminanceRange(){return this.uniforms.range.value}set luminanceRange(e){e!==null?this.defines.RANGE="1":delete this.defines.RANGE,this.uniforms.range.value=e,this.needsUpdate=!0}getLuminanceRange(){return this.luminanceRange}setLuminanceRange(e){this.luminanceRange=e}},rr=class extends F{constructor({renderTarget:e,luminanceRange:t,colorOutput:i,resolutionScale:r=1,width:s=C.AUTO_SIZE,height:n=C.AUTO_SIZE,resolutionX:a=s,resolutionY:o=n}={}){super("LuminancePass"),this.fullscreenMaterial=new ir(i,t),this.needsSwap=!1,this.renderTarget=e,this.renderTarget===void 0&&(this.renderTarget=new I(1,1,{depthBuffer:!1}),this.renderTarget.texture.name="LuminancePass.Target");const u=this.resolution=new C(this,a,o,r);u.addEventListener("change",h=>this.setSize(u.baseWidth,u.baseHeight))}get texture(){return this.renderTarget.texture}getTexture(){return this.renderTarget.texture}getResolution(){return this.resolution}render(e,t,i,r,s){const n=this.fullscreenMaterial;n.inputBuffer=t.texture,e.setRenderTarget(this.renderToScreen?null:this.renderTarget),e.render(this.scene,this.camera)}setSize(e,t){const i=this.resolution;i.setBaseSize(e,t),this.renderTarget.setSize(i.width,i.height)}initialize(e,t,i){i!==void 0&&i!==W&&(this.renderTarget.texture.type=i,this.fullscreenMaterial.defines.FRAMEBUFFER_PRECISION_HIGH="1")}},sr="#ifdef FRAMEBUFFER_PRECISION_HIGH\nuniform mediump sampler2D inputBuffer;\n#else\nuniform lowp sampler2D inputBuffer;\n#endif\n#define WEIGHT_INNER 0.125\n#define WEIGHT_OUTER 0.0555555\nvarying vec2 vUv;varying vec2 vUv00;varying vec2 vUv01;varying vec2 vUv02;varying vec2 vUv03;varying vec2 vUv04;varying vec2 vUv05;varying vec2 vUv06;varying vec2 vUv07;varying vec2 vUv08;varying vec2 vUv09;varying vec2 vUv10;varying vec2 vUv11;float clampToBorder(const in vec2 uv){return float(uv.s>=0.0&&uv.s<=1.0&&uv.t>=0.0&&uv.t<=1.0);}void main(){vec4 c=vec4(0.0);vec4 w=WEIGHT_INNER*vec4(clampToBorder(vUv00),clampToBorder(vUv01),clampToBorder(vUv02),clampToBorder(vUv03));c+=w.x*texture2D(inputBuffer,vUv00);c+=w.y*texture2D(inputBuffer,vUv01);c+=w.z*texture2D(inputBuffer,vUv02);c+=w.w*texture2D(inputBuffer,vUv03);w=WEIGHT_OUTER*vec4(clampToBorder(vUv04),clampToBorder(vUv05),clampToBorder(vUv06),clampToBorder(vUv07));c+=w.x*texture2D(inputBuffer,vUv04);c+=w.y*texture2D(inputBuffer,vUv05);c+=w.z*texture2D(inputBuffer,vUv06);c+=w.w*texture2D(inputBuffer,vUv07);w=WEIGHT_OUTER*vec4(clampToBorder(vUv08),clampToBorder(vUv09),clampToBorder(vUv10),clampToBorder(vUv11));c+=w.x*texture2D(inputBuffer,vUv08);c+=w.y*texture2D(inputBuffer,vUv09);c+=w.z*texture2D(inputBuffer,vUv10);c+=w.w*texture2D(inputBuffer,vUv11);c+=WEIGHT_OUTER*texture2D(inputBuffer,vUv);gl_FragColor=c;\n#include <colorspace_fragment>\n}",nr="uniform vec2 texelSize;varying vec2 vUv;varying vec2 vUv00;varying vec2 vUv01;varying vec2 vUv02;varying vec2 vUv03;varying vec2 vUv04;varying vec2 vUv05;varying vec2 vUv06;varying vec2 vUv07;varying vec2 vUv08;varying vec2 vUv09;varying vec2 vUv10;varying vec2 vUv11;void main(){vUv=position.xy*0.5+0.5;vUv00=vUv+texelSize*vec2(-1.0,1.0);vUv01=vUv+texelSize*vec2(1.0,1.0);vUv02=vUv+texelSize*vec2(-1.0,-1.0);vUv03=vUv+texelSize*vec2(1.0,-1.0);vUv04=vUv+texelSize*vec2(-2.0,2.0);vUv05=vUv+texelSize*vec2(0.0,2.0);vUv06=vUv+texelSize*vec2(2.0,2.0);vUv07=vUv+texelSize*vec2(-2.0,0.0);vUv08=vUv+texelSize*vec2(2.0,0.0);vUv09=vUv+texelSize*vec2(-2.0,-2.0);vUv10=vUv+texelSize*vec2(0.0,-2.0);vUv11=vUv+texelSize*vec2(2.0,-2.0);gl_Position=vec4(position.xy,1.0,1.0);}",ar=class extends H{constructor(){super({name:"DownsamplingMaterial",uniforms:{inputBuffer:new c(null),texelSize:new c(new w)},blending:L,toneMapped:!1,depthWrite:!1,depthTest:!1,fragmentShader:sr,vertexShader:nr}),this.fragmentShader=Q(this.fragmentShader)}set inputBuffer(e){this.uniforms.inputBuffer.value=e}setSize(e,t){this.uniforms.texelSize.value.set(1/e,1/t)}},or="#ifdef FRAMEBUFFER_PRECISION_HIGH\nuniform mediump sampler2D inputBuffer;uniform mediump sampler2D supportBuffer;\n#else\nuniform lowp sampler2D inputBuffer;uniform lowp sampler2D supportBuffer;\n#endif\nuniform float radius;varying vec2 vUv;varying vec2 vUv0;varying vec2 vUv1;varying vec2 vUv2;varying vec2 vUv3;varying vec2 vUv4;varying vec2 vUv5;varying vec2 vUv6;varying vec2 vUv7;void main(){vec4 c=vec4(0.0);c+=texture2D(inputBuffer,vUv0)*0.0625;c+=texture2D(inputBuffer,vUv1)*0.125;c+=texture2D(inputBuffer,vUv2)*0.0625;c+=texture2D(inputBuffer,vUv3)*0.125;c+=texture2D(inputBuffer,vUv)*0.25;c+=texture2D(inputBuffer,vUv4)*0.125;c+=texture2D(inputBuffer,vUv5)*0.0625;c+=texture2D(inputBuffer,vUv6)*0.125;c+=texture2D(inputBuffer,vUv7)*0.0625;vec4 baseColor=texture2D(supportBuffer,vUv);gl_FragColor=mix(baseColor,c,radius);\n#include <colorspace_fragment>\n}",lr="uniform vec2 texelSize;varying vec2 vUv;varying vec2 vUv0;varying vec2 vUv1;varying vec2 vUv2;varying vec2 vUv3;varying vec2 vUv4;varying vec2 vUv5;varying vec2 vUv6;varying vec2 vUv7;void main(){vUv=position.xy*0.5+0.5;vUv0=vUv+texelSize*vec2(-1.0,1.0);vUv1=vUv+texelSize*vec2(0.0,1.0);vUv2=vUv+texelSize*vec2(1.0,1.0);vUv3=vUv+texelSize*vec2(-1.0,0.0);vUv4=vUv+texelSize*vec2(1.0,0.0);vUv5=vUv+texelSize*vec2(-1.0,-1.0);vUv6=vUv+texelSize*vec2(0.0,-1.0);vUv7=vUv+texelSize*vec2(1.0,-1.0);gl_Position=vec4(position.xy,1.0,1.0);}",ur=class extends H{constructor(){super({name:"UpsamplingMaterial",uniforms:{inputBuffer:new c(null),supportBuffer:new c(null),texelSize:new c(new w),radius:new c(.85)},blending:L,toneMapped:!1,depthWrite:!1,depthTest:!1,fragmentShader:or,vertexShader:lr}),this.fragmentShader=Q(this.fragmentShader)}set inputBuffer(e){this.uniforms.inputBuffer.value=e}set supportBuffer(e){this.uniforms.supportBuffer.value=e}get radius(){return this.uniforms.radius.value}set radius(e){this.uniforms.radius.value=e}setSize(e,t){this.uniforms.texelSize.value.set(1/e,1/t)}},hr=class extends F{constructor(){super("MipmapBlurPass"),this.needsSwap=!1,this.renderTarget=new I(1,1,{depthBuffer:!1}),this.renderTarget.texture.name="Upsampling.Mipmap0",this.downsamplingMipmaps=[],this.upsamplingMipmaps=[],this.downsamplingMaterial=new ar,this.upsamplingMaterial=new ur,this.resolution=new w}get texture(){return this.renderTarget.texture}get levels(){return this.downsamplingMipmaps.length}set levels(e){if(this.levels!==e){const t=this.renderTarget;this.dispose(),this.downsamplingMipmaps=[],this.upsamplingMipmaps=[];for(let i=0;i<e;++i){const r=t.clone();r.texture.name="Downsampling.Mipmap"+i,this.downsamplingMipmaps.push(r)}this.upsamplingMipmaps.push(t);for(let i=1,r=e-1;i<r;++i){const s=t.clone();s.texture.name="Upsampling.Mipmap"+i,this.upsamplingMipmaps.push(s)}this.setSize(this.resolution.x,this.resolution.y)}}get radius(){return this.upsamplingMaterial.radius}set radius(e){this.upsamplingMaterial.radius=e}render(e,t,i,r,s){const{scene:n,camera:a}=this,{downsamplingMaterial:o,upsamplingMaterial:u}=this,{downsamplingMipmaps:h,upsamplingMipmaps:v}=this;let d=t;this.fullscreenMaterial=o;for(let m=0,g=h.length;m<g;++m){const S=h[m];o.setSize(d.width,d.height),o.inputBuffer=d.texture,e.setRenderTarget(S),e.render(n,a),d=S}this.fullscreenMaterial=u;for(let m=v.length-1;m>=0;--m){const g=v[m];u.setSize(d.width,d.height),u.inputBuffer=d.texture,u.supportBuffer=h[m].texture,e.setRenderTarget(g),e.render(n,a),d=g}}setSize(e,t){const i=this.resolution;i.set(e,t);let r=i.width,s=i.height;for(let n=0,a=this.downsamplingMipmaps.length;n<a;++n)r=Math.round(r*.5),s=Math.round(s*.5),this.downsamplingMipmaps[n].setSize(r,s),n<this.upsamplingMipmaps.length&&this.upsamplingMipmaps[n].setSize(r,s)}initialize(e,t,i){if(i!==void 0){const r=this.downsamplingMipmaps.concat(this.upsamplingMipmaps);for(const s of r)s.texture.type=i;if(i!==W)this.downsamplingMaterial.defines.FRAMEBUFFER_PRECISION_HIGH="1",this.upsamplingMaterial.defines.FRAMEBUFFER_PRECISION_HIGH="1";else if(e!==null&&e.outputColorSpace===R)for(const s of r)s.texture.colorSpace=R}}dispose(){super.dispose();for(const e of this.downsamplingMipmaps.concat(this.upsamplingMipmaps))e.dispose()}},tt=class extends De{constructor(e,t,{attributes:i=k.NONE,blendFunction:r=f.NORMAL,defines:s=new Map,uniforms:n=new Map,extensions:a=null,vertexShader:o=null}={}){super(),this.name=e,this.renderer=null,this.attributes=i,this.fragmentShader=t,this.vertexShader=o,this.defines=s,this.uniforms=n,this.extensions=a,this.blendMode=new qi(r),this.blendMode.addEventListener("change",u=>this.setChanged()),this._inputColorSpace=Ze,this._outputColorSpace=je}get inputColorSpace(){return this._inputColorSpace}set inputColorSpace(e){this._inputColorSpace=e,this.setChanged()}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(e){this._outputColorSpace=e,this.setChanged()}set mainScene(e){}set mainCamera(e){}getName(){return this.name}setRenderer(e){this.renderer=e}getDefines(){return this.defines}getUniforms(){return this.uniforms}getExtensions(){return this.extensions}getBlendMode(){return this.blendMode}getAttributes(){return this.attributes}setAttributes(e){this.attributes=e,this.setChanged()}getFragmentShader(){return this.fragmentShader}setFragmentShader(e){this.fragmentShader=e,this.setChanged()}getVertexShader(){return this.vertexShader}setVertexShader(e){this.vertexShader=e,this.setChanged()}setChanged(){this.dispatchEvent({type:"change"})}setDepthTexture(e,t=K){}update(e,t,i){}setSize(e,t){}initialize(e,t,i){}dispose(){for(const e of Object.keys(this)){const t=this[e];(t instanceof I||t instanceof qe||t instanceof Ye||t instanceof F)&&this[e].dispose()}}},cr="#ifdef FRAMEBUFFER_PRECISION_HIGH\nuniform mediump sampler2D map;\n#else\nuniform lowp sampler2D map;\n#endif\nuniform float intensity;void mainImage(const in vec4 inputColor,const in vec2 uv,out vec4 outputColor){vec4 texel=texture2D(map,uv);outputColor=vec4(texel.rgb*intensity,texel.a);}",dr=class extends tt{constructor({blendFunction:e=f.SCREEN,luminanceThreshold:t=.9,luminanceSmoothing:i=.025,mipmapBlur:r=!1,intensity:s=1,radius:n=.85,levels:a=8,kernelSize:o=de.LARGE,resolutionScale:u=.5,width:h=C.AUTO_SIZE,height:v=C.AUTO_SIZE,resolutionX:d=h,resolutionY:m=v}={}){super("BloomEffect",cr,{blendFunction:e,uniforms:new Map([["map",new c(null)],["intensity",new c(s)]])}),this.renderTarget=new I(1,1,{depthBuffer:!1}),this.renderTarget.texture.name="Bloom.Target",this.blurPass=new et({kernelSize:o}),this.luminancePass=new rr({colorOutput:!0}),this.luminanceMaterial.threshold=t,this.luminanceMaterial.smoothing=i,this.mipmapBlurPass=new hr,this.mipmapBlurPass.enabled=r,this.mipmapBlurPass.radius=n,this.mipmapBlurPass.levels=a,this.uniforms.get("map").value=r?this.mipmapBlurPass.texture:this.renderTarget.texture;const g=this.resolution=new C(this,d,m,u);g.addEventListener("change",S=>this.setSize(g.baseWidth,g.baseHeight))}get texture(){return this.mipmapBlurPass.enabled?this.mipmapBlurPass.texture:this.renderTarget.texture}getTexture(){return this.texture}getResolution(){return this.resolution}getBlurPass(){return this.blurPass}getLuminancePass(){return this.luminancePass}get luminanceMaterial(){return this.luminancePass.fullscreenMaterial}getLuminanceMaterial(){return this.luminancePass.fullscreenMaterial}get width(){return this.resolution.width}set width(e){this.resolution.preferredWidth=e}get height(){return this.resolution.height}set height(e){this.resolution.preferredHeight=e}get dithering(){return this.blurPass.dithering}set dithering(e){this.blurPass.dithering=e}get kernelSize(){return this.blurPass.kernelSize}set kernelSize(e){this.blurPass.kernelSize=e}get distinction(){return console.warn(this.name,"distinction was removed"),1}set distinction(e){console.warn(this.name,"distinction was removed")}get intensity(){return this.uniforms.get("intensity").value}set intensity(e){this.uniforms.get("intensity").value=e}getIntensity(){return this.intensity}setIntensity(e){this.intensity=e}getResolutionScale(){return this.resolution.scale}setResolutionScale(e){this.resolution.scale=e}update(e,t,i){const r=this.renderTarget,s=this.luminancePass;s.enabled?(s.render(e,t),this.mipmapBlurPass.enabled?this.mipmapBlurPass.render(e,s.renderTarget):this.blurPass.render(e,s.renderTarget,r)):this.mipmapBlurPass.enabled?this.mipmapBlurPass.render(e,t):this.blurPass.render(e,t,r)}setSize(e,t){const i=this.resolution;i.setBaseSize(e,t),this.renderTarget.setSize(i.width,i.height),this.blurPass.resolution.copy(i),this.luminancePass.setSize(e,t),this.mipmapBlurPass.setSize(e,t)}initialize(e,t,i){this.blurPass.initialize(e,t,i),this.luminancePass.initialize(e,t,i),this.mipmapBlurPass.initialize(e,t,i),i!==void 0&&(this.renderTarget.texture.type=i,e!==null&&e.outputColorSpace===R&&(this.renderTarget.texture.colorSpace=R))}},Oe=class extends F{constructor(e,t="inputBuffer"){super("ShaderPass"),this.fullscreenMaterial=e,this.input=t}setInput(e){this.input=e}render(e,t,i,r,s){const n=this.fullscreenMaterial.uniforms;t!==null&&n!==void 0&&n[this.input]!==void 0&&(n[this.input].value=t.texture),e.setRenderTarget(this.renderToScreen?null:i),e.render(this.scene,this.camera)}initialize(e,t,i){i!==void 0&&i!==W&&(this.fullscreenMaterial.defines.FRAMEBUFFER_PRECISION_HIGH="1")}},Se={DEFAULT:0,KEEP_MAX_DEPTH:1,DISCARD_MAX_DEPTH:2},fr="#include <common>\n#include <packing>\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nuniform highp sampler2D depthBuffer0;uniform highp sampler2D depthBuffer1;\n#else\nuniform mediump sampler2D depthBuffer0;uniform mediump sampler2D depthBuffer1;\n#endif\nuniform sampler2D inputBuffer;uniform vec2 cameraNearFar;float getViewZ(const in float depth){\n#ifdef PERSPECTIVE_CAMERA\nreturn perspectiveDepthToViewZ(depth,cameraNearFar.x,cameraNearFar.y);\n#else\nreturn orthographicDepthToViewZ(depth,cameraNearFar.x,cameraNearFar.y);\n#endif\n}varying vec2 vUv;void main(){vec2 depth;\n#if DEPTH_PACKING_0 == 3201\ndepth.x=unpackRGBAToDepth(texture2D(depthBuffer0,vUv));\n#else\ndepth.x=texture2D(depthBuffer0,vUv).r;\n#ifdef LOG_DEPTH\nfloat d=pow(2.0,depth.x*log2(cameraNearFar.y+1.0))-1.0;float a=cameraNearFar.y/(cameraNearFar.y-cameraNearFar.x);float b=cameraNearFar.y*cameraNearFar.x/(cameraNearFar.x-cameraNearFar.y);depth.x=a+b/d;\n#endif\n#endif\n#if DEPTH_PACKING_1 == 3201\ndepth.y=unpackRGBAToDepth(texture2D(depthBuffer1,vUv));\n#else\ndepth.y=texture2D(depthBuffer1,vUv).r;\n#ifdef LOG_DEPTH\nfloat d=pow(2.0,depth.y*log2(cameraNearFar.y+1.0))-1.0;float a=cameraNearFar.y/(cameraNearFar.y-cameraNearFar.x);float b=cameraNearFar.y*cameraNearFar.x/(cameraNearFar.x-cameraNearFar.y);depth.y=a+b/d;\n#endif\n#endif\nbool isMaxDepth=(depth.x==1.0);\n#ifdef PERSPECTIVE_CAMERA\ndepth.x=viewZToOrthographicDepth(getViewZ(depth.x),cameraNearFar.x,cameraNearFar.y);depth.y=viewZToOrthographicDepth(getViewZ(depth.y),cameraNearFar.x,cameraNearFar.y);\n#endif\n#if DEPTH_TEST_STRATEGY == 0\nbool keep=depthTest(depth.x,depth.y);\n#elif DEPTH_TEST_STRATEGY == 1\nbool keep=isMaxDepth||depthTest(depth.x,depth.y);\n#else\nbool keep=!isMaxDepth&&depthTest(depth.x,depth.y);\n#endif\nif(keep){gl_FragColor=texture2D(inputBuffer,vUv);}else{discard;}}",pr=class extends H{constructor(){super({name:"DepthMaskMaterial",defines:{DEPTH_EPSILON:"0.0001",DEPTH_PACKING_0:"0",DEPTH_PACKING_1:"0",DEPTH_TEST_STRATEGY:Se.KEEP_MAX_DEPTH},uniforms:{inputBuffer:new c(null),depthBuffer0:new c(null),depthBuffer1:new c(null),cameraNearFar:new c(new w(1,1))},blending:L,toneMapped:!1,depthWrite:!1,depthTest:!1,fragmentShader:fr,vertexShader:ce}),this.depthMode=Fe}set depthBuffer0(e){this.uniforms.depthBuffer0.value=e}set depthPacking0(e){this.defines.DEPTH_PACKING_0=e.toFixed(0),this.needsUpdate=!0}setDepthBuffer0(e,t=K){this.depthBuffer0=e,this.depthPacking0=t}set depthBuffer1(e){this.uniforms.depthBuffer1.value=e}set depthPacking1(e){this.defines.DEPTH_PACKING_1=e.toFixed(0),this.needsUpdate=!0}setDepthBuffer1(e,t=K){this.depthBuffer1=e,this.depthPacking1=t}get maxDepthStrategy(){return Number(this.defines.DEPTH_TEST_STRATEGY)}set maxDepthStrategy(e){this.defines.DEPTH_TEST_STRATEGY=e.toFixed(0),this.needsUpdate=!0}get keepFar(){return this.maxDepthStrategy}set keepFar(e){this.maxDepthStrategy=e?Se.KEEP_MAX_DEPTH:Se.DISCARD_MAX_DEPTH}getMaxDepthStrategy(){return this.maxDepthStrategy}setMaxDepthStrategy(e){this.maxDepthStrategy=e}get epsilon(){return Number(this.defines.DEPTH_EPSILON)}set epsilon(e){this.defines.DEPTH_EPSILON=e.toFixed(16),this.needsUpdate=!0}getEpsilon(){return this.epsilon}setEpsilon(e){this.epsilon=e}get depthMode(){return Number(this.defines.DEPTH_MODE)}set depthMode(e){let t;switch(e){case Ct:t="false";break;case At:t="true";break;case Pt:t="abs(d1 - d0) <= DEPTH_EPSILON";break;case Dt:t="abs(d1 - d0) > DEPTH_EPSILON";break;case Fe:t="d0 > d1";break;case Ut:t="d0 >= d1";break;case bt:t="d0 <= d1";break;case Rt:default:t="d0 < d1";break}this.defines.DEPTH_MODE=e.toFixed(0),this.defines["depthTest(d0, d1)"]=t,this.needsUpdate=!0}getDepthMode(){return this.depthMode}setDepthMode(e){this.depthMode=e}adoptCameraSettings(e){this.copyCameraSettings(e)}copyCameraSettings(e){e&&(this.uniforms.cameraNearFar.value.set(e.near,e.far),e instanceof we?this.defines.PERSPECTIVE_CAMERA="1":delete this.defines.PERSPECTIVE_CAMERA,this.needsUpdate=!0)}},vr="#include <common>\n#include <dithering_pars_fragment>\n#ifdef FRAMEBUFFER_PRECISION_HIGH\nuniform mediump sampler2D inputBuffer;\n#else\nuniform lowp sampler2D inputBuffer;\n#endif\nuniform vec2 lightPosition;uniform float exposure;uniform float decay;uniform float density;uniform float weight;uniform float clampMax;varying vec2 vUv;void main(){vec2 coord=vUv;vec2 delta=lightPosition-coord;delta*=1.0/SAMPLES_FLOAT*density;float illuminationDecay=1.0;vec4 color=vec4(0.0);for(int i=0;i<SAMPLES_INT;++i){coord+=delta;vec4 texel=texture2D(inputBuffer,coord);texel*=illuminationDecay*weight;color+=texel;illuminationDecay*=decay;}gl_FragColor=clamp(color*exposure,0.0,clampMax);\n#include <dithering_fragment>\n}",mr=class extends H{constructor(e){super({name:"GodRaysMaterial",defines:{SAMPLES_INT:"60",SAMPLES_FLOAT:"60.0"},uniforms:{inputBuffer:new c(null),lightPosition:new c(e),density:new c(1),decay:new c(1),weight:new c(1),exposure:new c(1),clampMax:new c(1)},blending:L,toneMapped:!1,depthWrite:!1,depthTest:!1,fragmentShader:vr,vertexShader:ce})}set inputBuffer(e){this.uniforms.inputBuffer.value=e}setInputBuffer(e){this.uniforms.inputBuffer.value=e}get lightPosition(){return this.uniforms.lightPosition.value}getLightPosition(){return this.uniforms.lightPosition.value}setLightPosition(e){this.uniforms.lightPosition.value=e}get density(){return this.uniforms.density.value}set density(e){this.uniforms.density.value=e}getDensity(){return this.uniforms.density.value}setDensity(e){this.uniforms.density.value=e}get decay(){return this.uniforms.decay.value}set decay(e){this.uniforms.decay.value=e}getDecay(){return this.uniforms.decay.value}setDecay(e){this.uniforms.decay.value=e}get weight(){return this.uniforms.weight.value}set weight(e){this.uniforms.weight.value=e}getWeight(){return this.uniforms.weight.value}setWeight(e){this.uniforms.weight.value=e}get exposure(){return this.uniforms.exposure.value}set exposure(e){this.uniforms.exposure.value=e}getExposure(){return this.uniforms.exposure.value}setExposure(e){this.uniforms.exposure.value=e}get maxIntensity(){return this.uniforms.clampMax.value}set maxIntensity(e){this.uniforms.clampMax.value=e}getMaxIntensity(){return this.uniforms.clampMax.value}setMaxIntensity(e){this.uniforms.clampMax.value=e}get samples(){return Number(this.defines.SAMPLES_INT)}set samples(e){const t=Math.floor(e);this.defines.SAMPLES_INT=t.toFixed(0),this.defines.SAMPLES_FLOAT=t.toFixed(1),this.needsUpdate=!0}getSamples(){return this.samples}setSamples(e){this.samples=e}},it=class extends F{constructor(e,t,i=null){super("RenderPass",e,t),this.needsSwap=!1,this.clearPass=new Pe,this.overrideMaterialManager=i===null?null:new Le(i),this.ignoreBackground=!1,this.skipShadowMapUpdate=!1,this.selection=null}set mainScene(e){this.scene=e}set mainCamera(e){this.camera=e}get renderToScreen(){return super.renderToScreen}set renderToScreen(e){super.renderToScreen=e,this.clearPass.renderToScreen=e}get overrideMaterial(){const e=this.overrideMaterialManager;return e!==null?e.material:null}set overrideMaterial(e){const t=this.overrideMaterialManager;e!==null?t!==null?t.setMaterial(e):this.overrideMaterialManager=new Le(e):t!==null&&(t.dispose(),this.overrideMaterialManager=null)}getOverrideMaterial(){return this.overrideMaterial}setOverrideMaterial(e){this.overrideMaterial=e}get clear(){return this.clearPass.enabled}set clear(e){this.clearPass.enabled=e}getSelection(){return this.selection}setSelection(e){this.selection=e}isBackgroundDisabled(){return this.ignoreBackground}setBackgroundDisabled(e){this.ignoreBackground=e}isShadowMapDisabled(){return this.skipShadowMapUpdate}setShadowMapDisabled(e){this.skipShadowMapUpdate=e}getClearPass(){return this.clearPass}render(e,t,i,r,s){const n=this.scene,a=this.camera,o=this.selection,u=a.layers.mask,h=n.background,v=e.shadowMap.autoUpdate,d=this.renderToScreen?null:t;o!==null&&a.layers.set(o.getLayer()),this.skipShadowMapUpdate&&(e.shadowMap.autoUpdate=!1),(this.ignoreBackground||this.clearPass.overrideClearColor!==null)&&(n.background=null),this.clearPass.enabled&&this.clearPass.render(e,t),e.setRenderTarget(d),this.overrideMaterialManager!==null?this.overrideMaterialManager.render(e,n,a):e.render(n,a),a.layers.mask=u,n.background=h,e.shadowMap.autoUpdate=v}},gr="#ifdef FRAMEBUFFER_PRECISION_HIGH\nuniform mediump sampler2D map;\n#else\nuniform lowp sampler2D map;\n#endif\nvoid mainImage(const in vec4 inputColor,const in vec2 uv,out vec4 outputColor){outputColor=texture2D(map,uv);}",Te=new $,Ge=new _e,xr=class extends tt{constructor(e,t,{blendFunction:i=f.SCREEN,samples:r=60,density:s=.96,decay:n=.9,weight:a=.4,exposure:o=.6,clampMax:u=1,blur:h=!0,kernelSize:v=de.SMALL,resolutionScale:d=.5,width:m=C.AUTO_SIZE,height:g=C.AUTO_SIZE,resolutionX:S=m,resolutionY:T=g}={}){super("GodRaysEffect",gr,{blendFunction:i,attributes:k.DEPTH,uniforms:new Map([["map",new c(null)]])}),this.camera=e,this._lightSource=t,this.lightSource=t,this.lightScene=new ae,this.screenPosition=new w,this.renderTargetA=new I(1,1,{depthBuffer:!1}),this.renderTargetA.texture.name="GodRays.Target.A",this.renderTargetB=this.renderTargetA.clone(),this.renderTargetB.texture.name="GodRays.Target.B",this.uniforms.get("map").value=this.renderTargetB.texture,this.renderTargetLight=new I(1,1),this.renderTargetLight.texture.name="GodRays.Light",this.renderTargetLight.depthTexture=new be,this.renderPassLight=new it(this.lightScene,e),this.renderPassLight.clearPass.overrideClearColor=new ye(0),this.clearPass=new Pe(!0,!1,!1),this.clearPass.overrideClearColor=new ye(0),this.blurPass=new et({kernelSize:v}),this.blurPass.enabled=h,this.depthMaskPass=new Oe(new pr);const _=this.depthMaskMaterial;_.depthBuffer1=this.renderTargetLight.depthTexture,_.copyCameraSettings(e),this.godRaysPass=new Oe(new mr(this.screenPosition));const y=this.godRaysMaterial;y.density=s,y.decay=n,y.weight=a,y.exposure=o,y.maxIntensity=u,y.samples=r;const p=this.resolution=new C(this,S,T,d);p.addEventListener("change",b=>this.setSize(p.baseWidth,p.baseHeight))}set mainCamera(e){this.camera=e,this.renderPassLight.mainCamera=e,this.depthMaskMaterial.copyCameraSettings(e)}get lightSource(){return this._lightSource}set lightSource(e){this._lightSource=e,e!==null&&(e.material.depthWrite=!1,e.material.transparent=!0)}getBlurPass(){return this.blurPass}get texture(){return this.renderTargetB.texture}getTexture(){return this.texture}get depthMaskMaterial(){return this.depthMaskPass.fullscreenMaterial}get godRaysMaterial(){return this.godRaysPass.fullscreenMaterial}getGodRaysMaterial(){return this.godRaysMaterial}getResolution(){return this.resolution}get width(){return this.resolution.width}set width(e){this.resolution.preferredWidth=e}get height(){return this.resolution.height}set height(e){this.resolution.preferredHeight=e}get dithering(){return this.godRaysMaterial.dithering}set dithering(e){const t=this.godRaysMaterial;t.dithering=e,t.needsUpdate=!0}get blur(){return this.blurPass.enabled}set blur(e){this.blurPass.enabled=e}get kernelSize(){return this.blurPass.kernelSize}set kernelSize(e){this.blurPass.kernelSize=e}getResolutionScale(){return this.resolution.scale}setResolutionScale(e){this.resolution.scale=e}get samples(){return this.godRaysMaterial.samples}set samples(e){this.godRaysMaterial.samples=e}setDepthTexture(e,t=K){this.depthMaskPass.fullscreenMaterial.depthBuffer0=e,this.depthMaskPass.fullscreenMaterial.depthPacking0=t}update(e,t,i){const r=this.lightSource,s=r.parent,n=r.matrixAutoUpdate,a=this.renderTargetA,o=this.renderTargetLight;r.material.depthWrite=!0,r.matrixAutoUpdate=!1,r.updateWorldMatrix(!0,!1),s!==null&&(n||Ge.copy(r.matrix),r.matrix.copy(r.matrixWorld)),this.lightScene.add(r),this.renderPassLight.render(e,o),this.clearPass.render(e,a),this.depthMaskPass.render(e,o,a),r.material.depthWrite=!1,r.matrixAutoUpdate=n,s!==null&&(n||r.matrix.copy(Ge),s.add(r)),Te.setFromMatrixPosition(r.matrixWorld).project(this.camera),this.screenPosition.set(Math.min(Math.max((Te.x+1)*.5,-1),2),Math.min(Math.max((Te.y+1)*.5,-1),2)),this.blurPass.enabled&&this.blurPass.render(e,a,a),this.godRaysPass.render(e,a,this.renderTargetB)}setSize(e,t){const i=this.resolution;i.setBaseSize(e,t);const r=i.width,s=i.height;this.renderTargetA.setSize(r,s),this.renderTargetB.setSize(r,s),this.renderTargetLight.setSize(r,s),this.blurPass.resolution.copy(i)}initialize(e,t,i){this.blurPass.initialize(e,t,i),this.renderPassLight.initialize(e,t,i),this.depthMaskPass.initialize(e,t,i),this.godRaysPass.initialize(e,t,i),i!==void 0&&(this.renderTargetA.texture.type=i,this.renderTargetB.texture.type=i,this.renderTargetLight.texture.type=i,e!==null&&e.outputColorSpace===R&&(this.renderTargetA.texture.colorSpace=R,this.renderTargetB.texture.colorSpace=R,this.renderTargetLight.texture.colorSpace=R))}},Sr="#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#define packFloatToRGBA(v) packDepthToRGBA(v)\n#define unpackRGBAToFloat(v) unpackRGBAToDepth(v)\n#ifdef FRAMEBUFFER_PRECISION_HIGH\nuniform mediump sampler2D inputBuffer;\n#else\nuniform lowp sampler2D inputBuffer;\n#endif\n#if DEPTH_PACKING == 3201\nuniform lowp sampler2D depthBuffer;\n#elif defined(GL_FRAGMENT_PRECISION_HIGH)\nuniform highp sampler2D depthBuffer;\n#else\nuniform mediump sampler2D depthBuffer;\n#endif\nuniform vec2 resolution;uniform vec2 texelSize;uniform float cameraNear;uniform float cameraFar;uniform float aspect;uniform float time;varying vec2 vUv;\n#if THREE_REVISION < 143\n#define luminance(v) linearToRelativeLuminance(v)\n#endif\n#if THREE_REVISION >= 137\nvec4 sRGBToLinear(const in vec4 value){return vec4(mix(pow(value.rgb*0.9478672986+vec3(0.0521327014),vec3(2.4)),value.rgb*0.0773993808,vec3(lessThanEqual(value.rgb,vec3(0.04045)))),value.a);}\n#endif\nfloat readDepth(const in vec2 uv){\n#if DEPTH_PACKING == 3201\nreturn unpackRGBAToDepth(texture2D(depthBuffer,uv));\n#else\nreturn texture2D(depthBuffer,uv).r;\n#endif\n}float getViewZ(const in float depth){\n#ifdef PERSPECTIVE_CAMERA\nreturn perspectiveDepthToViewZ(depth,cameraNear,cameraFar);\n#else\nreturn orthographicDepthToViewZ(depth,cameraNear,cameraFar);\n#endif\n}vec3 RGBToHCV(const in vec3 RGB){vec4 P=mix(vec4(RGB.bg,-1.0,2.0/3.0),vec4(RGB.gb,0.0,-1.0/3.0),step(RGB.b,RGB.g));vec4 Q=mix(vec4(P.xyw,RGB.r),vec4(RGB.r,P.yzx),step(P.x,RGB.r));float C=Q.x-min(Q.w,Q.y);float H=abs((Q.w-Q.y)/(6.0*C+EPSILON)+Q.z);return vec3(H,C,Q.x);}vec3 RGBToHSL(const in vec3 RGB){vec3 HCV=RGBToHCV(RGB);float L=HCV.z-HCV.y*0.5;float S=HCV.y/(1.0-abs(L*2.0-1.0)+EPSILON);return vec3(HCV.x,S,L);}vec3 HueToRGB(const in float H){float R=abs(H*6.0-3.0)-1.0;float G=2.0-abs(H*6.0-2.0);float B=2.0-abs(H*6.0-4.0);return clamp(vec3(R,G,B),0.0,1.0);}vec3 HSLToRGB(const in vec3 HSL){vec3 RGB=HueToRGB(HSL.x);float C=(1.0-abs(2.0*HSL.z-1.0))*HSL.y;return(RGB-0.5)*C+HSL.z;}FRAGMENT_HEAD void main(){FRAGMENT_MAIN_UV vec4 color0=texture2D(inputBuffer,UV);vec4 color1=vec4(0.0);FRAGMENT_MAIN_IMAGE color0.a=clamp(color0.a,0.0,1.0);gl_FragColor=color0;\n#ifdef ENCODE_OUTPUT\n#include <colorspace_fragment>\n#endif\n#include <dithering_fragment>\n}",Tr="uniform vec2 resolution;uniform vec2 texelSize;uniform float cameraNear;uniform float cameraFar;uniform float aspect;uniform float time;varying vec2 vUv;VERTEX_HEAD void main(){vUv=position.xy*0.5+0.5;VERTEX_MAIN_SUPPORT gl_Position=vec4(position.xy,1.0,1.0);}",_r=class extends H{constructor(e,t,i,r,s=!1){super({name:"EffectMaterial",defines:{THREE_REVISION:ue.replace(/\D+/g,""),DEPTH_PACKING:"0",ENCODE_OUTPUT:"1"},uniforms:{inputBuffer:new c(null),depthBuffer:new c(null),resolution:new c(new w),texelSize:new c(new w),cameraNear:new c(.3),cameraFar:new c(1e3),aspect:new c(1),time:new c(0)},blending:L,toneMapped:!1,depthWrite:!1,depthTest:!1,dithering:s}),e&&this.setShaderParts(e),t&&this.setDefines(t),i&&this.setUniforms(i),this.copyCameraSettings(r)}set inputBuffer(e){this.uniforms.inputBuffer.value=e}setInputBuffer(e){this.uniforms.inputBuffer.value=e}get depthBuffer(){return this.uniforms.depthBuffer.value}set depthBuffer(e){this.uniforms.depthBuffer.value=e}get depthPacking(){return Number(this.defines.DEPTH_PACKING)}set depthPacking(e){this.defines.DEPTH_PACKING=e.toFixed(0),this.needsUpdate=!0}setDepthBuffer(e,t=K){this.depthBuffer=e,this.depthPacking=t}setShaderData(e){this.setShaderParts(e.shaderParts),this.setDefines(e.defines),this.setUniforms(e.uniforms),this.setExtensions(e.extensions)}setShaderParts(e){return this.fragmentShader=Sr.replace(x.FRAGMENT_HEAD,e.get(x.FRAGMENT_HEAD)||"").replace(x.FRAGMENT_MAIN_UV,e.get(x.FRAGMENT_MAIN_UV)||"").replace(x.FRAGMENT_MAIN_IMAGE,e.get(x.FRAGMENT_MAIN_IMAGE)||""),this.vertexShader=Tr.replace(x.VERTEX_HEAD,e.get(x.VERTEX_HEAD)||"").replace(x.VERTEX_MAIN_SUPPORT,e.get(x.VERTEX_MAIN_SUPPORT)||""),this.fragmentShader=Q(this.fragmentShader),this.needsUpdate=!0,this}setDefines(e){for(const t of e.entries())this.defines[t[0]]=t[1];return this.needsUpdate=!0,this}setUniforms(e){for(const t of e.entries())this.uniforms[t[0]]=t[1];return this}setExtensions(e){this.extensions={};for(const t of e)this.extensions[t]=!0;return this}get encodeOutput(){return this.defines.ENCODE_OUTPUT!==void 0}set encodeOutput(e){this.encodeOutput!==e&&(e?this.defines.ENCODE_OUTPUT="1":delete this.defines.ENCODE_OUTPUT,this.needsUpdate=!0)}isOutputEncodingEnabled(e){return this.encodeOutput}setOutputEncodingEnabled(e){this.encodeOutput=e}get time(){return this.uniforms.time.value}set time(e){this.uniforms.time.value=e}setDeltaTime(e){this.uniforms.time.value+=e}adoptCameraSettings(e){this.copyCameraSettings(e)}copyCameraSettings(e){e&&(this.uniforms.cameraNear.value=e.near,this.uniforms.cameraFar.value=e.far,e instanceof we?this.defines.PERSPECTIVE_CAMERA="1":delete this.defines.PERSPECTIVE_CAMERA,this.needsUpdate=!0)}setSize(e,t){const i=this.uniforms;i.resolution.value.set(e,t),i.texelSize.value.set(1/e,1/t),i.aspect.value=e/t}static get Section(){return x}};function ke(e,t,i){for(const r of t){const s="$1"+e+r.charAt(0).toUpperCase()+r.slice(1),n=new RegExp("([^\\.])(\\b"+r+"\\b)","g");for(const a of i.entries())a[1]!==null&&i.set(a[0],a[1].replace(n,s))}}function Mr(e,t,i){let r=t.getFragmentShader(),s=t.getVertexShader();const n=r!==void 0&&/mainImage/.test(r),a=r!==void 0&&/mainUv/.test(r);if(i.attributes|=t.getAttributes(),r===void 0)throw new Error("Missing fragment shader (".concat(t.name,")"));if(a&&i.attributes&k.CONVOLUTION)throw new Error("Effects that transform UVs are incompatible with convolution effects (".concat(t.name,")"));if(!n&&!a)throw new Error("Could not find mainImage or mainUv function (".concat(t.name,")"));{const o=/\w+\s+(\w+)\([\w\s,]*\)\s*{/g,u=i.shaderParts;let h=u.get(x.FRAGMENT_HEAD)||"",v=u.get(x.FRAGMENT_MAIN_UV)||"",d=u.get(x.FRAGMENT_MAIN_IMAGE)||"",m=u.get(x.VERTEX_HEAD)||"",g=u.get(x.VERTEX_MAIN_SUPPORT)||"";const S=new Set,T=new Set;if(a&&(v+="	".concat(e,"MainUv(UV);\n"),i.uvTransformation=!0),s!==null&&/mainSupport/.test(s)){const p=/mainSupport *\([\w\s]*?uv\s*?\)/.test(s);g+="	".concat(e,"MainSupport("),g+=p?"vUv);\n":");\n";for(const b of s.matchAll(/(?:varying\s+\w+\s+([\S\s]*?);)/g))for(const U of b[1].split(/\s*,\s*/))i.varyings.add(U),S.add(U),T.add(U);for(const b of s.matchAll(o))T.add(b[1])}for(const p of r.matchAll(o))T.add(p[1]);for(const p of t.defines.keys())T.add(p.replace(/\([\w\s,]*\)/g,""));for(const p of t.uniforms.keys())T.add(p);T.delete("while"),T.delete("for"),T.delete("if"),t.uniforms.forEach((p,b)=>i.uniforms.set(e+b.charAt(0).toUpperCase()+b.slice(1),p)),t.defines.forEach((p,b)=>i.defines.set(e+b.charAt(0).toUpperCase()+b.slice(1),p));const _=new Map([["fragment",r],["vertex",s]]);ke(e,T,i.defines),ke(e,T,_),r=_.get("fragment"),s=_.get("vertex");const y=t.blendMode;if(i.blendModes.set(y.blendFunction,y),n){t.inputColorSpace!==null&&t.inputColorSpace!==i.colorSpace&&(d+=t.inputColorSpace===R?"color0 = LinearTosRGB(color0);\n	":"color0 = sRGBToLinear(color0);\n	"),t.outputColorSpace!==je?i.colorSpace=t.outputColorSpace:t.inputColorSpace!==null&&(i.colorSpace=t.inputColorSpace);const p=/MainImage *\([\w\s,]*?depth[\w\s,]*?\)/;d+="".concat(e,"MainImage(color0, UV, "),i.attributes&k.DEPTH&&p.test(r)&&(d+="depth, ",i.readDepth=!0),d+="color1);\n	";const b=e+"BlendOpacity";i.uniforms.set(b,y.opacity),d+="color0 = blend".concat(y.blendFunction,"(color0, color1, ").concat(b,");\n\n	"),h+="uniform float ".concat(b,";\n\n")}if(h+=r+"\n",s!==null&&(m+=s+"\n"),u.set(x.FRAGMENT_HEAD,h),u.set(x.FRAGMENT_MAIN_UV,v),u.set(x.FRAGMENT_MAIN_IMAGE,d),u.set(x.VERTEX_HEAD,m),u.set(x.VERTEX_MAIN_SUPPORT,g),t.extensions!==null)for(const p of t.extensions)i.extensions.add(p)}}var yr=class extends F{constructor(e,...t){super("EffectPass"),this.fullscreenMaterial=new _r(null,null,null,e),this.listener=i=>this.handleEvent(i),this.effects=[],this.setEffects(t),this.skipRendering=!1,this.minTime=1,this.maxTime=Number.POSITIVE_INFINITY,this.timeScale=1}set mainScene(e){for(const t of this.effects)t.mainScene=e}set mainCamera(e){this.fullscreenMaterial.copyCameraSettings(e);for(const t of this.effects)t.mainCamera=e}get encodeOutput(){return this.fullscreenMaterial.encodeOutput}set encodeOutput(e){this.fullscreenMaterial.encodeOutput=e}get dithering(){return this.fullscreenMaterial.dithering}set dithering(e){const t=this.fullscreenMaterial;t.dithering=e,t.needsUpdate=!0}setEffects(e){for(const t of this.effects)t.removeEventListener("change",this.listener);this.effects=e.sort((t,i)=>i.attributes-t.attributes);for(const t of this.effects)t.addEventListener("change",this.listener)}updateMaterial(){const e=new mi;let t=0;for(const a of this.effects)if(a.blendMode.blendFunction===f.DST)e.attributes|=a.getAttributes()&k.DEPTH;else{if(e.attributes&a.getAttributes()&k.CONVOLUTION)throw new Error("Convolution effects cannot be merged (".concat(a.name,")"));Mr("e"+t++,a,e)}let i=e.shaderParts.get(x.FRAGMENT_HEAD),r=e.shaderParts.get(x.FRAGMENT_MAIN_IMAGE),s=e.shaderParts.get(x.FRAGMENT_MAIN_UV);const n=/\bblend\b/g;for(const a of e.blendModes.values())i+=a.getShaderCode().replace(n,"blend".concat(a.blendFunction))+"\n";e.attributes&k.DEPTH?(e.readDepth&&(r="float depth = readDepth(UV);\n\n	"+r),this.needsDepthTexture=this.getDepthTexture()===null):this.needsDepthTexture=!1,e.colorSpace===R&&(r+="color0 = sRGBToLinear(color0);\n	"),e.uvTransformation?(s="vec2 transformedUv = vUv;\n"+s,e.defines.set("UV","transformedUv")):e.defines.set("UV","vUv"),e.shaderParts.set(x.FRAGMENT_HEAD,i),e.shaderParts.set(x.FRAGMENT_MAIN_IMAGE,r),e.shaderParts.set(x.FRAGMENT_MAIN_UV,s);for(const[a,o]of e.shaderParts)o!==null&&e.shaderParts.set(a,o.trim().replace(/^#/,"\n#"));this.skipRendering=t===0,this.needsSwap=!this.skipRendering,this.fullscreenMaterial.setShaderData(e)}recompile(){this.updateMaterial()}getDepthTexture(){return this.fullscreenMaterial.depthBuffer}setDepthTexture(e,t=K){this.fullscreenMaterial.depthBuffer=e,this.fullscreenMaterial.depthPacking=t;for(const i of this.effects)i.setDepthTexture(e,t)}render(e,t,i,r,s){for(const n of this.effects)n.update(e,t,r);if(!this.skipRendering||this.renderToScreen){const n=this.fullscreenMaterial;n.inputBuffer=t.texture,n.time+=r*this.timeScale,e.setRenderTarget(this.renderToScreen?null:i),e.render(this.scene,this.camera)}}setSize(e,t){this.fullscreenMaterial.setSize(e,t);for(const i of this.effects)i.setSize(e,t)}initialize(e,t,i){this.renderer=e;for(const r of this.effects)r.initialize(e,t,i);this.updateMaterial(),i!==void 0&&i!==W&&(this.fullscreenMaterial.defines.FRAMEBUFFER_PRECISION_HIGH="1")}dispose(){super.dispose();for(const e of this.effects)e.removeEventListener("change",this.listener),e.dispose()}handleEvent(e){switch(e.type){case"change":this.recompile();break}}};const Er=Y({__name:"effectComposer",props:{screen:{}},setup(e){const t=e,{camera:i,renderer:r,scene:s,sizes:n}=Be();let a=null,o=null;const u=[],h=(S,T,_,y,p)=>{a=new vi(_,{frameBufferType:he,multisampling:8});const b=new it(S,T);a.addPass(b)},v=()=>{u.push(new dr({luminanceThreshold:0,mipmapBlur:!0,luminanceSmoothing:0,intensity:1}))},d=S=>{const T=new It({color:16768426,transparent:!0,fog:!1}),_=new zt(.75,32,32),y=new Ee(_,T);y.frustumCulled=!1,y.matrixAutoUpdate=!1;const p=new xr(S,Ft(t.screen),{blur:!0,decay:.8,exposure:.34});u.push(p)},m=S=>{o=new yr(S,...u),a.addPass(o)};$e(()=>{if(n.width.value){const S=i.value;h(s.value,S,r.value,n.width.value,n.height.value),d(S),v(),m(S)}});const{onAfterLoop:g}=Ue();return g(()=>{a&&a.render()}),(S,T)=>null}}),Br=P("TresPerspectiveCamera",{position:[0,0,30],fov:45,near:.1,far:1e3},null,-1),wr=P("TresAmbientLight",{intensity:.5},null,-1),Rr=["rotation"],br=P("TresPlaneGeometry",{args:[50,50]},null,-1),Ar=Y({__name:"volumetricLightGodray",setup(e){const t=Ne({clearColor:"#050505",antialias:!1,disableRender:!0}),i=Ne({enableDamping:!0}),r=z(null),s=z(null);return le(()=>r,n=>{Vt(()=>{n&&n.value.$refs.tmSceen!==void 0&&(s.value=n.value.$refs.tmSceen)})},{deep:!0}),(n,a)=>(j(),me(D(Nt),Xe(t,{"window-size":""}),{default:Me(()=>[Br,ne(D(Ot),Ht(Lt(i)),null,16),wr,(j(),me(Gt,null,{default:Me(()=>[ne(ni,{ref_key:"screenRef",ref:r},null,512)]),_:1})),P("TresMesh",{position:[0,-5.02,0],receiveShadow:"",rotation:[-Math.PI/2,0,0]},[br,ne(D(qt),{blur:[300,50],resolution:1024,mixBlur:1,mixStrength:100,roughness:1,depthScale:1.2,minDepthThreshold:.4,maxDepthThreshold:1.4,color:"#202020",metalness:.8})],8,Rr),s.value?(j(),me(Er,{key:0,screen:s.value},null,8,["screen"])):kt("",!0)]),_:1},16))}});export{Ar as default};
