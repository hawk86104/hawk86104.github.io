import"./index.BIncEoWp1744075368226.js";import{m as t,e,b as n,k as r,a as o}from"./@tresjs.DYJWvbJh1744075368226.js";import{_ as i}from"./whiteFloorMesh.vue_vue_type_script_setup_true_lang.CBoya4gT1744075368226.js";import{_ as a}from"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.CIZkKrTF1744075368226.js";import{P as c}from"./tweakpane.C0HtAJSg1744075368226.js";import{T as l,m as s,_ as u,u as f,a as p,a$ as v,a1 as d,n as m,t as h,C as x,V as g,l as w,a2 as y,ar as b}from"./three.Cqu7jvck1744075368226.js";import{d as C,a5 as S,a3 as _,w as P,H as F,o as D,u as z,r as j,h as I,j as k,f as N,J as B,e as T,am as R,ak as E,al as M,m as W,F as V}from"./@vue.DK6ok9LJ1744075368226.js";import{_ as H}from"./randomLoading.vue_vue_type_script_setup_true_lang.CtBOLq8Y1744075368226.js";import"./utils.0DhvBX0O1744075368226.js";import"./@fesjs.DVzkLEh_1744075368226.js";import"./vue-router.CdB5-8IK1744075368226.js";import"./lodash-es.BOsRjQhS1744075368226.js";import"./@qlin.q6OWdsQV1744075368226.js";import"./pinia.BwN9Gs_m1744075368226.js";import"./@babel.BPq7uOAK1744075368226.js";import"./@floating-ui.BFjFSAYt1744075368226.js";import"./@juggle.CcBCnTIR1744075368226.js";import"./three-mesh-ui.module.DuejKpER1744075368226.js";import"./postprocessing.BQUpsS8o1744075368226.js";import"./@vueuse.3dpzNfMJ1744075368226.js";import"./whiteFloor.BwqCJp7N1744075368226.js";import"./starLoading.S1P78AfB1744075368226.js";import"./cssLoaders.pCgg1DN31744075368226.js";import"./bubbleLoading.Ec5gYJ241744075368226.js";import"./yangyangLoading.wLt5sO-61744075368226.js";var X=A;function U(){var t=["225wsBzFP","312344SzXvOV","ShaderMaterial","info","  \n                }","exception","prototype","9887800cqujRY","mesh","innerWidth","blit","renderer","console","function *\\( *\\)","counter","camera","input","\n                uniform sampler2D uTexture;\n\n                varying vec2 vUv;\n\n                void main() {\n                    ","\n                varying vec2 vUv;\n\n                void main() {\n                    vUv = uv;\n                    gl_Position = vec4(position.xy, 0.0, 1.0);    \n                }","length","88108BXYnXv","string","4055nibmeU","2384043QjxEQe","uniforms","gl_FragColor = texture2D(uTexture, vUv);","apply","chain","add","gger","value","uTexture","log","2015322pwzfLK","table","constructor","Scene","Mesh","error","628xuRgjV","debu","innerHeight","PerspectiveCamera","test","bind","init","7OQCOEW","while (true) {}","trace","scene","toString","setRenderTarget",'{}.constructor("return this")( )',"material","stateObject","871521CZrSLf","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)"];return(U=function(){return t})()}function A(t,e){var n=U();return A=function(t,e){return n[t-=372]},A(t,e)}!function(){for(var t=A,e=U();;)try{if(528733===parseInt(t(383))/1*(-parseInt(t(414))/2)+-parseInt(t(417))/3+-parseInt(t(376))/4*(-parseInt(t(416))/5)+-parseInt(t(427))/6+-parseInt(t(392))/7+parseInt(t(395))/8*(parseInt(t(394))/9)+parseInt(t(401))/10)break;e.push(e.shift())}catch(n){e.push(e.shift())}}();var L,O=(L=!0,function(t,e){var n=L?function(){if(e){var n=e.apply(t,arguments);return e=null,n}}:function(){};return L=!1,n});!function(){O(this,(function(){var t=A,e=new RegExp(t(407)),n=new RegExp(t(393),"i"),r=Y(t(382));e.test(r+t(421))&&n[t(380)](r+t(410))?Y():r("0")}))()}();var Z,q=(Z=!0,function(t,e){var n=Z?function(){if(e){var n=e.apply(t,arguments);return e=null,n}}:function(){};return Z=!1,n});q(void 0,(function(){var t,e=A;try{t=Function("return (function() "+e(389)+");")()}catch(l){t=window}for(var n=t.console=t[e(406)]||{},r=[e(426),"warn",e(397),e(375),e(399),e(428),e(385)],o=0;o<r[e(413)];o++){var i=q[e(372)][e(400)].bind(q),a=r[o],c=n[a]||i;i.__proto__=q[e(381)](q),i[e(387)]=c[e(387)].bind(c),n[a]=i}}))();class G{constructor(t,e){var n=A;this[n(390)]=new(l[n(396)])({uniforms:{uTexture:{type:"t",value:null}},vertexShader:n(412),fragmentShader:n(411)+(e||n(419))+n(398),depthTest:!1,depthWrite:!1}),this.mesh=new(l[n(374)])(new s(2,2),this[n(390)]),this[n(409)]=new(l[n(379)])(45,window[n(403)]/window[n(378)],1,1e3),this[n(405)]=t,this[n(386)]=new(l[n(373)]),this[n(386)][n(422)](this[n(402)])}[X(404)](t,e){var n=X;this.renderer[n(388)](e),this[n(390)][n(418)][n(425)][n(424)]=t,this.renderer.render(this.scene,this.camera),this[n(405)][n(388)](null)}}function Y(t){function e(t){var n=A;if(typeof t===n(415))return function(t){}[n(372)](n(384))[n(420)](n(408));1!==(""+t/t)[n(413)]||t%20==0?function(){return!0}[n(372)]("debu"+n(423)).call("action"):function(){return!1}[n(372)](n(377)+"gger").apply(n(391)),e(++t)}try{if(t)return e;e(0)}catch(n){}}const Q=tt;!function(){const t=tt,e=K();for(;;)try{if(819472===parseInt(t(442))/1+-parseInt(t(412))/2*(-parseInt(t(417))/3)+-parseInt(t(430))/4+-parseInt(t(429))/5*(-parseInt(t(408))/6)+parseInt(t(388))/7*(parseInt(t(389))/8)+-parseInt(t(387))/9+-parseInt(t(398))/10*(parseInt(t(397))/11))break;e.push(e.shift())}catch(n){e.push(e.shift())}}();const $=function(){let t=!0;return function(e,n){const r=t?function(){if(n){const t=n.apply(e,arguments);return n=null,t}}:function(){};return t=!1,r}}();!function(){$(this,(function(){const t=tt,e=new RegExp(t(443)),n=new RegExp(t(399),"i"),r=nt("init");e.test(r+t(402))&&n[t(434)](r+"input")?nt():r("0")}))()}();const J=function(){let t=!0;return function(e,n){const r=t?function(){if(n){const t=n[tt(407)](e,arguments);return n=null,t}}:function(){};return t=!1,r}}();function K(){const t=["887375bPqqRq","function *\\( *\\)","frontFaceMaterial","traverse","uPrevDepth","gger","blitProgram","ShaderMaterial","WebGLRenderTarget","renderer","camera","uniforms","info","__proto__","trace","add","return (function() ","log","FrontSide","12839373amTHNP","436989UWkpOa","120sKbFMH","clone","call","console","ping","stateObject","while (true) {}","length","1518mrJcgD","59730APwSEq","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","counter","material","chain","resultBuffer","\n                uniform float uCameraFarInverse;\n\n                varying vec3 vWorldSpaceNormal;\n                varying vec3 vCameraSpacePos;\n\n                void main() {\n                    float currentDepth = abs(vCameraSpacePos.z) * uCameraFarInverse;\n                    gl_FragColor = vec4(vWorldSpaceNormal, currentDepth);    \n                }","getFrontFaceTexture","frontFaceRT","apply","78QCCmnb","\n                varying vec3 vCameraSpacePos;\n                varying vec3 vWorldSpaceNormal;\n\n                void main() {\n                    vCameraSpacePos = (modelViewMatrix * vec4(position, 1.0)).xyz;\n                    vWorldSpaceNormal = normalize((modelMatrix * vec4(normal, 0.0)).xyz);\n\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);    \n                }","warn","render","737202DuqINJ","scene","getBackFaceTexture","uSample","pong","3DNdQzp","compute","\n                uniform sampler2D uPrevDepth;\n                uniform float uCameraFarInverse;\n                uniform float uSample;\n                uniform vec2  uScreenSize;\n\n                varying vec3 vWorldSpaceNormal;\n                varying vec3 vCameraSpacePos;\n\n                void main() {\n\n                    vec2 uv = gl_FragCoord.xy / uScreenSize;\n                    float prevRegisteredDepth = texture2D(uPrevDepth, uv).w;\n                    float currentDepth        = abs(vCameraSpacePos.z) * uCameraFarInverse;\n\n                    if(currentDepth <= prevRegisteredDepth) {\n                        discard;\n                    }\n\n                    gl_FragColor = vec4(vWorldSpaceNormal, currentDepth);    \n                }","far","setRenderTarget","clear","FloatType","constructor","action","mesh","string","table","358175RiFfWZ","213172zAjsHJ","\n                varying vec3 vCameraSpacePos;\n                varying vec3 vWorldSpaceNormal;\n\n                void main() {\n                    vCameraSpacePos = (modelViewMatrix * vec4(position, 1.0)).xyz;\n                    vWorldSpaceNormal = normal;\n\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);    \n                }","prototype","texture","test",'{}.constructor("return this")( )',"debu","Mesh","value","toString","bind","DoubleSide"];return(K=function(){return t})()}function tt(t,e){const n=K();return tt=function(t,e){return n[t-=375]},tt(t,e)}J(void 0,(function(){const t=tt,e=function(){const t=tt;let e;try{e=Function(t(384)+t(435)+");")()}catch(n){e=window}return e}(),n=e[t(392)]=e[t(392)]||{},r=[t(385),t(410),t(380),"error","exception",t(428),t(382)];for(let o=0;o<r[t(396)];o++){const e=J[t(424)][t(432)][t(440)](J),i=r[o],a=n[i]||e;e[t(381)]=J.bind(J),e[t(439)]=a[t(439)][t(440)](a),n[i]=e}}))();class et{constructor(t,e,n){const r=tt;this[r(426)]=t[r(390)](),this.camera=e,this[r(377)]=n,this[r(413)]=new u,this[r(413)][r(383)](this.mesh),this[r(448)]=new G(this[r(377)]),this.ping=new f(innerWidth,innerHeight,{type:l[r(423)],depthBuffer:!1,stencilBuffer:!1}),this[r(416)]=new(l[r(376)])(innerWidth,innerHeight,{type:l[r(423)],depthBuffer:!1,stencilBuffer:!1}),this[r(406)]=new(l[r(376)])(innerWidth,innerHeight,{type:l[r(423)]}),this[r(444)]=new(l[r(375)])({uniforms:{uCameraFarInverse:{value:1/this.camera.far}},vertexShader:r(431),fragmentShader:r(404),depthTest:!0,depthWrite:!0,side:l[r(386)]}),this[r(401)]=new(l[r(375)])({uniforms:{uScreenSize:{value:new p(innerWidth,innerHeight)},uPrevDepth:{type:"t",value:this[r(393)][r(433)]},uCameraFarInverse:{value:1/this[r(378)].far},uSample:{value:0}},vertexShader:r(409),fragmentShader:r(419),depthTest:!1,depthWrite:!1,side:l[r(441)]}),this[r(426)][r(445)]((t=>{const e=r;t instanceof l[e(437)]&&(t.material=this[e(401)])}))}[Q(418)](t){const e=Q;this[e(377)][e(421)](this[e(393)]),this.renderer[e(422)](),this[e(377)][e(421)](this[e(416)]),this[e(377)].clear(),this.mesh[e(445)]((t=>{const n=e;t instanceof l[n(437)]&&(t[n(401)]=this[n(401)])})),this[e(401)][e(379)].uCameraFarInverse.value=1/this.camera[e(420)];for(let n=0;n<t;n++){let t=n%2==0?this[e(393)]:this[e(416)],r=n%2==0?this[e(416)]:this.ping;this[e(401)].uniforms[e(446)][e(438)]=t[e(433)],this[e(401)][e(379)][e(415)][e(438)]=n,this.renderer.autoClear=!1,this.renderer[e(421)](r),this[e(377)][e(411)](this.scene,this[e(378)]),this[e(377)].autoClear=!0,this[e(448)].blit(r[e(433)],t)}this[e(403)]=t%2==0?this[e(393)]:this[e(416)],this[e(426)][e(445)]((t=>{const n=e;t instanceof l[n(437)]&&(t[n(401)]=this[n(444)])})),this[e(377)][e(421)](this.frontFaceRT),this[e(377)][e(411)](this[e(413)],this[e(378)])}[Q(414)](){const t=Q;return this[t(403)][t(433)]}[Q(405)](){const t=Q;return this[t(406)][t(433)]}}function nt(t){function e(t){const n=tt;if(typeof t===n(427))return function(t){}[n(424)](n(395)).apply(n(400));1!==(""+t/t).length||t%20==0?function(){return!0}[n(424)](n(436)+n(447))[n(391)](n(425)):function(){return!1}[n(424)](n(436)+n(447))[n(407)](n(394)),e(++t)}try{if(t)return e;e(0)}catch(n){}}const rt=["object"],ot=C({__name:"ssrtGlassMesh",props:{skyBoxTexture:{},modelPath:{},modelName:{},extintionFactor:{default:5},reflectionFactor:{default:1},exposure:{default:0},extintionColor1:{default:"rgb(192,123,25)"},extintionColor2:{default:"rgb(26, 166, 192)"},extintionCol1Random:{type:Boolean,default:!1},extintionCol2Random:{type:Boolean,default:!1}},async setup(o){let i,a;const c=o,{map:l}=([i,a]=S((()=>n({map:c.skyBoxTexture}))),i=await i,a(),i);l.wrapS=v,l.wrapT=v,l.magFilter=d,l.minFilter=d;const{camera:s,renderer:u,scene:f}=t(),b=new m({uniforms:{uSkybox:{type:"t",value:l},uBackFaceBuffer:{type:"t",value:null},uFrontFaceBuffer:{type:"t",value:null},uCameraFarInverse:{value:1/s.value.far},uScreenSizeInv:{value:new p(1/window.innerWidth,1/window.innerHeight)},uCameraPos:{value:new g(0,0,0)},uTime:{value:0},uExtintionColor1:{value:new x("#fff").sub(new x(c.extintionColor1).convertLinearToSRGB())},uExtintionColor2:{value:new x("#fff").sub(new x(c.extintionColor2).convertLinearToSRGB())},uExtintionFactor:{value:c.extintionFactor},uExposure:{value:c.exposure},uReflectionFactor:{value:c.reflectionFactor},uExtinctionFX1:{value:new h(c.extintionCol1Random?1:0,c.extintionCol2Random?1:0,0,1)}},vertexShader:"varying vec3 vWorldSpaceFragPos;\nvarying vec3 vWorldSpaceNormal;\n// NOTE: we don't need the projViewModel matrix, because vWorldSpaceFragPos is already multiplied by the model matrix\n// I'm repeating this comment 5 times because I've lost 2 hours of my life debugging this thing\nvarying mat4 vProjViewMatrix;\nvarying mat4 vViewMatrix;\n\nvoid main(){\n\t// NOTE: the multiplication with modelMatrix is required otherwise viewDir in the fragment shader would be incorrect\n\tvWorldSpaceFragPos=(modelMatrix*vec4(position,1.)).xyz;\n\tvWorldSpaceNormal=normalize((modelMatrix*vec4(normal,0.)).xyz);\n\t\n\tgl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.);\n\tvProjViewMatrix=projectionMatrix*viewMatrix;\n\tvViewMatrix=viewMatrix;\n}",fragmentShader:"uniform sampler2D uSkybox;\nuniform sampler2D uBackFaceBuffer;\nuniform sampler2D uFrontFaceBuffer;\n\nuniform vec3 uExtintionColor1;\nuniform vec3 uExtintionColor2;\nuniform float uExtintionFactor;\nuniform float uExposure;\nuniform float uReflectionFactor;\nuniform vec4 uExtinctionFX1;\n\nuniform float uTime;\n\nuniform vec3 uCameraPos;\nuniform vec2 uScreenSizeInv;\nuniform float uCameraFarInverse;\n\nvarying vec3 vWorldSpaceFragPos;\nvarying vec3 vWorldSpaceNormal;\nvarying mat4 vProjViewMatrix;\nvarying mat4 vViewMatrix;\n\nconst float PI=3.14159265359;\nconst float e=2.7182818284590;\n\nconst float planeSize=3.;\nconst vec3 planeColor=pow(vec3(202./255.,205./255.,185./255.),vec3(3.));\n\nfloat mod289(float x){return x-floor(x*(1./289.))*289.;}\nvec4 mod289(vec4 x){return x-floor(x*(1./289.))*289.;}\nvec4 perm(vec4 x){return mod289(((x*34.)+1.)*x);}\n\nfloat noise(vec3 p){\n\tvec3 a=floor(p);\n\tvec3 d=p-a;\n\td=d*d*(3.-2.*d);\n\t\n\tvec4 b=a.xxyy+vec4(0.,1.,0.,1.);\n\tvec4 k1=perm(b.xyxy);\n\tvec4 k2=perm(k1.xyxy+b.zzww);\n\t\n\tvec4 c=k2+a.zzzz;\n\tvec4 k3=perm(c);\n\tvec4 k4=perm(c+1.);\n\t\n\tvec4 o1=fract(k3*(1./41.));\n\tvec4 o2=fract(k4*(1./41.));\n\t\n\tvec4 o3=o2*d.z+o1*(1.-d.z);\n\tvec2 o4=o3.yw*d.x+o3.xz*(1.-d.x);\n\t\n\treturn o4.y*d.y+o4.x*(1.-d.y);\n}\n\nvec3 acesFilm(const vec3 x){\n\tconst float a=2.51;\n\tconst float b=.03;\n\tconst float c=2.43;\n\tconst float d=.59;\n\tconst float e=.14;\n\treturn clamp((x*(a*x+b))/(x*(c*x+d)+e),0.,1.);\n}\n\n// gets the skybox color from a given view direction\nvec3 getSkyboxColor(vec3 viewDir){\n\t// skybox coordinates\n\tvec2 skyboxUV=vec2(\n\t\t(atan(viewDir.x,viewDir.z)+PI)/(PI*2.),\n\t\t(asin(viewDir.y)+PI*.5)/(PI)\n\t);\n\t\n\tvec3 col=texture2D(uSkybox,skyboxUV).xyz;\n\tcol=pow(col,vec3(2.2));\n\treturn col;\n}\n\nbool refract2(vec3 v,vec3 n,float ni_over_nt,inout vec3 refracted){\n\tvec3 uv=normalize(v);\n\tfloat dt=dot(uv,n);\n\tfloat discriminant=1.-ni_over_nt*ni_over_nt*(1.-dt*dt);\n\tif(discriminant>0.){\n\t\trefracted=ni_over_nt*(v-n*dt)-n*sqrt(discriminant);\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}\n\nvec3 binarySearchHitPoint(vec3 lastP,vec3 hitP,vec3 rayDir){\n\t\n\tfor(int i=0;i<10;i++){\n\t\tvec3 midP=(lastP+hitP)*.5;\n\t\t\n\t\t// project midP in uv space\n\t\tvec4 projCoord=vProjViewMatrix*vec4(midP,1.);\n\t\tprojCoord.xyz/=projCoord.w;\n\t\t\n\t\tvec2 midpNDC=projCoord.xy;\n\t\tvec2 midpUV=midpNDC*.5+.5;\n\t\t\n\t\t// get depth at point\n\t\tvec4 backBuffer=texture2D(uBackFaceBuffer,midpUV);\n\t\tfloat depth=backBuffer.w;\n\t\t\n\t\tfloat midpDepth=abs((vViewMatrix*vec4(midP,1.)).z)*uCameraFarInverse;\n\t\tif(midpDepth>depth){\n\t\t\thitP=midP;\n\t\t}else{\n\t\t\tlastP=midP;\n\t\t}\n\t}\n\t\n\treturn hitP;\n}\n\nvec3 getRefractedColor(vec3 refractionDir,vec3 hitPoint,float refractionIndex){\n\t// move the hitpoint inside the mesh with epsilon\n\thitPoint+=refractionDir*.0001;\n\t\n\t// raymarch!\n\tfloat stepSize=.02;\n\tfloat stepMult=1.5;\n\t\n\tvec3 lastP=hitPoint;\n\tvec3 p=hitPoint;\n\tvec3 hitPNormal;\n\tfloat currStepSize=stepSize;\n\tfloat transmissionDistance=0.;\n\tfor(int i=0;i<20;i++){\n\t\tp+=currStepSize*refractionDir;\n\t\t\n\t\t// project p in uv space\n\t\tvec4 projCoord=vProjViewMatrix*vec4(p,1.);\n\t\tprojCoord.xyz/=projCoord.w;\n\t\t\n\t\tvec2 pNDC=projCoord.xy;\n\t\tvec2 pUV=pNDC*.5+.5;\n\t\t\n\t\t// get depth at point\n\t\tvec4 backBuffer=texture2D(uBackFaceBuffer,pUV);\n\t\tfloat depth=backBuffer.w;\n\t\tvec3 norm=backBuffer.xyz;\n\t\t\n\t\t// get p depth\n\t\tfloat pDepth=abs((vViewMatrix*vec4(p,1.)).z)*uCameraFarInverse;\n\t\t\n\t\tif(pDepth>depth){\n\t\t\t\n\t\t\tvec3 hitp=binarySearchHitPoint(lastP,p,refractionDir);\n\t\t\tp=hitp;\n\t\t\t\n\t\t\t// ************ get the hitpoint normal\n\t\t\tvec4 projCoord=vProjViewMatrix*vec4(p,1.);\n\t\t\tprojCoord.xyz/=projCoord.w;\n\t\t\t\n\t\t\tvec2 pNDC=projCoord.xy;\n\t\t\tvec2 pUV=pNDC*.5+.5;\n\t\t\t\n\t\t\t// get depth at point\n\t\t\thitPNormal=texture2D(uBackFaceBuffer,pUV).xyz;\n\t\t\t// ************ get the hitpoint normal - END\n\t\t\t\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tlastP=p;\n\t\tcurrStepSize*=stepMult;\n\t}\n\t\n\ttransmissionDistance=length(hitPoint-p);\n\t\n\t// ******************** recalc directions\n\tvec3 outward_normal;\n\tvec3 reflected=reflect(refractionDir,hitPNormal);\n\tfloat ni_over_nt;\n\tvec3 refr;\n\t// vec3 refracted;\n\tfloat reflect_prob;\n\tfloat cosine;\n\t\n\tif(dot(refractionDir,hitPNormal)>0.){\n\t\toutward_normal=-hitPNormal;\n\t\tni_over_nt=refractionIndex;\n\t\tcosine=refractionIndex*dot(refractionDir,hitPNormal);\n\t}else{\n\t\toutward_normal=hitPNormal;\n\t\tni_over_nt=1./refractionIndex;\n\t\tcosine=-dot(refractionDir,hitPNormal);\n\t}\n\t\n\t// if (refract2(refractionDir, outward_normal, ni_over_nt, refracted)) {\n\t\tif(refract2(refractionDir,outward_normal,ni_over_nt,refr)){\n\t\t\tfloat r0=(1.-refractionIndex)/(1.+refractionIndex);\n\t\t\tr0*=r0;\n\t\t\treflect_prob=r0+(1.-r0)*pow((1.-cosine),5.);\n\t\t}else{\n\t\t\treflect_prob=1.;\n\t\t}\n\t\t// ******************** recalc directions - END\n\t\t\n\t\t// ******************** get colors\n\t\tvec3 col;\n\t\tvec3 colrefl;\n\t\tvec3 colrefr;\n\t\t// if(refracted.y < 0.0) {\n\t\t\tif(refr.y<0.){\n\t\t\t\t// float t = p.y / abs(refracted.y);\n\t\t\t\t// vec3 planeHitP = p + refracted * t;\n\t\t\t\tfloat t=p.y/abs(refr.y);\n\t\t\t\tvec3 planeHitP=p+refr*t;\n\t\t\t\tif(abs(planeHitP.x)<planeSize&&abs(planeHitP.z)<planeSize){\n\t\t\t\t\tcolrefr=planeColor;\n\t\t\t\t}else{\n\t\t\t\t\t// colrefr = getSkyboxColor(refracted);\n\t\t\t\t\tcolrefr=getSkyboxColor(refr);\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\t// colrefr = getSkyboxColor(refracted);\n\t\t\t\tcolrefr=getSkyboxColor(refr);\n\t\t\t}\n\t\t\t\n\t\t\tif(reflected.y<0.){\n\t\t\t\tfloat t=p.y/abs(reflected.y);\n\t\t\t\tvec3 planeHitP=p+reflected*t;\n\t\t\t\tif(abs(planeHitP.x)<planeSize&&abs(planeHitP.z)<planeSize){\n\t\t\t\t\tcolrefl=planeColor;\n\t\t\t\t}else{\n\t\t\t\t\tcolrefl=getSkyboxColor(reflected);\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tcolrefl=getSkyboxColor(reflected);\n\t\t\t}\n\t\t\t\n\t\t\tcol=colrefl*(reflect_prob*uReflectionFactor)+colrefr*(1.-reflect_prob);\n\t\t\t// ******************** get colors\n\t\t\t\n\t\t\tvec3 transm=vec3(1.);\n\t\t\t// const int steps = 8;\n\t\t\tconst int steps=15;\n\t\t\tfloat step=transmissionDistance/float(steps);\n\t\t\tfloat fc=uExtintionFactor*.07;\n\t\t\t\n\t\t\t// raymarching transmission color\n\t\t\t\n\t\t\t// float noiseStrength = 0.8;\n\t\t\tfloat noiseSpeed=.5;\n\t\t\tfloat noiseTimeSpeed=.5;\n\t\t\t\n\t\t\tfor(int i=0;i<steps;i++){\n\t\t\t\tvec3 np=hitPoint+refractionDir*float(i)*step;\n\t\t\t\t\n\t\t\t\tvec3 nnp=np;\n\t\t\t\tvec3 w=normalize(np-vec3(.75,1.5,0.));\n\t\t\t\tvec3 u=vec3(0.,0.,1.);\n\t\t\t\t// vec3 timeOffset = uTime * normalize(np - vec3(0.75, 1.5, 0.0));\n\t\t\t\tvec3 timeOffset=cos(uTime)*w+sin(uTime)*u;\n\t\t\t\tfloat colorNoiseX=noise(np*noiseSpeed+timeOffset*noiseTimeSpeed);\n\t\t\t\tfloat colorNoiseY=noise(np*noiseSpeed+timeOffset*noiseTimeSpeed+vec3(15.3278,125.19879,0.));\n\t\t\t\tfloat colorNoiseZ=noise(np*noiseSpeed+timeOffset*noiseTimeSpeed+vec3(2.6008,78.19879,543.12993));\n\t\t\t\t\n\t\t\t\tfloat targ=length(nnp*.8*uExtinctionFX1.w-vec3(.75,1.5,0.));\n\t\t\t\tfloat targAperture=.25;\n\t\t\t\t\n\t\t\t\t// wave raymarch\n\t\t\t\tif(uExtinctionFX1.z>.5){\n\t\t\t\t\tnnp=np+sin(np.x*2.5+uTime*1.5)*.3;\n\t\t\t\t\ttarg=nnp.y-.85*uExtinctionFX1.w;\n\t\t\t\t}else{\n\t\t\t\t\tnnp=np+vec3(colorNoiseX,colorNoiseY,colorNoiseZ)*1.05;\n\t\t\t\t\tvec3 diff=nnp-vec3(3.3,4.5,0.);\n\t\t\t\t\tfloat angle=(atan(diff.x,diff.y)+PI)/(PI*2.);\n\t\t\t\t\ttarg=length(diff)+sin(angle*32.*PI+uTime*1.5)*.4;\n\t\t\t\t\ttarg*=.475;\n\t\t\t\t\ttargAperture=.5+colorNoiseX*.75;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// what's the color at np?\n\t\t\t\tvec3 col1=uExtintionColor1;\n\t\t\t\tvec3 col2=uExtintionColor2;\n\t\t\t\tif(uExtinctionFX1.x>.5){\n\t\t\t\t\tcol1=vec3(colorNoiseX,colorNoiseY,colorNoiseZ)*.85;\n\t\t\t\t}\n\t\t\t\tif(uExtinctionFX1.y>.5){\n\t\t\t\t\tcol2=vec3(colorNoiseX,colorNoiseY,colorNoiseZ)*.85;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(targ<1.){\n\t\t\t\t\t\n\t\t\t\t\ttransm*=exp(-step*col2*fc);\n\t\t\t\t\t\n\t\t\t\t}else if(targ>1.&&targ<1.+targAperture){\n\t\t\t\t\tfloat t=(targ-1.)/targAperture;\n\t\t\t\t\t\n\t\t\t\t\ttransm*=exp(-step*(col1*t+col2*(1.-t))*fc);\n\t\t\t\t\t\n\t\t\t\t}else if(targ<(1.+targAperture)*1.85){\n\t\t\t\t\ttransm*=exp(-step*col1*fc);\n\t\t\t\t\t\n\t\t\t\t}else{\n\t\t\t\t\t// transm = (col1) * targAperture;\n\t\t\t\t\t// transm *= exp(-step * col1 * uExtintionFactor);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// return col * uExtintionColor2 * transm;\n\t\t\tcol*=transm;\n\t\t\t\n\t\t\treturn col;\n\t\t}\n\t\t\n\t\tvoid main(){\n\t\t\tvec2 screenUV=gl_FragCoord.xy*uScreenSizeInv;\n\t\t\t\n\t\t\tvec3 viewDir=normalize(vWorldSpaceFragPos-uCameraPos);\n\t\t\tvec3 normal=vWorldSpaceNormal;\n\t\t\tfloat refractionIndex=1.5;\n\t\t\t\n\t\t\tvec3 outward_normal;\n\t\t\tvec3 reflected=reflect(viewDir,normal);\n\t\t\tfloat ni_over_nt;\n\t\t\tvec3 refracted;\n\t\t\tfloat reflect_prob;\n\t\t\tfloat cosine;\n\t\t\t\n\t\t\tif(dot(viewDir,normal)>0.){\n\t\t\t\toutward_normal=-normal;\n\t\t\t\tni_over_nt=refractionIndex;\n\t\t\t\tcosine=refractionIndex*dot(viewDir,normal);\n\t\t\t}else{\n\t\t\t\toutward_normal=normal;\n\t\t\t\tni_over_nt=1./refractionIndex;\n\t\t\t\tcosine=-dot(viewDir,normal);\n\t\t\t}\n\t\t\t\n\t\t\tif(refract2(viewDir,outward_normal,ni_over_nt,refracted)){\n\t\t\t\tfloat r0=(1.-refractionIndex)/(1.+refractionIndex);\n\t\t\t\tr0*=r0;\n\t\t\t\treflect_prob=r0+(1.-r0)*pow((1.-cosine),5.);\n\t\t\t}else{\n\t\t\t\treflect_prob=1.;\n\t\t\t}\n\t\t\t\n\t\t\tvec3 reflectedCol;\n\t\t\tif(reflected.y<0.){\n\t\t\t\tfloat t=vWorldSpaceFragPos.y/abs(reflected.y);\n\t\t\t\tvec3 planeHitP=vWorldSpaceFragPos+reflected*t;\n\t\t\t\tif(abs(planeHitP.x)<planeSize&&abs(planeHitP.z)<planeSize){\n\t\t\t\t\treflectedCol=planeColor;\n\t\t\t\t}else{\n\t\t\t\t\treflectedCol=getSkyboxColor(reflected);\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\treflectedCol=getSkyboxColor(reflected);\n\t\t\t}\n\t\t\t\n\t\t\tvec3 col=reflectedCol*reflect_prob*uReflectionFactor+getRefractedColor(refracted,vWorldSpaceFragPos,refractionIndex)*(1.-reflect_prob);\n\t\t\t// getRefractedColor(normalize(refracted + vec3(0.0, 0.0, 0.0)), vWorldSpaceFragPos) * (1.0 - reflect_prob) * 0.333 +\n\t\t\t// getRefractedColor(normalize(refracted + vec3(0.0, 0.15, 0.0)), vWorldSpaceFragPos) * (1.0 - reflect_prob) * 0.333 +\n\t\t\t// getRefractedColor(normalize(refracted + vec3(0.0, 0.35, 0.0)), vWorldSpaceFragPos) * (1.0 - reflect_prob) * 0.333;\n\t\t\t\n\t\t\t// col = getRefractedColor(refracted, vWorldSpaceFragPos) * (1.0 - reflect_prob);\n\t\t\t// vec3 col = getRefractedColor(refracted, vWorldSpaceFragPos);\n\t\t\t// col = getSkyboxColor(reflected) * reflect_prob * 1.0;\n\t\t\t\n\t\t\t// vec3 col = viewDir;\n\t\t\t// gl_FragColor = vec4(col, 1.0);\n\t\t\t// return;\n\t\t\t\n\t\t\tcol*=pow(2.,uExposure);\n\t\t\tcol=acesFilm(col);\n\t\t\tcol=pow(col,vec3(1./2.2));\n\t\t\t\n\t\t\tgl_FragColor=vec4(col,1.);\n\t\t\t// gl_FragColor = vec4(getSkyboxColor(viewDir), 1.0) * 0.5 + vec4(viewDir * 0.5 + 0.5, 1.0);\n\t\t}"}),{nodes:C}=([i,a]=S((()=>r(c.modelPath,{draco:!0,decoderPath:"./draco/"}))),i=await i,a(),i),j=C.Scene.getObjectByName(c.modelName),I=new et(j,s.value,u.value),k=j?.clone();k?.traverse((t=>{t instanceof w&&(t.material=b,t.material.side=y)}));const{onAfterLoop:N}=e();return N((({elapsed:t})=>{j&&b&&(b.uniforms.uCameraPos.value=s.value.position.clone(),b.uniforms.uTime.value=t,I.compute(6),b.uniforms.uBackFaceBuffer.value=I.getBackFaceTexture(),b.uniforms.uFrontFaceBuffer.value=I.getFrontFaceTexture(),u.value.setRenderTarget(null),u.value.autoClear=!1)})),_((()=>{c.extintionFactor&&(b.uniforms.uExtintionFactor.value=c.extintionFactor),c.reflectionFactor&&(b.uniforms.uReflectionFactor.value=c.reflectionFactor),c.exposure&&(b.uniforms.uExposure.value=c.exposure),c.extintionColor1&&(b.uniforms.uExtintionColor1.value=new x("#fff").sub(new x(c.extintionColor1).convertLinearToSRGB())),c.extintionColor2&&(b.uniforms.uExtintionColor2.value=new x("#fff").sub(new x(c.extintionColor2).convertLinearToSRGB())),c.extintionCol1Random&&(b.uniforms.uExposure.value=c.exposure)})),P((()=>c.extintionCol1Random),(t=>{b.uniforms.uExtinctionFX1.value.x=t?1:0}),{immediate:!0}),P((()=>c.extintionCol2Random),(t=>{b.uniforms.uExtinctionFX1.value.y=t?1:0}),{immediate:!0}),(t,e)=>(D(),F("primitive",{object:z(k)},null,8,rt))}}),it=C({__name:"ssrtGlass",setup(t){const e={clearColor:"#201919",windowSize:!0,toneMapping:b,toneMappingExposure:.8},n=j({size:[20,20],color:"#cbcb96",shadowColor:"#b8b59e",edge:.35}),r=j({extintionFactor:5,reflectionFactor:1,exposure:0,extintionColor1:"rgb(192,123,25)",extintionColor2:"rgb(26, 166, 192)",extintionCol1Random:!1,extintionCol2Random:!1}),l=new c({title:"参数"});return l.addBinding(r,"extintionFactor",{label:"消光系数",min:0,max:10,step:.1}),l.addBinding(r,"reflectionFactor",{label:"反射系数",min:0,max:2,step:.1}),l.addBinding(r,"exposure",{label:"曝光系数",min:-1,max:1,step:.1}),l.addBinding(r,"extintionColor1",{label:"消光颜色一"}),l.addBinding(r,"extintionColor2",{label:"消光颜色二"}),l.addBinding(r,"extintionCol1Random",{label:"随机色1"}),l.addBinding(r,"extintionCol2Random",{label:"随机色2"}),(t,c)=>{const l=I("TresCanvas");return D(),F(V,null,[k(z(H)),k(l,E(M(e)),{default:N((()=>[c[0]||(c[0]=B("TresPerspectiveCamera",{position:[0,8,-13],fov:45,near:.1,far:1e3,"look-at":[0,0,0]},null,-1)),k(z(o),{enableDamping:""}),c[1]||(c[1]=B("TresAmbientLight",{intensity:10},null,-1)),(D(),T(R,null,{default:N((()=>[k(i,E(M(n)),null,16)])),_:1})),(D(),T(R,null,{default:N((()=>[k(ot,W({scale:2},r,{modelPath:"https://opensource.cdn.icegl.cn/model/eCommerce/guanYu.glb",modelName:"statue",skyBoxTexture:"https://opensource.cdn.icegl.cn/images/skyBox/workshop_blur.jpg"}),null,16,["modelPath","skyBoxTexture"])])),_:1})),(D(),T(R,null,{default:N((()=>[k(a,{texture:"https://opensource.cdn.icegl.cn/images/skyBox/workshop_blur.jpg"},null,8,["texture"])])),_:1}))])),_:1},16)],64)}}});export{it as default};
