import{_ as t,t as n,C as e,V as o,T as r,as as a,ai as i}from"./three.VhLXWX0H1735906732968.js";import{e as s,b as c,U as l,c as u}from"./@tresjs.XlmHwCPa1735906732968.js";import"./index.UPa6LjR_1735906732968.js";import{c as f}from"./simplex-noise.jB2HxhHB1735906732968.js";import{C as p}from"./index.QkcmrzFJ1735906732968.js";import{d as h,a4 as m,o as v,D as d,J as g,u as x,r as w,f as y,g as b,j as _,aj as z,ak as j,al as M}from"./@vue.yG49nQHr1735906732968.js";import{_ as I}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.qpDF8Nzl1735906732968.js";import"./@vueuse.HCIFcVWX1735906732968.js";import"./lamina.FAz_PKa51735906732968.js";import"./glsl-tokenizer.toezN8fH1735906732968.js";import"./@amap.goWAqh1c1735906732968.js";import"./glsl-token-descope.C6khap2h1735906732968.js";import"./glsl-token-depth.0xJIdKbe1735906732968.js";import"./glsl-token-scope.G0lA9QQU1735906732968.js";import"./glsl-token-properties.gW0LWn__1735906732968.js";import"./glsl-token-assignments.sOOgJEfw1735906732968.js";import"./glsl-token-string.miFUHfqw1735906732968.js";import"./glsl-token-functions.IhKYVZZJ1735906732968.js";import"./object-hash.YsnKaXvB1735906732968.js";import"./jszip._qOKqgyX1735906732968.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.BVqngsvI1735906732968.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.o8uN-Dam1735906732968.js";import"./three-stdlib.KBM4TZ_N1735906732968.js";import"./@pmndrs.jP0GrZPE1735906732968.js";import"./utils.KsIAVHA91735906732968.js";const A=E;!function(t,n){const e=E,o=F();for(;;)try{if(825921===-parseInt(e(449))/1*(-parseInt(e(431))/2)+parseInt(e(465))/3*(parseInt(e(422))/4)+parseInt(e(408))/5*(-parseInt(e(457))/6)+parseInt(e(447))/7*(parseInt(e(484))/8)+-parseInt(e(475))/9*(parseInt(e(411))/10)+parseInt(e(452))/11+-parseInt(e(420))/12)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[E(471)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){C(this,(function(){const t=E,n=new RegExp(t(478)),e=new RegExp(t(486),"i"),o=O(t(477));n.test(o+t(460))&&e[t(441)](o+t(432))?O():o("0")}))()}();const k=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[E(471)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function F(){const t=["prototype","Vector3","90gJEgyV","stretchesF32","array","chain","call","TresMesh","index","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","3CrpXzC",'{}.constructor("return this")( )',"cos","constructor","__proto__","exception","apply","instances","computeVertexNormals","attributes-orientation","2660652yQvxqY","trace","init","function *\\( *\\)","#000f00","bind","info","attributes-stretch","gger","16HppwTd","debu","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","counter","position","grass","Vector4","TresMeshStandardMaterial","258945ghdIPL","value","toneMapped","10kcncnr","geometry","error","convertSRGBToLinear","stateObject","log","InstancedBufferAttribute","push","action","24064116xHUeTC","side","141044qqdiFi","length","normalize","attributes","TresGroup","Color","attributes-halfRootAngleSin","PlaneGeometry","alphaMap","76436OIwtzU","input","toString","lookAt","table","DoubleSide","console","offsetsF32","uniforms","joints","test","sin","string","halfRootAngleCosF32","set","attributes-position","4361938XffCNz","random","34vzvYZV","TresInstancedBufferGeometry","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","14550646dzlcJo","width","map"];return(F=function(){return t})()}k(void 0,(function(){const t=E;let n;try{n=Function("return (function() "+t(466)+");")()}catch(r){n=window}const e=n[t(437)]=n[t(437)]||{},o=[t(416),"warn",t(481),t(413),t(470),t(435),t(476)];for(let a=0;a<o[t(423)];a++){const n=k[t(468)][t(455)][t(480)](k),r=o[a],i=e[r]||n;n[t(469)]=k[t(480)](k),n.toString=i[t(433)][t(480)](i),e[r]=n}}))();const S=["material"],R=[A(463),A(446),"attributes-uv","attributes-offset",A(474),A(482),A(428),"attributes-halfRootAngleCos"],D=[A(412)],T=[A(421)];function E(t,n){const e=F();return(E=function(t,n){return e[t-=406]})(t,n)}const H=h({__name:A(489),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(i){const l=A;let u,h;const w=([u,h]=m((()=>c({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),u=await u,h(),u),y=i,b=f(Math[l(448)]);function _(t,n){const e=t.x*n.w+t.y*n.z-t.z*n.y+t.w*n.x,o=-t.x*n.z+t.y*n.w+t.z*n.x+t.w*n.y,r=t.x*n.y-t.y*n.x+t.z*n.w+t.w*n.z,i=-t.x*n.x-t.y*n.y-t.z*n.z+t.w*n.w;return new a(e,o,r,i)}function z(t,n){var e=2*b(t/50,n/50);return e+=4*b(t/100,n/100),e+=.2*b(t/10,n/10)}const j=function(n,e){const a=l,i=[],s=[],c=[],u=[],f=[];let p=new(t[a(406)]),h=new(t[a(406)]);const m=-.25;for(let r=0;r<n;r++){const l=Math[a(448)]()*e-e/2,v=Math[a(448)]()*e-e/2,d=z(l,v);i[a(418)](l,d,v);let g=Math.PI-Math[a(448)]()*(2*Math.PI);u[a(418)](Math[a(442)](.5*g)),f.push(Math[a(467)](.5*g));let x=new(t[a(456)])(0,1,0),w=x.x*Math[a(442)](g/2),y=x.y*Math[a(442)](g/2),b=x.z*Math[a(442)](g/2),j=Math.cos(g/2);p.set(w,y,b,j)[a(424)](),g=.5*Math[a(448)]()+m,x=new o(1,0,0),w=x.x*Math[a(442)](g/2),y=x.y*Math[a(442)](g/2),b=x.z*Math[a(442)](g/2),j=Math[a(467)](g/2),h.set(w,y,b,j)[a(424)](),p=_(p,h),g=.5*Math[a(448)]()+m,x=new(t[a(456)])(0,0,1),w=x.x*Math[a(442)](g/2),y=x.y*Math[a(442)](g/2),b=x.z*Math.sin(g/2),j=Math[a(467)](g/2),h[a(445)](w,y,b,j).normalize(),p=_(p,h),s[a(418)](p.x,p.y,p.z,p.w),r<n/3?c.push(1.8*Math[a(448)]()):c[a(418)](Math[a(448)]())}return{offsetsF32:new(t[a(417)])(new Float32Array(i),3),orientationsF32:new r(new Float32Array(s),4),stretchesF32:new r(new Float32Array(c),1),halfRootAngleCosF32:new(t[a(417)])(new Float32Array(f),1),halfRootAngleSinF32:new(t[a(417)])(new Float32Array(u),1)}}(y[l(472)],y[l(453)]),M=new(t[l(429)])(y.bW,y.bH,1,y[l(440)]).translate(0,y.bH/2,0),I=new n(y[l(453)],y.width,32,32);I[l(434)](new(t[l(456)])(0,1,0));const C=I[l(425)][l(488)];for(let t=0;t<C[l(459)][l(423)];t+=3)C.array[t+1]=z(C.array[t],C[l(459)][t+2]);I[l(425)].position.needsUpdate=!0,I[l(473)]();const k=new(p({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(t[l(427)])(.3,.9,0)[l(414)](),bottomColor:new e(0,.2,0)[l(414)]()},l(464),l(451),(n=>{const e=l;n[e(421)]=t[e(436)]})));k[l(454)]=w[l(454)],k[l(430)]=w[l(430)],k[l(410)]=!1;const{onLoop:F}=s();return F((({elapsed:t})=>{const n=l;k[n(439)].time[n(409)]=t/4})),(n,e)=>{const o=l;return v(),d(o(426),null,[g("TresMesh",{material:x(k)},[g(o(450),{index:x(M)[o(463)],"attributes-position":x(M)[o(425)][o(488)],"attributes-uv":x(M)[o(425)].uv,"attributes-offset":x(j)[o(438)],"attributes-orientation":x(j).orientationsF32,"attributes-stretch":x(j)[o(458)],"attributes-halfRootAngleSin":x(j).halfRootAngleSinF32,"attributes-halfRootAngleCos":x(j)[o(444)]},null,8,R)],8,S),g(o(462),{position:[0,0,0],geometry:x(I)},[g(o(407),{color:o(479),side:t[o(436)]},null,8,T)],8,D)])}}});function O(t){function n(t){const e=E;if(typeof t===e(443))return function(t){}.constructor("while (true) {}")[e(471)](e(487));1!==(""+t/t)[e(423)]||t%20==0?function(){return!0}.constructor(e(485)+e(483))[e(461)](e(419)):function(){return!1}[e(468)](e(485)+e(483))[e(471)](e(415)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const U=L;!function(t,n){const e=L,o=q();for(;;)try{if(307566===parseInt(e(169))/1*(-parseInt(e(176))/2)+-parseInt(e(181))/3+parseInt(e(185))/4*(-parseInt(e(155))/5)+parseInt(e(148))/6+parseInt(e(164))/7+parseInt(e(166))/8+parseInt(e(165))/9*(parseInt(e(172))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const P=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(153)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){P(this,(function(){const t=L,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(150),"i"),o=N(t(167));n[t(154)](o+t(151))&&e.test(o+t(157))?N():o("0")}))()}();const V=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(153)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function q(){const t=["stateObject","exception","string","bind","1682277TDtzEo","prototype","return (function() ","gger","1780jQsgcc","length","2266020rdVYNu","grass","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","chain","constructor","apply","test","2020fFcuFv","while (true) {}","input","call","error","console","TresPerspectiveCamera","toString","info","387597bUgmyE","694827iJrsra","4788104UYTzOH","init","debu","523870VrbbCv","table","trace","70cRqlhR","log","warn",'{}.constructor("return this")( )',"2Wwttbm"];return(q=function(){return t})()}function L(t,n){const e=q();return(L=function(t,n){return e[t-=148]})(t,n)}V(void 0,(function(){const t=L,n=function(){const t=L;let n;try{n=Function(t(183)+t(175)+");")()}catch(e){n=window}return n}(),e=n[t(160)]=n[t(160)]||{},o=[t(173),t(174),t(163),t(159),t(178),t(170),t(171)];for(let r=0;r<o.length;r++){const n=V.constructor[t(182)][t(180)](V),a=o[r],i=e[a]||n;n.__proto__=V[t(180)](V),n.toString=i[t(162)].bind(i),e[a]=n}}))();const B=h({__name:U(149),setup(t){const n=w({alpha:!0,toneMapping:i,windowSize:!0,clearColor:6710886}),e=w({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=L;return v(),y(x(u),z(j(n)),{default:b((()=>[o[0]||(o[0]=g(r(161),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),_(x(l),z(j(e)),null,16),(v(),y(M,null,{default:b((()=>[_(H)])),_:1})),(v(),y(M,null,{default:b((()=>[_(x(I),{texture:"https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr"})])),_:1}))])),_:1},16)}}});function N(t){function n(t){const e=L;if(typeof t===e(179))return function(t){}[e(152)](e(156))[e(153)]("counter");1!==(""+t/t)[e(186)]||t%20==0?function(){return!0}.constructor(e(168)+e(184))[e(158)]("action"):function(){return!1}[e(152)](e(168)+e(184))[e(153)](e(177)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{B as default};
