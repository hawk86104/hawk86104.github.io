import{_ as t,V as n,C as e,a0 as o,as as r,T as a,ai as i}from"./three.-z-VOBM71731641201182.js";import{e as s,b as c,U as l,c as u}from"./@tresjs.b88d4FZI1731641201182.js";import"./index.tLw64Kj71731641201182.js";import{a as f}from"./simplex-noise.Yx8GBgKo1731641201182.js";import{C as p}from"./index.PIaASH-_1731641201182.js";import{d as h,a6 as m,o as d,D as v,J as g,u as x,r as y,f as w,g as b,j as _,aj as M,ak as j,al as z}from"./@vue.-THQH3GC1731641201182.js";import{_ as I}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.GCYje4OX1731641201182.js";import"./@vueuse.XeXqlNFe1731641201182.js";import"./lamina.3ZGrDiHb1731641201182.js";import"./glsl-tokenizer.-I4J-fj21731641201182.js";import"./@amap.ZfMFVSXv1731641201182.js";import"./glsl-token-descope.P9Ept0zv1731641201182.js";import"./glsl-token-depth.APdboSd91731641201182.js";import"./glsl-token-scope.z8esgcFI1731641201182.js";import"./glsl-token-properties.cpJoGkbS1731641201182.js";import"./glsl-token-assignments.OiGChP1Y1731641201182.js";import"./glsl-token-string.1iWeuYpa1731641201182.js";import"./glsl-token-functions.02P4zRCe1731641201182.js";import"./object-hash.CXGf2irT1731641201182.js";import"./jszip.KrBayNZW1731641201182.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.gHF6QrZQ1731641201182.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.FiAJlV1-1731641201182.js";import"./three-stdlib.azfEeGDS1731641201182.js";import"./@pmndrs.nMJMDdCC1731641201182.js";import"./utils.rdPePMcG1731641201182.js";const A=C;!function(t,n){const e=C,o=H();for(;;)try{if(551668===parseInt(e(159))/1*(parseInt(e(146))/2)+-parseInt(e(171))/3*(parseInt(e(192))/4)+parseInt(e(197))/5+parseInt(e(133))/6*(-parseInt(e(204))/7)+parseInt(e(132))/8*(parseInt(e(138))/9)+-parseInt(e(165))/10*(parseInt(e(158))/11)+parseInt(e(172))/12)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const R=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(203)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function C(t,n){const e=H();return(C=function(t,n){return e[t-=131]})(t,n)}!function(){R(this,(function(){const t=C,n=new RegExp(t(142)),e=new RegExp(t(178),"i"),o=B(t(169));n[t(190)](o+t(163))&&e[t(190)](o+"input")?B():o("0")}))()}();const k=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(203)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();k(void 0,(function(){const t=C,n=function(){const t=C;let n;try{n=Function(t(145)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n.console=n.console||{},o=["log","warn",t(177),t(147),t(200),"table",t(140)];for(let r=0;r<o[t(201)];r++){const n=k[t(206)][t(134)][t(179)](k),a=o[r],i=e[a]||n;n[t(156)]=k.bind(k),n[t(135)]=i[t(135)][t(179)](i),e[a]=n}}))();const F=[A(184)],S=[A(188),A(164),A(194),A(176),A(154),A(151),"attributes-halfRootAngleSin",A(139)],D=["geometry"],T=[A(149)],E=h({__name:"grass",props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(i){const l=A;let u,h;const y=([u,h]=m((()=>c({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),u=await u,h(),u),w=i,b=f(Math.random);function _(t,n){const e=t.x*n.w+t.y*n.z-t.z*n.y+t.w*n.x,o=-t.x*n.z+t.y*n.w+t.z*n.x+t.w*n.y,a=t.x*n.y-t.y*n.x+t.z*n.w+t.w*n.z,i=-t.x*n.x-t.y*n.y-t.z*n.z+t.w*n.w;return new r(e,o,a,i)}function M(t,n){var e=2*b(t/50,n/50);return e+=4*b(t/100,n/100),e+=.2*b(t/10,n/10)}const j=function(e,o){const i=C,s=[],c=[],l=[],u=[],f=[];let p=new r,h=new(t[i(174)]);const m=-.25;for(let r=0;r<e;r++){const a=Math[i(185)]()*o-o/2,d=Math[i(185)]()*o-o/2,v=M(a,d);s[i(181)](a,v,d);let g=Math.PI-Math[i(185)]()*(2*Math.PI);u[i(181)](Math.sin(.5*g)),f.push(Math[i(186)](.5*g));let x=new n(0,1,0),y=x.x*Math.sin(g/2),w=x.y*Math.sin(g/2),b=x.z*Math.sin(g/2),j=Math[i(186)](g/2);p.set(y,w,b,j)[i(160)](),g=.5*Math.random()+m,x=new(t[i(198)])(1,0,0),y=x.x*Math[i(162)](g/2),w=x.y*Math.sin(g/2),b=x.z*Math[i(162)](g/2),j=Math.cos(g/2),h.set(y,w,b,j)[i(160)](),p=_(p,h),g=.5*Math[i(185)]()+m,x=new(t[i(198)])(0,0,1),y=x.x*Math[i(162)](g/2),w=x.y*Math[i(162)](g/2),b=x.z*Math[i(162)](g/2),j=Math[i(186)](g/2),h.set(y,w,b,j)[i(160)](),p=_(p,h),c[i(181)](p.x,p.y,p.z,p.w),r<e/3?l[i(181)](1.8*Math.random()):l.push(Math[i(185)]())}return{offsetsF32:new a(new Float32Array(s),3),orientationsF32:new(t[i(207)])(new Float32Array(c),4),stretchesF32:new a(new Float32Array(l),1),halfRootAngleCosF32:new(t[i(207)])(new Float32Array(f),1),halfRootAngleSinF32:new(t[i(207)])(new Float32Array(u),1)}}(w.instances,w[l(148)]),z=new(t[l(205)])(w.bW,w.bH,1,w[l(157)]).translate(0,w.bH/2,0),I=new(t[l(205)])(w[l(148)],w.width,32,32);I[l(161)](new n(0,1,0));const R=I[l(183)][l(180)];for(let t=0;t<R.array.length;t+=3)R[l(199)][t+1]=M(R.array[t],R.array[t+2]);I[l(183)][l(180)][l(202)]=!0,I[l(173)]();const k=new(p({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new e(.3,.9,0)[l(136)](),bottomColor:new(t[l(187)])(0,.2,0).convertSRGBToLinear()},l(170),l(144),(n=>{const e=l;n.side=t[e(167)]})));k[l(166)]=y.map,k.alphaMap=y[l(195)],k[l(168)]=!1;const{onLoop:E}=s();return E((({elapsed:t})=>{k[l(189)].time.value=t/4})),(t,n)=>{const e=l;return d(),v(e(141),null,[g(e(150),{material:x(k)},[g("TresInstancedBufferGeometry",{index:x(z)[e(188)],"attributes-position":x(z)[e(183)][e(180)],"attributes-uv":x(z)[e(183)].uv,"attributes-offset":x(j)[e(152)],"attributes-orientation":x(j)[e(131)],"attributes-stretch":x(j)[e(175)],"attributes-halfRootAngleSin":x(j).halfRootAngleSinF32,"attributes-halfRootAngleCos":x(j).halfRootAngleCosF32},null,8,S)],8,F),g(e(150),{position:[0,0,0],geometry:x(I)},[g("TresMeshStandardMaterial",{color:"#000f00",side:o},null,8,T)],8,D)])}}});function B(t){function n(t){const e=C;if(typeof t===e(182))return function(t){}[e(206)](e(193))[e(203)](e(137));1!==(""+t/t)[e(201)]||t%20==0?function(){return!0}.constructor(e(143)+e(196))[e(191)](e(155)):function(){return!1}.constructor(e(143)+e(196))[e(203)](e(153)),n(++t)}try{if(t)return n;n(0)}catch(e){}}function H(){const t=["debu","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","return (function() ","2oHDppA","error","width","side","TresMesh","attributes-stretch","offsetsF32","stateObject","attributes-orientation","action","__proto__","joints","8877VRWiJk","170998BJXsfN","normalize","lookAt","sin","chain","attributes-position","90uwqQoi","map","DoubleSide","toneMapped","init","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","6HtqNKL","9909216UcgRYo","computeVertexNormals","Vector4","stretchesF32","attributes-offset","info","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","bind","position","push","string","attributes","material","random","cos","Color","index","uniforms","test","call","1582532OIKTcd","while (true) {}","attributes-uv","alphaMap","gger","3840315RsSUxY","Vector3","array","exception","length","needsUpdate","apply","7YhTczA","PlaneGeometry","constructor","InstancedBufferAttribute","orientationsF32","24lhEyoZ","3609714UJsrbT","prototype","toString","convertSRGBToLinear","counter","560961KeZRzX","attributes-halfRootAngleCos","trace","TresGroup","function *\\( *\\)"];return(H=function(){return t})()}const L=U;!function(t,n){const e=U,o=P();for(;;)try{if(153544===-parseInt(e(168))/1+-parseInt(e(160))/2+-parseInt(e(181))/3+-parseInt(e(163))/4+-parseInt(e(152))/5*(-parseInt(e(151))/6)+-parseInt(e(180))/7*(-parseInt(e(170))/8)+parseInt(e(186))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[U(165)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){O(this,(function(){const t=U,n=new RegExp(t(149)),e=new RegExp(t(162),"i"),o=N(t(177));n[t(169)](o+t(150))&&e[t(169)](o+t(173))?N():o("0")}))()}();const q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function U(t,n){const e=P();return(U=function(t,n){return e[t-=148]})(t,n)}q(void 0,(function(){const t=U;let n;try{n=Function(t(159)+t(158)+");")()}catch(r){n=window}const e=n[t(171)]=n.console||{},o=[t(148),t(166),t(175),"error","exception",t(178),t(172)];for(let a=0;a<o.length;a++){const n=q[t(179)][t(155)][t(183)](q),r=o[a],i=e[r]||n;n[t(176)]=q.bind(q),n[t(156)]=i[t(156)][t(183)](i),e[r]=n}}))();const G=h({__name:L(182),setup(t){const n=y({alpha:!0,toneMapping:i,windowSize:!0,clearColor:6710886}),e=y({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=U;return d(),w(x(u),M(j(n)),{default:b((()=>[o[0]||(o[0]=g(r(167),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),_(x(l),M(j(e)),null,16),(d(),w(z,null,{default:b((()=>[_(E)])),_:1})),(d(),w(z,null,{default:b((()=>[_(x(I),{texture:r(185)})])),_:1}))])),_:1},16)}}});function P(){const t=["console","trace","input","gger","info","__proto__","init","table","constructor","286041DkTjYU","48636Zouiaj","grass","bind","call","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","4972851XRpGGL","log","function *\\( *\\)","chain","20250IFBqRn","55HQXXOD","counter","stateObject","prototype","toString","string",'{}.constructor("return this")( )',"return (function() ","523532XJyKWF","while (true) {}","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","530568FGsqEg","debu","apply","warn","TresPerspectiveCamera","66363EMrzWq","test","8lhhTRN"];return(P=function(){return t})()}function N(t){function n(t){const e=U;if(typeof t===e(157))return function(t){}[e(179)](e(161)).apply(e(153));1!==(""+t/t).length||t%20==0?function(){return!0}[e(179)](e(164)+"gger")[e(184)]("action"):function(){return!1}[e(179)]("debu"+e(174))[e(165)](e(154)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{G as default};
