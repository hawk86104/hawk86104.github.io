import{e,D as n,o as i}from"./@tresjs.zc7faK4J1743660816268.js";import{n as o,b1 as a,C as r,p as t,a$ as l,a2 as s,ab as u,aT as c,cu as m,cv as f,cw as d,cx as v}from"./three.2wx8FU0g1743660816268.js";import{z as p}from"./three-custom-shader-material.uMc5A1EX1743660816268.js";import{r as g,i as h,s as _}from"./utils.G6Ajo17E1743660816268.js";import{b as y,a as x}from"./buildingsCustomShaderMaterial.hq-IAd4G1743660816268.js";import{d as w,a4 as b,b as j,o as S,H as C,f as O,g as k,N as z,u as B,al as M,j as T,F as P,e as U}from"./@vue.B5PFBfKs1743660816268.js";import{_ as N}from"./roadLight.vue_vue_type_script_setup_true_lang.zEqs2QVr1743660816268.js";import"./postprocessing.ApTwx-211743660816268.js";import"./@vueuse.jtbb8I7w1743660816268.js";import"./@fesjs.9AUNBPBQ1743660816268.js";import"./vue-router.K4ys0Z-O1743660816268.js";import"./lodash-es.IJc9G_SW1743660816268.js";import"./@qlin.o0hjOMCg1743660816268.js";import"./pinia.0dYyFDku1743660816268.js";import"./@floating-ui.HzHndBae1743660816268.js";import"./@juggle.4EyLec-41743660816268.js";import"./three-mesh-bvh.HGLjHqG91743660816268.js";!function(e,n){for(var i=D,o=A();;)try{if(266285===-parseInt(i(147))/1*(-parseInt(i(182))/2)+-parseInt(i(190))/3*(-parseInt(i(144))/4)+-parseInt(i(186))/5+-parseInt(i(155))/6+-parseInt(i(177))/7*(parseInt(i(181))/8)+-parseInt(i(169))/9*(-parseInt(i(159))/10)+parseInt(i(173))/11)break;o.push(o.shift())}catch(a){o.push(o.shift())}}();var W,I=(W=!0,function(e,n){var i=W?function(){if(n){var i=n[D(167)](e,arguments);return n=null,i}}:function(){};return W=!1,i});function A(){var e=["1955840VhCClv","test","toString","console","1452peshwb","depthTest","trace","signalSpeed","log","error","constructor","string","prototype","#00d5ff","return (function() ","fragmentShader","value","2348WPYeUK","fresnelOpacity","bind","2RCZjIJ","__proto__","action","init","blendMode","setValues","input","uniforms","388182jqJRgz","fresnelAmount","debu","hologramOpacity","571810UWTPig","clock","transparent","hologramColor","table","scanlineSize","side","function *\\( *\\)","apply","length","9fCLrCT","enableBlinking","counter","warn","8239913AmptNl",'{}.constructor("return this")( )',"time","hologramBrightness","39319MydTXx","gger","blending","\n      #define STANDARD\n      varying vec3 vViewPosition;\n      #ifdef USE_TRANSMISSION\n      varying vec3 vWorldPosition;\n      #endif\n    \n      varying vec2 vUv;\n      varying vec4 vPos;\n      varying vec3 vNormalW;\n      varying vec3 vPositionW;\n\n      #include <common>\n      #include <uv_pars_vertex>\n      #include <envmap_pars_vertex>\n      #include <color_pars_vertex>\n      #include <fog_pars_vertex>\n      #include <morphtarget_pars_vertex>\n      #include <skinning_pars_vertex>\n      #include <logdepthbuf_pars_vertex>\n      #include <clipping_planes_pars_vertex>\n\n      void main() {\n        \n        #include <uv_vertex>\n        #include <color_vertex>\n        #include <morphcolor_vertex>\n      \n        #if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n      \n          #include <beginnormal_vertex>\n          #include <morphnormal_vertex>\n          #include <skinbase_vertex>\n          #include <skinnormal_vertex>\n          #include <defaultnormal_vertex>\n      \n        #endif\n      \n        #include <begin_vertex>\n        #include <morphtarget_vertex>\n        #include <skinning_vertex>\n        #include <project_vertex>\n        #include <logdepthbuf_vertex>\n        #include <clipping_planes_vertex>\n      \n        #include <worldpos_vertex>\n        #include <envmap_vertex>\n        #include <fog_vertex>\n\n        mat4 modelViewProjectionMatrix = projectionMatrix * modelViewMatrix;\n\n        vUv = uv;\n        vPos = projectionMatrix * modelViewMatrix * vec4( transformed, 1.0 );\n        vPositionW = vec3( vec4( transformed, 1.0 ) * modelMatrix);\n        vNormalW = normalize( vec3( vec4( normal, 0.0 ) * modelMatrix ) );\n        \n        gl_Position = modelViewProjectionMatrix * vec4( transformed, 1.0 );\n\n      }","608ggeVvG","58670vwceoD","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","call","blinkFresnelOnly"];return(A=function(){return e})()}!function(){I(this,(function(){var e=D,n=new RegExp(e(166)),i=new RegExp(e(183),"i"),o=L(e(150));n[e(187)](o+"chain")&&i[e(187)](o+e(153))?L():o("0")}))()}();var V,E=(V=!0,function(e,n){var i=V?function(){if(n){var i=n[D(167)](e,arguments);return n=null,i}}:function(){};return V=!1,i});function D(e,n){var i=A();return D=function(e,n){return i[e-=138]},D(e,n)}E(void 0,(function(){for(var e=D,n=function(){var e,n=D;try{e=Function(n(141)+n(174)+");")()}catch(i){e=window}return e}(),i=n.console=n[e(189)]||{},o=[e(194),e(172),"info",e(195),"exception",e(163),e(192)],a=0;a<o[e(168)];a++){var r=E[e(196)][e(139)][e(146)](E),t=o[a],l=i[t]||r;r[e(148)]=E[e(146)](E),r[e(188)]=l[e(188)].bind(l),i[t]=r}}))();class F extends o{constructor(e={}){var n=D;super(),this.vertexShader=n(180),this[n(142)]=" \n      varying vec2 vUv;\n      varying vec3 vPositionW;\n      varying vec4 vPos;\n      varying vec3 vNormalW;\n      \n      uniform float time;\n      uniform float fresnelOpacity;\n      uniform float scanlineSize;\n      uniform float fresnelAmount;\n      uniform float signalSpeed;\n      uniform float hologramBrightness;\n      uniform float hologramOpacity;\n      uniform bool blinkFresnelOnly;\n      uniform bool enableBlinking;\n      uniform vec3 hologramColor;\n\n      float flicker( float amt, float time ) {return clamp( fract( cos( time ) * 43758.5453123 ), amt, 1.0 );}\n      float random(in float a, in float b) { return fract((cos(dot(vec2(a,b) ,vec2(12.9898,78.233))) * 43758.5453)); }\n\n      void main() {\n        vec2 vCoords = vPos.xy;\n        vCoords /= vPos.w;\n        vCoords = vCoords * 0.5 + 0.5;\n        vec2 myUV = fract( vCoords );\n\n        // Defines hologram main color\n        vec4 hologramColor = vec4(hologramColor, mix(hologramBrightness, vUv.y, 0.5));\n\n        // Add scanlines\n        float scanlines = 10.;\n        scanlines += 20. * sin(time *signalSpeed * 20.8 - myUV.y * 60. * scanlineSize);\n        scanlines *= smoothstep(1.3 * cos(time *signalSpeed + myUV.y * scanlineSize), 0.78, 0.9);\n        scanlines *= max(0.25, sin(time *signalSpeed) * 1.0);        \n        \n        // Scanlines offsets\n        float r = random(vUv.x, vUv.y);\n        float g = random(vUv.y * 20.2, \tvUv.y * .2);\n        float b = random(vUv.y * .9, \tvUv.y * .2);\n\n        // Scanline composition\n        hologramColor += vec4(r*scanlines, b*scanlines, r, 1.0) / 84.;\n        vec4 scanlineMix = mix(vec4(0.0), hologramColor, hologramColor.a);\n\n        // Calculates fresnel\n        vec3 viewDirectionW = normalize(cameraPosition - vPositionW);\n        float fresnelEffect = dot(viewDirectionW, vNormalW) * (1.6 - fresnelOpacity/2.);\n        fresnelEffect = clamp(fresnelAmount - fresnelEffect, 0., fresnelOpacity);\n\n        // Blinkin effect\n        //Suggested by Octano - https://x.com/OtanoDesign?s=20\n        float blinkValue = enableBlinking ? 0.6 - signalSpeed : 1.0;\n        float blink = flicker(blinkValue, time * signalSpeed * .02);\n    \n        // Final shader composition\n        vec3 finalColor;\n\n        if(blinkFresnelOnly){\n          // finalColor = vec3(1.0,1.0,0);\n          finalColor = scanlineMix.rgb + fresnelEffect * blink;\n        }else{\n          finalColor = scanlineMix.rgb * blink + fresnelEffect;\n        }\n\n        gl_FragColor = vec4( finalColor, hologramOpacity);\n\n      }",this[n(154)]={time:new a(0),fresnelOpacity:new a(void 0!==e[n(145)]?e[n(145)]:1),fresnelAmount:new a(void 0!==e[n(156)]?e[n(156)]:.45),scanlineSize:new a(void 0!==e[n(164)]?e[n(164)]:8),hologramBrightness:new a(void 0!==e[n(176)]?e[n(176)]:1),signalSpeed:new a(void 0!==e.signalSpeed?e[n(193)]:1),hologramColor:new a(void 0!==e[n(162)]?new r(e[n(162)]):new r(n(140))),enableBlinking:new a(void 0===e[n(170)]||e[n(170)]),blinkFresnelOnly:new a(void 0===e[n(185)]||e[n(185)]),hologramOpacity:new a(void 0!==e[n(158)]?e[n(158)]:1)},this[n(160)]=new t,this[n(152)](e),this[n(191)]=void 0!==e.depthTest&&e[n(191)],this[n(179)]=void 0!==e[n(151)]?e[n(151)]:l,this[n(161)]=!0,this.side=void 0!==e[n(165)]?e[n(165)]:s}update(){var e=D;this[e(154)][e(175)][e(143)]=this[e(160)].getElapsedTime()}}function L(e){function n(e){var i=D;if(typeof e===i(138))return function(e){}[i(196)]("while (true) {}")[i(167)](i(171));1!==(""+e/e).length||e%20==0?function(){return!0}[i(196)](i(157)+i(178))[i(184)](i(149)):function(){return!1}.constructor(i(157)+i(178))[i(167)]("stateObject"),n(++e)}try{if(e)return n;n(0)}catch(i){}}const R=w({__name:"importantBuildings",props:{group:{}},setup(n){const i=n,o=0,a=0,t=15,s=1.3,c="#e05b0f",m=new F({blendMode:l,hologramBrightness:2.5,side:u});m.uniforms.fresnelAmount.value=o,m.uniforms.scanlineSize.value=t,m.uniforms.signalSpeed.value=s,m.uniforms.fresnelOpacity.value=a,m.uniforms.hologramColor.value=new r(c),m.uniforms.enableBlinking.value=!1,m.depthTest=!0;let f,d,v=null;(()=>{const e=i.group.getObjectByName("02-huanqiujinrongzhongxin_huanqiujinrongzhongxin_0");e.name="环球金融中心",e.material.dispose(),g(e.geometry),e.material=m,f=i.group.getObjectByName("01-shanghaizhongxindasha_shanghaizhongxindasha_0"),f.name="上海中心",f.material.dispose(),g(f.geometry),f.material=m.clone(),f.material.uniforms.hologramColor.value=new r("#006cf9"),f.material.uniforms.fresnelAmount.value=1,f.material.uniforms.scanlineSize.value=2.1,f.material.uniforms.signalSpeed.value=.4,d=i.group.getObjectByName("03-jinmaodasha_jjinmaodasha_0"),d.name="金茂大厦",d.material.dispose(),g(d.geometry),d.material=m.clone(),d.material.uniforms.hologramColor.value=new r("#5e0fe0"),d.material.uniforms.scanlineSize.value=15,d.material.uniforms.signalSpeed.value=.18,v=i.group.getObjectByName("04-dongfangmingzhu_dongfangmingzhu_0"),v.name="东方明珠塔",v.material.dispose(),g(v.geometry),v.material=m.clone(),v.material.uniforms.scanlineSize.value=5,v.material.uniforms.signalSpeed.value=1.3,v.material.uniforms.hologramColor.value=new r("#e00f0f"),v.material.uniforms.fresnelOpacity.value=.1})();const{onLoop:p}=e();return p((()=>{m.update(),f.material.update(),d.material.update(),v.material.update()})),(e,n)=>null}}),G=["object"],q=w({__name:"buildingsMode",async setup(i){let o,a;h();const{scene:t}=([o,a]=b((()=>n("./plugins/digitalCity/model/shanghaiDraco/shanghaiDraco.gltf",{draco:!0,decoderPath:"./draco/"}))),o=await o,a(),o),l=t.clone(),s=j(0);l.traverse((async e=>{if(e.isMesh&&(-1!==e.name.indexOf("Shanghai")||-1!==e.name.indexOf("Object")))if(-1!==e.name.indexOf("Floor"));else if(-1!==e.name.indexOf("River")){const n=await _(e);n.position.set(0,0,1800),e.add(n)}else(e=>{const{geometry:n}=e;n.computeBoundingBox(),n.computeBoundingSphere(),n.computeBoundsTree();const{max:i,min:o}=n.boundingBox,a=new p({baseMaterial:c,vertexShader:y,fragmentShader:x,silent:!0,uniforms:{uMax:{value:i},uMin:{value:o},uBorderWidth:{value:.006},uCircleTime:{value:3},uColor:{value:new r("#005c58")},uOpacity:{value:.8},uLightColor:{value:new r("#990")},uTopColor:{value:new r("#888800")},uTime:s,uGradient:{value:!0}},depthWrite:!0,depthTest:!0,transparent:!0,side:u});e.material.dispose(),e.material=a})(e),(e=>{const n=new m(e.geometry,1e3);let i=(new f).fromEdgesGeometry(n);i.computeBoundsTree();let o=new d({color:new r("#000"),linewidth:.8,opacity:.6,transparent:!0,depthWrite:!0,depthTest:!0});o.resolution.set(window.innerWidth,window.innerHeight),e.add(new v(i,o))})(e)}));const{onLoop:g}=e();return g((({delta:e})=>{s.value+=e})),(e,n)=>(S(),C(P,null,[(S(),O(M,null,{default:k((()=>[z("primitive",{object:B(l),position:[1,0,1],"cast-shadow":"","receive-shadow":""},null,8,G)])),_:1})),T(R,{group:B(l)},null,8,["group"])],64))}}),H=w({__name:"city2",setup:e=>(e,n)=>{const o=U("TresCanvas");return S(),O(o,{shadows:"","window-size":"",clearColor:"#333"},{default:k((()=>[n[0]||(n[0]=z("TresPerspectiveCamera",{position:[.5,2,1.5],fov:45,near:.1,far:1e5},null,-1)),T(B(i)),n[1]||(n[1]=z("TresAmbientLight",{color:"#ffffff"},null,-1)),n[2]||(n[2]=z("TresDirectionalLight",{position:[0,3,3],intensity:2,color:"#ffffff","cast-shadow":"","shadow-mapSize-width":1024,"shadow-mapSize-height":1024},null,-1)),(S(),O(M,null,{default:k((()=>[T(q)])),_:1})),(S(),O(M,null,{default:k((()=>[T(N,{color:"#ffffff",radius:1,speed:1,geoJson:"plugins/digitalCity/geojson/secondarySmall.geojson","rotation-y":1.3826597599330712,scale:.001025905404044292,position:[-1.877460474821603,.01,-1.5464791950519081]})])),_:1})),n[3]||(n[3]=z("TresGridHelper",{args:[6,10],position:[0,0,0]},null,-1))])),_:1})}});export{H as default};
