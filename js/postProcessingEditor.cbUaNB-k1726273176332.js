import{p as t,U as n,z as e,Y as o}from"./@tresjs.BFyWuCYn1726273176332.js";import{_ as r,V as a,at as s,i,$ as c,O as l,b6 as u,cp as v}from"./three.874nNzAX1726273176332.js";import{P as f}from"./tweakpane.yHWGBmom1726273176332.js";import{d as p,a4 as d,e as m,o as g,f as x,g as h,L as y,j as I,u as b,aj as _,ak as S,al as U,m as w}from"./@vue.JNsx1iN61726273176332.js";import{_ as P}from"./@fesjs.Le0G27v81726273176332.js";import"./@vueuse.NxhkGURn1726273176332.js";import"./vue-router.QsvKvlu81726273176332.js";import"./lodash-es.kYt-_xTG1726273176332.js";import"./@qlin.yHhFDldE1726273176332.js";import"./pinia.sTdGQtra1726273176332.js";import"./@floating-ui.BPbuo5Gx1726273176332.js";import"./@juggle.7yjBMqoW1726273176332.js";!function(t,n){const e=L,o=A();for(;;)try{if(737219===-parseInt(e(434))/1+parseInt(e(457))/2*(parseInt(e(422))/3)+-parseInt(e(408))/4+-parseInt(e(441))/5+-parseInt(e(407))/6+-parseInt(e(443))/7+parseInt(e(448))/8*(parseInt(e(462))/9))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const D=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(403)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){D(this,(function(){const t=L,n=new RegExp(t(404)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=C(t(411));n.test(o+"chain")&&e[t(431)](o+t(446))?C():o("0")}))()}();const E=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(403)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function A(){const t=["debu","4938423QZWtoy","onerror","index","input","replace","8CzVAEz","exec","string","type","now","table","v3v","gger","warn","762120fEdZDt","onload",'Shader "',"random","while (true) {}","37551123iziPwG","open","message","return (function() ","apply","function *\\( *\\)",'{}.constructor("return this")( )',"console","3979272yaXJJt","4856132hdpGTp","Texture","name","init","counter","__proto__","get","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","Matrix2","call","ShaderMaterial","Vector2","value","WagnerLoadShaderException","3pVKKbm","Vector4","prototype","lastIndex","Vector3","log","stateObject",'" load was aborted.',"Matrix4","test","action","toString","270016qfZObT","length","bind","onabort","constructor","send","info","4817190oYIekQ"];return(A=function(){return t})()}E(void 0,(function(){const t=L;let n;try{n=Function(t(402)+t(405)+");")()}catch(r){n=window}const e=n[t(406)]=n[t(406)]||{},o=[t(427),t(456),t(440),"error","exception",t(453),"trace"];for(let a=0;a<o[t(435)];a++){const n=E[t(438)][t(424)].bind(E),r=o[a],s=e[r]||n;n[t(413)]=E[t(436)](E),n.toString=s[t(433)].bind(s),e[r]=n}}))();function M(t,n,e){if("object"!=typeof t||null===t)return t;const o=Array.isArray(t)?[]:{};for(const r in t)t.hasOwnProperty(r)&&(o[r]=M(t[r])),r==n&&(o[n]=e);return o}function L(t,n){const e=A();return(L=function(t,n){return e[t-=400]})(t,n)}function C(t){function n(t){const e=L;if(typeof t===e(450))return function(t){}.constructor(e(461))[e(403)](e(412));1!==(""+t/t).length||t%20==0?function(){return!0}[e(438)]("debu"+e(455))[e(417)](e(432)):function(){return!1}[e(438)](e(442)+e(455))[e(403)](e(428)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const z=N;!function(t,n){const e=N,o=R();for(;;)try{if(719389===parseInt(e(363))/1*(parseInt(e(451))/2)+-parseInt(e(456))/3+-parseInt(e(359))/4*(parseInt(e(411))/5)+-parseInt(e(392))/6*(-parseInt(e(366))/7)+parseInt(e(375))/8*(parseInt(e(393))/9)+parseInt(e(418))/10+parseInt(e(387))/11*(-parseInt(e(405))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const F=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){F(this,(function(){const t=N,n=new RegExp(t(385)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=j(t(452));n.test(o+t(390))&&e[t(450)](o+t(369))?j():o("0")}))()}();const T=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[N(454)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function N(t,n){const e=R();return(N=function(t,n){return e[t-=359]})(t,n)}function R(){const t=["setRenderTarget","add","CopyPass","11896220lpgsHi","LinearFilter","camera","onWindowResize","useRGBA","swapBuffers","string","Mesh","front","write","debu","length","resolution","info",'{}.constructor("return this")( )',"counter","exception","constructor","quad","Pass","now","tInput","params","stateObject","scene","stencilBuffer","read","Stack","table","time","console","ShaderMaterial","test","2809562TjRAhF","init","render","apply","loadShadervf","2651064ojTKzV","innerWidth","Scene","WebGLRenderTarget","4IAqOaP","gger","getOfflineTexture","setSize","1FUZCFW","removePass","material","255206miuFkj","passItems","RGBFormat","input","addPass","warn","scale","clone","wrapS","6605512dlvunJ","trace","startTime","height","RGBAFormat","prototype","settings","far","uniforms","return (function() ","function *\\( *\\)","call","47443CRooWh","width","toString","chain","passes","132pNuWWH","9xjMuFW","copyPass","error","uuid","texture","bind","ClampToEdgeWrapping","magFilter","Reset","minFilter","shader","renderer","5196RRDUWb","projectionMatrix","PlaneGeometry","value","__proto__","back","3757810pRLpoE","log","UnsignedByteType","set"];return(R=function(){return t})()}T(void 0,(function(){const t=N,n=function(){const t=N;let n;try{n=Function(t(384)+t(432)+");")()}catch(e){n=window}return n}(),e=n[t(448)]=n[t(448)]||{},o=[t(412),t(371),t(431),t(395),t(434),t(446),t(376)];for(let r=0;r<o[t(429)];r++){const n=T[t(435)][t(380)].bind(T),a=o[r],s=e[a]||n;n[t(409)]=T[t(398)](T),n[t(389)]=s.toString.bind(s),e[a]=n}}))();class G{constructor(t,n){const e=N;this[e(388)]=1,this.height=1,this[e(381)]=n||{},this[e(422)]=this[e(381)][e(422)]||!1,this[e(404)]=t,this[e(394)]=this.CopyPass(this[e(381)]),this.scene=new(r[e(458)]),this[e(436)]=new(r[e(425)])(new(r[e(407)])(1,1),new c),this[e(442)][e(416)](this[e(436)]),this[e(420)]=new l(1,1,1,1,-1e4,1e4),this.front=new(r[e(459)])(1,1,{minFilter:void 0!==this[e(381)][e(402)]?this[e(381)][e(402)]:r[e(419)],magFilter:void 0!==this[e(381)][e(400)]?this[e(381)][e(400)]:r[e(419)],wrapS:void 0!==this.settings[e(374)]?this[e(381)][e(374)]:r[e(399)],wrapT:void 0!==this[e(381)].wrapT?this[e(381)].wrapT:r[e(399)],format:this[e(422)]?u:r[e(368)],type:void 0!==this.settings.type?this[e(381)].type:r[e(413)],stencilBuffer:void 0===this[e(381)][e(443)]||this[e(381)].stencilBuffer}),this.back=this[e(426)][e(373)](),this[e(377)]=Date[e(438)](),this[e(391)]={},this[e(445)]={passItems:[],passes:[]}}[z(370)](t,n,e,o){const r=z;this.loadShadervf(n);const a={shaderName:t,params:e,uuid:o,shader:this[r(403)]};this.Stack[r(367)].push(a)}[z(364)](t){const n=z;for(let e=this.Stack[n(367)].length-1;e>=0;e--)this[n(445)][n(367)][e][n(396)]===parseInt(t)&&this.Stack[n(367)].splice(e,1);console[n(412)](this.Stack[n(367)])}[z(417)](){const t=z;this[t(437)][t(386)](this);return this[t(455)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[z(455)](t){const n=z;return this[n(403)]=function(t,n){const e=L,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,c=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,l={sampler2D:{type:"t",value:()=>new(r[L(409)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[L(419)])},vec3:{type:"v3",value:()=>new a},vec4:{type:"v4",value:()=>new s},bvec2:{type:"v2",value:()=>new(r[L(419)])},bvec3:{type:"v3",value:()=>new(r[L(426)])},bvec4:{type:"v4",value:()=>new(r[L(423)])},ivec2:{type:"v2",value:()=>new(r[L(419)])},ivec3:{type:"v3",value:()=>new a},ivec4:{type:"v4",value:()=>new(r[L(423)])},mat2:{type:"v2",value:()=>new(r[L(416)])},mat3:{type:"v3",value:()=>new i},mat4:{type:"v4",value:()=>new(r[L(430)])}},u={float:{type:"fv",value:()=>[]},vec3:{type:e(454),value:()=>[]}};let v;const f={resolution:{type:"v2",value:new(r[e(419)])(1,1),default:!0},time:{type:"f",value:Date[e(452)](),default:!0},tInput:{type:"t",value:new(r[e(409)]),default:!0}};let p,d;for(;null!==(v=o[e(449)](n));)v[e(445)]===o[e(425)]&&o.lastIndex++,p=v[1],d=v[2],f[d]={type:l[p][e(451)],value:l[p][e(420)]()};for(;null!==(v=c.exec(n));)v.index===o[e(425)]&&o.lastIndex++,p=v[1],d=v[2],v[3],f[d]={type:u[p][e(451)],value:u[p][e(420)]()};return new(r[e(418)])({uniforms:f,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}("varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }",t),this[n(403)]}[z(437)](t){const n=z;this[n(403)]=null,this[n(440)]={}}[z(401)](){const t=z;this[t(444)]=this[t(426)],this[t(427)]=this[t(410)]}[z(421)](t,n){const e=z,o=window[e(457)],r=window.innerHeight;t[e(362)](1*o,1*r),n[e(406)].makePerspective(70,o/r,n.near,n[e(382)]),this.setSize(o,r);return this[e(361)](o,r,!0)}[z(362)](t,n){const e=z;this.width=t,this[e(378)]=n,this[e(420)][e(406)].makeOrthographic(t/-2,t/2,n/2,n/-2,this[e(420)].near,this.camera[e(382)]),this[e(436)][e(372)][e(414)](t,n,1),this[e(426)].setSize(t,n),this[e(410)].setSize(t,n)}[z(361)](t,n,e){const o=z;return new(r[o(459)])(t,n,{minFilter:r[o(419)],magFilter:r[o(419)],format:e?r[o(379)]:r[o(368)]})}[z(453)](t,n,e,o){const r=z;this[r(404)].setRenderTarget(this[r(427)]),this[r(404)][r(453)](t,n),o||this.swapBuffers()}[z(423)](){const t=z,n=this[t(427)];this.write=this[t(444)],this[t(444)]=n}pass(){const t=z;for(let n=0;n<this[t(445)][t(367)][t(429)];n++){const e=this[t(445)][t(367)][n][t(403)],o=this[t(445)][t(367)][n].params;if(this[t(404)][t(415)](this[t(427)]),e instanceof r[t(449)]){this[t(436)][t(365)]=e,this[t(436)][t(365)][t(383)][t(439)][t(408)]=this.read[t(397)],this[t(436)][t(365)][t(383)][t(430)][t(408)][t(414)](this[t(388)],this[t(378)]),this.quad[t(365)].uniforms[t(447)][t(408)]=.001*(Date[t(438)]()-this.startTime);for(const n in o)this.quad[t(365)][t(383)][n][t(408)]=o[n];this[t(404)][t(453)](this.scene,this[t(420)]),this[t(423)]()}}}toScreen(t,n){const e=z;this.renderer[e(415)](null),this[e(436)].material=this[e(394)],this[e(436)][e(365)][e(383)].tInput[e(408)]=this[e(444)][e(397)],this[e(436)].material[e(383)][e(430)][e(408)].set(this[e(388)],this[e(378)]),this[e(404)].render(this.scene,this[e(420)])}}function j(t){function n(t){const e=N;if(typeof t===e(424))return function(t){}[e(435)]("while (true) {}").apply(e(433));1!==(""+t/t)[e(429)]||t%20==0?function(){return!0}[e(435)](e(428)+e(360)).call("action"):function(){return!1}[e(435)](e(428)+e(360))[e(454)](e(441)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const B="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",V=W;!function(t,n){const e=W,o=O();for(;;)try{if(906347===parseInt(e(418))/1*(parseInt(e(471))/2)+-parseInt(e(443))/3+parseInt(e(480))/4*(parseInt(e(451))/5)+-parseInt(e(492))/6+-parseInt(e(427))/7*(-parseInt(e(448))/8)+-parseInt(e(454))/9*(parseInt(e(467))/10)+parseInt(e(474))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const k=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[W(450)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){k(this,(function(){const t=W,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(435),"i"),o=X("init");n[t(426)](o+t(464))&&e.test(o+t(466))?X():o("0")}))()}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[W(450)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function O(){const t=["MeshPhongMaterial","autoClearColor","addPass","map","11960jJhnns","CGAPass","apply","3703695XQwoaS","call","keys","4491myZpGo","addBlade","InvertPass","CIRCULARPass","value","exception","text","addButton","gger","BufferGeometry","chain","Reset","input","27010VudVXE","change","removePass","SOBELPass","2134942fpCNfA","plugins/postProcessing/image/1324.jpg","constructor","31531599ddzoXi","split","random","后处理类型","新增通道","click","4wIRTrD","target","console","plugins/postProcessing/image/1324-normal.jpg","debu","log","values","FREICHENPass","移除~","onWindowResize","stateObject","BoxGeometry","9647472nuZatN","castShadow","push","DOTPass","render","receiveShadow","length","1qjCuls","关闭通道","Mesh","error","Vector2",'{}.constructor("return this")( )',"postProcessing","trace","test","4340LTHfhn","SNOISEPass","material","FXAAPass","toString","bind","VIGNETTE2Pass","action","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","while (true) {}","info","toScreen","table","POISSONPass","string","translate","5218683MqnadL"];return(O=function(){return t})()}function W(t,n){const e=O();return(W=function(t,n){return e[t-=418]})(t,n)}H(void 0,(function(){const t=W,n=function(){const t=W;let n;try{n=Function("return (function() "+t(423)+");")()}catch(e){n=window}return n}(),e=n[t(482)]=n[t(482)]||{},o=[t(485),"warn",t(437),t(421),t(459),t(439),t(425)];for(let r=0;r<o[t(498)];r++){const n=H.constructor.prototype[t(432)](H),a=o[r],s=e[a]||n;n.__proto__=H.bind(H),n[t(431)]=s[t(431)].bind(s),e[a]=n}}))();function X(t){function n(t){const e=W;if(typeof t===e(441))return function(t){}[e(473)](e(436))[e(450)]("counter");1!==(""+t/t)[e(498)]||t%20==0?function(){return!0}[e(473)](e(484)+e(462))[e(452)](e(434)):function(){return!1}[e(473)](e(484)+"gger")[e(450)](e(490)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const q=P(p({__name:V(424),async setup(o){const a=V;let s,i;const{camera:c,renderer:l,scene:u,sizes:p}=t();for(var m=new(r[a(463)]),g=[],x=0;x<100;x++){var h=new(r[a(491)])(100,100,100);h[a(442)](1500*Math[a(476)](),1500*Math[a(476)](),1500*Math[a(476)]()),g[a(494)](h)}m=v(g);const y=([s,i]=d((()=>e({map:a(472)}))),s=await s,i(),s),I=([s,i]=d((()=>e({map:a(483)}))),s=await s,i(),s);var b=new(r[a(444)])({map:y[a(447)],normalMap:I[a(447)],normalScale:new(r[a(422)])(.8,-.8),shininess:100}),_=new(r[a(420)])(m,b);_[a(493)]=!0,_[a(497)]=!0,u[a(458)].add(_);const S=new G(l[a(458)],{useRGBA:!0}),U=new f;let w=null,P=[{text:a(456),value:{InvertPass:B}},{text:a(430),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:"SEPIAPass",value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:a(428),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:"BOXBLURPass",value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:"DENOISEPass",value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:a(449),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:I[a(447)]}}},{text:a(470),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:"RGBPass",value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:a(495),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:a(457),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:a(440),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:"VIGNETTE1Pass",value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:a(433),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:a(487),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:"TOONPass",value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],D="InvertPass",E=B,A=null;U[a(455)]({view:"list",label:a(477),options:P,value:""}).on(a(468),(t=>{w=t[a(458)]}));const L=U.addButton({title:"新增",label:a(478)});let C=0;L.on("click",(t=>{const n=a;D=Object[n(453)](w)[0],E=Object[n(486)](w)[0],A=Object[n(486)](w)[1];let e=C++,o=U.addFolder({title:D});for(const a in A){let t=A[a];o.addBlade({view:n(460),label:a,parse:t=>String(t),value:t})}o[n(461)]({title:n(488)+e,label:n(419)}).on(n(479),(t=>{const e=n;let o=t[e(481)].title[e(475)]("~")[1];S[e(469)](o)})).on("click",(()=>{o.dispose()}));let r=M(A,t[n(481)].label,t[n(458)]);S[n(446)](D,E,r,e)})),S[a(489)](l[a(458)],c[a(458)]);const{onLoop:z}=n();return z((({delta:t})=>{const n=a;_&&(l[n(458)][n(445)]=!0,S[n(465)](),_[n(429)]=b,S[n(496)](u[n(458)],c[n(458)]),S.pass(),S[n(438)](u[n(458)],c[n(458)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),Z=et;!function(t,n){const e=et,o=tt();for(;;)try{if(565987===parseInt(e(429))/1*(parseInt(e(417))/2)+parseInt(e(441))/3+parseInt(e(426))/4+-parseInt(e(411))/5*(-parseInt(e(412))/6)+parseInt(e(410))/7+-parseInt(e(435))/8*(parseInt(e(447))/9)+parseInt(e(434))/10*(-parseInt(e(442))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const $=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){$(this,(function(){const t=et,n=new RegExp("function *\\( *\\)"),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=ot("init");n[t(436)](o+t(422))&&e[t(436)](o+t(428))?ot():o("0")}))()}();const J=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[et(423)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();J(void 0,(function(){const t=et;let n;try{n=Function("return (function() "+t(414)+");")()}catch(r){n=window}const e=n[t(431)]=n[t(431)]||{},o=[t(448),t(413),t(418),t(425),t(449),t(439),"trace"];for(let a=0;a<o[t(427)];a++){const n=J[t(424)][t(438)][t(432)](J),r=o[a],s=e[r]||n;n[t(437)]=J[t(432)](J),n.toString=s.toString.bind(s),e[r]=n}}))();const K={ref:"perspectiveCameraRef",position:[600,850,-1500],fov:45,near:.1,far:1e5},Q=y(Z(430),{color:Z(443),intensity:2},null,-1),Y=y(Z(420),{position:[100,100,0],intensity:2,color:Z(443)},null,-1);function tt(){const t=["5458405JWMjwy","6RkKCrk","warn",'{}.constructor("return this")( )',"counter","stateObject","1128878AQBdZM","info","manual","TresDirectionalLight","debu","chain","apply","constructor","error","750968KEVAmj","length","input","1sCDApm","TresAmbientLight","console","bind","gger","3490HiEFiN","8063872HjDgPM","test","__proto__","prototype","table","string","1278684fSSmCp","57299madRav","#ffffff","TresPerspectiveCamera","TresCanvas","action","9moxhoG","log","exception","7852754MaCMQs"];return(tt=function(){return t})()}const nt=p({__name:"postProcessingEditor",setup(t){const e=Z,r={clearColor:"#000000",shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(419)},a={autoRotate:!0,enableDamping:!0},{onLoop:s}=n();return s((({delta:t})=>{})),(t,n)=>{const s=e,i=m(s(445));return g(),x(i,w(r,{"window-size":""}),{default:h((()=>[y(s(444),K,null,512),I(b(o),_(S(a)),null,16),Q,Y,(g(),x(U,null,{default:h((()=>[I(q)])),_:1}))])),_:1},16)}}});function et(t,n){const e=tt();return(et=function(t,n){return e[t-=410]})(t,n)}function ot(t){function n(t){const e=et;if(typeof t===e(440))return function(t){}[e(424)]("while (true) {}")[e(423)](e(415));1!==(""+t/t)[e(427)]||t%20==0?function(){return!0}[e(424)](e(421)+e(433)).call(e(446)):function(){return!1}[e(424)]("debu"+e(433))[e(423)](e(416)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{nt as default};
