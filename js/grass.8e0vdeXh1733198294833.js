import{_ as t,t as n,C as e,a0 as o,T as r,ai as a}from"./three.8iJMi2lU1733198294833.js";import{e as i,b as s,U as c,c as l}from"./@tresjs.sklxXn0u1733198294833.js";import"./index.judEBZXv1733198294833.js";import{a as u}from"./simplex-noise.Yx8GBgKo1733198294833.js";import{C as f}from"./index.8Rx_x_Ij1733198294833.js";import{d as p,a6 as h,o as m,D as v,J as d,u as g,r as x,f as y,g as w,j as b,aj as _,ak as M,al as j}from"./@vue.-THQH3GC1733198294833.js";import{_ as z}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.wgbGwaaC1733198294833.js";import"./@vueuse.N_fQXUYA1733198294833.js";import"./lamina.GvZDVWM61733198294833.js";import"./glsl-tokenizer.7tkRo9R51733198294833.js";import"./@amap.DgFRMjnW1733198294833.js";import"./glsl-token-descope.qECHOTlR1733198294833.js";import"./glsl-token-depth.MrkiT5Ml1733198294833.js";import"./glsl-token-scope._wYnQZ581733198294833.js";import"./glsl-token-properties.ZDsvdWRh1733198294833.js";import"./glsl-token-assignments.ypFygMMN1733198294833.js";import"./glsl-token-string.0S-ITOcx1733198294833.js";import"./glsl-token-functions.GuL0xH_91733198294833.js";import"./object-hash.GOIeDp-W1733198294833.js";import"./jszip.eQOVOH091733198294833.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.RffuWbEl1733198294833.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.HHU8koHR1733198294833.js";import"./three-stdlib.IR1PgtX51733198294833.js";import"./@pmndrs.D5ZkFGQo1733198294833.js";import"./utils.Fl38vYlE1733198294833.js";const A=E;!function(t,n){const e=E,o=C();for(;;)try{if(775349===-parseInt(e(308))/1+-parseInt(e(316))/2+parseInt(e(310))/3+parseInt(e(302))/4*(parseInt(e(306))/5)+-parseInt(e(318))/6+parseInt(e(344))/7+parseInt(e(352))/8*(parseInt(e(301))/9))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const I=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function C(){const t=["string",'{}.constructor("return this")( )',"joints","PlaneGeometry","width","call","attributes-halfRootAngleCos","Color","chain","grass","console","time","input","Vector4","lookAt","TresMesh","debu","3515526GPLwok","length","push","toneMapped","halfRootAngleSinF32","attributes","Vector3","exception","8iNJBDi","__proto__","apply","instances","map","sin","orientationsF32","attributes-offset","position","uniforms","side","TresMeshStandardMaterial","error","value","bind","geometry","set","log","normalize","function *\\( *\\)","table","attributes-orientation","gger","return (function() ","toString","computeVertexNormals","InstancedBufferAttribute","needsUpdate","DoubleSide","19588815Rwsiod","2728GkWEzy","array","random","cos","4770IZBEKr","constructor","972746urXUxt","#000f00","1128957uodYUn","halfRootAngleCosF32","stateObject","convertSRGBToLinear","TresGroup","offsetsF32","2815056VxcEyq","stretchesF32","3300462DDGMWP","init","alphaMap","warn","info","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","attributes-uv","test","index"];return(C=function(){return t})()}!function(){I(this,(function(){const t=E,n=new RegExp(t(291)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=T(t(319));n[t(325)](o+t(335))&&e[t(325)](o+t(339))?T():o("0")}))()}();const k=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[E(354)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();k(void 0,(function(){const t=E;let n;try{n=Function(t(295)+t(328)+");")()}catch(r){n=window}const e=n[t(337)]=n[t(337)]||{},o=[t(289),t(321),t(322),t(284),t(351),t(292),"trace"];for(let a=0;a<o[t(345)];a++){const n=k[t(307)].prototype[t(286)](k),r=o[a],i=e[r]||n;n[t(353)]=k[t(286)](k),n[t(296)]=i.toString[t(286)](i),e[r]=n}}))();const D=["material"],F=[A(326),"attributes-position",A(324),A(279),A(293),"attributes-stretch","attributes-halfRootAngleSin",A(333)],R=[A(287)],S=[A(282)];function E(t,n){const e=C();return(E=function(t,n){return e[t-=275]})(t,n)}const P=p({__name:A(336),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(a){const c=A;let l,p;const x=([l,p]=h((()=>s({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),l=await l,p(),l),y=a,w=u(Math[c(304)]);function b(n,e){const o=c,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,a=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,i=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,s=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(340)])(r,a,i,s)}function _(t,n){var e=2*w(t/50,n/50);return e+=4*w(t/100,n/100),e+=.2*w(t/10,n/10)}const M=function(n,e){const o=c,a=[],i=[],s=[],l=[],u=[];let f=new(t[o(340)]),p=new(t[o(340)]);const h=-.25;for(let r=0;r<n;r++){const c=Math[o(304)]()*e-e/2,m=Math[o(304)]()*e-e/2,v=_(c,m);a[o(346)](c,v,m);let d=Math.PI-Math.random()*(2*Math.PI);l[o(346)](Math.sin(.5*d)),u[o(346)](Math[o(305)](.5*d));let g=new(t[o(350)])(0,1,0),x=g.x*Math.sin(d/2),y=g.y*Math[o(277)](d/2),w=g.z*Math.sin(d/2),M=Math[o(305)](d/2);f[o(288)](x,y,w,M)[o(290)](),d=.5*Math[o(304)]()+h,g=new(t[o(350)])(1,0,0),x=g.x*Math[o(277)](d/2),y=g.y*Math.sin(d/2),w=g.z*Math[o(277)](d/2),M=Math[o(305)](d/2),p[o(288)](x,y,w,M)[o(290)](),f=b(f,p),d=.5*Math.random()+h,g=new(t[o(350)])(0,0,1),x=g.x*Math[o(277)](d/2),y=g.y*Math[o(277)](d/2),w=g.z*Math[o(277)](d/2),M=Math[o(305)](d/2),p.set(x,y,w,M)[o(290)](),f=b(f,p),i.push(f.x,f.y,f.z,f.w),r<n/3?s[o(346)](1.8*Math[o(304)]()):s[o(346)](Math[o(304)]())}return{offsetsF32:new(t[o(298)])(new Float32Array(a),3),orientationsF32:new(t[o(298)])(new Float32Array(i),4),stretchesF32:new(t[o(298)])(new Float32Array(s),1),halfRootAngleCosF32:new r(new Float32Array(u),1),halfRootAngleSinF32:new(t[o(298)])(new Float32Array(l),1)}}(y[c(275)],y[c(331)]),j=new(t[c(330)])(y.bW,y.bH,1,y[c(329)]).translate(0,y.bH/2,0),z=new n(y[c(331)],y[c(331)],32,32);z[c(341)](new(t[c(350)])(0,1,0));const I=z.attributes[c(280)];for(let t=0;t<I.array.length;t+=3)I[c(303)][t+1]=_(I[c(303)][t],I[c(303)][t+2]);z[c(349)][c(280)][c(299)]=!0,z[c(297)]();const C=new(f({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new e(.3,.9,0)[c(313)](),bottomColor:new(t[c(334)])(0,.2,0)[c(313)]()},c(323),"\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }",(n=>{const e=c;n[e(282)]=t[e(300)]})));C[c(276)]=x.map,C[c(320)]=x.alphaMap,C[c(347)]=!1;const{onLoop:k}=i();return k((({elapsed:t})=>{const n=c;C[n(281)][n(338)][n(285)]=t/4})),(t,n)=>{const e=c;return m(),v(e(314),null,[d("TresMesh",{material:g(C)},[d("TresInstancedBufferGeometry",{index:g(j)[e(326)],"attributes-position":g(j)[e(349)][e(280)],"attributes-uv":g(j)[e(349)].uv,"attributes-offset":g(M)[e(315)],"attributes-orientation":g(M)[e(278)],"attributes-stretch":g(M)[e(317)],"attributes-halfRootAngleSin":g(M)[e(348)],"attributes-halfRootAngleCos":g(M)[e(311)]},null,8,F)],8,D),d(e(342),{position:[0,0,0],geometry:g(z)},[d(e(283),{color:e(309),side:o},null,8,S)],8,R)])}}});function T(t){function n(t){const e=E;if(typeof t===e(327))return function(t){}.constructor("while (true) {}")[e(354)]("counter");1!==(""+t/t)[e(345)]||t%20==0?function(){return!0}[e(307)](e(343)+e(294))[e(332)]("action"):function(){return!1}.constructor(e(343)+e(294)).apply(e(312)),n(++t)}try{if(t)return n;n(0)}catch(e){}}!function(t,n){const e=B,o=H();for(;;)try{if(659296===-parseInt(e(278))/1+parseInt(e(292))/2+parseInt(e(254))/3*(parseInt(e(266))/4)+-parseInt(e(286))/5*(parseInt(e(262))/6)+-parseInt(e(267))/7*(-parseInt(e(258))/8)+parseInt(e(294))/9*(parseInt(e(280))/10)+parseInt(e(272))/11*(-parseInt(e(253))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const U=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[B(265)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){U(this,(function(){const t=B,n=new RegExp(t(271)),e=new RegExp(t(293),"i"),o=O(t(290));n[t(275)](o+"chain")&&e[t(275)](o+t(263))?O():o("0")}))()}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[B(265)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function B(t,n){const e=H();return(B=function(t,n){return e[t-=253]})(t,n)}function H(){const t=["trace","10LzaXUP","return (function() ","toString","warn","error","bind","1452890hgPEMH","table","stateObject","constructor","init","__proto__","1003112WAlrEA","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","9435483AukFYG","3948KlMQUf","3KxylDn","length","log",'{}.constructor("return this")( )',"3016LRgyHy","info","while (true) {}","gger","12YNCCFv","input","debu","apply","1190708bePUyg","266leKtiZ","TresPerspectiveCamera","action","console","function *\\( *\\)","16643qXJouN","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","string","test","counter","call","123717gCkUwd"];return(H=function(){return t})()}L(void 0,(function(){const t=B,n=function(){const t=B;let n;try{n=Function(t(281)+t(257)+");")()}catch(e){n=window}return n}(),e=n[t(270)]=n.console||{},o=[t(256),t(283),t(259),t(284),"exception",t(287),t(279)];for(let r=0;r<o[t(255)];r++){const n=L[t(289)].prototype[t(285)](L),a=o[r],i=e[a]||n;n[t(291)]=L[t(285)](L),n[t(282)]=i[t(282)][t(285)](i),e[a]=n}}))();const G=p({__name:"grass",setup(t){const n=x({alpha:!0,toneMapping:a,windowSize:!0,clearColor:6710886}),e=x({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=B;return m(),y(g(l),_(M(n)),{default:w((()=>[o[0]||(o[0]=d(r(268),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),b(g(c),_(M(e)),null,16),(m(),y(j,null,{default:w((()=>[b(P)])),_:1})),(m(),y(j,null,{default:w((()=>[b(g(z),{texture:r(273)})])),_:1}))])),_:1},16)}}});function O(t){function n(t){const e=B;if(typeof t===e(274))return function(t){}[e(289)](e(260))[e(265)](e(276));1!==(""+t/t).length||t%20==0?function(){return!0}[e(289)](e(264)+e(261))[e(277)](e(269)):function(){return!1}[e(289)](e(264)+e(261))[e(265)](e(288)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{G as default};
