import{C as t,bd as e,a3 as o,cg as n,m as a,al as r}from"./three.CMHPKQCP1757562434473.js";import{e as s}from"./@tresjs.Cox_Ej0K1757562434473.js";import{d as i,w as l,G as u,o as c,u as f,I as m,a7 as p,a8 as v}from"./@vue.pEDXJ_3Z1757562434473.js";const h=["geometry"],d=i({__name:"fencePlus",props:{width:{default:100},height:{default:100},depth:{default:100},color:{default:"#ffff00"},opacity:{default:1},thickness:{default:.99},room:{default:.7},num:{default:8},speed:{default:.15}},setup(i){const d=i,g={side:o,transparent:!0,depthWrite:!1,depthTest:!0,blending:e,vertexShader:"\n\t\tprecision highp float;\n\t\tprecision highp int;\n\t\tvarying vec2 vUv;\n\t\tvoid main() {\n\t\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\t\t}\n",fragmentShader:"\n\t\t\t\tprecision highp float;\n\t\t\t\tprecision highp int;\n\t\t\t\tuniform float time;\n\t\t\t\tuniform float opacity;\n\t\t\t\tuniform vec3 color;\n\t\t\t\tuniform float num;\n\t\t\t\tuniform float thickness;\n\t\t\t\tuniform float speed;\n\t\t\t\tuniform float room;\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec4 fragColor = vec4(0.);\n\t\t\t\t\tfloat sinnum = sin((vUv.y - time * speed) * 10. * num);\n\n\t\t\t\t\tvec4 wcolor = vec4(mix(color, vec3(1., 1., 1.), 0.9),1.0);\n\n\t\t\t\t\tvec3 fade = mix(color, vec3(1., 1., 1.), vUv.y);\n                    fragColor = mix(fragColor, vec4(fade, 1.), 0.85);\n                    gl_FragColor = vec4(fragColor.rgb, fragColor.a * opacity * (1. - vUv.y));\n\n\t\t\t\t\tif(vUv.y < room){\n\t\t\t\t\t\tfloat alpha = smoothstep(1.0 - thickness - 0.1, 1.0 - thickness, sinnum);\n\t\t\t\t\t\tfragColor = mix(gl_FragColor, wcolor, alpha);\n\t\t\t\t\t\tfragColor.a = fragColor.a * opacity;\n\t\t\t\t\t\tgl_FragColor = fragColor;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t",uniforms:{time:{type:"pv2",value:0},color:{type:"uvs",value:new t(d.color)},opacity:{value:d.opacity},num:{value:d.num},thickness:{value:d.thickness},speed:{value:d.speed},room:{value:d.room}}};let y=null;function C(t,e,o){const s=[],i=(t,e)=>{const o=new a(t,e,1,1),n=[];return n.push(0,1),n.push(1,1),n.push(0,0),n.push(1,0),o.setAttribute("uv",new r(n,2)),o},l=i(t,o);l.rotateY(Math.PI),l.translate(0,o/2,-e/2),s.push(l);const u=i(t,o);u.translate(0,o/2,e/2),s.push(u);const c=i(e,o);c.rotateY(Math.PI/2),c.translate(-t/2,o/2,0),s.push(c);const f=i(e,o);f.rotateY(-Math.PI/2),f.translate(t/2,o/2,0),s.push(f);return n(s,!0)}y=C(d.width,d.depth,d.height);const{onLoop:w}=s();return w((({delta:t})=>{g.uniforms.time.value+=t})),l((()=>[d.color,d.opacity,d.num,d.thickness,d.speed,d.room]),(([e,o,n,a,r,s])=>{g.uniforms.color.value=new t(e),g.uniforms.opacity.value=o,g.uniforms.num.value=n,g.uniforms.thickness.value=a,g.uniforms.speed.value=r,g.uniforms.room.value=s})),l((()=>[d.width,d.depth,d.height]),(([t,e,o])=>{y=C(t,e,o)})),(t,e)=>(c(),u("TresMesh",{renderOrder:2e3,geometry:f(y)},[m("TresShaderMaterial",p(v(g)),null,16)],8,h))}});export{d as _};
