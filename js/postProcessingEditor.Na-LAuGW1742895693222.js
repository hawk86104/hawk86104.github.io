import{m as t,e as n,a as e,o}from"./@tresjs.xCsT8yve1742895693222.js";import{V as r,_ as s,s as a,i,A as c,r as l,aZ as u,aD as v,c6 as f}from"./three.DqHgeVY11742895693222.js";import{P as p}from"./tweakpane.ivGeiIdz1742895693222.js";import{d as m,a3 as d,e as g,o as x,f as h,g as y,N as I,j as b,u as _,aj as S,ak as U,al as w,m as D}from"./@vue.C4dqouNn1742895693222.js";import{_ as P}from"./@fesjs.C15FMxIg1742895693222.js";import"./postprocessing.vTwfsnPH1742895693222.js";import"./@vueuse.q8TRDI1e1742895693222.js";import"./vue-router.0ovIAQEA1742895693222.js";import"./lodash-es.p1wj6C0b1742895693222.js";import"./@qlin.o0hjOMCg1742895693222.js";import"./pinia.JZN5hDyR1742895693222.js";import"./@floating-ui.HzHndBae1742895693222.js";import"./@juggle.4EyLec-41742895693222.js";!function(t,n){const e=C,o=L();for(;;)try{if(100145===parseInt(e(189))/1+-parseInt(e(195))/2*(parseInt(e(151))/3)+-parseInt(e(183))/4*(-parseInt(e(142))/5)+parseInt(e(140))/6*(parseInt(e(144))/7)+-parseInt(e(177))/8*(-parseInt(e(155))/9)+-parseInt(e(147))/10*(-parseInt(e(204))/11)+-parseInt(e(202))/12*(parseInt(e(190))/13))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const E=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(196)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){E(this,(function(){const t=C,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(159),"i"),o=F(t(170));n[t(199)](o+t(160))&&e[t(199)](o+t(163))?F():o("0")}))()}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(196)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function L(){const t=["table","328866mFkHtH",'" load was aborted.',"__proto__","ShaderMaterial","774NeJbYc","WagnerLoadShaderException","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","object","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","chain","gger","Vector3","input","while (true) {}","bind","value","exec","send","lastIndex","init","message","trace","constructor","stateObject","replace","console","15264CHRnDs","Texture","onabort","string","type",'Shader "',"189764cmekvL","action","Vector2","return (function() ","toString","responseText","9762XWHYor","9594esiHPZ","isArray","index","random","Vector4","2nIDSdu","apply","get","name","test","counter","open","4068bhoaDJ","length","11dWKeJl","\" couldn't be loaded.","Matrix4","2082VZCwUL","call","5scgClG","info","2282SOqqgt","error","log","1255360ogDlFE","prototype","onerror"];return(L=function(){return t})()}function C(t,n){const e=L();return C=function(t,n){return e[t-=138]},C(t,n)}A(void 0,(function(){const t=C,n=function(){const t=C;let n;try{n=Function(t(186)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(176)]=n.console||{},o=[t(146),"warn",t(143),t(145),"exception",t(150),t(172)];for(let r=0;r<o.length;r++){const n=A[t(173)][t(148)][t(165)](A),s=o[r],a=e[s]||n;n[t(153)]=A.bind(A),n[t(187)]=a[t(187)][t(165)](a),e[s]=n}}))();function M(t,n,e){const o=C;if(typeof t!==o(158)||null===t)return t;const r=Array[o(191)](t)?[]:{};for(const s in t)t.hasOwnProperty(s)&&(r[s]=M(t[s])),s==n&&(r[n]=e);return r}function F(t){function n(t){const e=C;if(typeof t===e(180))return function(t){}.constructor(e(164)).apply(e(200));1!==(""+t/t)[e(203)]||t%20==0?function(){return!0}[e(173)]("debu"+e(161))[e(141)](e(184)):function(){return!1}[e(173)]("debu"+e(161))[e(196)](e(174)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const z=R;!function(t,n){const e=R,o=G();for(;;)try{if(617818===parseInt(e(383))/1+parseInt(e(373))/2+parseInt(e(357))/3+parseInt(e(323))/4*(parseInt(e(305))/5)+parseInt(e(380))/6*(parseInt(e(358))/7)+-parseInt(e(363))/8*(parseInt(e(327))/9)+-parseInt(e(362))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const N=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(307)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){N(this,(function(){const t=R,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(297),"i"),o=j(t(367));n[t(312)](o+t(324))&&e[t(312)](o+t(396))?j():o("0")}))()}();const T=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(307)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function R(t,n){const e=G();return R=function(t,n){return e[t-=297]},R(t,n)}function G(){const t=["useRGBA","LinearFilter","counter","Reset","135836apfjcV","toString","innerWidth","pass","clone","WebGLRenderTarget","exception","963234QJYwlj","error","log","848181tNiELh","Scene","bind","table","toScreen","material","UnsignedByteType","projectionMatrix","string","Stack","stencilBuffer","length","renderer","input","PlaneGeometry","quad","Pass","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","value","settings","type","uniforms","Mesh","front","read","10KnrTJy","stateObject","apply","texture","gger","prototype","OrthographicCamera","test","makePerspective","scale","CopyPass","RGBAFormat","onWindowResize","render","params","width","warn","back","1817460kAAZlZ","chain","far","setSize","9hpGAFR","startTime","write","resolution","loadShadervf","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","removePass","debu",'{}.constructor("return this")( )',"ClampToEdgeWrapping","call","constructor","camera","shader","now","uuid","scene","copyPass","wrapT","getOfflineTexture","info","near","setRenderTarget","wrapS","magFilter","trace","set","tInput","ShaderMaterial","__proto__","922128DsrzZt","7ptlCrZ","height","minFilter","makeOrthographic","16608900BcGAUP","112288DHUGcq","while (true) {}","console","RGBFormat","init","passItems"];return(G=function(){return t})()}T(void 0,(function(){const t=R;let n;try{n=Function("return (function() "+t(335)+");")()}catch(r){n=window}const e=n[t(365)]=n[t(365)]||{},o=[t(382),t(321),t(347),t(381),t(379),t(386),t(352)];for(let s=0;s<o[t(394)];s++){const n=T[t(338)][t(310)][t(385)](T),r=o[s],a=e[r]||n;n[t(356)]=T[t(385)](T),n[t(374)]=a[t(374)].bind(a),e[r]=n}}))();class B{constructor(t,n){const e=R;this[e(320)]=1,this[e(359)]=1,this[e(299)]=n||{},this[e(369)]=this[e(299)][e(369)]||!1,this.renderer=t,this[e(344)]=this[e(315)](this[e(299)]),this[e(343)]=new(s[e(384)]),this[e(398)]=new(s[e(302)])(new(s[e(397)])(1,1),new c),this.scene.add(this[e(398)]),this[e(339)]=new(s[e(311)])(1,1,1,1,-1e4,1e4),this[e(303)]=new(s[e(378)])(1,1,{minFilter:void 0!==this[e(299)][e(360)]?this.settings[e(360)]:l,magFilter:void 0!==this[e(299)][e(351)]?this.settings[e(351)]:s[e(370)],wrapS:void 0!==this[e(299)][e(350)]?this.settings[e(350)]:u,wrapT:void 0!==this.settings.wrapT?this[e(299)][e(345)]:s[e(336)],format:this.useRGBA?s[e(316)]:s[e(366)],type:void 0!==this.settings[e(300)]?this.settings[e(300)]:s[e(389)],stencilBuffer:void 0===this[e(299)][e(393)]||this[e(299)][e(393)]}),this[e(322)]=this[e(303)][e(377)](),this[e(328)]=Date[e(341)](),this.passes={},this[e(392)]={passItems:[],passes:[]}}addPass(t,n,e,o){const r=R;this[r(331)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(340)]};this.Stack.passItems.push(s)}[z(333)](t){const n=z;for(let e=this[n(392)][n(368)].length-1;e>=0;e--)this[n(392)][n(368)][e][n(342)]===parseInt(t)&&this[n(392)].passItems.splice(e,1);console[n(382)](this.Stack[n(368)])}CopyPass(){const t=z;this[t(399)][t(337)](this);return this[t(331)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[z(331)](t){const n=z,e=n(332);return this.shader=function(t,n){const e=C,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,c=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,l={sampler2D:{type:"t",value:()=>new(s[C(178)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(s[C(185)])},vec3:{type:"v3",value:()=>new(s[C(162)])},vec4:{type:"v4",value:()=>new(s[C(194)])},bvec2:{type:"v2",value:()=>new(s[C(185)])},bvec3:{type:"v3",value:()=>new(s[C(162)])},bvec4:{type:"v4",value:()=>new(s[C(194)])},ivec2:{type:"v2",value:()=>new(s[C(185)])},ivec3:{type:"v3",value:()=>new(s[C(162)])},ivec4:{type:"v4",value:()=>new(s[C(194)])},mat2:{type:"v2",value:()=>new a},mat3:{type:"v3",value:()=>new i},mat4:{type:"v4",value:()=>new(s[C(139)])}},u={float:{type:"fv",value:()=>[]},vec3:{type:"v3v",value:()=>[]}};let v;const f={resolution:{type:"v2",value:new r(1,1),default:!0},time:{type:"f",value:Date.now(),default:!0},tInput:{type:"t",value:new(s[e(178)]),default:!0}};let p,m;for(;null!==(v=o[e(167)](n));)v[e(192)]===o[e(169)]&&o[e(169)]++,p=v[1],m=v[2],f[m]={type:l[p][e(181)],value:l[p][e(166)]()};for(;null!==(v=c[e(167)](n));)v.index===o.lastIndex&&o[e(169)]++,p=v[1],m=v[2],v[3],f[m]={type:u[p].type,value:u[p][e(166)]()};return new(s[e(154)])({uniforms:f,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(340)]}[z(399)](t){const n=z;this.shader=null,this[n(319)]={}}[z(372)](){const t=z;this[t(304)]=this.front,this.write=this[t(322)]}[z(317)](t,n){const e=z,o=window[e(375)],r=window.innerHeight;t[e(326)](1*o,1*r),n[e(390)][e(313)](70,o/r,n[e(348)],n[e(325)]),this[e(326)](o,r);return this.getOfflineTexture(o,r,!0)}[z(326)](t,n){const e=z;this[e(320)]=t,this[e(359)]=n,this[e(339)][e(390)][e(361)](t/-2,t/2,n/2,n/-2,this.camera[e(348)],this[e(339)].far),this[e(398)][e(314)][e(353)](t,n,1),this[e(303)][e(326)](t,n),this.back[e(326)](t,n)}[z(346)](t,n,e){const o=z;return new(s[o(378)])(t,n,{minFilter:l,magFilter:s[o(370)],format:e?s[o(316)]:s[o(366)]})}[z(318)](t,n,e,o){const r=z;this[r(395)][r(349)](this[r(329)]),this[r(395)][r(318)](t,n),o||this.swapBuffers()}swapBuffers(){const t=z,n=this[t(329)];this[t(329)]=this.read,this[t(304)]=n}[z(376)](){const t=z;for(let n=0;n<this[t(392)][t(368)][t(394)];n++){const e=this[t(392)][t(368)][n].shader,o=this[t(392)].passItems[n].params;if(this.renderer.setRenderTarget(this[t(329)]),e instanceof s[t(355)]){this.quad[t(388)]=e,this[t(398)][t(388)][t(301)][t(354)].value=this[t(304)].texture,this[t(398)].material[t(301)][t(330)][t(298)][t(353)](this[t(320)],this[t(359)]),this[t(398)][t(388)][t(301)].time[t(298)]=.001*(Date[t(341)]()-this.startTime);for(const n in o)this[t(398)][t(388)][t(301)][n][t(298)]=o[n];this[t(395)][t(318)](this[t(343)],this.camera),this.swapBuffers()}}}[z(387)](t,n){const e=z;this[e(395)][e(349)](null),this[e(398)][e(388)]=this.copyPass,this[e(398)].material[e(301)][e(354)][e(298)]=this[e(304)][e(308)],this[e(398)][e(388)].uniforms[e(330)][e(298)][e(353)](this[e(320)],this.height),this.renderer.render(this.scene,this[e(339)])}}function j(t){function n(t){const e=R;if(typeof t===e(391))return function(t){}[e(338)](e(364))[e(307)](e(371));1!==(""+t/t)[e(394)]||t%20==0?function(){return!0}.constructor(e(334)+e(309))[e(337)]("action"):function(){return!1}[e(338)]("debu"+e(309))[e(307)](e(306)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const H="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",V=O;function O(t,n){const e=X();return O=function(t,n){return e[t-=272]},O(t,n)}!function(t,n){const e=O,o=X();for(;;)try{if(530417===-parseInt(e(317))/1*(parseInt(e(342))/2)+-parseInt(e(274))/3+-parseInt(e(294))/4+parseInt(e(301))/5+parseInt(e(324))/6*(-parseInt(e(297))/7)+parseInt(e(340))/8+parseInt(e(298))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const k=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[O(319)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){k(this,(function(){const t=O,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(279),"i"),o=Z(t(308));n[t(303)](o+t(345))&&e[t(303)](o+t(290))?Z():o("0")}))()}();const W=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[O(319)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();W(void 0,(function(){const t=O;let n;try{n=Function(t(344)+'{}.constructor("return this")( ));')()}catch(r){n=window}const e=n.console=n.console||{},o=["log","warn","info",t(312),t(292),t(314),t(315)];for(let s=0;s<o.length;s++){const n=W[t(300)].prototype[t(329)](W),r=o[s],a=e[r]||n;n[t(341)]=W[t(329)](W),n.toString=a[t(299)].bind(a),e[r]=n}}))();function X(){const t=["addBlade","debu","bind","castShadow","关闭通道","BOXBLURPass","MeshPhongMaterial","postProcessing","FREICHENPass","map","keys","call","Mesh","648056cstKup","__proto__","6zGZJTP","render","return (function() ","chain","add","pass","2379237QlaIhN","stateObject","gger","新增通道","translate","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","value","TOONPass","split","CGAPass","material","移除~","Vector2","Reset","removePass","values","input","plugins/postProcessing/image/1324.jpg","exception","string","2677776cSSHDt","addButton","后处理类型","35oVfmZQ","19864782opUcsJ","toString","constructor","4867085wkOmGN","dispose","test","SEPIAPass","addPass","change","text","init","SNOISEPass","RGBPass","POISSONPass","error","BufferGeometry","table","trace","list","103919HnqCmy","SOBELPass","apply","CIRCULARPass","push","target","click","1148310NoiHsK","label","FXAAPass"];return(X=function(){return t})()}function Z(t){function n(t){const e=O;if(typeof t===e(293))return function(t){}[e(300)]("while (true) {}")[e(319)]("counter");1!==(""+t/t).length||t%20==0?function(){return!0}[e(300)](e(328)+"gger")[e(338)]("action"):function(){return!1}.constructor("debu"+e(276))[e(319)](e(275)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const q=P(m({__name:V(334),async setup(o){const r=V;let a,i;const{camera:c,renderer:l,scene:u,sizes:m}=t();for(var g=new(s[r(313)]),x=[],h=0;h<100;h++){var y=new v(100,100,100);y[r(278)](1500*Math.random(),1500*Math.random(),1500*Math.random()),x[r(321)](y)}g=f(x);const I=([a,i]=d((()=>e({map:r(291)}))),a=await a,i(),a),b=([a,i]=d((()=>e({map:"plugins/postProcessing/image/1324-normal.jpg"}))),a=await a,i(),a);var _=new(s[r(333)])({map:I[r(336)],normalMap:b.map,normalScale:new(s[r(286)])(.8,-.8),shininess:100}),S=new(s[r(339)])(g,_);S[r(330)]=!0,S.receiveShadow=!0,u[r(280)][r(272)](S);const U=new B(l[r(280)],{useRGBA:!0}),w=new p;let D=null,P=[{text:"InvertPass",value:{InvertPass:H}},{text:r(326),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:r(304),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:r(309),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:r(332),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:"DENOISEPass",value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:r(283),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:b[r(336)]}}},{text:r(318),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:r(310),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:"DOTPass",value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:r(320),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:r(311),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:"VIGNETTE1Pass",value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:"VIGNETTE2Pass",value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:r(335),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:r(281),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],E="InvertPass",A=H,L=null;w[r(327)]({view:r(316),label:r(296),options:P,value:""}).on(r(306),(t=>{D=t[r(280)]}));const C=w[r(295)]({title:"新增",label:r(277)});let F=0;C.on(r(323),(t=>{const n=r;E=Object[n(337)](D)[0],A=Object[n(289)](D)[0],L=Object[n(289)](D)[1];let e=F++,o=w.addFolder({title:E});for(const r in L){let t=L[r];o[n(327)]({view:n(307),label:r,parse:t=>String(t),value:t})}o[n(295)]({title:n(285)+e,label:n(331)}).on(n(323),(t=>{const e=n;let o=t[e(322)].title[e(282)]("~")[1];U[e(288)](o)})).on(n(323),(()=>{o[n(302)]()}));let s=M(L,t[n(322)][n(325)],t[n(280)]);U[n(305)](E,A,s,e)})),U.onWindowResize(l.value,c[r(280)]);const{onLoop:z}=n();return z((({delta:t})=>{const n=r;S&&(l.value.autoClearColor=!0,U[n(287)](),S[n(284)]=_,U[n(343)](u.value,c[n(280)]),U[n(273)](),U.toScreen(u[n(280)],c[n(280)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),$=Y;!function(t,n){const e=Y,o=et();for(;;)try{if(508646===parseInt(e(253))/1+-parseInt(e(283))/2*(-parseInt(e(256))/3)+-parseInt(e(252))/4*(parseInt(e(282))/5)+-parseInt(e(263))/6*(parseInt(e(255))/7)+-parseInt(e(269))/8+-parseInt(e(275))/9*(-parseInt(e(271))/10)+parseInt(e(250))/11*(parseInt(e(272))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const J=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){J(this,(function(){const t=Y,n=new RegExp(t(245)),e=new RegExp(t(281),"i"),o=nt("init");n[t(268)](o+t(277))&&e[t(268)](o+"input")?nt():o("0")}))()}();const Q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Y(274)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function Y(t,n){const e=et();return Y=function(t,n){return e[t-=245]},Y(t,n)}Q(void 0,(function(){const t=Y,n=function(){const t=Y;let n;try{n=Function(t(262)+t(261)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(249)]||{},o=[t(265),t(284),t(276),t(286),t(270),t(248),"trace"];for(let r=0;r<o[t(287)];r++){const n=Q.constructor.prototype[t(247)](Q),s=o[r],a=e[s]||n;n[t(259)]=Q.bind(Q),n[t(279)]=a[t(279)][t(247)](a),e[s]=n}}))();const K={ref:"perspectiveCameraRef",position:[600,850,-1500],fov:45,near:.1,far:1e5},tt=m({__name:$(280),setup(t){const e={clearColor:"#000000",shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:"manual"},r={autoRotate:!0,enableDamping:!0},{onLoop:s}=n();return s((({delta:t})=>{})),(t,n)=>{const s=Y,a=g(s(246));return x(),h(a,D(e,{"window-size":""}),{default:y((()=>[I("TresPerspectiveCamera",K,null,512),b(_(o),S(U(r)),null,16),n[0]||(n[0]=I(s(254),{color:s(260),intensity:2},null,-1)),n[1]||(n[1]=I(s(278),{position:[100,100,0],intensity:2,color:s(260)},null,-1)),(x(),h(w,null,{default:y((()=>[b(q)])),_:1}))])),_:1},16)}}});function nt(t){function n(t){const e=Y;if(typeof t===e(258))return function(t){}.constructor(e(267))[e(274)](e(264));1!==(""+t/t).length||t%20==0?function(){return!0}[e(257)](e(285)+e(266))[e(273)](e(251)):function(){return!1}[e(257)](e(285)+e(266)).apply("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}function et(){const t=["console","847GVPoCr","action","1006664MoZUWP","639117yacYXa","TresAmbientLight","4361aDixQD","327PecWIo","constructor","string","__proto__","#ffffff",'{}.constructor("return this")( )',"return (function() ","9162LZrWVr","counter","log","gger","while (true) {}","test","1109752vunFAv","exception","170HRLgOx","185796iYxxDO","call","apply","342675mRejkD","info","chain","TresDirectionalLight","toString","postProcessingEditor","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","20RwmRqE","2326gApQlx","warn","debu","error","length","function *\\( *\\)","TresCanvas","bind","table"];return(et=function(){return t})()}export{tt as default};
