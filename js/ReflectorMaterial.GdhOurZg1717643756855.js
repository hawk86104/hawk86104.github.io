import{bE as c,bF as m,bG as s,bm as d,aD as t,bH as g,aL as M}from"./vendor.iBV-vwSJ1717643756855.js";import{d as x}from"./dither.glsl.y2WXw1t-1717643756855.js";const C="\nin vec3 position;\nin vec3 normal;\nin vec2 uv;\n\nuniform mat4 modelMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\n\nuniform mat3 uMapTransform;\nuniform mat4 uMatrix;\n\nout vec2 vUv;\nout vec4 vCoord;\nout vec3 vNormal;\nout vec3 vToEye;\n\nvoid main() {\n    vUv = (uMapTransform * vec3(uv, 1.0)).xy;\n    vCoord = uMatrix * vec4(position, 1.0);\n    vNormal = normalMatrix * normal;\n\n    vec4 worldPosition = modelMatrix * vec4(position, 1.0);\n    vToEye = cameraPosition - worldPosition.xyz;\n\n    vec4 mvPosition = viewMatrix * worldPosition;\n    gl_Position = projectionMatrix * mvPosition;\n}\n",F="\nprecision highp float;\n\nuniform sampler2D tReflect;\nuniform vec3 uColor;\nuniform float uReflectivity;\nuniform float uMirror;\nuniform float uMixStrength;\n\n#ifdef USE_MAP\n    uniform sampler2D tMap;\n#endif\n\n#ifdef USE_NORMALMAP\n    uniform sampler2D tNormalMap;\n    uniform vec2 uNormalScale;\n#endif\n\n#ifdef USE_FOG\n    uniform vec3 uFogColor;\n    uniform float uFogNear;\n    uniform float uFogFar;\n#endif\n\nin vec2 vUv;\nin vec4 vCoord;\nin vec3 vNormal;\nin vec3 vToEye;\n\nout vec4 FragColor;\n\n".concat(x,"\n\nvoid main() {\n    #ifdef USE_MAP\n        vec4 color = texture(tMap, vUv);\n    #else\n        vec4 color = vec4(uColor, 1.0);\n    #endif\n\n    #ifdef USE_NORMALMAP\n        vec4 normalColor = texture(tNormalMap, vUv * uNormalScale);\n        vec3 normal = normalize(vec3(normalColor.r * 2.0 - 1.0, normalColor.b, normalColor.g * 2.0 - 1.0));\n        vec3 coord = vCoord.xyz / vCoord.w;\n        vec2 uv = coord.xy + coord.z * normal.xz * 0.05;\n        vec4 reflectColor = texture(tReflect, uv);\n    #else\n        vec3 normal = vNormal;\n        vec4 reflectColor = textureProj(tReflect, vCoord);\n    #endif\n\n    // Fresnel term\n    vec3 toEye = normalize(vToEye);\n    float theta = max(dot(toEye, normal), 0.0);\n    float reflectance = uReflectivity + (1.0 - uReflectivity) * pow((1.0 - theta), 5.0);\n\n    reflectColor = mix(vec4(0), reflectColor, reflectance);\n\n    FragColor.rgb = color.rgb * ((1.0 - min(1.0, uMirror)) + reflectColor.rgb * uMixStrength);\n\n    #ifdef USE_FOG\n        float fogDepth = gl_FragCoord.z / gl_FragCoord.w;\n        float fogFactor = smoothstep(uFogNear, uFogFar, fogDepth);\n\n        FragColor.rgb = mix(FragColor.rgb, uFogColor, fogFactor);\n    #endif\n\n    #ifdef DITHERING\n        FragColor.rgb = dither(FragColor.rgb);\n    #endif\n\n    FragColor.a = 1.0;\n}\n");class S extends c{constructor({color:i=new t(1052688),map:e=null,normalMap:r=null,normalScale:l=new M(1,1),reflectivity:n=0,mirror:f=0,mixStrength:u=10,fog:a=null,dithering:v=!1}={}){const o={glslVersion:m,defines:{},uniforms:{tMap:{value:null},tReflect:{value:null},uMapTransform:{value:new s},uMatrix:{value:new d},uColor:{value:i instanceof t?i:new t(i)},uReflectivity:{value:n},uMirror:{value:f},uMixStrength:{value:u}},vertexShader:C,fragmentShader:F,blending:g};e&&(e.updateMatrix(),o.defines=Object.assign(o.defines,{USE_MAP:""}),o.uniforms=Object.assign(o.uniforms,{tMap:{value:e},uMapTransform:{value:e.matrix}})),r&&(o.defines=Object.assign(o.defines,{USE_NORMALMAP:""}),o.uniforms=Object.assign(o.uniforms,{tNormalMap:{value:r},uNormalScale:{value:l}}),e||(r.updateMatrix(),o.uniforms=Object.assign(o.uniforms,{uMapTransform:{value:r.matrix}}))),a&&(o.defines=Object.assign(o.defines,{USE_FOG:""}),o.uniforms=Object.assign(o.uniforms,{uFogColor:{value:a.color},uFogNear:{value:a.near},uFogFar:{value:a.far}})),v&&(o.defines=Object.assign(o.defines,{DITHERING:""})),super(o)}}export{S as R};
