import{a6 as t,C as n,Z as e,al as o,K as r,a9 as a}from"./three.6E5muTWJ1722409645193.js";import{$ as i,N as s,d as c,x as l}from"./@tresjs.qmCJ68Vp1722409645193.js";import"./index.uZgTry0B1722409645193.js";import{a as u}from"./simplex-noise.MycypUyu1722409645193.js";import{C as f}from"./index.mNcWtqYh1722409645193.js";import{d as p,a4 as h,o as m,D as v,J as d,u as g,r as x,f as y,g as w,j as b,aj as _,ak as j,al as M}from"./@vue.9bHx4gg21722409645193.js";import{_ as z}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.7g7VcEyt1722409645193.js";import"./tweakpane.yHWGBmom1722409645193.js";import"./@vueuse.NFOCyQQL1722409645193.js";import"./lamina.9LAe-HEG1722409645193.js";import"./glsl-tokenizer.bKHxJMPW1722409645193.js";import"./@amap.VDWlHANn1722409645193.js";import"./glsl-token-descope.6COltZfO1722409645193.js";import"./glsl-token-depth.qpv3KgpZ1722409645193.js";import"./glsl-token-scope.A_PbcDqi1722409645193.js";import"./glsl-token-properties.T8GBsewm1722409645193.js";import"./glsl-token-assignments.4LCI_VUv1722409645193.js";import"./glsl-token-string.tLooI1vy1722409645193.js";import"./glsl-token-functions.9RlG2kRC1722409645193.js";import"./object-hash.Une5niKX1722409645193.js";import"./jszip.EBLL5bdU1722409645193.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.uDpaPnPd1722409645193.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.rMyHcQmv1722409645193.js";import"./three-stdlib.lGHJYkjv1722409645193.js";import"./@pmndrs.9AsxXQ-l1722409645193.js";import"./utils.sEUpWAzG1722409645193.js";const I=O;!function(t,n){const e=O,o=k();for(;;)try{if(733481===-parseInt(e(455))/1+parseInt(e(512))/2*(-parseInt(e(460))/3)+parseInt(e(475))/4+-parseInt(e(459))/5+parseInt(e(482))/6*(parseInt(e(469))/7)+-parseInt(e(454))/8*(-parseInt(e(458))/9)+parseInt(e(496))/10*(parseInt(e(463))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[O(485)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){A(this,(function(){const t=O,n=new RegExp(t(526)),e=new RegExp(t(493),"i"),o=H(t(511));n[t(504)](o+t(520))&&e[t(504)](o+t(514))?H():o("0")}))()}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[O(485)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function k(){const t=["orientationsF32","length","PlaneGeometry","width","instances","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","translate","InstancedBufferAttribute","11930JGJxwY","value","exception","Color","console","time","computeVertexNormals","push","test","stretchesF32","stateObject","log","string","TresGroup","TresInstancedBufferGeometry","init","32426HeDJyr","debu","input","array","attributes-halfRootAngleSin","grass","normalize","random","chain","halfRootAngleSinF32","Vector3","attributes-orientation","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","side","function *\\( *\\)","offsetsF32","prototype","set","info","bind",'{}.constructor("return this")( )',"error","call","TresMesh","32oNFSkY","720699qUagro","attributes-position","Vector4","2323089AqAxjs","1052540mcVlWg","186lmcvqV","geometry","constructor","2057Wpzngb","gger","map","trace","toString","attributes-halfRootAngleCos","718963VKIDOC","action","alphaMap","cos","sin","needsUpdate","2781424HMCiYX","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","attributes-uv","position","halfRootAngleCosF32","convertSRGBToLinear","warn","42KpMjWo","attributes","attributes-stretch","apply","index","while (true) {}"];return(k=function(){return t})()}C(void 0,(function(){const t=O;let n;try{n=Function("return (function() "+t(450)+");")()}catch(r){n=window}const e=n[t(500)]=n[t(500)]||{},o=[t(507),t(481),t(530),t(451),t(498),"table",t(466)];for(let a=0;a<o[t(489)];a++){const n=C[t(462)][t(528)][t(531)](C),r=o[a],i=e[r]||n;n.__proto__=C[t(531)](C),n[t(467)]=i[t(467)][t(531)](i),e[r]=n}}))();const S=["material"],F=["index",I(456),I(477),"attributes-offset",I(523),I(484),I(516),I(468)],D=[I(461)],R=[I(525)];function O(t,n){const e=k();return(O=function(t,n){return e[t-=450]})(t,n)}const T=p({__name:I(517),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(a){const c=I;let l,p;const x=([l,p]=h((()=>s({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),l=await l,p(),l),y=a,w=u(Math[c(519)]);function b(n,e){const o=c,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,a=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,i=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,s=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(457)])(r,a,i,s)}function _(t,n){var e=2*w(t/50,n/50);return e+=4*w(t/100,n/100),e+=.2*w(t/10,n/10)}const j=function(n,e){const a=c,i=[],s=[],l=[],u=[],f=[];let p=new o,h=new(t[a(457)]);const m=-.25;for(let o=0;o<n;o++){const r=Math[a(519)]()*e-e/2,c=Math[a(519)]()*e-e/2,v=_(r,c);i.push(r,v,c);let d=Math.PI-Math.random()*(2*Math.PI);u[a(503)](Math[a(473)](.5*d)),f[a(503)](Math.cos(.5*d));let g=new(t[a(522)])(0,1,0),x=g.x*Math[a(473)](d/2),y=g.y*Math.sin(d/2),w=g.z*Math[a(473)](d/2),j=Math[a(472)](d/2);p[a(529)](x,y,w,j)[a(518)](),d=.5*Math[a(519)]()+m,g=new(t[a(522)])(1,0,0),x=g.x*Math[a(473)](d/2),y=g.y*Math[a(473)](d/2),w=g.z*Math[a(473)](d/2),j=Math[a(472)](d/2),h[a(529)](x,y,w,j).normalize(),p=b(p,h),d=.5*Math[a(519)]()+m,g=new(t[a(522)])(0,0,1),x=g.x*Math[a(473)](d/2),y=g.y*Math[a(473)](d/2),w=g.z*Math[a(473)](d/2),j=Math[a(472)](d/2),h[a(529)](x,y,w,j)[a(518)](),p=b(p,h),s[a(503)](p.x,p.y,p.z,p.w),o<n/3?l[a(503)](1.8*Math[a(519)]()):l[a(503)](Math[a(519)]())}return{offsetsF32:new r(new Float32Array(i),3),orientationsF32:new(t[a(495)])(new Float32Array(s),4),stretchesF32:new(t[a(495)])(new Float32Array(l),1),halfRootAngleCosF32:new(t[a(495)])(new Float32Array(f),1),halfRootAngleSinF32:new(t[a(495)])(new Float32Array(u),1)}}(y[c(492)],y[c(491)]),M=new(t[c(490)])(y.bW,y.bH,1,y.joints)[c(494)](0,y.bH/2,0),z=new(t[c(490)])(y[c(491)],y[c(491)],32,32);z.lookAt(new(t[c(522)])(0,1,0));const A=z.attributes[c(478)];for(let t=0;t<A[c(515)][c(489)];t+=3)A[c(515)][t+1]=_(A[c(515)][t],A.array[t+2]);z[c(483)][c(478)][c(474)]=!0,z[c(502)]();const C=new(f({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(t[c(499)])(.3,.9,0)[c(480)](),bottomColor:new n(0,.2,0)[c(480)]()},c(476),c(524),(t=>{t[c(525)]=e})));C[c(465)]=x[c(465)],C[c(471)]=x[c(471)],C.toneMapped=!1;const{onLoop:k}=i();return k((({elapsed:t})=>{const n=c;C.uniforms[n(501)][n(497)]=t/4})),(t,n)=>{const o=c;return m(),v(o(509),null,[d("TresMesh",{material:g(C)},[d(o(510),{index:g(M)[o(486)],"attributes-position":g(M).attributes[o(478)],"attributes-uv":g(M)[o(483)].uv,"attributes-offset":g(j)[o(527)],"attributes-orientation":g(j)[o(488)],"attributes-stretch":g(j)[o(505)],"attributes-halfRootAngleSin":g(j)[o(521)],"attributes-halfRootAngleCos":g(j)[o(479)]},null,8,F)],8,S),d(o(453),{position:[0,0,0],geometry:g(z)},[d("TresMeshStandardMaterial",{color:"#000f00",side:e},null,8,R)],8,D)])}}});function H(t){function n(t){const e=O;if(typeof t===e(508))return function(t){}[e(462)](e(487))[e(485)]("counter");1!==(""+t/t)[e(489)]||t%20==0?function(){return!0}[e(462)](e(513)+"gger")[e(452)](e(470)):function(){return!1}.constructor("debu"+e(464))[e(485)](e(506)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const B=E;function E(t,n){const e=q();return(E=function(t,n){return e[t-=161]})(t,n)}!function(t,n){const e=E,o=q();for(;;)try{if(212989===-parseInt(e(197))/1*(parseInt(e(175))/2)+parseInt(e(203))/3*(-parseInt(e(181))/4)+-parseInt(e(191))/5+parseInt(e(185))/6*(parseInt(e(200))/7)+parseInt(e(187))/8+parseInt(e(188))/9*(-parseInt(e(199))/10)+-parseInt(e(171))/11*(-parseInt(e(176))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){L(this,(function(){const t=E,n=new RegExp(t(195)),e=new RegExp(t(192),"i"),o=N(t(190));n[t(182)](o+t(184))&&e[t(182)](o+t(201))?N():o("0")}))()}();const P=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[E(163)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();P(void 0,(function(){const t=E;let n;try{n=Function(t(186)+t(196)+");")()}catch(r){n=window}const e=n[t(177)]=n[t(177)]||{},o=["log",t(162),t(194),"error",t(167),t(165),t(169)];for(let a=0;a<o.length;a++){const n=P.constructor[t(161)][t(166)](P),r=o[a],i=e[r]||n;n[t(189)]=P[t(166)](P),n[t(193)]=i.toString[t(166)](i),e[r]=n}}))();const V=d("TresPerspectiveCamera",{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1);function q(){const t=["1798528teNoot","248445OGOCHu","__proto__","init","1006520VhKThF","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","toString","info","function *\\( *\\)",'{}.constructor("return this")( )',"21azCydO","string","90fhLLVO","574BSHyej","input","call","3dddBUG","prototype","warn","apply","while (true) {}","table","bind","exception","constructor","trace","counter","1705HCBxWK","action","stateObject","length","2918yIvuac","43872mQvTYB","console","debu","gger","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","924164NhxEzX","test","grass","chain","9726yMKTkD","return (function() "];return(q=function(){return t})()}const G=p({__name:B(183),setup(t){const n=x({alpha:!0,toneMapping:a,windowSize:!0,clearColor:6710886}),e=x({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=E;return m(),y(g(l),_(j(n)),{default:w((()=>[V,b(g(c),_(j(e)),null,16),(m(),y(M,null,{default:w((()=>[b(T)])),_:1})),(m(),y(M,null,{default:w((()=>[b(g(z),{texture:r(180)})])),_:1}))])),_:1},16)}}});function N(t){function n(t){const e=E;if(typeof t===e(198))return function(t){}[e(168)](e(164)).apply(e(170));1!==(""+t/t)[e(174)]||t%20==0?function(){return!0}[e(168)](e(178)+e(179))[e(202)](e(172)):function(){return!1}.constructor(e(178)+e(179)).apply(e(173)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{G as default};
