import{m as t,e as n,a as e,o}from"./@tresjs.rE98Wm941741490461506.js";import{V as r,Y as s,l as a,_ as i,M as c,p as l,W as u,aV as v,A as f,m as p,av as d,cd as m,bk as g,r as x}from"./three.Vxh8Czkt1741490461506.js";import{P as h}from"./tweakpane.yDiyAAkA1741490461506.js";import{d as y,a3 as I,e as b,o as _,f as S,g as U,N as w,j as P,u as D,aj as E,ak as L,al as M,m as A}from"./@vue.NRI7TcgI1741490461506.js";import{_ as C}from"./@fesjs.IWF3W7Eu1741490461506.js";import"./postprocessing.wUw4_rsV1741490461506.js";import"./@vueuse.9Z-Ayxy41741490461506.js";import"./vue-router.5pMX5YFH1741490461506.js";import"./lodash-es.pklfUAS51741490461506.js";import"./@qlin.yHhFDldE1741490461506.js";import"./pinia.RD4r5tit1741490461506.js";import"./@floating-ui.BPbuo5Gx1741490461506.js";import"./@juggle.7yjBMqoW1741490461506.js";function F(){const t=['Shader "',"4285415sUMeAT","return (function() ","trace","random","onabort","bind","error","string","Matrix2","replace","constructor","chain","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","1363883tRQSXD","init","v3v","object","__proto__","table","name","3955002TLLojc","get","\" couldn't be loaded.","9223790eWbCGX","stateObject","apply","Vector4","debu","toString","hasOwnProperty","console","open","Matrix3","while (true) {}","2YjJYBW","counter","lastIndex","Vector3","info","gger","exec","WagnerLoadShaderException","1912496Cttgfi","67039489ceInQw","value","input","send","message","49mPDKqq","4PYwMlW","warn","Vector2","test","onload","responseText","9iBHotS","length","call","4373463HdtPMj","index","prototype","action","isArray","type"];return(F=function(){return t})()}!function(t,n){const e=T,o=F();for(;;)try{if(874898===-parseInt(e(409))/1+-parseInt(e(365))/2*(parseInt(e(389))/3)+parseInt(e(380))/4*(parseInt(e(396))/5)+-parseInt(e(416))/6+-parseInt(e(379))/7*(parseInt(e(373))/8)+-parseInt(e(386))/9*(parseInt(e(419))/10)+parseInt(e(374))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[T(421)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){z(this,(function(){const t=T,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(408),"i"),o=G(t(410));n[t(383)](o+t(407))&&e[t(383)](o+t(376))?G():o("0")}))()}();const N=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[T(421)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function T(t,n){const e=F();return(T=function(t,n){return e[t-=365]})(t,n)}N(void 0,(function(){const t=T,n=function(){const t=T;let n;try{n=Function(t(397)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(426)]=n[t(426)]||{},o=["log",t(381),t(369),t(402),"exception",t(414),t(398)];for(let r=0;r<o[t(387)];r++){const n=N[t(406)][t(391)][t(401)](N),s=o[r],a=e[s]||n;n[t(413)]=N[t(401)](N),n[t(424)]=a[t(424)][t(401)](a),e[s]=n}}))();function R(t,n,e){const o=T;if(typeof t!==o(412)||null===t)return t;const r=Array[o(393)](t)?[]:{};for(const s in t)t[o(425)](s)&&(r[s]=R(t[s])),s==n&&(r[n]=e);return r}function G(t){function n(t){const e=T;if(typeof t===e(403))return function(t){}[e(406)](e(429))[e(421)](e(366));1!==(""+t/t)[e(387)]||t%20==0?function(){return!0}[e(406)](e(423)+e(370))[e(388)](e(392)):function(){return!1}[e(406)](e(423)+e(370)).apply(e(420)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const j=k;!function(t,n){const e=k,o=O();for(;;)try{if(898584===parseInt(e(426))/1+-parseInt(e(422))/2*(parseInt(e(409))/3)+parseInt(e(417))/4+-parseInt(e(344))/5*(parseInt(e(346))/6)+parseInt(e(429))/7+parseInt(e(340))/8+-parseInt(e(339))/9*(parseInt(e(367))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[k(345)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){B(this,(function(){const t=k,n=new RegExp(t(399)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=W("init");n[t(390)](o+t(359))&&e.test(o+t(360))?W():o("0")}))()}();const V=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[k(345)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function k(t,n){const e=O();return(k=function(t,n){return e[t-=332]})(t,n)}function O(){const t=["return (function() ","camera","params","getOfflineTexture","renderer","setRenderTarget","texture","wrapS","setSize","chain","input","back","uniforms","magFilter","Mesh","toString","call","380ShlDNV","far","clone","error","while (true) {}","minFilter","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","passes","log","makePerspective","swapBuffers","tInput","CopyPass","innerWidth","PlaneGeometry","uuid","stencilBuffer","time","now","LinearFilter","addPass","render","Pass","test","exception","console","bind","projectionMatrix","scale","resolution","Reset","front","function *\\( *\\)","loadShadervf","value","gger","Stack","set","read","toScreen","startTime","OrthographicCamera","16449VlbFKw","string","trace","near","type","shader","copyPass","action","6795296mvJLxk","splice","quad",'{}.constructor("return this")( )',"RGBAFormat","398Jihvwo","length","constructor","useRGBA","880832gcdKVu","wrapT","passItems","10321493GjGmrd","scene","MeshBasicMaterial","settings","prototype","width","innerHeight","debu","info","height","278595WSRBba","4928896ZBTcSG","add","pass","material","10xaPKos","apply","4512828yQmpQZ","write","WebGLRenderTarget","RGBFormat"];return(O=function(){return t})()}V(void 0,(function(){const t=k;let n;try{n=Function(t(350)+t(420)+");")()}catch(r){n=window}const e=n[t(392)]=n[t(392)]||{},o=[t(375),"warn",t(337),t(370),t(391),"table",t(411)];for(let s=0;s<o[t(423)];s++){const n=V[t(424)][t(333)][t(393)](V),r=o[s],a=e[r]||n;n.__proto__=V[t(393)](V),n.toString=a[t(365)][t(393)](a),e[r]=n}}))();class H{constructor(t,n){const e=k;this[e(334)]=1,this[e(338)]=1,this[e(332)]=n||{},this.useRGBA=this[e(332)][e(425)]||!1,this.renderer=t,this[e(415)]=this[e(379)](this.settings),this[e(430)]=new l,this[e(419)]=new(i[e(364)])(new(i[e(381)])(1,1),new(i[e(431)])),this[e(430)][e(341)](this[e(419)]),this[e(351)]=new(i[e(408)])(1,1,1,1,-1e4,1e4),this[e(398)]=new u(1,1,{minFilter:void 0!==this[e(332)].minFilter?this[e(332)][e(372)]:i[e(386)],magFilter:void 0!==this[e(332)][e(363)]?this[e(332)][e(363)]:i[e(386)],wrapS:void 0!==this[e(332)][e(357)]?this[e(332)].wrapS:v,wrapT:void 0!==this.settings[e(427)]?this[e(332)][e(427)]:v,format:this[e(425)]?i[e(421)]:i[e(349)],type:void 0!==this[e(332)].type?this.settings[e(413)]:f,stencilBuffer:void 0===this.settings[e(383)]||this[e(332)][e(383)]}),this[e(361)]=this.front[e(369)](),this.startTime=Date[e(385)](),this[e(374)]={},this[e(403)]={passItems:[],passes:[]}}[j(387)](t,n,e,o){const r=j;this.loadShadervf(n);const s={shaderName:t,params:e,uuid:o,shader:this[r(414)]};this.Stack[r(428)].push(s)}removePass(t){const n=j;for(let e=this.Stack.passItems.length-1;e>=0;e--)this[n(403)].passItems[e][n(382)]===parseInt(t)&&this[n(403)][n(428)][n(418)](e,1);console[n(375)](this.Stack[n(428)])}CopyPass(){const t=j;this[t(389)].call(this);return this[t(400)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}loadShadervf(t){const n=j,e=n(373);return this.shader=function(t,n){const e=T,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,l=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,u={sampler2D:{type:"t",value:()=>new s},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(i[T(382)])},vec3:{type:"v3",value:()=>new(i[T(368)])},vec4:{type:"v4",value:()=>new(i[T(422)])},bvec2:{type:"v2",value:()=>new(i[T(382)])},bvec3:{type:"v3",value:()=>new(i[T(368)])},bvec4:{type:"v4",value:()=>new(i[T(422)])},ivec2:{type:"v2",value:()=>new(i[T(382)])},ivec3:{type:"v3",value:()=>new(i[T(368)])},ivec4:{type:"v4",value:()=>new(i[T(422)])},mat2:{type:"v2",value:()=>new(i[T(404)])},mat3:{type:"v3",value:()=>new(i[T(428)])},mat4:{type:"v4",value:()=>new c}},v={float:{type:"fv",value:()=>[]},vec3:{type:e(411),value:()=>[]}};let f;const p={resolution:{type:"v2",value:new r(1,1),default:!0},time:{type:"f",value:Date.now(),default:!0},tInput:{type:"t",value:new s,default:!0}};let d,m;for(;null!==(f=o[e(371)](n));)f.index===o[e(367)]&&o[e(367)]++,d=f[1],m=f[2],p[m]={type:u[d][e(394)],value:u[d][e(375)]()};for(;null!==(f=l[e(371)](n));)f[e(390)]===o[e(367)]&&o[e(367)]++,d=f[1],m=f[2],f[3],p[m]={type:v[d][e(394)],value:v[d][e(375)]()};return new a({uniforms:p,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(414)]}[j(389)](t){const n=j;this.shader=null,this[n(352)]={}}[j(397)](){const t=j;this[t(405)]=this[t(398)],this[t(347)]=this[t(361)]}onWindowResize(t,n){const e=j,o=window[e(380)],r=window[e(335)];t.setSize(1*o,1*r),n[e(394)][e(376)](70,o/r,n[e(412)],n[e(368)]),this[e(358)](o,r);return this[e(353)](o,r,!0)}[j(358)](t,n){const e=j;this.width=t,this.height=n,this[e(351)].projectionMatrix.makeOrthographic(t/-2,t/2,n/2,n/-2,this[e(351)][e(412)],this[e(351)].far),this[e(419)][e(395)][e(404)](t,n,1),this[e(398)][e(358)](t,n),this[e(361)][e(358)](t,n)}[j(353)](t,n,e){const o=j;return new(i[o(348)])(t,n,{minFilter:i[o(386)],magFilter:p,format:e?i[o(421)]:i[o(349)]})}[j(388)](t,n,e,o){const r=j;this.renderer.setRenderTarget(this[r(347)]),this.renderer[r(388)](t,n),o||this[r(377)]()}[j(377)](){const t=j,n=this[t(347)];this[t(347)]=this[t(405)],this[t(405)]=n}[j(342)](){const t=j;for(let n=0;n<this.Stack.passItems[t(423)];n++){const e=this.Stack.passItems[n].shader,o=this[t(403)][t(428)][n].params;if(this.renderer[t(355)](this.write),e instanceof a){this[t(419)][t(343)]=e,this.quad[t(343)].uniforms[t(378)][t(401)]=this.read.texture,this[t(419)][t(343)][t(362)].resolution[t(401)][t(404)](this.width,this.height),this[t(419)][t(343)][t(362)][t(384)].value=.001*(Date[t(385)]()-this[t(407)]);for(const n in o)this[t(419)].material[t(362)][n][t(401)]=o[n];this.renderer[t(388)](this[t(430)],this[t(351)]),this[t(377)]()}}}[j(406)](t,n){const e=j;this[e(354)].setRenderTarget(null),this[e(419)][e(343)]=this.copyPass,this[e(419)][e(343)][e(362)][e(378)][e(401)]=this[e(405)][e(356)],this[e(419)][e(343)][e(362)][e(396)][e(401)].set(this[e(334)],this[e(338)]),this[e(354)].render(this[e(430)],this[e(351)])}}function W(t){function n(t){const e=k;if(typeof t===e(410))return function(t){}[e(424)](e(371))[e(345)]("counter");1!==(""+t/t)[e(423)]||t%20==0?function(){return!0}[e(424)](e(336)+e(402))[e(366)](e(416)):function(){return!1}[e(424)](e(336)+e(402)).apply("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const X="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",q=$;!function(t,n){const e=$,o=Q();for(;;)try{if(603756===parseInt(e(173))/1+parseInt(e(156))/2*(parseInt(e(142))/3)+-parseInt(e(180))/4+parseInt(e(169))/5+-parseInt(e(135))/6+parseInt(e(118))/7*(-parseInt(e(161))/8)+parseInt(e(177))/9*(parseInt(e(133))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[$(121)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){Z(this,(function(){const t=$,n=new RegExp(t(162)),e=new RegExp(t(145),"i"),o=K(t(132));n.test(o+t(120))&&e[t(168)](o+t(178))?K():o("0")}))()}();const J=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[$(121)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function $(t,n){const e=Q();return($=function(t,n){return e[t-=106]})(t,n)}function Q(){const t=["RGBPass","string","DOTPass","108MhomWv","console","castShadow","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","VIGNETTE2Pass","material","constructor","debu","SEPIAPass","后处理类型","SOBELPass","InvertPass","length","counter","48076vJDfgM","CIRCULARPass","map","keys","toScreen","87288SaBYQq","function *\\( *\\)","addPass","onWindowResize","Vector2","render","random","test","4815360gtCMQu","addButton","translate","text","237127NguNVr","values","BufferGeometry","addBlade","9WbHiLo","input","while (true) {}","1873216JJLKNf","__proto__","SNOISEPass","list","移除~","新增通道","POISSONPass","Reset","gger","plugins/postProcessing/image/1324-normal.jpg","warn","DENOISEPass","bind","split","581hSOiSm","toString","chain","apply","removePass","postProcessing","plugins/postProcessing/image/1324.jpg","exception","value","add","mergeGeometries","target","log","pass","init","10512580dWcUrr","call","6834912uUyjsE","return (function() ","change","addFolder"];return(Q=function(){return t})()}J(void 0,(function(){const t=$,n=function(){const t=$;let n;try{n=Function(t(136)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(143)]=n[t(143)]||{},o=[t(130),t(114),"info","error",t(125),"table","trace"];for(let r=0;r<o.length;r++){const n=J.constructor.prototype[t(116)](J),s=o[r],a=e[s]||n;n[t(181)]=J.bind(J),n[t(119)]=a[t(119)][t(116)](a),e[s]=n}}))();function K(t){function n(t){const e=$;if(typeof t===e(140))return function(t){}[e(148)](e(179))[e(121)](e(155));1!==(""+t/t)[e(154)]||t%20==0?function(){return!0}[e(148)](e(149)+e(112))[e(134)]("action"):function(){return!1}.constructor(e(149)+"gger")[e(121)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const Y=C(y({__name:q(123),async setup(o){const r=q;let s,a;const{camera:c,renderer:l,scene:u,sizes:v}=t();for(var f=new(i[r(175)]),p=[],y=0;y<100;y++){var b=new d(100,100,100);b[r(171)](1500*Math[r(167)](),1500*Math[r(167)](),1500*Math[r(167)]()),p.push(b)}f=m[r(128)](p);const _=([s,a]=I((()=>e({map:r(124)}))),s=await s,a(),s),S=([s,a]=I((()=>e({map:r(113)}))),s=await s,a(),s);var U=new g({map:_.map,normalMap:S[r(158)],normalScale:new(i[r(165)])(.8,-.8),shininess:100}),w=new x(f,U);w[r(144)]=!0,w.receiveShadow=!0,u.value[r(127)](w);const P=new H(l[r(126)],{useRGBA:!0}),D=new h;let E=null,L=[{text:r(153),value:{InvertPass:X}},{text:"FXAAPass",value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:r(150),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:r(106),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:"BOXBLURPass",value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:r(115),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:"CGAPass",value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:S[r(158)]}}},{text:r(152),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:r(139),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:r(141),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:r(157),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:r(110),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:"VIGNETTE1Pass",value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:r(146),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:"FREICHENPass",value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:"TOONPass",value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],M=r(153),A=X,C=null;D[r(176)]({view:r(107),label:r(151),options:L,value:""}).on(r(137),(t=>{E=t[r(126)]}));const F=D[r(170)]({title:"新增",label:r(109)});let z=0;F.on("click",(t=>{const n=r;M=Object[n(159)](E)[0],A=Object[n(174)](E)[0],C=Object[n(174)](E)[1];let e=z++,o=D[n(138)]({title:M});for(const r in C){let t=C[r];o[n(176)]({view:n(172),label:r,parse:t=>String(t),value:t})}o[n(170)]({title:n(108)+e,label:"关闭通道"}).on("click",(t=>{const e=n;let o=t[e(129)].title[e(117)]("~")[1];P[e(122)](o)})).on("click",(()=>{o.dispose()}));let s=R(C,t.target.label,t.value);P[n(163)](M,A,s,e)})),P[r(164)](l[r(126)],c[r(126)]);const{onLoop:N}=n();return N((({delta:t})=>{const n=r;w&&(l.value.autoClearColor=!0,P[n(111)](),w[n(147)]=U,P[n(166)](u[n(126)],c.value),P[n(131)](),P[n(160)](u[n(126)],c[n(126)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),tt=at;!function(t,n){const e=at,o=et();for(;;)try{if(442684===-parseInt(e(459))/1*(-parseInt(e(456))/2)+parseInt(e(437))/3+parseInt(e(440))/4+-parseInt(e(424))/5*(-parseInt(e(453))/6)+-parseInt(e(435))/7*(-parseInt(e(455))/8)+-parseInt(e(438))/9+-parseInt(e(458))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const nt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function et(){const t=["perspectiveCameraRef","__proto__","TresAmbientLight","test","gger","table","167845gkRZDD","#ffffff","input","exception","chain","counter","warn","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","while (true) {}","console","return (function() ","7VLDxcP","call","1100859ETzOlE","3777300PxfjdD","string","656948RquigB","toString","#000000","constructor","function *\\( *\\)","TresPerspectiveCamera","stateObject",'{}.constructor("return this")( )',"info","apply","prototype","action","debu","18tGbjdZ","manual","6893944SgEJLv","54004nPXozU","bind","11712960aoIOdF","20RNJNns"];return(et=function(){return t})()}!function(){nt(this,(function(){const t=at,n=new RegExp(t(444)),e=new RegExp(t(431),"i"),o=it("init");n[t(421)](o+t(428))&&e[t(421)](o+t(426))?it():o("0")}))()}();const ot=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();ot(void 0,(function(){const t=at;let n;try{n=Function(t(434)+t(447)+");")()}catch(r){n=window}const e=n.console=n[t(433)]||{},o=["log",t(430),t(448),"error",t(427),t(423),"trace"];for(let s=0;s<o.length;s++){const n=ot.constructor[t(450)].bind(ot),r=o[s],a=e[r]||n;n[t(461)]=ot[t(457)](ot),n[t(441)]=a[t(441)].bind(a),e[r]=n}}))();const rt={ref:tt(460),position:[600,850,-1500],fov:45,near:.1,far:1e5},st=y({__name:"postProcessingEditor",setup(t){const e=tt,r={clearColor:e(442),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(454)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=b("TresCanvas");return _(),S(i,A(r,{"window-size":""}),{default:U((()=>[w(a(445),rt,null,512),P(D(o),E(L(s)),null,16),n[0]||(n[0]=w(a(420),{color:"#ffffff",intensity:2},null,-1)),n[1]||(n[1]=w("TresDirectionalLight",{position:[100,100,0],intensity:2,color:a(425)},null,-1)),(_(),S(M,null,{default:U((()=>[P(Y)])),_:1}))])),_:1},16)}}});function at(t,n){const e=et();return(at=function(t,n){return e[t-=420]})(t,n)}function it(t){function n(t){const e=at;if(typeof t===e(439))return function(t){}[e(443)](e(432))[e(449)](e(429));1!==(""+t/t).length||t%20==0?function(){return!0}[e(443)](e(452)+e(422))[e(436)](e(451)):function(){return!1}[e(443)](e(452)+e(422))[e(449)](e(446)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{st as default};
