import"./all.three.q3DPAGr01743660816268.js";import"./reflectorDiffuse.5zy0dW_U1743660816268.js";import"./vite-plugin-qiankun.DT7p3NC_1743660816268.js";import"./index.wgv4wbeG1743660816268.js";import{F as t,C as e}from"./three-stdlib.rtqrSiFZ1743660816268.js";import{V as n,K as i,C as a,n as l,u as r,aY as s,a as o}from"./three.2wx8FU0g1743660816268.js";import"./whiteFloor.45lmiqp31743660816268.js";function p(t){const e={...t};return"defines"in t&&(e.defines={...t.defines}),"uniforms"in t&&(e.uniforms=i.clone(t.uniforms)),e}const x={defines:{X_IS_EVEN:1,Y_IS_EVEN:1},uniforms:{map:{value:null},originalMapSize:{value:new n},parentMapSize:{value:new n},parentLevel:{value:0}},vertexShader:"\n\t\tvarying vec2 vUv;\n\t\tvoid main() {\n\n\t\t\t#include <begin_vertex>\n\t\t\t#include <project_vertex>\n\t\t\tvUv = uv;\n\n\t\t}\n\t",fragmentShader:'\n\t\tvarying vec2 vUv;\n\t\tuniform sampler2D map;\n\t\tuniform int parentLevel;\n\t\tuniform vec2 parentMapSize;\n\t\tuniform vec2 originalMapSize;\n\n\t\t\n\n\t// Without original size argument for power of two targets\n\tvec4 packedTexture2DLOD( sampler2D tex, vec2 uv, int level ) {\n\n\t\t// the fraction of the uv space used by the target mip\n\t\tfloat targetSubview = 1.0 / pow( 2.0, float( level ) );\n\t\tfloat widthRatio = 2.0 / 3.0;\n\t\tvec2 scaledDimensions = vec2( targetSubview * widthRatio, targetSubview );\n\n\t\t// all levels > 0 are on the right third of the texture\n\t\t// y is offset from the bottom\n\t\tvec2 offset = vec2(\n\t\t\tlevel > 0 ? widthRatio : 0.0,\n\t\t\tlevel > 0 ? targetSubview : 0.0\n\t\t);\n\n\t\tvec2 samplePoint = mix( offset, offset + scaledDimensions, uv );\n\t\treturn texture2D( tex, samplePoint );\n\n\t}\n\n\tvec4 packedTexture2DLOD( sampler2D tex, vec2 uv, float level ) {\n\n\t\tfloat ratio = mod( level, 1.0 );\n\t\tint minLevel = int( floor( level ) );\n\t\tint maxLevel = int( ceil( level ) );\n\n\t\tvec4 minValue = packedTexture2DLOD( tex, uv, minLevel );\n\t\tvec4 maxValue = packedTexture2DLOD( tex, uv, maxLevel );\n\n\t\treturn mix( minValue, maxValue, ratio );\n\n\t}\n\n\t// With original size argument\n\tvec4 packedTexture2DLOD( sampler2D tex, vec2 uv, int level, vec2 originalPixelSize ) {\n\n\t\tfloat floatLevel = float( level );\n\t\tvec2 atlasSize;\n\t\tatlasSize.x = floor( originalPixelSize.x * 1.5 );\n\t\tatlasSize.y = originalPixelSize.y;\n\n\t\t// we stop making mip maps when one dimension == 1\n\t\tfloat maxLevel = min( floor( log2( originalPixelSize.x ) ), floor( log2( originalPixelSize.y ) ) );\n\t\tfloatLevel = min( floatLevel, maxLevel );\n\n\t\t// use inverse pow of 2 to simulate right bit shift operator\n\t\tvec2 currentPixelDimensions = floor( originalPixelSize / pow( 2.0, floatLevel ) );\n\t\tvec2 pixelOffset = vec2(\n\t\t\tfloatLevel > 0.0 ? originalPixelSize.x : 0.0,\n\t\t\tfloatLevel > 0.0 ? currentPixelDimensions.y : 0.0\n\t\t);\n\n\t\t// "minPixel / atlasSize" samples the top left piece of the first pixel\n\t\t// "maxPixel / atlasSize" samples the bottom right piece of the last pixel\n\t\tvec2 minPixel = pixelOffset;\n\t\tvec2 maxPixel = pixelOffset + currentPixelDimensions;\n\t\tvec2 samplePoint = mix( minPixel, maxPixel, uv );\n\t\tsamplePoint /= atlasSize;\n\n\t\tvec2 halfPixelSize = 1.0 / ( 2.0 * atlasSize );\n\t\tsamplePoint = min( samplePoint, maxPixel / atlasSize - halfPixelSize );\n\t\tsamplePoint = max( samplePoint, minPixel / atlasSize + halfPixelSize );\n\n\t\treturn texture2D( tex, samplePoint );\n\n\t}\n\n\tvec4 packedTexture2DLOD( sampler2D tex, vec2 uv, float level, vec2 originalPixelSize ) {\n\n\t\tfloat ratio = mod( level, 1.0 );\n\t\tint minLevel = int( floor( level ) );\n\t\tint maxLevel = int( ceil( level ) );\n\n\t\tvec4 minValue = packedTexture2DLOD( tex, uv, minLevel, originalPixelSize );\n\t\tvec4 maxValue = packedTexture2DLOD( tex, uv, maxLevel, originalPixelSize );\n\n\t\treturn mix( minValue, maxValue, ratio );\n\n\t}\n\n\n\n\t\t#if X_IS_EVEN && Y_IS_EVEN\n\n\t\t#define SAMPLES 4\n\t\t#define WIDTH 2\n\t\t#define HEIGHT 2\n\n\t\t#elif X_IS_EVEN\n\n\t\t#define SAMPLES 6\n\t\t#define WIDTH 2\n\t\t#define HEIGHT 3\n\n\t\t#elif Y_IS_EVEN\n\n\t\t#define SAMPLES 6\n\t\t#define WIDTH 3\n\t\t#define HEIGHT 2\n\n\t\t#else\n\n\t\t#define SAMPLES 9\n\t\t#define WIDTH 3\n\t\t#define HEIGHT 3\n\n\t\t#endif\n\n\t\tvec4 sampleAt( vec2 uv ) {\n\n\t\t\treturn packedTexture2DLOD( map, uv, parentLevel, originalMapSize );\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvec2 childMapSize = parentMapSize / 2.0;\n\t\t\t// vec2 childPixelSize = 1.0 / childMapSize;\n\t\t\t// vec2 halfChildPixelSize = childPixelSize / 2.0;\n\t\t\tvec2 childPixelPos = floor( vUv * childMapSize );\n\n\t\t\tvec2 parentPixelSize = 1.0 / parentMapSize;\n\t\t\tvec2 halfParentPixelSize = parentPixelSize / 2.0;\n\t\t\tvec2 parentPixelPos = childPixelPos * 2.0;\n\n\t\t\tvec2 baseUv = ( parentPixelPos / parentMapSize ) + halfParentPixelSize;\n\n\t\t\tvec4 samples[ SAMPLES ];\n\t\t\tfloat weights[ SAMPLES ];\n\n\t\t\t#if X_IS_EVEN && Y_IS_EVEN\n\n\t\t\tsamples[ 0 ] = sampleAt( baseUv );\n\t\t\tsamples[ 1 ] = sampleAt( baseUv + vec2( parentPixelSize.x, 0.0 ) );\n\t\t\tsamples[ 2 ] = sampleAt( baseUv + vec2( 0.0, parentPixelSize.y ) );\n\t\t\tsamples[ 3 ] = sampleAt( baseUv + vec2( parentPixelSize.x, parentPixelSize.y ) );\n\n\t\t\tweights[ 0 ] = 0.25;\n\t\t\tweights[ 1 ] = 0.25;\n\t\t\tweights[ 2 ] = 0.25;\n\t\t\tweights[ 3 ] = 0.25;\n\n\t\t\t#elif X_IS_EVEN\n\n\t\t\tfloat wx0 = 0.5;\n\t\t\tfloat wx1 = 0.5;\n\n\t\t\tfloat yden = 2.0 * parentMapSize.y + 1.0;\n\t\t\tfloat wy0 = ( parentMapSize.y - parentPixelPos.y ) / yden;\n\t\t\tfloat wy1 = ( parentMapSize.y ) / yden;\n\t\t\tfloat wy2 = ( parentPixelPos.y + 1.0 ) / yden;\n\n\t\t\tsamples[ 0 ] = sampleAt( baseUv );\n\t\t\tsamples[ 1 ] = sampleAt( baseUv + vec2( parentPixelSize.x, 0.0 ) );\n\n\t\t\tsamples[ 2 ] = sampleAt( baseUv + vec2( 0.0, parentPixelSize.y ) );\n\t\t\tsamples[ 3 ] = sampleAt( baseUv + vec2( parentPixelSize.x, parentPixelSize.y ) );\n\n\t\t\tsamples[ 4 ] = sampleAt( baseUv + vec2( 0.0, 2.0 * parentPixelSize.y ) );\n\t\t\tsamples[ 5 ] = sampleAt( baseUv + vec2( parentPixelSize.x, 2.0 * parentPixelSize.y ) );\n\n\t\t\tweights[ 0 ] = wx0 * wy0;\n\t\t\tweights[ 1 ] = wx1 * wy0;\n\n\t\t\tweights[ 2 ] = wx0 * wy1;\n\t\t\tweights[ 3 ] = wx1 * wy1;\n\n\t\t\tweights[ 4 ] = wx0 * wy2;\n\t\t\tweights[ 5 ] = wx1 * wy2;\n\n\t\t\t#elif Y_IS_EVEN\n\n\t\t\tfloat xden = 2.0 * parentMapSize.x + 1.0;\n\t\t\tfloat wx0 = ( parentMapSize.x - parentPixelPos.x ) / xden;\n\t\t\tfloat wx1 = ( parentMapSize.x ) / xden;\n\t\t\tfloat wx2 = ( parentPixelPos.x + 1.0 ) / xden;\n\n\t\t\tfloat wy0 = 0.5;\n\t\t\tfloat wy1 = 0.5;\n\n\t\t\tsamples[ 0 ] = sampleAt( baseUv );\n\t\t\tsamples[ 1 ] = sampleAt( baseUv + vec2( parentPixelSize.x, 0.0 ) );\n\t\t\tsamples[ 2 ] = sampleAt( baseUv + vec2( 2.0 * parentPixelSize.x, 0.0 ) );\n\n\t\t\tsamples[ 3 ] = sampleAt( baseUv + vec2( 0.0, parentPixelSize.y ) );\n\t\t\tsamples[ 4 ] = sampleAt( baseUv + vec2( parentPixelSize.x, parentPixelSize.y ) );\n\t\t\tsamples[ 5 ] = sampleAt( baseUv + vec2( 2.0 * parentPixelSize.x, parentPixelSize.y ) );\n\n\t\t\tweights[ 0 ] = wx0 * wy0;\n\t\t\tweights[ 1 ] = wx1 * wy0;\n\t\t\tweights[ 2 ] = wx2 * wy0;\n\n\t\t\tweights[ 3 ] = wx0 * wy1;\n\t\t\tweights[ 4 ] = wx1 * wy1;\n\t\t\tweights[ 5 ] = wx2 * wy1;\n\n\t\t\t#else\n\n\t\t\tfloat xden = 2.0 * parentMapSize.x + 1.0;\n\t\t\tfloat wx0 = ( parentMapSize.x - parentPixelPos.x ) / xden;\n\t\t\tfloat wx1 = ( parentMapSize.x ) / xden;\n\t\t\tfloat wx2 = ( parentPixelPos.x + 1.0 ) / xden;\n\n\t\t\tfloat yden = 2.0 * parentMapSize.y + 1.0;\n\t\t\tfloat wy0 = ( parentMapSize.y - parentPixelPos.y ) / yden;\n\t\t\tfloat wy1 = ( parentMapSize.y ) / yden;\n\t\t\tfloat wy2 = ( parentPixelPos.y + 1.0 ) / yden;\n\n\t\t\tsamples[ 0 ] = sampleAt( baseUv );\n\t\t\tsamples[ 1 ] = sampleAt( baseUv + vec2( parentPixelSize.x, 0.0 ) );\n\t\t\tsamples[ 2 ] = sampleAt( baseUv + vec2( 2.0 * parentPixelSize.x, 0.0 ) );\n\n\t\t\tsamples[ 3 ] = sampleAt( baseUv + vec2( 0.0, parentPixelSize.y ) );\n\t\t\tsamples[ 4 ] = sampleAt( baseUv + vec2( parentPixelSize.x, parentPixelSize.y ) );\n\t\t\tsamples[ 5 ] = sampleAt( baseUv + vec2( 2.0 * parentPixelSize.x, parentPixelSize.y ) );\n\n\t\t\tsamples[ 6 ] = sampleAt( baseUv + vec2( 0.0, 2.0 * parentPixelSize.y ) );\n\t\t\tsamples[ 7 ] = sampleAt( baseUv + vec2( parentPixelSize.x, 2.0 * parentPixelSize.y ) );\n\t\t\tsamples[ 8 ] = sampleAt( baseUv + vec2( 2.0 * parentPixelSize.x, 2.0 * parentPixelSize.y ) );\n\n\t\t\tweights[ 0 ] = wx0 * wy0;\n\t\t\tweights[ 1 ] = wx1 * wy0;\n\t\t\tweights[ 2 ] = wx2 * wy0;\n\n\t\t\tweights[ 3 ] = wx0 * wy1;\n\t\t\tweights[ 4 ] = wx1 * wy1;\n\t\t\tweights[ 5 ] = wx2 * wy1;\n\n\t\t\tweights[ 6 ] = wx0 * wy2;\n\t\t\tweights[ 7 ] = wx1 * wy2;\n\t\t\tweights[ 8 ] = wx2 * wy2;\n\n\t\t\t#endif\n\n\t\t\t<mipmap_logic>\n\n\t\t}\n\t'},f=new a;class v{constructor(n){n||(n="\n\n\t\t\t\t#pragma unroll_loop\n\t\t\t\tfor ( int i = 0; i < SAMPLES; i ++ ) {\n\n\t\t\t\t\tgl_FragColor += samples[ i ] * weights[ i ];\n\n\t\t\t\t}\n\n\t\t\t");const i=p(x);i.fragmentShader=i.fragmentShader.replace(/<mipmap_logic>/g,n);const a=new Array(4);a[0]=new l(p(i)),a[0].defines.X_IS_EVEN=0,a[0].defines.Y_IS_EVEN=0,a[1]=new l(p(i)),a[1].defines.X_IS_EVEN=1,a[1].defines.Y_IS_EVEN=0,a[2]=new l(p(i)),a[2].defines.X_IS_EVEN=0,a[2].defines.Y_IS_EVEN=1,a[3]=new l(p(i)),a[3].defines.X_IS_EVEN=1,a[3].defines.Y_IS_EVEN=1;const o=new r;o.texture.minFilter=s,o.texture.magFilter=s,this._swapTarget=o,this._copyQuad=new t(new l(e)),this._mipQuad=new t(null),this._mipMaterials=a}update(t,e,n,i=!1){t.isWebGLRenderTarget&&(t=t.texture);const a=n.autoClear,l=n.getClearAlpha(),r=n.getRenderTarget();n.getClearColor(f);const s=this._copyQuad,p=this._mipQuad,x=this._swapTarget,v=this._mipMaterials;let m,c;i?(m=o.floorPowerOfTwo(t.image.width),c=o.floorPowerOfTwo(t.image.height)):(m=Math.floor(t.image.width),c=Math.floor(t.image.height));const u=Math.floor(1.5*m),w=Math.floor(c);e.setSize(u,w),x.texture.type!==e.texture.type?(x.dispose(),x.copy(e),x.texture.image={...x.texture.image}):x.setSize(u,w),n.autoClear=!1,n.setClearColor(0),n.setClearAlpha(),s.material.uniforms.tDiffuse.value=t,s.camera.setViewOffset(m,c,0,0,u,w),n.setRenderTarget(e),n.clear(),s.render(n),n.setRenderTarget(x),n.clear(),s.render(n);let S=m,d=c,h=0;for(;S>1&&d>1;){const t=v[(S%2==0?1:0)|(d%2==0?2:0)];t.uniforms.map.value=x.texture,t.uniforms.parentLevel.value=h,t.uniforms.parentMapSize.value.set(S,d),t.uniforms.originalMapSize.value.set(m,c),p.material=t,S=Math.floor(S/2),d=Math.floor(d/2);const i=w-2*d;n.setRenderTarget(e),p.camera.setViewOffset(S,d,-m,-i,u,w),p.render(n),n.setRenderTarget(x),t.uniforms.map.value=e.texture,p.render(n),h++}return n.setRenderTarget(r),n.setClearAlpha(l),n.setClearColor(f),n.autoClear=a,h+1}dispose(){this._swapTarget.dispose(),this._mipQuad.dispose(),this._copyQuad.dispose(),this._mipMaterials.forEach((t=>t.dispose()))}}!function(t,e){for(var n=S,i=d();;)try{if(695391===-parseInt(n(371))/1*(parseInt(n(360))/2)+parseInt(n(356))/3*(parseInt(n(379))/4)+parseInt(n(381))/5*(parseInt(n(358))/6)+-parseInt(n(365))/7+-parseInt(n(369))/8+-parseInt(n(370))/9*(-parseInt(n(353))/10)+parseInt(n(377))/11)break;i.push(i.shift())}catch(a){i.push(i.shift())}}();var m,c=(m=!0,function(t,e){var n=m?function(){if(e){var n=e[S(375)](t,arguments);return e=null,n}}:function(){};return m=!1,n});!function(){c(this,(function(){var t=S,e=new RegExp(t(357)),n=new RegExp(t(385),"i"),i=h(t(350));e[t(354)](i+t(363))&&n[t(354)](i+t(352))?h():i("0")}))()}();var u,w=(u=!0,function(t,e){var n=u?function(){if(e){var n=e.apply(t,arguments);return e=null,n}}:function(){};return u=!1,n});function S(t,e){var n=d();return S=function(t,e){return n[t-=348]},S(t,e)}function d(){var t=["call","3PLztxM","function *\\( *\\)","8850rMkHqs","trace","2pLImYw","string","toString","chain",'{}.constructor("return this")( )',"9561475tnfCQB","info","length","console","3740088wjGVYC","118170GUxNaA","1008783gzwWVU","bind","prototype","exception","apply","table","30781091QuJqHC","counter","1367016lFAxEg","action","235DhYNrz","constructor","__proto__","debu","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","error","stateObject","init","gger","input","250RlTUlz","test"];return(d=function(){return t})()}function h(t){function e(t){var n=S;if(typeof t===n(361))return function(t){}.constructor("while (true) {}")[n(375)](n(378));1!==(""+t/t)[n(367)]||t%20==0?function(){return!0}[n(382)]("debu"+n(351))[n(355)](n(380)):function(){return!1}[n(382)](n(384)+n(351))[n(375)](n(349)),e(++t)}try{if(t)return e;e(0)}catch(n){}}w(void 0,(function(){for(var t=S,e=function(){var t,e=S;try{t=Function("return (function() "+e(364)+");")()}catch(n){t=window}return t}(),n=e[t(368)]=e[t(368)]||{},i=["log","warn",t(366),t(348),t(374),t(376),t(359)],a=0;a<i[t(367)];a++){var l=w.constructor[t(373)][t(372)](w),r=i[a],s=n[r]||l;l[t(383)]=w.bind(w),l.toString=s[t(362)][t(372)](s),n[r]=l}}))();export{v as P};
