import{_ as n,cz as t,c3 as e,a0 as o,C as i,h as r,ab as a}from"./three.NPKhDGTA1734239885681.js";import{m as s,e as l,b as u}from"./@tresjs.qWeugQU61734239885681.js";import{d as c,b as f,a6 as p,a3 as m,o as b,D as g,J as v,aj as y,ak as d,u as h}from"./@vue.-THQH3GC1734239885681.js";const w=x;!function(n,t){const e=x,o=S();for(;;)try{if(793074===-parseInt(e(357))/1*(-parseInt(e(400))/2)+-parseInt(e(402))/3+-parseInt(e(381))/4+parseInt(e(398))/5*(parseInt(e(358))/6)+-parseInt(e(362))/7*(parseInt(e(366))/8)+-parseInt(e(353))/9*(parseInt(e(372))/10)+parseInt(e(349))/11)break;o.push(o.shift())}catch(i){o.push(o.shift())}}();const _=function(){let n=!0;return function(t,e){const o=n?function(){if(e){const n=e[x(375)](t,arguments);return e=null,n}}:function(){};return n=!1,o}}();function x(n,t){const e=S();return(x=function(n,t){return e[n-=346]})(n,t)}!function(){_(this,(function(){const n=x,t=new RegExp(n(359)),e=new RegExp(n(355),"i"),o=T(n(395));t[n(365)](o+"chain")&&e[n(365)](o+n(385))?T():o("0")}))()}();const z=function(){let n=!0;return function(t,e){const o=n?function(){if(e){const n=e.apply(t,arguments);return e=null,n}}:function(){};return n=!1,o}}();function S(){const n=["warn","#84ccff","counter","1636448kWahJb","toString",'{}.constructor("return this")( )',"verticesNeedUpdate","input","Mesh","value","push","string","return (function() ","table","traverse","TresMesh","sin","init","DoubleSide","offsetY","15ScWgsg","model","72GmFzCu","constructor","68865HEnLcA","length","uTime","Color","15821476VfHbZC","dispose","stateObject","call","4763250wSVDjO","debu","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","AdditiveBlending","7227psnYfi","2131188StYuCb","function *\\( *\\)","uOpacity","uniforms","1121029eWQvmp","geometry","gger","test","24nmMQiT","color","opacity","info","exception","__proto__","20GjnsIO","action","bind","apply","prototype","console"];return(S=function(){return n})()}z(void 0,(function(){const n=x,t=function(){const n=x;let t;try{t=Function(n(390)+n(383)+");")()}catch(e){t=window}return t}(),e=t[n(377)]=t[n(377)]||{},o=["log",n(378),n(369),"error",n(370),n(391),"trace"];for(let i=0;i<o[n(346)];i++){const t=z.constructor[n(376)][n(374)](z),r=o[i],a=e[r]||t;t[n(371)]=z[n(374)](z),t.toString=a[n(382)][n(374)](a),e[r]=t}}))();const P=c({__name:"xRayEffect",props:{model:{},color:{default:w(379)},opacity:{default:1}},async setup(e){const o=w;let i,r;const a=e,c=f(),h=[];a[o(399)][o(392)]((t=>{const e=o;t instanceof n[e(386)]&&(t.geometry[e(384)]=!0,h[e(388)](t.geometry))}));const _=([i,r]=p((()=>u({map:"./plugins/medical/image/brainXRayLight.png"}))),i=await i,r(),i),x={uniforms:{c:{type:"f",value:1.11},p:{type:"f",value:1},glowColor:{type:"c",value:new(n[o(348)])(a[o(367)])},lightningTexture:{type:"t",value:_.map},offsetY:{type:"f",value:.1},uTime:{type:"f",value:0},uOpacity:{type:"f",value:a.opacity}},vertexShader:"uniform float c;\nuniform float p;\nuniform float uTime;\nvarying float intensity;\nvarying vec2 vUv;\nvoid main(){\n    vUv=uv;\n    vec3 vNormal=normalize(normalMatrix*normal);\n    intensity=pow(c-abs(dot(vNormal,vec3(0,0,1))),p);\n    gl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.);\n}",fragmentShader:"uniform vec3 glowColor;\nuniform sampler2D lightningTexture;\nvarying float intensity;\nvarying vec2 vUv;\nuniform float offsetY;\nuniform float uTime;\nuniform float uOpacity;\n\nvoid main(){\n  vec2 uv=vUv;\n  uv.y+=offsetY;\n  vec3 glow=glowColor*intensity;\n  vec3 color=vec3(step(.1,uv.y)-step(.2,uv.y))-vec3(texture2D(lightningTexture,uv));\n  float alpha=clamp(cos(uTime*3.),.5,1.);\n  gl_FragColor=vec4(glow+color,alpha*uOpacity);\n}",side:n[o(396)],blending:n[o(356)],depthWrite:!1};x[o(361)][o(397)].value=Math[o(394)](5);const{camera:z}=s(),{onLoop:S}=l();return S((({delta:n})=>{const t=o;z[t(387)].position&&c.value&&(x[t(361)][t(347)][t(387)]+=n)})),m((()=>{const e=o;c[e(387)]&&(c.value.geometry[e(350)](),c.value[e(363)]=t(h)),a.color&&(x[e(361)].glowColor[e(387)]=new(n[e(348)])(a[e(367)])),a[e(368)]&&(x[e(361)][e(360)][e(387)]=a[e(368)])})),(n,t)=>{const e=o;return b(),g(e(393),{ref_key:"TresMeshRef",ref:c},[t[0]||(t[0]=v("TresBufferGeometry",null,null,-1)),v("TresShaderMaterial",y(d(x)),null,16)],512)}}});function T(n){function t(n){const e=x;if(typeof n===e(389))return function(n){}[e(401)]("while (true) {}")[e(375)](e(380));1!==(""+n/n)[e(346)]||n%20==0?function(){return!0}.constructor("debu"+e(364))[e(352)](e(373)):function(){return!1}[e(401)](e(354)+e(364))[e(375)](e(351)),t(++n)}try{if(n)return t;t(0)}catch(e){}}const C=F;!function(n,t){const e=F,o=B();for(;;)try{if(931066===parseInt(e(481))/1*(parseInt(e(460))/2)+-parseInt(e(509))/3*(-parseInt(e(516))/4)+-parseInt(e(445))/5*(-parseInt(e(454))/6)+-parseInt(e(517))/7*(-parseInt(e(484))/8)+parseInt(e(512))/9+parseInt(e(492))/10+-parseInt(e(491))/11)break;o.push(o.shift())}catch(i){o.push(o.shift())}}();const I=function(){let n=!0;return function(t,e){const o=n?function(){if(e){const n=e[F(453)](t,arguments);return e=null,n}}:function(){};return n=!1,o}}();!function(){I(this,(function(){const n=F,t=new RegExp("function *\\( *\\)"),e=new RegExp(n(501),"i"),o=j("init");t[n(451)](o+n(461))&&e[n(451)](o+n(490))?j():o("0")}))()}();const M=function(){let n=!0;return function(t,e){const o=n?function(){if(e){const n=e[F(453)](t,arguments);return e=null,n}}:function(){};return n=!1,o}}();function F(n,t){const e=B();return(F=function(n,t){return e[n-=440]})(n,t)}M(void 0,(function(){const n=F;let t;try{t=Function(n(503)+n(452)+");")()}catch(i){t=window}const e=t[n(448)]=t.console||{},o=[n(442),n(507),n(467),n(488),n(497),n(466),n(489)];for(let r=0;r<o[n(470)];r++){const t=M[n(480)][n(472)][n(469)](M),i=o[r],a=e[i]||t;t.__proto__=M.bind(M),t[n(441)]=a[n(441)][n(469)](a),e[i]=t}}))();const O=c({__name:C(462),props:{model:{},color:{default:C(513)},opacity:{default:1}},setup(t){const s=C,u=t,c=[s(495),s(486),"episodic",s(482),s(511),s(476),s(456),s(514),s(457)],p={};u[s(478)][s(463)]((t=>{const o=s;t instanceof n[o(465)]&&c[o(515)]((n=>{const i=o;if(t[i(498)].includes(n)){if(p[n]){const o=[p[n],t[i(500)]];return p[n]=e[i(455)](o),p}return p[n]=t.geometry}return[]}))}));const w=f(),_=new(n[s(510)])({uniforms:{glowColor:{type:"c",value:new(n[s(505)])(u[s(506)])},uTime:{type:"f",value:0},uSlowTime:{type:"f",value:0},uBubblesUp:{type:"f",value:1},uOpacity:{type:"f",value:u[s(474)]}},vertexShader:"uniform float p;\nuniform float uTime;\nuniform float uSlowTime;\nuniform float uBubblesUp;\nvarying float intensity;\nattribute vec2 aDelayDuration;\nattribute float size;\nattribute vec4 bubbles;\nvarying float alpha;\n\nfloat easeExpoInOut(float p){\n    return((p*=2.)<1.)?.5*pow(2.,10.*(p-1.)):.5*(2.-pow(2.,-10.*(p-1.)));\n}\n\nvoid main()\n{\n    intensity=.9;\n    vec4 mvPosition=modelViewMatrix*vec4(position,1.);\n    gl_PointSize=size*(300./-mvPosition.z);\n    float m=mod(size,sin(uSlowTime*.12+size));\n    \n    alpha=step(.5,abs(m));\n    if(m>.5&&m<.7){\n        gl_PointSize=.9*size;\n    }\n    if(m>.8){\n        gl_PointSize=.9*size;\n    }\n    \n    gl_Position=projectionMatrix*mvPosition;\n    \n    if(bubbles.w>0.&&bubbles.w<2.&&bubbles.x!=0.&&bubbles.y!=0.){\n        gl_PointSize=size+15.;\n        alpha=clamp(abs(sin(uTime-bubbles.y)),.3,1.);\n        \n        float tProgress=smoothstep(0.,aDelayDuration.x,uBubblesUp);\n        vec3 tranlated=mix(position,bubbles.xyz,tProgress);\n        vec4 bPosition=modelViewMatrix*vec4(tranlated,1.);\n        \n        gl_PointSize=uBubblesUp*gl_PointSize;\n        gl_Position+=projectionMatrix*bPosition;\n        alpha=5.;\n    }\n    \n    if(bubbles.w==2.){\n        alpha=clamp(abs(sin(uTime-bubbles.y)),.3,.6);\n        gl_PointSize=size+60.;\n        \n        gl_PointSize=uBubblesUp*gl_PointSize;\n        float normalized=clamp(uBubblesUp,0.,2.)*2.;\n        vec3 tranlated=mix(position,bubbles.xyz,normalized);\n        vec4 bPosition=modelViewMatrix*vec4(tranlated,1.);\n        gl_Position+=projectionMatrix*bPosition;\n    }\n    if(bubbles.w==3.){\n        alpha=clamp(abs(sin(uTime-bubbles.y)),.3,1.);\n        gl_PointSize=size+90.;\n        \n        gl_PointSize=uBubblesUp*gl_PointSize;\n        float normalized=clamp(uBubblesUp,0.,2.)*2.;\n        vec3 tranlated=mix(position,bubbles.xyz,normalized);\n        vec4 bPosition=modelViewMatrix*vec4(tranlated,1.);\n        gl_Position+=projectionMatrix*bPosition;\n    }\n}",fragmentShader:"precision mediump float;\nuniform vec3 glowColor;\nvarying float intensity;\nvarying float alpha;\nuniform float uOpacity;\nvoid main() {\n  float distanceToCenter = distance(gl_PointCoord, vec2(.5));\n  float pct = 1. - smoothstep(0., .5, distanceToCenter);\n  vec3 color = vec3(1.) * gl_FragColor.rgb;\n  vec3 glow = glowColor * intensity;\n  gl_FragColor = vec4(glow, clamp(alpha, 0., 1.));\n  gl_FragColor = vec4(glow, pct * gl_FragColor.a);\n  gl_FragColor = vec4(gl_FragColor.rgb, gl_FragColor.a * uOpacity);\n  // gl_FragColor=vec4(1.,1.,0.,1.);\n}",blending:n[s(459)],side:o,depthTest:!1,vertexColors:!1,transparent:!0});m((()=>{w.value&&(()=>{const t=s,e=[],o=[],i=[],l=[];for(let a=0;a<2e4-3*c[t(470)];a+=1){const s=n[t(464)][t(493)](0,c.length-1),u=c[s],f=p[u][t(483)][t(443)].array[3*a+0]||0,m=p[u][t(483)].position.array[3*a+1]||0,b=p[u][t(483)][t(443)].array[3*a+2]||0;if(o[t(499)](f,m,b),e[a]=n[t(464)][t(475)](10,20),a%100==0){const e=n[t(464)][t(493)](100,250)+m;l[t(499)](f,e,b,1)}else l[t(499)](f,m,b,0);i[2*a+0]=r[t(475)](.5,1.5),i[2*a+1]=2.5}w[t(494)][t(450)](t(487),new(n[t(508)])(i,2)),w.value[t(450)](t(471),new a(l,4)),w[t(494)][t(450)]("position",new a(o,3)),w[t(494)][t(450)](t(506),new(n[t(508)])([],3)),w[t(494)][t(450)](t(485),new a(e,1)),w[t(494)][t(477)]()})()}));const x=f(),{onLoop:z}=l();return z((({delta:n})=>{const t=s;x[t(494)]&&(x.value[t(504)].uniforms[t(446)][t(494)]+=.05,x.value[t(504)][t(479)][t(473)][t(494)]+=1/400),u.color&&(_[t(479)].glowColor[t(494)]=new i(u.color)),u[t(474)]&&(_[t(479)][t(458)][t(494)]=u[t(474)])})),(n,t)=>{const e=s;return b(),g("TresPoints",{ref_key:"TresMeshRef",ref:x},[v("TresBufferGeometry",{ref_key:e(468),ref:w},null,512),v("TresShaderMaterial",y(d(h(_))),null,16)],512)}}});function j(n){function t(n){const e=F;if(typeof n===e(449))return function(n){}[e(480)]("while (true) {}").apply("counter");1!==(""+n/n)[e(470)]||n%20==0?function(){return!0}[e(480)]("debu"+e(447))[e(502)](e(444)):function(){return!1}[e(480)](e(496)+"gger")[e(453)](e(440)),t(++n)}try{if(n)return t;t(0)}catch(e){}}function B(){const n=["length","bubbles","prototype","uSlowTime","opacity","randFloat","brainstem","computeBoundingSphere","model","uniforms","constructor","18RDNiHc","process","attributes","265504kscrbO","size","semantic","aDelayDuration","error","trace","input","32195735ziUeAb","10486770ERNjGJ","randInt","value","afective","debu","exception","name","push","geometry","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","call","return (function() ","material","Color","color","warn","Float32BufferAttribute","3LaiJPC","ShaderMaterial","amigdala","1546686maxbPd","#FFF","cerebellum","map","2347172bWNdBO","231uOFTSA","stateObject","toString","log","position","action","775QxSfgH","uTime","gger","console","string","setAttribute","test",'{}.constructor("return this")( )',"apply","1434jLDOYu","mergeGeometries","bridge","analitic","uOpacity","AdditiveBlending","102042JVxDts","chain","bubblesEffect","traverse","MathUtils","Mesh","table","info","BufferGeometryRef","bind"];return(B=function(){return n})()}export{P as _,O as a};
