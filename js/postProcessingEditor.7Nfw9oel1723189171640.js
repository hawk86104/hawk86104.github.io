import{p as t,$ as n,N as e,d as o}from"./@tresjs.LTwFwASm1723189171640.js";import{j as r,a6 as a,k as s,T as i,V as c,O as l,bf as u,l as v,aV as f,cG as p,ck as d}from"./three.5MXJ6W7w1723189171640.js";import{P as m}from"./tweakpane.yHWGBmom1723189171640.js";import{d as g,a4 as x,e as h,o as y,f as b,g as I,J as _,j as S,u as U,aj as w,ak as D,al as P,m as E}from"./@vue.Q1VpS3901723189171640.js";import{_ as A}from"./@fesjs.92jMy6FJ1723189171640.js";import"./@vueuse.oQlm8k6P1723189171640.js";import"./vue-router.frQYH8jd1723189171640.js";import"./lodash-es.nFpJXAf-1723189171640.js";import"./@qlin.yHhFDldE1723189171640.js";import"./pinia.iN3nUGv81723189171640.js";import"./@floating-ui.BPbuo5Gx1723189171640.js";import"./@juggle.7yjBMqoW1723189171640.js";!function(t,n){const e=C,o=z();for(;;)try{if(645735===parseInt(e(177))/1+parseInt(e(195))/2+parseInt(e(174))/3*(parseInt(e(214))/4)+-parseInt(e(213))/5*(parseInt(e(193))/6)+-parseInt(e(192))/7+parseInt(e(191))/8*(parseInt(e(182))/9)+-parseInt(e(219))/10*(-parseInt(e(181))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(225)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){L(this,(function(){const t=C,n=new RegExp(t(208)),e=new RegExp(t(183),"i"),o=T(t(198));n[t(200)](o+"chain")&&e[t(200)](o+t(231))?T():o("0")}))()}();const M=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(225)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();M(void 0,(function(){const t=C,n=function(){const t=C;let n;try{n=Function("return (function() "+t(216)+");")()}catch(e){n=window}return n}(),e=n[t(205)]=n[t(205)]||{},o=[t(211),t(169),t(186),t(180),"exception",t(196),t(194)];for(let r=0;r<o.length;r++){const n=M[t(229)][t(201)].bind(M),a=o[r],s=e[a]||n;n[t(178)]=M[t(188)](M),n[t(171)]=s[t(171)][t(188)](s),e[a]=n}}))();function F(t,n,e){if(typeof t!==C(204)||null===t)return t;const o=Array.isArray(t)?[]:{};for(const r in t)t.hasOwnProperty(r)&&(o[r]=F(t[r])),r==n&&(o[n]=e);return o}function z(){const t=["lastIndex","info","value","bind","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","open","24JWfFDJ","1188012jOoGvZ","108gqUBqq","trace","1150044KiaPHr","table","call","init","send","test","prototype","counter","Texture","object","console","debu","get","function *\\( *\\)","Matrix2","Matrix4","log","Vector2","285165REmNaK","1463036NKtMWk","onerror",'{}.constructor("return this")( )',"replace","string","10ZFjkmJ","Matrix3","action","gger","v3v","name","apply","responseText","stateObject","Vector3","constructor",'" load was aborted.',"input","WagnerLoadShaderException","warn","Vector4","toString","exec","index","3yMHDld","length","onabort","43528DAHnvW","__proto__","message","error","8245545NspdNV","324423ljWfPO","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)",'Shader "'];return(z=function(){return t})()}function C(t,n){const e=z();return(C=function(t,n){return e[t-=168]})(t,n)}function T(t){function n(t){const e=C;if(typeof t===e(218))return function(t){}.constructor("while (true) {}").apply(e(202));1!==(""+t/t)[e(175)]||t%20==0?function(){return!0}[e(229)](e(206)+e(222))[e(197)](e(221)):function(){return!1}[e(229)](e(206)+e(222))[e(225)](e(227)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const N=R;!function(t,n){const e=R,o=j();for(;;)try{if(194730===-parseInt(e(476))/1+-parseInt(e(415))/2*(-parseInt(e(484))/3)+parseInt(e(475))/4+-parseInt(e(469))/5+parseInt(e(459))/6*(-parseInt(e(485))/7)+-parseInt(e(430))/8*(-parseInt(e(421))/9)+parseInt(e(405))/10*(parseInt(e(390))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(477)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function R(t,n){const e=j();return(R=function(t,n){return e[t-=390]})(t,n)}!function(){G(this,(function(){const t=R,n=new RegExp(t(431)),e=new RegExp(t(398),"i"),o=V(t(412));n.test(o+t(428))&&e[t(467)](o+"input")?V():o("0")}))()}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(477)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function j(){const t=["splice","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","ClampToEdgeWrapping","clone","camera","Mesh","wrapS","set","226930fyKVGw","wrapT","RGBAFormat","projectionMatrix","prototype","while (true) {}","pass","init","shader","now","475130hpyLjT","stateObject","time","read","near","front","59058COSdzb","Scene","swapBuffers","startTime","uniforms","renderer","getOfflineTexture","chain","debu","136IlgkFV","function *\\( *\\)","width","type","innerWidth","removePass","tInput","constructor","RGBFormat","toScreen","call","Pass","stencilBuffer","params","height","makePerspective","setRenderTarget","ShaderMaterial","MeshBasicMaterial","Stack","texture","copyPass","WebGLRenderTarget","LinearFilter","table","minFilter","back","render","length","275526NLDvvz","write","console","passItems","quad","UnsignedByteType","warn","resolution","test","string","257860zKZODG","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","settings","PlaneGeometry","scale","gger","1001884aaiBRt","191227LpKmyS","apply","exception","useRGBA","setSize","material","CopyPass","toString","3GFLORq","42ZfxpWC","55BPScXX","loadShadervf","innerHeight","scene","far","value","Reset"];return(j=function(){return t})()}B(void 0,(function(){const t=R;let n;try{n=Function('return (function() {}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(461)]=n.console||{},o=["log",t(465),"info","error",t(478),t(454),"trace"];for(let a=0;a<o[t(458)];a++){const n=B[t(437)][t(409)].bind(B),r=o[a],s=e[r]||n;n.__proto__=B.bind(B),n[t(483)]=s.toString.bind(s),e[r]=n}}))();class O{constructor(t,n){const e=R;this.width=1,this[e(444)]=1,this[e(471)]=n||{},this[e(479)]=this[e(471)].useRGBA||!1,this[e(426)]=t,this[e(451)]=this[e(482)](this[e(471)]),this[e(393)]=new(a[e(422)]),this.quad=new(a[e(402)])(new(a[e(472)])(1,1),new(a[e(448)])),this[e(393)].add(this[e(463)]),this[e(401)]=new l(1,1,1,1,-1e4,1e4),this[e(420)]=new(a[e(452)])(1,1,{minFilter:void 0!==this[e(471)][e(455)]?this[e(471)][e(455)]:a[e(453)],magFilter:void 0!==this[e(471)].magFilter?this[e(471)].magFilter:a[e(453)],wrapS:void 0!==this.settings[e(403)]?this[e(471)][e(403)]:a[e(399)],wrapT:void 0!==this[e(471)][e(406)]?this[e(471)].wrapT:u,format:this[e(479)]?a[e(407)]:a[e(438)],type:void 0!==this[e(471)][e(433)]?this[e(471)][e(433)]:a[e(464)],stencilBuffer:void 0===this.settings[e(442)]||this[e(471)][e(442)]}),this[e(456)]=this[e(420)][e(400)](),this.startTime=Date[e(414)](),this.passes={},this[e(449)]={passItems:[],passes:[]}}addPass(t,n,e,o){const r=R;this[r(391)](n);const a={shaderName:t,params:e,uuid:o,shader:this[r(413)]};this[r(449)].passItems.push(a)}[N(435)](t){const n=N;for(let e=this[n(449)][n(462)][n(458)]-1;e>=0;e--)this[n(449)][n(462)][e].uuid===parseInt(t)&&this.Stack[n(462)][n(397)](e,1);console.log(this.Stack[n(462)])}[N(482)](){const t=N;this[t(441)][t(440)](this);return this.loadShadervf("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[N(391)](t){const n=N,e=n(470);return this[n(413)]=function(t,n){const e=C,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,l=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,u={sampler2D:{type:"t",value:()=>new i},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(a[C(212)])},vec3:{type:"v3",value:()=>new c},vec4:{type:"v4",value:()=>new(a[C(170)])},bvec2:{type:"v2",value:()=>new r},bvec3:{type:"v3",value:()=>new(a[C(228)])},bvec4:{type:"v4",value:()=>new(a[C(170)])},ivec2:{type:"v2",value:()=>new(a[C(212)])},ivec3:{type:"v3",value:()=>new(a[C(228)])},ivec4:{type:"v4",value:()=>new(a[C(170)])},mat2:{type:"v2",value:()=>new(a[C(209)])},mat3:{type:"v3",value:()=>new(a[C(220)])},mat4:{type:"v4",value:()=>new(a[C(210)])}},v={float:{type:"fv",value:()=>[]},vec3:{type:e(223),value:()=>[]}};let f;const p={resolution:{type:"v2",value:new r(1,1),default:!0},time:{type:"f",value:Date.now(),default:!0},tInput:{type:"t",value:new(a[e(203)]),default:!0}};let d,m;for(;null!==(f=o[e(172)](n));)f[e(173)]===o[e(185)]&&o[e(185)]++,d=f[1],m=f[2],p[m]={type:u[d].type,value:u[d][e(187)]()};for(;null!==(f=l[e(172)](n));)f.index===o[e(185)]&&o[e(185)]++,d=f[1],m=f[2],f[3],p[m]={type:v[d].type,value:v[d].value()};return new s({uniforms:p,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this.shader}[N(441)](t){this[N(413)]=null,this.params={}}[N(396)](){const t=N;this[t(418)]=this.front,this[t(460)]=this.back}onWindowResize(t,n){const e=N,o=window[e(434)],r=window[e(392)];t[e(480)](1*o,1*r),n[e(408)][e(445)](70,o/r,n.near,n[e(394)]),this[e(480)](o,r);return this[e(427)](o,r,!0)}[N(480)](t,n){const e=N;this[e(432)]=t,this.height=n,this[e(401)][e(408)].makeOrthographic(t/-2,t/2,n/2,n/-2,this[e(401)][e(419)],this[e(401)][e(394)]),this[e(463)][e(473)][e(404)](t,n,1),this[e(420)][e(480)](t,n),this[e(456)].setSize(t,n)}getOfflineTexture(t,n,e){return new(a[N(452)])(t,n,{minFilter:v,magFilter:v,format:e?f:p})}[N(457)](t,n,e,o){const r=N;this[r(426)].setRenderTarget(this[r(460)]),this[r(426)][r(457)](t,n),o||this[r(423)]()}[N(423)](){const t=N,n=this[t(460)];this.write=this[t(418)],this.read=n}[N(411)](){const t=N;for(let n=0;n<this[t(449)][t(462)][t(458)];n++){const e=this[t(449)][t(462)][n].shader,o=this.Stack[t(462)][n][t(443)];if(this[t(426)][t(446)](this[t(460)]),e instanceof a[t(447)]){this[t(463)][t(481)]=e,this[t(463)].material[t(425)][t(436)][t(395)]=this[t(418)][t(450)],this[t(463)][t(481)].uniforms[t(466)][t(395)][t(404)](this.width,this[t(444)]),this[t(463)][t(481)][t(425)][t(417)][t(395)]=.001*(Date[t(414)]()-this[t(424)]);for(const n in o)this[t(463)][t(481)][t(425)][n][t(395)]=o[n];this.renderer.render(this.scene,this[t(401)]),this[t(423)]()}}}[N(439)](t,n){const e=N;this[e(426)].setRenderTarget(null),this[e(463)][e(481)]=this.copyPass,this[e(463)][e(481)].uniforms[e(436)][e(395)]=this[e(418)][e(450)],this[e(463)].material[e(425)][e(466)].value[e(404)](this[e(432)],this[e(444)]),this[e(426)][e(457)](this[e(393)],this[e(401)])}}function V(t){function n(t){const e=R;if(typeof t===e(468))return function(t){}[e(437)](e(410))[e(477)]("counter");1!==(""+t/t)[e(458)]||t%20==0?function(){return!0}[e(437)](e(429)+e(474)).call("action"):function(){return!1}[e(437)](e(429)+"gger")[e(477)](e(416)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const k="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}";!function(t,n){const e=X,o=q();for(;;)try{if(440282===parseInt(e(251))/1+-parseInt(e(242))/2*(-parseInt(e(285))/3)+parseInt(e(321))/4+parseInt(e(283))/5*(-parseInt(e(252))/6)+-parseInt(e(292))/7*(parseInt(e(286))/8)+parseInt(e(295))/9+-parseInt(e(246))/10*(parseInt(e(253))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){H(this,(function(){const t=X,n=new RegExp(t(273)),e=new RegExp(t(318),"i"),o=Z(t(310));n[t(259)](o+"chain")&&e[t(259)](o+t(312))?Z():o("0")}))()}();const W=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function X(t,n){const e=q();return(X=function(t,n){return e[t-=242]})(t,n)}function q(){const t=["map","material","text","DOTPass","log","trace","table","constructor","keys","render","后处理类型","random","BoxGeometry","function *\\( *\\)","移除~","click","SNOISEPass","DENOISEPass","CIRCULARPass","FXAAPass","MeshPhongMaterial","VIGNETTE1Pass","values","5HGvUUg","castShadow","3957lLCTTT","942488YprkvZ","stateObject","prototype","call","gger","translate","49lcVShg","return (function() ","list","3524445tkMpDd","value","push","receiveShadow","VIGNETTE2Pass","plugins/postProcessing/image/1324-normal.jpg","add","TOONPass","Reset","InvertPass","__proto__","dispose","bind","error","console","init","新增通道","input","onWindowResize","apply","length","addBlade","pass","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","title",'{}.constructor("return this")( )',"2123336OyirbU","addButton","1232cXiLdi","RGBPass","Mesh","info","2630xOjnud","string","BufferGeometry","POISSONPass","toString","713657sQTUGX","1110180TvHhyO","41767EFHLbi","SEPIAPass","addFolder","counter","debu","change","test"];return(q=function(){return t})()}W(void 0,(function(){const t=X,n=function(){const t=X;let n;try{n=Function(t(293)+t(320)+");")()}catch(e){n=window}return n}(),e=n[t(309)]=n[t(309)]||{},o=[t(264),"warn",t(245),t(308),"exception",t(266),t(265)];for(let r=0;r<o[t(315)];r++){const n=W.constructor[t(288)].bind(W),a=o[r],s=e[a]||n;n[t(305)]=W[t(307)](W),n[t(250)]=s.toString.bind(s),e[a]=n}}))();function Z(t){function n(t){const e=X;if(typeof t===e(247))return function(t){}.constructor("while (true) {}")[e(314)](e(256));1!==(""+t/t)[e(315)]||t%20==0?function(){return!0}[e(267)](e(257)+e(290))[e(289)]("action"):function(){return!1}[e(267)](e(257)+e(290)).apply(e(287)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const $=A(g({__name:"postProcessing",async setup(o){const s=X;let i,c;const{camera:l,renderer:u,scene:v,sizes:f}=t();for(var p=new(a[s(248)]),g=[],h=0;h<100;h++){var y=new(a[s(272)])(100,100,100);y[s(291)](1500*Math[s(271)](),1500*Math.random(),1500*Math[s(271)]()),g[s(297)](y)}p=d(g);const b=([i,c]=x((()=>e({map:"plugins/postProcessing/image/1324.jpg"}))),i=await i,c(),i),I=([i,c]=x((()=>e({map:s(300)}))),i=await i,c(),i);var _=new(a[s(280)])({map:b[s(260)],normalMap:I[s(260)],normalScale:new r(.8,-.8),shininess:100}),S=new(a[s(244)])(p,_);S[s(284)]=!0,S[s(298)]=!0,v[s(296)][s(301)](S);const U=new O(u.value,{useRGBA:!0}),w=new m;let D=null,P=[{text:s(304),value:{InvertPass:k}},{text:s(279),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:s(254),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:s(276),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:"BOXBLURPass",value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:s(277),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:"CGAPass",value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:I.map}}},{text:"SOBELPass",value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:s(243),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:s(263),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(278),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:s(249),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:s(281),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(299),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:"FREICHENPass",value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:s(302),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],E="InvertPass",A=k,L=null;w[s(316)]({view:s(294),label:s(270),options:P,value:""}).on(s(258),(t=>{D=t[s(296)]}));const M=w[s(322)]({title:"新增",label:s(311)});let z=0;M.on("click",(t=>{const n=s;E=Object[n(268)](D)[0],A=Object[n(282)](D)[0],L=Object[n(282)](D)[1];let e=z++,o=w[n(255)]({title:E});for(const a in L){let t=L[a];o[n(316)]({view:n(262),label:a,parse:t=>String(t),value:t})}o.addButton({title:n(274)+e,label:"关闭通道"}).on(n(275),(t=>{const e=n;let o=t.target[e(319)].split("~")[1];U.removePass(o)})).on(n(275),(()=>{o[n(306)]()}));let r=F(L,t.target.label,t[n(296)]);U.addPass(E,A,r,e)})),U[s(313)](u[s(296)],l[s(296)]);const{onLoop:C}=n();return C((({delta:t})=>{const n=s;S&&(u[n(296)].autoClearColor=!0,U[n(303)](),S[n(261)]=_,U[n(269)](v[n(296)],l[n(296)]),U[n(317)](),U.toScreen(v[n(296)],l[n(296)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),K=Q;!function(t,n){const e=Q,o=ot();for(;;)try{if(886711===parseInt(e(452))/1*(-parseInt(e(457))/2)+parseInt(e(450))/3*(-parseInt(e(479))/4)+parseInt(e(465))/5+parseInt(e(458))/6*(parseInt(e(471))/7)+-parseInt(e(469))/8+-parseInt(e(470))/9+parseInt(e(478))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const J=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Q(481)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function Q(t,n){const e=ot();return(Q=function(t,n){return e[t-=441]})(t,n)}!function(){J(this,(function(){const t=Q,n=new RegExp(t(453)),e=new RegExp(t(476),"i"),o=at(t(448));n[t(477)](o+t(462))&&e[t(477)](o+"input")?at():o("0")}))()}();const Y=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Q(481)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();Y(void 0,(function(){const t=Q,n=function(){const t=Q;let n;try{n=Function("return (function() "+t(449)+");")()}catch(e){n=window}return n}(),e=n[t(444)]=n.console||{},o=[t(483),t(451),t(442),t(463),t(472),"table",t(443)];for(let r=0;r<o[t(466)];r++){const n=Y.constructor[t(473)][t(468)](Y),a=o[r],s=e[a]||n;n[t(467)]=Y.bind(Y),n[t(454)]=s[t(454)][t(468)](s),e[a]=n}}))();const tt={ref:K(459),position:[600,850,-1500],fov:45,near:.1,far:1e5},nt=_(K(456),{color:K(475),intensity:2},null,-1),et=_(K(441),{position:[100,100,0],intensity:2,color:K(475)},null,-1);function ot(){const t=["perspectiveCameraRef","manual","#000000","chain","error","gger","2751875FzSfqp","length","__proto__","bind","12209144rUAOOl","10859625wnlbgw","10598NGNLhH","exception","prototype","action","#ffffff","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","test","61471500Nfevcn","332QzrVAV","debu","apply","constructor","log","TresDirectionalLight","info","trace","console","postProcessingEditor","string","TresCanvas","init",'{}.constructor("return this")( )',"62286ceAKrC","warn","1FHAjaw","function *\\( *\\)","toString","call","TresAmbientLight","3051764YzhdhD","678jioWKJ"];return(ot=function(){return t})()}const rt=g({__name:K(445),setup(t){const e=K,r={clearColor:e(461),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(460)},a={autoRotate:!0,enableDamping:!0},{onLoop:s}=n();return s((({delta:t})=>{})),(t,n)=>{const s=h(e(447));return y(),b(s,E(r,{"window-size":""}),{default:I((()=>[_("TresPerspectiveCamera",tt,null,512),S(U(o),w(D(a)),null,16),nt,et,(y(),b(P,null,{default:I((()=>[S($)])),_:1}))])),_:1},16)}}});function at(t){function n(t){const e=Q;if(typeof t===e(446))return function(t){}.constructor("while (true) {}")[e(481)]("counter");1!==(""+t/t).length||t%20==0?function(){return!0}[e(482)](e(480)+e(464))[e(455)](e(474)):function(){return!1}[e(482)](e(480)+e(464)).apply("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{rt as default};
