import{m as t,e as n,a as e,o}from"./@tresjs.gjafZgVK1741594518249.js";import{_ as r,V as s,ar as a,i,A as c,m as l,l as u,cd as v,bk as f}from"./three.8y0_KTxz1741594518249.js";import{P as p}from"./tweakpane.yDiyAAkA1741594518249.js";import{d,a3 as m,e as g,o as x,f as h,g as y,N as I,j as b,aj as _,ak as S,u as U,al as w,m as P}from"./@vue.NRI7TcgI1741594518249.js";import{_ as D}from"./@fesjs._tIE6C7-1741594518249.js";import"./postprocessing.iiPTtJPW1741594518249.js";import"./@vueuse.8xnC6EWf1741594518249.js";import"./vue-router.qtZNKV811741594518249.js";import"./lodash-es.pklfUAS51741594518249.js";import"./@qlin.yHhFDldE1741594518249.js";import"./pinia.3XPyh4eK1741594518249.js";import"./@floating-ui.BPbuo5Gx1741594518249.js";import"./@juggle.7yjBMqoW1741594518249.js";!function(t,n){const e=L,o=M();for(;;)try{if(851553===parseInt(e(296))/1+parseInt(e(284))/2+parseInt(e(307))/3*(parseInt(e(309))/4)+-parseInt(e(319))/5*(-parseInt(e(291))/6)+parseInt(e(294))/7*(-parseInt(e(298))/8)+-parseInt(e(300))/9*(parseInt(e(281))/10)+parseInt(e(290))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const E=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(285)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){E(this,(function(){const t=L,n=new RegExp(t(314)),e=new RegExp(t(279),"i"),o=z(t(324));n.test(o+t(272))&&e[t(286)](o+"input")?z():o("0")}))()}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(285)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function L(t,n){const e=M();return(L=function(t,n){return e[t-=269]})(t,n)}function M(){const t=["v3v","debu","exec","call","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","log","58530dajSDZ","message","gger","1280300SdoDsm","apply","test","name","toString","random","9229099YFRNcm","72aBUrQx","action","bind","4644983EXxjGJ","open","475362aHBCpr","__proto__","16MKMfKs","Matrix2","1935hVZDqt","hasOwnProperty","Texture","exception","trace","now","console","123zDyNRb","replace","74852msFSaI",'Shader "',"value","\" couldn't be loaded.","ShaderMaterial","function *\\( *\\)","onabort","length","onerror","lastIndex","298055wUsrcA","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","send","counter","Vector4","init","warn",'" load was aborted.',"while (true) {}","return (function() ","constructor","responseText","Matrix4","prototype","Vector3","Vector2","object","chain","WagnerLoadShaderException","error"];return(M=function(){return t})()}A(void 0,(function(){const t=L;let n;try{n=Function(t(328)+'{}.constructor("return this")( ));')()}catch(r){n=window}const e=n.console=n[t(306)]||{},o=[t(280),t(325),"info",t(274),t(303),"table",t(304)];for(let s=0;s<o[t(316)];s++){const n=A[t(329)][t(332)][t(293)](A),r=o[s],a=e[r]||n;n[t(297)]=A[t(293)](A),n[t(288)]=a[t(288)][t(293)](a),e[r]=n}}))();function F(t,n,e){const o=L;if(typeof t!==o(271)||null===t)return t;const r=Array.isArray(t)?[]:{};for(const s in t)t[o(301)](s)&&(r[s]=F(t[s])),s==n&&(r[n]=e);return r}function z(t){function n(t){const e=L;if("string"==typeof t)return function(t){}[e(329)](e(327))[e(285)](e(322));1!==(""+t/t).length||t%20==0?function(){return!0}[e(329)](e(276)+e(283))[e(278)](e(292)):function(){return!1}[e(329)]("debugger")[e(285)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const C=N;function N(t,n){const e=T();return(N=function(t,n){return e[t-=432]})(t,n)}function T(){const t=["74975RirLXd","tInput","input","10999485aIibie","near","CopyPass","bind","stateObject","12520iVcQNo","clone","RGBFormat","string","330ShejCE","error","scene","OrthographicCamera","add","trace","gger","chain","console","length","Reset","prototype","toString","startTime","MeshBasicMaterial","constructor","call","splice","counter","RGBAFormat","time","uuid","39gIirkP","187664xpWsKO","innerHeight","PlaneGeometry","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","push","Scene","useRGBA","write","read","now","value","front","ClampToEdgeWrapping","toScreen","loadShadervf","apply","texture","resolution","LinearFilter","height","material","width","10vGGTnv","5143276iuzQOk","debu","4249tHfmBQ","9048413SkZQnJ","swapBuffers","return (function() ","action","getOfflineTexture","setSize","WebGLRenderTarget","init","setRenderTarget","settings","log","1379891ToUTum","Mesh","minFilter","camera","shader","quad","removePass","info","projectionMatrix","stencilBuffer","uniforms","test","Stack","function *\\( *\\)","far","set","wrapT","addPass","exception","scale","type","passItems","table","renderer","render","makeOrthographic"];return(T=function(){return t})()}!function(t,n){const e=N,o=T();for(;;)try{if(851392===-parseInt(e(471))/1+parseInt(e(434))/2*(parseInt(e(433))/3)+parseInt(e(457))/4+parseInt(e(497))/5*(-parseInt(e(509))/6)+-parseInt(e(459))/7*(-parseInt(e(505))/8)+parseInt(e(500))/9*(-parseInt(e(456))/10)+parseInt(e(460))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[N(449)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){G(this,(function(){const t=N,n=new RegExp(t(484)),e=new RegExp(t(437),"i"),o=j(t(467));n.test(o+t(516))&&e[t(482)](o+t(499))?j():o("0")}))()}();const R=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[N(449)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();R(void 0,(function(){const t=N;let n;try{n=Function(t(462)+'{}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(517)]=n.console||{},o=["log","warn",t(478),t(510),t(489),t(493),t(514)];for(let s=0;s<o[t(518)];s++){const n=R[t(524)][t(520)][t(503)](R),r=o[s],a=e[r]||n;n.__proto__=R.bind(R),n[t(521)]=a.toString.bind(a),e[r]=n}}))();class B{constructor(t,n){const e=N;this[e(455)]=1,this.height=1,this[e(469)]=n||{},this[e(440)]=this[e(469)].useRGBA||!1,this[e(494)]=t,this.copyPass=this[e(502)](this[e(469)]),this.scene=new(r[e(439)]),this[e(476)]=new(r[e(472)])(new(r[e(436)])(1,1),new(r[e(523)])),this[e(511)][e(513)](this[e(476)]),this.camera=new(r[e(512)])(1,1,1,1,-1e4,1e4),this[e(445)]=new(r[e(466)])(1,1,{minFilter:void 0!==this[e(469)].minFilter?this[e(469)][e(473)]:r[e(452)],magFilter:void 0!==this[e(469)].magFilter?this[e(469)].magFilter:r[e(452)],wrapS:void 0!==this[e(469)].wrapS?this[e(469)].wrapS:r[e(446)],wrapT:void 0!==this.settings[e(487)]?this[e(469)][e(487)]:r[e(446)],format:this.useRGBA?r[e(528)]:r[e(507)],type:void 0!==this.settings.type?this[e(469)][e(491)]:c,stencilBuffer:void 0===this[e(469)][e(480)]||this.settings[e(480)]}),this.back=this.front[e(506)](),this[e(522)]=Date.now(),this.passes={},this[e(483)]={passItems:[],passes:[]}}[C(488)](t,n,e,o){const r=C;this.loadShadervf(n);const s={shaderName:t,params:e,uuid:o,shader:this[r(475)]};this[r(483)][r(492)][r(438)](s)}[C(477)](t){const n=C;for(let e=this[n(483)][n(492)][n(518)]-1;e>=0;e--)this[n(483)][n(492)][e][n(432)]===parseInt(t)&&this.Stack[n(492)][n(526)](e,1);console[n(470)](this[n(483)][n(492)])}[C(502)](){const t=C;this.Pass[t(525)](this);return this[t(448)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[C(448)](t){const n=C;return this[n(475)]=function(t,n){const e=L,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,c=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,l={sampler2D:{type:"t",value:()=>new(r[L(302)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new s},vec3:{type:"v3",value:()=>new(r[L(269)])},vec4:{type:"v4",value:()=>new(r[L(323)])},bvec2:{type:"v2",value:()=>new(r[L(270)])},bvec3:{type:"v3",value:()=>new(r[L(269)])},bvec4:{type:"v4",value:()=>new(r[L(323)])},ivec2:{type:"v2",value:()=>new(r[L(270)])},ivec3:{type:"v3",value:()=>new(r[L(269)])},ivec4:{type:"v4",value:()=>new a},mat2:{type:"v2",value:()=>new(r[L(299)])},mat3:{type:"v3",value:()=>new i},mat4:{type:"v4",value:()=>new(r[L(331)])}},u={float:{type:"fv",value:()=>[]},vec3:{type:e(275),value:()=>[]}};let v;const f={resolution:{type:"v2",value:new(r[e(270)])(1,1),default:!0},time:{type:"f",value:Date[e(305)](),default:!0},tInput:{type:"t",value:new(r[e(302)]),default:!0}};let p,d;for(;null!==(v=o[e(277)](n));)v.index===o[e(318)]&&o[e(318)]++,p=v[1],d=v[2],f[d]={type:l[p].type,value:l[p][e(311)]()};for(;null!==(v=c[e(277)](n));)v.index===o[e(318)]&&o[e(318)]++,p=v[1],d=v[2],v[3],f[d]={type:u[p].type,value:u[p].value()};return new(r[e(313)])({uniforms:f,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}("varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }",t),this[n(475)]}Pass(t){this[C(475)]=null,this.params={}}[C(519)](){const t=C;this[t(442)]=this[t(445)],this[t(441)]=this.back}onWindowResize(t,n){const e=C,o=window.innerWidth,r=window[e(435)];t[e(465)](1*o,1*r),n[e(479)].makePerspective(70,o/r,n[e(501)],n[e(485)]),this[e(465)](o,r);return this[e(464)](o,r,!0)}[C(465)](t,n){const e=C;this.width=t,this[e(453)]=n,this[e(474)][e(479)][e(496)](t/-2,t/2,n/2,n/-2,this[e(474)][e(501)],this[e(474)][e(485)]),this[e(476)][e(490)][e(486)](t,n,1),this[e(445)][e(465)](t,n),this.back.setSize(t,n)}[C(464)](t,n,e){const o=C;return new(r[o(466)])(t,n,{minFilter:l,magFilter:r[o(452)],format:e?r[o(528)]:r[o(507)]})}[C(495)](t,n,e,o){const r=C;this[r(494)].setRenderTarget(this[r(441)]),this.renderer.render(t,n),o||this[r(461)]()}[C(461)](){const t=C,n=this[t(441)];this[t(441)]=this[t(442)],this[t(442)]=n}pass(){const t=C;for(let n=0;n<this[t(483)][t(492)].length;n++){const e=this.Stack[t(492)][n][t(475)],o=this[t(483)].passItems[n].params;if(this[t(494)][t(468)](this[t(441)]),e instanceof u){this.quad[t(454)]=e,this[t(476)].material[t(481)].tInput[t(444)]=this[t(442)][t(450)],this.quad[t(454)].uniforms[t(451)][t(444)][t(486)](this.width,this[t(453)]),this[t(476)][t(454)][t(481)][t(529)][t(444)]=.001*(Date[t(443)]()-this[t(522)]);for(const n in o)this[t(476)].material[t(481)][n][t(444)]=o[n];this.renderer.render(this[t(511)],this[t(474)]),this[t(461)]()}}}[C(447)](t,n){const e=C;this.renderer[e(468)](null),this[e(476)][e(454)]=this.copyPass,this.quad.material[e(481)][e(498)][e(444)]=this[e(442)].texture,this[e(476)][e(454)][e(481)][e(451)][e(444)][e(486)](this[e(455)],this[e(453)]),this[e(494)][e(495)](this[e(511)],this[e(474)])}}function j(t){function n(t){const e=N;if(typeof t===e(508))return function(t){}[e(524)]("while (true) {}")[e(449)](e(527));1!==(""+t/t)[e(518)]||t%20==0?function(){return!0}.constructor(e(458)+"gger").call(e(463)):function(){return!1}[e(524)](e(458)+e(515)).apply(e(504)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const O="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",V=W;!function(t,n){const e=W,o=X();for(;;)try{if(371587===parseInt(e(365))/1+-parseInt(e(368))/2+-parseInt(e(361))/3*(-parseInt(e(373))/4)+parseInt(e(290))/5*(-parseInt(e(304))/6)+-parseInt(e(364))/7+-parseInt(e(328))/8+parseInt(e(329))/9*(parseInt(e(332))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const k=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[W(305)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){k(this,(function(){const t=W,n=new RegExp(t(289)),e=new RegExp(t(338),"i"),o=q(t(362));n.test(o+t(319))&&e[t(341)](o+t(291))?q():o("0")}))()}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[W(305)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function W(t,n){const e=X();return(W=function(t,n){return e[t-=288]})(t,n)}function X(){const t=['{}.constructor("return this")( )',"SEPIAPass","pass","新增通道","removePass","BOXBLURPass","log","3769224ndjxyU","18FQMiSG","keys","prototype","9163610doaQvO","FREICHENPass","material","POISSONPass","TOONPass","addButton","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","add","value","test","action","Vector2","click","VIGNETTE2Pass","plugins/postProcessing/image/1324-normal.jpg","DOTPass","dispose","receiveShadow","bind","CGAPass","castShadow","gger","console","VIGNETTE1Pass","trace","map","BoxGeometry","constructor","values","27NNLEGt","init","postProcessing","2505650zhnHuT","80660QcLDJP","CIRCULARPass","后处理类型","857904nPSJGr","onWindowResize","change","random","SOBELPass","65396PVNDtF","InvertPass","string","function *\\( *\\)","65285NzFAZv","input","BufferGeometry","exception","table","list","toString","FXAAPass","warn","push","addPass","debu","mergeGeometries","Mesh","198typJFr","apply","__proto__","error","length","autoClearColor","addFolder","text","stateObject","DENOISEPass","plugins/postProcessing/image/1324.jpg","addBlade","移除~","counter","while (true) {}","chain","SNOISEPass"];return(X=function(){return t})()}H(void 0,(function(){const t=W;let n;try{n=Function("return (function() "+t(321)+");")()}catch(r){n=window}const e=n.console=n[t(354)]||{},o=[t(327),t(298),"info",t(307),t(293),t(294),t(356)];for(let s=0;s<o[t(308)];s++){const n=H[t(359)][t(331)][t(350)](H),r=o[s],a=e[r]||n;n[t(306)]=H[t(350)](H),n[t(296)]=a[t(296)].bind(a),e[r]=n}}))();function q(t){function n(t){const e=W;if(typeof t===e(288))return function(t){}[e(359)](e(318))[e(305)](e(317));1!==(""+t/t).length||t%20==0?function(){return!0}[e(359)](e(301)+e(353)).call(e(342)):function(){return!1}[e(359)](e(301)+e(353))[e(305)](e(312)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const Z=D(d({__name:V(363),async setup(o){const s=V;let a,i;const{camera:c,renderer:l,scene:u,sizes:d}=t();for(var g=new(r[s(292)]),x=[],h=0;h<100;h++){var y=new(r[s(358)])(100,100,100);y.translate(1500*Math.random(),1500*Math.random(),1500*Math[s(371)]()),x[s(299)](y)}g=v[s(302)](x);const I=([a,i]=m((()=>e({map:s(314)}))),a=await a,i(),a),b=([a,i]=m((()=>e({map:s(346)}))),a=await a,i(),a);var _=new f({map:I[s(357)],normalMap:b[s(357)],normalScale:new(r[s(343)])(.8,-.8),shininess:100}),S=new(r[s(303)])(g,_);S[s(352)]=!0,S[s(349)]=!0,u.value[s(339)](S);const U=new B(l[s(340)],{useRGBA:!0}),w=new p;let P=null,D=[{text:s(374),value:{InvertPass:O}},{text:s(297),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:s(322),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:s(320),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:s(326),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:s(313),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:s(351),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:b[s(357)]}}},{text:s(372),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:"RGBPass",value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:s(347),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(366),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:s(335),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:s(355),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(345),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:s(333),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:s(336),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],E=s(374),A=O,L=null;w[s(315)]({view:s(295),label:s(367),options:D,value:""}).on(s(370),(t=>{P=t[s(340)]}));const M=w[s(337)]({title:"新增",label:s(324)});let z=0;M.on(s(344),(t=>{const n=s;E=Object[n(330)](P)[0],A=Object[n(360)](P)[0],L=Object.values(P)[1];let e=z++,o=w[n(310)]({title:E});for(const s in L){let t=L[s];o.addBlade({view:n(311),label:s,parse:t=>String(t),value:t})}o[n(337)]({title:n(316)+e,label:"关闭通道"}).on(n(344),(t=>{const e=n;let o=t.target.title.split("~")[1];U[e(325)](o)})).on(n(344),(()=>{o[n(348)]()}));let r=F(L,t.target.label,t[n(340)]);U[n(300)](E,A,r,e)})),U[s(369)](l[s(340)],c.value);const{onLoop:C}=n();return C((({delta:t})=>{const n=s;S&&(l.value[n(309)]=!0,U.Reset(),S[n(334)]=_,U.render(u[n(340)],c.value),U[n(323)](),U.toScreen(u[n(340)],c[n(340)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]);!function(t,n){const e=J,o=Y();for(;;)try{if(429196===parseInt(e(223))/1*(parseInt(e(238))/2)+-parseInt(e(239))/3+-parseInt(e(253))/4+parseInt(e(248))/5*(parseInt(e(226))/6)+parseInt(e(213))/7*(parseInt(e(243))/8)+parseInt(e(220))/9*(parseInt(e(247))/10)+-parseInt(e(251))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){Q(this,(function(){const t=J,n=new RegExp(t(241)),e=new RegExp(t(214),"i"),o=nt("init");n[t(221)](o+t(217))&&e[t(221)](o+"input")?nt():o("0")}))()}();const $=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[J(216)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function J(t,n){const e=Y();return(J=function(t,n){return e[t-=213]})(t,n)}$(void 0,(function(){const t=J,n=function(){const t=J;let n;try{n=Function(t(225)+t(230)+");")()}catch(e){n=window}return n}(),e=n[t(250)]=n[t(250)]||{},o=[t(249),t(235),t(219),t(222),t(240),t(229),"trace"];for(let r=0;r<o[t(234)];r++){const n=$[t(218)][t(232)][t(215)]($),s=o[r],a=e[s]||n;n[t(245)]=$[t(215)]($),n[t(231)]=a[t(231)].bind(a),e[s]=n}}))();const K={ref:"perspectiveCameraRef",position:[600,850,-1500],fov:45,near:.1,far:1e5};function Y(){const t=['{}.constructor("return this")( )',"toString","prototype","#000000","length","warn","stateObject","string","10oaWknp","2190687OhhHPv","exception","function *\\( *\\)","while (true) {}","2074608sGvPSH","manual","__proto__","debu","260EvxHek","41235pnlDtw","log","console","4213869OWLoXl","action","1559504cZqhLz","#ffffff","call","counter","14FBipCE","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","bind","apply","chain","constructor","info","265671DlnLoy","test","error","117701dStbfO","TresCanvas","return (function() ","42FwfXsW","gger","TresDirectionalLight","table"];return(Y=function(){return t})()}const tt=d({__name:"postProcessingEditor",setup(t){const e=J,r={clearColor:e(233),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(244)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=g(a(224));return x(),h(i,P(r,{"window-size":""}),{default:y((()=>[I("TresPerspectiveCamera",K,null,512),b(U(o),_(S(s)),null,16),n[0]||(n[0]=I("TresAmbientLight",{color:a(254),intensity:2},null,-1)),n[1]||(n[1]=I(a(228),{position:[100,100,0],intensity:2,color:"#ffffff"},null,-1)),(x(),h(w,null,{default:y((()=>[b(Z)])),_:1}))])),_:1},16)}}});function nt(t){function n(t){const e=J;if(typeof t===e(237))return function(t){}[e(218)](e(242))[e(216)](e(256));1!==(""+t/t).length||t%20==0?function(){return!0}[e(218)](e(246)+e(227))[e(255)](e(252)):function(){return!1}[e(218)](e(246)+"gger").apply(e(236)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{tt as default};
