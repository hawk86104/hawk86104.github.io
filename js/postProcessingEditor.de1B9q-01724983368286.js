import{p as t,$ as n,N as e,d as o}from"./@tresjs.OrqGCbtj1724983368286.js";import{a6 as r,T as a,j as s,al as i,q as c,O as l,W as u,bf as v,aV as f,k as p,bW as d,bk as m}from"./three.p-9BQwc31724983368286.js";import{P as g}from"./tweakpane.yHWGBmom1724983368286.js";import{d as x,a4 as h,e as y,o as I,f as b,g as _,J as S,j as w,u as U,aj as P,ak as D,al as E,m as M}from"./@vue.Q1VpS3901724983368286.js";import{_ as L}from"./@fesjs.Gs8eM-sM1724983368286.js";import"./@vueuse.n6I5WvfU1724983368286.js";import"./vue-router.Zdcy26aq1724983368286.js";import"./lodash-es.nFpJXAf-1724983368286.js";import"./@qlin.yHhFDldE1724983368286.js";import"./pinia.TzFzuyxp1724983368286.js";import"./@floating-ui.BPbuo5Gx1724983368286.js";import"./@juggle.7yjBMqoW1724983368286.js";function A(){const t=["debu","init","length","6551420iuBaQB","60MNIewc","Vector3","chain","type","__proto__","Matrix2",'{}.constructor("return this")( )','" load was aborted.',"9pMVHKv","name","test","log","Vector2","Matrix4",'Shader "',"3214981VWkZWi","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","4TWhlur","onerror","bind","onload","\" couldn't be loaded.","info","stateObject","lastIndex","Texture","index","replace","1223835WHlLtj","message","random","now","15321IzYKnk","exec","v3v","value","apply","onabort","hasOwnProperty","isArray","36954ZsRgoD","counter","return (function() ","console","Matrix3","constructor","table","toString","2459580kZzMJh","send","object","1653648tKTdwJ","ShaderMaterial","action","while (true) {}","input","warn","Vector4","WagnerLoadShaderException","prototype","gger"];return(A=function(){return t})()}!function(t,n){const e=T,o=A();for(;;)try{if(370971===parseInt(e(457))/1*(parseInt(e(490))/2)+-parseInt(e(453))/3*(-parseInt(e(507))/4)+-parseInt(e(473))/5+parseInt(e(465))/6+-parseInt(e(505))/7+-parseInt(e(476))/8+parseInt(e(498))/9*(parseInt(e(489))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[T(461)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){z(this,(function(){const t=T,n=new RegExp("function *\\( *\\)"),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=N(t(487));n[t(500)](o+t(492))&&e[t(500)](o+t(480))?N():o("0")}))()}();const F=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[T(461)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();F(void 0,(function(){const t=T;let n;try{n=Function(t(467)+t(496)+");")()}catch(r){n=window}const e=n[t(468)]=n[t(468)]||{},o=[t(501),t(481),t(512),"error","exception",t(471),"trace"];for(let a=0;a<o[t(488)];a++){const n=F.constructor[t(484)][t(509)](F),r=o[a],s=e[r]||n;n[t(494)]=F[t(509)](F),n[t(472)]=s.toString[t(509)](s),e[r]=n}}))();function C(t,n,e){const o=T;if(typeof t!==o(475)||null===t)return t;const r=Array[o(464)](t)?[]:{};for(const a in t)t[o(463)](a)&&(r[a]=C(t[a])),a==n&&(r[n]=e);return r}function T(t,n){const e=A();return(T=function(t,n){return e[t-=450]})(t,n)}function N(t){function n(t){const e=T;if("string"==typeof t)return function(t){}[e(470)](e(479))[e(461)](e(466));1!==(""+t/t)[e(488)]||t%20==0?function(){return!0}[e(470)](e(486)+e(485)).call(e(478)):function(){return!1}[e(470)](e(486)+e(485))[e(461)](e(513)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const R=G;!function(t,n){const e=G,o=k();for(;;)try{if(558377===parseInt(e(365))/1*(-parseInt(e(376))/2)+-parseInt(e(419))/3*(parseInt(e(410))/4)+parseInt(e(404))/5*(parseInt(e(408))/6)+-parseInt(e(452))/7*(parseInt(e(385))/8)+parseInt(e(358))/9*(-parseInt(e(416))/10)+-parseInt(e(458))/11*(-parseInt(e(425))/12)+parseInt(e(441))/13)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[G(448)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function G(t,n){const e=k();return(G=function(t,n){return e[t-=356]})(t,n)}!function(){B(this,(function(){const t=G,n=new RegExp(t(361)),e=new RegExp(t(455),"i"),o=O(t(435));n[t(367)](o+t(437))&&e[t(367)](o+"input")?O():o("0")}))()}();const V=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[G(448)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();V(void 0,(function(){const t=G;let n;try{n=Function(t(439)+'{}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(428)]=n[t(428)]||{},o=[t(372),t(438),t(392),"error",t(406),t(388),t(399)];for(let a=0;a<o.length;a++){const n=V.constructor[t(440)][t(430)](V),r=o[a],s=e[r]||n;n[t(418)]=V[t(430)](V),n.toString=s[t(434)][t(430)](s),e[r]=n}}))();class j{constructor(t,n){const e=G;this[e(407)]=1,this[e(362)]=1,this[e(369)]=n||{},this[e(374)]=this[e(369)][e(374)]||!1,this[e(432)]=t,this[e(397)]=this.CopyPass(this[e(369)]),this.scene=new(r[e(378)]),this.quad=new c(new(r[e(391)])(1,1),new(r[e(373)])),this[e(411)][e(387)](this.quad),this.camera=new l(1,1,1,1,-1e4,1e4),this[e(383)]=new u(1,1,{minFilter:void 0!==this[e(369)][e(444)]?this[e(369)][e(444)]:r[e(453)],magFilter:void 0!==this[e(369)].magFilter?this[e(369)][e(449)]:r[e(453)],wrapS:void 0!==this[e(369)][e(442)]?this[e(369)][e(442)]:v,wrapT:void 0!==this[e(369)][e(398)]?this[e(369)][e(398)]:v,format:this[e(374)]?f:r[e(381)],type:void 0!==this[e(369)][e(459)]?this[e(369)][e(459)]:r[e(427)],stencilBuffer:void 0===this.settings[e(431)]||this[e(369)][e(431)]}),this.back=this[e(383)][e(450)](),this[e(384)]=Date.now(),this[e(447)]={},this[e(426)]={passItems:[],passes:[]}}[R(390)](t,n,e,o){const r=R;this[r(412)](n);const a={shaderName:t,params:e,uuid:o,shader:this[r(389)]};this.Stack[r(417)][r(386)](a)}[R(400)](t){const n=R;for(let e=this[n(426)].passItems[n(454)]-1;e>=0;e--)this[n(426)][n(417)][e].uuid===parseInt(t)&&this[n(426)][n(417)][n(402)](e,1);console.log(this.Stack.passItems)}[R(371)](){const t=R;this.Pass[t(359)](this);return this[t(412)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[R(412)](t){const n=R;return this.shader=function(t,n){const e=T,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,c=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,l={sampler2D:{type:"t",value:()=>new a},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new s},vec3:{type:"v3",value:()=>new(r[T(491)])},vec4:{type:"v4",value:()=>new i},bvec2:{type:"v2",value:()=>new(r[T(502)])},bvec3:{type:"v3",value:()=>new(r[T(491)])},bvec4:{type:"v4",value:()=>new(r[T(482)])},ivec2:{type:"v2",value:()=>new(r[T(502)])},ivec3:{type:"v3",value:()=>new(r[T(491)])},ivec4:{type:"v4",value:()=>new(r[T(482)])},mat2:{type:"v2",value:()=>new(r[T(495)])},mat3:{type:"v3",value:()=>new(r[T(469)])},mat4:{type:"v4",value:()=>new(r[T(503)])}},u={float:{type:"fv",value:()=>[]},vec3:{type:e(459),value:()=>[]}};let v;const f={resolution:{type:"v2",value:new(r[e(502)])(1,1),default:!0},time:{type:"f",value:Date[e(456)](),default:!0},tInput:{type:"t",value:new(r[e(450)]),default:!0}};let p,d;for(;null!==(v=o[e(458)](n));)v[e(451)]===o[e(514)]&&o[e(514)]++,p=v[1],d=v[2],f[d]={type:l[p][e(493)],value:l[p][e(460)]()};for(;null!==(v=c[e(458)](n));)v[e(451)]===o[e(514)]&&o.lastIndex++,p=v[1],d=v[2],v[3],f[d]={type:u[p][e(493)],value:u[p][e(460)]()};return new(r[e(477)])({uniforms:f,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}("varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }",t),this[n(389)]}[R(436)](t){const n=R;this.shader=null,this[n(366)]={}}[R(451)](){const t=R;this[t(396)]=this.front,this[t(414)]=this.back}onWindowResize(t,n){const e=R,o=window[e(456)],r=window[e(457)];t[e(405)](1*o,1*r),n.projectionMatrix[e(382)](70,o/r,n[e(445)],n[e(424)]),this.setSize(o,r);return this[e(375)](o,r,!0)}[R(405)](t,n){const e=R;this.width=t,this[e(362)]=n,this[e(401)][e(360)][e(443)](t/-2,t/2,n/2,n/-2,this.camera[e(445)],this[e(401)][e(424)]),this[e(395)][e(429)][e(413)](t,n,1),this[e(383)][e(405)](t,n),this[e(379)][e(405)](t,n)}getOfflineTexture(t,n,e){const o=R;return new(r[o(357)])(t,n,{minFilter:r[o(453)],magFilter:r[o(453)],format:e?f:r[o(381)]})}[R(364)](t,n,e,o){const r=R;this[r(432)][r(403)](this[r(414)]),this[r(432)][r(364)](t,n),o||this[r(422)]()}[R(422)](){const t=R,n=this[t(414)];this[t(414)]=this[t(396)],this[t(396)]=n}pass(){const t=R;for(let n=0;n<this[t(426)][t(417)][t(454)];n++){const e=this.Stack[t(417)][n].shader,o=this[t(426)][t(417)][n][t(366)];if(this.renderer[t(403)](this[t(414)]),e instanceof p){this.quad.material=e,this[t(395)].material[t(393)].tInput.value=this.read[t(368)],this.quad[t(433)].uniforms[t(421)][t(370)][t(413)](this[t(407)],this[t(362)]),this[t(395)][t(433)].uniforms[t(380)].value=.001*(Date[t(356)]()-this.startTime);for(const n in o)this[t(395)].material[t(393)][n][t(370)]=o[n];this[t(432)].render(this.scene,this[t(401)]),this.swapBuffers()}}}[R(409)](t,n){const e=R;this[e(432)][e(403)](null),this[e(395)][e(433)]=this[e(397)],this[e(395)][e(433)].uniforms[e(394)].value=this.read[e(368)],this[e(395)].material[e(393)][e(421)].value[e(413)](this[e(407)],this[e(362)]),this[e(432)][e(364)](this[e(411)],this[e(401)])}}function O(t){function n(t){const e=G;if(typeof t===e(363))return function(t){}[e(423)](e(415))[e(448)]("counter");1!==(""+t/t).length||t%20==0?function(){return!0}[e(423)]("debu"+e(377))[e(359)](e(420)):function(){return!1}.constructor(e(446)+"gger")[e(448)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}function k(){const t=["Scene","back","time","RGBFormat","makePerspective","front","startTime","8oOvfqe","push","add","table","shader","addPass","PlaneGeometry","info","uniforms","tInput","quad","read","copyPass","wrapT","trace","removePass","camera","splice","setRenderTarget","4265VulXqW","setSize","exception","width","1938hzuSew","toScreen","1708EIMdsP","scene","loadShadervf","set","write","while (true) {}","10fnmGpO","passItems","__proto__","5163AbVohS","action","resolution","swapBuffers","constructor","far","216816RJYmsB","Stack","UnsignedByteType","console","scale","bind","stencilBuffer","renderer","material","toString","init","Pass","chain","warn","return (function() ","prototype","47559616YFfCAH","wrapS","makeOrthographic","minFilter","near","debu","passes","apply","magFilter","clone","Reset","5927866DXBzCF","LinearFilter","length","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","innerWidth","innerHeight","132VIKzxv","type","now","WebGLRenderTarget","8919792VHofrL","call","projectionMatrix","function *\\( *\\)","height","string","render","1TOhUqc","params","test","texture","settings","value","CopyPass","log","MeshBasicMaterial","useRGBA","getOfflineTexture","2039194CsSWTo","gger"];return(k=function(){return t})()}const H="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",W=K;!function(t,n){const e=K,o=Z();for(;;)try{if(142471===parseInt(e(273))/1*(-parseInt(e(238))/2)+-parseInt(e(235))/3*(parseInt(e(271))/4)+-parseInt(e(245))/5*(-parseInt(e(274))/6)+parseInt(e(212))/7*(parseInt(e(194))/8)+parseInt(e(241))/9*(-parseInt(e(209))/10)+parseInt(e(224))/11*(-parseInt(e(205))/12)+-parseInt(e(263))/13*(-parseInt(e(214))/14))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){q(this,(function(){const t=K,n=new RegExp(t(197)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=$(t(199));n.test(o+"chain")&&e[t(218)](o+t(265))?$():o("0")}))()}();const X=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[K(255)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function Z(){const t=["translate","13qXnbKY",'{}.constructor("return this")( )',"input","SNOISEPass","DENOISEPass","split","counter","keys","20AtlNOK","SOBELPass","22kkITMz","10806yAlOgK","title","plugins/postProcessing/image/1324.jpg","1237416VkzFzE","VIGNETTE2Pass","SEPIAPass","function *\\( *\\)","RGBPass","init","Mesh","gger","values","InvertPass","dispose","2688636movjHR","constructor","length","click","889060NOSneR","postProcessing","push","7hyxMLF","FXAAPass","9895774lSzqFK","map","exception","list","test","change","addPass","table","return (function() ","text","11owypgI","CIRCULARPass","BoxGeometry","value","error","prototype","Reset","pass","mergeGeometries","FREICHENPass","bind","31704ukPEhR","removePass","target","24686PBwuOo","label","string","18TlpyDE","VIGNETTE1Pass","add","addButton","20oEtCLo","console","addFolder","log","plugins/postProcessing/image/1324-normal.jpg","BOXBLURPass","random","warn","material","addBlade","apply","新增通道","while (true) {}","call","debu","info","BufferGeometry"];return(Z=function(){return t})()}function K(t,n){const e=Z();return(K=function(t,n){return e[t-=193]})(t,n)}X(void 0,(function(){const t=K,n=function(){const t=K;let n;try{n=Function(t(222)+t(264)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(246)]||{},o=[t(248),t(252),t(260),t(228),t(216),t(221),"trace"];for(let r=0;r<o[t(207)];r++){const n=X.constructor[t(229)][t(234)](X),a=o[r],s=e[a]||n;n.__proto__=X.bind(X),n.toString=s.toString[t(234)](s),e[a]=n}}))();function $(t){function n(t){const e=K;if(typeof t===e(240))return function(t){}.constructor(e(257))[e(255)](e(269));1!==(""+t/t)[e(207)]||t%20==0?function(){return!0}.constructor(e(259)+e(201))[e(258)]("action"):function(){return!1}[e(206)](e(259)+"gger").apply("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const J=L(x({__name:W(210),async setup(o){const a=W;let i,c;const{camera:l,renderer:u,scene:v,sizes:f}=t();for(var p=new(r[a(261)]),x=[],y=0;y<100;y++){var I=new(r[a(226)])(100,100,100);I[a(262)](1500*Math[a(251)](),1500*Math.random(),1500*Math.random()),x[a(211)](I)}p=d[a(232)](x);const b=([i,c]=h((()=>e({map:a(193)}))),i=await i,c(),i),_=([i,c]=h((()=>e({map:a(249)}))),i=await i,c(),i);var S=new m({map:b[a(215)],normalMap:_[a(215)],normalScale:new s(.8,-.8),shininess:100}),w=new(r[a(200)])(p,S);w.castShadow=!0,w.receiveShadow=!0,v[a(227)][a(243)](w);const U=new j(u.value,{useRGBA:!0}),P=new g;let D=null,E=[{text:a(203),value:{InvertPass:H}},{text:a(213),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:a(196),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:a(266),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:a(250),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:a(267),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:"CGAPass",value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:_[a(215)]}}},{text:a(272),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:a(198),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:"DOTPass",value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:a(225),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:"POISSONPass",value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:a(242),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:a(195),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:a(233),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:"TOONPass",value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],M=a(203),L=H,A=null;P[a(254)]({view:a(217),label:"后处理类型",options:E,value:""}).on(a(219),(t=>{D=t[a(227)]}));const z=P[a(244)]({title:"新增",label:a(256)});let F=0;z.on("click",(t=>{const n=a;M=Object[n(270)](D)[0],L=Object[n(202)](D)[0],A=Object[n(202)](D)[1];let e=F++,o=P[n(247)]({title:M});for(const a in A){let t=A[a];o.addBlade({view:n(223),label:a,parse:t=>String(t),value:t})}o[n(244)]({title:"移除~"+e,label:"关闭通道"}).on(n(208),(t=>{const e=n;let o=t.target[e(275)][e(268)]("~")[1];U[e(236)](o)})).on(n(208),(()=>{o[n(204)]()}));let r=C(A,t[n(237)][n(239)],t[n(227)]);U[n(220)](M,L,r,e)})),U.onWindowResize(u[a(227)],l.value);const{onLoop:T}=n();return T((({delta:t})=>{const n=a;w&&(u[n(227)].autoClearColor=!0,U[n(230)](),w[n(253)]=S,U.render(v[n(227)],l[n(227)]),U[n(231)](),U.toScreen(v[n(227)],l[n(227)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),Y=et;!function(t,n){const e=et,o=tt();for(;;)try{if(772974===-parseInt(e(342))/1*(parseInt(e(335))/2)+-parseInt(e(323))/3+-parseInt(e(325))/4*(-parseInt(e(338))/5)+parseInt(e(317))/6+parseInt(e(341))/7+-parseInt(e(344))/8+parseInt(e(321))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[et(310)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function tt(){const t=["trace","gger","__proto__","1433592XqmNys",'{}.constructor("return this")( )',"bind","action","23755266CpueDn","#000000","3266907ZfEdnv","chain","276muOecL","log","call","#ffffff","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","TresPerspectiveCamera","counter","length","table","constructor","2972QvjtZQ","console","test","13535uIVfMh","TresAmbientLight","prototype","6960177FZmFGV","959VtbLKE","info","6179864zxMwBP","while (true) {}","toString","perspectiveCameraRef","TresDirectionalLight","init","manual","apply","debu","return (function() ","exception"];return(tt=function(){return t})()}!function(){Q(this,(function(){const t=et,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(329),"i"),o=it(t(308));n[t(337)](o+t(324))&&e[t(337)](o+"input")?it():o("0")}))()}();const nt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[et(310)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function et(t,n){const e=tt();return(et=function(t,n){return e[t-=304]})(t,n)}nt(void 0,(function(){const t=et;let n;try{n=Function(t(312)+t(318)+");")()}catch(r){n=window}const e=n.console=n[t(336)]||{},o=[t(326),"warn",t(343),"error",t(313),t(333),t(314)];for(let a=0;a<o[t(332)];a++){const n=nt[t(334)][t(340)][t(319)](nt),r=o[a],s=e[r]||n;n[t(316)]=nt.bind(nt),n[t(305)]=s[t(305)][t(319)](s),e[r]=n}}))();const ot={ref:Y(306),position:[600,850,-1500],fov:45,near:.1,far:1e5},rt=S(Y(339),{color:Y(328),intensity:2},null,-1),at=S(Y(307),{position:[100,100,0],intensity:2,color:"#ffffff"},null,-1),st=x({__name:"postProcessingEditor",setup(t){const e=Y,r={clearColor:e(322),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(309)},a={autoRotate:!0,enableDamping:!0},{onLoop:s}=n();return s((({delta:t})=>{})),(t,n)=>{const s=e,i=y("TresCanvas");return I(),b(i,M(r,{"window-size":""}),{default:_((()=>[S(s(330),ot,null,512),w(U(o),P(D(a)),null,16),rt,at,(I(),b(E,null,{default:_((()=>[w(J)])),_:1}))])),_:1},16)}}});function it(t){function n(t){const e=et;if("string"==typeof t)return function(t){}.constructor(e(304)).apply(e(331));1!==(""+t/t)[e(332)]||t%20==0?function(){return!0}[e(334)](e(311)+e(315))[e(327)](e(320)):function(){return!1}[e(334)](e(311)+"gger")[e(310)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{st as default};
