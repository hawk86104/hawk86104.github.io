import{m as t,_ as n,b as e,ab as o,a7 as r,ap as a}from"./three.qSkR4_5R1743066865732.js";import{e as i,a as s,o as c}from"./@tresjs.NxYvETXi1743066865732.js";import"./index.xYmRm3Ci1743066865732.js";import{c as l}from"./simplex-noise.jB2HxhHB1743066865732.js";import{C as u}from"./index.bm35pHND1743066865732.js";import{d as f,a3 as p,o as h,H as m,N as v,u as d,r as g,e as x,f as y,g as w,j as b,aj as _,ak as M,al as j}from"./@vue.L-brCdZe1743066865732.js";import{_ as z}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.wdeDxGet1743066865732.js";import"./postprocessing.ncQBP5me1743066865732.js";import"./@vueuse.2gpu5LGS1743066865732.js";import"./lamina.5cKsa21l1743066865732.js";import"./glsl-tokenizer.stn4Ln2Q1743066865732.js";import"./@amap.h2kWdZ7d1743066865732.js";import"./glsl-token-descope.7xQL6o0G1743066865732.js";import"./glsl-token-depth.hKgoO6U11743066865732.js";import"./glsl-token-scope.bxaatPnY1743066865732.js";import"./glsl-token-properties.JOp4FLkO1743066865732.js";import"./glsl-token-assignments.IKET74GE1743066865732.js";import"./glsl-token-string.qZL1tUUb1743066865732.js";import"./glsl-token-functions.eufrQ7EY1743066865732.js";import"./object-hash.j9vF23_i1743066865732.js";import"./jszip.ZK9v5YwH1743066865732.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.fLvDWtkY1743066865732.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.LkbPJKSz1743066865732.js";import"./three-stdlib.tjOHNgPP1743066865732.js";import"./@pmndrs.fRJ1Czfy1743066865732.js";import"./utils.LgVsbdOv1743066865732.js";const A=D;function I(){const t=["attributes-stretch","input","5491590fgKFnZ","bind","test","14531335ogiyCh","while (true) {}","exception",'{}.constructor("return this")( )',"attributes","console","time","grass","1273716exLKpy","2405176UVUJRJ","8592024RwOePj","string","joints","info","computeVertexNormals","PlaneGeometry","Color","debu","29421STLauo","index","length","cos","set","DoubleSide","trace","attributes-halfRootAngleSin","push","__proto__","gger","convertSRGBToLinear","prototype","init","array","TresInstancedBufferGeometry","attributes-position","toString","attributes-offset","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","map","constructor","warn","geometry","normalize","side","#000f00","TresMesh","alphaMap","344353VsBcns","Vector4","value","random","function *\\( *\\)","error","material","attributes-uv","stateObject","instances","width","attributes-orientation","stretchesF32","translate","counter","attributes-halfRootAngleCos","apply","halfRootAngleCosF32","action","call","TresGroup","uniforms","sin","InstancedBufferAttribute","TresMeshStandardMaterial","needsUpdate","position","Vector3"];return(I=function(){return t})()}!function(t,n){const e=D,o=I();for(;;)try{if(783902===parseInt(e(314))/1+parseInt(e(356))/2+parseInt(e(365))/3+-parseInt(e(355))/4+-parseInt(e(344))/5+-parseInt(e(357))/6+parseInt(e(347))/7)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[D(330)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){C(this,(function(){const t=D,n=new RegExp(t(318)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=L(t(378));n[t(346)](o+"chain")&&e[t(346)](o+t(343))?L():o("0")}))()}();const R=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();R(void 0,(function(){const t=D;let n;try{n=Function("return (function() "+t(350)+");")()}catch(r){n=window}const e=n[t(352)]=n[t(352)]||{},o=["log",t(387),t(360),t(319),t(349),"table",t(371)];for(let a=0;a<o[t(367)];a++){const n=R[t(386)][t(377)].bind(R),r=o[a],i=e[r]||n;n[t(374)]=R[t(345)](R),n[t(382)]=i[t(382)][t(345)](i),e[r]=n}}))();const k=[A(320)],S=[A(366),A(381),A(321),A(383),A(325),A(342),A(372),A(329)],F=[A(388)],T=[A(390)];function D(t,n){const e=I();return D=function(t,n){return e[t-=312]},D(t,n)}const O=f({__name:A(354),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(a){const c=A;let f,g;const x=([f,g]=p((()=>s({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),f=await f,g(),f),y=a,w=l(Math.random);function b(t,e){const o=D,r=t.x*e.w+t.y*e.z-t.z*e.y+t.w*e.x,a=-t.x*e.z+t.y*e.w+t.z*e.x+t.w*e.y,i=t.x*e.y-t.y*e.x+t.z*e.w+t.w*e.z,s=-t.x*e.x-t.y*e.y-t.z*e.z+t.w*e.w;return new(n[o(315)])(r,a,i,s)}function _(t,n){var e=2*w(t/50,n/50);return e+=4*w(t/100,n/100),e+=.2*w(t/10,n/10)}const M=function(t,o){const a=D,i=[],s=[],c=[],l=[],u=[];let f=new(n[a(315)]),p=new(n[a(315)]);const h=-.25;for(let r=0;r<t;r++){const m=Math.random()*o-o/2,v=Math[a(317)]()*o-o/2,d=_(m,v);i[a(373)](m,d,v);let g=Math.PI-Math[a(317)]()*(2*Math.PI);l.push(Math[a(336)](.5*g)),u[a(373)](Math[a(368)](.5*g));let x=new(n[a(341)])(0,1,0),y=x.x*Math[a(336)](g/2),w=x.y*Math.sin(g/2),M=x.z*Math[a(336)](g/2),j=Math[a(368)](g/2);f[a(369)](y,w,M,j).normalize(),g=.5*Math[a(317)]()+h,x=new(n[a(341)])(1,0,0),y=x.x*Math[a(336)](g/2),w=x.y*Math[a(336)](g/2),M=x.z*Math[a(336)](g/2),j=Math[a(368)](g/2),p[a(369)](y,w,M,j)[a(389)](),f=b(f,p),g=.5*Math[a(317)]()+h,x=new e(0,0,1),y=x.x*Math[a(336)](g/2),w=x.y*Math.sin(g/2),M=x.z*Math[a(336)](g/2),j=Math.cos(g/2),p[a(369)](y,w,M,j)[a(389)](),f=b(f,p),s[a(373)](f.x,f.y,f.z,f.w),r<t/3?c.push(1.8*Math.random()):c.push(Math.random())}return{offsetsF32:new(n[a(337)])(new Float32Array(i),3),orientationsF32:new(n[a(337)])(new Float32Array(s),4),stretchesF32:new(n[a(337)])(new Float32Array(c),1),halfRootAngleCosF32:new r(new Float32Array(u),1),halfRootAngleSinF32:new(n[a(337)])(new Float32Array(l),1)}}(y[c(323)],y[c(324)]),j=new t(y.bW,y.bH,1,y[c(359)])[c(327)](0,y.bH/2,0),z=new(n[c(362)])(y[c(324)],y[c(324)],32,32);z.lookAt(new e(0,1,0));const I=z.attributes[c(340)];for(let t=0;t<I.array[c(367)];t+=3)I[c(379)][t+1]=_(I[c(379)][t],I.array[t+2]);z[c(351)][c(340)][c(339)]=!0,z[c(361)]();const C=new(u({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(n[c(363)])(.3,.9,0)[c(376)](),bottomColor:new(n[c(363)])(0,.2,0).convertSRGBToLinear()},"   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }",c(384),(t=>{const e=c;t[e(390)]=n[e(370)]})));C[c(385)]=x.map,C.alphaMap=x[c(313)],C.toneMapped=!1;const{onLoop:R}=i();return R((({elapsed:t})=>{const n=c;C[n(335)][n(353)][n(316)]=t/4})),(t,n)=>{const e=c;return h(),m(e(334),null,[v(e(312),{material:d(C)},[v(e(380),{index:d(j)[e(366)],"attributes-position":d(j)[e(351)].position,"attributes-uv":d(j).attributes.uv,"attributes-offset":d(M).offsetsF32,"attributes-orientation":d(M).orientationsF32,"attributes-stretch":d(M)[e(326)],"attributes-halfRootAngleSin":d(M).halfRootAngleSinF32,"attributes-halfRootAngleCos":d(M)[e(331)]},null,8,S)],8,k),v("TresMesh",{position:[0,0,0],geometry:d(z)},[v(e(338),{color:e(391),side:o},null,8,T)],8,F)])}}});function L(t){function n(t){const e=D;if(typeof t===e(358))return function(t){}.constructor(e(348))[e(330)](e(328));1!==(""+t/t).length||t%20==0?function(){return!0}.constructor(e(364)+"gger")[e(333)](e(332)):function(){return!1}[e(386)](e(364)+e(375))[e(330)](e(322)),n(++t)}try{if(t)return n;n(0)}catch(e){}}function P(t,n){const e=H();return P=function(t,n){return e[t-=449]},P(t,n)}const B=P;!function(t,n){const e=P,o=H();for(;;)try{if(284606===parseInt(e(481))/1*(parseInt(e(462))/2)+-parseInt(e(458))/3*(parseInt(e(480))/4)+-parseInt(e(494))/5+-parseInt(e(449))/6*(-parseInt(e(468))/7)+parseInt(e(479))/8+parseInt(e(469))/9*(-parseInt(e(467))/10)+-parseInt(e(459))/11*(-parseInt(e(455))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const E=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[P(465)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function H(){const t=["3HgGVTo","4631MDfwRs","init","exception","7878WpMxex","TresCanvas","trace","apply","debu","10xAuBOf","7fukPbx","5099202ymYPXm","grass","log","test","while (true) {}","/images/skyBox/desert_1k.hdr","texture","function *\\( *\\)","resource.cos","https://opensource.cdn.icegl.cn","288384llkzIx","1039180jTZqGo","73EaMqlV","string","input","warn","TresPerspectiveCamera","error","constructor","console","bind","chain","length","toString","prototype","1160200Oiujzx","2779698dOvVxV","return (function() ","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","gger",'{}.constructor("return this")( )',"counter","15852yYFLRn","action","call"];return(H=function(){return t})()}!function(){E(this,(function(){const t=P,n=new RegExp(t(476)),e=new RegExp(t(451),"i"),o=U(t(460));n[t(472)](o+t(490))&&e[t(472)](o+t(483))?U():o("0")}))()}();const V=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();V(void 0,(function(){const t=P,n=function(){const t=P;let n;try{n=Function(t(450)+t(453)+");")()}catch(e){n=window}return n}(),e=n[t(488)]=n[t(488)]||{},o=[t(471),t(484),"info",t(486),t(461),"table",t(464)];for(let r=0;r<o[t(491)];r++){const n=V[t(487)][t(493)].bind(V),a=o[r],i=e[a]||n;n.__proto__=V[t(489)](V),n[t(492)]=i[t(492)][t(489)](i),e[a]=n}}))();const G=f({__name:B(470),setup(t){const n=g({alpha:!0,toneMapping:a,windowSize:!0,clearColor:6710886}),e=g({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=P,a=x(r(463));return h(),y(a,_(M(n)),{default:w((()=>[o[0]||(o[0]=v(r(485),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),b(d(c),_(M(e)),null,16),(h(),y(j,null,{default:w((()=>[b(O)])),_:1})),(h(),y(j,null,{default:w((()=>[b(d(z),{texture:r(478)+r(474)},null,8,[r(475)])])),_:1}))])),_:1},16)}}});function U(t){function n(t){const e=P;if(typeof t===e(482))return function(t){}[e(487)](e(473)).apply(e(454));1!==(""+t/t).length||t%20==0?function(){return!0}[e(487)](e(466)+e(452))[e(457)](e(456)):function(){return!1}[e(487)](e(466)+"gger")[e(465)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{G as default};
