import{a6 as e}from"./three.0IuNGJsA1725236486446.js";import{$ as n,d as t,N as a}from"./@tresjs.DDzpLB7Q1725236486446.js";import{P as o}from"./tweakpane.yHWGBmom1725236486446.js";import{d as r,a4 as i,X as l,e as s,o as u,f as c,g as f,j as p,u as v,J as m,m as d,aj as h,ak as g}from"./@vue.9bHx4gg21725236486446.js";import"./@vueuse.XXpXaOwX1725236486446.js";const x=E;!function(e,n){const t=E,a=T();for(;;)try{if(790076===-parseInt(t(203))/1*(-parseInt(t(189))/2)+-parseInt(t(222))/3+-parseInt(t(236))/4+parseInt(t(229))/5+parseInt(t(193))/6+-parseInt(t(244))/7*(-parseInt(t(205))/8)+parseInt(t(245))/9*(-parseInt(t(216))/10))break;a.push(a.shift())}catch(o){a.push(a.shift())}}();const y=function(){let e=!0;return function(n,t){const a=e?function(){if(t){const e=t[E(226)](n,arguments);return t=null,e}}:function(){};return e=!1,a}}();!function(){y(this,(function(){const e=E,n=new RegExp(e(223)),t=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),a=P("init");n[e(192)](a+"chain")&&t[e(192)](a+e(199))?P():a("0")}))()}();const S=function(){let e=!0;return function(n,t){const a=e?function(){if(t){const e=t[E(226)](n,arguments);return t=null,e}}:function(){};return e=!1,a}}();function T(){const e=["#122148","debu","海浪变化速度","addFolder","call","size","2sLYAFE","addBinding","change","test","7002330SiyhhB","Debug","counter","value","color","string","input","gger","action","return (function() ","1413161WpSDcs","海浪高度","689096gXEGNh","TresHemisphereLight","groupRef","toString","info","length","uTime","table","warn","#17c5a9","TresCanvas","20GfmOgN","TresShaderMaterial","#080820","constructor","prototype","wireframeMaterialRef","944286duZcku","function *\\( *\\)","TresIcosahedronGeometry","TresPerspectiveCamera","apply","log","FrontSide","7442170ocSEFL","__proto__","exception","uniforms","console","uWaveSpeed","trace","4439000bbMuki","uWaveHeight","bind","TresPoints","set","SRGBColorSpace","#ffffff","TresGroup","112uXMSbX","14545143tyqSZA","stateObject","TresMesh","pointSize"];return(T=function(){return e})()}S(void 0,(function(){const e=E;let n;try{n=Function(e(202)+'{}.constructor("return this")( ));')()}catch(o){n=window}const t=n[e(233)]=n.console||{},a=[e(227),e(213),e(209),"error",e(231),e(212),e(235)];for(let r=0;r<a[e(210)];r++){const n=S[e(219)][e(220)][e(238)](S),o=a[r],i=t[o]||n;n[e(230)]=S[e(238)](S),n.toString=i[e(208)][e(238)](i),t[o]=n}}))();const w=m(x(225),{position:[0,0,3.5],fov:45,near:.1,far:20},null,-1),b=m(x(224),{args:[1,4]},null,-1),_=m(x(224),{args:[1,128]},null,-1),z=m(x(206),{args:[x(242),x(218),3]},null,-1);function E(e,n){const t=T();return(E=function(e,n){return t[e-=184]})(e,n)}const j=r({__name:"pointsEarth",async setup(r){const y=x;let S,T;const E={color:y(214),pointSize:4},j={clearColor:y(249),shadows:!1,alpha:!1,outputColorSpace:e[y(241)]},P={color:E.color,wireframe:!0,transparent:!0,opacity:.2},D=([S,T]=i((()=>a(["./plugins/earthSample/image/pointsEarth/00_earthmap1k.jpg","./plugins/earthSample/image/pointsEarth/circle.png","./plugins/earthSample/image/pointsEarth/04_rainbow1k.jpg","./plugins/earthSample/image/pointsEarth/01_earthbump1k.jpg","./plugins/earthSample/image/pointsEarth/02_earthspec1k.jpg"]))),S=await S,T(),S),k=D[0],A=D[1],I=D[2],C=D[3],M=D[4],W={uniforms:{size:{type:"f",value:E[y(248)]},uTime:{type:"f",value:0},uWaveHeight:{type:"f",value:.075},uWaveSpeed:{type:"f",value:.2},colorTexture:{type:"t",value:I},elevTexture:{type:"t",value:C},alphaTexture:{type:"t",value:M},earthTexture:{type:"t",value:k},starTexture:{type:"t",value:A}},vertexShader:"  uniform float size;\n  uniform sampler2D elevTexture;\n  uniform sampler2D alphaTexture;\n  uniform float uTime;\n  uniform float uWaveHeight;\n  uniform float uWaveSpeed;\n\n  varying vec2 vUv;\n  varying float vVisible;\n  varying float vAlpha;\n  varying float vElevation;\n  // Function to generate fBm with vec3 input\n  float random(vec3 st) {\n    return fract(sin(dot(st.xyz, vec3(12.9898,78.233,45.164))) * 43758.5453123);\n}\n\nfloat noise(vec3 st) {\n    vec3 i = floor(st);\n    vec3 f = fract(st);\n\n    // Eight corners in 3D of a tile\n    float a = random(i);\n    float b = random(i + vec3(1.0, 0.0, 0.0));\n    float c = random(i + vec3(0.0, 1.0, 0.0));\n    float d = random(i + vec3(1.0, 1.0, 0.0));\n    float e = random(i + vec3(0.0, 0.0, 1.0));\n    float f1 = random(i + vec3(1.0, 0.0, 1.0));\n    float g = random(i + vec3(0.0, 1.0, 1.0));\n    float h = random(i + vec3(1.0, 1.0, 1.0));\n\n    vec3 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(mix(mix(a, b, u.x), mix(c, d, u.x), u.y),\n               mix(mix(e, f1, u.x), mix(g, h, u.x), u.y), u.z);\n}\n\nfloat fbm(vec3 st) {\n    float value = 0.0;\n    float amplitude = 0.5;\n\n    for (int i = 0; i < 5; i++) {\n        value += amplitude * noise(st);\n        st *= 2.0;\n        amplitude *= 0.5;\n    }\n    return value;\n}\n\n  void main() {\n    vUv = uv;\n    float alphaLand = 1.0 - texture2D(alphaTexture, vUv).r;\n    vAlpha = alphaLand;\n    vec3 newPosition = position;\n\n    if(alphaLand < 0.5) {\n      // Sea\n      // fBm for wave-like displacement\n      float waveHeight = uWaveHeight; // Adjust wave height as needed\n      float waveSpeed = uWaveSpeed;  // Adjust wave speed as needed\n      float displacement = (fbm(newPosition * 5.0 + uTime * waveSpeed) * 2.0 - 1.0) * waveHeight;\n      vElevation = displacement;\n      newPosition += normal * displacement ;\n    }\n\n    vec4 mvPosition = modelViewMatrix * vec4( newPosition, 1.0 );\n    float elv = texture2D(elevTexture, vUv).r;\n    vec3 vNormal = normalMatrix * normal;\n    vVisible = step(0.0, dot( -normalize(mvPosition.xyz), normalize(vNormal)));\n    mvPosition.z += 0.45 * elv;\n\n    // 求出 mvPosition 距离相机的距离\n    float dist = length(mvPosition.xyz);\n    // 根据距离调整 size\n    float pointSize = size * (1.0 - dist / 10.0);\n    gl_PointSize = max(pointSize, 1.0);\n    gl_PointSize = pointSize;\n    gl_Position = projectionMatrix * mvPosition;\n  }\n",fragmentShader:"  uniform sampler2D colorTexture;\n  // uniform sampler2D alphaTexture;\n  uniform sampler2D earthTexture;\n  uniform sampler2D starTexture;\n\n  varying vec2 vUv;\n  varying float vVisible;\n  varying float vAlpha;\n  varying float vElevation;\n\n  void main() {\n    if (floor(vVisible + 0.1) == 0.0) discard;\n    vec2 coord = gl_PointCoord;\n    float alpha = texture2D(starTexture, coord).a;\n    // 根据 alpha 值来裁剪形状\n    if (alpha < 0.1) discard;\n\n    // float alphaLand = 1.0 - texture2D(alphaTexture, vUv).r;\n    vec3 color = texture2D(colorTexture, vUv).rgb;\n    vec3 earth = texture2D(earthTexture, vUv).rgb;\n    color = mix(color, earth, 0.65);\n    if(\n      vAlpha > 0.5\n    ) {\n      gl_FragColor = vec4(color, vAlpha);\n    }else {\n      // 对于海洋部分，根据 vElevation 调整颜色\n      float elevationEffect = clamp(vElevation*30.0, -1.0, 1.0); // 将 vElevation 限制在 [-1, 1] 范围内\n      vec3 deep_sea_blue = vec3(0.004, 0.227, 0.388);\n      vec3 adjustedColor = mix(deep_sea_blue, earth*1.75, (elevationEffect + 1.0) * 0.5); // 根据 vElevation 调整颜色\n      gl_FragColor = vec4(adjustedColor, 1.0-vAlpha);\n    }\n  }\n",transparent:!0,side:e[y(228)]},F=l(),L=l(),U=(new o)[y(186)]({title:y(194)});U[y(190)](E,y(197),{type:"color"}).on(y(191),(({value:e})=>{const n=y;L[n(196)][n(197)][n(240)](e)})),U[y(190)](W.uniforms[y(188)],"value",{min:.1,max:10,step:.1,label:"粒子大小"}),U[y(190)](W[y(232)][y(237)],y(196),{min:.01,max:.5,step:.01,label:y(204)}),U.addBinding(W[y(232)][y(234)],y(196),{min:.01,max:1,step:.01,label:y(185)});const{onLoop:B}=n();return B((({delta:e})=>{const n=y;F[n(196)]&&(F[n(196)].rotation.y+=.002,W.uniforms[n(211)][n(196)]+=10*e)})),(e,n)=>{const a=y,o=s(a(215));return u(),c(o,d(j,{"window-size":""}),{default:f((()=>[w,p(v(t),{autoRotate:!0,autoRotateSpeed:2}),m(a(243),{ref_key:a(207),ref:F},[m(a(247),null,[b,m("TresMeshBasicMaterial",d({ref_key:a(221),ref:L},P),null,16)]),m(a(239),null,[_,m(a(217),h(g(W)),null,16)])],512),z])),_:1},16)}}});function P(e){function n(e){const t=E;if(typeof e===t(198))return function(e){}[t(219)]("while (true) {}")[t(226)](t(195));1!==(""+e/e)[t(210)]||e%20==0?function(){return!0}.constructor(t(184)+t(200))[t(187)](t(201)):function(){return!1}[t(219)](t(184)+t(200)).apply(t(246)),n(++e)}try{if(e)return n;n(0)}catch(t){}}export{j as default};
