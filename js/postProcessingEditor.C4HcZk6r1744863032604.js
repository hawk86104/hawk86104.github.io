import{m as t,e as n,b as e,a as o}from"./@tresjs.DDZ0vesk1744863032604.js";import{T as a,a as r,V as s,O as i,U as l,d1 as v,r as c,u,bo as f,n as p,B as m,ax as d,c8 as x,b9 as g,l as h}from"./three.B0XaFSnH1744863032604.js";import{P as y}from"./tweakpane.C0HtAJSg1744863032604.js";import{d as b,a5 as I,h as _,e as S,o as U,f as P,J as w,j as D,u as E,ak as A,al as M,am as L,m as C}from"./@vue.DK6ok9LJ1744863032604.js";import{_ as F}from"./@fesjs.1a7Lul6Z1744863032604.js";import"./postprocessing.DMK_Mhe01744863032604.js";import"./@vueuse.aRlY5CPe1744863032604.js";import"./vue-router.CdrpVSr11744863032604.js";import"./lodash-es.BOsRjQhS1744863032604.js";import"./@qlin.q6OWdsQV1744863032604.js";import"./pinia.vfLI9vPt1744863032604.js";import"./@babel.BPq7uOAK1744863032604.js";import"./@floating-ui.BFjFSAYt1744863032604.js";import"./@juggle.CcBCnTIR1744863032604.js";!function(){const t=N,n=G();for(;;)try{if(286632===parseInt(t(219))/1+-parseInt(t(203))/2+-parseInt(t(227))/3+parseInt(t(232))/4+parseInt(t(205))/5+parseInt(t(216))/6*(parseInt(t(220))/7)+-parseInt(t(190))/8*(-parseInt(t(192))/9))break;n.push(n.shift())}catch(e){n.push(n.shift())}}();const z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){z(this,(function(){const t=N,n=new RegExp(t(238)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=B(t(210));n.test(o+t(195))&&e[t(234)](o+t(215))?B():o("0")}))()}();const T=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function N(t,n){const e=G();return N=function(t,n){return e[t-=176]},N(t,n)}function G(){const t=["object","lastIndex","apply","name","error","bind","exception","message","index","Matrix3","ShaderMaterial","table","now","120wovlnY","onerror","81045beIGfN","Matrix2","value","chain","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","trace","Vector3","__proto__","exec","length","v3v","80326pbnkWd","prototype","1639395UubtHK","type","responseText","Texture","info","init","Vector4","string","gger","call","input","132234ZgAfpL","Matrix4","constructor","37561OdEAhV","98eAAdpV","open","\" couldn't be loaded.","log","action","WagnerLoadShaderException","counter","1545174pAPToJ","replace","console","onabort","Vector2","131168caRCKy","get","test",'Shader "',"isArray","debu","function *\\( *\\)","return (function() ","while (true) {}","onload","toString"];return(G=function(){return t})()}T(void 0,(function(){const t=N;let n;try{n=Function(t(239)+'{}.constructor("return this")( ));')()}catch(a){n=window}const e=n[t(229)]=n.console||{},o=[t(223),"warn",t(209),t(181),t(183),t(188),t(197)];for(let r=0;r<o[t(201)];r++){const n=T.constructor[t(204)][t(182)](T),a=o[r],s=e[a]||n;n[t(199)]=T[t(182)](T),n[t(176)]=s[t(176)][t(182)](s),e[a]=n}}))();function R(t,n,e){const o=N;if(typeof t!==o(177)||null===t)return t;const a=Array[o(236)](t)?[]:{};for(const r in t)t.hasOwnProperty(r)&&(a[r]=R(t[r])),r==n&&(a[n]=e);return a}function B(t){function n(t){const e=N;if(typeof t===e(212))return function(t){}.constructor(e(240))[e(179)](e(226));1!==(""+t/t).length||t%20==0?function(){return!0}[e(218)](e(237)+e(213))[e(214)](e(224)):function(){return!1}[e(218)](e(237)+e(213))[e(179)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const j=W;!function(){const t=W,n=k();for(;;)try{if(878961===parseInt(t(233))/1*(parseInt(t(200))/2)+parseInt(t(270))/3+parseInt(t(208))/4+-parseInt(t(181))/5*(parseInt(t(256))/6)+parseInt(t(268))/7*(-parseInt(t(264))/8)+-parseInt(t(190))/9*(parseInt(t(261))/10)+parseInt(t(222))/11*(parseInt(t(217))/12))break;n.push(n.shift())}catch(e){n.push(n.shift())}}();const V=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[W(253)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){V(this,(function(){const t=W,n=new RegExp(t(248)),e=new RegExp(t(179),"i"),o=X("init");n[t(265)](o+t(169))&&e[t(265)](o+t(229))?X():o("0")}))()}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[W(253)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function k(){const t=["uniforms","useRGBA","renderer","Stack","WebGLRenderTarget","now","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","render","714140xEOvfc","settings","innerWidth","__proto__","toString","constructor","Scene","bind","innerHeight","369mURvQF","Mesh","Reset","gger","length","debu","read","resolution","makeOrthographic","quad","1614434UalmWr","call","trace","stateObject","copyPass","width","counter","texture","1943380XzbAji","minFilter","prototype","error","height","setRenderTarget","action","scale","makePerspective","1636440cgOovM","tInput","passItems","swapBuffers","MeshBasicMaterial","55RWynlC","params","ClampToEdgeWrapping","push","camera","wrapT","value","input","scene","near","add","2ANmMVV","shader","write","console","info","material","loadShadervf","uuid","front","log","startTime","PlaneGeometry","projectionMatrix","set","back","function *\\( *\\)","warn","splice","addPass","return (function() ","apply","time","RGBFormat","48IhVjuB","clone","magFilter","pass","stencilBuffer","91990BKBqWG","getOfflineTexture","LinearFilter","41264EMhalE","test","toScreen","RGBAFormat","2282JESUFZ","while (true) {}","3894369yzvrGi","setSize",'{}.constructor("return this")( )',"chain","Pass","wrapS"];return(k=function(){return t})()}O(void 0,(function(){const t=W,n=function(){const t=W;let n;try{n=Function(t(252)+t(272)+");")()}catch(e){n=window}return n}(),e=n[t(236)]=n[t(236)]||{},o=[t(242),t(249),t(237),t(211),"exception","table",t(202)];for(let a=0;a<o[t(194)];a++){const n=O[t(186)][t(210)][t(188)](O),r=o[a],s=e[r]||n;n[t(184)]=O.bind(O),n.toString=s[t(185)][t(188)](s),e[r]=n}}))();class H{constructor(t,n){const e=W;this[e(205)]=1,this.height=1,this[e(182)]=n||{},this[e(173)]=this[e(182)][e(173)]||!1,this[e(174)]=t,this[e(204)]=this.CopyPass(this[e(182)]),this[e(230)]=new(a[e(187)]),this[e(199)]=new(a[e(191)])(new(a[e(244)])(1,1),new(a[e(221)])),this[e(230)][e(232)](this.quad),this[e(226)]=new i(1,1,1,1,-1e4,1e4),this.front=new(a[e(176)])(1,1,{minFilter:void 0!==this[e(182)][e(209)]?this[e(182)][e(209)]:a[e(263)],magFilter:void 0!==this[e(182)][e(258)]?this.settings.magFilter:c,wrapS:void 0!==this[e(182)][e(171)]?this[e(182)][e(171)]:a[e(224)],wrapT:void 0!==this.settings.wrapT?this[e(182)][e(227)]:a[e(224)],format:this[e(173)]?a[e(267)]:v,type:void 0!==this.settings.type?this[e(182)].type:l,stencilBuffer:void 0===this[e(182)][e(260)]||this.settings[e(260)]}),this[e(247)]=this.front[e(257)](),this[e(243)]=Date[e(177)](),this.passes={},this[e(175)]={passItems:[],passes:[]}}[j(251)](t,n,e,o){const a=j;this[a(239)](n);const r={shaderName:t,params:e,uuid:o,shader:this.shader};this.Stack[a(219)][a(225)](r)}removePass(t){const n=j;for(let e=this[n(175)][n(219)][n(194)]-1;e>=0;e--)this[n(175)][n(219)][e][n(240)]===parseInt(t)&&this[n(175)][n(219)][n(250)](e,1);console[n(242)](this[n(175)][n(219)])}CopyPass(){const t=j;this[t(170)][t(201)](this);return this[t(239)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[j(239)](t){const n=j,e=n(178);return this[n(234)]=function(t,n){const e=N,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,i=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,l={sampler2D:{type:"t",value:()=>new(a[N(208)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new r},vec3:{type:"v3",value:()=>new s},vec4:{type:"v4",value:()=>new(a[N(211)])},bvec2:{type:"v2",value:()=>new(a[N(231)])},bvec3:{type:"v3",value:()=>new(a[N(198)])},bvec4:{type:"v4",value:()=>new(a[N(211)])},ivec2:{type:"v2",value:()=>new r},ivec3:{type:"v3",value:()=>new(a[N(198)])},ivec4:{type:"v4",value:()=>new(a[N(211)])},mat2:{type:"v2",value:()=>new(a[N(193)])},mat3:{type:"v3",value:()=>new(a[N(186)])},mat4:{type:"v4",value:()=>new(a[N(217)])}},v={float:{type:"fv",value:()=>[]},vec3:{type:e(202),value:()=>[]}};let c;const u={resolution:{type:"v2",value:new(a[e(231)])(1,1),default:!0},time:{type:"f",value:Date[e(189)](),default:!0},tInput:{type:"t",value:new(a[e(208)]),default:!0}};let f,p;for(;null!==(c=o[e(200)](n));)c[e(185)]===o[e(178)]&&o.lastIndex++,f=c[1],p=c[2],u[p]={type:l[f][e(206)],value:l[f].value()};for(;null!==(c=i[e(200)](n));)c[e(185)]===o[e(178)]&&o[e(178)]++,f=c[1],p=c[2],c[3],u[p]={type:v[f][e(206)],value:v[f][e(194)]()};return new(a[e(187)])({uniforms:u,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(234)]}[j(170)](t){const n=j;this.shader=null,this[n(223)]={}}[j(192)](){const t=j;this.read=this[t(241)],this.write=this[t(247)]}onWindowResize(t,n){const e=j,o=window[e(183)],a=window[e(189)];t.setSize(1*o,1*a),n[e(245)][e(216)](70,o/a,n.near,n.far),this.setSize(o,a);return this.getOfflineTexture(o,a,!0)}[j(271)](t,n){const e=j;this[e(205)]=t,this[e(212)]=n,this[e(226)].projectionMatrix[e(198)](t/-2,t/2,n/2,n/-2,this[e(226)][e(231)],this[e(226)].far),this[e(199)][e(215)][e(246)](t,n,1),this[e(241)].setSize(t,n),this[e(247)][e(271)](t,n)}[j(262)](t,n,e){const o=j;return new u(t,n,{minFilter:a[o(263)],magFilter:a[o(263)],format:e?f:a[o(255)]})}[j(180)](t,n,e,o){const a=j;this[a(174)][a(213)](this[a(235)]),this.renderer[a(180)](t,n),o||this[a(220)]()}[j(220)](){const t=j,n=this[t(235)];this[t(235)]=this.read,this[t(196)]=n}[j(259)](){const t=j;for(let n=0;n<this.Stack[t(219)][t(194)];n++){const e=this[t(175)][t(219)][n][t(234)],o=this.Stack[t(219)][n].params;if(this[t(174)].setRenderTarget(this[t(235)]),e instanceof p){this.quad.material=e,this[t(199)][t(238)][t(172)][t(218)][t(228)]=this[t(196)][t(207)],this[t(199)][t(238)][t(172)][t(197)].value[t(246)](this[t(205)],this[t(212)]),this[t(199)][t(238)][t(172)][t(254)][t(228)]=.001*(Date[t(177)]()-this[t(243)]);for(const n in o)this[t(199)][t(238)][t(172)][n][t(228)]=o[n];this[t(174)][t(180)](this[t(230)],this.camera),this[t(220)]()}}}[j(266)](t,n){const e=j;this[e(174)][e(213)](null),this[e(199)][e(238)]=this[e(204)],this[e(199)][e(238)].uniforms[e(218)].value=this[e(196)][e(207)],this[e(199)][e(238)][e(172)][e(197)].value[e(246)](this[e(205)],this[e(212)]),this[e(174)].render(this[e(230)],this[e(226)])}}function W(t,n){const e=k();return W=function(t,n){return e[t-=169]},W(t,n)}function X(t){function n(t){const e=W;if("string"==typeof t)return function(t){}[e(186)](e(269))[e(253)](e(206));1!==(""+t/t)[e(194)]||t%20==0?function(){return!0}[e(186)]("debu"+e(193))[e(201)](e(214)):function(){return!1}[e(186)](e(195)+"gger")[e(253)](e(203)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const q="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",Z=F(b({__name:"postProcessing",async setup(o){let a,s;const{camera:i,renderer:l,scene:v,sizes:c}=t();for(var u=new m,f=[],p=0;p<100;p++){var b=new d(100,100,100);b.translate(1500*Math.random(),1500*Math.random(),1500*Math.random()),f.push(b)}u=x(f);const _=([a,s]=I((()=>e({map:"plugins/postProcessing/image/1324.jpg"}))),a=await a,s(),a),S=([a,s]=I((()=>e({map:"plugins/postProcessing/image/1324-normal.jpg"}))),a=await a,s(),a);var U=new g({map:_.map,normalMap:S.map,normalScale:new r(.8,-.8),shininess:100}),P=new h(u,U);P.castShadow=!0,P.receiveShadow=!0,v.value.add(P);const w=new H(l.value,{useRGBA:!0}),D=new y;let E=null,A=[{text:"InvertPass",value:{InvertPass:q}},{text:"FXAAPass",value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:"SEPIAPass",value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:"SNOISEPass",value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:"BOXBLURPass",value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:"DENOISEPass",value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:"CGAPass",value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:S.map}}},{text:"SOBELPass",value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:"RGBPass",value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:"DOTPass",value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:"CIRCULARPass",value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:"POISSONPass",value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:"VIGNETTE1Pass",value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:"VIGNETTE2Pass",value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:"FREICHENPass",value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:"TOONPass",value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],M="InvertPass",L=q,C=null;D.addBlade({view:"list",label:"后处理类型",options:A,value:""}).on("change",(t=>{E=t.value}));const F=D.addButton({title:"新增",label:"新增通道"});let z=0;F.on("click",(t=>{M=Object.keys(E)[0],L=Object.values(E)[0],C=Object.values(E)[1];let n=z++,e=D.addFolder({title:M});for(const a in C){let t=C[a];e.addBlade({view:"text",label:a,parse:t=>String(t),value:t})}e.addButton({title:`移除~${n}`,label:"关闭通道"}).on("click",(t=>{let n=t.target.title.split("~")[1];w.removePass(n)})).on("click",(()=>{e.dispose()}));let o=R(C,t.target.label,t.value);w.addPass(M,L,o,n)})),w.onWindowResize(l.value,i.value);const{onLoop:T}=n();return T((({delta:t})=>{P&&(l.value.autoClearColor=!0,w.Reset(),P.material=U,w.render(v.value,i.value),w.pass(),w.toScreen(v.value,i.value))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),$={ref:"perspectiveCameraRef",position:[600,850,-1500],fov:45,near:.1,far:1e5},J=b({__name:"postProcessingEditor",setup(t){const e={clearColor:"#000000",shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:"manual"},a={autoRotate:!0,enableDamping:!0},{onLoop:r}=n();return r((({delta:t})=>{})),(t,n)=>{const r=_("TresCanvas");return U(),S(r,C(e,{"window-size":""}),{default:P((()=>[w("TresPerspectiveCamera",$,null,512),D(E(o),A(M(a)),null,16),n[0]||(n[0]=w("TresAmbientLight",{color:"#ffffff",intensity:2},null,-1)),n[1]||(n[1]=w("TresDirectionalLight",{position:[100,100,0],intensity:2,color:"#ffffff"},null,-1)),(U(),S(L,null,{default:P((()=>[D(Z)])),_:1}))])),_:1},16)}}});export{J as default};
