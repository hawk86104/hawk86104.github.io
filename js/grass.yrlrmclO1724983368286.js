import{a6 as t,V as n,K as e,Z as o,a9 as r}from"./three.p-9BQwc31724983368286.js";import{$ as a,N as i,d as s,x as c}from"./@tresjs.OrqGCbtj1724983368286.js";import"./index.9gEM8D-_1724983368286.js";import{a as l}from"./simplex-noise.MycypUyu1724983368286.js";import{C as u}from"./index.LdVI1Df31724983368286.js";import{d as f,a4 as p,o as h,D as m,J as v,u as d,r as g,f as x,g as w,j as y,aj as b,ak as _,al as j}from"./@vue.Q1VpS3901724983368286.js";import{_ as M}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.cBw45JKb1724983368286.js";import"./tweakpane.yHWGBmom1724983368286.js";import"./@vueuse.n6I5WvfU1724983368286.js";import"./lamina.SFkNXxSC1724983368286.js";import"./glsl-tokenizer.EVM27uTn1724983368286.js";import"./@amap.-Bisu7YL1724983368286.js";import"./glsl-token-descope.3LwP20LQ1724983368286.js";import"./glsl-token-depth.62_h8eTL1724983368286.js";import"./glsl-token-scope.02WBKv9g1724983368286.js";import"./glsl-token-properties.VFPuH1Uo1724983368286.js";import"./glsl-token-assignments.fRfQK60l1724983368286.js";import"./glsl-token-string.rzq7L3HM1724983368286.js";import"./glsl-token-functions.DersDqx01724983368286.js";import"./object-hash.X2exW7z_1724983368286.js";import"./jszip.VoLYwi951724983368286.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.U3axf4Xs1724983368286.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.l-WUTGx31724983368286.js";import"./three-stdlib._CB_uvPa1724983368286.js";import"./@pmndrs.OCGdGm_L1724983368286.js";import"./utils.AlibL-r_1724983368286.js";const z=C;!function(t,n){const e=C,o=P();for(;;)try{if(464702===-parseInt(e(391))/1+-parseInt(e(430))/2+parseInt(e(427))/3*(parseInt(e(381))/4)+-parseInt(e(405))/5+parseInt(e(390))/6+parseInt(e(439))/7+parseInt(e(451))/8)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(398)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function C(t,n){const e=P();return(C=function(t,n){return e[t-=376]})(t,n)}!function(){A(this,(function(){const t=C,n=new RegExp(t(407)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=E(t(425));n[t(450)](o+t(382))&&e.test(o+"input")?E():o("0")}))()}();const I=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(398)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();I(void 0,(function(){const t=C,n=function(){const t=C;let n;try{n=Function(t(403)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(385)]=n.console||{},o=[t(377),t(389),t(446),t(436),"exception",t(397),t(447)];for(let r=0;r<o[t(433)];r++){const n=I[t(449)][t(402)].bind(I),a=o[r],i=e[a]||n;n.__proto__=I[t(419)](I),n[t(411)]=i[t(411)].bind(i),e[a]=n}}))();const k=[z(416)],F=[z(412),z(378),"attributes-uv","attributes-offset","attributes-orientation",z(442),z(396),z(399)],S=[z(392)],R=[z(388)],D=f({__name:"grass",props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(r){const s=z;let c,f;const g=([c,f]=p((()=>i({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),c=await c,f(),c),x=r,w=l(Math[s(408)]);function y(n,e){const o=s,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,a=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,i=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,c=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(428)])(r,a,i,c)}function b(t,n){var e=2*w(t/50,n/50);return e+=4*w(t/100,n/100),e+=.2*w(t/10,n/10)}const _=function(o,r){const a=s,i=[],c=[],l=[],u=[],f=[];let p=new(t[a(428)]),h=new(t[a(428)]);const m=-.25;for(let e=0;e<o;e++){const s=Math[a(408)]()*r-r/2,v=Math[a(408)]()*r-r/2,d=b(s,v);i[a(421)](s,d,v);let g=Math.PI-Math[a(408)]()*(2*Math.PI);u[a(421)](Math[a(435)](.5*g)),f.push(Math[a(443)](.5*g));let x=new n(0,1,0),w=x.x*Math.sin(g/2),_=x.y*Math[a(435)](g/2),j=x.z*Math[a(435)](g/2),M=Math[a(443)](g/2);p[a(422)](w,_,j,M)[a(395)](),g=.5*Math[a(408)]()+m,x=new(t[a(444)])(1,0,0),w=x.x*Math[a(435)](g/2),_=x.y*Math[a(435)](g/2),j=x.z*Math[a(435)](g/2),M=Math.cos(g/2),h[a(422)](w,_,j,M)[a(395)](),p=y(p,h),g=.5*Math[a(408)]()+m,x=new(t[a(444)])(0,0,1),w=x.x*Math.sin(g/2),_=x.y*Math.sin(g/2),j=x.z*Math[a(435)](g/2),M=Math[a(443)](g/2),h[a(422)](w,_,j,M)[a(395)](),p=y(p,h),c.push(p.x,p.y,p.z,p.w),e<o/3?l[a(421)](1.8*Math[a(408)]()):l.push(Math.random())}return{offsetsF32:new e(new Float32Array(i),3),orientationsF32:new(t[a(409)])(new Float32Array(c),4),stretchesF32:new(t[a(409)])(new Float32Array(l),1),halfRootAngleCosF32:new(t[a(409)])(new Float32Array(f),1),halfRootAngleSinF32:new(t[a(409)])(new Float32Array(u),1)}}(x.instances,x[s(406)]),j=new(t[s(437)])(x.bW,x.bH,1,x[s(434)])[s(384)](0,x.bH/2,0),M=new(t[s(437)])(x[s(406)],x[s(406)],32,32);M.lookAt(new(t[s(444)])(0,1,0));const A=M[s(410)][s(445)];for(let t=0;t<A[s(413)][s(433)];t+=3)A[s(413)][t+1]=b(A[s(413)][t],A.array[t+2]);M.attributes[s(445)].needsUpdate=!0,M[s(383)]();const C=new(u({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(t[s(379)])(.3,.9,0)[s(417)](),bottomColor:new(t[s(379)])(0,.2,0)[s(417)]()},s(404),s(400),(t=>{t[s(388)]=o})));C[s(386)]=g[s(386)],C[s(387)]=g.alphaMap,C.toneMapped=!1;const{onLoop:I}=a();return I((({elapsed:t})=>{const n=s;C[n(448)][n(440)][n(432)]=t/4})),(n,e)=>{const o=s;return h(),m(o(423),null,[v(o(393),{material:d(C)},[v("TresInstancedBufferGeometry",{index:d(j)[o(412)],"attributes-position":d(j).attributes[o(445)],"attributes-uv":d(j)[o(410)].uv,"attributes-offset":d(_)[o(415)],"attributes-orientation":d(_)[o(431)],"attributes-stretch":d(_)[o(420)],"attributes-halfRootAngleSin":d(_)[o(401)],"attributes-halfRootAngleCos":d(_)[o(414)]},null,8,F)],8,k),v(o(393),{position:[0,0,0],geometry:d(M)},[v("TresMeshStandardMaterial",{color:o(441),side:t[o(394)]},null,8,R)],8,S)])}}});function E(t){function n(t){const e=C;if(typeof t===e(438))return function(t){}[e(449)](e(424))[e(398)](e(418));1!==(""+t/t)[e(433)]||t%20==0?function(){return!0}[e(449)](e(426)+e(380))[e(429)]("action"):function(){return!1}.constructor(e(426)+"gger")[e(398)](e(376)),n(++t)}try{if(t)return n;n(0)}catch(e){}}function P(){const t=["621115ruUFlo","width","function *\\( *\\)","random","InstancedBufferAttribute","attributes","toString","index","array","halfRootAngleCosF32","offsetsF32","material","convertSRGBToLinear","counter","bind","stretchesF32","push","set","TresGroup","while (true) {}","init","debu","6qsRUCw","Vector4","call","1669476BrmQPA","orientationsF32","value","length","joints","sin","error","PlaneGeometry","string","4944968aZtmKA","time","#000f00","attributes-stretch","cos","Vector3","position","info","trace","uniforms","constructor","test","7953064VmURWT","stateObject","log","attributes-position","Color","gger","734248vVhCGS","chain","computeVertexNormals","translate","console","map","alphaMap","side","warn","1307304bPsVHr","861902MNWclc","geometry","TresMesh","DoubleSide","normalize","attributes-halfRootAngleSin","table","apply","attributes-halfRootAngleCos","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","halfRootAngleSinF32","prototype","return (function() ","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }"];return(P=function(){return t})()}const T=q;!function(t,n){const e=q,o=H();for(;;)try{if(866557===-parseInt(e(490))/1*(-parseInt(e(500))/2)+-parseInt(e(506))/3+-parseInt(e(508))/4*(parseInt(e(499))/5)+parseInt(e(480))/6+-parseInt(e(470))/7*(-parseInt(e(482))/8)+parseInt(e(507))/9*(parseInt(e(494))/10)+parseInt(e(492))/11*(parseInt(e(501))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(472)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){L(this,(function(){const t=q,n=new RegExp(t(491)),e=new RegExp(t(471),"i"),o=U(t(478));n[t(503)](o+"chain")&&e[t(503)](o+t(476))?U():o("0")}))()}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(472)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function q(t,n){const e=H();return(q=function(t,n){return e[t-=469]})(t,n)}function H(){const t=["__proto__","stateObject","action","table","1AygnJs","function *\\( *\\)","1485NjyCYY","counter","9390lqrxLJ","constructor","return (function() ","grass","error","225PyCCKq","1377130mDeFeZ","118596xqgfyk","bind","test","log","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","3904875VCklTJ","333aZmotk","47172bEBhmF","gger","debu","695233LmkjrC","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","apply","toString","length","info","input","console","init","exception","3252210AEjptk","prototype","8XZpQLi","TresPerspectiveCamera","string","warn"];return(H=function(){return t})()}B(void 0,(function(){const t=q,n=function(){const t=q;let n;try{n=Function(t(496)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(477)]=n[t(477)]||{},o=[t(504),t(485),t(475),t(498),t(479),t(489),"trace"];for(let r=0;r<o[t(474)];r++){const n=B[t(495)][t(481)][t(502)](B),a=o[r],i=e[a]||n;n[t(486)]=B.bind(B),n.toString=i[t(473)][t(502)](i),e[a]=n}}))();const O=v(T(483),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1),V=f({__name:T(497),setup(t){const n=g({alpha:!0,toneMapping:r,windowSize:!0,clearColor:6710886}),e=g({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=q;return h(),x(d(c),b(_(n)),{default:w((()=>[O,y(d(s),b(_(e)),null,16),(h(),x(j,null,{default:w((()=>[y(D)])),_:1})),(h(),x(j,null,{default:w((()=>[y(d(M),{texture:r(505)})])),_:1}))])),_:1},16)}}});function U(t){function n(t){const e=q;if(typeof t===e(484))return function(t){}.constructor("while (true) {}")[e(472)](e(493));1!==(""+t/t)[e(474)]||t%20==0?function(){return!0}[e(495)](e(469)+e(509)).call(e(488)):function(){return!1}.constructor(e(469)+"gger")[e(472)](e(487)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{V as default};
