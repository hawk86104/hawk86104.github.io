function e(e,t,n){const o=function(e,t,n){const o=r(e,e.VERTEX_SHADER,t),a=r(e,e.FRAGMENT_SHADER,n);if(!o||!a)return null;const l=e.createProgram();if(!l)return null;e.attachShader(l,o),e.attachShader(l,a),e.linkProgram(l);const c=e.getProgramParameter(l,e.LINK_STATUS);if(!c){const r=e.getProgramInfoLog(l);return console.log(`Failed to link program: ${r}`),e.deleteProgram(l),e.deleteShader(a),e.deleteShader(o),null}return l}(e,t,n);return o?(e.useProgram(o),e.program=o,o):(console.log("创建项目失败！"),!1)}function r(e,r,t){const n=e.createShader(r);if(null==n)return console.log("unable to create shader"),null;e.shaderSource(n,t),e.compileShader(n);if(!e.getShaderParameter(n,e.COMPILE_STATUS)){const r=e.getShaderInfoLog(n);return console.log(`Failed to compile shader: ${r}`),e.deleteShader(n),null}return n}function t(e,r){r=r||1;const t=e.clientWidth*r|0,n=e.clientHeight*r|0;return(e.width!==t||e.height!==n)&&(e.width=t,e.height=n,!0)}function n(e){return e*Math.PI/180}export{n as d,e as i,t as r};
