import{_ as e}from"./three.3b9CEYeV1731055558423.js";import{e as n,U as t,b as a}from"./@tresjs.KsuCtVXf1731055558423.js";import{P as o}from"./tweakpane.yHWGBmom1731055558423.js";import{d as r,a6 as i,X as l,e as s,o as u,f as c,g as f,J as v,j as p,u as m,m as d,aj as h,ak as g}from"./@vue.u2cBPEWn1731055558423.js";import"./@vueuse.GLWi_e1b1731055558423.js";const x=w;!function(e,n){const t=w,a=T();for(;;)try{if(146149===parseInt(t(377))/1+parseInt(t(380))/2+parseInt(t(331))/3+parseInt(t(367))/4+-parseInt(t(371))/5*(parseInt(t(328))/6)+parseInt(t(329))/7+-parseInt(t(343))/8)break;a.push(a.shift())}catch(o){a.push(a.shift())}}();const y=function(){let e=!0;return function(n,t){const a=e?function(){if(t){const e=t[w(330)](n,arguments);return t=null,e}}:function(){};return e=!1,a}}();function T(){const e=["error","粒子大小","TresShaderMaterial","1492nyTbFt","SRGBColorSpace","length","574864oQFGgS","#ffffff","addBinding","bind","wireframeMaterialRef","#080820","506670QsnBVu","951902zMlpWW","apply","541434OtGfyP","uWaveHeight","toString","#17c5a9","#122148","TresPoints","TresMesh","init","prototype","action","uWaveSpeed","uniforms","3582480JcMidc","test","info","while (true) {}","海浪高度","constructor","log","chain","debu","TresMeshBasicMaterial","exception","TresIcosahedronGeometry","TresCanvas","addFolder","groupRef","TresPerspectiveCamera","console","trace","海浪变化速度","value","input","counter","FrontSide","string","292064TnrqMH","return (function() ","call","color","5HuozIV","change","pointsEarth"];return(T=function(){return e})()}!function(){y(this,(function(){const e=w,n=new RegExp("function *\\( *\\)"),t=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),a=_(e(338));n[e(344)](a+e(350))&&t[e(344)](a+e(363))?_():a("0")}))()}();const S=function(){let e=!0;return function(n,t){const a=e?function(){if(t){const e=t[w(330)](n,arguments);return t=null,e}}:function(){};return e=!1,a}}();function w(e,n){const t=T();return(w=function(e,n){return t[e-=327]})(e,n)}S(void 0,(function(){const e=w;let n;try{n=Function(e(368)+'{}.constructor("return this")( ));')()}catch(o){n=window}const t=n.console=n[e(359)]||{},a=[e(349),"warn",e(345),e(374),e(353),"table",e(360)];for(let r=0;r<a[e(379)];r++){const n=S[e(348)][e(339)].bind(S),o=a[r],i=t[o]||n;n.__proto__=S[e(383)](S),n.toString=i[e(333)][e(383)](i),t[o]=n}}))();const b=r({__name:x(373),async setup(r){const y=x;let T,S;const w={color:y(334),pointSize:4},b={clearColor:y(335),shadows:!1,alpha:!1,outputColorSpace:e[y(378)]},_={color:w[y(370)],wireframe:!0,transparent:!0,opacity:.2},z=([T,S]=i((()=>a(["./plugins/earthSample/image/pointsEarth/00_earthmap1k.jpg","./plugins/earthSample/image/pointsEarth/circle.png","./plugins/earthSample/image/pointsEarth/04_rainbow1k.jpg","./plugins/earthSample/image/pointsEarth/01_earthbump1k.jpg","./plugins/earthSample/image/pointsEarth/02_earthspec1k.jpg"]))),T=await T,S(),T),j=z[0],E=z[1],P=z[2],D=z[3],M=z[4],k={uniforms:{size:{type:"f",value:w.pointSize},uTime:{type:"f",value:0},uWaveHeight:{type:"f",value:.075},uWaveSpeed:{type:"f",value:.2},colorTexture:{type:"t",value:P},elevTexture:{type:"t",value:D},alphaTexture:{type:"t",value:M},earthTexture:{type:"t",value:j},starTexture:{type:"t",value:E}},vertexShader:"  uniform float size;\n  uniform sampler2D elevTexture;\n  uniform sampler2D alphaTexture;\n  uniform float uTime;\n  uniform float uWaveHeight;\n  uniform float uWaveSpeed;\n\n  varying vec2 vUv;\n  varying float vVisible;\n  varying float vAlpha;\n  varying float vElevation;\n  // Function to generate fBm with vec3 input\n  float random(vec3 st) {\n    return fract(sin(dot(st.xyz, vec3(12.9898,78.233,45.164))) * 43758.5453123);\n}\n\nfloat noise(vec3 st) {\n    vec3 i = floor(st);\n    vec3 f = fract(st);\n\n    // Eight corners in 3D of a tile\n    float a = random(i);\n    float b = random(i + vec3(1.0, 0.0, 0.0));\n    float c = random(i + vec3(0.0, 1.0, 0.0));\n    float d = random(i + vec3(1.0, 1.0, 0.0));\n    float e = random(i + vec3(0.0, 0.0, 1.0));\n    float f1 = random(i + vec3(1.0, 0.0, 1.0));\n    float g = random(i + vec3(0.0, 1.0, 1.0));\n    float h = random(i + vec3(1.0, 1.0, 1.0));\n\n    vec3 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(mix(mix(a, b, u.x), mix(c, d, u.x), u.y),\n               mix(mix(e, f1, u.x), mix(g, h, u.x), u.y), u.z);\n}\n\nfloat fbm(vec3 st) {\n    float value = 0.0;\n    float amplitude = 0.5;\n\n    for (int i = 0; i < 5; i++) {\n        value += amplitude * noise(st);\n        st *= 2.0;\n        amplitude *= 0.5;\n    }\n    return value;\n}\n\n  void main() {\n    vUv = uv;\n    float alphaLand = 1.0 - texture2D(alphaTexture, vUv).r;\n    vAlpha = alphaLand;\n    vec3 newPosition = position;\n\n    if(alphaLand < 0.5) {\n      // Sea\n      // fBm for wave-like displacement\n      float waveHeight = uWaveHeight; // Adjust wave height as needed\n      float waveSpeed = uWaveSpeed;  // Adjust wave speed as needed\n      float displacement = (fbm(newPosition * 5.0 + uTime * waveSpeed) * 2.0 - 1.0) * waveHeight;\n      vElevation = displacement;\n      newPosition += normal * displacement ;\n    }\n\n    vec4 mvPosition = modelViewMatrix * vec4( newPosition, 1.0 );\n    float elv = texture2D(elevTexture, vUv).r;\n    vec3 vNormal = normalMatrix * normal;\n    vVisible = step(0.0, dot( -normalize(mvPosition.xyz), normalize(vNormal)));\n    mvPosition.z += 0.45 * elv;\n\n    // 求出 mvPosition 距离相机的距离\n    float dist = length(mvPosition.xyz);\n    // 根据距离调整 size\n    float pointSize = size * (1.0 - dist / 10.0);\n    gl_PointSize = max(pointSize, 1.0);\n    gl_PointSize = pointSize;\n    gl_Position = projectionMatrix * mvPosition;\n  }\n",fragmentShader:"  uniform sampler2D colorTexture;\n  // uniform sampler2D alphaTexture;\n  uniform sampler2D earthTexture;\n  uniform sampler2D starTexture;\n\n  varying vec2 vUv;\n  varying float vVisible;\n  varying float vAlpha;\n  varying float vElevation;\n\n  void main() {\n    if (floor(vVisible + 0.1) == 0.0) discard;\n    vec2 coord = gl_PointCoord;\n    float alpha = texture2D(starTexture, coord).a;\n    // 根据 alpha 值来裁剪形状\n    if (alpha < 0.1) discard;\n\n    // float alphaLand = 1.0 - texture2D(alphaTexture, vUv).r;\n    vec3 color = texture2D(colorTexture, vUv).rgb;\n    vec3 earth = texture2D(earthTexture, vUv).rgb;\n    color = mix(color, earth, 0.65);\n    if(\n      vAlpha > 0.5\n    ) {\n      gl_FragColor = vec4(color, vAlpha);\n    }else {\n      // 对于海洋部分，根据 vElevation 调整颜色\n      float elevationEffect = clamp(vElevation*30.0, -1.0, 1.0); // 将 vElevation 限制在 [-1, 1] 范围内\n      vec3 deep_sea_blue = vec3(0.004, 0.227, 0.388);\n      vec3 adjustedColor = mix(deep_sea_blue, earth*1.75, (elevationEffect + 1.0) * 0.5); // 根据 vElevation 调整颜色\n      gl_FragColor = vec4(adjustedColor, 1.0-vAlpha);\n    }\n  }\n",transparent:!0,side:e[y(365)]},A=l(),C=l(),I=(new o)[y(356)]({title:"Debug"});I[y(382)](w,y(370),{type:y(370)}).on(y(372),(({value:e})=>{C[y(362)].color.set(e)})),I[y(382)](k[y(342)].size,y(362),{min:.1,max:10,step:.1,label:y(375)}),I.addBinding(k[y(342)][y(332)],y(362),{min:.01,max:.5,step:.01,label:y(347)}),I[y(382)](k[y(342)][y(341)],y(362),{min:.01,max:1,step:.01,label:y(361)});const{onLoop:W}=n();return W((({delta:e})=>{const n=y;A.value&&(A[n(362)].rotation.y+=.002,k.uniforms.uTime[n(362)]+=10*e)})),(e,n)=>{const a=y,o=s(a(355));return u(),c(o,d(b,{"window-size":""}),{default:f((()=>[n[2]||(n[2]=v(a(358),{position:[0,0,3.5],fov:45,near:.1,far:20},null,-1)),p(m(t),{autoRotate:!0,autoRotateSpeed:2}),v("TresGroup",{ref_key:a(357),ref:A},[v(a(337),null,[n[0]||(n[0]=v(a(354),{args:[1,4]},null,-1)),v(a(352),d({ref_key:a(384),ref:C},_),null,16)]),v(a(336),null,[n[1]||(n[1]=v(a(354),{args:[1,128]},null,-1)),v(a(376),h(g(k)),null,16)])],512),n[3]||(n[3]=v("TresHemisphereLight",{args:[a(381),a(327),3]},null,-1))])),_:1},16)}}});function _(e){function n(e){const t=w;if(typeof e===t(366))return function(e){}[t(348)](t(346))[t(330)](t(364));1!==(""+e/e).length||e%20==0?function(){return!0}[t(348)](t(351)+"gger")[t(369)](t(340)):function(){return!1}[t(348)](t(351)+"gger")[t(330)]("stateObject"),n(++e)}try{if(e)return n;n(0)}catch(t){}}export{b as default};
