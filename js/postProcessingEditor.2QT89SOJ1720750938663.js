import{a as t,r as n,N as e,d as o}from"./@tresjs.toBU36DO1720750938663.js";import{j as r,a5 as s,V as a,s as i,l as c,be as l,aU as u,k as v,bU as f}from"./three.c_4mN3mZ1720750938663.js";import{P as p}from"./tweakpane.yHWGBmom1720750938663.js";import{d,a3 as g,e as m,o as x,f as h,g as y,J as I,j as b,u as _,aj as S,ak as U,al as w,m as P}from"./@vue.ApkyOKE71720750938663.js";import{_ as D}from"./@fesjs.hPzU4o281720750938663.js";import"./@vueuse.NiHn2U_k1720750938663.js";import"./vue-router.cSmWJIl41720750938663.js";import"./lodash-es.nFpJXAf-1720750938663.js";import"./@qlin.yHhFDldE1720750938663.js";import"./pinia.1mscjV6X1720750938663.js";import"./@floating-ui.BPbuo5Gx1720750938663.js";import"./@juggle.7yjBMqoW1720750938663.js";function E(){const t=["apply","action","counter","WagnerLoadShaderException","send","22oUOuFg","ShaderMaterial","type","Matrix4","warn","3474136brNUYX","value","error","log","random","507642HXWrct","\" couldn't be loaded.","info","exec","chain","Matrix3","return (function() ","Matrix2","__proto__","index","822774Ovwsge","onerror","responseText","Vector3","onload","console","1979XqxvKb","15NakOAC","now","3710712alBvXT","length","message","init","toString","debu","stateObject","isArray","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","trace","gger","7376789FSkEIo",'" load was aborted.',"bind","replace","function *\\( *\\)","v3v","constructor",'Shader "','{}.constructor("return this")( )',"get","lastIndex","string","Texture","Vector2","test","Vector4","table","18048042aTNCJF"];return(E=function(){return t})()}!function(t,n){const e=C,o=E();for(;;)try{if(630838===parseInt(e(222))/1*(-parseInt(e(259))/2)+-parseInt(e(269))/3+parseInt(e(225))/4+parseInt(e(223))/5*(parseInt(e(279))/6)+parseInt(e(236))/7+parseInt(e(264))/8+-parseInt(e(253))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(254)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){A(this,(function(){const t=C,n=new RegExp(t(240)),e=new RegExp(t(233),"i"),o=F(t(228));n[t(250)](o+t(273))&&e[t(250)](o+"input")?F():o("0")}))()}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(254)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();L(void 0,(function(){const t=C;let n;try{n=Function(t(275)+t(244)+");")()}catch(r){n=window}const e=n[t(221)]=n[t(221)]||{},o=[t(267),t(263),t(271),t(266),"exception",t(252),t(234)];for(let s=0;s<o[t(226)];s++){const n=L[t(242)].prototype[t(238)](L),r=o[s],a=e[r]||n;n[t(277)]=L.bind(L),n.toString=a[t(229)].bind(a),e[r]=n}}))();function M(t,n,e){if("object"!=typeof t||null===t)return t;const o=Array[C(232)](t)?[]:{};for(const r in t)t.hasOwnProperty(r)&&(o[r]=M(t[r])),r==n&&(o[n]=e);return o}function C(t,n){const e=E();return(C=function(t,n){return e[t-=217]})(t,n)}function F(t){function n(t){const e=C;if(typeof t===e(247))return function(t){}[e(242)]("while (true) {}")[e(254)](e(256));1!==(""+t/t)[e(226)]||t%20==0?function(){return!0}[e(242)](e(230)+e(235)).call(e(255)):function(){return!1}[e(242)](e(230)+e(235))[e(254)](e(231)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const z=R;!function(t,n){const e=R,o=B();for(;;)try{if(317229===parseInt(e(470))/1*(-parseInt(e(529))/2)+-parseInt(e(541))/3+parseInt(e(445))/4*(parseInt(e(468))/5)+parseInt(e(492))/6+-parseInt(e(454))/7+parseInt(e(496))/8+parseInt(e(449))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const T=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(475)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){T(this,(function(){const t=R,n=new RegExp(t(505)),e=new RegExp(t(448),"i"),o=j(t(469));n[t(507)](o+"chain")&&e[t(507)](o+t(457))?j():o("0")}))()}();const N=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(475)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function B(){const t=["52474mozVbP","__proto__","tInput","clone","loadShadervf","makeOrthographic","push","setSize","settings","WebGLRenderTarget","string","write","1119501YIZeTf","resolution","log","23280DBjEcP","Scene","Mesh","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","4134915TvqLPC",'{}.constructor("return this")( )',"RGBFormat","height","set","4305847lbBxiO","prototype","magFilter","input","now","front","wrapS","far","warn","Stack","scale","passes","camera","quad","295tMwCia","init","6xERAQj","width","call","action","constructor","apply","add","MeshBasicMaterial","wrapT","makePerspective","shader","ClampToEdgeWrapping","exception","minFilter","projectionMatrix","debu","counter","near","removePass","scene","trace","passItems","1842306CPmTfy","OrthographicCamera","renderer","material","2824584iohAsZ","pass","type","error","console","bind","read","render","swapBuffers","function *\\( *\\)","innerHeight","test","value","RGBAFormat","toScreen","splice","addPass","texture","gger","getOfflineTexture","LinearFilter","return (function() ","useRGBA","toString","stateObject","back","CopyPass","UnsignedByteType","params","setRenderTarget","startTime","length","uniforms"];return(B=function(){return t})()}function R(t,n){const e=B();return(R=function(t,n){return e[t-=443]})(t,n)}N(void 0,(function(){const t=R,n=function(){const t=R;let n;try{n=Function(t(517)+t(450)+");")()}catch(e){n=window}return n}(),e=n[t(500)]=n[t(500)]||{},o=[t(444),t(462),"info",t(499),t(482),"table",t(490)];for(let r=0;r<o[t(527)];r++){const n=N.constructor[t(455)][t(501)](N),s=o[r],a=e[s]||n;n[t(530)]=N[t(501)](N),n[t(519)]=a[t(519)][t(501)](a),e[s]=n}}))();class G{constructor(t,n){const e=R;this[e(471)]=1,this.height=1,this.settings=n||{},this.useRGBA=this.settings[e(518)]||!1,this[e(494)]=t,this.copyPass=this[e(522)](this.settings),this.scene=new(s[e(446)]),this.quad=new(s[e(447)])(new i(1,1),new(s[e(477)])),this[e(489)][e(476)](this.quad),this[e(466)]=new(s[e(493)])(1,1,1,1,-1e4,1e4),this.front=new(s[e(538)])(1,1,{minFilter:void 0!==this[e(537)][e(483)]?this.settings[e(483)]:s[e(516)],magFilter:void 0!==this.settings[e(456)]?this[e(537)][e(456)]:c,wrapS:void 0!==this[e(537)][e(460)]?this[e(537)][e(460)]:l,wrapT:void 0!==this[e(537)].wrapT?this[e(537)][e(478)]:s[e(481)],format:this[e(518)]?u:s[e(451)],type:void 0!==this[e(537)][e(498)]?this[e(537)][e(498)]:s[e(523)],stencilBuffer:void 0===this[e(537)].stencilBuffer||this.settings.stencilBuffer}),this[e(521)]=this.front[e(532)](),this.startTime=Date[e(458)](),this[e(465)]={},this[e(463)]={passItems:[],passes:[]}}[z(512)](t,n,e,o){const r=z;this[r(533)](n);const s={shaderName:t,params:e,uuid:o,shader:this.shader};this[r(463)][r(491)][r(535)](s)}[z(488)](t){const n=z;for(let e=this[n(463)][n(491)][n(527)]-1;e>=0;e--)this[n(463)][n(491)][e].uuid===parseInt(t)&&this[n(463)][n(491)][n(511)](e,1);console[n(444)](this[n(463)][n(491)])}[z(522)](){const t=z;this.Pass[t(472)](this);return this[t(533)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}loadShadervf(t){const n=z;return this[n(480)]=function(t,n){const e=C,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,i=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,c={sampler2D:{type:"t",value:()=>new(s[C(248)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(s[C(249)])},vec3:{type:"v3",value:()=>new a},vec4:{type:"v4",value:()=>new(s[C(251)])},bvec2:{type:"v2",value:()=>new(s[C(249)])},bvec3:{type:"v3",value:()=>new(s[C(219)])},bvec4:{type:"v4",value:()=>new(s[C(251)])},ivec2:{type:"v2",value:()=>new(s[C(249)])},ivec3:{type:"v3",value:()=>new(s[C(219)])},ivec4:{type:"v4",value:()=>new(s[C(251)])},mat2:{type:"v2",value:()=>new(s[C(276)])},mat3:{type:"v3",value:()=>new(s[C(274)])},mat4:{type:"v4",value:()=>new(s[C(262)])}},l={float:{type:"fv",value:()=>[]},vec3:{type:e(241),value:()=>[]}};let u;const v={resolution:{type:"v2",value:new r(1,1),default:!0},time:{type:"f",value:Date[e(224)](),default:!0},tInput:{type:"t",value:new(s[e(248)]),default:!0}};let f,p;for(;null!==(u=o.exec(n));)u[e(278)]===o[e(246)]&&o[e(246)]++,f=u[1],p=u[2],v[p]={type:c[f][e(261)],value:c[f].value()};for(;null!==(u=i[e(272)](n));)u[e(278)]===o[e(246)]&&o[e(246)]++,f=u[1],p=u[2],u[3],v[p]={type:l[f][e(261)],value:l[f][e(265)]()};return new(s[e(260)])({uniforms:v,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}("varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }",t),this[n(480)]}Pass(t){const n=z;this[n(480)]=null,this[n(524)]={}}Reset(){const t=z;this.read=this[t(459)],this[t(540)]=this.back}onWindowResize(t,n){const e=z,o=window.innerWidth,r=window[e(506)];t[e(536)](1*o,1*r),n.projectionMatrix[e(479)](70,o/r,n[e(487)],n.far),this[e(536)](o,r);return this.getOfflineTexture(o,r,!0)}[z(536)](t,n){const e=z;this[e(471)]=t,this[e(452)]=n,this[e(466)][e(484)][e(534)](t/-2,t/2,n/2,n/-2,this[e(466)].near,this[e(466)][e(461)]),this[e(467)][e(464)][e(453)](t,n,1),this[e(459)][e(536)](t,n),this.back[e(536)](t,n)}[z(515)](t,n,e){const o=z;return new(s[o(538)])(t,n,{minFilter:c,magFilter:c,format:e?s[o(509)]:s[o(451)]})}render(t,n,e,o){const r=z;this[r(494)].setRenderTarget(this.write),this[r(494)][r(503)](t,n),o||this[r(504)]()}swapBuffers(){const t=z,n=this[t(540)];this[t(540)]=this[t(502)],this[t(502)]=n}[z(497)](){const t=z;for(let n=0;n<this[t(463)][t(491)][t(527)];n++){const e=this[t(463)][t(491)][n].shader,o=this.Stack[t(491)][n][t(524)];if(this.renderer[t(525)](this[t(540)]),e instanceof v){this[t(467)].material=e,this.quad.material.uniforms[t(531)].value=this.read.texture,this[t(467)][t(495)].uniforms[t(443)][t(508)][t(453)](this[t(471)],this[t(452)]),this[t(467)][t(495)].uniforms.time.value=.001*(Date[t(458)]()-this[t(526)]);for(const n in o)this[t(467)][t(495)][t(528)][n].value=o[n];this.renderer.render(this.scene,this.camera),this[t(504)]()}}}[z(510)](t,n){const e=z;this.renderer[e(525)](null),this[e(467)][e(495)]=this.copyPass,this.quad[e(495)].uniforms[e(531)][e(508)]=this[e(502)][e(513)],this.quad.material[e(528)][e(443)][e(508)][e(453)](this[e(471)],this[e(452)]),this.renderer[e(503)](this[e(489)],this[e(466)])}}function j(t){function n(t){const e=R;if(typeof t===e(539))return function(t){}[e(474)]("while (true) {}")[e(475)](e(486));1!==(""+t/t)[e(527)]||t%20==0?function(){return!0}[e(474)](e(485)+"gger")[e(472)](e(473)):function(){return!1}[e(474)](e(485)+e(514))[e(475)](e(520)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const O="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",V=X;!function(t,n){const e=X,o=W();for(;;)try{if(858286===-parseInt(e(355))/1+parseInt(e(373))/2+parseInt(e(375))/3+-parseInt(e(394))/4*(-parseInt(e(365))/5)+-parseInt(e(358))/6+parseInt(e(409))/7*(-parseInt(e(344))/8)+-parseInt(e(398))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[X(333)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){H(this,(function(){const t=X,n=new RegExp(t(376)),e=new RegExp(t(338),"i"),o=q("init");n[t(372)](o+"chain")&&e.test(o+t(403))?q():o("0")}))()}();const k=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[X(333)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function W(){const t=["1412VcLDyU","warn","toString","后处理类型","193221yIqIxK","Reset","constructor","Vector2","postProcessing","input","InvertPass","console","random",'{}.constructor("return this")( )',"title","1813lZJzBn","addPass","SEPIAPass","SOBELPass","string","DOTPass","apply","table","trace","call","value","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","return (function() ","移除~","text","list","click","36064rnBBUj","length","exception","Mesh","pass","mergeGeometries","error","dispose","debu","__proto__","BufferGeometry","1540765gvjHZi","新增通道","SNOISEPass","437472QrNQqr","castShadow","material","log","target","VIGNETTE2Pass","MeshPhongMaterial","22955SfBMsK","receiveShadow","BoxGeometry","gger","split","RGBPass","bind","test","1614762GBLSDA","values","3699000sOLaOl","function *\\( *\\)","map","addButton","VIGNETTE1Pass","plugins/postProcessing/image/1324.jpg","keys","CGAPass","info","addBlade","FREICHENPass","action","translate","CIRCULARPass","render","change","label","onWindowResize","autoClearColor"];return(W=function(){return t})()}function X(t,n){const e=W();return(X=function(t,n){return e[t-=333]})(t,n)}k(void 0,(function(){const t=X,n=function(){const t=X;let n;try{n=Function(t(339)+t(407)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(405)]||{},o=[t(361),t(395),t(383),t(350),t(346),t(334),t(335)];for(let r=0;r<o.length;r++){const n=k.constructor.prototype[t(371)](k),s=o[r],a=e[s]||n;n[t(353)]=k.bind(k),n[t(396)]=a[t(396)][t(371)](a),e[s]=n}}))();function q(t){function n(t){const e=X;if(typeof t===e(413))return function(t){}[e(400)]("while (true) {}")[e(333)]("counter");1!==(""+t/t)[e(345)]||t%20==0?function(){return!0}[e(400)](e(352)+e(368))[e(336)](e(386)):function(){return!1}[e(400)]("debu"+e(368))[e(333)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const Z=D(d({__name:V(402),async setup(o){const r=V;let a,i;const{camera:c,renderer:l,scene:u,sizes:v}=t();for(var d=new(s[r(354)]),m=[],x=0;x<100;x++){var h=new(s[r(367)])(100,100,100);h[r(387)](1500*Math[r(406)](),1500*Math[r(406)](),1500*Math[r(406)]()),m.push(h)}d=f[r(349)](m);const y=([a,i]=g((()=>e({map:r(380)}))),a=await a,i(),a),I=([a,i]=g((()=>e({map:"plugins/postProcessing/image/1324-normal.jpg"}))),a=await a,i(),a);var b=new(s[r(364)])({map:y[r(377)],normalMap:I[r(377)],normalScale:new(s[r(401)])(.8,-.8),shininess:100}),_=new(s[r(347)])(d,b);_[r(359)]=!0,_[r(366)]=!0,u[r(337)].add(_);const S=new G(l[r(337)],{useRGBA:!0}),U=new p;let w=null,P=[{text:"InvertPass",value:{InvertPass:O}},{text:"FXAAPass",value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:r(411),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:r(357),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:"BOXBLURPass",value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:"DENOISEPass",value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:r(382),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:I[r(377)]}}},{text:r(412),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:r(370),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:r(414),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:r(388),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:"POISSONPass",value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:r(379),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:r(363),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:r(385),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:"TOONPass",value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],D=r(404),E=O,A=null;U[r(384)]({view:r(342),label:r(397),options:P,value:""}).on(r(390),(t=>{w=t[r(337)]}));const L=U.addButton({title:"新增",label:r(356)});let C=0;L.on("click",(t=>{const n=r;D=Object[n(381)](w)[0],E=Object[n(374)](w)[0],A=Object[n(374)](w)[1];let e=C++,o=U.addFolder({title:D});for(const r in A){let t=A[r];o[n(384)]({view:n(341),label:r,parse:t=>String(t),value:t})}o[n(378)]({title:n(340)+e,label:"关闭通道"}).on(n(343),(t=>{const e=n;let o=t[e(362)][e(408)][e(369)]("~")[1];S.removePass(o)})).on(n(343),(()=>{o[n(351)]()}));let s=M(A,t[n(362)][n(391)],t[n(337)]);S[n(410)](D,E,s,e)})),S[r(392)](l[r(337)],c.value);const{onLoop:F}=n();return F((({delta:t})=>{const n=r;_&&(l[n(337)][n(393)]=!0,S[n(399)](),_[n(360)]=b,S[n(389)](u[n(337)],c.value),S[n(348)](),S.toScreen(u[n(337)],c[n(337)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),$=K;function K(t,n){const e=Y();return(K=function(t,n){return e[t-=395]})(t,n)}!function(t,n){const e=K,o=Y();for(;;)try{if(951764===-parseInt(e(435))/1*(parseInt(e(398))/2)+-parseInt(e(427))/3+parseInt(e(422))/4*(parseInt(e(408))/5)+parseInt(e(426))/6+parseInt(e(407))/7+parseInt(e(402))/8*(-parseInt(e(421))/9)+parseInt(e(415))/10*(parseInt(e(413))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){Q(this,(function(){const t=K,n=new RegExp(t(431)),e=new RegExp(t(411),"i"),o=rt(t(420));n.test(o+t(404))&&e[t(399)](o+t(401))?rt():o("0")}))()}();const J=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[K(406)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function Y(){const t=["#ffffff","165faHyWQ","call","621910hofaNE","toString","table","length","warn","init","9VYHOIx","16LScXxI","TresAmbientLight","return (function() ","trace","1612998kSHulo","2927901VDhKWB","bind","log","stateObject","function *\\( *\\)","exception","#000000","constructor","6199CyIWuM","action","counter",'{}.constructor("return this")( )',"TresDirectionalLight","prototype","2LLxAHT","test","postProcessingEditor","input","5468776iUBEIL","debu","chain","string","apply","9262519FsiIBI","115765xgkepG","console","info","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)"];return(Y=function(){return t})()}J(void 0,(function(){const t=K;let n;try{n=Function(t(424)+t(395)+");")()}catch(r){n=window}const e=n[t(409)]=n.console||{},o=[t(429),t(419),t(410),"error",t(432),t(417),t(425)];for(let s=0;s<o.length;s++){const n=J[t(434)][t(397)][t(428)](J),r=o[s],a=e[r]||n;n.__proto__=J[t(428)](J),n.toString=a[t(416)][t(428)](a),e[r]=n}}))();const tt={ref:"perspectiveCameraRef",position:[600,850,-1500],fov:45,near:.1,far:1e5},nt=I($(423),{color:$(412),intensity:2},null,-1),et=I($(396),{position:[100,100,0],intensity:2,color:$(412)},null,-1),ot=d({__name:$(400),setup(t){const e={clearColor:$(433),shadows:!0,alpha:!1,useLegacyLights:!0},r={autoRotate:!0,enableDamping:!0},{onLoop:s}=n();return s((({delta:t})=>{})),(t,n)=>{const s=m("TresCanvas");return x(),h(s,P(e,{"window-size":""}),{default:y((()=>[I("TresPerspectiveCamera",tt,null,512),b(_(o),S(U(r)),null,16),nt,et,(x(),h(w,null,{default:y((()=>[b(Z)])),_:1}))])),_:1},16)}}});function rt(t){function n(t){const e=K;if(typeof t===e(405))return function(t){}[e(434)]("while (true) {}")[e(406)](e(437));1!==(""+t/t)[e(418)]||t%20==0?function(){return!0}[e(434)](e(403)+"gger")[e(414)](e(436)):function(){return!1}[e(434)](e(403)+"gger")[e(406)](e(430)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{ot as default};
