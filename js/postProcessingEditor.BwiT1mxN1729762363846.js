import{p as t,z as n,U as e,Y as o}from"./@tresjs.CmAaFQUS1729762363846.js";import{k as r,_ as s,Y as a,V as i,at as c,$ as l,O as u,n as v,aW as f,W as p,cr as m}from"./three.CQvcOG671729762363846.js";import{P as d}from"./tweakpane.BCjFYDHx1729762363846.js";import{d as g,a5 as x,e as h,o as y,f as b,g as I,L as _,j as S,u as U,aj as w,ak as P,al as D,m as E}from"./@vue.n8X62v121729762363846.js";import{_ as L}from"./@fesjs.CZZ05Yp51729762363846.js";import"./@vueuse.DvZn62wO1729762363846.js";import"./vue-router.Du5s6fg51729762363846.js";import"./lodash-es.BBTWvufR1729762363846.js";import"./@qlin.BIlp8Yi21729762363846.js";import"./pinia.DOkF60i-1729762363846.js";import"./@babel.Bwyie5id1729762363846.js";import"./@amap.irWeW_Ar1729762363846.js";import"./@floating-ui.B75jtkXD1729762363846.js";import"./@juggle.BnTvdTVm1729762363846.js";function A(t,n){const e=z();return(A=function(t,n){return e[t-=107]})(t,n)}!function(t,n){const e=A,o=z();for(;;)try{if(305993===-parseInt(e(167))/1*(parseInt(e(124))/2)+-parseInt(e(107))/3+parseInt(e(142))/4+parseInt(e(146))/5+parseInt(e(140))/6*(parseInt(e(137))/7)+parseInt(e(143))/8+parseInt(e(121))/9*(parseInt(e(154))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const M=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[A(114)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){M(this,(function(){const t=A,n=new RegExp(t(126)),e=new RegExp(t(115),"i"),o=T(t(134));n.test(o+t(120))&&e[t(110)](o+t(166))?T():o("0")}))()}();const F=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();F(void 0,(function(){const t=A,n=function(){const t=A;let n;try{n=Function(t(125)+t(158)+");")()}catch(e){n=window}return n}(),e=n[t(144)]=n[t(144)]||{},o=[t(111),t(165),"info","error",t(108),t(162),t(139)];for(let r=0;r<o[t(123)];r++){const n=F.constructor.prototype[t(148)](F),s=o[r],a=e[s]||n;n[t(145)]=F[t(148)](F),n[t(116)]=a[t(116)][t(148)](a),e[s]=n}}))();function C(t,n,e){const o=A;if(typeof t!==o(157)||null===t)return t;const r=Array.isArray(t)?[]:{};for(const s in t)t[o(133)](s)&&(r[s]=C(t[s])),s==n&&(r[n]=e);return r}function z(){const t=["index","931QfaDTJ","Vector2","trace","546lMuDGg","Matrix2","1615588phdLto","1874976VWcigb","console","__proto__","560590uZIbtm","Matrix3","bind","open","Matrix4",'Shader "',"onerror","name","165190dXUApl",'" load was aborted.',"debu","object",'{}.constructor("return this")( )',"call","WagnerLoadShaderException","onabort","table","responseText","random","warn","input","43553TjHfvd","string","now","Vector4","1684845PKGCfT","exception","lastIndex","test","log","\" couldn't be loaded.","value","apply","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","toString","Texture","Vector3","v3v","chain","81mVmVWa","exec","length","2VzODRo","return (function() ","function *\\( *\\)","while (true) {}","stateObject","type","send","ShaderMaterial","message","hasOwnProperty","init","gger"];return(z=function(){return t})()}function T(t){function n(t){const e=A;if(typeof t===e(168))return function(t){}.constructor(e(127))[e(114)]("counter");1!==(""+t/t)[e(123)]||t%20==0?function(){return!0}.constructor(e(156)+e(135))[e(159)]("action"):function(){return!1}.constructor(e(156)+e(135))[e(114)](e(128)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const N=R;!function(t,n){const e=R,o=B();for(;;)try{if(584508===parseInt(e(193))/1+parseInt(e(219))/2*(parseInt(e(208))/3)+parseInt(e(166))/4*(-parseInt(e(200))/5)+parseInt(e(258))/6+parseInt(e(229))/7+parseInt(e(232))/8+-parseInt(e(252))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function R(t,n){const e=B();return(R=function(t,n){return e[t-=163]})(t,n)}function B(){const t=["Pass","back","magFilter","350643ouPLAn","resolution","setRenderTarget","test","value","onWindowResize","renderer","2545dkBuEr","uuid","exception","material","read","innerWidth","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","init","51BXRRPL","set","swapBuffers","PlaneGeometry","constructor","Stack","quad","type","time","call","debu","11928wkDGVt","uniforms","minFilter","CopyPass","RGBFormat","render","params","ShaderMaterial","ClampToEdgeWrapping","action","7394541QJgOvo","return (function() ","console","4373664siMkbv",'{}.constructor("return this")( )',"toString","LinearFilter","splice","Reset","write","makeOrthographic","setSize","Scene","now","addPass","width","innerHeight","startTime","toScreen","add","loadShadervf","scene","Mesh","14680935koCsVF","getOfflineTexture","length","useRGBA","removePass","shader","3232848FOnsxt","log","WebGLRenderTarget","chain","push","front","scale","bind","wrapS","height","trace","stencilBuffer","__proto__","2972kLyzLh","projectionMatrix","makePerspective","passes","RGBAFormat","copyPass","settings","while (true) {}","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","camera","far","passItems","wrapT","prototype","texture","counter","apply","gger","near","input","tInput","string","UnsignedByteType","error"];return(B=function(){return t})()}!function(){G(this,(function(){const t=R,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(174),"i"),o=k(t(207));n[t(196)](o+t(261))&&e[t(196)](o+t(185))?k():o("0")}))()}();const V=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();V(void 0,(function(){const t=R,n=function(){const t=R;let n;try{n=Function(t(230)+t(233)+");")()}catch(e){n=window}return n}(),e=n[t(231)]=n[t(231)]||{},o=[t(259),"warn","info",t(189),t(202),"table",t(163)];for(let r=0;r<o[t(254)];r++){const n=V.constructor[t(179)][t(265)](V),s=o[r],a=e[s]||n;n[t(165)]=V[t(265)](V),n.toString=a[t(234)][t(265)](a),e[s]=n}}))();class j{constructor(t,n){const e=R;this[e(244)]=1,this[e(267)]=1,this[e(172)]=n||{},this[e(255)]=this[e(172)].useRGBA||!1,this[e(199)]=t,this.copyPass=this[e(222)](this.settings),this.scene=new(s[e(241)]),this[e(214)]=new(s[e(251)])(new(s[e(211)])(1,1),new l),this[e(250)][e(248)](this[e(214)]),this[e(175)]=new u(1,1,1,1,-1e4,1e4),this.front=new(s[e(260)])(1,1,{minFilter:void 0!==this[e(172)][e(221)]?this[e(172)].minFilter:v,magFilter:void 0!==this[e(172)][e(192)]?this[e(172)][e(192)]:s[e(235)],wrapS:void 0!==this[e(172)][e(266)]?this.settings.wrapS:s[e(227)],wrapT:void 0!==this[e(172)][e(178)]?this[e(172)][e(178)]:f,format:this.useRGBA?s[e(170)]:s[e(223)],type:void 0!==this[e(172)][e(215)]?this[e(172)].type:s[e(188)],stencilBuffer:void 0===this[e(172)][e(164)]||this[e(172)][e(164)]}),this.back=this[e(263)].clone(),this[e(246)]=Date[e(242)](),this[e(169)]={},this[e(213)]={passItems:[],passes:[]}}[N(243)](t,n,e,o){const r=N;this.loadShadervf(n);const s={shaderName:t,params:e,uuid:o,shader:this[r(257)]};this[r(213)][r(177)][r(262)](s)}[N(256)](t){const n=N;for(let e=this[n(213)][n(177)].length-1;e>=0;e--)this[n(213)][n(177)][e][n(201)]===parseInt(t)&&this[n(213)][n(177)][n(236)](e,1);console.log(this.Stack[n(177)])}[N(222)](){const t=N;this.Pass[t(217)](this);return this[t(249)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[N(249)](t){const n=N,e=n(206);return this.shader=function(t,n){const e=A,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,l=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,u={sampler2D:{type:"t",value:()=>new a},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(s[A(138)])},vec3:{type:"v3",value:()=>new i},vec4:{type:"v4",value:()=>new c},bvec2:{type:"v2",value:()=>new(s[A(138)])},bvec3:{type:"v3",value:()=>new i},bvec4:{type:"v4",value:()=>new(s[A(170)])},ivec2:{type:"v2",value:()=>new(s[A(138)])},ivec3:{type:"v3",value:()=>new(s[A(118)])},ivec4:{type:"v4",value:()=>new(s[A(170)])},mat2:{type:"v2",value:()=>new(s[A(141)])},mat3:{type:"v3",value:()=>new(s[A(147)])},mat4:{type:"v4",value:()=>new(s[A(150)])}},v={float:{type:"fv",value:()=>[]},vec3:{type:e(119),value:()=>[]}};let f;const p={resolution:{type:"v2",value:new r(1,1),default:!0},time:{type:"f",value:Date[e(169)](),default:!0},tInput:{type:"t",value:new(s[e(117)]),default:!0}};let m,d;for(;null!==(f=o[e(122)](n));)f[e(136)]===o[e(109)]&&o[e(109)]++,m=f[1],d=f[2],p[d]={type:u[m][e(129)],value:u[m][e(113)]()};for(;null!==(f=l[e(122)](n));)f[e(136)]===o[e(109)]&&o[e(109)]++,m=f[1],d=f[2],f[3],p[d]={type:v[m][e(129)],value:v[m][e(113)]()};return new(s[e(131)])({uniforms:p,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(257)]}[N(190)](t){const n=N;this[n(257)]=null,this[n(225)]={}}[N(237)](){const t=N;this[t(204)]=this[t(263)],this.write=this[t(191)]}[N(198)](t,n){const e=N,o=window[e(205)],r=window[e(245)];t[e(240)](1*o,1*r),n[e(167)][e(168)](70,o/r,n.near,n[e(176)]),this.setSize(o,r);return this.getOfflineTexture(o,r,!0)}[N(240)](t,n){const e=N;this[e(244)]=t,this[e(267)]=n,this.camera.projectionMatrix[e(239)](t/-2,t/2,n/2,n/-2,this[e(175)][e(184)],this[e(175)][e(176)]),this[e(214)][e(264)][e(209)](t,n,1),this[e(263)].setSize(t,n),this.back[e(240)](t,n)}[N(253)](t,n,e){const o=N;return new p(t,n,{minFilter:s[o(235)],magFilter:s[o(235)],format:e?s[o(170)]:s[o(223)]})}[N(224)](t,n,e,o){const r=N;this[r(199)][r(195)](this.write),this[r(199)].render(t,n),o||this[r(210)]()}[N(210)](){const t=N,n=this[t(238)];this[t(238)]=this.read,this.read=n}pass(){const t=N;for(let n=0;n<this[t(213)][t(177)][t(254)];n++){const e=this[t(213)].passItems[n][t(257)],o=this[t(213)].passItems[n][t(225)];if(this[t(199)][t(195)](this.write),e instanceof s[t(226)]){this[t(214)][t(203)]=e,this[t(214)][t(203)][t(220)][t(186)][t(197)]=this.read.texture,this[t(214)][t(203)][t(220)][t(194)][t(197)][t(209)](this[t(244)],this[t(267)]),this[t(214)][t(203)][t(220)][t(216)][t(197)]=.001*(Date[t(242)]()-this[t(246)]);for(const n in o)this.quad[t(203)][t(220)][n][t(197)]=o[n];this[t(199)][t(224)](this.scene,this[t(175)]),this.swapBuffers()}}}[N(247)](t,n){const e=N;this[e(199)][e(195)](null),this[e(214)][e(203)]=this[e(171)],this[e(214)][e(203)].uniforms[e(186)][e(197)]=this.read[e(180)],this[e(214)].material[e(220)].resolution.value.set(this[e(244)],this.height),this[e(199)][e(224)](this.scene,this[e(175)])}}function k(t){function n(t){const e=R;if(typeof t===e(187))return function(t){}[e(212)](e(173))[e(182)](e(181));1!==(""+t/t).length||t%20==0?function(){return!0}[e(212)](e(218)+e(183))[e(217)](e(228)):function(){return!1}[e(212)](e(218)+e(183))[e(182)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const O="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}";!function(t,n){const e=q,o=W();for(;;)try{if(972596===parseInt(e(204))/1+parseInt(e(147))/2*(-parseInt(e(179))/3)+parseInt(e(134))/4*(parseInt(e(130))/5)+-parseInt(e(135))/6*(parseInt(e(122))/7)+parseInt(e(150))/8+-parseInt(e(142))/9+parseInt(e(203))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function W(){const t=["bind","SNOISEPass","gger","1538948WwudZm","MeshPhongMaterial","addFolder","375200LbqOin","value","translate","Mesh","InvertPass","target","while (true) {}","split","action","castShadow","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","removePass","pass","BOXBLURPass","onWindowResize","debu","random","CGAPass","移除~","addPass","BufferGeometry","关闭通道","click","return (function() ","RGBPass","后处理类型","__proto__","plugins/postProcessing/image/1324.jpg","input","6WGoBFf","log","mergeGeometries","add","label","CIRCULARPass","constructor","FXAAPass","keys","prototype","map","receiveShadow","init","DOTPass","toString","dispose","info","warn","autoClearColor","material","title","DENOISEPass","FREICHENPass","values","6707650bekWCQ","1460565NehjMS","render","apply","133tcVKrf","VIGNETTE2Pass","error","text","stateObject","counter","change","BoxGeometry","4623950oSseIf","SOBELPass",'{}.constructor("return this")( )',"addButton","4qSNBRB","132918Fogtjh","call","toScreen","trace","table","新增通道","TOONPass","1535121qVLEHg","test"];return(W=function(){return t})()}!function(){H(this,(function(){const t=q,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(160),"i"),o=Z(t(191));n[t(143)](o+"chain")&&e[t(143)](o+t(178))?Z():o("0")}))()}();const X=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function q(t,n){const e=W();return(q=function(t,n){return e[t-=122]})(t,n)}X(void 0,(function(){const t=q,n=function(){const t=q;let n;try{n=Function(t(173)+t(132)+");")()}catch(e){n=window}return n}(),e=n.console=n.console||{},o=[t(180),t(196),t(195),t(124),"exception",t(139),t(138)];for(let r=0;r<o.length;r++){const n=X[t(185)][t(188)][t(144)](X),s=o[r],a=e[s]||n;n[t(176)]=X.bind(X),n[t(193)]=a[t(193)][t(144)](a),e[s]=n}}))();function Z(t){function n(t){const e=q;if("string"==typeof t)return function(t){}[e(185)](e(156))[e(206)](e(127));1!==(""+t/t).length||t%20==0?function(){return!0}[e(185)](e(165)+e(146))[e(136)](e(158)):function(){return!1}.constructor(e(165)+"gger")[e(206)](e(126)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const $=L(g({__name:"postProcessing",async setup(o){const a=q;let i,c;const{camera:l,renderer:u,scene:v,sizes:f}=t();for(var p=new(s[a(170)]),g=[],h=0;h<100;h++){var y=new(s[a(129)])(100,100,100);y[a(152)](1500*Math[a(166)](),1500*Math.random(),1500*Math.random()),g.push(y)}p=m[a(181)](g);const b=([i,c]=x((()=>n({map:a(177)}))),i=await i,c(),i),I=([i,c]=x((()=>n({map:"plugins/postProcessing/image/1324-normal.jpg"}))),i=await i,c(),i);var _=new(s[a(148)])({map:b.map,normalMap:I[a(189)],normalScale:new r(.8,-.8),shininess:100}),S=new(s[a(153)])(p,_);S[a(159)]=!0,S[a(190)]=!0,v[a(151)][a(182)](S);const U=new j(u[a(151)],{useRGBA:!0}),w=new d;let P=null,D=[{text:a(154),value:{InvertPass:O}},{text:a(186),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:"SEPIAPass",value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:a(145),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:a(163),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:a(200),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:a(167),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:I[a(189)]}}},{text:a(131),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:a(174),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:a(192),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:a(184),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:"POISSONPass",value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:"VIGNETTE1Pass",value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:a(123),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:a(201),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:a(141),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],E=a(154),L=O,A=null;w.addBlade({view:"list",label:a(175),options:D,value:""}).on(a(128),(t=>{P=t[a(151)]}));const M=w[a(133)]({title:"新增",label:a(140)});let F=0;M.on(a(172),(t=>{const n=a;E=Object[n(187)](P)[0],L=Object.values(P)[0],A=Object[n(202)](P)[1];let e=F++,o=w[n(149)]({title:E});for(const s in A){let t=A[s];o.addBlade({view:n(125),label:s,parse:t=>String(t),value:t})}o[n(133)]({title:n(168)+e,label:n(171)}).on("click",(t=>{const e=n;let o=t[e(155)][e(199)][e(157)]("~")[1];U[e(161)](o)})).on(n(172),(()=>{o[n(194)]()}));let r=C(A,t[n(155)][n(183)],t[n(151)]);U[n(169)](E,L,r,e)})),U[a(164)](u[a(151)],l.value);const{onLoop:z}=e();return z((({delta:t})=>{const n=a;S&&(u.value[n(197)]=!0,U.Reset(),S[n(198)]=_,U[n(205)](v[n(151)],l.value),U[n(162)](),U[n(137)](v[n(151)],l[n(151)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),K=Q;function Q(t,n){const e=J();return(Q=function(t,n){return e[t-=266]})(t,n)}!function(t,n){const e=Q,o=J();for(;;)try{if(591018===-parseInt(e(293))/1+-parseInt(e(291))/2*(-parseInt(e(299))/3)+-parseInt(e(297))/4+parseInt(e(294))/5+parseInt(e(290))/6*(-parseInt(e(269))/7)+-parseInt(e(267))/8+-parseInt(e(295))/9*(-parseInt(e(287))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Y=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Q(277)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function J(){const t=["__proto__","call","init","return (function() ","6556848noxGmL","gger","3269sbckuL","#000000","warn","TresCanvas","TresPerspectiveCamera","perspectiveCameraRef","TresDirectionalLight","constructor","apply","stateObject","action","error","TresAmbientLight","toString","prototype","#ffffff","while (true) {}","debu","540XyqLrE","test",'{}.constructor("return this")( )',"4164GsFOxk","35718EmMcRE","info","855233VFXhAC","3458055vksciG","181377KfsAsr","counter","974396vhlePY","table","177wVxcAr","bind","postProcessingEditor","console","function *\\( *\\)","input","string"];return(J=function(){return t})()}!function(){Y(this,(function(){const t=Q,n=new RegExp(t(303)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=st(t(308));n[t(288)](o+"chain")&&e[t(288)](o+t(304))?st():o("0")}))()}();const tt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Q(277)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();tt(void 0,(function(){const t=Q,n=function(){const t=Q;let n;try{n=Function(t(266)+t(289)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(302)]||{},o=["log",t(271),t(292),t(280),"exception",t(298),"trace"];for(let r=0;r<o.length;r++){const n=tt[t(276)][t(283)][t(300)](tt),s=o[r],a=e[s]||n;n[t(306)]=tt[t(300)](tt),n[t(282)]=a[t(282)][t(300)](a),e[s]=n}}))();const nt={ref:K(274),position:[600,850,-1500],fov:45,near:.1,far:1e5},et=_(K(281),{color:K(284),intensity:2},null,-1),ot=_(K(275),{position:[100,100,0],intensity:2,color:K(284)},null,-1),rt=g({__name:K(301),setup(t){const n=K,r={clearColor:n(270),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:"manual"},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=e();return a((({delta:t})=>{})),(t,e)=>{const a=n,i=h(a(272));return y(),b(i,E(r,{"window-size":""}),{default:I((()=>[_(a(273),nt,null,512),S(U(o),w(P(s)),null,16),et,ot,(y(),b(D,null,{default:I((()=>[S($)])),_:1}))])),_:1},16)}}});function st(t){function n(t){const e=Q;if(typeof t===e(305))return function(t){}[e(276)](e(285))[e(277)](e(296));1!==(""+t/t).length||t%20==0?function(){return!0}[e(276)](e(286)+e(268))[e(307)](e(279)):function(){return!1}[e(276)](e(286)+e(268))[e(277)](e(278)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{rt as default};
