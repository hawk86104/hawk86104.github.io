import{m as t,e as n,b as e,U as o}from"./@tresjs.fCqPNEAw1735275234726.js";import{_ as r,Y as s,k as a,M as i,s as c,n as l,aW as u,cy as v}from"./three.jpi2UCEx1735275234726.js";import{P as f}from"./tweakpane.yHWGBmom1735275234726.js";import{d as p,a6 as d,e as m,o as g,f as x,g as h,J as y,j as I,u as b,aj as _,ak as S,al as U,m as w}from"./@vue.u2cBPEWn1735275234726.js";import{_ as D}from"./@fesjs.Okr_vpx41735275234726.js";import"./@vueuse.8jEBPPFT1735275234726.js";import"./vue-router.bq4JfoTS1735275234726.js";import"./lodash-es.guXTxyfJ1735275234726.js";import"./@qlin.yHhFDldE1735275234726.js";import"./pinia.BXllYoho1735275234726.js";import"./vue-demi.C4xddsk91735275234726.js";import"./@floating-ui.BPbuo5Gx1735275234726.js";import"./@juggle.7yjBMqoW1735275234726.js";function E(){const t=["Matrix2","Vector2","while (true) {}","179403SZugJx","WagnerLoadShaderException","now","bind","constructor","Texture","lastIndex","1407xYPhGA","prototype","199898sAFEGs","random","object","137868QEqVvs","action","index","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)",'" load was aborted.',"7dLpstw","replace","869IdOyHK","input","debu","toString","hasOwnProperty",'{}.constructor("return this")( )',"type","test","ShaderMaterial","38748ZFKorz","trace","onerror","length","gger","message","v3v","onabort","error","exec","send","counter","responseText","28908yVoUZT","name",'Shader "',"645yVbrrQ","4655504SOgwYW","value","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","isArray","__proto__","2870TNQEOz","init","string","chain","exception","console","table","Vector3","warn","get","Vector4","function *\\( *\\)","Matrix3","14751CGQuGC","apply"];return(E=function(){return t})()}!function(t,n){const e=M,o=E();for(;;)try{if(745109===parseInt(e(509))/1*(-parseInt(e(501))/2)+parseInt(e(492))/3+-parseInt(e(533))/4*(parseInt(e(536))/5)+parseInt(e(520))/6*(parseInt(e(499))/7)+parseInt(e(537))/8+parseInt(e(487))/9*(-parseInt(e(542))/10)+parseInt(e(511))/11*(parseInt(e(504))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const P=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[M(488)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){P(this,(function(){const t=M,n=new RegExp(t(553)),e=new RegExp(t(507),"i"),o=z(t(543));n[t(518)](o+t(545))&&e[t(518)](o+t(512))?z():o("0")}))()}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[M(488)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function M(t,n){const e=E();return(M=function(t,n){return e[t-=486]})(t,n)}A(void 0,(function(){const t=M;let n;try{n=Function("return (function() "+t(516)+");")()}catch(r){n=window}const e=n[t(547)]=n[t(547)]||{},o=["log",t(550),"info",t(528),t(546),t(548),t(521)];for(let s=0;s<o[t(523)];s++){const n=A.constructor[t(500)][t(495)](A),r=o[s],a=e[r]||n;n[t(541)]=A[t(495)](A),n[t(514)]=a.toString[t(495)](a),e[r]=n}}))();function L(t,n,e){const o=M;if(typeof t!==o(503)||null===t)return t;const r=Array[o(540)](t)?[]:{};for(const s in t)t[o(515)](s)&&(r[s]=L(t[s])),s==n&&(r[n]=e);return r}function z(t){function n(t){const e=M;if(typeof t===e(544))return function(t){}[e(496)](e(491)).apply(e(531));1!==(""+t/t)[e(523)]||t%20==0?function(){return!0}[e(496)]("debugger").call(e(505)):function(){return!1}[e(496)](e(513)+e(524))[e(488)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const C=T;!function(t,n){const e=T,o=B();for(;;)try{if(420343===parseInt(e(447))/1+parseInt(e(396))/2*(-parseInt(e(426))/3)+parseInt(e(379))/4+parseInt(e(481))/5*(-parseInt(e(453))/6)+parseInt(e(390))/7+parseInt(e(410))/8*(parseInt(e(389))/9)+-parseInt(e(424))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const F=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function T(t,n){const e=B();return(T=function(t,n){return e[t-=379]})(t,n)}!function(){F(this,(function(){const t=T,n=new RegExp(t(476)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=R(t(480));n[t(456)](o+t(462))&&e[t(456)](o+"input")?R():o("0")}))()}();const N=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[T(397)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();N(void 0,(function(){const t=T,n=function(){const t=T;let n;try{n=Function("return (function() "+t(430)+");")()}catch(e){n=window}return n}(),e=n[t(477)]=n.console||{},o=[t(425),t(438),t(445),t(437),t(434),t(459),t(433)];for(let r=0;r<o[t(432)];r++){const n=N[t(466)][t(451)][t(417)](N),s=o[r],a=e[s]||n;n.__proto__=N[t(417)](N),n.toString=a[t(392)][t(417)](a),e[s]=n}}))();class G{constructor(t,n){const e=T;this[e(460)]=1,this.height=1,this[e(409)]=n||{},this[e(479)]=this[e(409)].useRGBA||!1,this.renderer=t,this.copyPass=this[e(475)](this[e(409)]),this[e(442)]=new(r[e(443)]),this.quad=new c(new(r[e(393)])(1,1),new(r[e(386)])),this[e(442)][e(391)](this.quad),this[e(403)]=new(r[e(463)])(1,1,1,1,-1e4,1e4),this[e(429)]=new(r[e(452)])(1,1,{minFilter:void 0!==this[e(409)].minFilter?this.settings[e(431)]:r[e(427)],magFilter:void 0!==this[e(409)][e(423)]?this[e(409)].magFilter:l,wrapS:void 0!==this.settings[e(408)]?this[e(409)][e(408)]:r[e(446)],wrapT:void 0!==this[e(409)][e(440)]?this[e(409)].wrapT:r[e(446)],format:this[e(479)]?u:r[e(420)],type:void 0!==this[e(409)][e(388)]?this.settings[e(388)]:r[e(404)],stencilBuffer:void 0===this[e(409)][e(422)]||this.settings.stencilBuffer}),this[e(407)]=this.front[e(435)](),this.startTime=Date.now(),this.passes={},this.Stack={passItems:[],passes:[]}}[C(405)](t,n,e,o){const r=C;this[r(449)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(415)]};this[r(418)][r(473)].push(s)}[C(469)](t){const n=C;for(let e=this[n(418)].passItems[n(432)]-1;e>=0;e--)this.Stack[n(473)][e].uuid===parseInt(t)&&this[n(418)][n(473)][n(394)](e,1);console.log(this[n(418)][n(473)])}[C(475)](){const t=C;this[t(385)][t(382)](this);return this[t(449)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}loadShadervf(t){const n=C,e=n(439);return this.shader=function(t,n){const e=M,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,c=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,l={sampler2D:{type:"t",value:()=>new(r[M(497)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[M(490)])},vec3:{type:"v3",value:()=>new(r[M(549)])},vec4:{type:"v4",value:()=>new(r[M(552)])},bvec2:{type:"v2",value:()=>new a},bvec3:{type:"v3",value:()=>new(r[M(549)])},bvec4:{type:"v4",value:()=>new(r[M(552)])},ivec2:{type:"v2",value:()=>new(r[M(490)])},ivec3:{type:"v3",value:()=>new(r[M(549)])},ivec4:{type:"v4",value:()=>new(r[M(552)])},mat2:{type:"v2",value:()=>new(r[M(489)])},mat3:{type:"v3",value:()=>new(r[M(486)])},mat4:{type:"v4",value:()=>new i}},u={float:{type:"fv",value:()=>[]},vec3:{type:e(526),value:()=>[]}};let v;const f={resolution:{type:"v2",value:new(r[e(490)])(1,1),default:!0},time:{type:"f",value:Date[e(494)](),default:!0},tInput:{type:"t",value:new s,default:!0}};let p,d;for(;null!==(v=o[e(529)](n));)v.index===o.lastIndex&&o.lastIndex++,p=v[1],d=v[2],f[d]={type:l[p][e(517)],value:l[p][e(538)]()};for(;null!==(v=c.exec(n));)v[e(506)]===o[e(498)]&&o[e(498)]++,p=v[1],d=v[2],v[3],f[d]={type:u[p][e(517)],value:u[p][e(538)]()};return new(r[e(519)])({uniforms:f,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(415)]}Pass(t){const n=C;this[n(415)]=null,this[n(428)]={}}[C(381)](){const t=C;this[t(400)]=this[t(429)],this[t(454)]=this.back}[C(402)](t,n){const e=C,o=window[e(413)],r=window.innerHeight;t[e(450)](1*o,1*r),n[e(455)][e(468)](70,o/r,n[e(414)],n[e(421)]),this.setSize(o,r);return this[e(419)](o,r,!0)}setSize(t,n){const e=C;this[e(460)]=t,this[e(478)]=n,this[e(403)][e(455)].makeOrthographic(t/-2,t/2,n/2,n/-2,this[e(403)][e(414)],this[e(403)][e(421)]),this[e(444)][e(401)][e(416)](t,n,1),this.front[e(450)](t,n),this[e(407)].setSize(t,n)}[C(419)](t,n,e){const o=C;return new(r[o(452)])(t,n,{minFilter:r[o(427)],magFilter:r[o(427)],format:e?u:r[o(420)]})}[C(464)](t,n,e,o){const r=C;this[r(436)][r(448)](this.write),this[r(436)][r(464)](t,n),o||this.swapBuffers()}[C(384)](){const t=C,n=this[t(454)];this[t(454)]=this[t(400)],this[t(400)]=n}[C(399)](){const t=C;for(let n=0;n<this[t(418)][t(473)][t(432)];n++){const e=this[t(418)].passItems[n][t(415)],o=this[t(418)][t(473)][n][t(428)];if(this[t(436)][t(448)](this.write),e instanceof r[t(461)]){this[t(444)][t(471)]=e,this[t(444)][t(471)][t(387)][t(474)][t(398)]=this[t(400)][t(383)],this[t(444)][t(471)][t(387)][t(380)][t(398)].set(this.width,this[t(478)]),this[t(444)][t(471)].uniforms[t(411)][t(398)]=.001*(Date[t(458)]()-this.startTime);for(const n in o)this[t(444)].material[t(387)][n][t(398)]=o[n];this[t(436)][t(464)](this[t(442)],this[t(403)]),this[t(384)]()}}}[C(467)](t,n){const e=C;this.renderer[e(448)](null),this[e(444)][e(471)]=this[e(395)],this.quad.material[e(387)][e(474)][e(398)]=this[e(400)].texture,this[e(444)].material[e(387)][e(380)][e(398)][e(416)](this.width,this.height),this[e(436)][e(464)](this[e(442)],this[e(403)])}}function B(){const t=["params","front",'{}.constructor("return this")( )',"minFilter","length","trace","exception","clone","renderer","error","warn","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","wrapT","gger","scene","Scene","quad","info","ClampToEdgeWrapping","462922DSLcVn","setRenderTarget","loadShadervf","setSize","prototype","WebGLRenderTarget","18snhlRb","write","projectionMatrix","test","while (true) {}","now","table","width","ShaderMaterial","chain","OrthographicCamera","render","action","constructor","toScreen","makePerspective","removePass","debu","material","string","passItems","tInput","CopyPass","function *\\( *\\)","console","height","useRGBA","init","1158555fbvUEs","2347032wAnKZt","resolution","Reset","call","texture","swapBuffers","Pass","MeshBasicMaterial","uniforms","type","376227SWCrCS","5213516XKAQxX","add","toString","PlaneGeometry","splice","copyPass","50bkmWnd","apply","value","pass","read","scale","onWindowResize","camera","UnsignedByteType","addPass","counter","back","wrapS","settings","8pgoYoD","time","stateObject","innerWidth","near","shader","set","bind","Stack","getOfflineTexture","RGBFormat","far","stencilBuffer","magFilter","2413700sGSrhN","log","57531TepfAt","LinearFilter"];return(B=function(){return t})()}function R(t){function n(t){const e=T;if(typeof t===e(472))return function(t){}[e(466)](e(457))[e(397)](e(406));1!==(""+t/t)[e(432)]||t%20==0?function(){return!0}[e(466)](e(470)+e(441))[e(382)](e(465)):function(){return!1}.constructor(e(470)+e(441))[e(397)](e(412)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const V="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}";function j(){const t=["plugins/postProcessing/image/1324-normal.jpg","255660GoxmzU","dispose","push","material","MeshPhongMaterial","bind","action","postProcessing","click","新增通道","138NGcuQi","input","addBlade","init","keys","console","BufferGeometry","DOTPass","test","Vector2","string","plugins/postProcessing/image/1324.jpg","warn","return (function() ","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","toString","BoxGeometry","values","chain","while (true) {}","6145400FrgifK","SOBELPass","target","2757NFZyvc","add","translate","split","gger","SEPIAPass","CIRCULARPass","7683QpUzzE","VIGNETTE1Pass","addPass","label","1080758FdiBcI","trace","info","5EqDNXn","BOXBLURPass","InvertPass","error","receiveShadow","map","DENOISEPass","SNOISEPass","table","RGBPass","1767492VtWowT","random","castShadow","11lzEErv","1844recpJt","onWindowResize","value","toScreen","render","TOONPass","length","debu","function *\\( *\\)","1566888WTdqdf","constructor","title","Mesh","apply","FXAAPass","text","关闭通道","prototype","removePass","addFolder","log"];return(j=function(){return t})()}function O(t,n){const e=j();return(O=function(t,n){return e[t-=144]})(t,n)}const H=O;!function(t,n){const e=O,o=j();for(;;)try{if(536777===parseInt(e(197))/1*(parseInt(e(167))/2)+-parseInt(e(190))/3*(-parseInt(e(218))/4)+-parseInt(e(204))/5*(-parseInt(e(157))/6)+parseInt(e(201))/7+-parseInt(e(144))/8+parseInt(e(214))/9+parseInt(e(187))/10*(-parseInt(e(217))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const k=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[O(148)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){k(this,(function(){const t=O,n=new RegExp(t(226)),e=new RegExp(t(181),"i"),o=X(t(170));n[t(175)](o+t(185))&&e[t(175)](o+t(168))?X():o("0")}))()}();const W=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[O(148)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();W(void 0,(function(){const t=O;let n;try{n=Function(t(180)+'{}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(172)]=n.console||{},o=[t(155),t(179),t(203),t(207),"exception",t(212),t(202)];for(let s=0;s<o.length;s++){const n=W.constructor[t(152)][t(162)](W),r=o[s],a=e[r]||n;n.__proto__=W[t(162)](W),n[t(182)]=a[t(182)][t(162)](a),e[r]=n}}))();function X(t){function n(t){const e=O;if(typeof t===e(177))return function(t){}[e(145)](e(186))[e(148)]("counter");1!==(""+t/t)[e(224)]||t%20==0?function(){return!0}.constructor(e(225)+e(194)).call(e(163)):function(){return!1}[e(145)](e(225)+e(194))[e(148)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const q=D(p({__name:H(164),async setup(o){const s=H;let a,i;const{camera:c,renderer:l,scene:u,sizes:p}=t();for(var m=new(r[s(173)]),g=[],x=0;x<100;x++){var h=new(r[s(183)])(100,100,100);h[s(192)](1500*Math[s(215)](),1500*Math[s(215)](),1500*Math[s(215)]()),g[s(159)](h)}m=v(g);const y=([a,i]=d((()=>e({map:s(178)}))),a=await a,i(),a),I=([a,i]=d((()=>e({map:s(156)}))),a=await a,i(),a);var b=new(r[s(161)])({map:y[s(209)],normalMap:I[s(209)],normalScale:new(r[s(176)])(.8,-.8),shininess:100}),_=new(r[s(147)])(m,b);_[s(216)]=!0,_[s(208)]=!0,u[s(220)][s(191)](_);const S=new G(l[s(220)],{useRGBA:!0}),U=new f;let w=null,D=[{text:s(206),value:{InvertPass:V}},{text:s(149),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:s(195),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:s(211),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:s(205),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:s(210),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:"CGAPass",value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:I[s(209)]}}},{text:s(188),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:s(213),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:s(174),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(196),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:"POISSONPass",value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:s(198),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:"VIGNETTE2Pass",value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:"FREICHENPass",value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:s(223),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],E=s(206),P=V,A=null;U[s(169)]({view:"list",label:"后处理类型",options:D,value:""}).on("change",(t=>{w=t[s(220)]}));const M=U.addButton({title:"新增",label:s(166)});let z=0;M.on(s(165),(t=>{const n=s;E=Object[n(171)](w)[0],P=Object.values(w)[0],A=Object[n(184)](w)[1];let e=z++,o=U[n(154)]({title:E});for(const s in A){let t=A[s];o[n(169)]({view:n(150),label:s,parse:t=>String(t),value:t})}o.addButton({title:"移除~"+e,label:n(151)}).on(n(165),(t=>{const e=n;let o=t[e(189)][e(146)][e(193)]("~")[1];S[e(153)](o)})).on("click",(()=>{o[n(158)]()}));let r=L(A,t.target[n(200)],t.value);S[n(199)](E,P,r,e)})),S[s(219)](l.value,c.value);const{onLoop:C}=n();return C((({delta:t})=>{const n=s;_&&(l[n(220)].autoClearColor=!0,S.Reset(),_[n(160)]=b,S[n(222)](u.value,c[n(220)]),S.pass(),S[n(221)](u.value,c[n(220)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]);function Z(){const t=["init","#000000","1252506yQDnuq","gger","#ffffff","chain","trace","__proto__","stateObject","counter","test","TresAmbientLight",'{}.constructor("return this")( )',"6542HvKABa","TresPerspectiveCamera","634788sgcpfl","debu","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","log","21290ZGakQQ","action","info","apply","146130rKEtNb","452394MsDVIL","exception","constructor","TresDirectionalLight","prototype","return (function() ","8hbCAZI","1983984TvgvHS","length","input","192YPyyUD","console","10KxJpqa","manual","toString","string","call","bind","warn","function *\\( *\\)","error"];return(Z=function(){return t})()}!function(t,n){const e=$,o=Z();for(;;)try{if(127245===-parseInt(e(397))/1+parseInt(e(391))/2*(-parseInt(e(367))/3)+parseInt(e(363))/4*(-parseInt(e(356))/5)+parseInt(e(380))/6+-parseInt(e(393))/7+parseInt(e(364))/8+-parseInt(e(357))/9*(-parseInt(e(369))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[$(355)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){Q(this,(function(){const t=$,n=new RegExp(t(376)),e=new RegExp(t(395),"i"),o=tt(t(378));n[t(388)](o+t(383))&&e[t(388)](o+t(366))?tt():o("0")}))()}();const K=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[$(355)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function $(t,n){const e=Z();return($=function(t,n){return e[t-=355]})(t,n)}K(void 0,(function(){const t=$,n=function(){const t=$;let n;try{n=Function(t(362)+t(390)+");")()}catch(e){n=window}return n}(),e=n[t(368)]=n[t(368)]||{},o=[t(396),t(375),t(399),t(377),t(358),"table",t(384)];for(let r=0;r<o[t(365)];r++){const n=K[t(359)][t(361)].bind(K),s=o[r],a=e[s]||n;n[t(385)]=K[t(374)](K),n.toString=a[t(371)][t(374)](a),e[s]=n}}))();const Y={ref:"perspectiveCameraRef",position:[600,850,-1500],fov:45,near:.1,far:1e5},J=p({__name:"postProcessingEditor",setup(t){const e=$,r={clearColor:e(379),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(370)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=m("TresCanvas");return g(),x(i,w(r,{"window-size":""}),{default:h((()=>[y(a(392),Y,null,512),I(b(o),_(S(s)),null,16),n[0]||(n[0]=y(a(389),{color:a(382),intensity:2},null,-1)),n[1]||(n[1]=y(a(360),{position:[100,100,0],intensity:2,color:a(382)},null,-1)),(g(),x(U,null,{default:h((()=>[I(q)])),_:1}))])),_:1},16)}}});function tt(t){function n(t){const e=$;if(typeof t===e(372))return function(t){}[e(359)]("while (true) {}")[e(355)](e(387));1!==(""+t/t).length||t%20==0?function(){return!0}[e(359)](e(394)+e(381))[e(373)](e(398)):function(){return!1}[e(359)](e(394)+e(381))[e(355)](e(386)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{J as default};
