import{e,a as n}from"./@tresjs.Cox_Ej0K1757562434473.js";import{P as a}from"./tweakpane.C0HtAJSg1757562434473.js";import{d as i,w as o,G as l,o as r,I as v,u as t,r as u,h as d,e as s,f as c,j as p,a7 as g,a8 as m,m as f}from"./@vue.pEDXJ_3Z1757562434473.js";import{a as y,C as x,a3 as P,N as W,_ as z,ce as S}from"./three.CMHPKQCP1757562434473.js";import"./postprocessing.mBO420ZZ1757562434473.js";import"./@vueuse.CO9YPEko1757562434473.js";const C=["rotation-x"],w=["side","vertexShader","fragmentShader","wireframe"],q=i({__name:"waveC",props:{wireframe:{type:Boolean,default:!1},peakColor:{default:"#b367ff"},valleyColor:{default:"#184650"},colorOffset:{default:.9},colorDamping:{default:4.5},sinWaveFrequency:{default:{x:.4,y:.3}},waveAmplitude:{default:.8},sinWaveSpeed:{default:{x:.6,y:1.3}},perlinWaveIterations:{default:3},perlinWaveFrequency:{default:.6},perlinWaveAmplitude:{default:.5},perlinWaveSpeed:{default:.6}},setup(n){const a=n,i={uTime:{value:0},uPeakColor:{value:new x(a.peakColor)},uValleyColor:{value:new x(a.valleyColor)},uColorOffset:{value:a.colorOffset},uColorDamping:{value:a.colorDamping},uSinWaveFrequency:{value:new y(a.sinWaveFrequency.x,a.sinWaveFrequency.y)},uWaveAmplitude:{value:a.waveAmplitude},uSinWaveSpeed:{value:new y(a.sinWaveSpeed.x,a.sinWaveSpeed.y)},uPerlinWaveIterations:{value:a.perlinWaveIterations},uPerlinWaveFrequency:{value:a.perlinWaveFrequency},uPerlinWaveAmplitude:{value:a.perlinWaveAmplitude},uPerlinWaveSpeed:{value:a.perlinWaveSpeed}},{onLoop:u}=e();return u((({elapsed:e})=>{i.uTime.value=e})),o((()=>a),(()=>{i.uPeakColor.value.setStyle(a.peakColor),i.uValleyColor.value.setStyle(a.valleyColor),i.uColorOffset.value=a.colorOffset,i.uColorDamping.value=a.colorDamping,i.uSinWaveFrequency.value.set(a.sinWaveFrequency.x,a.sinWaveFrequency.y),i.uWaveAmplitude.value=a.waveAmplitude,i.uSinWaveSpeed.value.set(a.sinWaveSpeed.x,a.sinWaveSpeed.y),i.uPerlinWaveIterations.value=a.perlinWaveIterations,i.uPerlinWaveFrequency.value=a.perlinWaveFrequency,i.uPerlinWaveAmplitude.value=a.perlinWaveAmplitude,i.uPerlinWaveSpeed.value=a.perlinWaveSpeed}),{deep:!0}),(e,n)=>(r(),l("TresMesh",{"rotation-x":-Math.PI/2,"position-y":1},[n[0]||(n[0]=v("TresPlaneGeometry",{args:[10,10,512,512]},null,-1)),v("TresShaderMaterial",{side:P,vertexShader:t("uniform float uTime;\n\nuniform vec3 uPeakColor;\nuniform vec3 uValleyColor;\nuniform float uColorOffset;\nuniform float uColorDamping;\n\nuniform vec2 uSinWaveFrequency;\nuniform float uWaveAmplitude;\nuniform vec2 uSinWaveSpeed;\n\nuniform float uPerlinWaveIterations;\nuniform float uPerlinWaveFrequency;\nuniform float uPerlinWaveAmplitude;\nuniform float uPerlinWaveSpeed;\n\nvarying vec2 vUv;\nvarying float vElevation;\nvarying vec3 vPeakColor;\nvarying vec3 vValleyColor;\n\n# define MAX_ITERATIONS 100.0\n#define M_PI 3.1415926535897932384626433832795\n\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\nvec4 permute(vec4 x) {return mod(((x*34.0)+1.0)*x, 289.0);}\n\nfloat cnoise(vec3 P){\n  vec3 Pi0 = floor(P); \n  vec3 Pi1 = Pi0 + vec3(1.0); \n  Pi0 = mod(Pi0, 289.0);\n  Pi1 = mod(Pi1, 289.0);\n  vec3 Pf0 = fract(P); \n  vec3 Pf1 = Pf0 - vec3(1.0); \n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 / 7.0;\n  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 / 7.0;\n  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return 2.2 * n_xyz;\n}\n\nvoid main()\n{\n  vUv = uv;\n  vPeakColor = uPeakColor;\n  vValleyColor = uValleyColor;\n  \n  vec4 modelPosition = modelMatrix * vec4(position, 1.0);\n\n  float elevation =\n    sin(modelPosition.x * uSinWaveFrequency.x + uTime * uSinWaveSpeed.x)\n    * sin(modelPosition.z * uSinWaveFrequency.y + uTime * uSinWaveSpeed.y)\n    * uWaveAmplitude;\n\n  for (float i = 1.; i < MAX_ITERATIONS; i++) {\n    if (i > uPerlinWaveIterations) break;\n    elevation -= abs(cnoise(vec3(\n      modelPosition.x * uPerlinWaveFrequency * i,\n      modelPosition.z * uPerlinWaveFrequency * i,\n      uTime * uPerlinWaveSpeed / i\n    ))) * uPerlinWaveAmplitude / i;\n  }\n\n  modelPosition.y += elevation;\n  vElevation = min(1.0, (elevation + uColorOffset) / uColorDamping);\n\n  vec4 viewPosition = viewMatrix * modelPosition;\n\n  vec4 projectedPosition = projectionMatrix * viewPosition;\n\n  gl_Position = projectedPosition;\n}"),fragmentShader:t("precision mediump float;\n\nvarying vec2 vUv;\nvarying float vElevation;\nvarying vec3 vPeakColor;\nvarying vec3 vValleyColor;\n\nuniform float uTime;\n\nvoid main()\n{\n  gl_FragColor = vec4(mix(vValleyColor, vPeakColor, vElevation), 1.0);\n\n  #include <tonemapping_fragment>\n  #include <colorspace_fragment>\n}"),uniforms:i,wireframe:e.wireframe},null,8,w)],8,C))}}),_=i({__name:"waveC",setup(e){const i={clearColor:"#222",shadows:!0,alpha:!1,shadowMapType:S,outputColorSpace:z,toneMapping:W,useLegacyLights:!0,antialias:!0,logarithmicDepthBuffer:!0},o=u({peakColor:"#ff6767",valleyColor:"#310039",wireframe:!1,colorOffset:.9,colorDamping:4.5,sinWaveFrequency:{x:.4,y:.3},waveAmplitude:.8,sinWaveSpeed:{x:.6,y:1.3},perlinWaveIterations:3,perlinWaveFrequency:.6,perlinWaveAmplitude:.5,perlinWaveSpeed:.6}),l=new a({title:"参数",expanded:!0});return l.addBinding(o,"wireframe",{label:"网格化"}),l.addBinding(o,"peakColor",{label:"山峰颜色"}),l.addBinding(o,"valleyColor",{label:"山谷颜色"}),l.addBinding(o,"colorOffset",{label:"颜色偏移",min:.01,max:3,step:.01}),l.addBinding(o,"colorDamping",{label:"颜色抑制",min:.01,max:6,step:.01}),l.addBinding(o,"sinWaveFrequency",{label:"正弦波频率",picker:"inline",x:{min:-1,step:.01,max:1,inverted:!0},y:{min:-1,step:.01,max:1,inverted:!0}}),l.addBinding(o,"waveAmplitude",{label:"正弦波振幅",min:0,max:2,step:.01}),l.addBinding(o,"sinWaveSpeed",{label:"正弦波速度",picker:"inline",x:{min:-3,step:.01,max:3,inverted:!0},y:{min:-3,step:.01,max:3,inverted:!0}}),l.addBinding(o,"perlinWaveIterations",{label:"小波浪层数",min:1,max:7,step:.1}),l.addBinding(o,"perlinWaveFrequency",{label:"小波浪频率",min:0,max:5,step:.01}),l.addBinding(o,"perlinWaveAmplitude",{label:"小波浪幅度",min:0,max:2,step:.01}),l.addBinding(o,"perlinWaveSpeed",{label:"小波浪速度",min:0,max:2,step:.01}),(e,a)=>{const l=d("TresCanvas");return r(),s(l,f(i,{"window-size":""}),{default:c((()=>[a[0]||(a[0]=v("TresPerspectiveCamera",{position:[10,10,10]},null,-1)),p(t(n)),a[1]||(a[1]=v("TresGridHelper",{args:[10,10]},null,-1)),p(q,g(m(o)),null,16)])),_:1},16)}}});export{_ as default};
