import{_ as t,C as n,ar as e,b as o,ai as r}from"./three.3wvNjL8W1741683274763.js";import{e as a,a as i,o as s,f as c}from"./@tresjs.tqalU7S21741683274763.js";import"./index.KOt2eBXJ1741683274763.js";import{c as l}from"./simplex-noise.jB2HxhHB1741683274763.js";import{C as u}from"./index.sSLEeJGC1741683274763.js";import{d as f,a3 as p,o as h,H as m,N as v,u as d,r as g,f as x,g as w,j as y,aj as b,ak as _,al as j}from"./@vue.NRI7TcgI1741683274763.js";import{_ as M}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.UiCdVngZ1741683274763.js";import"./postprocessing.D4QJINSY1741683274763.js";import"./@vueuse.lt4-M8RL1741683274763.js";import"./lamina.W29iAVK41741683274763.js";import"./glsl-tokenizer.D-ZYtJR11741683274763.js";import"./@amap.H2801npL1741683274763.js";import"./glsl-token-descope.PmGgTX6_1741683274763.js";import"./glsl-token-depth.E33m0WUL1741683274763.js";import"./glsl-token-scope.jc_4l2zA1741683274763.js";import"./glsl-token-properties.oZ3PiR5P1741683274763.js";import"./glsl-token-assignments.n87V_MgH1741683274763.js";import"./glsl-token-string.EiVaqOiN1741683274763.js";import"./glsl-token-functions.9ygmZTCS1741683274763.js";import"./object-hash.02dpNrUa1741683274763.js";import"./jszip.b3hD2dNL1741683274763.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.HnNmf0ke1741683274763.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.bLPwLHcd1741683274763.js";import"./three-stdlib.cRsATZEm1741683274763.js";import"./@pmndrs.WfX6M2011741683274763.js";import"./utils.LZvP780C1741683274763.js";const I=F;!function(t,n){const e=F,o=C();for(;;)try{if(681592===-parseInt(e(211))/1*(-parseInt(e(241))/2)+parseInt(e(229))/3+-parseInt(e(204))/4*(-parseInt(e(177))/5)+-parseInt(e(247))/6*(parseInt(e(220))/7)+parseInt(e(249))/8*(parseInt(e(205))/9)+-parseInt(e(191))/10*(parseInt(e(192))/11)+parseInt(e(201))/12*(-parseInt(e(176))/13))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[F(222)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){z(this,(function(){const t=F,n=new RegExp(t(235)),e=new RegExp(t(236),"i"),o=P(t(197));n[t(240)](o+t(173))&&e.test(o+t(186))?P():o("0")}))()}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[F(222)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function C(){const t=["96708SQtNAD","54IayzAc","bind","attributes-halfRootAngleCos","grass","instances","material","12241FIIkUN","exception","sin","length","halfRootAngleSinF32","action","map","Vector4","#000f00","7AGInEr","orientationsF32","apply","table","InstancedBufferAttribute","TresGroup","random","normalize","attributes","2299320pjpFZJ","needsUpdate","error","lookAt","joints","time","function *\\( *\\)","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","translate","cos","constructor","test","202vNZLqp","alphaMap","debu","toString","push","trace","6928326uZiwsG","set","939992baaATV","position","PlaneGeometry","side","chain","while (true) {}","Color","6682tvfjRM","75KJTRuU","computeVertexNormals","halfRootAngleCosF32","geometry","offsetsF32","DoubleSide","index","TresMeshStandardMaterial","array","input","gger","attributes-position","TresInstancedBufferGeometry","console","10PDZrZK","853787rbPKBV","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","counter","log","call","init","convertSRGBToLinear","prototype","width","27000AoYTgI","value","Vector3"];return(C=function(){return t})()}function F(t,n){const e=C();return(F=function(t,n){return e[t-=171]})(t,n)}A(void 0,(function(){const t=F;let n;try{n=Function('return (function() {}.constructor("return this")( ));')()}catch(r){n=window}const e=n.console=n[t(190)]||{},o=[t(195),"warn","info",t(231),t(212),t(223),t(246)];for(let a=0;a<o[t(214)];a++){const n=A.constructor[t(199)].bind(A),r=o[a],i=e[r]||n;n.__proto__=A[t(206)](A),n[t(244)]=i[t(244)][t(206)](i),e[r]=n}}))();const k=[I(210)],R=[I(183),I(188),"attributes-uv","attributes-offset","attributes-orientation","attributes-stretch","attributes-halfRootAngleSin",I(207)],S=[I(180)],D=[I(172)],T=f({__name:I(208),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(r){const s=I;let c,f;const g=([c,f]=p((()=>i({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),c=await c,f(),c),x=r,w=l(Math[s(226)]);function y(n,e){const o=s,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,a=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,i=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,c=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(218)])(r,a,i,c)}function b(t,n){var e=2*w(t/50,n/50);return e+=4*w(t/100,n/100),e+=.2*w(t/10,n/10)}const _=function(n,r){const a=s,i=[],c=[],l=[],u=[],f=[];let p=new e,h=new(t[a(218)]);const m=-.25;for(let e=0;e<n;e++){const s=Math.random()*r-r/2,v=Math[a(226)]()*r-r/2,d=b(s,v);i.push(s,d,v);let g=Math.PI-Math[a(226)]()*(2*Math.PI);u[a(245)](Math.sin(.5*g)),f[a(245)](Math[a(238)](.5*g));let x=new(t[a(203)])(0,1,0),w=x.x*Math[a(213)](g/2),_=x.y*Math[a(213)](g/2),j=x.z*Math[a(213)](g/2),M=Math[a(238)](g/2);p.set(w,_,j,M).normalize(),g=.5*Math[a(226)]()+m,x=new(t[a(203)])(1,0,0),w=x.x*Math[a(213)](g/2),_=x.y*Math[a(213)](g/2),j=x.z*Math[a(213)](g/2),M=Math[a(238)](g/2),h.set(w,_,j,M)[a(227)](),p=y(p,h),g=.5*Math.random()+m,x=new o(0,0,1),w=x.x*Math[a(213)](g/2),_=x.y*Math[a(213)](g/2),j=x.z*Math.sin(g/2),M=Math[a(238)](g/2),h[a(248)](w,_,j,M)[a(227)](),p=y(p,h),c[a(245)](p.x,p.y,p.z,p.w),e<n/3?l[a(245)](1.8*Math.random()):l[a(245)](Math.random())}return{offsetsF32:new(t[a(224)])(new Float32Array(i),3),orientationsF32:new(t[a(224)])(new Float32Array(c),4),stretchesF32:new(t[a(224)])(new Float32Array(l),1),halfRootAngleCosF32:new(t[a(224)])(new Float32Array(f),1),halfRootAngleSinF32:new(t[a(224)])(new Float32Array(u),1)}}(x[s(209)],x[s(200)]),j=new(t[s(171)])(x.bW,x.bH,1,x[s(233)])[s(237)](0,x.bH/2,0),M=new(t[s(171)])(x.width,x[s(200)],32,32);M[s(232)](new(t[s(203)])(0,1,0));const z=M[s(228)].position;for(let t=0;t<z[s(185)].length;t+=3)z.array[t+1]=b(z[s(185)][t],z.array[t+2]);M.attributes[s(250)][s(230)]=!0,M[s(178)]();const A=new(u({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new n(.3,.9,0)[s(198)](),bottomColor:new(t[s(175)])(0,.2,0)[s(198)]()},"   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }",s(193),(n=>{const e=s;n[e(172)]=t[e(182)]})));A[s(217)]=g.map,A[s(242)]=g.alphaMap,A.toneMapped=!1;const{onLoop:C}=a();return C((({elapsed:t})=>{const n=s;A.uniforms[n(234)][n(202)]=t/4})),(n,e)=>{const o=s;return h(),m(o(225),null,[v("TresMesh",{material:d(A)},[v(o(189),{index:d(j)[o(183)],"attributes-position":d(j)[o(228)][o(250)],"attributes-uv":d(j)[o(228)].uv,"attributes-offset":d(_)[o(181)],"attributes-orientation":d(_)[o(221)],"attributes-stretch":d(_).stretchesF32,"attributes-halfRootAngleSin":d(_)[o(215)],"attributes-halfRootAngleCos":d(_)[o(179)]},null,8,R)],8,k),v("TresMesh",{position:[0,0,0],geometry:d(M)},[v(o(184),{color:o(219),side:t[o(182)]},null,8,D)],8,S)])}}});function P(t){function n(t){const e=F;if("string"==typeof t)return function(t){}[e(239)](e(174)).apply(e(194));1!==(""+t/t).length||t%20==0?function(){return!0}.constructor("debu"+e(187))[e(196)](e(216)):function(){return!1}[e(239)](e(243)+e(187))[e(222)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const E=B;!function(t,n){const e=B,o=G();for(;;)try{if(670111===parseInt(e(510))/1*(parseInt(e(527))/2)+parseInt(e(495))/3+-parseInt(e(519))/4+-parseInt(e(526))/5+parseInt(e(513))/6+parseInt(e(502))/7*(parseInt(e(494))/8)+parseInt(e(516))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[B(522)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){H(this,(function(){const t=B,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(506),"i"),o=N(t(514));n[t(525)](o+t(511))&&e[t(525)](o+t(507))?N():o("0")}))()}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[B(522)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function B(t,n){const e=G();return(B=function(t,n){return e[t-=490]})(t,n)}function G(){const t=["https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","1xrbovY","chain","console","7810464ZsRiAn","init","constructor","3226689qfAnHG","TresPerspectiveCamera","error","4768844bIFlKy","return (function() ","exception","apply","prototype","__proto__","test","3166965ckPemT","747002zppfDm","debu","call","counter",'{}.constructor("return this")( )',"gger","2368280lXdiFp","497742uIRpTF","log","toString","bind","trace","info","length","7gJGONT","grass","stateObject","string","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","input","warn"];return(G=function(){return t})()}O(void 0,(function(){const t=B;let n;try{n=Function(t(520)+t(492)+");")()}catch(r){n=window}const e=n[t(512)]=n.console||{},o=[t(496),t(508),t(500),t(518),t(521),"table",t(499)];for(let a=0;a<o[t(501)];a++){const n=O.constructor[t(523)][t(498)](O),r=o[a],i=e[r]||n;n[t(524)]=O[t(498)](O),n[t(497)]=i[t(497)][t(498)](i),e[r]=n}}))();const L=f({__name:E(503),setup(t){const n=g({alpha:!0,toneMapping:r,windowSize:!0,clearColor:6710886}),e=g({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=B;return h(),x(d(c),b(_(n)),{default:w((()=>[o[0]||(o[0]=v(r(517),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),y(d(s),b(_(e)),null,16),(h(),x(j,null,{default:w((()=>[y(T)])),_:1})),(h(),x(j,null,{default:w((()=>[y(d(M),{texture:r(509)})])),_:1}))])),_:1},16)}}});function N(t){function n(t){const e=B;if(typeof t===e(505))return function(t){}[e(515)]("while (true) {}")[e(522)](e(491));1!==(""+t/t)[e(501)]||t%20==0?function(){return!0}[e(515)]("debu"+e(493))[e(490)]("action"):function(){return!1}.constructor(e(528)+e(493))[e(522)](e(504)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{L as default};
