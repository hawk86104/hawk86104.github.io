import{m as t,e as n,b as e,U as o}from"./@tresjs.hJVQLtpa1731053920743.js";import{k as r,_ as s,as as a,V as i,cL as c,s as l,O as u,W as v,n as f,bf as p,cM as d,B as m,bX as g}from"./three.eGpwEcxC1731053920743.js";import{P as x}from"./tweakpane.yHWGBmom1731053920743.js";import{d as h,a6 as y,e as I,o as b,f as _,g as S,J as U,j as w,u as P,aj as E,ak as D,al as L,m as M}from"./@vue.u2cBPEWn1731053920743.js";import{_ as A}from"./@fesjs.jcfJqFb-1731053920743.js";import"./@vueuse.weJ7f3dz1731053920743.js";import"./vue-router.VZFAJYMT1731053920743.js";import"./lodash-es.guXTxyfJ1731053920743.js";import"./@qlin.yHhFDldE1731053920743.js";import"./pinia.OLC9kXJl1731053920743.js";import"./vue-demi.C4xddsk91731053920743.js";import"./@floating-ui.BPbuo5Gx1731053920743.js";import"./@juggle.7yjBMqoW1731053920743.js";!function(t,n){const e=T,o=R();for(;;)try{if(229317===parseInt(e(449))/1+parseInt(e(415))/2*(parseInt(e(416))/3)+-parseInt(e(426))/4*(parseInt(e(465))/5)+-parseInt(e(446))/6*(-parseInt(e(423))/7)+parseInt(e(432))/8*(-parseInt(e(436))/9)+-parseInt(e(472))/10*(-parseInt(e(419))/11)+-parseInt(e(413))/12)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const F=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[T(429)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){F(this,(function(){const t=T,n=new RegExp(t(433)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=N(t(412));n[t(427)](o+t(441))&&e[t(427)](o+t(430))?N():o("0")}))()}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[T(429)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();C(void 0,(function(){const t=T,n=function(){const t=T;let n;try{n=Function(t(443)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n.console=n[t(471)]||{},o=["log",t(444),t(434),t(462),t(459),"table",t(435)];for(let r=0;r<o.length;r++){const n=C.constructor.prototype[t(447)](C),s=o[r],a=e[s]||n;n[t(414)]=C[t(447)](C),n.toString=a[t(448)][t(447)](a),e[s]=n}}))();function z(t,n,e){const o=T;if(typeof t!==o(467)||null===t)return t;const r=Array.isArray(t)?[]:{};for(const s in t)t[o(411)](s)&&(r[s]=z(t[s])),s==n&&(r[n]=e);return r}function T(t,n){const e=R();return(T=function(t,n){return e[t-=411]})(t,n)}function N(t){function n(t){const e=T;if(typeof t===e(439))return function(t){}[e(456)]("while (true) {}")[e(429)]("counter");1!==(""+t/t)[e(460)]||t%20==0?function(){return!0}[e(456)](e(463)+e(428))[e(466)](e(425)):function(){return!1}[e(456)]("debu"+e(428))[e(429)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}function R(){const t=["Vector4","replace","console","10KiSwBd","hasOwnProperty","init","1867908zkOEOt","__proto__","110116lFmCZl","15dSiAfc","get","exec","1673716FIGJuE","Matrix3","onload","WagnerLoadShaderException","692041pHJRGg","message","action","418568JVjLaF","test","gger","apply","input","value","88BiKXkj","function *\\( *\\)","info","trace","184266LCkPOs","ShaderMaterial",'Shader "',"string","v3v","chain","now","return (function() ","warn","type","6echaje","bind","toString","293165DWFNNJ","name","index","\" couldn't be loaded.","Matrix4","Texture","lastIndex","constructor",'" load was aborted.',"Vector3","exception","length","Vector2","error","debu","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","10vlkSBk","call","object","onabort"];return(R=function(){return t})()}const B=O;function G(){const t=["projectionMatrix","Reset","type","debu","quad","add","startTime","write","swapBuffers","770vbobkW","2550720DNGdqF","wrapS","gger","makePerspective","resolution","MeshBasicMaterial","passItems","chain","makeOrthographic","time","splice","loadShadervf","near","useRGBA","settings","3480GjKmQS","stateObject","params","toScreen","innerHeight","RGBFormat","magFilter","test","trace","258388sakIlb","copyPass","scene","counter","constructor","now","camera","WebGLRenderTarget","pass","onWindowResize","UnsignedByteType","read","wrapT","bind","log","Stack","stencilBuffer","set","prototype","string","12942666RFSRzO","scale","apply","passes","CopyPass","__proto__","warn","removePass","call","value","ShaderMaterial","console","uniforms","20LVSZTP","27890RflRwf","renderer","tInput","418611Zwrkgv","back","innerWidth","action","2rqwoZM","LinearFilter","height","info","ClampToEdgeWrapping","RGBAFormat","front","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","toString","387MTpjil","PlaneGeometry","input","width","Pass",'{}.constructor("return this")( )',"material","minFilter","Scene","return (function() ","setSize","316989ULrEdU","render","texture","init","exception","shader","length","far","setRenderTarget"];return(G=function(){return t})()}!function(t,n){const e=O,o=G();for(;;)try{if(230303===-parseInt(e(291))/1+-parseInt(e(295))/2*(-parseInt(e(315))/3)+parseInt(e(254))/4*(-parseInt(e(287))/5)+parseInt(e(245))/6*(parseInt(e(229))/7)+-parseInt(e(230))/8+-parseInt(e(304))/9*(parseInt(e(288))/10)+parseInt(e(274))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const j=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[O(276)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){j(this,(function(){const t=O,n=new RegExp("function *\\( *\\)"),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=H(t(318));n[t(252)](o+t(237))&&e[t(252)](o+t(306))?H():o("0")}))()}();const k=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function O(t,n){const e=G();return(O=function(t,n){return e[t-=217]})(t,n)}k(void 0,(function(){const t=O,n=function(){const t=O;let n;try{n=Function(t(313)+t(309)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(285)]||{},o=[t(268),t(280),t(298),"error",t(319),"table",t(253)];for(let r=0;r<o[t(217)];r++){const n=k[t(258)][t(272)][t(267)](k),s=o[r],a=e[s]||n;n[t(279)]=k[t(267)](k),n[t(303)]=a.toString[t(267)](a),e[s]=n}}))();class V{constructor(t,n){const e=O;this[e(307)]=1,this.height=1,this[e(244)]=n||{},this[e(243)]=this[e(244)][e(243)]||!1,this[e(289)]=t,this[e(255)]=this.CopyPass(this[e(244)]),this[e(256)]=new(s[e(312)]),this[e(224)]=new l(new(s[e(305)])(1,1),new(s[e(235)])),this[e(256)][e(225)](this[e(224)]),this[e(260)]=new u(1,1,1,1,-1e4,1e4),this[e(301)]=new v(1,1,{minFilter:void 0!==this.settings[e(311)]?this[e(244)].minFilter:f,magFilter:void 0!==this[e(244)][e(251)]?this[e(244)].magFilter:s[e(296)],wrapS:void 0!==this.settings[e(231)]?this[e(244)][e(231)]:s[e(299)],wrapT:void 0!==this.settings[e(266)]?this.settings[e(266)]:p,format:this[e(243)]?s[e(300)]:d,type:void 0!==this.settings[e(222)]?this[e(244)][e(222)]:s[e(264)],stencilBuffer:void 0===this[e(244)][e(270)]||this[e(244)][e(270)]}),this.back=this.front.clone(),this.startTime=Date[e(259)](),this[e(277)]={},this.Stack={passItems:[],passes:[]}}addPass(t,n,e,o){const r=O;this[r(241)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(320)]};this[r(269)].passItems.push(s)}[B(281)](t){const n=B;for(let e=this.Stack[n(236)][n(217)]-1;e>=0;e--)this[n(269)][n(236)][e].uuid===parseInt(t)&&this[n(269)].passItems[n(240)](e,1);console[n(268)](this[n(269)][n(236)])}[B(278)](){const t=B;this.Pass[t(282)](this);return this[t(241)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[B(241)](t){const n=B,e=n(302);return this[n(320)]=function(t,n){const e=T,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,l=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,u={sampler2D:{type:"t",value:()=>new(s[T(454)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(s[T(461)])},vec3:{type:"v3",value:()=>new(s[T(458)])},vec4:{type:"v4",value:()=>new a},bvec2:{type:"v2",value:()=>new(s[T(461)])},bvec3:{type:"v3",value:()=>new(s[T(458)])},bvec4:{type:"v4",value:()=>new(s[T(469)])},ivec2:{type:"v2",value:()=>new(s[T(461)])},ivec3:{type:"v3",value:()=>new i},ivec4:{type:"v4",value:()=>new a},mat2:{type:"v2",value:()=>new c},mat3:{type:"v3",value:()=>new(s[T(420)])},mat4:{type:"v4",value:()=>new(s[T(453)])}},v={float:{type:"fv",value:()=>[]},vec3:{type:e(440),value:()=>[]}};let f;const p={resolution:{type:"v2",value:new r(1,1),default:!0},time:{type:"f",value:Date[e(442)](),default:!0},tInput:{type:"t",value:new(s[e(454)]),default:!0}};let d,m;for(;null!==(f=o[e(418)](n));)f.index===o[e(455)]&&o[e(455)]++,d=f[1],m=f[2],p[m]={type:u[d][e(445)],value:u[d][e(431)]()};for(;null!==(f=l.exec(n));)f[e(451)]===o[e(455)]&&o[e(455)]++,d=f[1],m=f[2],f[3],p[m]={type:v[d][e(445)],value:v[d][e(431)]()};return new(s[e(437)])({uniforms:p,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(320)]}[B(308)](t){const n=B;this[n(320)]=null,this[n(247)]={}}[B(221)](){const t=B;this[t(265)]=this[t(301)],this.write=this[t(292)]}[B(263)](t,n){const e=B,o=window[e(293)],r=window[e(249)];t.setSize(1*o,1*r),n[e(220)][e(233)](70,o/r,n[e(242)],n[e(218)]),this[e(314)](o,r);return this.getOfflineTexture(o,r,!0)}[B(314)](t,n){const e=B;this[e(307)]=t,this.height=n,this[e(260)].projectionMatrix[e(238)](t/-2,t/2,n/2,n/-2,this.camera[e(242)],this[e(260)][e(218)]),this[e(224)][e(275)].set(t,n,1),this.front.setSize(t,n),this[e(292)][e(314)](t,n)}getOfflineTexture(t,n,e){const o=B;return new(s[o(261)])(t,n,{minFilter:s[o(296)],magFilter:f,format:e?s[o(300)]:s[o(250)]})}[B(316)](t,n,e,o){const r=B;this[r(289)][r(219)](this[r(227)]),this[r(289)][r(316)](t,n),o||this[r(228)]()}[B(228)](){const t=B,n=this[t(227)];this[t(227)]=this.read,this[t(265)]=n}[B(262)](){const t=B;for(let n=0;n<this[t(269)][t(236)][t(217)];n++){const e=this.Stack[t(236)][n][t(320)],o=this[t(269)].passItems[n][t(247)];if(this[t(289)].setRenderTarget(this[t(227)]),e instanceof s[t(284)]){this[t(224)][t(310)]=e,this[t(224)][t(310)][t(286)][t(290)][t(283)]=this[t(265)][t(317)],this[t(224)][t(310)][t(286)][t(234)].value.set(this[t(307)],this[t(297)]),this[t(224)][t(310)][t(286)][t(239)][t(283)]=.001*(Date[t(259)]()-this[t(226)]);for(const n in o)this[t(224)][t(310)][t(286)][n][t(283)]=o[n];this.renderer[t(316)](this.scene,this[t(260)]),this[t(228)]()}}}[B(248)](t,n){const e=B;this.renderer.setRenderTarget(null),this[e(224)].material=this[e(255)],this.quad.material[e(286)][e(290)][e(283)]=this.read[e(317)],this[e(224)][e(310)][e(286)].resolution[e(283)][e(271)](this[e(307)],this.height),this[e(289)][e(316)](this[e(256)],this[e(260)])}}function H(t){function n(t){const e=O;if(typeof t===e(273))return function(t){}[e(258)]("while (true) {}")[e(276)](e(257));1!==(""+t/t).length||t%20==0?function(){return!0}[e(258)](e(223)+e(232))[e(282)](e(294)):function(){return!1}[e(258)]("debu"+e(232))[e(276)](e(246)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const W="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",X=J;!function(t,n){const e=J,o=$();for(;;)try{if(398514===parseInt(e(449))/1+-parseInt(e(396))/2+-parseInt(e(456))/3*(-parseInt(e(423))/4)+-parseInt(e(446))/5*(-parseInt(e(410))/6)+parseInt(e(459))/7*(-parseInt(e(399))/8)+-parseInt(e(424))/9+parseInt(e(442))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[J(383)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){q(this,(function(){const t=J,n=new RegExp(t(435)),e=new RegExp(t(403),"i"),o=K(t(461));n[t(422)](o+t(427))&&e[t(422)](o+"input")?K():o("0")}))()}();const Z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[J(383)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function $(){const t=["chain","constructor","material","change","removePass","add","dispose","bind","function *\\( *\\)","plugins/postProcessing/image/1324-normal.jpg",'{}.constructor("return this")( )',"return (function() ","translate","onWindowResize","__proto__","8817680cIFbcR","postProcessing","castShadow","VIGNETTE2Pass","932905mAkOEn","title","value","136191yOiKgb","POISSONPass","render","text","warn","prototype","后处理类型","3puELPb","label","length","7TefdMI","CGAPass","init","gger","InvertPass","autoClearColor","SOBELPass","addButton","FXAAPass","apply","click","DENOISEPass","toString","values","DOTPass","Reset","FREICHENPass","call","console","random","VIGNETTE1Pass","action","564546IJEMBE","移除~","trace","4248904wDxOVC","BoxGeometry","addPass","receiveShadow","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","plugins/postProcessing/image/1324.jpg","debu","table","addBlade","push","关闭通道","12RAgxCy","map","SNOISEPass","target","TOONPass","exception","Vector2","counter","error","MeshPhongMaterial","RGBPass","SEPIAPass","test","915784RqICiH","3673503scBLQv","新增通道","BOXBLURPass"];return($=function(){return t})()}function J(t,n){const e=$();return(J=function(t,n){return e[t-=378]})(t,n)}Z(void 0,(function(){const t=J;let n;try{n=Function(t(438)+t(437)+");")()}catch(r){n=window}const e=n.console=n[t(392)]||{},o=["log",t(453),"info",t(418),t(415),t(406),t(398)];for(let s=0;s<o[t(458)];s++){const n=Z[t(428)][t(454)][t(434)](Z),r=o[s],a=e[r]||n;n[t(441)]=Z[t(434)](Z),n[t(386)]=a.toString.bind(a),e[r]=n}}))();function K(t){function n(t){const e=J;if("string"==typeof t)return function(t){}[e(428)]("while (true) {}").apply(e(417));1!==(""+t/t)[e(458)]||t%20==0?function(){return!0}[e(428)](e(405)+e(462))[e(391)](e(395)):function(){return!1}.constructor(e(405)+e(462))[e(383)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const Q=A(h({__name:X(443),async setup(o){const r=X;let a,i;const{camera:c,renderer:u,scene:v,sizes:f}=t();for(var p=new m,d=[],h=0;h<100;h++){var I=new(s[r(400)])(100,100,100);I[r(439)](1500*Math[r(393)](),1500*Math.random(),1500*Math[r(393)]()),d[r(408)](I)}p=g(d);const b=([a,i]=y((()=>e({map:r(404)}))),a=await a,i(),a),_=([a,i]=y((()=>e({map:r(436)}))),a=await a,i(),a);var S=new(s[r(419)])({map:b[r(411)],normalMap:_[r(411)],normalScale:new(s[r(416)])(.8,-.8),shininess:100}),U=new l(p,S);U[r(444)]=!0,U[r(402)]=!0,v[r(448)][r(432)](U);const w=new V(u[r(448)],{useRGBA:!0}),P=new x;let E=null,D=[{text:"InvertPass",value:{InvertPass:W}},{text:r(382),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:r(421),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:r(412),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:r(426),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:r(385),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:r(460),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:_[r(411)]}}},{text:r(380),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:r(420),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:r(388),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:"CIRCULARPass",value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:r(450),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:r(394),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:r(445),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:r(390),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:r(414),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],L=r(378),M=W,A=null;P[r(407)]({view:"list",label:r(455),options:D,value:""}).on(r(430),(t=>{E=t.value}));const F=P[r(381)]({title:"新增",label:r(425)});let C=0;F.on(r(384),(t=>{const n=r;L=Object.keys(E)[0],M=Object[n(387)](E)[0],A=Object[n(387)](E)[1];let e=C++,o=P.addFolder({title:L});for(const r in A){let t=A[r];o[n(407)]({view:n(452),label:r,parse:t=>String(t),value:t})}o[n(381)]({title:n(397)+e,label:n(409)}).on("click",(t=>{const e=n;let o=t[e(413)][e(447)].split("~")[1];w[e(431)](o)})).on(n(384),(()=>{o[n(433)]()}));let s=z(A,t.target[n(457)],t[n(448)]);w[n(401)](L,M,s,e)})),w[r(440)](u.value,c[r(448)]);const{onLoop:T}=n();return T((({delta:t})=>{const n=r;U&&(u.value[n(379)]=!0,w[n(389)](),U[n(429)]=S,w[n(451)](v[n(448)],c[n(448)]),w.pass(),w.toScreen(v[n(448)],c[n(448)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),Y=rt;!function(t,n){const e=rt,o=et();for(;;)try{if(635329===parseInt(e(168))/1*(-parseInt(e(172))/2)+-parseInt(e(173))/3*(-parseInt(e(195))/4)+-parseInt(e(174))/5+parseInt(e(176))/6+parseInt(e(178))/7+-parseInt(e(170))/8+parseInt(e(185))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const tt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[rt(184)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){tt(this,(function(){const t=rt,n=new RegExp(t(166)),e=new RegExp(t(175),"i"),o=at(t(188));n[t(190)](o+t(180))&&e[t(190)](o+"input")?at():o("0")}))()}();const nt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[rt(184)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function et(){const t=["1453QtXgzd","length","2105080kVUBTk","log","1646OuzQrC","884049LpLEtS","1521270ypZvLv","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","324030kMKUvM","call","771799TEWwVa","action","chain","counter","TresAmbientLight","stateObject","apply","17456328jBKeTo","prototype","TresDirectionalLight","init","postProcessingEditor","test","debu","warn","return (function() ","error","4wsFIxE","#ffffff","constructor","gger","exception","bind","info","toString","trace","while (true) {}","manual","TresPerspectiveCamera","console","function *\\( *\\)","table"];return(et=function(){return t})()}nt(void 0,(function(){const t=rt;let n;try{n=Function(t(193)+'{}.constructor("return this")( ));')()}catch(r){n=window}const e=n.console=n[t(165)]||{},o=[t(171),t(192),t(201),t(194),t(199),t(167),t(203)];for(let s=0;s<o[t(169)];s++){const n=nt[t(197)][t(186)][t(200)](nt),r=o[s],a=e[r]||n;n.__proto__=nt[t(200)](nt),n[t(202)]=a.toString[t(200)](a),e[r]=n}}))();const ot={ref:"perspectiveCameraRef",position:[600,850,-1500],fov:45,near:.1,far:1e5};function rt(t,n){const e=et();return(rt=function(t,n){return e[t-=164]})(t,n)}const st=h({__name:Y(189),setup(t){const e=Y,r={clearColor:"#000000",shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(205)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=I("TresCanvas");return b(),_(i,M(r,{"window-size":""}),{default:S((()=>[U(a(164),ot,null,512),w(P(o),E(D(s)),null,16),n[0]||(n[0]=U(a(182),{color:"#ffffff",intensity:2},null,-1)),n[1]||(n[1]=U(a(187),{position:[100,100,0],intensity:2,color:a(196)},null,-1)),(b(),_(L,null,{default:S((()=>[w(Q)])),_:1}))])),_:1},16)}}});function at(t){function n(t){const e=rt;if("string"==typeof t)return function(t){}[e(197)](e(204))[e(184)](e(181));1!==(""+t/t).length||t%20==0?function(){return!0}.constructor(e(191)+e(198))[e(177)](e(179)):function(){return!1}[e(197)](e(191)+e(198))[e(184)](e(183)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{st as default};
