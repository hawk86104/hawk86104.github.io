import{m as t,e as n,b as e,U as o}from"./@tresjs.pA0fT6uQ1736128832096.js";import{k as r,_ as a,Y as s,V as i,cR as c,M as l,t as u,n as v,A as f,aW as p,B as d,aD as m,cM as g}from"./three.8H01GNxA1736128832096.js";import{P as x}from"./tweakpane.yHWGBmom1736128832096.js";import{d as h,a4 as y,e as I,o as b,f as _,g as S,J as U,j as w,aj as D,ak as P,u as E,al as M,m as A}from"./@vue.yG49nQHr1736128832096.js";import{_ as L}from"./@fesjs.egESxg6m1736128832096.js";import"./@vueuse.iB8cUOAP1736128832096.js";import"./vue-router.9xKClDNR1736128832096.js";import"./lodash-es.kYt-_xTG1736128832096.js";import"./@qlin.yHhFDldE1736128832096.js";import"./pinia.fYculRKX1736128832096.js";import"./vue-demi.C4xddsk91736128832096.js";import"./@floating-ui.BPbuo5Gx1736128832096.js";import"./@juggle.7yjBMqoW1736128832096.js";!function(t,n){const e=z,o=T();for(;;)try{if(439232===parseInt(e(132))/1+parseInt(e(170))/2+parseInt(e(168))/3*(-parseInt(e(144))/4)+-parseInt(e(167))/5*(-parseInt(e(173))/6)+-parseInt(e(160))/7*(-parseInt(e(152))/8)+parseInt(e(128))/9+-parseInt(e(123))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[z(158)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function z(t,n){const e=T();return(z=function(t,n){return e[t-=117]})(t,n)}!function(){C(this,(function(){const t=z,n=new RegExp(t(154)),e=new RegExp(t(140),"i"),o=R(t(172));n[t(137)](o+"chain")&&e[t(137)](o+t(164))?R():o("0")}))()}();const F=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function T(){const t=["lastIndex","18850sEhGNv","5847PlgQHa","Matrix3","1146370GQDJnl","now","init","522OYbRPj","type","index","constructor","\" couldn't be loaded.","open","console","9377610MIvEwX","exception","name","WagnerLoadShaderException","log","5792373ipMjjx","Vector2",'{}.constructor("return this")( )',"while (true) {}","423874qjUjew","prototype","ShaderMaterial","random","length","test","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","gger","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","Texture","replace","toString","1348SDHUxS","debu","Vector4","exec","counter","onabort","return (function() ","call","360wIJVxT","table","function *\\( *\\)","bind",'Shader "',"responseText","apply","info","10136SjCpqw","string","trace","message","input","Vector3"];return(T=function(){return t})()}F(void 0,(function(){const t=z,n=function(){const t=z;let n;try{n=Function(t(150)+t(130)+");")()}catch(e){n=window}return n}(),e=n[t(122)]=n[t(122)]||{},o=[t(127),"warn",t(159),"error",t(124),t(153),t(162)];for(let r=0;r<o[t(136)];r++){const n=F[t(119)][t(133)][t(155)](F),a=o[r],s=e[a]||n;n.__proto__=F[t(155)](F),n.toString=s[t(143)][t(155)](s),e[a]=n}}))();function N(t,n,e){if("object"!=typeof t||null===t)return t;const o=Array.isArray(t)?[]:{};for(const r in t)t.hasOwnProperty(r)&&(o[r]=N(t[r])),r==n&&(o[n]=e);return o}function R(t){function n(t){const e=z;if(typeof t===e(161))return function(t){}[e(119)](e(131))[e(158)](e(148));1!==(""+t/t).length||t%20==0?function(){return!0}.constructor(e(145)+e(139))[e(151)]("action"):function(){return!1}[e(119)](e(145)+e(139)).apply("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}function G(){const t=["back","RGBFormat","innerWidth","810bhoBHU","toString","onWindowResize","trace","texture","exception","8469jVpkDo","action","resolution","apply","table","read","startTime","init","input","removePass","debu","constructor","1725564gGkNOm","47803437zhcaxc","Reset","push","copyPass","console","WebGLRenderTarget","near","135oRDgiU","pass","write","info","useRGBA","ShaderMaterial","shader","setSize","call","renderer","log","settings","camera","counter","material","OrthographicCamera","front","return (function() ","minFilter","makeOrthographic","test","stateObject","MeshBasicMaterial","length","setRenderTarget","height","1337876GItuJP","scene","12bJCxBK","uniforms","__proto__","ClampToEdgeWrapping","wrapS","34712fBTGnz","stencilBuffer","render","Scene","Stack","1393ZsckbV","loadShadervf","magFilter","tInput","toScreen","addPass","scale","now","projectionMatrix","passItems","while (true) {}","swapBuffers","warn","CopyPass","LinearFilter","1284098TiSltz","bind","wrapT","Pass","uuid","Mesh","type","value","10YdcPTr","getOfflineTexture","RGBAFormat","111812KGfRjQ","width","far","time","params","gger","set","quad",'{}.constructor("return this")( )'];return(G=function(){return t})()}const j=B;function B(t,n){const e=G();return(B=function(t,n){return e[t-=488]})(t,n)}!function(t,n){const e=B,o=G();for(;;)try{if(743463===-parseInt(e(530))/1+-parseInt(e(557))/2+parseInt(e(504))/3*(-parseInt(e(568))/4)+-parseInt(e(565))/5*(-parseInt(e(496))/6)+-parseInt(e(542))/7*(parseInt(e(537))/8)+parseInt(e(586))/9*(-parseInt(e(580))/10)+-parseInt(e(497))/11*(-parseInt(e(532))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const V=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[B(589)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){V(this,(function(){const t=B,n=new RegExp("function *\\( *\\)"),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=H(t(491));n[t(524)](o+"chain")&&e.test(o+t(492))?H():o("0")}))()}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[B(589)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();O(void 0,(function(){const t=B,n=function(){const t=B;let n;try{n=Function(t(521)+t(576)+");")()}catch(e){n=window}return n}(),e=n[t(501)]=n[t(501)]||{},o=[t(514),t(554),t(507),"error",t(585),t(488),t(583)];for(let r=0;r<o[t(527)];r++){const n=O[t(495)].prototype[t(558)](O),a=o[r],s=e[a]||n;n[t(534)]=O[t(558)](O),n.toString=s[t(581)][t(558)](s),e[a]=n}}))();class k{constructor(t,n){const e=B;this.width=1,this[e(529)]=1,this[e(515)]=n||{},this[e(508)]=this[e(515)][e(508)]||!1,this[e(513)]=t,this[e(500)]=this[e(555)](this.settings),this.scene=new(a[e(540)]),this.quad=new(a[e(562)])(new u(1,1),new(a[e(526)])),this[e(531)].add(this[e(575)]),this[e(516)]=new(a[e(519)])(1,1,1,1,-1e4,1e4),this.front=new(a[e(502)])(1,1,{minFilter:void 0!==this[e(515)][e(522)]?this[e(515)].minFilter:v,magFilter:void 0!==this[e(515)].magFilter?this[e(515)][e(544)]:v,wrapS:void 0!==this[e(515)][e(536)]?this[e(515)][e(536)]:a[e(535)],wrapT:void 0!==this.settings[e(559)]?this.settings.wrapT:a[e(535)],format:this[e(508)]?a[e(567)]:a[e(578)],type:void 0!==this[e(515)].type?this[e(515)][e(563)]:f,stencilBuffer:void 0===this[e(515)][e(538)]||this[e(515)][e(538)]}),this[e(577)]=this[e(520)].clone(),this[e(490)]=Date[e(549)](),this.passes={},this[e(541)]={passItems:[],passes:[]}}[j(547)](t,n,e,o){const r=j;this.loadShadervf(n);const a={shaderName:t,params:e,uuid:o,shader:this[r(510)]};this[r(541)].passItems[r(499)](a)}[j(493)](t){const n=j;for(let e=this[n(541)][n(551)][n(527)]-1;e>=0;e--)this.Stack[n(551)][e][n(561)]===parseInt(t)&&this[n(541)][n(551)].splice(e,1);console[n(514)](this.Stack[n(551)])}CopyPass(){const t=j;this.Pass[t(512)](this);return this[t(543)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}loadShadervf(t){const n=j;return this[n(510)]=function(t,n){const e=z,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,u=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,v={sampler2D:{type:"t",value:()=>new s},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(a[z(129)])},vec3:{type:"v3",value:()=>new(a[z(165)])},vec4:{type:"v4",value:()=>new(a[z(146)])},bvec2:{type:"v2",value:()=>new r},bvec3:{type:"v3",value:()=>new i},bvec4:{type:"v4",value:()=>new(a[z(146)])},ivec2:{type:"v2",value:()=>new(a[z(129)])},ivec3:{type:"v3",value:()=>new(a[z(165)])},ivec4:{type:"v4",value:()=>new(a[z(146)])},mat2:{type:"v2",value:()=>new c},mat3:{type:"v3",value:()=>new(a[z(169)])},mat4:{type:"v4",value:()=>new l}},f={float:{type:"fv",value:()=>[]},vec3:{type:"v3v",value:()=>[]}};let p;const d={resolution:{type:"v2",value:new r(1,1),default:!0},time:{type:"f",value:Date[e(171)](),default:!0},tInput:{type:"t",value:new(a[e(141)]),default:!0}};let m,g;for(;null!==(p=o.exec(n));)p[e(118)]===o[e(166)]&&o[e(166)]++,m=p[1],g=p[2],d[g]={type:v[m][e(117)],value:v[m].value()};for(;null!==(p=u[e(147)](n));)p[e(118)]===o[e(166)]&&o.lastIndex++,m=p[1],g=p[2],p[3],d[g]={type:f[m].type,value:f[m].value()};return new(a[e(134)])({uniforms:d,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}("varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }",t),this[n(510)]}[j(560)](t){const n=j;this[n(510)]=null,this[n(572)]={}}[j(498)](){const t=j;this.read=this[t(520)],this[t(506)]=this[t(577)]}[j(582)](t,n){const e=j,o=window[e(579)],r=window.innerHeight;t[e(511)](1*o,1*r),n[e(550)].makePerspective(70,o/r,n[e(503)],n[e(570)]),this[e(511)](o,r);return this[e(566)](o,r,!0)}setSize(t,n){const e=j;this.width=t,this.height=n,this[e(516)][e(550)][e(523)](t/-2,t/2,n/2,n/-2,this[e(516)].near,this.camera[e(570)]),this[e(575)][e(548)][e(574)](t,n,1),this[e(520)][e(511)](t,n),this[e(577)][e(511)](t,n)}getOfflineTexture(t,n,e){const o=j;return new(a[o(502)])(t,n,{minFilter:a[o(556)],magFilter:v,format:e?p:a[o(578)]})}[j(539)](t,n,e,o){const r=j;this[r(513)].setRenderTarget(this[r(506)]),this[r(513)][r(539)](t,n),o||this[r(553)]()}[j(553)](){const t=j,n=this.write;this[t(506)]=this[t(489)],this[t(489)]=n}[j(505)](){const t=j;for(let n=0;n<this[t(541)][t(551)][t(527)];n++){const e=this.Stack[t(551)][n][t(510)],o=this[t(541)][t(551)][n].params;if(this.renderer[t(528)](this[t(506)]),e instanceof a[t(509)]){this[t(575)][t(518)]=e,this[t(575)][t(518)][t(533)][t(545)][t(564)]=this[t(489)][t(584)],this.quad[t(518)][t(533)].resolution[t(564)][t(574)](this[t(569)],this[t(529)]),this[t(575)][t(518)][t(533)][t(571)][t(564)]=.001*(Date[t(549)]()-this.startTime);for(const n in o)this[t(575)].material[t(533)][n][t(564)]=o[n];this[t(513)][t(539)](this[t(531)],this[t(516)]),this[t(553)]()}}}[j(546)](t,n){const e=j;this.renderer.setRenderTarget(null),this.quad[e(518)]=this[e(500)],this.quad[e(518)][e(533)][e(545)][e(564)]=this[e(489)][e(584)],this.quad[e(518)].uniforms[e(588)][e(564)][e(574)](this[e(569)],this.height),this[e(513)][e(539)](this[e(531)],this[e(516)])}}function H(t){function n(t){const e=B;if("string"==typeof t)return function(t){}[e(495)](e(552))[e(589)](e(517));1!==(""+t/t)[e(527)]||t%20==0?function(){return!0}[e(495)](e(494)+"gger")[e(512)](e(587)):function(){return!1}.constructor("debu"+e(573)).apply(e(525)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const W="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",q=J;!function(t,n){const e=J,o=$();for(;;)try{if(718824===parseInt(e(261))/1+-parseInt(e(275))/2+parseInt(e(251))/3*(-parseInt(e(272))/4)+-parseInt(e(290))/5+parseInt(e(285))/6*(-parseInt(e(235))/7)+parseInt(e(238))/8*(-parseInt(e(254))/9)+parseInt(e(277))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const X=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){X(this,(function(){const t=J,n=new RegExp(t(296)),e=new RegExp(t(247),"i"),o=K(t(240));n[t(249)](o+t(236))&&e[t(249)](o+t(259))?K():o("0")}))()}();const Z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[J(287)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function $(){const t=["autoClearColor","keys","Mesh","FREICHENPass","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","prototype","test","split","40197BYlKbq","click","value","18xdwZDd","stateObject","log","add","后处理类型","input","移除~","2832BQdfxG","while (true) {}","values","material","gger","error","receiveShadow","warn","addFolder","plugins/postProcessing/image/1324.jpg","castShadow","232cnAoRr","TOONPass","mergeGeometries","937802xCXAjD","trace","32727590mxedxq","InvertPass","新增通道","console",'{}.constructor("return this")( )',"dispose","FXAAPass","SOBELPass","108KLzFMp","POISSONPass","apply","addButton","MeshPhongMaterial","2351120zlxTQw","VIGNETTE2Pass","title","length","postProcessing","label","function *\\( *\\)","__proto__","VIGNETTE1Pass","关闭通道","BOXBLURPass","debu","DOTPass","action","map","constructor","toString","DENOISEPass","Reset","bind","table","removePass","222383XcnsUT","chain","translate","1074632EixbxV","random","init","addBlade","target"];return($=function(){return t})()}function J(t,n){const e=$();return(J=function(t,n){return e[t-=224]})(t,n)}Z(void 0,(function(){const t=J;let n;try{n=Function("return (function() "+t(281)+");")()}catch(r){n=window}const e=n[t(280)]=n[t(280)]||{},o=[t(256),t(268),"info",t(266),"exception",t(233),t(276)];for(let a=0;a<o[t(293)];a++){const n=Z[t(228)][t(248)][t(232)](Z),r=o[a],s=e[r]||n;n[t(297)]=Z[t(232)](Z),n[t(229)]=s.toString.bind(s),e[r]=n}}))();function K(t){function n(t){const e=J;if("string"==typeof t)return function(t){}.constructor(e(262))[e(287)]("counter");1!==(""+t/t).length||t%20==0?function(){return!0}[e(228)](e(224)+"gger").call(e(226)):function(){return!1}[e(228)](e(224)+e(265))[e(287)](e(255)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const Q=L(h({__name:q(294),async setup(o){const s=q;let i,c;const{camera:l,renderer:u,scene:v,sizes:f}=t();for(var p=new d,h=[],I=0;I<100;I++){var b=new m(100,100,100);b[s(237)](1500*Math[s(239)](),1500*Math[s(239)](),1500*Math.random()),h.push(b)}p=g[s(274)](h);const _=([i,c]=y((()=>e({map:s(270)}))),i=await i,c(),i),S=([i,c]=y((()=>e({map:"plugins/postProcessing/image/1324-normal.jpg"}))),i=await i,c(),i);var U=new(a[s(289)])({map:_[s(227)],normalMap:S[s(227)],normalScale:new r(.8,-.8),shininess:100}),w=new(a[s(245)])(p,U);w[s(271)]=!0,w[s(267)]=!0,v[s(253)][s(257)](w);const D=new k(u[s(253)],{useRGBA:!0}),P=new x;let E=null,M=[{text:s(278),value:{InvertPass:W}},{text:s(283),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:"SEPIAPass",value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:"SNOISEPass",value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:s(300),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:s(230),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:"CGAPass",value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:S.map}}},{text:s(284),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:"RGBPass",value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:s(225),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:"CIRCULARPass",value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:s(286),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:s(298),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(291),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:s(246),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:s(273),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],A=s(278),L=W,C=null;P[s(241)]({view:"list",label:s(258),options:M,value:""}).on("change",(t=>{E=t.value}));const z=P[s(288)]({title:"新增",label:s(279)});let F=0;z.on("click",(t=>{const n=s;A=Object[n(244)](E)[0],L=Object[n(263)](E)[0],C=Object[n(263)](E)[1];let e=F++,o=P[n(269)]({title:A});for(const a in C){let t=C[a];o[n(241)]({view:"text",label:a,parse:t=>String(t),value:t})}o.addButton({title:n(260)+e,label:n(299)}).on(n(252),(t=>{const e=n;let o=t[e(242)][e(292)][e(250)]("~")[1];D[e(234)](o)})).on("click",(()=>{o[n(282)]()}));let r=N(C,t[n(242)][n(295)],t[n(253)]);D.addPass(A,L,r,e)})),D.onWindowResize(u[s(253)],l[s(253)]);const{onLoop:T}=n();return T((({delta:t})=>{const n=s;w&&(u[n(253)][n(243)]=!0,D[n(231)](),w[n(264)]=U,D.render(v[n(253)],l.value),D.pass(),D.toScreen(v.value,l.value))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]);function Y(t,n){const e=rt();return(Y=function(t,n){return e[t-=371]})(t,n)}const tt=Y;!function(t,n){const e=Y,o=rt();for(;;)try{if(275520===-parseInt(e(411))/1*(parseInt(e(375))/2)+-parseInt(e(415))/3*(-parseInt(e(384))/4)+parseInt(e(393))/5+-parseInt(e(418))/6*(parseInt(e(413))/7)+-parseInt(e(373))/8*(-parseInt(e(376))/9)+parseInt(e(386))/10*(-parseInt(e(396))/11)+parseInt(e(378))/12*(parseInt(e(401))/13))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const nt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Y(379)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){nt(this,(function(){const t=Y,n=new RegExp(t(387)),e=new RegExp(t(383),"i"),o=st(t(407));n[t(388)](o+"chain")&&e.test(o+t(372))?st():o("0")}))()}();const et=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Y(379)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();et(void 0,(function(){const t=Y,n=function(){const t=Y;let n;try{n=Function(t(410)+t(394)+");")()}catch(e){n=window}return n}(),e=n[t(395)]=n[t(395)]||{},o=[t(390),t(371),t(391),t(380),t(409),t(405),t(397)];for(let r=0;r<o[t(400)];r++){const n=et[t(404)][t(399)][t(392)](et),a=o[r],s=e[a]||n;n.__proto__=et[t(392)](et),n[t(416)]=s[t(416)][t(392)](s),e[a]=n}}))();const ot={ref:"perspectiveCameraRef",position:[600,850,-1500],fov:45,near:.1,far:1e5};function rt(){const t=["postProcessingEditor","461064NVNyLn","apply","error","string","gger","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","4gVKYsS","#ffffff","110VLfQcg","function *\\( *\\)","test","TresPerspectiveCamera","log","info","bind","1516730HVCBWz",'{}.constructor("return this")( )',"console","156398DVIRdr","trace","#000000","prototype","length","78DnXrIz","manual","counter","constructor","table","stateObject","init","action","exception","return (function() ","189hiGTZv","TresAmbientLight","200389mkdFzW","while (true) {}","234489LVjCCM","toString","TresCanvas","78RAAoba","warn","input","16DKwCjl","call","188IITUcq","944073MTJUwq"];return(rt=function(){return t})()}const at=h({__name:tt(377),setup(t){const e=tt,r={clearColor:e(398),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(402)},a={autoRotate:!0,enableDamping:!0},{onLoop:s}=n();return s((({delta:t})=>{})),(t,n)=>{const s=e,i=I(s(417));return b(),_(i,A(r,{"window-size":""}),{default:S((()=>[U(s(389),ot,null,512),w(E(o),D(P(a)),null,16),n[0]||(n[0]=U(s(412),{color:s(385),intensity:2},null,-1)),n[1]||(n[1]=U("TresDirectionalLight",{position:[100,100,0],intensity:2,color:s(385)},null,-1)),(b(),_(M,null,{default:S((()=>[w(Q)])),_:1}))])),_:1},16)}}});function st(t){function n(t){const e=Y;if(typeof t===e(381))return function(t){}.constructor(e(414)).apply(e(403));1!==(""+t/t)[e(400)]||t%20==0?function(){return!0}.constructor("debu"+e(382))[e(374)](e(408)):function(){return!1}[e(404)]("debugger").apply(e(406)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{at as default};
