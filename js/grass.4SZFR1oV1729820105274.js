import{_ as t,C as n,a0 as e,V as o,T as r,ai as a}from"./three.0W5n8UBO1729820105274.js";import{U as i,z as s,Y as c,L as l}from"./@tresjs.S6PXiQcG1729820105274.js";import"./index.uvzITeWI1729820105274.js";import{a as u}from"./simplex-noise.P9JMzoHY1729820105274.js";import{C as f}from"./index.WOSC_0fE1729820105274.js";import{d as p,a4 as h,o as m,E as v,L as d,u as g,r as x,f as w,g as y,j as b,aj as _,ak as M,al as j}from"./@vue.bvMz0l_u1729820105274.js";import{_ as z}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.bNpSYM7x1729820105274.js";import"./@vueuse.3M_MDcJc1729820105274.js";import"./lamina.r4bWfEjF1729820105274.js";import"./glsl-tokenizer.fZI0jxNo1729820105274.js";import"./@amap.UuvR34pR1729820105274.js";import"./glsl-token-descope.Bn6une5f1729820105274.js";import"./glsl-token-depth.JCRxsWaD1729820105274.js";import"./glsl-token-scope.gWNyqn7i1729820105274.js";import"./glsl-token-properties.3yCbPo1A1729820105274.js";import"./glsl-token-assignments.lMTe_yo71729820105274.js";import"./glsl-token-string.KmSVHImF1729820105274.js";import"./glsl-token-functions.IcwySNVS1729820105274.js";import"./object-hash.O5Web0p21729820105274.js";import"./jszip.nToJU0Sc1729820105274.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.tQ10dol21729820105274.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.wI6-6stI1729820105274.js";import"./three-stdlib.ilpWY7x61729820105274.js";import"./@pmndrs.4OReEEqc1729820105274.js";import"./utils.zAhR7NWz1729820105274.js";const A=I;function I(t,n){const e=C();return(I=function(t,n){return e[t-=120]})(t,n)}function C(){const t=["console","trace","function *\\( *\\)","1195PdQkCY","44VkjsIC","geometry","83896byUvKN","attributes-stretch","bind","DoubleSide","constructor","convertSRGBToLinear","#000f00","attributes-position","Vector3","random","TresMesh","position","call","1711612uQZqTl","halfRootAngleCosF32","PlaneGeometry","action","return (function() ","sin","attributes-orientation","array","set","prototype","117QADLgH","Color","joints","material","lookAt","needsUpdate","halfRootAngleSinF32","alphaMap","debu","cos","stateObject","init","gger","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","attributes","log","map","length","TresGroup","value","attributes-offset","info","668296mckntP","error","TresMeshStandardMaterial","apply","278637wEmaGd","attributes-halfRootAngleCos","warn","823100KGeKHb","toString","computeVertexNormals","attributes-halfRootAngleSin","instances","side","width","84023oVnsVE","input","6114fthsde","table","normalize","2cnVeup","test","Vector4","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","push",'{}.constructor("return this")( )',"InstancedBufferAttribute","chain"];return(C=function(){return t})()}!function(t,n){const e=I,o=C();for(;;)try{if(122570===-parseInt(e(139))/1+parseInt(e(144))/2*(-parseInt(e(129))/3)+-parseInt(e(125))/4+parseInt(e(155))/5*(-parseInt(e(141))/6)+parseInt(e(171))/7+-parseInt(e(158))/8*(-parseInt(e(181))/9)+parseInt(e(132))/10*(parseInt(e(156))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const k=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){k(this,(function(){const t=I,n=new RegExp(t(154)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=H(t(192));n.test(o+t(151))&&e[t(145)](o+t(140))?H():o("0")}))()}();const R=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();R(void 0,(function(){const t=I;let n;try{n=Function(t(175)+t(149)+");")()}catch(r){n=window}const e=n[t(152)]=n.console||{},o=[t(196),t(131),t(124),t(126),"exception",t(142),t(153)];for(let a=0;a<o[t(120)];a++){const n=R[t(162)][t(180)][t(160)](R),r=o[a],i=e[r]||n;n.__proto__=R[t(160)](R),n[t(133)]=i.toString[t(160)](i),e[r]=n}}))();const S=[A(184)],F=["index",A(165),"attributes-uv",A(123),A(177),A(159),A(135),A(130)],D=[A(157)],E=[A(137)],T=p({__name:"grass",props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(a){const c=A;let l,p;const x=([l,p]=h((()=>s({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),l=await l,p(),l),w=a,y=u(Math[c(167)]);function b(n,e){const o=c,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,a=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,i=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,s=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(146)])(r,a,i,s)}function _(t,n){var e=2*y(t/50,n/50);return e+=4*y(t/100,n/100),e+=.2*y(t/10,n/10)}const M=function(n,e){const a=c,i=[],s=[],l=[],u=[],f=[];let p=new(t[a(146)]),h=new(t[a(146)]);const m=-.25;for(let r=0;r<n;r++){const c=Math.random()*e-e/2,v=Math[a(167)]()*e-e/2,d=_(c,v);i[a(148)](c,d,v);let g=Math.PI-Math[a(167)]()*(2*Math.PI);u[a(148)](Math[a(176)](.5*g)),f.push(Math[a(190)](.5*g));let x=new(t[a(166)])(0,1,0),w=x.x*Math[a(176)](g/2),y=x.y*Math[a(176)](g/2),M=x.z*Math[a(176)](g/2),j=Math[a(190)](g/2);p.set(w,y,M,j)[a(143)](),g=.5*Math[a(167)]()+m,x=new(t[a(166)])(1,0,0),w=x.x*Math[a(176)](g/2),y=x.y*Math[a(176)](g/2),M=x.z*Math[a(176)](g/2),j=Math[a(190)](g/2),h[a(179)](w,y,M,j)[a(143)](),p=b(p,h),g=.5*Math[a(167)]()+m,x=new o(0,0,1),w=x.x*Math[a(176)](g/2),y=x.y*Math.sin(g/2),M=x.z*Math.sin(g/2),j=Math[a(190)](g/2),h[a(179)](w,y,M,j)[a(143)](),p=b(p,h),s[a(148)](p.x,p.y,p.z,p.w),r<n/3?l[a(148)](1.8*Math.random()):l[a(148)](Math[a(167)]())}return{offsetsF32:new r(new Float32Array(i),3),orientationsF32:new(t[a(150)])(new Float32Array(s),4),stretchesF32:new(t[a(150)])(new Float32Array(l),1),halfRootAngleCosF32:new r(new Float32Array(f),1),halfRootAngleSinF32:new(t[a(150)])(new Float32Array(u),1)}}(w[c(136)],w[c(138)]),j=new(t[c(173)])(w.bW,w.bH,1,w[c(183)]).translate(0,w.bH/2,0),z=new(t[c(173)])(w[c(138)],w.width,32,32);z[c(185)](new(t[c(166)])(0,1,0));const I=z[c(195)][c(169)];for(let t=0;t<I[c(178)][c(120)];t+=3)I[c(178)][t+1]=_(I[c(178)][t],I[c(178)][t+2]);z[c(195)][c(169)][c(186)]=!0,z[c(134)]();const C=new(f({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new n(.3,.9,0)[c(163)](),bottomColor:new(t[c(182)])(0,.2,0).convertSRGBToLinear()},c(194),c(147),(n=>{const e=c;n[e(137)]=t[e(161)]})));C[c(197)]=x[c(197)],C[c(188)]=x.alphaMap,C.toneMapped=!1;const{onLoop:k}=i();return k((({elapsed:t})=>{const n=c;C.uniforms.time[n(122)]=t/4})),(t,n)=>{const o=c;return m(),v(o(121),null,[d(o(168),{material:g(C)},[d("TresInstancedBufferGeometry",{index:g(j).index,"attributes-position":g(j)[o(195)][o(169)],"attributes-uv":g(j)[o(195)].uv,"attributes-offset":g(M).offsetsF32,"attributes-orientation":g(M).orientationsF32,"attributes-stretch":g(M).stretchesF32,"attributes-halfRootAngleSin":g(M)[o(187)],"attributes-halfRootAngleCos":g(M)[o(172)]},null,8,F)],8,S),d("TresMesh",{position:[0,0,0],geometry:g(z)},[d(o(127),{color:o(164),side:e},null,8,E)],8,D)])}}});function H(t){function n(t){const e=I;if("string"==typeof t)return function(t){}[e(162)]("while (true) {}")[e(128)]("counter");1!==(""+t/t).length||t%20==0?function(){return!0}[e(162)](e(189)+e(193))[e(170)](e(174)):function(){return!1}.constructor(e(189)+e(193))[e(128)](e(191)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const L=O;!function(t,n){const e=O,o=P();for(;;)try{if(631057===parseInt(e(251))/1+-parseInt(e(270))/2+parseInt(e(258))/3+-parseInt(e(262))/4*(-parseInt(e(271))/5)+parseInt(e(257))/6*(-parseInt(e(252))/7)+parseInt(e(261))/8*(parseInt(e(259))/9)+-parseInt(e(249))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[O(269)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function P(){const t=["244494GXRCFH","27rWbeCa",'{}.constructor("return this")( )',"1862768bRxNjG","1892ImhjId","toString","constructor","chain","length","test","table","apply","624302AkTcQa","11975ByHcXf","__proto__","info","gger","bind","grass","exception","counter","input","error","console","trace","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","while (true) {}","5519010zEFnxA","TresPerspectiveCamera","245727JHZYQR","1548141cGDvMn","init","log","prototype","action","18pvqfGJ"];return(P=function(){return t})()}!function(){G(this,(function(){const t=O,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(283),"i"),o=U(t(253));n[t(267)](o+t(265))&&e[t(267)](o+t(279))?U():o("0")}))()}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[O(269)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function O(t,n){const e=P();return(O=function(t,n){return e[t-=248]})(t,n)}B(void 0,(function(){const t=O;let n;try{n=Function("return (function() "+t(260)+");")()}catch(r){n=window}const e=n[t(281)]=n[t(281)]||{},o=[t(254),"warn",t(273),t(280),t(277),t(268),t(282)];for(let a=0;a<o[t(266)];a++){const n=B[t(264)][t(255)][t(275)](B),r=o[a],i=e[r]||n;n[t(272)]=B[t(275)](B),n[t(263)]=i[t(263)][t(275)](i),e[r]=n}}))();const V=d(L(250),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1),q=p({__name:L(276),setup(t){const n=x({alpha:!0,toneMapping:a,windowSize:!0,clearColor:6710886}),e=x({enableDamping:!0,autoRotate:!1});return(t,o)=>(m(),w(g(l),_(M(n)),{default:y((()=>[V,b(g(c),_(M(e)),null,16),(m(),w(j,null,{default:y((()=>[b(T)])),_:1})),(m(),w(j,null,{default:y((()=>[b(g(z),{texture:"https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr"})])),_:1}))])),_:1},16))}});function U(t){function n(t){const e=O;if("string"==typeof t)return function(t){}[e(264)](e(248))[e(269)](e(278));1!==(""+t/t)[e(266)]||t%20==0?function(){return!0}[e(264)]("debugger").call(e(256)):function(){return!1}.constructor("debu"+e(274))[e(269)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{q as default};
