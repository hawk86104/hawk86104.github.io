import{m as e,e as a,a as n}from"./@tresjs.CIKSfeCC1746335712058.js";import{P as r}from"./tweakpane.C0HtAJSg1746335712058.js";import{d as t,b as o,r as i,w as l,s,H as c,o as u,J as m,u as v,h as _,j as p,z as d,f as g,e as x,ak as f,al as h,am as y,m as b,F as S}from"./@vue.DK6ok9LJ1746335712058.js";import{p as z,V as w,d9 as j,bt as k,r as V,ae as D}from"./three.Bj3hPI0l1746335712058.js";import{_ as M}from"./@fesjs.B__Hyo051746335712058.js";import"./postprocessing.Dxg1zmor1746335712058.js";import"./@vueuse.BtSShokC1746335712058.js";import"./vue-router.CeDYLsLY1746335712058.js";import"./lodash-es.BOsRjQhS1746335712058.js";import"./@qlin.q6OWdsQV1746335712058.js";import"./pinia.C9yokyLV1746335712058.js";import"./@babel.BPq7uOAK1746335712058.js";import"./@floating-ui.BFjFSAYt1746335712058.js";import"./@juggle.CcBCnTIR1746335712058.js";const P=["rotation-x"],O=["uniforms","vertexShader","fragmentShader"],T=41,B=t({__name:"basicVolumeRendering",setup(n){const t=window.innerWidth,_=window.innerHeight,p=o(null),d=o(null),g=new z;g.start();const x=(new r).addFolder({title:"Display Settings"}),f=x.addFolder({title:"Cross Section Settings"}),h=new w(.5,.5,.5);f.addBinding(h,"x",{label:"X",min:.02,max:.5,step:.02}),f.addBinding(h,"y",{label:"Y",min:.02,max:.5,step:.02}),f.addBinding(h,"z",{label:"Z",min:.02,max:.5,step:.02}),f.expanded=!0;const{camera:y}=e(),b=i({u_camera:{value:y.value?.position},u_resolution:{value:new w(t,_,1)},u_dt:{value:.004},u_time:{value:0},u_crossSectionSize:{value:h},u_color:{value:1},u_volume:{value:null},u_isoValue:{value:.2},u_alphaVal:{value:.2}}),S=x.addFolder({title:"Algorithm Settings"});S.addBinding(b.u_dt,"value",{label:"dt",min:4e-4,max:.016,step:2e-4}),S.addBinding(b.u_color,"value",{label:"color",min:1,max:3,step:1}),S.addBinding(b.u_alphaVal,"value",{label:"alphaVal",min:.01,max:1,step:.01}),S.addBinding(b.u_isoValue,"value",{label:"isoValue",min:0,max:1,step:.04}),l(d,(e=>{if(e){const a=new j(e,T,T,T);a.format=k,a.minFilter=V,a.magFilter=V,a.wrapT=D,a.needsUpdate=!0,b.u_volume.value=a}}));const{onLoop:M}=a();return M((()=>{b.u_time.value=g.getElapsedTime()})),s((()=>{fetch("/plugins/volumeRendering/image/nucleon_41x41x41_uint8.raw").then((e=>e.arrayBuffer())).then((e=>{const a=new Uint8Array(e),n=new Uint8Array(68921);for(let r=0;r<a.length;r++)n[r]=a[r];d.value=n})).catch((e=>{console.error("Error fetching volume data:",e)}))})),(e,a)=>(u(),c("TresMesh",{ref_key:"meshRef",ref:p,"rotation-x":Math.PI/-2},[a[0]||(a[0]=m("TresSphereGeometry",{args:[1,16,16]},null,-1)),m("TresShaderMaterial",{uniforms:b,vertexShader:v("precision mediump float;\n\nuniform vec3 u_camera;\nuniform vec3 u_resolution;\nuniform float u_time;\n\nvarying vec3 v_hitPos;\nvarying vec3 v_hitPosWorldSpace;\nvarying vec3 v_cameraObjectSpace;\n\nvoid main() {\n  vec3 pos = position;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n\n  v_hitPos = position.xyz;\n\n  v_hitPosWorldSpace = (modelMatrix * vec4(position, 1.0)).xyz;\n\n  v_cameraObjectSpace = (inverse(modelMatrix) * vec4(u_camera, 1.0)).xyz;\n}"),fragmentShader:v("precision mediump int;\nprecision mediump float;\n\nuniform vec3 u_camera;\nuniform vec3 u_resolution;\nuniform mediump sampler3D u_volume;\nuniform vec3 u_crossSectionSize;\nuniform float u_dt;\nuniform float u_time;\nuniform float u_color;\nuniform float u_isoValue;\nuniform float u_alphaVal;\n\nvec3 palette(in float t) {\n  vec3 a = vec3(0.5, 0.5, 0.5);\n  vec3 b = vec3(0.5, 0.5, 0.5);\n  vec3 c = vec3(1.0, 1.0, 1.0);\n  vec3 d = vec3(0.00, 0.33, 0.67);\n\n  return a + b * cos(6.28318 * (c * t + d));\n}\n\nvarying vec3 v_hitPos;\nvarying vec3 v_hitPosWorldSpace;\nvarying vec3 v_cameraObjectSpace;\n\nvec2 intersect_box(vec3 orig, vec3 dir) {\n\n  vec3 box_min = vec3(-u_crossSectionSize);\n  vec3 box_max = vec3(u_crossSectionSize);\n  vec3 inv_dir = 1.0 / dir;\n  vec3 tmin_tmp = (box_min - orig) * inv_dir;\n  vec3 tmax_tmp = (box_max - orig) * inv_dir;\n  vec3 tmin = min(tmin_tmp, tmax_tmp);\n  vec3 tmax = max(tmin_tmp, tmax_tmp);\n  float t0 = max(tmin.x, max(tmin.y, tmin.z));\n  float t1 = min(tmax.x, min(tmax.y, tmax.z));\n  return vec2(t0, t1);\n}\n\nvoid main() {\n  vec3 rayOrigin = vec3(0.0, 0.0, -3.0);\n  rayOrigin = v_cameraObjectSpace;\n\n  vec2 uv = 2.0 * gl_FragCoord.xy / u_resolution.xy - 1.0;\n  vec3 rayDir = normalize(vec3(uv, 1.0));\n  rayDir = normalize(v_hitPos - rayOrigin);\n\n  vec2 t_hit = intersect_box(rayOrigin, rayDir);\n  if (t_hit.x > t_hit.y) {\n    discard;\n  }\n\n  t_hit.x = max(t_hit.x, 0.0);\n\n  float dt = u_dt;\n\n  vec4 color = vec4(0.0);\n\n  vec3 p = rayOrigin + t_hit.x * rayDir + 0.5;\n  for (float t = t_hit.x; t < t_hit.y; t += dt) {\n\n    float textureVal = texture(u_volume, p).r;\n\n    vec4 val_color = vec4(0.0);\n    float val_color_alpha = textureVal * 0.1;\n\n    val_color_alpha = smoothstep(0.0, u_alphaVal, val_color_alpha);\n\n    vec3 red = vec3(1.0, 0.0, 0.0);\n    vec3 white = vec3(1.0);\n    if (abs(u_color - 1.0) <= 0.01) {\n      val_color = vec4(white, val_color_alpha);\n    } else if (abs(u_color - 2.0) <= 0.01) {\n      val_color = vec4(mix(red, white, val_color_alpha), val_color_alpha);\n    } else {\n      val_color = vec4(palette(textureVal), val_color_alpha);\n    }\n\n    color.rgb += (1.0 - color.a) * val_color.a * val_color.rgb;\n    color.a += (1.0 - color.a) * val_color.a;\n\n    if (textureVal > u_isoValue) {\n      float gxLess = texture(u_volume, vec3(p.x - rayDir.x * u_dt, p.y, p.z)).r;\n      float gxMore = texture(u_volume, vec3(p.x + rayDir.x * u_dt, p.y, p.z)).r;\n      float dgx = gxMore - gxLess;\n\n      float gyLess = texture(u_volume, vec3(p.x, p.y - rayDir.y * u_dt, p.z)).r;\n      float gyMore = texture(u_volume, vec3(p.x, p.y + rayDir.y * u_dt, p.z)).r;\n      float dgy = gyMore - gyLess;\n\n      float gzLess = texture(u_volume, vec3(p.x, p.y, p.z - rayDir.z * u_dt)).r;\n      float gzMore = texture(u_volume, vec3(p.x, p.y, p.z + rayDir.z * u_dt)).r;\n      float dgz = gzMore - gzLess;\n      vec3 n = normalize(vec3(dgx, dgy, dgz));\n\n      vec3 lightSource = vec3(1.0);\n      vec3 lightDir = normalize(lightSource);\n      float diffuseStrength = max(dot(n, lightDir), 0.0);\n\n      vec3 viewSource = normalize(rayOrigin);\n      vec3 reflectSource = normalize(reflect(-lightSource, n));\n      float specularStrength = max(0.0, dot(viewSource, reflectSource));\n      specularStrength = pow(specularStrength, 64.0);\n\n      color.rgb = diffuseStrength * val_color.rgb + specularStrength * val_color.rgb;\n      color.rgb *= val_color.rgb;\n      color.a = 0.95;\n      break;\n    }\n\n    if (color.a >= 0.95) {\n      break;\n    }\n\n    p += rayDir * dt;\n  }\n\n  gl_FragColor = color;\n}")},null,8,O)],8,P))}}),F=M(t({__name:"basicVolume",setup(e){const a=i({windowSize:!0,alpha:!0,antialias:!0,autoClear:!1,disableRender:!0}),r=i({enableDamping:!0,enableZoom:!0,enablePan:!0,enableRotate:!0,makeDefault:!0});return(e,t)=>{const o=_("TresCanvas");return u(),c(S,null,[t[3]||(t[3]=m("div",{class:"info"},[m("a",{href:"https://klacansky.com/open-scivis-datasets/skull/skull_256x256x256_uint8.raw",target:"_blank"}," https://klacansky.com/open-scivis-datasets/skull/skull_256x256x256_uint8.raw "),m("br"),d(" 请自行下载数据集, 复制到 /plugins/volumeRendering/image/skull_256x256x256_uint8.raw 并更改文件请求指向和 dim 大小 ")],-1)),p(o,b({clearColor:"#201919"},a),{default:g((()=>[t[0]||(t[0]=m("TresPerspectiveCamera",{fov:75,near:.001,far:1e3,position:[-1,.4,-1],"look-at":[0,0,0],up:[0,1,0]},null,-1)),t[1]||(t[1]=m("TresAmbientLight",{intensity:2},null,-1)),p(v(n),f(h(r)),null,16),(u(),x(y,null,{default:g((()=>[p(B,{position:[0,0,0]})])),_:1})),t[2]||(t[2]=m("TresGridHelper",{args:[50,50],position:[0,-5,0]},null,-1))])),_:1},16)],64)}}}),[["__scopeId","data-v-925b4c37"]]);export{F as default};
