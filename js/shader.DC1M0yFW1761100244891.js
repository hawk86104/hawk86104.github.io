import{_ as e,F as a,K as s,s as n,T as i}from"./@tresjs.DqJWjmrH1761100244891.js";import{P as r}from"./tweakpane.CqZAnw7f1761100244891.js";import{L as o}from"./three-subdivide.ornmaoyc1761100244891.js";import{d as t,a as l,a3 as d,w as u,G as c,o as p,I as m,a9 as f,aa as v,r as g,g as h,b as y,e as M,h as b,H as w,u as T,m as B}from"./@vue.CKlgtJke1761100244891.js";import{bJ as _,aV as x,k as j,V as S,a6 as k,bj as C,bd as V}from"./three.DvmzhRS91761100244891.js";import"./postprocessing.CYU4Fj-U1761100244891.js";import"./@vueuse.mZcBai3M1761100244891.js";const G=["scale"],N=t({__name:"shineShader",props:{srcMesh:{},scale:{default:1.2},color:{default:"#ffff00"},subdivision:{type:Boolean,default:!0},c:{default:1.1},p:{default:1.4},side:{default:x},blending:{default:_}},setup(s){const n=s,i=l(),r={uniforms:{c:{type:"f",value:n.c},p:{type:"f",value:n.p},glowColor:{type:"c",value:new j(n.color)},viewVector:{type:"v3",value:{x:0,y:0,z:0}}},vertexShader:"\n          uniform vec3 viewVector;\n          uniform float c;\n          uniform float p;\n          varying float intensity;\n          void main() {\n            vec3 vNormal = normalize( normalMatrix * normal);\n            vec3 vNormel = normalize( normalMatrix * viewVector);\n            intensity = pow( c - dot(vNormal, vNormel), p );\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0);\n          }\n            ",fragmentShader:"\n          uniform vec3 glowColor;\n          varying float intensity;\n          void main() \n          {\n          \tvec3 glow = glowColor * intensity;\n\t\t\t\t\t\tif(intensity < 1.0){\n            \tgl_FragColor = vec4( glow, 1.0 );\n\t\t\t\t\t\t}\n          }\n        ",side:n.side,transparent:!0,depthWrite:!1,depthTest:!0,blending:n.blending};d(()=>{if(n.srcMesh&&i.value&&!i.value.geometry.attributes.position){let e=n.srcMesh.geometry.clone();n.subdivision&&(e=o.modify(e,2)),i.value.geometry=e,i.value.position.copy(n.srcMesh.position)}n.color&&(r.uniforms.glowColor.value=new j(n.color)),n.c&&(r.uniforms.c.value=n.c),n.p&&(r.uniforms.p.value=n.p)}),u(()=>n.subdivision,e=>{let a=n.srcMesh.geometry.clone();e&&(a=o.modify(a,2)),i.value.geometry=a}),u(()=>n.side,e=>{i.value.material.side=e}),u(()=>n.blending,e=>{i.value.material.blending=e});const{onRender:t}=e(),{camera:g}=a();return t(()=>{g.value&&i.value&&(r.uniforms.viewVector.value=(new S).subVectors(g.value.position,i.value.position))}),(e,a)=>(p(),c("TresMesh",{ref_key:"TSGref",ref:i,scale:n.scale},[m("TresShaderMaterial",f(v(r)),null,16)],8,G))}}),z=["map"],A=["map"],R=t({__name:"shader",setup(e){const a={clearColor:"#222"},o=l(),t=l(),d=l(),u=g({scale:1.6,color:"#00dfff",subdivision:!0,c:1.1,p:1.4,side:x,blending:_}),c=new r({title:"参数",expanded:!0});return c.addBinding(u,"color",{label:"颜色"}),c.addBinding(u,"scale",{label:"大小",min:1,max:3,step:.2}),c.addBinding(u,"subdivision",{label:"边缘处理"}),c.addBinding(u,"c",{label:"c",min:0,max:2,step:.1}),c.addBinding(u,"p",{label:"p",min:0,max:8,step:.2}),c.addBinding(u,"side",{options:{FrontSide:x,BackSide:C,DoubleSide:k}}),c.addBinding(u,"blending",{options:{AdditiveBlending:_,NormalBlending:V}}),(e,r)=>{const l=h("TresCanvas");return p(),y(l,B(a,{"window-size":""}),{default:M(()=>[r[2]||(r[2]=m("TresPerspectiveCamera",{position:[5,5,5]},null,-1)),r[3]||(r[3]=m("TresAmbientLight",{intensity:1},null,-1)),b(T(s)),r[4]||(r[4]=m("TresGridHelper",{args:[10,10]},null,-1)),b(T(n),{path:"./plugins/earthSample/image/earthA/earth.jpg"},{default:M(({state:e})=>[m("TresMesh",{ref_key:"TresMeshRefA",ref:o,position:[-2,1,0]},[r[0]||(r[0]=m("TresSphereGeometry",{args:[1,32,16]},null,-1)),m("TresMeshBasicMaterial",{map:e},null,8,z)],512)]),_:1}),b(N,B({srcMesh:o.value},u),null,16,["srcMesh"]),b(T(n),{path:"./logo.png"},{default:M(({state:e})=>[b(T(i),{ref_key:"TreBoxRef",ref:d,args:[1,1,1],position:[2,1,0]},{default:M(()=>[m("TresMeshBasicMaterial",{map:e},null,8,A)]),_:2},1536)]),_:1}),d.value&&d.value.instance?(p(),y(N,B({key:0,srcMesh:d.value.instance},u),null,16,["srcMesh"])):w("",!0),m("TresMesh",{ref_key:"TresMeshRefB",ref:t,position:[0,1,-2]},[...r[1]||(r[1]=[m("TresBoxGeometry",{args:[1,1,1,1,1]},null,-1),m("TresMeshBasicMaterial",{color:"#0ff"},null,-1)])],512),b(N,B({srcMesh:t.value},u),null,16,["srcMesh"])]),_:1},16)}}});export{R as default};
