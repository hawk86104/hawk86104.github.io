import{_ as t,t as n,V as e,T as o,as as r,ab as i}from"./three.fIUcjaNz1730883607874.js";import{a,e as s,U as c,H as l}from"./@tresjs.C3WO4ZW41730883607874.js";import"./index.CRcgrmtn1730883607874.js";import{a as u}from"./simplex-noise.CIkl0Oqx1730883607874.js";import{C as p}from"./index.D3-O3Ya61730883607874.js";import{d as f,a6 as h,o as m,D as v,J as d,u as g,r as x,f as w,g as y,j as b,aj as _,ak as j,al as z}from"./@vue.Cfu43fwq1730883607874.js";import{_ as M}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.D0KDKneF1730883607874.js";import"./@vueuse.BSum2YDk1730883607874.js";import"./lamina.BHc-4X-Q1730883607874.js";import"./glsl-tokenizer.CHxQ9L2N1730883607874.js";import"./@amap.CXRRqiLY1730883607874.js";import"./glsl-token-descope.ByECRh2K1730883607874.js";import"./glsl-token-depth.CCKMKds01730883607874.js";import"./glsl-token-scope.CzF8fGR-1730883607874.js";import"./glsl-token-properties.CMQOIjIM1730883607874.js";import"./glsl-token-assignments.CFItoVZE1730883607874.js";import"./glsl-token-string.CHMYEvSP1730883607874.js";import"./glsl-token-functions.DmDNMY-Z1730883607874.js";import"./object-hash.c-ODBdIv1730883607874.js";import"./jszip.V4H7zZUl1730883607874.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.BGWOVkfw1730883607874.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.w1HpjkMi1730883607874.js";import"./three-stdlib.oW8T3I_Q1730883607874.js";import"./@fesjs.DQmvwjPe1730883607874.js";import"./vue-router.BDLCs4Ld1730883607874.js";import"./lodash-es.BBTWvufR1730883607874.js";import"./@qlin.BIlp8Yi21730883607874.js";import"./pinia.DKpn0rzI1730883607874.js";import"./vue-demi.Dq6ymT-81730883607874.js";import"./@babel.BBWsvBIa1730883607874.js";import"./@floating-ui.B75jtkXD1730883607874.js";import"./@juggle.BnTvdTVm1730883607874.js";import"./chalk.B3MNILV41730883607874.js";/* empty css                                 */import"./iconify-icon.DK1S_nhj1730883607874.js";import"./@iconify.CkmZGMLx1730883607874.js";import"./dompurify.MwRjsY0L1730883607874.js";import"./oimophysics.B0i2NtyE1730883607874.js";import"./@pmndrs.CQZPv3U_1730883607874.js";import"./three-custom-shader-material.DD5mBNmu1730883607874.js";import"./three.quarks.BwNiiDXj1730883607874.js";import"./quarks.core.C7CDonSm1730883607874.js";import"./tweakpane.BCjFYDHx1730883607874.js";import"./utils.BRn6aWCP1730883607874.js";const A=O;!function(t,n){const e=O,o=D();for(;;)try{if(582439===-parseInt(e(140))/1+-parseInt(e(182))/2+-parseInt(e(130))/3*(-parseInt(e(192))/4)+-parseInt(e(142))/5+-parseInt(e(178))/6+parseInt(e(193))/7*(parseInt(e(200))/8)+-parseInt(e(153))/9*(-parseInt(e(189))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const I=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[O(138)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){I(this,(function(){const t=O,n=new RegExp(t(139)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=T(t(141));n[t(144)](o+t(190))&&e.test(o+"input")?T():o("0")}))()}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[O(138)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();C(void 0,(function(){const t=O,n=function(){let t;try{t=Function('return (function() {}.constructor("return this")( ));')()}catch(n){t=window}return t}(),e=n[t(146)]=n[t(146)]||{},o=[t(132),t(154),t(176),t(184),"exception",t(150),t(168)];for(let r=0;r<o[t(201)];r++){const n=C[t(173)][t(203)][t(164)](C),i=o[r],a=e[i]||n;n[t(145)]=C[t(164)](C),n[t(155)]=a[t(155)][t(164)](a),e[i]=n}}))();const k=[A(191)],S=[A(179),A(205),A(204),A(198),A(148),"attributes-stretch","attributes-halfRootAngleSin",A(159)],R=[A(206)],F=["side"];function D(){const t=["2816418zfMNYg","index","value","Color","692412cgYzSA","halfRootAngleCosF32","error","lookAt","Vector3","#000f00","gger","78160AwdWUH","chain","material","6392kznvQI","13300zZgvSu","grass","alphaMap","counter","PlaneGeometry","attributes-offset","attributes","2504RZlOha","length","halfRootAngleSinF32","prototype","attributes-uv","attributes-position","geometry","TresMesh","push","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","2073MYCOPc","instances","log","stretchesF32","orientationsF32","translate","normalize","array","apply","function *\\( *\\)","462612qafvZe","init","51050hMAcEr","position","test","__proto__","console","convertSRGBToLinear","attributes-orientation","sin","table","call","Vector4","198FiaiXS","warn","toString","computeVertexNormals","stateObject","action","attributes-halfRootAngleCos","set","DoubleSide","TresMeshStandardMaterial","random","bind","cos","InstancedBufferAttribute","string","trace","time","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","debu","joints","constructor","toneMapped","width","info","map"];return(D=function(){return t})()}function O(t,n){const e=D();return(O=function(t,n){return e[t-=130]})(t,n)}const H=f({__name:A(194),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(i){const c=A;let l,f;const x=([l,f]=h((()=>a({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),l=await l,f(),l),w=i,y=u(Math[c(163)]);function b(t,n){const e=t.x*n.w+t.y*n.z-t.z*n.y+t.w*n.x,o=-t.x*n.z+t.y*n.w+t.z*n.x+t.w*n.y,i=t.x*n.y-t.y*n.x+t.z*n.w+t.w*n.z,a=-t.x*n.x-t.y*n.y-t.z*n.z+t.w*n.w;return new r(e,o,i,a)}function _(t,n){var e=2*y(t/50,n/50);return e+=4*y(t/100,n/100),e+=.2*y(t/10,n/10)}const j=function(n,r){const i=c,a=[],s=[],l=[],u=[],p=[];let f=new(t[i(152)]),h=new(t[i(152)]);const m=-.25;for(let o=0;o<n;o++){const c=Math[i(163)]()*r-r/2,v=Math[i(163)]()*r-r/2,d=_(c,v);a[i(208)](c,d,v);let g=Math.PI-Math[i(163)]()*(2*Math.PI);u[i(208)](Math[i(149)](.5*g)),p.push(Math[i(165)](.5*g));let x=new e(0,1,0),w=x.x*Math[i(149)](g/2),y=x.y*Math[i(149)](g/2),j=x.z*Math[i(149)](g/2),z=Math[i(165)](g/2);f[i(160)](w,y,j,z)[i(136)](),g=.5*Math[i(163)]()+m,x=new(t[i(186)])(1,0,0),w=x.x*Math.sin(g/2),y=x.y*Math[i(149)](g/2),j=x.z*Math[i(149)](g/2),z=Math[i(165)](g/2),h[i(160)](w,y,j,z).normalize(),f=b(f,h),g=.5*Math.random()+m,x=new(t[i(186)])(0,0,1),w=x.x*Math.sin(g/2),y=x.y*Math[i(149)](g/2),j=x.z*Math[i(149)](g/2),z=Math[i(165)](g/2),h.set(w,y,j,z)[i(136)](),f=b(f,h),s[i(208)](f.x,f.y,f.z,f.w),o<n/3?l[i(208)](1.8*Math[i(163)]()):l[i(208)](Math[i(163)]())}return{offsetsF32:new o(new Float32Array(a),3),orientationsF32:new(t[i(166)])(new Float32Array(s),4),stretchesF32:new o(new Float32Array(l),1),halfRootAngleCosF32:new(t[i(166)])(new Float32Array(p),1),halfRootAngleSinF32:new o(new Float32Array(u),1)}}(w[c(131)],w[c(175)]),z=new(t[c(197)])(w.bW,w.bH,1,w[c(172)])[c(135)](0,w.bH/2,0),M=new n(w[c(175)],w.width,32,32);M[c(185)](new(t[c(186)])(0,1,0));const I=M.attributes[c(143)];for(let t=0;t<I.array[c(201)];t+=3)I[c(137)][t+1]=_(I[c(137)][t],I.array[t+2]);M[c(199)][c(143)].needsUpdate=!0,M[c(156)]();const C=new(p({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(t[c(181)])(.3,.9,0)[c(147)](),bottomColor:new(t[c(181)])(0,.2,0)[c(147)]()},c(170),c(209),(n=>{const e=c;n.side=t[e(161)]})));C[c(177)]=x.map,C[c(195)]=x[c(195)],C[c(174)]=!1;const{onLoop:D}=s();return D((({elapsed:t})=>{const n=c;C.uniforms[n(169)][n(180)]=t/4})),(n,e)=>{const o=c;return m(),v("TresGroup",null,[d(o(207),{material:g(C)},[d("TresInstancedBufferGeometry",{index:g(z)[o(179)],"attributes-position":g(z).attributes[o(143)],"attributes-uv":g(z)[o(199)].uv,"attributes-offset":g(j).offsetsF32,"attributes-orientation":g(j)[o(134)],"attributes-stretch":g(j)[o(133)],"attributes-halfRootAngleSin":g(j)[o(202)],"attributes-halfRootAngleCos":g(j)[o(183)]},null,8,S)],8,k),d(o(207),{position:[0,0,0],geometry:g(M)},[d(o(162),{color:o(187),side:t[o(161)]},null,8,F)],8,R)])}}});function T(t){function n(t){const e=O;if(typeof t===e(167))return function(t){}[e(173)]("while (true) {}")[e(138)](e(196));1!==(""+t/t)[e(201)]||t%20==0?function(){return!0}.constructor("debu"+e(188))[e(151)](e(158)):function(){return!1}[e(173)](e(171)+e(188))[e(138)](e(157)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const U=q;function q(t,n){const e=B();return(q=function(t,n){return e[t-=455]})(t,n)}!function(t,n){const e=q,o=B();for(;;)try{if(552969===-parseInt(e(455))/1+parseInt(e(467))/2*(parseInt(e(459))/3)+-parseInt(e(456))/4+parseInt(e(478))/5+-parseInt(e(482))/6*(parseInt(e(466))/7)+-parseInt(e(473))/8+-parseInt(e(480))/9*(-parseInt(e(490))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const E=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(485)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){E(this,(function(){const t=q,n=new RegExp(t(481)),e=new RegExp(t(477),"i"),o=G("init");n[t(457)](o+t(479))&&e[t(457)](o+t(484))?G():o("0")}))()}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(485)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function B(){const t=["1410IOwHhJ","exception","error","12203WmBBZL","4152552UJrYuH","test","counter","123LvisKQ","action","trace","constructor","debu","string","toString","7bCRRvL","42222SnIUFg","prototype","info","TresPerspectiveCamera","length","bind","1678880seGmxT","table","console","call","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","4207015CeOuXU","chain","73989CUzJcq","function *\\( *\\)","6317670MpYtuW","gger","input","apply","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","__proto__","grass","return (function() "];return(B=function(){return t})()}L(void 0,(function(){const t=q,n=function(){const t=q;let n;try{n=Function(t(489)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(475)]=n[t(475)]||{},o=["log","warn",t(469),t(492),t(491),t(474),t(461)];for(let r=0;r<o[t(471)];r++){const n=L.constructor[t(468)][t(472)](L),i=o[r],a=e[i]||n;n[t(487)]=L[t(472)](L),n[t(465)]=a[t(465)][t(472)](a),e[i]=n}}))();const P=f({__name:U(488),setup(t){const n=x({alpha:!0,toneMapping:i,windowSize:!0,clearColor:6710886}),e=x({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=q;return m(),w(g(l),_(j(n)),{default:y((()=>[o[0]||(o[0]=d(r(470),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),b(g(c),_(j(e)),null,16),(m(),w(z,null,{default:y((()=>[b(H)])),_:1})),(m(),w(z,null,{default:y((()=>[b(g(M),{texture:r(486)})])),_:1}))])),_:1},16)}}});function G(t){function n(t){const e=q;if(typeof t===e(464))return function(t){}[e(462)]("while (true) {}").apply(e(458));1!==(""+t/t)[e(471)]||t%20==0?function(){return!0}[e(462)](e(463)+e(483))[e(476)](e(460)):function(){return!1}[e(462)](e(463)+e(483))[e(485)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{P as default};
