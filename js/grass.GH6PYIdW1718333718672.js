var lt=Object.defineProperty;var V=Object.getOwnPropertySymbols;var ct=Object.prototype.hasOwnProperty,ut=Object.prototype.propertyIsEnumerable;var Y=(i,o,a)=>o in i?lt(i,o,{enumerable:!0,configurable:!0,writable:!0,value:a}):i[o]=a,U=(i,o)=>{for(var a in o||(o={}))ct.call(o,a)&&Y(i,a,o[a]);if(V)for(var a of V(o))ut.call(o,a)&&Y(i,a,o[a]);return i};import{aX as ht,aB as ft,bo as pt,a5 as q,aH as mt,bk as dt,bB as Q,ba as P,aD as W,o as B,c as vt,a1 as A,T as s,at as $,bp as E,cv as z,ad as xt,a6 as X,b7 as gt,C as G,J as H,ae as J,af as Z,b8 as wt,a as I,ag as bt,ak as K}from"./vendor.V7oUbPUv1718333718672.js";import"./vanilla.pEH4SlE_1718333718672.js";import{_ as yt}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.ngQxEa0d1718333718672.js";import{a as _t}from"./simplex-noise.9SB0H76L1718333718672.js";import"./vanilla.esm.5.5.0.55F13Ysq1718333718672.js";import"./index.iV2LpLfl1718333718672.js";import"./_commonjsHelpers.5-cIlDoe1718333718672.js";import"./object_hash.CiQf2gtE1718333718672.js";import"./_commonjs-dynamic-modules.h-SxKiO41718333718672.js";import"./utils.-ZTfExPV1718333718672.js";import"./RGBELoader.2ew6B1we1718333718672.js";function Mt(i,o,a,p){const r=class extends ft{constructor(d={}){const C=Object.entries(i);super({uniforms:C.reduce((u,[m,f])=>{const v=pt.clone({[m]:{value:f}});return U(U({},u),v)},{}),vertexShader:o,fragmentShader:a}),this.key="",C.forEach(([u])=>Object.defineProperty(this,u,{get:()=>this.uniforms[u].value,set:m=>this.uniforms[u].value=m})),Object.assign(this,d),p&&p(this)}};return r.key=ht.generateUUID(),r}const zt=["material"],At=["index","attributes-position","attributes-uv","attributes-offset","attributes-orientation","attributes-stretch","attributes-halfRootAngleSin","attributes-halfRootAngleCos"],Ct=["geometry"],St=["side"],Dt=q({__name:"grass",props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(i){let o,a;const p=([o,a]=mt(()=>dt({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"})),o=await o,a(),o),r=i,d=_t(Math.random);function C(t,e){const h=[],D=[],w=[],R=[],L=[];let c=new E,F=new E;const T=-.25,O=.25;for(let k=0;k<t;k++){const N=Math.random()*e-e/2,j=Math.random()*e-e/2,rt=m(N,j);h.push(N,rt,j);let n=Math.PI-Math.random()*(2*Math.PI);R.push(Math.sin(.5*n)),L.push(Math.cos(.5*n));let l=new P(0,1,0),b=l.x*Math.sin(n/2),y=l.y*Math.sin(n/2),_=l.z*Math.sin(n/2),M=Math.cos(n/2);c.set(b,y,_,M).normalize(),n=Math.random()*(O-T)+T,l=new P(1,0,0),b=l.x*Math.sin(n/2),y=l.y*Math.sin(n/2),_=l.z*Math.sin(n/2),M=Math.cos(n/2),F.set(b,y,_,M).normalize(),c=u(c,F),n=Math.random()*(O-T)+T,l=new P(0,0,1),b=l.x*Math.sin(n/2),y=l.y*Math.sin(n/2),_=l.z*Math.sin(n/2),M=Math.cos(n/2),F.set(b,y,_,M).normalize(),c=u(c,F),D.push(c.x,c.y,c.z,c.w),k<t/3?w.push(Math.random()*1.8):w.push(Math.random())}const ot=new z(new Float32Array(h),3),at=new z(new Float32Array(D),4),nt=new z(new Float32Array(w),1),st=new z(new Float32Array(L),1),it=new z(new Float32Array(R),1);return{offsetsF32:ot,orientationsF32:at,stretchesF32:nt,halfRootAngleCosF32:st,halfRootAngleSinF32:it}}function u(t,e){const h=t.x*e.w+t.y*e.z-t.z*e.y+t.w*e.x,D=-t.x*e.z+t.y*e.w+t.z*e.x+t.w*e.y,w=t.x*e.y-t.y*e.x+t.z*e.w+t.w*e.z,R=-t.x*e.x-t.y*e.y-t.z*e.z+t.w*e.w;return new E(h,D,w,R)}function m(t,e){var h=2*d(t/50,e/50);return h+=4*d(t/100,e/100),h+=.2*d(t/10,e/10),h}const f=C(r.instances,r.width),v=new Q(r.bW,r.bH,1,r.joints).translate(0,r.bH/2,0),x=new Q(r.width,r.width,32,32);x.lookAt(new P(0,1,0));const S=x.attributes.position;for(let t=0;t<S.array.length;t+=3)S.array[t+1]=m(S.array[t],S.array[t+2]);x.attributes.position.needsUpdate=!0,x.computeVertexNormals();const tt=Mt({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new W(.3,.9,0).convertSRGBToLinear(),bottomColor:new W(0,.2,0).convertSRGBToLinear()},"   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n	      #include <colorspace_fragment>\n      }",t=>{t.side=$}),g=new tt;g.map=p.map,g.alphaMap=p.alphaMap,g.toneMapped=!1;const{onLoop:et}=xt();return et(({elapsed:t})=>{g.uniforms.time.value=t/4}),(t,e)=>(B(),vt("TresGroup",null,[A("TresMesh",{material:s(g)},[A("TresInstancedBufferGeometry",{index:s(v).index,"attributes-position":s(v).attributes.position,"attributes-uv":s(v).attributes.uv,"attributes-offset":s(f).offsetsF32,"attributes-orientation":s(f).orientationsF32,"attributes-stretch":s(f).stretchesF32,"attributes-halfRootAngleSin":s(f).halfRootAngleSinF32,"attributes-halfRootAngleCos":s(f).halfRootAngleCosF32},null,8,At)],8,zt),A("TresMesh",{position:[0,0,0],geometry:s(x)},[A("TresMeshStandardMaterial",{color:"#000f00",side:$},null,8,St)],8,Ct)]))}}),Rt=A("TresPerspectiveCamera",{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1),Nt=q({__name:"grass",setup(i){const o=X({alpha:!0,toneMapping:gt,windowSize:!0,clearColor:6710886}),a=X({enableDamping:!0,autoRotate:!1});return(p,r)=>(B(),G(s(wt),J(Z(o)),{default:H(()=>[Rt,I(s(bt),J(Z(a)),null,16),(B(),G(K,null,{default:H(()=>[I(Dt)]),_:1})),(B(),G(K,null,{default:H(()=>[I(s(yt),{texture:"https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr"})]),_:1}))]),_:1},16))}});export{Nt as default};
