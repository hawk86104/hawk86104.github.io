import{m as t,e as n,b as e,U as o}from"./@tresjs.8MtVPQyb1736160428509.js";import{_ as r,av as s,s as a,$ as i,n as l,A as c,b7 as u,cy as v}from"./three.rmsIv-u_1736160428509.js";import{P as f}from"./tweakpane.yHWGBmom1736160428509.js";import{d as p,a6 as m,e as d,o as g,f as x,g as h,m as y,J as I,j as b,aj as _,ak as S,u as U,al as w}from"./@vue.4u_eOGex1736160428509.js";import{_ as P}from"./@fesjs.pVksQyts1736160428509.js";import"./@vueuse.GObPVvIB1736160428509.js";import"./vue-router.jVp56Lac1736160428509.js";import"./lodash-es.kYt-_xTG1736160428509.js";import"./@qlin.yHhFDldE1736160428509.js";import"./pinia.F-Vnosig1736160428509.js";import"./vue-demi.C4xddsk91736160428509.js";import"./@floating-ui.BPbuo5Gx1736160428509.js";import"./@juggle.7yjBMqoW1736160428509.js";!function(t,n){const e=L,o=E();for(;;)try{if(771564===-parseInt(e(331))/1*(parseInt(e(300))/2)+-parseInt(e(358))/3+parseInt(e(321))/4+-parseInt(e(328))/5+-parseInt(e(355))/6*(parseInt(e(314))/7)+-parseInt(e(316))/8+-parseInt(e(309))/9*(-parseInt(e(318))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const D=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(313)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function E(){const t=["message","4710328MRhykD","now","40kjpkrQ","Vector4","hasOwnProperty","2034816piybAN","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","chain","ShaderMaterial","console","name","isArray","463920KDlVLU","test","Matrix4","607XWTYlo","v3v","onabort","debu","bind","info","object","action","while (true) {}",'" load was aborted.',"responseText","\" couldn't be loaded.","init","stateObject","value","counter","index","constructor","gger","call",'Shader "',"input","lastIndex","Texture","6qAvESa","function *\\( *\\)","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","3435519lftLym","type","Vector3","get","onerror","Vector2","exec","toString","2834sQvhKA","WagnerLoadShaderException","onload","exception","Matrix2","Matrix3","__proto__","string","length","7845219JNLMkN",'{}.constructor("return this")( )',"random","table","apply","3759259NHEycy"];return(E=function(){return t})()}!function(){D(this,(function(){const t=L,n=new RegExp(t(356)),e=new RegExp(t(357),"i"),o=F(t(343));n.test(o+t(323))&&e[t(329)](o+t(352))?F():o("0")}))()}();const M=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(313)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();M(void 0,(function(){const t=L;let n;try{n=Function("return (function() "+t(310)+");")()}catch(r){n=window}const e=n[t(325)]=n.console||{},o=["log","warn",t(336),"error",t(303),t(312),"trace"];for(let s=0;s<o[t(308)];s++){const n=M[t(348)].prototype[t(335)](M),r=o[s],a=e[r]||n;n[t(306)]=M[t(335)](M),n.toString=a[t(299)][t(335)](a),e[r]=n}}))();function A(t,n,e){const o=L;if(typeof t!==o(337)||null===t)return t;const r=Array[o(327)](t)?[]:{};for(const s in t)t[o(320)](s)&&(r[s]=A(t[s])),s==n&&(r[n]=e);return r}function L(t,n){const e=E();return(L=function(t,n){return e[t-=295]})(t,n)}function F(t){function n(t){const e=L;if(typeof t===e(307))return function(t){}[e(348)](e(339))[e(313)](e(346));1!==(""+t/t).length||t%20==0?function(){return!0}[e(348)]("debu"+e(349))[e(350)](e(338)):function(){return!1}[e(348)](e(334)+e(349))[e(313)](e(344)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const C=z;function z(t,n){const e=T();return(z=function(t,n){return e[t-=378]})(t,n)}function T(){const t=["pass","resolution","__proto__","Scene","read","1080185welhyu","write","loadShadervf","Pass","console","splice","exception","magFilter","onWindowResize","length","gger","log","minFilter","CopyPass","wrapS","clone","function *\\( *\\)","ClampToEdgeWrapping","Stack","Reset","5420yhqTYZ","passItems","scale","action","debu","775704mlFwyI","tInput","string","makeOrthographic","1499604vyRFiS","shader","PlaneGeometry","while (true) {}","5356lEaPxB","front",'{}.constructor("return this")( )',"render","ShaderMaterial","copyPass","height","params","uuid","19LJLKsP","time","LinearFilter","warn","near","back","value","now","toString","14031Tvlygc","WebGLRenderTarget","settings","innerWidth","info","swapBuffers","3ZgGjkH","material","wrapT","set","scene","type","add","setSize","RGBFormat","toScreen","RGBAFormat","removePass","renderer","innerHeight","startTime","far","camera","uniforms","77KicaIF","OrthographicCamera","width","call","bind","makePerspective","table","setRenderTarget","test","6454980heMQgu","6999648rsxavH","apply","useRGBA","constructor","18TlDLhJ","stencilBuffer","error","counter","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","chain","quad","prototype","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }"];return(T=function(){return t})()}!function(t,n){const e=z,o=T();for(;;)try{if(487674===parseInt(e(392))/1*(parseInt(e(383))/2)+parseInt(e(407))/3*(-parseInt(e(478))/4)+-parseInt(e(453))/5*(-parseInt(e(439))/6)+-parseInt(e(434))/7+parseInt(e(435))/8+parseInt(e(401))/9*(-parseInt(e(473))/10)+-parseInt(e(425))/11*(-parseInt(e(379))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const N=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[z(436)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){N(this,(function(){const t=z,n=new RegExp(t(469)),e=new RegExp(t(443),"i"),o=j("init");n.test(o+t(444))&&e[t(433)](o+"input")?j():o("0")}))()}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();G(void 0,(function(){const t=z;let n;try{n=Function("return (function() "+t(385)+");")()}catch(r){n=window}const e=n[t(457)]=n[t(457)]||{},o=[t(464),t(395),t(405),t(441),t(459),t(431),"trace"];for(let s=0;s<o[t(462)];s++){const n=G.constructor[t(446)].bind(G),r=o[s],a=e[r]||n;n[t(450)]=G[t(429)](G),n[t(400)]=a[t(400)][t(429)](a),e[r]=n}}))();class R{constructor(t,n){const e=z;this.width=1,this.height=1,this.settings=n||{},this[e(437)]=this[e(403)][e(437)]||!1,this[e(419)]=t,this[e(388)]=this[e(466)](this[e(403)]),this.scene=new(r[e(451)]),this[e(445)]=new a(new(r[e(381)])(1,1),new i),this.scene[e(413)](this[e(445)]),this[e(423)]=new(r[e(426)])(1,1,1,1,-1e4,1e4),this[e(384)]=new(r[e(402)])(1,1,{minFilter:void 0!==this[e(403)][e(465)]?this[e(403)][e(465)]:r[e(394)],magFilter:void 0!==this[e(403)][e(460)]?this.settings[e(460)]:l,wrapS:void 0!==this[e(403)].wrapS?this[e(403)][e(467)]:r[e(470)],wrapT:void 0!==this[e(403)].wrapT?this[e(403)][e(409)]:r[e(470)],format:this[e(437)]?r[e(417)]:r[e(415)],type:void 0!==this[e(403)][e(412)]?this[e(403)][e(412)]:c,stencilBuffer:void 0===this.settings[e(440)]||this[e(403)][e(440)]}),this[e(397)]=this.front[e(468)](),this[e(421)]=Date[e(399)](),this.passes={},this[e(471)]={passItems:[],passes:[]}}addPass(t,n,e,o){const r=z;this[r(455)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(380)]};this[r(471)][r(474)].push(s)}[C(418)](t){const n=C;for(let e=this[n(471)][n(474)][n(462)]-1;e>=0;e--)this[n(471)].passItems[e][n(391)]===parseInt(t)&&this[n(471)][n(474)][n(458)](e,1);console.log(this[n(471)].passItems)}CopyPass(){const t=C;this[t(456)].call(this);return this[t(455)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[C(455)](t){const n=C,e=n(447);return this.shader=function(t,n){const e=L,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,a=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,i={sampler2D:{type:"t",value:()=>new(r[L(354)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[L(297)])},vec3:{type:"v3",value:()=>new(r[L(360)])},vec4:{type:"v4",value:()=>new(r[L(319)])},bvec2:{type:"v2",value:()=>new(r[L(297)])},bvec3:{type:"v3",value:()=>new(r[L(360)])},bvec4:{type:"v4",value:()=>new s},ivec2:{type:"v2",value:()=>new(r[L(297)])},ivec3:{type:"v3",value:()=>new(r[L(360)])},ivec4:{type:"v4",value:()=>new(r[L(319)])},mat2:{type:"v2",value:()=>new(r[L(304)])},mat3:{type:"v3",value:()=>new(r[L(305)])},mat4:{type:"v4",value:()=>new(r[L(330)])}},l={float:{type:"fv",value:()=>[]},vec3:{type:e(332),value:()=>[]}};let c;const u={resolution:{type:"v2",value:new(r[e(297)])(1,1),default:!0},time:{type:"f",value:Date[e(317)](),default:!0},tInput:{type:"t",value:new(r[e(354)]),default:!0}};let v,f;for(;null!==(c=o[e(298)](n));)c[e(347)]===o[e(353)]&&o[e(353)]++,v=c[1],f=c[2],u[f]={type:i[v][e(359)],value:i[v][e(345)]()};for(;null!==(c=a[e(298)](n));)c[e(347)]===o.lastIndex&&o[e(353)]++,v=c[1],f=c[2],c[3],u[f]={type:l[v][e(359)],value:l[v][e(345)]()};return new(r[e(324)])({uniforms:u,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(380)]}Pass(t){this[C(380)]=null,this.params={}}[C(472)](){const t=C;this[t(452)]=this[t(384)],this.write=this[t(397)]}[C(461)](t,n){const e=C,o=window[e(404)],r=window[e(420)];t[e(414)](1*o,1*r),n.projectionMatrix[e(430)](70,o/r,n.near,n[e(422)]),this[e(414)](o,r);return this.getOfflineTexture(o,r,!0)}[C(414)](t,n){const e=C;this.width=t,this[e(389)]=n,this[e(423)].projectionMatrix[e(378)](t/-2,t/2,n/2,n/-2,this[e(423)][e(396)],this[e(423)][e(422)]),this[e(445)][e(475)][e(410)](t,n,1),this[e(384)][e(414)](t,n),this[e(397)][e(414)](t,n)}getOfflineTexture(t,n,e){const o=C;return new(r[o(402)])(t,n,{minFilter:r[o(394)],magFilter:r[o(394)],format:e?u:r[o(415)]})}[C(386)](t,n,e,o){const r=C;this[r(419)][r(432)](this[r(454)]),this.renderer[r(386)](t,n),o||this[r(406)]()}[C(406)](){const t=C,n=this[t(454)];this[t(454)]=this[t(452)],this[t(452)]=n}[C(448)](){const t=C;for(let n=0;n<this[t(471)][t(474)][t(462)];n++){const e=this[t(471)][t(474)][n][t(380)],o=this.Stack.passItems[n][t(390)];if(this[t(419)][t(432)](this[t(454)]),e instanceof r[t(387)]){this[t(445)].material=e,this.quad.material[t(424)][t(479)][t(398)]=this.read.texture,this[t(445)][t(408)].uniforms[t(449)][t(398)].set(this[t(427)],this.height),this[t(445)][t(408)][t(424)][t(393)][t(398)]=.001*(Date[t(399)]()-this[t(421)]);for(const n in o)this[t(445)][t(408)][t(424)][n][t(398)]=o[n];this[t(419)][t(386)](this[t(411)],this[t(423)]),this[t(406)]()}}}[C(416)](t,n){const e=C;this[e(419)].setRenderTarget(null),this[e(445)].material=this[e(388)],this[e(445)].material.uniforms.tInput.value=this.read.texture,this[e(445)][e(408)].uniforms[e(449)][e(398)][e(410)](this[e(427)],this.height),this[e(419)][e(386)](this[e(411)],this[e(423)])}}function j(t){function n(t){const e=z;if(typeof t===e(480))return function(t){}.constructor(e(382))[e(436)](e(442));1!==(""+t/t).length||t%20==0?function(){return!0}.constructor(e(477)+e(463))[e(428)](e(476)):function(){return!1}[e(438)](e(477)+e(463))[e(436)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const B="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",V=H;!function(t,n){const e=H,o=X();for(;;)try{if(413225===parseInt(e(379))/1+parseInt(e(376))/2*(parseInt(e(312))/3)+-parseInt(e(304))/4+parseInt(e(340))/5*(-parseInt(e(331))/6)+-parseInt(e(357))/7*(parseInt(e(334))/8)+parseInt(e(308))/9+-parseInt(e(365))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[H(303)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){O(this,(function(){const t=H,n=new RegExp("function *\\( *\\)"),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=W(t(306));n[t(370)](o+"chain")&&e[t(370)](o+t(300))?W():o("0")}))()}();const k=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function H(t,n){const e=X();return(H=function(t,n){return e[t-=300]})(t,n)}k(void 0,(function(){const t=H,n=function(){const t=H;let n;try{n=Function(t(321)+t(358)+");")()}catch(e){n=window}return n}(),e=n[t(366)]=n.console||{},o=[t(385),"warn",t(320),t(349),t(333),t(352),t(362)];for(let r=0;r<o[t(373)];r++){const n=k[t(353)][t(378)][t(323)](k),s=o[r],a=e[s]||n;n[t(384)]=k.bind(k),n[t(360)]=a[t(360)][t(323)](a),e[s]=n}}))();function W(t){function n(t){const e=H;if(typeof t===e(336))return function(t){}[e(353)](e(354))[e(303)](e(348));1!==(""+t/t)[e(373)]||t%20==0?function(){return!0}[e(353)](e(314)+"gger")[e(367)](e(381)):function(){return!1}.constructor("debu"+e(301))[e(303)](e(305)),n(++t)}try{if(t)return n;n(0)}catch(e){}}function X(){const t=["table","constructor","while (true) {}","addBlade","material","838628EVFpyK",'{}.constructor("return this")( )',"postProcessing","toString","add","trace","Mesh","SEPIAPass","9417170oeMbGM","console","call","MeshPhongMaterial","toScreen","test","click","VIGNETTE2Pass","length","removePass","map","24lhAjMk","DENOISEPass","prototype","575323kDVOvO","FREICHENPass","action","change","dispose","__proto__","log","input","gger","addFolder","apply","277224BLtUhM","stateObject","init","onWindowResize","5733738pVdEyz","关闭通道","SNOISEPass","新增通道","205557opkBwl","text","debu","plugins/postProcessing/image/1324.jpg","VIGNETTE1Pass","castShadow","label","values","info","return (function() ","translate","bind","receiveShadow","target","InvertPass","BoxGeometry","DOTPass","BOXBLURPass","push","981162lOCzmQ","FXAAPass","exception","8PeUSPJ","list","string","TOONPass","CIRCULARPass","value","15rADZMT","title","Vector2","RGBPass","pass","BufferGeometry","plugins/postProcessing/image/1324-normal.jpg","random","counter","error","CGAPass","SOBELPass"];return(X=function(){return t})()}const q=P(p({__name:V(359),async setup(o){const s=V;let a,i;const{camera:l,renderer:c,scene:u,sizes:p}=t();for(var d=new(r[s(345)]),g=[],x=0;x<100;x++){var h=new(r[s(327)])(100,100,100);h[s(322)](1500*Math.random(),1500*Math[s(347)](),1500*Math[s(347)]()),g[s(330)](h)}d=v(g);const y=([a,i]=m((()=>e({map:s(315)}))),a=await a,i(),a),I=([a,i]=m((()=>e({map:s(346)}))),a=await a,i(),a);var b=new(r[s(368)])({map:y.map,normalMap:I[s(375)],normalScale:new(r[s(342)])(.8,-.8),shininess:100}),_=new(r[s(363)])(d,b);_[s(317)]=!0,_[s(324)]=!0,u[s(339)][s(361)](_);const S=new R(c[s(339)],{useRGBA:!0}),U=new f;let w=null,P=[{text:s(326),value:{InvertPass:B}},{text:s(332),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:s(364),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:s(310),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:s(329),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:s(377),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:s(350),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:I[s(375)]}}},{text:s(351),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:s(343),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:s(328),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(338),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:"POISSONPass",value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:s(316),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(372),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:s(380),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:s(337),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],D=s(326),E=B,M=null;U[s(355)]({view:s(335),label:"后处理类型",options:P,value:""}).on(s(382),(t=>{w=t[s(339)]}));const L=U.addButton({title:"新增",label:s(311)});let F=0;L.on("click",(t=>{const n=s;D=Object.keys(w)[0],E=Object[n(319)](w)[0],M=Object[n(319)](w)[1];let e=F++,o=U[n(302)]({title:D});for(const s in M){let t=M[s];o[n(355)]({view:n(313),label:s,parse:t=>String(t),value:t})}o.addButton({title:"移除~"+e,label:n(309)}).on(n(371),(t=>{const e=n;let o=t[e(325)][e(341)].split("~")[1];S[e(374)](o)})).on(n(371),(()=>{o[n(383)]()}));let r=A(M,t[n(325)][n(318)],t[n(339)]);S.addPass(D,E,r,e)})),S[s(307)](c[s(339)],l.value);const{onLoop:C}=n();return C((({delta:t})=>{const n=s;_&&(c.value.autoClearColor=!0,S.Reset(),_[n(356)]=b,S.render(u[n(339)],l.value),S[n(344)](),S[n(369)](u.value,l[n(339)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),Z=K;!function(t,n){const e=K,o=Y();for(;;)try{if(799626===-parseInt(e(530))/1+parseInt(e(528))/2*(-parseInt(e(508))/3)+-parseInt(e(525))/4+-parseInt(e(531))/5+-parseInt(e(500))/6+-parseInt(e(529))/7*(-parseInt(e(514))/8)+-parseInt(e(526))/9*(-parseInt(e(499))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const $=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){$(this,(function(){const t=K,n=new RegExp("function *\\( *\\)"),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=nt("init");n[t(505)](o+t(532))&&e.test(o+t(501))?nt():o("0")}))()}();const Q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();Q(void 0,(function(){const t=K,n=function(){const t=K;let n;try{n=Function(t(522)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(521)]=n[t(521)]||{},o=[t(515),t(524),t(534),"error",t(510),"table",t(513)];for(let r=0;r<o.length;r++){const n=Q.constructor[t(533)].bind(Q),s=o[r],a=e[s]||n;n.__proto__=Q[t(527)](Q),n[t(503)]=a[t(503)][t(527)](a),e[s]=n}}))();const J={ref:Z(516),position:[600,850,-1500],fov:45,near:.1,far:1e5};function K(t,n){const e=Y();return(K=function(t,n){return e[t-=498]})(t,n)}function Y(){const t=["info","while (true) {}","TresCanvas","action","stateObject","150pvsMRO","4752276wljfWF","input","length","toString","counter","test","TresDirectionalLight","manual","3VUGRQO","apply","exception","constructor","TresPerspectiveCamera","trace","6032968GAGLEy","log","perspectiveCameraRef","postProcessingEditor","debu","#000000","string","console","return (function() ","TresAmbientLight","warn","4830500QJDTov","2066499EUDXXb","bind","2177242dVuehS","14zjWiLf","280109GbMjaQ","3921900tZXcrt","chain","prototype"];return(Y=function(){return t})()}const tt=p({__name:Z(517),setup(t){const e=Z,r={clearColor:e(519),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(507)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=d(a(536));return g(),x(i,y(r,{"window-size":""}),{default:h((()=>[I(a(512),J,null,512),b(U(o),_(S(s)),null,16),n[0]||(n[0]=I(a(523),{color:"#ffffff",intensity:2},null,-1)),n[1]||(n[1]=I(a(506),{position:[100,100,0],intensity:2,color:"#ffffff"},null,-1)),(g(),x(w,null,{default:h((()=>[b(q)])),_:1}))])),_:1},16)}}});function nt(t){function n(t){const e=K;if(typeof t===e(520))return function(t){}[e(511)](e(535))[e(509)](e(504));1!==(""+t/t)[e(502)]||t%20==0?function(){return!0}[e(511)](e(518)+"gger").call(e(537)):function(){return!1}[e(511)]("debugger").apply(e(498)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{tt as default};
