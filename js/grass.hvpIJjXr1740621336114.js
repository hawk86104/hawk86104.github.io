import{_ as t,s as n,C as e,b as o,T as r,ai as a}from"./three.sXv6UbbL1740621336114.js";import{e as i,a as s,o as c,f as l}from"./@tresjs.Td0X-dew1740621336114.js";import"./index.5Kkyk58Z1740621336114.js";import{c as u}from"./simplex-noise.jB2HxhHB1740621336114.js";import{C as f}from"./index.e5z5kfXG1740621336114.js";import{d as p,a3 as h,o as m,H as d,N as v,u as g,r as x,f as y,g as w,j as b,aj as _,ak as M,al as j}from"./@vue.NRI7TcgI1740621336114.js";import{_ as z}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.iYU3CfV81740621336114.js";import"./@vueuse.cgJUSr_21740621336114.js";import"./lamina._YitRCeI1740621336114.js";import"./glsl-tokenizer.PUJ8Pca51740621336114.js";import"./@amap.xyvkHt4K1740621336114.js";import"./glsl-token-descope.aXHURY1l1740621336114.js";import"./glsl-token-depth.KDd5oelN1740621336114.js";import"./glsl-token-scope.bgsqgViG1740621336114.js";import"./glsl-token-properties.JMAz5SDE1740621336114.js";import"./glsl-token-assignments.WjINF5jr1740621336114.js";import"./glsl-token-string.r5l7ANyy1740621336114.js";import"./glsl-token-functions.bmVt8-BI1740621336114.js";import"./object-hash.xF-1It9Z1740621336114.js";import"./jszip.nUGSSS5e1740621336114.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.BEsictSm1740621336114.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.HozReVbT1740621336114.js";import"./three-stdlib.HmEywukp1740621336114.js";import"./@pmndrs.S4rKZ8vm1740621336114.js";import"./utils.OI2c57aP1740621336114.js";const I=S;!function(t,n){const e=S,o=B();for(;;)try{if(534966===parseInt(e(485))/1*(-parseInt(e(478))/2)+-parseInt(e(513))/3+-parseInt(e(547))/4*(-parseInt(e(531))/5)+-parseInt(e(471))/6*(-parseInt(e(499))/7)+parseInt(e(506))/8*(-parseInt(e(528))/9)+parseInt(e(468))/10+parseInt(e(520))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[S(466)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){A(this,(function(){const t=S,n=new RegExp(t(472)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=T(t(507));n.test(o+t(542))&&e[t(525)](o+t(509))?T():o("0")}))()}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function S(t,n){const e=B();return(S=function(t,n){return e[t-=465]})(t,n)}C(void 0,(function(){const t=S;let n;try{n=Function(t(514)+t(469)+");")()}catch(r){n=window}const e=n[t(477)]=n.console||{},o=[t(486),t(500),t(487),t(522),t(475),t(473),t(533)];for(let a=0;a<o[t(480)];a++){const n=C[t(527)][t(508)][t(539)](C),r=o[a],i=e[r]||n;n[t(476)]=C[t(539)](C),n[t(540)]=i[t(540)].bind(i),e[r]=n}}))();const k=[I(502)],D=[I(484),I(534),I(512),I(532),I(521),"attributes-stretch",I(492),I(470)],F=[I(495)],R=[I(518)],H=p({__name:I(489),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(a){const c=I;let l,p;const x=([l,p]=h((()=>s({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),l=await l,p(),l),y=a,w=u(Math.random);function b(n,e){const o=S,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,a=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,i=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,s=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(488)])(r,a,i,s)}function _(t,n){var e=2*w(t/50,n/50);return e+=4*w(t/100,n/100),e+=.2*w(t/10,n/10)}const M=function(n,e){const a=S,i=[],s=[],c=[],l=[],u=[];let f=new(t[a(488)]),p=new(t[a(488)]);const h=-.25;for(let r=0;r<n;r++){const m=Math.random()*e-e/2,d=Math[a(503)]()*e-e/2,v=_(m,d);i.push(m,v,d);let g=Math.PI-Math[a(503)]()*(2*Math.PI);l[a(483)](Math[a(529)](.5*g)),u.push(Math[a(517)](.5*g));let x=new(t[a(519)])(0,1,0),y=x.x*Math.sin(g/2),w=x.y*Math[a(529)](g/2),M=x.z*Math[a(529)](g/2),j=Math.cos(g/2);f[a(496)](y,w,M,j)[a(465)](),g=.5*Math.random()+h,x=new(t[a(519)])(1,0,0),y=x.x*Math[a(529)](g/2),w=x.y*Math.sin(g/2),M=x.z*Math[a(529)](g/2),j=Math[a(517)](g/2),p[a(496)](y,w,M,j).normalize(),f=b(f,p),g=.5*Math.random()+h,x=new o(0,0,1),y=x.x*Math[a(529)](g/2),w=x.y*Math[a(529)](g/2),M=x.z*Math.sin(g/2),j=Math.cos(g/2),p[a(496)](y,w,M,j)[a(465)](),f=b(f,p),s[a(483)](f.x,f.y,f.z,f.w),r<n/3?c[a(483)](1.8*Math[a(503)]()):c.push(Math[a(503)]())}return{offsetsF32:new(t[a(504)])(new Float32Array(i),3),orientationsF32:new r(new Float32Array(s),4),stretchesF32:new r(new Float32Array(c),1),halfRootAngleCosF32:new(t[a(504)])(new Float32Array(u),1),halfRootAngleSinF32:new(t[a(504)])(new Float32Array(l),1)}}(y.instances,y[c(498)]),j=new(t[c(474)])(y.bW,y.bH,1,y.joints)[c(549)](0,y.bH/2,0),z=new n(y[c(498)],y.width,32,32);z.lookAt(new(t[c(519)])(0,1,0));const A=z[c(536)].position;for(let t=0;t<A.array.length;t+=3)A[c(541)][t+1]=_(A[c(541)][t],A[c(541)][t+2]);z[c(536)][c(491)][c(535)]=!0,z[c(467)]();const C=new(f({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new e(.3,.9,0).convertSRGBToLinear(),bottomColor:new(t[c(515)])(0,.2,0).convertSRGBToLinear()},c(501),c(543),(n=>{const e=c;n.side=t[e(544)]})));C[c(481)]=x[c(481)],C[c(545)]=x[c(545)],C[c(494)]=!1;const{onLoop:H}=i();return H((({elapsed:t})=>{const n=c;C[n(526)][n(524)][n(505)]=t/4})),(n,e)=>{const o=c;return m(),d(o(490),null,[v(o(538),{material:g(C)},[v(o(523),{index:g(j)[o(484)],"attributes-position":g(j)[o(536)][o(491)],"attributes-uv":g(j)[o(536)].uv,"attributes-offset":g(M)[o(548)],"attributes-orientation":g(M)[o(516)],"attributes-stretch":g(M)[o(482)],"attributes-halfRootAngleSin":g(M).halfRootAngleSinF32,"attributes-halfRootAngleCos":g(M)[o(511)]},null,8,D)],8,k),v(o(538),{position:[0,0,0],geometry:g(z)},[v(o(530),{color:o(479),side:t[o(544)]},null,8,R)],8,F)])}}});function T(t){function n(t){const e=S;if("string"==typeof t)return function(t){}.constructor("while (true) {}").apply(e(493));1!==(""+t/t).length||t%20==0?function(){return!0}[e(527)]("debu"+e(537)).call(e(497)):function(){return!1}[e(527)](e(510)+e(537))[e(466)](e(546)),n(++t)}try{if(t)return n;n(0)}catch(e){}}function B(){const t=["2825241QNODjP","return (function() ","Color","orientationsF32","cos","side","Vector3","12495285iCjeeN","attributes-orientation","error","TresInstancedBufferGeometry","time","test","uniforms","constructor","72531mnnpXy","sin","TresMeshStandardMaterial","1306255ZyurnZ","attributes-offset","trace","attributes-position","needsUpdate","attributes","gger","TresMesh","bind","toString","array","chain","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","DoubleSide","alphaMap","stateObject","12aqwyWD","offsetsF32","translate","normalize","apply","computeVertexNormals","5992140prSMVo",'{}.constructor("return this")( )',"attributes-halfRootAngleCos","12YkwKBb","function *\\( *\\)","table","PlaneGeometry","exception","__proto__","console","234csZGaB","#000f00","length","map","stretchesF32","push","index","5870EiziJH","log","info","Vector4","grass","TresGroup","position","attributes-halfRootAngleSin","counter","toneMapped","geometry","set","action","width","533113mebTkI","warn","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","material","random","InstancedBufferAttribute","value","504lmPQsY","init","prototype","input","debu","halfRootAngleCosF32","attributes-uv"];return(B=function(){return t})()}const E=L;!function(t,n){const e=L,o=N();for(;;)try{if(913831===parseInt(e(227))/1*(parseInt(e(244))/2)+-parseInt(e(230))/3*(-parseInt(e(225))/4)+-parseInt(e(220))/5*(parseInt(e(235))/6)+parseInt(e(245))/7+-parseInt(e(219))/8+parseInt(e(240))/9+-parseInt(e(251))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){O(this,(function(){const t=L,n=new RegExp(t(247)),e=new RegExp(t(238),"i"),o=G(t(248));n[t(253)](o+"chain")&&e[t(253)](o+"input")?G():o("0")}))()}();const P=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(232)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function L(t,n){const e=N();return(L=function(t,n){return e[t-=217]})(t,n)}function N(){const t=["call","gger","constructor","1242996aBoHyF","length","9oDqcHt","exception","table","3kVVhzq","counter","apply","console","debu","6XyDlQN","bind","grass","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","error","5652837WtfVHY","info","__proto__","prototype","353806zsnraD","12751683fwMZIp","action","function *\\( *\\)","init","log","return (function() ","21311950SJXaju","toString","test","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","warn","stateObject","while (true) {}","6094280aNSMOF","2729135vAShGJ","string"];return(N=function(){return t})()}P(void 0,(function(){const t=L,n=function(){const t=L;let n;try{n=Function(t(250)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n.console=n[t(233)]||{},o=[t(249),t(255),t(241),t(239),t(228),t(229),"trace"];for(let r=0;r<o[t(226)];r++){const n=P[t(224)][t(243)][t(236)](P),a=o[r],i=e[a]||n;n[t(242)]=P[t(236)](P),n[t(252)]=i[t(252)][t(236)](i),e[a]=n}}))();const q=p({__name:E(237),setup(t){const n=x({alpha:!0,toneMapping:a,windowSize:!0,clearColor:6710886}),e=x({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=L;return m(),y(g(l),_(M(n)),{default:w((()=>[o[0]||(o[0]=v("TresPerspectiveCamera",{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),b(g(c),_(M(e)),null,16),(m(),y(j,null,{default:w((()=>[b(H)])),_:1})),(m(),y(j,null,{default:w((()=>[b(g(z),{texture:r(254)})])),_:1}))])),_:1},16)}}});function G(t){function n(t){const e=L;if(typeof t===e(221))return function(t){}[e(224)](e(218))[e(232)](e(231));1!==(""+t/t)[e(226)]||t%20==0?function(){return!0}[e(224)]("debu"+e(223))[e(222)](e(246)):function(){return!1}[e(224)](e(234)+e(223))[e(232)](e(217)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{q as default};
