import{p as t,$ as n,N as e,d as o}from"./@tresjs.Q03Md-En1722313330047.js";import{j as r,T as s,k as a,a6 as i,V as c,r as l,Y as u,W as v,l as f,aV as p,cE as m,B as d,bV as g,bk as x}from"./three.0L1oP_mX1722313330047.js";import{P as h}from"./tweakpane.yHWGBmom1722313330047.js";import{d as y,a4 as I,e as b,o as _,f as S,g as w,J as U,j as D,u as P,aj as E,ak as A,al as L,m as M}from"./@vue.Q1VpS3901722313330047.js";import{_ as C}from"./@fesjs.Tyv7j4eO1722313330047.js";import"./@vueuse.UFv615y21722313330047.js";import"./vue-router.jRikjQi41722313330047.js";import"./lodash-es.nFpJXAf-1722313330047.js";import"./@qlin.yHhFDldE1722313330047.js";import"./pinia.YMTINUAO1722313330047.js";import"./@floating-ui.BPbuo5Gx1722313330047.js";import"./@juggle.7yjBMqoW1722313330047.js";!function(t,n){const e=N,o=R();for(;;)try{if(481296===-parseInt(e(470))/1*(-parseInt(e(497))/2)+-parseInt(e(489))/3*(parseInt(e(446))/4)+parseInt(e(454))/5*(-parseInt(e(472))/6)+-parseInt(e(487))/7*(-parseInt(e(498))/8)+-parseInt(e(468))/9+-parseInt(e(467))/10+parseInt(e(463))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const F=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){F(this,(function(){const t=N,n=new RegExp(t(458)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=B("init");n[t(493)](o+t(485))&&e.test(o+t(444))?B():o("0")}))()}();const z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[N(466)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();z(void 0,(function(){const t=N,n=function(){const t=N;let n;try{n=Function(t(491)+t(494)+");")()}catch(e){n=window}return n}(),e=n[t(445)]=n[t(445)]||{},o=["log",t(483),t(484),t(469),t(443),t(440),t(447)];for(let r=0;r<o[t(451)];r++){const n=z.constructor[t(439)][t(499)](z),s=o[r],a=e[s]||n;n[t(481)]=z[t(499)](z),n.toString=a.toString[t(499)](a),e[s]=n}}))();function T(t,n,e){const o=N;if(typeof t!==o(471)||null===t)return t;const r=Array[o(479)](t)?[]:{};for(const s in t)t[o(480)](s)&&(r[s]=T(t[s])),s==n&&(r[n]=e);return r}function N(t,n){const e=R();return(N=function(t,n){return e[t-=439]})(t,n)}function R(){const t=["Vector3","responseText","26584701jDFwCM",'Shader "',"onabort","apply","7839680OTzVXs","8363052GvxutP","error","1XOckQT","object","10614UFeJdo","value","Matrix4","name","action","debu","Matrix3","isArray","hasOwnProperty","__proto__","Vector4","warn","info","chain","Texture","157073QGuDxI","constructor","789BRmAfv","v3v","return (function() ","Vector2","test",'{}.constructor("return this")( )',"index","Matrix2","926266ECQWws","128gkfyvw","bind",'" load was aborted.',"WagnerLoadShaderException","prototype","table","message","gger","exception","input","console","5204KrFbro","trace","exec","now","open","length","string","send","1985xdbgFQ","replace","toString","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","function *\\( *\\)","lastIndex","type"];return(R=function(){return t})()}function B(t){function n(t){const e=N;if(typeof t===e(452))return function(t){}.constructor("while (true) {}").apply("counter");1!==(""+t/t)[e(451)]||t%20==0?function(){return!0}.constructor("debu"+e(442)).call(e(476)):function(){return!1}[e(488)](e(477)+e(442))[e(466)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const G=k;!function(t,n){const e=k,o=O();for(;;)try{if(805001===parseInt(e(523))/1*(parseInt(e(490))/2)+parseInt(e(518))/3+parseInt(e(469))/4+-parseInt(e(524))/5*(parseInt(e(471))/6)+-parseInt(e(522))/7+parseInt(e(513))/8*(parseInt(e(498))/9)+-parseInt(e(462))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const V=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[k(457)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){V(this,(function(){const t=k,n=new RegExp("function *\\( *\\)"),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=W("init");n[t(504)](o+t(486))&&e.test(o+t(503))?W():o("0")}))()}();const j=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[k(457)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function O(){const t=["innerWidth","onWindowResize","height","swapBuffers","RGBFormat","stateObject","Pass","prototype","debu","texture","useRGBA","uuid","setSize","gger","string","quad","bind","copyPass","Mesh","now","resolution","time","params","Scene","__proto__","apply","scene","tInput","loadShadervf","Reset","21092400VuoiFh","add","render","length","uniforms","WebGLRenderTarget","constructor","1698468OHmugJ","stencilBuffer","6wKCfpV","push","pass","settings",'{}.constructor("return this")( )',"camera","scale","counter","width","write","projectionMatrix","read","toScreen","passes","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","chain","back","error","set","2vVRVFt","wrapT","removePass","renderer","Stack","setRenderTarget","CopyPass","front","81531Ybflan","LinearFilter","OrthographicCamera","material","exception","input","test","ClampToEdgeWrapping","call","log","action","trace","near","toString","startTime","1000AJkczD","type","while (true) {}","value","getOfflineTexture","1491006UymWoN","addPass","innerHeight","far","159551OwYDir","1038834EELccw","778970sEnguI","shader","passItems","minFilter","UnsignedByteType","magFilter","wrapS"];return(O=function(){return t})()}function k(t,n){const e=O();return(k=function(t,n){return e[t-=428]})(t,n)}j(void 0,(function(){const t=k;let n;try{n=Function("return (function() "+t(475)+");")()}catch(r){n=window}const e=n.console=n.console||{},o=[t(507),"warn","info",t(488),t(502),"table",t(509)];for(let s=0;s<o[t(465)];s++){const n=j[t(468)][t(439)].bind(j),r=o[s],a=e[r]||n;n[t(456)]=j[t(448)](j),n[t(511)]=a[t(511)][t(448)](a),e[r]=n}}))();class H{constructor(t,n){const e=k;this[e(479)]=1,this.height=1,this[e(474)]=n||{},this[e(442)]=this[e(474)][e(442)]||!1,this[e(493)]=t,this[e(449)]=this.CopyPass(this[e(474)]),this[e(458)]=new(i[e(455)]),this[e(447)]=new(i[e(450)])(new l(1,1),new u),this.scene[e(463)](this[e(447)]),this.camera=new(i[e(500)])(1,1,1,1,-1e4,1e4),this[e(497)]=new v(1,1,{minFilter:void 0!==this[e(474)][e(428)]?this[e(474)][e(428)]:f,magFilter:void 0!==this[e(474)][e(430)]?this[e(474)].magFilter:f,wrapS:void 0!==this[e(474)][e(431)]?this.settings[e(431)]:i[e(505)],wrapT:void 0!==this[e(474)][e(491)]?this[e(474)].wrapT:i[e(505)],format:this[e(442)]?p:i[e(436)],type:void 0!==this[e(474)][e(514)]?this[e(474)][e(514)]:i[e(429)],stencilBuffer:void 0===this[e(474)][e(470)]||this[e(474)].stencilBuffer}),this[e(487)]=this[e(497)].clone(),this[e(512)]=Date[e(451)](),this[e(484)]={},this[e(494)]={passItems:[],passes:[]}}[G(519)](t,n,e,o){const r=G;this[r(460)](n);const s={shaderName:t,params:e,uuid:o,shader:this.shader};this.Stack[r(526)][r(472)](s)}[G(492)](t){const n=G;for(let e=this[n(494)][n(526)].length-1;e>=0;e--)this[n(494)].passItems[e][n(443)]===parseInt(t)&&this.Stack[n(526)].splice(e,1);console[n(507)](this[n(494)][n(526)])}[G(496)](){const t=G;this.Pass[t(506)](this);return this[t(460)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}loadShadervf(t){const n=G,e=n(485);return this[n(525)]=function(t,n){const e=N,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,l=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,u={sampler2D:{type:"t",value:()=>new(i[N(486)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new r},vec3:{type:"v3",value:()=>new(i[N(461)])},vec4:{type:"v4",value:()=>new(i[N(482)])},bvec2:{type:"v2",value:()=>new(i[N(492)])},bvec3:{type:"v3",value:()=>new(i[N(461)])},bvec4:{type:"v4",value:()=>new(i[N(482)])},ivec2:{type:"v2",value:()=>new r},ivec3:{type:"v3",value:()=>new c},ivec4:{type:"v4",value:()=>new(i[N(482)])},mat2:{type:"v2",value:()=>new(i[N(496)])},mat3:{type:"v3",value:()=>new(i[N(478)])},mat4:{type:"v4",value:()=>new(i[N(474)])}},v={float:{type:"fv",value:()=>[]},vec3:{type:e(490),value:()=>[]}};let f;const p={resolution:{type:"v2",value:new r(1,1),default:!0},time:{type:"f",value:Date[e(449)](),default:!0},tInput:{type:"t",value:new s,default:!0}};let m,d;for(;null!==(f=o.exec(n));)f.index===o[e(459)]&&o[e(459)]++,m=f[1],d=f[2],p[d]={type:u[m][e(460)],value:u[m].value()};for(;null!==(f=l[e(448)](n));)f[e(495)]===o[e(459)]&&o[e(459)]++,m=f[1],d=f[2],f[3],p[d]={type:v[m][e(460)],value:v[m][e(473)]()};return new a({uniforms:p,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(525)]}[G(438)](t){this.shader=null,this.params={}}[G(461)](){const t=G;this[t(482)]=this[t(497)],this.write=this[t(487)]}[G(433)](t,n){const e=G,o=window[e(432)],r=window[e(520)];t[e(444)](1*o,1*r),n[e(481)].makePerspective(70,o/r,n.near,n[e(521)]),this[e(444)](o,r);return this[e(517)](o,r,!0)}[G(444)](t,n){const e=G;this[e(479)]=t,this[e(434)]=n,this[e(476)][e(481)].makeOrthographic(t/-2,t/2,n/2,n/-2,this[e(476)][e(510)],this[e(476)][e(521)]),this[e(447)][e(477)][e(489)](t,n,1),this.front.setSize(t,n),this[e(487)][e(444)](t,n)}[G(517)](t,n,e){const o=G;return new(i[o(467)])(t,n,{minFilter:f,magFilter:i[o(499)],format:e?p:m})}[G(464)](t,n,e,o){const r=G;this[r(493)][r(495)](this[r(480)]),this[r(493)][r(464)](t,n),o||this[r(435)]()}[G(435)](){const t=G,n=this[t(480)];this[t(480)]=this.read,this[t(482)]=n}[G(473)](){const t=G;for(let n=0;n<this[t(494)].passItems[t(465)];n++){const e=this.Stack[t(526)][n][t(525)],o=this[t(494)][t(526)][n][t(454)];if(this[t(493)][t(495)](this[t(480)]),e instanceof a){this[t(447)][t(501)]=e,this[t(447)][t(501)][t(466)].tInput[t(516)]=this[t(482)][t(441)],this[t(447)][t(501)][t(466)].resolution[t(516)].set(this[t(479)],this.height),this[t(447)][t(501)][t(466)][t(453)][t(516)]=.001*(Date[t(451)]()-this.startTime);for(const n in o)this[t(447)][t(501)][t(466)][n][t(516)]=o[n];this[t(493)][t(464)](this.scene,this.camera),this.swapBuffers()}}}[G(483)](t,n){const e=G;this[e(493)][e(495)](null),this[e(447)][e(501)]=this[e(449)],this.quad[e(501)].uniforms[e(459)][e(516)]=this[e(482)][e(441)],this[e(447)][e(501)].uniforms[e(452)][e(516)].set(this[e(479)],this[e(434)]),this[e(493)][e(464)](this.scene,this[e(476)])}}function W(t){function n(t){const e=k;if(typeof t===e(446))return function(t){}[e(468)](e(515))[e(457)](e(478));1!==(""+t/t).length||t%20==0?function(){return!0}.constructor(e(440)+"gger")[e(506)](e(508)):function(){return!1}[e(468)](e(440)+e(445)).apply(e(437)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const X="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",q=J;!function(t,n){const e=J,o=Q();for(;;)try{if(157188===parseInt(e(338))/1*(parseInt(e(340))/2)+parseInt(e(342))/3*(parseInt(e(317))/4)+-parseInt(e(308))/5*(parseInt(e(334))/6)+parseInt(e(364))/7+-parseInt(e(321))/8*(-parseInt(e(292))/9)+-parseInt(e(301))/10+parseInt(e(355))/11*(-parseInt(e(350))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){Z(this,(function(){const t=J,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(331),"i"),o=K("init");n[t(298)](o+"chain")&&e[t(298)](o+"input")?K():o("0")}))()}();const $=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[J(295)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function Q(){const t=["769727bJZZAY","DENOISEPass","action","TOONPass","SOBELPass","label","56043ZyNbAD","values","value","apply","material","trace","test","console","constructor","438420HOwIMm","map","title","error","addPass","Reset","addBlade","10rjTceL","change","list","string","后处理类型","split","RGBPass","pass","SNOISEPass","4IWZyyc","receiveShadow","CGAPass","__proto__","328uFHftH","plugins/postProcessing/image/1324-normal.jpg","关闭通道","random","target","Vector2","SEPIAPass","Mesh","table","onWindowResize","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","toString","FXAAPass","484992WecmjC","InvertPass","render","BOXBLURPass","1MxyPUL","text","50214XBeDUI","stateObject","443505bTVxTi","exception",'{}.constructor("return this")( )',"plugins/postProcessing/image/1324.jpg","click","while (true) {}","postProcessing","debu","132pceywq","autoClearColor","prototype","push","removePass","175516ODBtQp","mergeGeometries","bind","BoxGeometry","castShadow","VIGNETTE2Pass","DOTPass","CIRCULARPass","info"];return(Q=function(){return t})()}function J(t,n){const e=Q();return(J=function(t,n){return e[t-=292]})(t,n)}$(void 0,(function(){const t=J;let n;try{n=Function("return (function() "+t(344)+");")()}catch(r){n=window}const e=n.console=n[t(299)]||{},o=["log","warn",t(363),t(304),t(343),t(329),t(297)];for(let s=0;s<o.length;s++){const n=$[t(300)][t(352)][t(357)]($),r=o[s],a=e[r]||n;n[t(320)]=$[t(357)]($),n[t(332)]=a[t(332)].bind(a),e[r]=n}}))();function K(t){function n(t){const e=J;if(typeof t===e(311))return function(t){}[e(300)](e(347))[e(295)]("counter");1!==(""+t/t).length||t%20==0?function(){return!0}[e(300)](e(349)+"gger").call(e(366)):function(){return!1}[e(300)](e(349)+"gger")[e(295)](e(341)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const Y=C(y({__name:q(348),async setup(o){const r=q;let s,a;const{camera:c,renderer:l,scene:u,sizes:v}=t();for(var f=new d,p=[],m=0;m<100;m++){var y=new(i[r(358)])(100,100,100);y.translate(1500*Math[r(324)](),1500*Math.random(),1500*Math[r(324)]()),p[r(353)](y)}f=g[r(356)](p);const b=([s,a]=I((()=>e({map:r(345)}))),s=await s,a(),s),_=([s,a]=I((()=>e({map:r(322)}))),s=await s,a(),s);var S=new x({map:b[r(302)],normalMap:_[r(302)],normalScale:new(i[r(326)])(.8,-.8),shininess:100}),w=new(i[r(328)])(f,S);w[r(359)]=!0,w[r(318)]=!0,u[r(294)].add(w);const U=new H(l[r(294)],{useRGBA:!0}),D=new h;let P=null,E=[{text:r(335),value:{InvertPass:X}},{text:r(333),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:r(327),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:r(316),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:r(337),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:r(365),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:r(319),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:_.map}}},{text:r(368),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:r(314),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:r(361),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:r(362),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:"POISSONPass",value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:"VIGNETTE1Pass",value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:r(360),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:"FREICHENPass",value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:r(367),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],A=r(335),L=X,M=null;D[r(307)]({view:r(310),label:r(312),options:E,value:""}).on(r(309),(t=>{P=t[r(294)]}));const C=D.addButton({title:"新增",label:"新增通道"});let F=0;C.on("click",(t=>{const n=r;A=Object.keys(P)[0],L=Object[n(293)](P)[0],M=Object.values(P)[1];let e=F++,o=D.addFolder({title:A});for(const r in M){let t=M[r];o.addBlade({view:n(339),label:r,parse:t=>String(t),value:t})}o.addButton({title:"移除~"+e,label:n(323)}).on(n(346),(t=>{const e=n;let o=t[e(325)][e(303)][e(313)]("~")[1];U[e(354)](o)})).on(n(346),(()=>{o.dispose()}));let s=T(M,t[n(325)][n(369)],t[n(294)]);U[n(305)](A,L,s,e)})),U[r(330)](l[r(294)],c[r(294)]);const{onLoop:z}=n();return z((({delta:t})=>{const n=r;w&&(l.value[n(351)]=!0,U[n(306)](),w[n(296)]=S,U[n(336)](u.value,c.value),U[n(315)](),U.toScreen(u[n(294)],c.value))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),tt=ot;!function(t,n){const e=ot,o=lt();for(;;)try{if(116888===-parseInt(e(383))/1+parseInt(e(375))/2+-parseInt(e(374))/3+-parseInt(e(381))/4+-parseInt(e(384))/5+-parseInt(e(410))/6+parseInt(e(409))/7*(parseInt(e(394))/8))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const nt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[ot(404)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){nt(this,(function(){const t=ot,n=new RegExp(t(389)),e=new RegExp(t(398),"i"),o=ct(t(372));n[t(379)](o+"chain")&&e.test(o+t(399))?ct():o("0")}))()}();const et=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function ot(t,n){const e=lt();return(ot=function(t,n){return e[t-=371]})(t,n)}et(void 0,(function(){const t=ot;let n;try{n=Function(t(402)+t(391)+");")()}catch(r){n=window}const e=n[t(397)]=n[t(397)]||{},o=["log",t(382),t(377),t(411),"exception",t(407),"trace"];for(let s=0;s<o[t(386)];s++){const n=et.constructor[t(405)][t(373)](et),r=o[s],a=e[r]||n;n[t(376)]=et[t(373)](et),n[t(403)]=a[t(403)][t(373)](a),e[r]=n}}))();const rt={ref:tt(371),position:[600,850,-1500],fov:45,near:.1,far:1e5},st=U(tt(396),{color:tt(408),intensity:2},null,-1),at=U(tt(406),{position:[100,100,0],intensity:2,color:tt(408)},null,-1),it=y({__name:"postProcessingEditor",setup(t){const e=tt,r={clearColor:e(393),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(380)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=b(a(400));return _(),S(i,M(r,{"window-size":""}),{default:w((()=>[U(a(401),rt,null,512),D(P(o),E(A(s)),null,16),st,at,(_(),S(L,null,{default:w((()=>[D(Y)])),_:1}))])),_:1},16)}}});function ct(t){function n(t){const e=ot;if(typeof t===e(378))return function(t){}.constructor(e(387))[e(404)](e(390));1!==(""+t/t)[e(386)]||t%20==0?function(){return!0}[e(385)](e(388)+e(392))[e(395)]("action"):function(){return!1}[e(385)]("debu"+e(392)).apply("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}function lt(){const t=["#ffffff","2843463LenRGP","914058MQSUmP","error","perspectiveCameraRef","init","bind","128979fgKOff","302452CiNjWk","__proto__","info","string","test","manual","260112lKTwGu","warn","94993PwWXCX","425950NdMXAh","constructor","length","while (true) {}","debu","function *\\( *\\)","counter",'{}.constructor("return this")( )',"gger","#000000","8rKDYTF","call","TresAmbientLight","console","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","input","TresCanvas","TresPerspectiveCamera","return (function() ","toString","apply","prototype","TresDirectionalLight","table"];return(lt=function(){return t})()}export{it as default};
