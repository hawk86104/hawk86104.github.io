import{bU as n,ak as t,am as e,C as o,aB as a,a as r}from"./three.-z-VOBM71731641201182.js";import{e as s,f as i,F as c,U as l}from"./@tresjs.b88d4FZI1731641201182.js";import{d as u,b as f,w as d,e as m,o as p,D as h,j as v,u as g,g as w,J as y,aj as M,ak as C,F as P}from"./@vue.-THQH3GC1731641201182.js";import"./@vueuse.XeXqlNFe1731641201182.js";const b=_;function x(){const n=["color","prototype","randomnessPower","bufferRef","string","toString","uniforms","apply","setAttribute","#b5f28d","bind","black","8703338CWfoNA","insideColor","stateObject","outsideColor","a-randomness","debu","function *\\( *\\)","call","uTime","console","a-scale","395292gDARuj","radius","TresBufferGeometry","keys","random","38091lTLzgI","296HulEEt","length","action","position","input","branches","#1b3984","warn","geometry","15112cvHQhV","info","forEach","count","exception","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","gger","TresPoints","value","error","2843075zfDTqo","1103057iuZhCV","clone","lerp","879194ywmgtx","material","cos","2844GyJWyJ",'{}.constructor("return this")( )',"sin","constructor","TresPerspectiveCamera","test","chain","galaxy","while (true) {}"];return(x=function(){return n})()}!function(n,t){const e=_,o=x();for(;;)try{if(871717===-parseInt(e(516))/1+parseInt(e(519))/2+-parseInt(e(495))/3*(parseInt(e(496))/4)+parseInt(e(515))/5+parseInt(e(490))/6+parseInt(e(479))/7+parseInt(e(505))/8*(parseInt(e(522))/9))break;o.push(o.shift())}catch(a){o.push(o.shift())}}();const z=function(){let n=!0;return function(t,e){const o=n?function(){if(e){const n=e[_(474)](t,arguments);return e=null,n}}:function(){};return n=!1,o}}();!function(){z(this,(function(){const n=_,t=new RegExp(n(485)),e=new RegExp(n(510),"i"),o=A("init");t.test(o+n(528))&&e[n(527)](o+n(500))?A():o("0")}))()}();const T=function(){let n=!0;return function(t,e){const o=n?function(){if(e){const n=e.apply(t,arguments);return e=null,n}}:function(){};return n=!1,o}}();function _(n,t){const e=x();return(_=function(n,t){return e[n-=474]})(n,t)}T(void 0,(function(){const n=_,t=function(){const n=_;let t;try{t=Function("return (function() "+n(523)+");")()}catch(e){t=window}return t}(),e=t[n(488)]=t.console||{},o=["log",n(503),n(506),n(514),n(509),"table","trace"];for(let a=0;a<o[n(497)];a++){const t=T.constructor[n(532)][n(477)](T),r=o[a],s=e[r]||t;t.__proto__=T[n(477)](T),t[n(536)]=s[n(536)][n(477)](s),e[r]=t}}))();const j=["position",b(489),b(531),b(483)],S=u({__name:b(529),setup(u){const x=b,z={clearColor:x(478),shadows:!0,alpha:!1,shadowMapType:n,outputColorSpace:t,toneMapping:e,windowSize:!0},T={count:3e4,size:20,radius:5,branches:5,spin:4,randomness:.13,randomnessPower:7.5,insideColor:x(476),outsideColor:x(502)},_=new o(T[x(480)]),S=new o(T[x(482)]),A=new Float32Array(3*T[x(508)]),F=new Float32Array(3*T[x(508)]),I=new Float32Array(T[x(508)]),R=new Float32Array(3*T[x(508)]);for(let n=0;n<T[x(508)];n++){const t=3*n,e=Math[x(494)]()*T[x(491)],o=n%T.branches*Math.PI*2/T[x(501)];A[t]=Math.cos(o)*e,A[t+1]=0,A[t+2]=Math[x(524)](o)*e;const a=Math[x(494)]()**T[x(533)]*(Math.random()<.5?-1:1),r=Math[x(494)]()**T[x(533)]*(Math[x(494)]()<.5?-1:1),s=Math[x(494)]()**T.randomnessPower*(Math[x(494)]()<.5?-1:1);R[t]=a,R[t+1]=r,R[t+2]=s;const i=_[x(517)]();i[x(518)](S,e/T.radius),F[t+0]=i.r,F[t+1]=i.g,F[t+2]=i.b,I[n]=Math[x(494)]()}const k={transparent:!0,depthWrite:!1,blending:a,vertexColors:!0,vertexShader:"uniform float uSize;\nuniform float uTime;\n\nattribute float aScale;\nattribute vec3 aRandomness;\n\nvarying vec3 vColor;\n\nvoid main() {\n    vec4 modelPosition = modelMatrix * vec4(position, 1.0);\n\n    \n    float angle = atan(modelPosition.x, modelPosition.z);\n    float distanceToCenter = length(modelPosition.xz);\n    float angleOffset = (1.0 / distanceToCenter) * uTime * 0.2;\n    angle += angleOffset;\n\n    modelPosition.x = distanceToCenter * cos(angle);\n    modelPosition.z = distanceToCenter * sin(angle);\n\n    \n    modelPosition.xyz += aRandomness;\n\n    vec4 viewPosition = viewMatrix * modelPosition;\n    vec4 projectedPosition = projectionMatrix * viewPosition;\n    gl_Position = projectedPosition;\n\n    gl_PointSize = uSize * aScale;\n\n    \n    gl_PointSize *= ( 1.0 / - viewPosition.z);\n\n    \n    vColor = color;\n\n}",fragmentShader:"varying vec3 vColor;\n\nvoid main()\n{\n    \n    float strength = distance(gl_PointCoord, vec2(0.5));\n    strength = 1.0 - strength;\n    strength = pow(strength, 5.0);\n\n    \n    vec3 color = mix(vec3(0.0), vColor, strength);\n    gl_FragColor = vec4(color, 1.0);\n}",uniforms:{uTime:{value:0},uSize:{value:T.size}}};const E=f(null),{onLoop:O}=s();O((({elapsed:n})=>{const t=x;E[t(513)]&&(E[t(513)][t(520)][t(537)][t(487)][t(513)]=n)}));const{count:D,size:J,radius:W,branches:Z,spin:B,randomness:G,randomnessPower:H,insideColor:L,outsideColor:U}=i({count:{value:3e4,min:0,max:1e5,step:1},size:{value:20,min:.01,max:40,step:1},radius:{value:5,min:.1,max:20,step:.01},branches:{value:5,min:2,max:10,step:1},spin:{value:4,min:-5,max:5,step:.01},randomness:{value:.13,min:.1,max:.2,step:.01},randomnessPower:{value:7.5,min:1,max:10,step:.001},insideColor:x(476),outsideColor:x(502)});return d([D.value,J[x(513)],W[x(513)],Z.value,B[x(513)],G.value,H[x(513)],L[x(513)],U[x(513)]],(n=>{const t=x;n[t(507)](((n,e)=>{T[Object[t(493)](T)[e]]=n.value})),function(){const n=x;if(E[n(513)]){const t=new o(T[n(480)]),e=new o(T[n(482)]),a=new Float32Array(3*T[n(508)]),s=new Float32Array(3*T[n(508)]),i=new Float32Array(T[n(508)]),c=new Float32Array(3*T[n(508)]);for(let o=0;o<T[n(508)];o++){const r=3*o,l=Math[n(494)]()*T[n(491)],u=o%T[n(501)]*Math.PI*2/T[n(501)];a[r]=Math[n(521)](u)*l,a[r+1]=0,a[r+2]=Math[n(524)](u)*l;const f=Math[n(494)]()**T[n(533)]*(Math.random()<.5?-1:1),d=Math[n(494)]()**T[n(533)]*(Math[n(494)]()<.5?-1:1),m=Math[n(494)]()**T[n(533)]*(Math[n(494)]()<.5?-1:1);c[r]=f,c[r+1]=d,c[r+2]=m;const p=t[n(517)]();p[n(518)](e,l/T[n(491)]),s[r+0]=p.r,s[r+1]=p.g,s[r+2]=p.b,i[o]=Math[n(494)]()}E.value[n(504)][n(475)](n(499),new r(a,3)),E[n(513)][n(504)][n(475)]("aRandomness",new r(c,3)),E[n(513)].geometry[n(475)](n(531),new r(s,3)),E[n(513)][n(504)][n(475)]("aScale",new r(i,1))}}()})),(n,t)=>{const e=x,o=m("TresCanvas");return p(),h(P,null,[v(g(c)),v(o,M(C(z)),{default:w((()=>[t[0]||(t[0]=y(e(526),{position:[3,3,3]},null,-1)),y(e(512),{ref_key:e(534),ref:E},[y(e(492),{position:[g(A),3],"a-scale":[g(I),1],color:[g(F),3],"a-randomness":[g(R),3]},null,8,j),y("TresShaderMaterial",M(C(k)),null,16)],512),v(g(l))])),_:1},16)],64)}}});function A(n){function t(n){const e=_;if(typeof n===e(535))return function(n){}[e(525)](e(530))[e(474)]("counter");1!==(""+n/n)[e(497)]||n%20==0?function(){return!0}[e(525)](e(484)+e(511))[e(486)](e(498)):function(){return!1}[e(525)]("debugger")[e(474)](e(481)),t(++n)}try{if(n)return t;t(0)}catch(e){}}export{S as default};
