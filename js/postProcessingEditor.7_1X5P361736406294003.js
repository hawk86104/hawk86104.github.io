import{m as t,e as n,b as e,U as o}from"./@tresjs.AACxYGk_1736406294003.js";import{k as r,_ as s,V as a,s as i,$ as c,n as l,W as u,c3 as v}from"./three.jaHX2_hY1736406294003.js";import{P as f}from"./tweakpane.yHWGBmom1736406294003.js";import{d as p,a4 as d,e as m,o as g,f as x,g as h,J as y,j as b,u as I,aj as _,ak as S,al as U,m as w}from"./@vue.yG49nQHr1736406294003.js";import{_ as D}from"./@fesjs.GZFvw4sh1736406294003.js";import"./@vueuse.d_orRt1V1736406294003.js";import"./vue-router.8kSNPLfk1736406294003.js";import"./lodash-es.kYt-_xTG1736406294003.js";import"./@qlin.yHhFDldE1736406294003.js";import"./pinia.cbjOSx1C1736406294003.js";import"./vue-demi.C4xddsk91736406294003.js";import"./@floating-ui.BPbuo5Gx1736406294003.js";import"./@juggle.7yjBMqoW1736406294003.js";!function(t,n){const e=M,o=A();for(;;)try{if(644777===parseInt(e(361))/1+-parseInt(e(376))/2+-parseInt(e(368))/3*(parseInt(e(362))/4)+parseInt(e(385))/5+-parseInt(e(404))/6+-parseInt(e(369))/7+parseInt(e(377))/8)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const P=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){P(this,(function(){const t=M,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(409),"i"),o=C(t(366));n.test(o+t(399))&&e.test(o+"input")?C():o("0")}))()}();const E=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[M(374)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function M(t,n){const e=A();return(M=function(t,n){return e[t-=352]})(t,n)}E(void 0,(function(){const t=M,n=function(){const t=M;let n;try{n=Function(t(393)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n.console=n[t(372)]||{},o=["log",t(403),t(401),t(378),t(373),t(392),t(371)];for(let r=0;r<o[t(363)];r++){const n=E[t(407)][t(390)][t(396)](E),s=o[r],a=e[s]||n;n[t(410)]=E[t(396)](E),n.toString=a[t(408)][t(396)](a),e[s]=n}}))();function A(){const t=["while (true) {}","ShaderMaterial","value","WagnerLoadShaderException","responseText","open","message",'Shader "',"Matrix3","589419sCXotC","44cgacsv","length","onerror","stateObject","init","exec","256815XGBREe","6070281dGkctS","index","trace","console","exception","apply","get","821064aaVOfC","20982528nJLwXy","error","random","lastIndex","Matrix2","replace","Matrix4","gger","2636990xMUqFO","hasOwnProperty","Vector2","string","type","prototype","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","table","return (function() ","v3v","action","bind","\" couldn't be loaded.","debu","chain","object","info","call","warn","5252916Wnqhee","Texture","name","constructor","toString","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","__proto__","Vector4"];return(A=function(){return t})()}function L(t,n,e){const o=M;if(typeof t!==o(400)||null===t)return t;const r=Array.isArray(t)?[]:{};for(const s in t)t[o(386)](s)&&(r[s]=L(t[s])),s==n&&(r[n]=e);return r}function C(t){function n(t){const e=M;if(typeof t===e(388))return function(t){}.constructor(e(352))[e(374)]("counter");1!==(""+t/t)[e(363)]||t%20==0?function(){return!0}[e(407)](e(398)+"gger")[e(402)](e(395)):function(){return!1}.constructor("debu"+e(384))[e(374)](e(365)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const F=N;!function(t,n){const e=N,o=G();for(;;)try{if(787703===-parseInt(e(316))/1+parseInt(e(229))/2*(parseInt(e(245))/3)+parseInt(e(266))/4+-parseInt(e(252))/5+-parseInt(e(232))/6*(parseInt(e(315))/7)+parseInt(e(238))/8+parseInt(e(295))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[N(246)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){z(this,(function(){const t=N,n=new RegExp(t(280)),e=new RegExp(t(311),"i"),o=B(t(285));n[t(317)](o+t(273))&&e[t(317)](o+t(243))?B():o("0")}))()}();const T=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[N(246)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function N(t,n){const e=G();return(N=function(t,n){return e[t-=224]})(t,n)}function G(){const t=["passItems","scale","Scene","prototype","swapBuffers","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","__proto__","RGBAFormat","shader","26705MmeJOQ","682191QaDZcU","test","time","useRGBA","quad","setRenderTarget","clone","width","write","params","8628BgAxGw","scene","magFilter","870mrlnFL","OrthographicCamera","Pass","material","resolution","innerWidth","8429144HrDGeM","log","counter","call","front","input","height","696cdwMpp","apply","info","now","constructor","camera","WebGLRenderTarget","4754630CrRYrx","exception","error","ShaderMaterial","renderer","type","copyPass","setSize","ClampToEdgeWrapping","value","far","innerHeight","makePerspective","bind","1556672noycJm","makeOrthographic","gger","UnsignedByteType","uniforms","getOfflineTexture","toString","chain","wrapT","texture","RGBFormat","LinearFilter","add",'{}.constructor("return this")( )',"function *\\( *\\)","table","read","PlaneGeometry","toScreen","init","back","onWindowResize","render","length","near","debu","loadShadervf","startTime","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","4773024VZZGbB","stencilBuffer","warn","settings","CopyPass","Stack","trace","set","minFilter","Reset","tInput"];return(G=function(){return t})()}T(void 0,(function(){const t=N;let n;try{n=Function("return (function() "+t(279)+");")()}catch(r){n=window}const e=n.console=n.console||{},o=[t(239),t(297),t(247),t(254),t(253),t(281),t(301)];for(let s=0;s<o[t(289)];s++){const n=T[t(249)][t(309)].bind(T),r=o[s],a=e[r]||n;n[t(312)]=T[t(265)](T),n[t(272)]=a.toString[t(265)](a),e[r]=n}}))();class R{constructor(t,n){const e=N;this[e(226)]=1,this.height=1,this[e(298)]=n||{},this[e(319)]=this[e(298)][e(319)]||!1,this[e(256)]=t,this[e(258)]=this[e(299)](this[e(298)]),this.scene=new(s[e(308)]),this[e(320)]=new i(new(s[e(283)])(1,1),new c),this[e(230)][e(278)](this.quad),this[e(250)]=new(s[e(233)])(1,1,1,1,-1e4,1e4),this[e(242)]=new(s[e(251)])(1,1,{minFilter:void 0!==this.settings[e(303)]?this[e(298)][e(303)]:l,magFilter:void 0!==this[e(298)][e(231)]?this[e(298)].magFilter:s[e(277)],wrapS:void 0!==this.settings.wrapS?this[e(298)].wrapS:s[e(260)],wrapT:void 0!==this[e(298)][e(274)]?this.settings[e(274)]:s[e(260)],format:this[e(319)]?s[e(313)]:s[e(276)],type:void 0!==this.settings[e(257)]?this[e(298)][e(257)]:s[e(269)],stencilBuffer:void 0===this.settings[e(296)]||this.settings[e(296)]}),this[e(286)]=this[e(242)][e(225)](),this[e(293)]=Date[e(248)](),this.passes={},this[e(300)]={passItems:[],passes:[]}}addPass(t,n,e,o){const r=N;this.loadShadervf(n);const s={shaderName:t,params:e,uuid:o,shader:this[r(314)]};this[r(300)][r(306)].push(s)}removePass(t){const n=N;for(let e=this[n(300)][n(306)].length-1;e>=0;e--)this[n(300)][n(306)][e].uuid===parseInt(t)&&this.Stack[n(306)].splice(e,1);console[n(239)](this.Stack[n(306)])}CopyPass(){const t=N;this[t(234)][t(241)](this);return this[t(292)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[F(292)](t){const n=F,e=n(294);return this[n(314)]=function(t,n){const e=M,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,i=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,c={sampler2D:{type:"t",value:()=>new(s[M(405)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(s[M(387)])},vec3:{type:"v3",value:()=>new a},vec4:{type:"v4",value:()=>new(s[M(411)])},bvec2:{type:"v2",value:()=>new(s[M(387)])},bvec3:{type:"v3",value:()=>new a},bvec4:{type:"v4",value:()=>new(s[M(411)])},ivec2:{type:"v2",value:()=>new(s[M(387)])},ivec3:{type:"v3",value:()=>new a},ivec4:{type:"v4",value:()=>new(s[M(411)])},mat2:{type:"v2",value:()=>new(s[M(381)])},mat3:{type:"v3",value:()=>new(s[M(360)])},mat4:{type:"v4",value:()=>new(s[M(383)])}},l={float:{type:"fv",value:()=>[]},vec3:{type:e(394),value:()=>[]}};let u;const v={resolution:{type:"v2",value:new r(1,1),default:!0},time:{type:"f",value:Date.now(),default:!0},tInput:{type:"t",value:new(s[e(405)]),default:!0}};let f,p;for(;null!==(u=o[e(367)](n));)u[e(370)]===o[e(380)]&&o.lastIndex++,f=u[1],p=u[2],v[p]={type:c[f][e(389)],value:c[f][e(354)]()};for(;null!==(u=i[e(367)](n));)u[e(370)]===o[e(380)]&&o[e(380)]++,f=u[1],p=u[2],u[3],v[p]={type:l[f][e(389)],value:l[f][e(354)]()};return new(s[e(353)])({uniforms:v,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this.shader}[F(234)](t){const n=F;this[n(314)]=null,this[n(228)]={}}[F(304)](){const t=F;this[t(282)]=this.front,this[t(227)]=this[t(286)]}[F(287)](t,n){const e=F,o=window[e(237)],r=window[e(263)];t[e(259)](1*o,1*r),n.projectionMatrix[e(264)](70,o/r,n.near,n[e(262)]),this[e(259)](o,r);return this[e(271)](o,r,!0)}[F(259)](t,n){const e=F;this[e(226)]=t,this[e(244)]=n,this[e(250)].projectionMatrix[e(267)](t/-2,t/2,n/2,n/-2,this.camera[e(290)],this[e(250)][e(262)]),this[e(320)][e(307)][e(302)](t,n,1),this[e(242)][e(259)](t,n),this[e(286)][e(259)](t,n)}getOfflineTexture(t,n,e){const o=F;return new u(t,n,{minFilter:s[o(277)],magFilter:l,format:e?s[o(313)]:s[o(276)]})}render(t,n,e,o){const r=F;this[r(256)].setRenderTarget(this[r(227)]),this[r(256)][r(288)](t,n),o||this.swapBuffers()}[F(310)](){const t=F,n=this[t(227)];this[t(227)]=this[t(282)],this.read=n}pass(){const t=F;for(let n=0;n<this[t(300)].passItems.length;n++){const e=this[t(300)][t(306)][n][t(314)],o=this[t(300)][t(306)][n][t(228)];if(this[t(256)][t(224)](this[t(227)]),e instanceof s[t(255)]){this[t(320)].material=e,this[t(320)].material[t(270)].tInput[t(261)]=this[t(282)].texture,this.quad[t(235)][t(270)].resolution[t(261)].set(this[t(226)],this.height),this.quad[t(235)][t(270)][t(318)][t(261)]=.001*(Date[t(248)]()-this.startTime);for(const n in o)this[t(320)].material.uniforms[n].value=o[n];this[t(256)][t(288)](this[t(230)],this[t(250)]),this[t(310)]()}}}[F(284)](t,n){const e=F;this[e(256)].setRenderTarget(null),this.quad.material=this[e(258)],this[e(320)].material.uniforms[e(305)][e(261)]=this[e(282)][e(275)],this.quad[e(235)][e(270)][e(236)][e(261)][e(302)](this.width,this[e(244)]),this.renderer[e(288)](this[e(230)],this[e(250)])}}function B(t){function n(t){const e=N;if("string"==typeof t)return function(t){}.constructor("while (true) {}")[e(246)](e(240));1!==(""+t/t)[e(289)]||t%20==0?function(){return!0}[e(249)](e(291)+e(268))[e(241)]("action"):function(){return!1}[e(249)]("debu"+e(268))[e(246)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const j="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",O=W;!function(t,n){const e=W,o=k();for(;;)try{if(430317===-parseInt(e(182))/1*(-parseInt(e(160))/2)+-parseInt(e(214))/3+-parseInt(e(173))/4*(-parseInt(e(216))/5)+-parseInt(e(193))/6+parseInt(e(194))/7*(-parseInt(e(211))/8)+-parseInt(e(217))/9+parseInt(e(196))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const V=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){V(this,(function(){const t=W,n=new RegExp(t(174)),e=new RegExp(t(188),"i"),o=q(t(202));n[t(205)](o+t(199))&&e.test(o+"input")?q():o("0")}))()}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[W(240)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function k(){const t=["autoClearColor","counter","push","plugins/postProcessing/image/1324.jpg","postProcessing","return (function() ","stateObject","CGAPass","gger","values","toString","新增通道","BufferGeometry","SOBELPass","mergeGeometries","plugins/postProcessing/image/1324-normal.jpg","SNOISEPass","后处理类型","apply","trace","POISSONPass","addButton","MeshPhongMaterial","742324YDvMjq","value","addBlade","exception","BoxGeometry","SEPIAPass",'{}.constructor("return this")( )',"移除~","VIGNETTE2Pass","BOXBLURPass","InvertPass","prototype","pass","5748sYFqkB","function *\\( *\\)","length","while (true) {}","dispose","toScreen","console","info","debu","2TutpKp","split","addPass","Reset","DOTPass","click","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","receiveShadow","constructor","关闭通道","call","607332WbUWYo","91LsHzvt","target","3038240pzyYaR","__proto__","removePass","chain","log","addFolder","init","random","onWindowResize","test","list","map","CIRCULARPass","keys","translate","50728IrqLmb","DENOISEPass","VIGNETTE1Pass","1727202vJQZdF","bind","605btbayW","272871werKXu","TOONPass","add","material","Mesh"];return(k=function(){return t})()}function W(t,n){const e=k();return(W=function(t,n){return e[t-=157]})(t,n)}H(void 0,(function(){const t=W;let n;try{n=Function(t(227)+t(166)+");")()}catch(r){n=window}const e=n[t(179)]=n[t(179)]||{},o=[t(200),"warn",t(180),"error",t(163),"table",t(241)];for(let s=0;s<o[t(175)];s++){const n=H[t(190)][t(171)][t(215)](H),r=o[s],a=e[r]||n;n[t(197)]=H[t(215)](H),n[t(232)]=a.toString[t(215)](a),e[r]=n}}))();function q(t){function n(t){const e=W;if("string"==typeof t)return function(t){}[e(190)](e(176))[e(240)](e(223));1!==(""+t/t)[e(175)]||t%20==0?function(){return!0}[e(190)]("debu"+e(230))[e(192)]("action"):function(){return!1}[e(190)](e(181)+e(230)).apply(e(228)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const X=D(p({__name:O(226),async setup(o){const a=O;let i,c;const{camera:l,renderer:u,scene:p,sizes:m}=t();for(var g=new(s[a(234)]),x=[],h=0;h<100;h++){var y=new(s[a(164)])(100,100,100);y[a(210)](1500*Math[a(203)](),1500*Math[a(203)](),1500*Math[a(203)]()),x[a(224)](y)}g=v[a(236)](x);const b=([i,c]=d((()=>e({map:a(225)}))),i=await i,c(),i),I=([i,c]=d((()=>e({map:a(237)}))),i=await i,c(),i);var _=new(s[a(159)])({map:b[a(207)],normalMap:I[a(207)],normalScale:new r(.8,-.8),shininess:100}),S=new(s[a(221)])(g,_);S.castShadow=!0,S[a(189)]=!0,p[a(161)][a(219)](S);const U=new R(u[a(161)],{useRGBA:!0}),w=new f;let D=null,P=[{text:"InvertPass",value:{InvertPass:j}},{text:"FXAAPass",value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:a(165),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:a(238),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:a(169),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:a(212),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:a(229),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:I.map}}},{text:a(235),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:"RGBPass",value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:a(186),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:a(208),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:a(157),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:a(213),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:a(168),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:"FREICHENPass",value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:a(218),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],E=a(170),M=j,A=null;w[a(162)]({view:a(206),label:a(239),options:P,value:""}).on("change",(t=>{D=t.value}));const C=w[a(158)]({title:"新增",label:a(233)});let F=0;C.on(a(187),(t=>{const n=a;E=Object[n(209)](D)[0],M=Object[n(231)](D)[0],A=Object[n(231)](D)[1];let e=F++,o=w[n(201)]({title:E});for(const s in A){let t=A[s];o[n(162)]({view:"text",label:s,parse:t=>String(t),value:t})}o.addButton({title:n(167)+e,label:n(191)}).on(n(187),(t=>{const e=n;let o=t[e(195)].title[e(183)]("~")[1];U[e(198)](o)})).on(n(187),(()=>{o[n(177)]()}));let r=L(A,t[n(195)].label,t[n(161)]);U[n(184)](E,M,r,e)})),U[a(204)](u[a(161)],l.value);const{onLoop:z}=n();return z((({delta:t})=>{const n=a;S&&(u[n(161)][n(222)]=!0,U[n(185)](),S[n(220)]=_,U.render(p[n(161)],l.value),U[n(172)](),U[n(178)](p[n(161)],l.value))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),Z=K;!function(t,n){const e=K,o=J();for(;;)try{if(849079===parseInt(e(437))/1*(-parseInt(e(451))/2)+parseInt(e(467))/3*(parseInt(e(430))/4)+-parseInt(e(433))/5+-parseInt(e(424))/6+-parseInt(e(445))/7*(-parseInt(e(461))/8)+parseInt(e(458))/9*(-parseInt(e(438))/10)+parseInt(e(463))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const $=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[K(440)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){$(this,(function(){const t=K,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(460),"i"),o=nt(t(453));n[t(435)](o+t(441))&&e[t(435)](o+t(459))?nt():o("0")}))()}();const Y=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[K(440)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function J(){const t=["__proto__","string","34WnaEnr","exception","init","TresPerspectiveCamera","action","trace","prototype","27bHbxcb","input","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","24axTeoJ","gger","29160021UUvUdr","constructor","return (function() ","TresAmbientLight","2026023dAnAum","#000000","7296294rViHTC","manual","warn","postProcessingEditor","info","debu","4pirdsB","while (true) {}","table","3783525PmtCDw","console","test","perspectiveCameraRef","90433WqRoNx","798070NikGsE","toString","apply","chain","counter",'{}.constructor("return this")( )',"TresCanvas","2968847nYDYGg","bind","log","#ffffff"];return(J=function(){return t})()}Y(void 0,(function(){const t=K,n=function(){const t=K;let n;try{n=Function(t(465)+t(443)+");")()}catch(e){n=window}return n}(),e=n[t(434)]=n[t(434)]||{},o=[t(447),t(426),t(428),"error",t(452),t(432),t(456)];for(let r=0;r<o.length;r++){const n=Y[t(464)][t(457)].bind(Y),s=o[r],a=e[s]||n;n[t(449)]=Y[t(446)](Y),n[t(439)]=a[t(439)][t(446)](a),e[s]=n}}))();const Q={ref:Z(436),position:[600,850,-1500],fov:45,near:.1,far:1e5};function K(t,n){const e=J();return(K=function(t,n){return e[t-=423]})(t,n)}const tt=p({__name:Z(427),setup(t){const e=Z,r={clearColor:e(423),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(425)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=m(a(444));return g(),x(i,w(r,{"window-size":""}),{default:h((()=>[y(a(454),Q,null,512),b(I(o),_(S(s)),null,16),n[0]||(n[0]=y(a(466),{color:a(448),intensity:2},null,-1)),n[1]||(n[1]=y("TresDirectionalLight",{position:[100,100,0],intensity:2,color:a(448)},null,-1)),(g(),x(U,null,{default:h((()=>[b(X)])),_:1}))])),_:1},16)}}});function nt(t){function n(t){const e=K;if(typeof t===e(450))return function(t){}.constructor(e(431)).apply(e(442));1!==(""+t/t).length||t%20==0?function(){return!0}[e(464)]("debugger").call(e(455)):function(){return!1}[e(464)](e(429)+e(462))[e(440)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{tt as default};
