import{m as t,e as n,b as e,U as o}from"./@tresjs.qWeugQU61734239885681.js";import{_ as r,Y as s,k as a,V as i,cX as c,M as l,s as u,n as v,b6 as f,cY as p,m as d,aF as m,c3 as g}from"./three.NPKhDGTA1734239885681.js";import{P as x}from"./tweakpane.yHWGBmom1734239885681.js";import{d as h,a6 as y,e as I,o as b,f as _,g as S,J as U,j as w,u as D,aj as P,ak as E,al as A,m as L}from"./@vue.-THQH3GC1734239885681.js";import{_ as M}from"./@fesjs.1fC4qdx91734239885681.js";import"./@vueuse.GyFlY0FM1734239885681.js";import"./vue-router.KCZH8FnA1734239885681.js";import"./lodash-es.kYt-_xTG1734239885681.js";import"./@qlin.yHhFDldE1734239885681.js";import"./pinia.XvNnwauR1734239885681.js";import"./vue-demi.C4xddsk91734239885681.js";import"./@floating-ui.BPbuo5Gx1734239885681.js";import"./@juggle.7yjBMqoW1734239885681.js";function F(t,n){const e=R();return(F=function(t,n){return e[t-=183]})(t,n)}!function(t,n){const e=F,o=R();for(;;)try{if(411402===parseInt(e(190))/1+-parseInt(e(236))/2+-parseInt(e(222))/3+-parseInt(e(225))/4*(-parseInt(e(238))/5)+parseInt(e(199))/6*(parseInt(e(224))/7)+parseInt(e(201))/8*(-parseInt(e(234))/9)+-parseInt(e(211))/10*(-parseInt(e(186))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[F(217)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){C(this,(function(){const t=F,n=new RegExp(t(194)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=N(t(232));n[t(196)](o+t(188))&&e.test(o+t(193))?N():o("0")}))()}();const z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function R(){const t=["counter","test","return (function() ","type","6iZLlKV","length","4621752BfoYyI","prototype","console","ShaderMaterial","Vector2","now","error","\" couldn't be loaded.","value","while (true) {}","6602080MgzlFn","Matrix3","Vector4","isArray",'{}.constructor("return this")( )',"debu","apply","open","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","string","Vector3","2206713hReXhb","constructor","4455199pBbsAw","96672FISpna","object","stateObject","get","replace","random","bind","init","index","9msYRqt","exec","208244pZeHye","lastIndex","20FytIxs",'Shader "',"name","exception","log","call",'" load was aborted.',"toString","send","trace","message","11SanSLh","v3v","chain","onabort","435477gynxxZ","onerror","hasOwnProperty","input","function *\\( *\\)"];return(R=function(){return t})()}z(void 0,(function(){const t=F,n=function(){const t=F;let n;try{n=Function(t(197)+t(215)+");")()}catch(e){n=window}return n}(),e=n[t(203)]=n[t(203)]||{},o=[t(242),"warn","info",t(207),t(241),"table",t(184)];for(let r=0;r<o[t(200)];r++){const n=z[t(223)][t(202)].bind(z),s=o[r],a=e[s]||n;n.__proto__=z[t(231)](z),n[t(245)]=a[t(245)][t(231)](a),e[s]=n}}))();function T(t,n,e){const o=F;if(typeof t!==o(226)||null===t)return t;const r=Array[o(214)](t)?[]:{};for(const s in t)t[o(192)](s)&&(r[s]=T(t[s])),s==n&&(r[n]=e);return r}function N(t){function n(t){const e=F;if(typeof t===e(220))return function(t){}[e(223)](e(210)).apply(e(195));1!==(""+t/t)[e(200)]||t%20==0?function(){return!0}[e(223)](e(216)+"gger")[e(243)]("action"):function(){return!1}[e(223)]("debugger")[e(217)](e(227)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const B=O;function G(){const t=["type","removePass","stencilBuffer","innerWidth","84306pfhvYG","setRenderTarget","settings",'{}.constructor("return this")( )',"Scene","MeshBasicMaterial","quad","addPass","resolution","console","passItems","camera","render","magFilter","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","tInput","197199sDrSgO","setSize","set","constructor","getOfflineTexture","minFilter","read","table","Stack","PlaneGeometry","8oDKnSg","wrapT","time","useRGBA","shader","width","gger","UnsignedByteType","function *\\( *\\)","front","back","log","length","WebGLRenderTarget","add","splice","chain","exception","swapBuffers","Reset","290OFWTLR","near","push","ClampToEdgeWrapping","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","bind","counter","call","action","makeOrthographic","now","error","texture","init","uniforms","LinearFilter","toScreen","startTime","loadShadervf","innerHeight","CopyPass","2VHaRcO","write","2994215LciegT","test","wrapS","1322281YaSZDj","value","stateObject","OrthographicCamera","copyPass","7704402uTZKBy","uuid","6543920kQfolW","height","material","scene","params","passes","__proto__","apply","far","onWindowResize","input","renderer","toString","646716FcDPNs","makePerspective"];return(G=function(){return t})()}!function(t,n){const e=O,o=G();for(;;)try{if(942658===-parseInt(e(214))/1*(-parseInt(e(209))/2)+parseInt(e(240))/3+-parseInt(e(221))/4+-parseInt(e(211))/5+parseInt(e(219))/6+parseInt(e(234))/7*(-parseInt(e(266))/8)+parseInt(e(256))/9*(parseInt(e(286))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const j=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[O(228)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function O(t,n){const e=G();return(O=function(t,n){return e[t-=189]})(t,n)}!function(){j(this,(function(){const t=O,n=new RegExp(t(274)),e=new RegExp(t(254),"i"),o=H(t(201));n[t(212)](o+t(282))&&e[t(212)](o+t(231))?H():o("0")}))()}();const V=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[O(228)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();V(void 0,(function(){const t=O;let n;try{n=Function("return (function() "+t(243)+");")()}catch(r){n=window}const e=n[t(249)]=n[t(249)]||{},o=[t(277),"warn","info",t(199),t(283),t(263),"trace"];for(let s=0;s<o[t(278)];s++){const n=V[t(259)].prototype.bind(V),r=o[s],a=e[r]||n;n[t(227)]=V[t(193)](V),n[t(233)]=a[t(233)][t(193)](a),e[r]=n}}))();class k{constructor(t,n){const e=O;this[e(271)]=1,this[e(222)]=1,this.settings=n||{},this[e(269)]=this.settings.useRGBA||!1,this[e(232)]=t,this[e(218)]=this[e(208)](this[e(242)]),this[e(224)]=new(r[e(244)]),this[e(246)]=new u(new(r[e(265)])(1,1),new(r[e(245)])),this[e(224)][e(280)](this[e(246)]),this.camera=new(r[e(217)])(1,1,1,1,-1e4,1e4),this[e(275)]=new(r[e(279)])(1,1,{minFilter:void 0!==this[e(242)][e(261)]?this.settings[e(261)]:v,magFilter:void 0!==this[e(242)].magFilter?this[e(242)][e(253)]:v,wrapS:void 0!==this[e(242)][e(213)]?this.settings[e(213)]:r[e(191)],wrapT:void 0!==this[e(242)][e(267)]?this[e(242)][e(267)]:r[e(191)],format:this[e(269)]?f:p,type:void 0!==this[e(242)].type?this[e(242)][e(236)]:r[e(273)],stencilBuffer:void 0===this[e(242)][e(238)]||this.settings[e(238)]}),this[e(276)]=this[e(275)].clone(),this[e(205)]=Date.now(),this[e(226)]={},this[e(264)]={passItems:[],passes:[]}}[B(247)](t,n,e,o){const r=B;this[r(206)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(270)]};this[r(264)].passItems[r(190)](s)}[B(237)](t){const n=B;for(let e=this.Stack[n(250)].length-1;e>=0;e--)this[n(264)][n(250)][e][n(220)]===parseInt(t)&&this[n(264)][n(250)][n(281)](e,1);console.log(this[n(264)][n(250)])}[B(208)](){const t=B;this.Pass[t(195)](this);return this[t(206)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[B(206)](t){const n=B,e=n(192);return this.shader=function(t,n){const e=F,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,u=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,v={sampler2D:{type:"t",value:()=>new s},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new a},vec3:{type:"v3",value:()=>new i},vec4:{type:"v4",value:()=>new(r[F(213)])},bvec2:{type:"v2",value:()=>new(r[F(205)])},bvec3:{type:"v3",value:()=>new i},bvec4:{type:"v4",value:()=>new(r[F(213)])},ivec2:{type:"v2",value:()=>new(r[F(205)])},ivec3:{type:"v3",value:()=>new(r[F(221)])},ivec4:{type:"v4",value:()=>new(r[F(213)])},mat2:{type:"v2",value:()=>new c},mat3:{type:"v3",value:()=>new(r[F(212)])},mat4:{type:"v4",value:()=>new l}},f={float:{type:"fv",value:()=>[]},vec3:{type:e(187),value:()=>[]}};let p;const d={resolution:{type:"v2",value:new(r[e(205)])(1,1),default:!0},time:{type:"f",value:Date[e(206)](),default:!0},tInput:{type:"t",value:new s,default:!0}};let m,g;for(;null!==(p=o[e(235)](n));)p.index===o[e(237)]&&o.lastIndex++,m=p[1],g=p[2],d[g]={type:v[m][e(198)],value:v[m][e(209)]()};for(;null!==(p=u[e(235)](n));)p[e(233)]===o[e(237)]&&o[e(237)]++,m=p[1],g=p[2],p[3],d[g]={type:f[m][e(198)],value:f[m][e(209)]()};return new(r[e(204)])({uniforms:d,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(270)]}Pass(t){const n=B;this[n(270)]=null,this[n(225)]={}}[B(285)](){const t=B;this[t(262)]=this[t(275)],this[t(210)]=this[t(276)]}[B(230)](t,n){const e=B,o=window[e(239)],r=window[e(207)];t[e(257)](1*o,1*r),n.projectionMatrix[e(235)](70,o/r,n[e(189)],n[e(229)]),this[e(257)](o,r);return this[e(260)](o,r,!0)}[B(257)](t,n){const e=B;this.width=t,this[e(222)]=n,this[e(251)].projectionMatrix[e(197)](t/-2,t/2,n/2,n/-2,this[e(251)].near,this[e(251)][e(229)]),this[e(246)].scale.set(t,n,1),this[e(275)].setSize(t,n),this.back[e(257)](t,n)}getOfflineTexture(t,n,e){const o=B;return new(r[o(279)])(t,n,{minFilter:r[o(203)],magFilter:v,format:e?f:p})}[B(252)](t,n,e,o){const r=B;this[r(232)][r(241)](this.write),this.renderer.render(t,n),o||this.swapBuffers()}swapBuffers(){const t=B,n=this[t(210)];this[t(210)]=this[t(262)],this[t(262)]=n}pass(){const t=B;for(let n=0;n<this[t(264)].passItems[t(278)];n++){const e=this[t(264)][t(250)][n][t(270)],o=this[t(264)][t(250)][n][t(225)];if(this.renderer.setRenderTarget(this[t(210)]),e instanceof d){this[t(246)].material=e,this[t(246)][t(223)][t(202)][t(255)][t(215)]=this[t(262)].texture,this[t(246)][t(223)][t(202)].resolution.value[t(258)](this[t(271)],this[t(222)]),this[t(246)].material[t(202)][t(268)][t(215)]=.001*(Date[t(198)]()-this[t(205)]);for(const n in o)this[t(246)][t(223)][t(202)][n][t(215)]=o[n];this[t(232)][t(252)](this.scene,this.camera),this[t(284)]()}}}[B(204)](t,n){const e=B;this[e(232)].setRenderTarget(null),this[e(246)][e(223)]=this[e(218)],this[e(246)][e(223)].uniforms[e(255)][e(215)]=this[e(262)][e(200)],this[e(246)][e(223)][e(202)][e(248)][e(215)].set(this[e(271)],this[e(222)]),this[e(232)][e(252)](this[e(224)],this[e(251)])}}function H(t){function n(t){const e=O;if("string"==typeof t)return function(t){}[e(259)]("while (true) {}")[e(228)](e(194));1!==(""+t/t).length||t%20==0?function(){return!0}[e(259)]("debu"+e(272)).call(e(196)):function(){return!1}[e(259)]("debu"+e(272))[e(228)](e(216)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const W="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}";!function(t,n){const e=Z,o=Y();for(;;)try{if(941352===-parseInt(e(278))/1*(parseInt(e(265))/2)+parseInt(e(260))/3+-parseInt(e(210))/4*(-parseInt(e(229))/5)+-parseInt(e(269))/6*(-parseInt(e(263))/7)+parseInt(e(250))/8+-parseInt(e(266))/9+-parseInt(e(233))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const X=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Z(253)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){X(this,(function(){const t=Z,n=new RegExp(t(256)),e=new RegExp(t(280),"i"),o=$(t(246));n[t(225)](o+t(261))&&e[t(225)](o+t(231))?$():o("0")}))()}();const q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function Z(t,n){const e=Y();return(Z=function(t,n){return e[t-=204]})(t,n)}function Y(){const t=["InvertPass","11278645LNkBqa","add","106rUOKAd","14723802MIRtxb","MeshPhongMaterial","exception","6dXUWRP","list","counter","material","target","map","split","render","BOXBLURPass","11423IkIwTC","移除~","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","gger","debu","onWindowResize","random","VIGNETTE2Pass","新增通道","addFolder","后处理类型","receiveShadow","9692vRXaGs","stateObject","autoClearColor","RGBPass","log","addBlade","plugins/postProcessing/image/1324-normal.jpg","change","constructor","toString","SOBELPass","length","trace","string","FXAAPass","test","addPass","click","addButton","3095TIQRCZ","value","input","DOTPass","14516880hoQUUd","pass","translate","call","text","castShadow","CIRCULARPass","mergeGeometries","BufferGeometry","POISSONPass","toScreen","removePass","table","init","bind","title","dispose","6551504aaNceV","console","push","apply","while (true) {}","info","function *\\( *\\)","TOONPass","prototype","error","2113281qRPWxR","chain"];return(Y=function(){return t})()}q(void 0,(function(){const t=Z;let n;try{n=Function('return (function() {}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(251)]=n[t(251)]||{},o=[t(214),"warn",t(255),t(259),t(268),t(245),t(222)];for(let s=0;s<o.length;s++){const n=q.constructor[t(258)][t(247)](q),r=o[s],a=e[r]||n;n.__proto__=q[t(247)](q),n.toString=a[t(219)].bind(a),e[r]=n}}))();function $(t){function n(t){const e=Z;if(typeof t===e(223))return function(t){}.constructor(e(254))[e(253)](e(271));1!==(""+t/t)[e(221)]||t%20==0?function(){return!0}.constructor(e(282)+e(281))[e(236)]("action"):function(){return!1}[e(218)](e(282)+e(281))[e(253)](e(211)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const K=M(h({__name:"postProcessing",async setup(o){const s=Z;let i,c;const{camera:l,renderer:v,scene:f,sizes:p}=t();for(var d=new(r[s(241)]),h=[],I=0;I<100;I++){var b=new m(100,100,100);b[s(235)](1500*Math.random(),1500*Math[s(204)](),1500*Math[s(204)]()),h[s(252)](b)}d=g[s(240)](h);const _=([i,c]=y((()=>e({map:"plugins/postProcessing/image/1324.jpg"}))),i=await i,c(),i),S=([i,c]=y((()=>e({map:s(216)}))),i=await i,c(),i);var U=new(r[s(267)])({map:_[s(274)],normalMap:S[s(274)],normalScale:new a(.8,-.8),shininess:100}),w=new u(d,U);w[s(238)]=!0,w[s(209)]=!0,f.value[s(264)](w);const D=new k(v[s(230)],{useRGBA:!0}),P=new x;let E=null,A=[{text:s(262),value:{InvertPass:W}},{text:s(224),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:"SEPIAPass",value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:"SNOISEPass",value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:s(277),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:"DENOISEPass",value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:"CGAPass",value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:S[s(274)]}}},{text:s(220),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:s(213),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:s(232),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(239),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:s(242),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:"VIGNETTE1Pass",value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(205),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:"FREICHENPass",value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:s(257),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],L=s(262),M=W,F=null;P[s(215)]({view:s(270),label:s(208),options:A,value:""}).on(s(217),(t=>{E=t[s(230)]}));const C=P[s(228)]({title:"新增",label:s(206)});let z=0;C.on(s(227),(t=>{const n=s;L=Object.keys(E)[0],M=Object.values(E)[0],F=Object.values(E)[1];let e=z++,o=P[n(207)]({title:L});for(const s in F){let t=F[s];o.addBlade({view:n(237),label:s,parse:t=>String(t),value:t})}o[n(228)]({title:n(279)+e,label:"关闭通道"}).on(n(227),(t=>{const e=n;let o=t[e(273)][e(248)][e(275)]("~")[1];D[e(244)](o)})).on(n(227),(()=>{o[n(249)]()}));let r=T(F,t[n(273)].label,t[n(230)]);D[n(226)](L,M,r,e)})),D[s(283)](v.value,l.value);const{onLoop:R}=n();return R((({delta:t})=>{const n=s;w&&(v[n(230)][n(212)]=!0,D.Reset(),w[n(272)]=U,D[n(276)](f[n(230)],l[n(230)]),D[n(234)](),D[n(243)](f[n(230)],l[n(230)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),Q=tt;!function(t,n){const e=tt,o=et();for(;;)try{if(103208===parseInt(e(184))/1+parseInt(e(168))/2*(parseInt(e(196))/3)+parseInt(e(163))/4+-parseInt(e(160))/5+parseInt(e(167))/6*(-parseInt(e(189))/7)+-parseInt(e(200))/8*(parseInt(e(166))/9)+parseInt(e(197))/10*(parseInt(e(194))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const J=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[tt(177)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function tt(t,n){const e=et();return(tt=function(t,n){return e[t-=160]})(t,n)}!function(){J(this,(function(){const t=tt,n=new RegExp(t(190)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=st(t(162));n[t(171)](o+"chain")&&e[t(171)](o+t(164))?st():o("0")}))()}();const nt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function et(){const t=["774tSkpUp","78QKRRyg","93462pWREYD","gger","toString","test","#ffffff","length","TresPerspectiveCamera","trace","table","apply",'{}.constructor("return this")( )',"perspectiveCameraRef","TresAmbientLight","while (true) {}","TresCanvas","call","60400bNVOtF","bind","error","postProcessingEditor","exception","88151bMtnrT","function *\\( *\\)","counter","__proto__","stateObject","21527IKEprk","return (function() ","9wAlyWY","760pxxScc","action","console","14936KcDsIB","string","constructor","302145CJkQZJ","debu","init","554332UDShSb","input","manual"];return(et=function(){return t})()}nt(void 0,(function(){const t=tt;let n;try{n=Function(t(195)+t(178)+");")()}catch(r){n=window}const e=n[t(199)]=n.console||{},o=["log","warn","info",t(186),t(188),t(176),t(175)];for(let s=0;s<o[t(173)];s++){const n=nt[t(202)].prototype[t(185)](nt),r=o[s],a=e[r]||n;n[t(192)]=nt[t(185)](nt),n[t(170)]=a[t(170)].bind(a),e[r]=n}}))();const ot={ref:Q(179),position:[600,850,-1500],fov:45,near:.1,far:1e5},rt=h({__name:Q(187),setup(t){const e=Q,r={clearColor:"#000000",shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(165)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=I(a(182));return b(),_(i,L(r,{"window-size":""}),{default:S((()=>[U(a(174),ot,null,512),w(D(o),P(E(s)),null,16),n[0]||(n[0]=U(a(180),{color:a(172),intensity:2},null,-1)),n[1]||(n[1]=U("TresDirectionalLight",{position:[100,100,0],intensity:2,color:"#ffffff"},null,-1)),(b(),_(A,null,{default:S((()=>[w(K)])),_:1}))])),_:1},16)}}});function st(t){function n(t){const e=tt;if(typeof t===e(201))return function(t){}[e(202)](e(181))[e(177)](e(191));1!==(""+t/t)[e(173)]||t%20==0?function(){return!0}[e(202)](e(161)+e(169))[e(183)](e(198)):function(){return!1}[e(202)](e(161)+e(169))[e(177)](e(193)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{rt as default};
