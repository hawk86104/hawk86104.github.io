import{m as t,e as n,b as e,U as o}from"./@tresjs.FlKhQDQ71735866388381.js";import{_ as r,k as s,V as a,bg as i,b6 as c,cW as l,A as u,aF as v,c3 as f}from"./three.Rja0AEnA1735866388381.js";import{P as p}from"./tweakpane.yHWGBmom1735866388381.js";import{d,a4 as m,e as g,o as x,f as h,g as y,J as I,j as b,u as _,aj as S,ak as U,al as w,m as P}from"./@vue.yG49nQHr1735866388381.js";import{_ as D}from"./@fesjs.u6K5q1hz1735866388381.js";import"./@vueuse.YI3Exu6_1735866388381.js";import"./vue-router.9bMbssc81735866388381.js";import"./lodash-es.kYt-_xTG1735866388381.js";import"./@qlin.yHhFDldE1735866388381.js";import"./pinia.U7dsyb111735866388381.js";import"./vue-demi.C4xddsk91735866388381.js";import"./@floating-ui.BPbuo5Gx1735866388381.js";import"./@juggle.7yjBMqoW1735866388381.js";!function(t,n){const e=M,o=A();for(;;)try{if(231630===-parseInt(e(256))/1+parseInt(e(229))/2*(parseInt(e(191))/3)+parseInt(e(220))/4*(parseInt(e(228))/5)+parseInt(e(206))/6+parseInt(e(212))/7*(-parseInt(e(202))/8)+-parseInt(e(247))/9+parseInt(e(243))/10*(parseInt(e(193))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const E=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function M(t,n){const e=A();return(M=function(t,n){return e[t-=188]})(t,n)}function A(){const t=["send","debu","message","ShaderMaterial","116370sVamEk","491468VggLiX","trace","exec","Vector4","info","apply","Matrix3","length","string","gger","function *\\( *\\)","replace","onload","index","150iskcPe","Texture","input","exception","3636720Qrzcok","test","counter","Vector2","lastIndex",'" load was aborted.',"get","\" couldn't be loaded.","constructor","381589DVWSjM","chain","bind","hasOwnProperty","3cabqyy","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","372097LxDKUx","return (function() ","object","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","while (true) {}","onabort","onerror","log","v3v","23984ThMazw","table","type","console","2285544uuYFjo","call","Vector3","init","error",'{}.constructor("return this")( )',"490PLoGtt","random","value","prototype","Matrix4","WagnerLoadShaderException","stateObject","Matrix2","16dKtWoR","name","toString","warn"];return(A=function(){return t})()}!function(){E(this,(function(){const t=M,n=new RegExp(t(239)),e=new RegExp(t(192),"i"),o=z(t(209));n[t(248)](o+t(188))&&e.test(o+t(245))?z():o("0")}))()}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[M(234)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();L(void 0,(function(){const t=M,n=function(){const t=M;let n;try{n=Function(t(194)+t(211)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(205)]||{},o=[t(200),t(223),t(233),t(210),t(246),t(203),t(230)];for(let r=0;r<o[t(236)];r++){const n=L.constructor[t(215)][t(189)](L),s=o[r],a=e[s]||n;n.__proto__=L[t(189)](L),n[t(222)]=a[t(222)][t(189)](a),e[s]=n}}))();function F(t,n,e){const o=M;if(typeof t!==o(195)||null===t)return t;const r=Array.isArray(t)?[]:{};for(const s in t)t[o(190)](s)&&(r[s]=F(t[s])),s==n&&(r[n]=e);return r}function z(t){function n(t){const e=M;if(typeof t===e(237))return function(t){}[e(255)](e(197))[e(234)](e(249));1!==(""+t/t)[e(236)]||t%20==0?function(){return!0}[e(255)](e(225)+e(238))[e(207)]("action"):function(){return!1}[e(255)](e(225)+e(238))[e(234)](e(218)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const C=G;!function(t,n){const e=G,o=R();for(;;)try{if(278539===-parseInt(e(316))/1*(-parseInt(e(314))/2)+-parseInt(e(328))/3*(-parseInt(e(289))/4)+parseInt(e(341))/5+-parseInt(e(355))/6*(parseInt(e(387))/7)+parseInt(e(386))/8+parseInt(e(312))/9*(-parseInt(e(287))/10)+parseInt(e(382))/11*(-parseInt(e(356))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const N=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){N(this,(function(){const t=G,n=new RegExp(t(340)),e=new RegExp(t(303),"i"),o=B(t(361));n[t(350)](o+t(337))&&e.test(o+t(308))?B():o("0")}))()}();const T=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[G(322)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function R(){const t=["LinearFilter","scale","function *\\( *\\)","362550zvoIgO","set","time","push","renderer","front","quad","warn","console","test","Scene","CopyPass","innerWidth","onWindowResize","6piOVNl","1271976gZUQdY","makeOrthographic","table","stencilBuffer","minFilter","init","counter","stateObject","back","splice","passes","exception","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","error","uniforms","resolution","uuid","removePass","__proto__","Reset","swapBuffers","magFilter","return (function() ","call","params","width","11uCywlh","constructor","info","setSize","2568312sRSmkl","1702736ZBZyWq","getOfflineTexture","debu","RGBAFormat","WebGLRenderTarget","toScreen","MeshBasicMaterial","startTime","now","Pass","pass","1988190jeuFMd","makePerspective","36ucqxbZ","ClampToEdgeWrapping","bind","prototype","Mesh","copyPass","wrapT","value","near","PlaneGeometry","action","far","useRGBA","type","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","camera","gger","scene","log","input",'{}.constructor("return this")( )',"string","settings","18nRTTQO","add","101870ggCsdZ","ShaderMaterial","5gFxoor","passItems","texture","setRenderTarget","material","tInput","apply","write","read","shader","length","wrapS","125733DiAIVK","toString","height","clone","Stack","loadShadervf","projectionMatrix","OrthographicCamera","render","chain"];return(R=function(){return t})()}function G(t,n){const e=R();return(G=function(t,n){return e[t-=287]})(t,n)}T(void 0,(function(){const t=G,n=function(){const t=G;let n;try{n=Function(t(378)+t(309)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(349)]||{},o=[t(307),t(348),t(384),t(369),t(367),t(358),"trace"];for(let r=0;r<o[t(326)];r++){const n=T.constructor[t(292)][t(291)](T),s=o[r],a=e[s]||n;n[t(374)]=T[t(291)](T),n.toString=a[t(329)][t(291)](a),e[s]=n}}))();class j{constructor(t,n){const e=G;this[e(381)]=1,this.height=1,this[e(311)]=n||{},this[e(301)]=this[e(311)][e(301)]||!1,this[e(345)]=t,this[e(294)]=this[e(352)](this[e(311)]),this.scene=new(r[e(351)]),this[e(347)]=new(r[e(293)])(new(r[e(298)])(1,1),new(r[e(393)])),this[e(306)][e(313)](this.quad),this[e(304)]=new(r[e(335)])(1,1,1,1,-1e4,1e4),this.front=new(r[e(391)])(1,1,{minFilter:void 0!==this[e(311)][e(360)]?this.settings.minFilter:r[e(338)],magFilter:void 0!==this[e(311)][e(377)]?this.settings[e(377)]:r[e(338)],wrapS:void 0!==this.settings[e(327)]?this[e(311)][e(327)]:r[e(290)],wrapT:void 0!==this[e(311)][e(295)]?this[e(311)][e(295)]:i,format:this[e(301)]?c:l,type:void 0!==this.settings[e(302)]?this[e(311)][e(302)]:u,stencilBuffer:void 0===this.settings[e(359)]||this[e(311)].stencilBuffer}),this.back=this.front[e(331)](),this[e(394)]=Date[e(395)](),this[e(366)]={},this[e(332)]={passItems:[],passes:[]}}addPass(t,n,e,o){const r=G;this.loadShadervf(n);const s={shaderName:t,params:e,uuid:o,shader:this[r(325)]};this.Stack[r(317)][r(344)](s)}[C(373)](t){const n=C;for(let e=this[n(332)][n(317)][n(326)]-1;e>=0;e--)this[n(332)].passItems[e][n(372)]===parseInt(t)&&this[n(332)][n(317)][n(365)](e,1);console[n(307)](this[n(332)][n(317)])}[C(352)](){const t=C;this.Pass[t(379)](this);return this[t(333)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[C(333)](t){const n=C,e=n(368);return this[n(325)]=function(t,n){const e=M,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,i=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,c={sampler2D:{type:"t",value:()=>new(r[M(244)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new s},vec3:{type:"v3",value:()=>new(r[M(208)])},vec4:{type:"v4",value:()=>new(r[M(232)])},bvec2:{type:"v2",value:()=>new(r[M(250)])},bvec3:{type:"v3",value:()=>new(r[M(208)])},bvec4:{type:"v4",value:()=>new(r[M(232)])},ivec2:{type:"v2",value:()=>new(r[M(250)])},ivec3:{type:"v3",value:()=>new a},ivec4:{type:"v4",value:()=>new(r[M(232)])},mat2:{type:"v2",value:()=>new(r[M(219)])},mat3:{type:"v3",value:()=>new(r[M(235)])},mat4:{type:"v4",value:()=>new(r[M(216)])}},l={float:{type:"fv",value:()=>[]},vec3:{type:e(201),value:()=>[]}};let u;const v={resolution:{type:"v2",value:new(r[e(250)])(1,1),default:!0},time:{type:"f",value:Date.now(),default:!0},tInput:{type:"t",value:new(r[e(244)]),default:!0}};let f,p;for(;null!==(u=o[e(231)](n));)u[e(242)]===o[e(251)]&&o[e(251)]++,f=u[1],p=u[2],v[p]={type:c[f][e(204)],value:c[f][e(214)]()};for(;null!==(u=i[e(231)](n));)u[e(242)]===o[e(251)]&&o.lastIndex++,f=u[1],p=u[2],u[3],v[p]={type:l[f][e(204)],value:l[f][e(214)]()};return new(r[e(227)])({uniforms:v,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(325)]}[C(396)](t){const n=C;this.shader=null,this[n(380)]={}}[C(375)](){const t=C;this[t(324)]=this[t(346)],this[t(323)]=this[t(364)]}[C(354)](t,n){const e=C,o=window[e(353)],r=window.innerHeight;t.setSize(1*o,1*r),n[e(334)][e(288)](70,o/r,n[e(297)],n[e(300)]),this[e(385)](o,r);return this[e(388)](o,r,!0)}[C(385)](t,n){const e=C;this[e(381)]=t,this.height=n,this[e(304)].projectionMatrix[e(357)](t/-2,t/2,n/2,n/-2,this[e(304)][e(297)],this[e(304)][e(300)]),this[e(347)][e(339)].set(t,n,1),this[e(346)][e(385)](t,n),this[e(364)][e(385)](t,n)}[C(388)](t,n,e){const o=C;return new(r[o(391)])(t,n,{minFilter:r[o(338)],magFilter:r[o(338)],format:e?r[o(390)]:l})}[C(336)](t,n,e,o){const r=C;this.renderer[r(319)](this[r(323)]),this[r(345)].render(t,n),o||this[r(376)]()}[C(376)](){const t=C,n=this.write;this[t(323)]=this[t(324)],this[t(324)]=n}[C(397)](){const t=C;for(let n=0;n<this[t(332)][t(317)][t(326)];n++){const e=this[t(332)][t(317)][n][t(325)],o=this[t(332)][t(317)][n][t(380)];if(this.renderer.setRenderTarget(this[t(323)]),e instanceof r[t(315)]){this[t(347)].material=e,this.quad[t(320)][t(370)].tInput[t(296)]=this.read.texture,this[t(347)].material[t(370)][t(371)][t(296)][t(342)](this[t(381)],this.height),this[t(347)][t(320)][t(370)][t(343)][t(296)]=.001*(Date[t(395)]()-this[t(394)]);for(const n in o)this.quad.material[t(370)][n][t(296)]=o[n];this.renderer[t(336)](this[t(306)],this.camera),this[t(376)]()}}}[C(392)](t,n){const e=C;this[e(345)][e(319)](null),this[e(347)][e(320)]=this.copyPass,this[e(347)][e(320)][e(370)][e(321)].value=this.read[e(318)],this[e(347)][e(320)].uniforms[e(371)][e(296)][e(342)](this.width,this[e(330)]),this[e(345)][e(336)](this[e(306)],this.camera)}}function B(t){function n(t){const e=G;if(typeof t===e(310))return function(t){}[e(383)]("while (true) {}").apply(e(362));1!==(""+t/t)[e(326)]||t%20==0?function(){return!0}[e(383)](e(389)+e(305))[e(379)](e(299)):function(){return!1}[e(383)](e(389)+e(305))[e(322)](e(363)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const V="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",O=q;!function(t,n){const e=q,o=W();for(;;)try{if(948760===parseInt(e(374))/1*(parseInt(e(360))/2)+parseInt(e(421))/3*(-parseInt(e(365))/4)+-parseInt(e(424))/5+parseInt(e(407))/6+parseInt(e(371))/7+parseInt(e(379))/8+-parseInt(e(403))/9*(parseInt(e(375))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(388)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){H(this,(function(){const t=q,n=new RegExp("function *\\( *\\)"),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=X(t(377));n.test(o+"chain")&&e.test(o+"input")?X():o("0")}))()}();const k=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function W(){const t=["BufferGeometry","exception","target","关闭通道","18FdsePF","POISSONPass","keys","VIGNETTE1Pass","6247818jNUOzY","addBlade","Mesh","CIRCULARPass","bind","InvertPass","FXAAPass","Reset","pass","prototype","click","autoClearColor","toScreen","VIGNETTE2Pass","6HUnytq","render","values","188590styTxL","console","debu","新增通道","warn","addButton","table","RGBPass","log","156390dqrXVS","addPass","MeshPhongMaterial","constructor","DENOISEPass","2600120ZuGEvp","DOTPass","mergeGeometries","length","change","plugins/postProcessing/image/1324.jpg","10211418AvVJqW","BOXBLURPass","label","1vAupGg","3239340gKbblw","list","init","action","2849072Lodmxs","split","postProcessing","Vector2","error","random","receiveShadow","counter","info","apply","string","stateObject","map","while (true) {}","value","gger","text","SOBELPass","translate","__proto__"];return(W=function(){return t})()}function q(t,n){const e=W();return(q=function(t,n){return e[t-=355]})(t,n)}k(void 0,(function(){const t=q;let n;try{n=Function('return (function() {}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(425)]=n[t(425)]||{},o=[t(359),t(355),t(387),t(383),t(400),t(357),"trace"];for(let s=0;s<o[t(368)];s++){const n=k[t(363)][t(416)][t(411)](k),r=o[s],a=e[r]||n;n[t(398)]=k.bind(k),n.toString=a.toString[t(411)](a),e[r]=n}}))();function X(t){function n(t){const e=q;if(typeof t===e(389))return function(t){}[e(363)](e(392))[e(388)](e(386));1!==(""+t/t)[e(368)]||t%20==0?function(){return!0}[e(363)](e(426)+e(394)).call(e(378)):function(){return!1}[e(363)](e(426)+e(394))[e(388)](e(390)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const Z=D(d({__name:O(381),async setup(o){const s=O;let a,i;const{camera:c,renderer:l,scene:u,sizes:d}=t();for(var g=new(r[s(399)]),x=[],h=0;h<100;h++){var y=new v(100,100,100);y[s(397)](1500*Math[s(384)](),1500*Math[s(384)](),1500*Math[s(384)]()),x.push(y)}g=f[s(367)](x);const I=([a,i]=m((()=>e({map:s(370)}))),a=await a,i(),a),b=([a,i]=m((()=>e({map:"plugins/postProcessing/image/1324-normal.jpg"}))),a=await a,i(),a);var _=new(r[s(362)])({map:I[s(391)],normalMap:b[s(391)],normalScale:new(r[s(382)])(.8,-.8),shininess:100}),S=new(r[s(409)])(g,_);S.castShadow=!0,S[s(385)]=!0,u.value.add(S);const U=new j(l.value,{useRGBA:!0}),w=new p;let P=null,D=[{text:s(412),value:{InvertPass:V}},{text:s(413),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:"SEPIAPass",value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:"SNOISEPass",value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:s(372),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:s(364),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:"CGAPass",value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:b[s(391)]}}},{text:s(396),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:s(358),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:s(366),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(410),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:s(404),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:s(406),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(420),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:"FREICHENPass",value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:"TOONPass",value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],E=s(412),M=V,A=null;w.addBlade({view:s(376),label:"后处理类型",options:D,value:""}).on(s(369),(t=>{P=t[s(393)]}));const L=w.addButton({title:"新增",label:s(427)});let z=0;L.on(s(417),(t=>{const n=s;E=Object[n(405)](P)[0],M=Object[n(423)](P)[0],A=Object[n(423)](P)[1];let e=z++,o=w.addFolder({title:E});for(const s in A){let t=A[s];o[n(408)]({view:n(395),label:s,parse:t=>String(t),value:t})}o[n(356)]({title:"移除~"+e,label:n(402)}).on(n(417),(t=>{const e=n;let o=t.target.title[e(380)]("~")[1];U.removePass(o)})).on(n(417),(()=>{o.dispose()}));let r=F(A,t[n(401)][n(373)],t.value);U[n(361)](E,M,r,e)})),U.onWindowResize(l[s(393)],c.value);const{onLoop:C}=n();return C((({delta:t})=>{const n=s;S&&(l[n(393)][n(418)]=!0,U[n(414)](),S.material=_,U[n(422)](u[n(393)],c[n(393)]),U[n(415)](),U[n(419)](u[n(393)],c.value))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]);!function(t,n){const e=tt,o=Y();for(;;)try{if(850146===-parseInt(e(347))/1*(parseInt(e(355))/2)+parseInt(e(364))/3+parseInt(e(346))/4*(-parseInt(e(368))/5)+parseInt(e(378))/6+-parseInt(e(379))/7*(parseInt(e(383))/8)+parseInt(e(372))/9+parseInt(e(345))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const $=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[tt(374)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){$(this,(function(){const t=tt,n=new RegExp(t(348)),e=new RegExp(t(354),"i"),o=nt(t(373));n[t(370)](o+t(361))&&e.test(o+"input")?nt():o("0")}))()}();const K=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[tt(374)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();K(void 0,(function(){const t=tt,n=function(){const t=tt;let n;try{n=Function(t(363)+t(365)+");")()}catch(e){n=window}return n}(),e=n[t(380)]=n[t(380)]||{},o=["log",t(369),t(367),t(359),t(375),t(360),t(349)];for(let r=0;r<o[t(358)];r++){const n=K[t(352)].prototype[t(351)](K),s=o[r],a=e[s]||n;n.__proto__=K[t(351)](K),n.toString=a[t(376)][t(351)](a),e[s]=n}}))();const J={ref:"perspectiveCameraRef",position:[600,850,-1500],fov:45,near:.1,far:1e5},Q=d({__name:"postProcessingEditor",setup(t){const e=tt,r={clearColor:e(382),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(362)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=g(a(371));return x(),h(i,P(r,{"window-size":""}),{default:y((()=>[I(a(366),J,null,512),b(_(o),S(U(s)),null,16),n[0]||(n[0]=I(a(350),{color:"#ffffff",intensity:2},null,-1)),n[1]||(n[1]=I(a(353),{position:[100,100,0],intensity:2,color:"#ffffff"},null,-1)),(x(),h(w,null,{default:y((()=>[b(Z)])),_:1}))])),_:1},16)}}});function Y(){const t=["table","chain","manual","return (function() ","990357mKHgtv",'{}.constructor("return this")( )',"TresPerspectiveCamera","info","7151185JdLpqm","warn","test","TresCanvas","2673513ZhuQGd","init","apply","exception","toString","debu","3465030TjsJMN","35JZWzFP","console","gger","#000000","1107768XlnPuq","action","call","32675630sAtZrp","4HHUtoF","823EZKkop","function *\\( *\\)","trace","TresAmbientLight","bind","constructor","TresDirectionalLight","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","3644WelWOr","while (true) {}","string","length","error"];return(Y=function(){return t})()}function tt(t,n){const e=Y();return(tt=function(t,n){return e[t-=343]})(t,n)}function nt(t){function n(t){const e=tt;if(typeof t===e(357))return function(t){}[e(352)](e(356))[e(374)]("counter");1!==(""+t/t).length||t%20==0?function(){return!0}.constructor("debu"+e(381))[e(344)](e(343)):function(){return!1}.constructor(e(377)+e(381)).apply("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{Q as default};
