import{a6 as t,r as n,al as e,V as o,K as r,a9 as a}from"./three.0L1oP_mX1722313330047.js";import{$ as i,N as s,d as c,x as l}from"./@tresjs.Q03Md-En1722313330047.js";import"./index.pUmzQPJL1722313330047.js";import{a as u}from"./simplex-noise.MycypUyu1722313330047.js";import{C as f}from"./index._gvjf93K1722313330047.js";import{d as p,a4 as h,o as m,D as v,J as d,u as g,r as x,f as y,g as w,j as b,aj as _,ak as j,al as M}from"./@vue.Q1VpS3901722313330047.js";import{_ as z}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.p_oi_XfJ1722313330047.js";import"./tweakpane.yHWGBmom1722313330047.js";import"./@vueuse.UFv615y21722313330047.js";import"./lamina.a0WQU6Lr1722313330047.js";import"./glsl-tokenizer.pGV5rb2g1722313330047.js";import"./@amap.cDim55ZW1722313330047.js";import"./glsl-token-descope.FIwxKtGk1722313330047.js";import"./glsl-token-depth.A7GqVv6f1722313330047.js";import"./glsl-token-scope.75Ba2MiO1722313330047.js";import"./glsl-token-properties.PAx6Ln6w1722313330047.js";import"./glsl-token-assignments.qRbPCoTh1722313330047.js";import"./glsl-token-string.u6gBgKVD1722313330047.js";import"./glsl-token-functions.VQWPL_na1722313330047.js";import"./object-hash.aoN2vIR61722313330047.js";import"./jszip.49pgsWkw1722313330047.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.-_F_bIcs1722313330047.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.AymIUspQ1722313330047.js";import"./three-stdlib.-J90B2tF1722313330047.js";import"./@pmndrs.B3pPHFpB1722313330047.js";import"./utils.QXzYk6hS1722313330047.js";const A=T;function I(){const t=["needsUpdate","test","3229465RZkscC","position","382152NHZBYu","toString","length","bind","warn","value","4885LzjgpA","chain","5546672nTdMkb","1753155Weeosk","attributes","attributes-halfRootAngleCos","sin","apply","normalize","error","string","offsetsF32","init","toneMapped","return (function() ","cos","TresGroup","TresMesh","material","uniforms","while (true) {}","PlaneGeometry","width","function *\\( *\\)","call","set","7vbBGtS","index","action","11325171JulwNV","random","stateObject","push","lookAt","254BIsvUa","grass","prototype","__proto__","info","halfRootAngleCosF32","DoubleSide","time","attributes-stretch","8orSVTm","TresMeshStandardMaterial","array","Vector3","side","exception","orientationsF32","table","halfRootAngleSinF32","instances","trace","attributes-orientation",'{}.constructor("return this")( )',"InstancedBufferAttribute","#000f00","20eBmvjb","constructor","TresInstancedBufferGeometry","computeVertexNormals","Color","133602JEfxzC","convertSRGBToLinear","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","joints","console","alphaMap","geometry","debu","gger","attributes-halfRootAngleSin","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","attributes-position","translate","Vector4"];return(I=function(){return t})()}!function(t,n){const e=T,o=I();for(;;)try{if(355896===-parseInt(e(183))/1*(parseInt(e(130))/2)+-parseInt(e(177))/3*(-parseInt(e(139))/4)+parseInt(e(175))/5+parseInt(e(159))/6+-parseInt(e(122))/7*(-parseInt(e(185))/8)+parseInt(e(186))/9*(parseInt(e(154))/10)+-parseInt(e(125))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[T(190)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){C(this,(function(){const t=T,n=new RegExp(t(119)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=E(t(195));n[t(174)](o+t(184))&&e[t(174)](o+"input")?E():o("0")}))()}();const k=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();k(void 0,(function(){const t=T,n=function(){const t=T;let n;try{n=Function(t(110)+t(151)+");")()}catch(e){n=window}return n}(),e=n[t(163)]=n.console||{},o=["log",t(181),t(134),t(192),t(144),t(146),t(149)];for(let r=0;r<o.length;r++){const n=k.constructor[t(132)][t(180)](k),a=o[r],i=e[a]||n;n[t(133)]=k[t(180)](k),n[t(178)]=i.toString[t(180)](i),e[a]=n}}))();const S=[A(114)],R=[A(123),A(170),"attributes-uv","attributes-offset",A(150),A(138),A(168),A(188)],D=[A(165)],F=[A(143)];function T(t,n){const e=I();return(T=function(t,n){return e[t-=109]})(t,n)}const B=p({__name:A(131),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(a){const c=A;let l,p;const x=([l,p]=h((()=>s({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),l=await l,p(),l),y=a,w=u(Math.random);function b(t,n){const o=t.x*n.w+t.y*n.z-t.z*n.y+t.w*n.x,r=-t.x*n.z+t.y*n.w+t.z*n.x+t.w*n.y,a=t.x*n.y-t.y*n.x+t.z*n.w+t.w*n.z,i=-t.x*n.x-t.y*n.y-t.z*n.z+t.w*n.w;return new e(o,r,a,i)}function _(t,n){var e=2*w(t/50,n/50);return e+=4*w(t/100,n/100),e+=.2*w(t/10,n/10)}const j=function(n,a){const i=T,s=[],c=[],l=[],u=[],f=[];let p=new(t[i(172)]),h=new e;const m=-.25;for(let e=0;e<n;e++){const r=Math[i(126)]()*a-a/2,v=Math[i(126)]()*a-a/2,d=_(r,v);s[i(128)](r,d,v);let g=Math.PI-Math.random()*(2*Math.PI);u[i(128)](Math[i(189)](.5*g)),f[i(128)](Math.cos(.5*g));let x=new o(0,1,0),y=x.x*Math[i(189)](g/2),w=x.y*Math.sin(g/2),j=x.z*Math[i(189)](g/2),M=Math.cos(g/2);p.set(y,w,j,M)[i(191)](),g=.5*Math[i(126)]()+m,x=new(t[i(142)])(1,0,0),y=x.x*Math[i(189)](g/2),w=x.y*Math[i(189)](g/2),j=x.z*Math[i(189)](g/2),M=Math[i(111)](g/2),h[i(121)](y,w,j,M)[i(191)](),p=b(p,h),g=.5*Math[i(126)]()+m,x=new(t[i(142)])(0,0,1),y=x.x*Math[i(189)](g/2),w=x.y*Math[i(189)](g/2),j=x.z*Math[i(189)](g/2),M=Math.cos(g/2),h[i(121)](y,w,j,M).normalize(),p=b(p,h),c[i(128)](p.x,p.y,p.z,p.w),e<n/3?l[i(128)](1.8*Math[i(126)]()):l[i(128)](Math[i(126)]())}return{offsetsF32:new r(new Float32Array(s),3),orientationsF32:new(t[i(152)])(new Float32Array(c),4),stretchesF32:new(t[i(152)])(new Float32Array(l),1),halfRootAngleCosF32:new(t[i(152)])(new Float32Array(f),1),halfRootAngleSinF32:new(t[i(152)])(new Float32Array(u),1)}}(y[c(148)],y[c(118)]),M=new(t[c(117)])(y.bW,y.bH,1,y[c(162)])[c(171)](0,y.bH/2,0),z=new n(y[c(118)],y[c(118)],32,32);z[c(129)](new(t[c(142)])(0,1,0));const I=z.attributes[c(176)];for(let t=0;t<I[c(141)].length;t+=3)I.array[t+1]=_(I.array[t],I[c(141)][t+2]);z[c(187)].position[c(173)]=!0,z[c(157)]();const C=new(f({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(t[c(158)])(.3,.9,0)[c(160)](),bottomColor:new(t[c(158)])(0,.2,0).convertSRGBToLinear()},c(161),c(169),(n=>{const e=c;n[e(143)]=t[e(136)]})));C.map=x.map,C[c(164)]=x.alphaMap,C[c(109)]=!1;const{onLoop:k}=i();return k((({elapsed:t})=>{const n=c;C[n(115)][n(137)][n(182)]=t/4})),(n,e)=>{const o=c;return m(),v(o(112),null,[d("TresMesh",{material:g(C)},[d(o(156),{index:g(M)[o(123)],"attributes-position":g(M)[o(187)][o(176)],"attributes-uv":g(M)[o(187)].uv,"attributes-offset":g(j)[o(194)],"attributes-orientation":g(j)[o(145)],"attributes-stretch":g(j).stretchesF32,"attributes-halfRootAngleSin":g(j)[o(147)],"attributes-halfRootAngleCos":g(j)[o(135)]},null,8,R)],8,S),d(o(113),{position:[0,0,0],geometry:g(z)},[d(o(140),{color:o(153),side:t[o(136)]},null,8,F)],8,D)])}}});function E(t){function n(t){const e=T;if(typeof t===e(193))return function(t){}.constructor(e(116))[e(190)]("counter");1!==(""+t/t)[e(179)]||t%20==0?function(){return!0}.constructor(e(166)+"gger")[e(120)](e(124)):function(){return!1}[e(155)](e(166)+e(167))[e(190)](e(127)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const L=P;!function(t,n){const e=P,o=V();for(;;)try{if(938492===-parseInt(e(229))/1*(-parseInt(e(204))/2)+parseInt(e(203))/3*(parseInt(e(214))/4)+parseInt(e(210))/5*(parseInt(e(219))/6)+-parseInt(e(215))/7+parseInt(e(220))/8+-parseInt(e(216))/9*(-parseInt(e(217))/10)+-parseInt(e(221))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){O(this,(function(){const t=P,n=new RegExp(t(236)),e=new RegExp(t(225),"i"),o=U(t(208));n[t(231)](o+t(232))&&e.test(o+t(230))?U():o("0")}))()}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();H(void 0,(function(){const t=P;let n;try{n=Function(t(201)+t(200)+");")()}catch(r){n=window}const e=n[t(224)]=n[t(224)]||{},o=[t(199),t(223),t(205),t(213),t(211),t(198),"trace"];for(let a=0;a<o[t(228)];a++){const n=H[t(227)].prototype[t(207)](H),r=o[a],i=e[r]||n;n[t(206)]=H[t(207)](H),n[t(222)]=i[t(222)].bind(i),e[r]=n}}))();const N=d(L(234),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1);function P(t,n){const e=V();return(P=function(t,n){return e[t-=198]})(t,n)}function V(){const t=["4517847RjZNHD","30cmJmJm","string","2647848qaUOBd","6797320sALsUy","56319571IguKHI","toString","warn","console","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","debu","constructor","length","52901GVTNTb","input","test","chain","call","TresPerspectiveCamera","grass","function *\\( *\\)","table","log",'{}.constructor("return this")( )',"return (function() ","stateObject","321fRNLVu","50tYWKrE","info","__proto__","bind","init","apply","20Ozjsao","exception","action","error","39980gEAyQh","3180681EDOAMz"];return(V=function(){return t})()}const G=p({__name:L(235),setup(t){const n=x({alpha:!0,toneMapping:a,windowSize:!0,clearColor:6710886}),e=x({enableDamping:!0,autoRotate:!1});return(t,o)=>(m(),y(g(l),_(j(n)),{default:w((()=>[N,b(g(c),_(j(e)),null,16),(m(),y(M,null,{default:w((()=>[b(B)])),_:1})),(m(),y(M,null,{default:w((()=>[b(g(z),{texture:"https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr"})])),_:1}))])),_:1},16))}});function U(t){function n(t){const e=P;if(typeof t===e(218))return function(t){}.constructor("while (true) {}")[e(209)]("counter");1!==(""+t/t).length||t%20==0?function(){return!0}[e(227)]("debugger")[e(233)](e(212)):function(){return!1}.constructor(e(226)+"gger")[e(209)](e(202)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{G as default};
