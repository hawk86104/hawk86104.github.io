import{e,a,b as n}from"./@tresjs.BTaYoA_d1753782659653.js";import{P as t}from"./tweakpane.C0HtAJSg1753782659653.js";import{d as o,aa as i,v as r,h as l,e as s,o as v,f as u,I as p,j as m,u as f,m as d,a7 as c,a8 as h}from"./@vue.BzMISRrV1753782659653.js";import{aa as g,_ as x}from"./three.COeOkYug1753782659653.js";import"./postprocessing.CeqeRjXM1753782659653.js";import"./@vueuse.kHMOgCjI1753782659653.js";const T=o({__name:"pointsEarth",async setup(o){let T,y;const S={color:"#17c5a9",pointSize:4},w={clearColor:"#122148",shadows:!1,alpha:!1,outputColorSpace:x},z={color:S.color,wireframe:!0,transparent:!0,opacity:.2},_=([T,y]=i((()=>n(["./plugins/earthSample/image/pointsEarth/00_earthmap1k.jpg","./plugins/earthSample/image/pointsEarth/circle.png","./plugins/earthSample/image/pointsEarth/04_rainbow1k.jpg","./plugins/earthSample/image/pointsEarth/01_earthbump1k.jpg","./plugins/earthSample/image/pointsEarth/02_earthspec1k.jpg"]))),T=await T,y(),T),b=_[0],j=_[1],P=_[2],E=_[3],D=_[4],C={uniforms:{size:{type:"f",value:S.pointSize},uTime:{type:"f",value:0},uWaveHeight:{type:"f",value:.075},uWaveSpeed:{type:"f",value:.2},colorTexture:{type:"t",value:P},elevTexture:{type:"t",value:E},alphaTexture:{type:"t",value:D},earthTexture:{type:"t",value:b},starTexture:{type:"t",value:j}},vertexShader:"  uniform float size;\n  uniform sampler2D elevTexture;\n  uniform sampler2D alphaTexture;\n  uniform float uTime;\n  uniform float uWaveHeight;\n  uniform float uWaveSpeed;\n\n  varying vec2 vUv;\n  varying float vVisible;\n  varying float vAlpha;\n  varying float vElevation;\n  // Function to generate fBm with vec3 input\n  float random(vec3 st) {\n    return fract(sin(dot(st.xyz, vec3(12.9898,78.233,45.164))) * 43758.5453123);\n}\n\nfloat noise(vec3 st) {\n    vec3 i = floor(st);\n    vec3 f = fract(st);\n\n    // Eight corners in 3D of a tile\n    float a = random(i);\n    float b = random(i + vec3(1.0, 0.0, 0.0));\n    float c = random(i + vec3(0.0, 1.0, 0.0));\n    float d = random(i + vec3(1.0, 1.0, 0.0));\n    float e = random(i + vec3(0.0, 0.0, 1.0));\n    float f1 = random(i + vec3(1.0, 0.0, 1.0));\n    float g = random(i + vec3(0.0, 1.0, 1.0));\n    float h = random(i + vec3(1.0, 1.0, 1.0));\n\n    vec3 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(mix(mix(a, b, u.x), mix(c, d, u.x), u.y),\n               mix(mix(e, f1, u.x), mix(g, h, u.x), u.y), u.z);\n}\n\nfloat fbm(vec3 st) {\n    float value = 0.0;\n    float amplitude = 0.5;\n\n    for (int i = 0; i < 5; i++) {\n        value += amplitude * noise(st);\n        st *= 2.0;\n        amplitude *= 0.5;\n    }\n    return value;\n}\n\n  void main() {\n    vUv = uv;\n    float alphaLand = 1.0 - texture2D(alphaTexture, vUv).r;\n    vAlpha = alphaLand;\n    vec3 newPosition = position;\n\n    if(alphaLand < 0.5) {\n      // Sea\n      // fBm for wave-like displacement\n      float waveHeight = uWaveHeight; // Adjust wave height as needed\n      float waveSpeed = uWaveSpeed;  // Adjust wave speed as needed\n      float displacement = (fbm(newPosition * 5.0 + uTime * waveSpeed) * 2.0 - 1.0) * waveHeight;\n      vElevation = displacement;\n      newPosition += normal * displacement ;\n    }\n\n    vec4 mvPosition = modelViewMatrix * vec4( newPosition, 1.0 );\n    float elv = texture2D(elevTexture, vUv).r;\n    vec3 vNormal = normalMatrix * normal;\n    vVisible = step(0.0, dot( -normalize(mvPosition.xyz), normalize(vNormal)));\n    mvPosition.z += 0.45 * elv;\n\n    // 求出 mvPosition 距离相机的距离\n    float dist = length(mvPosition.xyz);\n    // 根据距离调整 size\n    float pointSize = size * (1.0 - dist / 10.0);\n    gl_PointSize = max(pointSize, 1.0);\n    gl_PointSize = pointSize;\n    gl_Position = projectionMatrix * mvPosition;\n  }\n",fragmentShader:"  uniform sampler2D colorTexture;\n  // uniform sampler2D alphaTexture;\n  uniform sampler2D earthTexture;\n  uniform sampler2D starTexture;\n\n  varying vec2 vUv;\n  varying float vVisible;\n  varying float vAlpha;\n  varying float vElevation;\n\n  void main() {\n    if (floor(vVisible + 0.1) == 0.0) discard;\n    vec2 coord = gl_PointCoord;\n    float alpha = texture2D(starTexture, coord).a;\n    // 根据 alpha 值来裁剪形状\n    if (alpha < 0.1) discard;\n\n    // float alphaLand = 1.0 - texture2D(alphaTexture, vUv).r;\n    vec3 color = texture2D(colorTexture, vUv).rgb;\n    vec3 earth = texture2D(earthTexture, vUv).rgb;\n    color = mix(color, earth, 0.65);\n    if(\n      vAlpha > 0.5\n    ) {\n      gl_FragColor = vec4(color, vAlpha);\n    }else {\n      // 对于海洋部分，根据 vElevation 调整颜色\n      float elevationEffect = clamp(vElevation*30.0, -1.0, 1.0); // 将 vElevation 限制在 [-1, 1] 范围内\n      vec3 deep_sea_blue = vec3(0.004, 0.227, 0.388);\n      vec3 adjustedColor = mix(deep_sea_blue, earth*1.75, (elevationEffect + 1.0) * 0.5); // 根据 vElevation 调整颜色\n      gl_FragColor = vec4(adjustedColor, 1.0-vAlpha);\n    }\n  }\n",transparent:!0,side:g},k=r(),A=r(),M=(new t).addFolder({title:"Debug"});M.addBinding(S,"color",{type:"color"}).on("change",(({value:e})=>{A.value.color.set(e)})),M.addBinding(C.uniforms.size,"value",{min:.1,max:10,step:.1,label:"粒子大小"}),M.addBinding(C.uniforms.uWaveHeight,"value",{min:.01,max:.5,step:.01,label:"海浪高度"}),M.addBinding(C.uniforms.uWaveSpeed,"value",{min:.01,max:1,step:.01,label:"海浪变化速度"});const{onLoop:U}=e();return U((({delta:e})=>{k.value&&(k.value.rotation.y+=.002,C.uniforms.uTime.value+=10*e)})),(e,n)=>{const t=l("TresCanvas");return v(),s(t,d(w,{"window-size":""}),{default:u((()=>[n[2]||(n[2]=p("TresPerspectiveCamera",{position:[0,0,3.5],fov:45,near:.1,far:20},null,-1)),m(f(a),{autoRotate:!0,autoRotateSpeed:2}),p("TresGroup",{ref_key:"groupRef",ref:k},[p("TresMesh",null,[n[0]||(n[0]=p("TresIcosahedronGeometry",{args:[1,4]},null,-1)),p("TresMeshBasicMaterial",d({ref_key:"wireframeMaterialRef",ref:A},z),null,16)]),p("TresPoints",null,[n[1]||(n[1]=p("TresIcosahedronGeometry",{args:[1,128]},null,-1)),p("TresShaderMaterial",c(h(C)),null,16)])],512),n[3]||(n[3]=p("TresHemisphereLight",{args:["#ffffff","#080820",3]},null,-1))])),_:1},16)}}});export{T as default};
