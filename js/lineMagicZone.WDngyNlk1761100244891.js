import{P as e}from"./tweakpane.CqZAnw7f1761100244891.js";import{_ as t,d as n,K as a}from"./@tresjs.DqJWjmrH1761100244891.js";import{_ as o}from"./reflectorDUDV.vue_vue_type_script_setup_true_lang.C3soJrEE1761100244891.js";import"./vanilla.esm.5.5.0.CsbunUBT1761100244891.js";import"./Resource.mX5inOAT1761100244891.js";import{u as i}from"./useTexture.6Wyv_tgl1761100244891.js";import{d as s,af as r,ac as l,w as m,G as d,o as u,I as f,h as p,u as h,r as v,g,b as c,e as x,ap as I,m as S}from"./@vue.CKlgtJke1761100244891.js";import{d0 as w,i as T,k as U,bJ as j,h as N}from"./three.DvmzhRS91761100244891.js";import"./postprocessing.CYU4Fj-U1761100244891.js";import"./@vueuse.mZcBai3M1761100244891.js";import"./dither.glsl.tNAdkJUa1761100244891.js";import"./Reflector.C-cnab8L1761100244891.js";import"./OimoPhysicsBuffer.RP9_cA631761100244891.js";import"./oimophysics.CfVKSiAm1761100244891.js";import"./vite-plugin-qiankun.B06WoCqG1761100244891.js";import"./utils.CNife3_q1761100244891.js";import"./object-hash.zo7S6bgL1761100244891.js";import"./@amap.fjyZdsU91761100244891.js";import"./jszip.DTlig5CR1761100244891.js";const b=["rotateX"],y=["position","aIndex","aNormal"],_=s({__name:"lineMagicZone",props:{height:{default:1.6},speed:{default:1},color:{default:"#90ee90"}},async setup(e){let a,o;const s=r(),v=e,g=([a,o]=l(()=>i(["./plugins/basic/shine/image/round.png","./plugins/digitalCity/image/noise/noisePerlin.png"])),a=await a,o(),a),c=new w(0,0,8,8,0,2*Math.PI,!1,0),x=[];for(let t=0;t<5;t++)x.push(...c.getPoints(719)),c.xRadius+=.2,c.yRadius+=.2;const I=new Float32Array(x.map((e,t)=>t)),S=(new T).setFromPoints(x).getAttribute("position").array,_=new Float32Array(S.length);for(let t=0;t<S.length/3;t++){const e=3*t;S[e+1]+=.15*Math.floor(t/720);const n=t%720*3,a=3*(t%720+2880);_[e]=S[a]-S[n],_[e+1]=S[a+1]-S[n+1],_[e+2]=S[a+2]-S[n+2]}const P={uTime:{value:0},uScale:{value:s.scale?s.scale:1},uHeight:{value:v.height},uPerlinTexture:{value:g[1]},baseColor:{value:new U(v.color)}},{onRender:C}=t();return C(()=>{P.uTime.value+=.01*v.speed}),m(()=>[v.color,s.scale,v.height],([e,t,n])=>{P.baseColor.value.set(e),P.uScale.value=t,P.uHeight.value=n}),(e,t)=>(u(),d("TresGroup",null,[f("TresPoints",{rotateX:-Math.PI/2,scale:.1},[f("TresBufferGeometry",{position:[h(S),3],aIndex:[h(I),1],aNormal:[h(_),3]},null,8,y),p(h(n),{baseMaterial:N,vertexShader:"\nvarying vec2 vMapUv;\nattribute float aIndex;\nattribute vec3 aNormal;\nuniform float uTime;\nuniform float uScale;\nuniform float uHeight;\nuniform sampler2D uPerlinTexture;\nvarying float vIndex;\nvarying float vSelfIndex;\nvarying float vCircleNum;\nfloat getStrength(float aIndex, float uTime, vec3 aNormal) {\n    float selfIndex = mod(aIndex, 720.0);\n    float circleNum = (aIndex - selfIndex) / 720.0;\n    vec3 pDir = normalize(aNormal);\n    float waveWidth = 90.0;\n    float totalLength = 720.0;\n    float modUtime = mod(uTime * 50.0, 720.0);\n    float dw = waveWidth * 0.5;\n    float smoothStart = smoothstep(modUtime, modUtime + dw, selfIndex);\n    float smoothEnd = 1.0 - smoothstep(modUtime + waveWidth - dw, modUtime + waveWidth, selfIndex);\n    float strength = min(smoothStart, smoothEnd);\n    float isOver = step(720.0, modUtime + waveWidth);\n    float over = (modUtime + waveWidth - 720.0);\n    float isOverStep1 = (1.0 - step(dw, over)) * isOver;\n    float isOverStep2 = step(dw, over);\n    float overStep1Left = min(smoothstep(modUtime, modUtime + dw, selfIndex), (1.0 - smoothstep(modUtime + waveWidth - dw, modUtime + waveWidth, selfIndex)));\n    float overStep1Right = 1.0 - smoothstep(modUtime + waveWidth - dw, modUtime + waveWidth, selfIndex + 720.0);\n    float overStep1 = max(overStep1Left, overStep1Right);\n    float overStep2Left = smoothstep(modUtime, modUtime + dw, selfIndex);\n    float overStep2Right = min(smoothstep(modUtime, modUtime + dw, selfIndex + 720.0), (1.0 - smoothstep(modUtime + waveWidth - dw, modUtime + waveWidth, selfIndex + 720.0)));\n    float overStep2 = max(overStep2Left, overStep2Right);\n    float os = isOverStep1 * overStep1 + overStep2 * isOverStep2;\n    strength = (1.0 - isOver) * strength + isOver * os;\n    return strength;\n}\nvoid main() {\n\tvMapUv = uv;\n\tfloat selfIndex = mod(aIndex, 720.0);\n\tfloat circleNum = (aIndex - selfIndex) / 720.0;\n\tvec3 pDir = normalize(aNormal);\n\tfloat noise = texture(uPerlinTexture, vec2((selfIndex / 720.0), mod(uTime * 0.1, 1.0))).r;\n\tfloat strength = getStrength(aIndex, uTime, aNormal);\n\tstrength += getStrength(aIndex, uTime + 10.0 + noise, aNormal);\n\tstrength += getStrength(aIndex, uTime + 20.0 + noise, aNormal);\n\tstrength += getStrength(aIndex, uTime + 30.0 + noise, aNormal);\n\tstrength += getStrength(aIndex, uTime + 40.0 + noise, aNormal);\n\tstrength += getStrength(aIndex, uTime + 50.0 + noise, aNormal);\n\tstrength += getStrength(aIndex, uTime + 60.0 + noise, aNormal);\n\tstrength += getStrength(aIndex, uTime + 70.0 + noise, aNormal);\n\tstrength += getStrength(aIndex, uTime + 80.0 + noise, aNormal);\n\tstrength += getStrength(aIndex, uTime + 90.0 + noise, aNormal);\n\tcsm_Position.x += pDir.x * strength * 0.5;\n\tcsm_Position.z += strength * circleNum * noise * uHeight;\n\tcsm_Position.y += pDir.z * strength * 0.5;\n\tvIndex = aIndex;\n\tcsm_PointSize = 0.01*uScale;\n}\n",fragmentShader:"\nvarying vec2 vMapUv;\nvarying float vIndex;\nuniform float uTime;\nuniform vec3 baseColor;\nuniform sampler2D uPerlinTexture;\nvoid main() {\n\tvec3 whiteColor = vec3( 1.0,1.0,1.0);\n\tfloat selfIndex=mod(vIndex,720.0);\n\tfloat circleNum=(vIndex - selfIndex)/720.0;\n\tvec3 finalColor=mix(baseColor,diffuse,circleNum/5.0);\n\tfinalColor*=1.0;\n\tcsm_DiffuseColor = vec4( finalColor, opacity );\n}\n",uniforms:P,map:h(g)[0],alphaMap:h(g)[0],transparent:"",depthWrite:!1,blending:j,color:"#409eff",size:.1},null,8,["baseMaterial","map","alphaMap","blending"])],8,b)]))}}),P=s({__name:"lineMagicZone",setup(t){const n=v({reflectivity:.1,showGridHelper:!0,scale:1}),i=v({color:"#ff0000",scale:1.8,height:2.4,speed:1}),s=new e;return s.addBinding(i,"color",{label:"颜色"}),s.addBinding(i,"scale",{label:"大小",min:.1,max:3,step:.1}),s.addBinding(i,"height",{label:"高度",min:.1,max:3,step:.1}),s.addBinding(i,"speed",{label:"速度",min:-5,max:5,step:.1}),(e,t)=>{const s=g("TresCanvas");return u(),c(s,{clearColor:"#201919","window-size":"",antialias:"",alpha:"",logarithmicDepthBuffer:""},{default:x(()=>[t[0]||(t[0]=f("TresPerspectiveCamera",{position:[5,5,5],fov:45,near:.1,far:1e4},null,-1)),p(h(a),{enableDamping:""}),t[1]||(t[1]=f("TresAmbientLight",{intensity:2},null,-1)),(u(),c(I,null,{default:x(()=>[p(_,S({position:[3,0,0]},i),null,16)]),_:1})),(u(),c(I,null,{default:x(()=>[p(_,{position:[-3,0,0],scale:1.6,height:3})]),_:1})),p(o,S({position:[0,-.5,0]},n),null,16)]),_:1})}}});export{P as default};
