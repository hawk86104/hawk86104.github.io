import{K as e}from"./@tresjs.B_KjVy0E1761276103973.js";import{z as t,aD as a,a6 as o,$ as n,A as r}from"./three.Bhn4-0ry1761276103973.js";import{d as s,g as l,b as i,o as p,e as c,I as d,h,u,a9 as m,aa as f,m as v}from"./@vue.CKlgtJke1761276103973.js";import"./postprocessing.CeTFUAN_1761276103973.js";import"./@vueuse.wtfleElW1761276103973.js";const g=30,y=256,M=256,C=(e,t)=>{let{x:a,y:o,radius:n,weight:r}=t;n=parseInt(n*r);const s=e.createRadialGradient(a,o,0,a,o,n);s.addColorStop(0,"rgba(255, 255, 0, 1)"),s.addColorStop(1,"rgba(255, 0, 0, 0)"),e.fillStyle=s,e.globalAlpha=r,e.beginPath(),e.arc(a,o,n,0,2*Math.PI),e.closePath(),e.fill()},S=()=>{const e={1:"#f00",.8:"#e2fa00",.6:"#33f900",.3:"#0349df",0:"#fff"},o=document.createElement("canvas");o.width=256,o.height=10,o.style.position="absolute",o.style.top="0",o.style.right="0";const n=o.getContext("2d"),r=n.createLinearGradient(0,0,256,0);for(const t in e)r.addColorStop(t,e[t]);n.fillStyle=r,n.fillRect(0,0,256,10),document.body.appendChild(o);const s=new t(o);return s.minFilter=a,s.needsUpdate=!0,s},w=()=>{const e=document.createElement("canvas");e.width=y,e.height=M,e.style.position="absolute",e.style.top="20px",e.style.right="0";const o=e.getContext("2d"),n=(()=>{const e=new Array;for(let t=0;t<g;t++)e[t]=parseInt(25*Math.random()+10);return e})();for(let t=0;t<g;t++){const e=n[t]/35,a=Math.random()*y,r=Math.random()*M;C(o,{x:a,y:r,radius:80,weight:e})}document.body.appendChild(e);const r=new t(e);return r.minFilter=a,r.needsUpdate=!0,r},x=s({__name:"simpleExample",setup(t){const a={clearColor:"#030311",shadows:!0,alpha:!1,outputColorSpace:r,shadowMapType:n,useLegacyLights:!0},s={transparent:!0,side:o,vertexShader:"\n\tvarying vec2 vUv;\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }",fragmentShader:"\n\t#ifdef GL_ES\n  precision highp float;\n  #endif\n  varying vec2 vUv;\n  uniform sampler2D alphaScaleMap;\n  uniform sampler2D paletteMap;\n  void main() {\n    vec4 alphaColor = texture2D(alphaScaleMap, vUv);\n    vec4 color = texture2D(paletteMap, vec2(alphaColor.a, 0.0));\n    gl_FragColor = vec4(color.r, color.g, color.b, alphaColor.a);\n\t}",uniforms:{alphaScaleMap:{type:"t",value:w()},paletteMap:{type:"t",value:S()}}};function g(e){e&&console.log(e)}return(t,o)=>{const n=l("TresCanvas");return p(),i(n,v(a,{"window-size":""}),{default:c(()=>[o[1]||(o[1]=d("TresPerspectiveCamera",{position:[0,0,3e3],fov:40,near:.1,far:1e4},null,-1)),h(u(e),{autoRotate:!0,autoRotateSpeed:2}),o[2]||(o[2]=d("TresAmbientLight",{color:"#eef0ff",intensity:1},null,-1)),d("TresMesh",{position:[0,0,10],onPointerMove:g},[o[0]||(o[0]=d("TresPlaneGeometry",{args:[1500,1500]},null,-1)),d("TresShaderMaterial",m(f(s)),null,16)],32)]),_:1},16)}}});export{x as default};
