import{b as t,n as e,b5 as n,m as o,V as a,C as s,a3 as i,t as r,aE as l,Y as c}from"./three.DOaOWaa_1752457528298.js";import{e as h,b as u,a as p}from"./@tresjs.CutcgRLX1752457528298.js";import"./index.hgtQqJWu1752457528298.js";import{c as m}from"./simplex-noise.DjNkejFf1752457528298.js";import"./index.BK5326_A1752457528298.js";import{d as f,a9 as v,G as d,o as x,I as g,u as w,r as y,h as b,e as _,f as M,j as z,a6 as j,a7 as A,a4 as C}from"./@vue.CcDZ19ef1752457528298.js";import{_ as S}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.DPU1zgVL1752457528298.js";import"./postprocessing.BhLg8VAN1752457528298.js";import"./@vueuse.D5pFWdqo1752457528298.js";import"./lamina.DWeNdOf01752457528298.js";import"./glsl-tokenizer.D1pCRsis1752457528298.js";import"./@amap.CGUF9xH41752457528298.js";import"./glsl-token-descope.D4uKJLfh1752457528298.js";import"./glsl-token-depth.Duvdnvlt1752457528298.js";import"./glsl-token-scope.BdCfdvWe1752457528298.js";import"./glsl-token-properties.DKXemF9b1752457528298.js";import"./glsl-token-assignments.Ctx_yUgS1752457528298.js";import"./glsl-token-string.DbL2emkZ1752457528298.js";import"./glsl-token-functions.sjsU5PN81752457528298.js";import"./object-hash.i0UzGAXb1752457528298.js";import"./jszip.D2VcMNWo1752457528298.js";import"./utils.BcdYb02Q1752457528298.js";const k=["material"],F=["index","attributes-position","attributes-uv","attributes-offset","attributes-orientation","attributes-stretch","attributes-halfRootAngleSin","attributes-halfRootAngleCos"],D=["geometry"],R=["side"],T=f({__name:"grass",props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(c){let p,f;const y=([p,f]=v((()=>u({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),p=await p,f(),p),b=c,_=m(Math.random);function M(t,e){const n=t.x*e.w+t.y*e.z-t.z*e.y+t.w*e.x,o=-t.x*e.z+t.y*e.w+t.z*e.x+t.w*e.y,a=t.x*e.y-t.y*e.x+t.z*e.w+t.w*e.z,s=-t.x*e.x-t.y*e.y-t.z*e.z+t.w*e.w;return new r(n,o,a,s)}function z(t,e){var n=2*_(t/50,e/50);return n+=4*_(t/100,e/100),n+=.2*_(t/10,e/10)}const j=function(t,e){const n=[],o=[],s=[],i=[],c=[];let h=new r,u=new r;const p=-.25;for(let r=0;r<t;r++){const l=Math.random()*e-e/2,m=Math.random()*e-e/2,f=z(l,m);n.push(l,f,m);let v=Math.PI-Math.random()*(2*Math.PI);i.push(Math.sin(.5*v)),c.push(Math.cos(.5*v));let d=new a(0,1,0),x=d.x*Math.sin(v/2),g=d.y*Math.sin(v/2),w=d.z*Math.sin(v/2),y=Math.cos(v/2);h.set(x,g,w,y).normalize(),v=.5*Math.random()+p,d=new a(1,0,0),x=d.x*Math.sin(v/2),g=d.y*Math.sin(v/2),w=d.z*Math.sin(v/2),y=Math.cos(v/2),u.set(x,g,w,y).normalize(),h=M(h,u),v=.5*Math.random()+p,d=new a(0,0,1),x=d.x*Math.sin(v/2),g=d.y*Math.sin(v/2),w=d.z*Math.sin(v/2),y=Math.cos(v/2),u.set(x,g,w,y).normalize(),h=M(h,u),o.push(h.x,h.y,h.z,h.w),r<t/3?s.push(1.8*Math.random()):s.push(Math.random())}return{offsetsF32:new l(new Float32Array(n),3),orientationsF32:new l(new Float32Array(o),4),stretchesF32:new l(new Float32Array(s),1),halfRootAngleCosF32:new l(new Float32Array(c),1),halfRootAngleSinF32:new l(new Float32Array(i),1)}}(b.instances,b.width),A=new o(b.bW,b.bH,1,b.joints).translate(0,b.bH/2,0),C=new o(b.width,b.width,32,32);C.lookAt(new a(0,1,0));const S=C.attributes.position;for(let t=0;t<S.array.length;t+=3)S.array[t+1]=z(S.array[t],S.array[t+2]);C.attributes.position.needsUpdate=!0,C.computeVertexNormals();const T=new(function(o,a,s,i){const r=class extends e{constructor(t={}){const e=Object.entries(o);super({uniforms:e.reduce(((t,[e,o])=>({...t,...n.clone({[e]:{value:o}})})),{}),vertexShader:a,fragmentShader:s}),this.key="",e.forEach((([t])=>Object.defineProperty(this,t,{get:()=>this.uniforms[t].value,set:e=>this.uniforms[t].value=e}))),Object.assign(this,t),i&&i(this)}};return r.key=t.generateUUID(),r}({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new s(.3,.9,0).convertSRGBToLinear(),bottomColor:new s(0,.2,0).convertSRGBToLinear()},"   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }",(t=>{t.side=i})));T.map=y.map,T.alphaMap=y.alphaMap,T.toneMapped=!1;const{onLoop:I}=h();return I((({elapsed:t})=>{T.uniforms.time.value=t/4})),(t,e)=>(x(),d("TresGroup",null,[g("TresMesh",{material:w(T)},[g("TresInstancedBufferGeometry",{index:w(A).index,"attributes-position":w(A).attributes.position,"attributes-uv":w(A).attributes.uv,"attributes-offset":w(j).offsetsF32,"attributes-orientation":w(j).orientationsF32,"attributes-stretch":w(j).stretchesF32,"attributes-halfRootAngleSin":w(j).halfRootAngleSinF32,"attributes-halfRootAngleCos":w(j).halfRootAngleCosF32},null,8,F)],8,k),g("TresMesh",{position:[0,0,0],geometry:w(C)},[g("TresMeshStandardMaterial",{color:"#000f00",side:i},null,8,R)],8,D)]))}}),I=f({__name:"grass",setup(t){const e=y({alpha:!0,toneMapping:c,windowSize:!0,clearColor:6710886}),n=y({enableDamping:!0,autoRotate:!1});return(t,o)=>{const a=b("TresCanvas");return x(),_(a,j(A(e)),{default:M((()=>[o[0]||(o[0]=g("TresPerspectiveCamera",{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),z(w(p),j(A(n)),null,16),(x(),_(C,null,{default:M((()=>[z(T)])),_:1})),(x(),_(C,null,{default:M((()=>[z(w(S),{texture:"https://opensource.cdn.icegl.cn/images/skyBox/desert_1k.hdr"},null,8,["texture"])])),_:1}))])),_:1},16)}}});export{I as default};
