import{i as e,ae as t,bL as r,bI as i,d as s,cA as a,f as n,P as o,V as l,M as h,H as u,g as c,J as d,O as m,o as v}from"./three.DvmzhRS91761100244891.js";class p extends r{constructor(){super({glslVersion:a,uniforms:{tMap:{value:null},uDirection:{value:new s(1,0)},uResolution:{value:new s}},vertexShader:"\nin vec3 position;\nin vec2 uv;\n\nout vec2 vUv;\n\nvoid main() {\n    vUv = uv;\n\n    gl_Position = vec4(position, 1.0);\n}\n",fragmentShader:"\nprecision highp float;\n\nuniform sampler2D tMap;\nuniform vec2 uDirection;\nuniform vec2 uResolution;\n\nin vec2 vUv;\n\nout vec4 FragColor;\n\n\nfloat smootherstep(float edge0, float edge1, float x) {\n    x = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n    return x * x * x * (x * (x * 6.0 - 15.0) + 10.0);\n}\n\n\nvec4 blur13(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n  vec4 color = vec4(0.0);\n  vec2 off1 = vec2(1.411764705882353) * direction;\n  vec2 off2 = vec2(3.2941176470588234) * direction;\n  vec2 off3 = vec2(5.176470588235294) * direction;\n  color += texture(image, uv) * 0.1964825501511404;\n  color += texture(image, uv + (off1 / resolution)) * 0.2969069646728344;\n  color += texture(image, uv - (off1 / resolution)) * 0.2969069646728344;\n  color += texture(image, uv + (off2 / resolution)) * 0.09447039785044732;\n  color += texture(image, uv - (off2 / resolution)) * 0.09447039785044732;\n  color += texture(image, uv + (off3 / resolution)) * 0.010381362401148057;\n  color += texture(image, uv - (off3 / resolution)) * 0.010381362401148057;\n  return color;\n}\n\n\nvoid main() {\n    FragColor = blur13(tMap, vUv, uResolution, smootherstep(1.0, 0.0, vUv.y) * uDirection);\n}\n",blending:i,depthTest:!1,depthWrite:!1})}}class x extends n{constructor({width:r=512,height:i=512,clipBias:s=0,blurIterations:a=8}={}){super(),this.clipBias=s,this.blurIterations=a,this.reflectorPlane=new o,this.normal=new l,this.reflectorWorldPosition=new l,this.cameraWorldPosition=new l,this.rotationMatrix=new h,this.lookAtPosition=new l(0,0,-1),this.clipPlane=new u,this.view=new l,this.target=new l,this.q=new u,this.textureMatrix=new h,this.virtualCamera=new c,this.textureMatrixUniform={value:this.textureMatrix},this.renderTarget=new d(r,i,{depthBuffer:!1}),this.renderTargetRead=this.renderTarget.clone(),this.renderTargetWrite=this.renderTarget.clone(),this.renderTarget.depthBuffer=!0,this.renderTargetUniform={value:this.blurIterations>0?this.renderTargetRead.texture:this.renderTarget.texture},this.blurMaterial=new p,this.blurMaterial.uniforms.uResolution.value.set(r,i),this.screenCamera=new m(-1,1,1,-1,0,1),this.screenTriangle=function(){const r=new e;return r.setAttribute("position",new t([-1,3,0,-1,-1,0,3,-1,0],3)),r.setAttribute("uv",new t([0,2,0,0,2,0],2)),r}(),this.screen=new v(this.screenTriangle,this.blurMaterial),this.screen.frustumCulled=!1}setSize(e,t){this.renderTarget.setSize(e,t),this.renderTargetRead.setSize(e,t),this.renderTargetWrite.setSize(e,t),this.blurMaterial.uniforms.uResolution.value.set(e,t)}update(e,t,r){if(this.reflectorWorldPosition.setFromMatrixPosition(this.matrixWorld),this.cameraWorldPosition.setFromMatrixPosition(r.matrixWorld),this.rotationMatrix.extractRotation(this.matrixWorld),this.normal.set(0,0,1),this.normal.applyMatrix4(this.rotationMatrix),this.view.subVectors(this.reflectorWorldPosition,this.cameraWorldPosition),this.view.dot(this.normal)>0)return;this.view.reflect(this.normal).negate(),this.view.add(this.reflectorWorldPosition),this.rotationMatrix.extractRotation(r.matrixWorld),this.lookAtPosition.set(0,0,-1),this.lookAtPosition.applyMatrix4(this.rotationMatrix),this.lookAtPosition.add(this.cameraWorldPosition),this.target.subVectors(this.reflectorWorldPosition,this.lookAtPosition),this.target.reflect(this.normal).negate(),this.target.add(this.reflectorWorldPosition),this.virtualCamera.position.copy(this.view),this.virtualCamera.up.set(0,1,0),this.virtualCamera.up.applyMatrix4(this.rotationMatrix),this.virtualCamera.up.reflect(this.normal),this.virtualCamera.lookAt(this.target),this.virtualCamera.far=r.far,this.virtualCamera.updateMatrixWorld(),this.virtualCamera.projectionMatrix.copy(r.projectionMatrix),this.textureMatrix.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),this.textureMatrix.multiply(this.virtualCamera.projectionMatrix),this.textureMatrix.multiply(this.virtualCamera.matrixWorldInverse),this.textureMatrix.multiply(this.matrixWorld),this.reflectorPlane.setFromNormalAndCoplanarPoint(this.normal,this.reflectorWorldPosition),this.reflectorPlane.applyMatrix4(this.virtualCamera.matrixWorldInverse),this.clipPlane.set(this.reflectorPlane.normal.x,this.reflectorPlane.normal.y,this.reflectorPlane.normal.z,this.reflectorPlane.constant);const i=this.virtualCamera.projectionMatrix;this.q.x=(Math.sign(this.clipPlane.x)+i.elements[8])/i.elements[0],this.q.y=(Math.sign(this.clipPlane.y)+i.elements[9])/i.elements[5],this.q.z=-1,this.q.w=(1+i.elements[10])/i.elements[14],this.clipPlane.multiplyScalar(2/this.clipPlane.dot(this.q)),i.elements[2]=this.clipPlane.x,i.elements[6]=this.clipPlane.y,i.elements[10]=this.clipPlane.z+1-this.clipBias,i.elements[14]=this.clipPlane.w;const s=e.getRenderTarget(),a=e.xr.enabled,n=e.shadowMap.autoUpdate;e.xr.enabled=!1,e.shadowMap.autoUpdate=!1,e.setRenderTarget(this.renderTarget),e.state.buffers.depth.setMask(!0),!1===e.autoClear&&e.clear(),e.render(t,this.virtualCamera);const o=this.blurIterations;for(let l=0;l<o;l++){this.blurMaterial.uniforms.tMap.value=0===l?this.renderTarget.texture:this.renderTargetRead.texture;const t=.5*(o-l-1);this.blurMaterial.uniforms.uDirection.value.set(l%2==0?t:0,l%2==0?0:t),e.setRenderTarget(this.renderTargetWrite),!1===e.autoClear&&e.clear(),e.render(this.screen,this.screenCamera);const r=this.renderTargetRead;this.renderTargetRead=this.renderTargetWrite,this.renderTargetWrite=r,this.renderTargetUniform.value=this.renderTargetRead.texture}e.xr.enabled=a,e.shadowMap.autoUpdate=n,e.setRenderTarget(s)}destroy(){this.renderTargetWrite.dispose(),this.renderTargetRead.dispose(),this.renderTarget.dispose(),this.blurMaterial.dispose(),this.screenTriangle.dispose();for(const e in this)this[e]=null;return null}}export{x as R};
