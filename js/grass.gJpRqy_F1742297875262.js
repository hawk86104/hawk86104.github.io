import{_ as t,C as n,a0 as e,ai as o}from"./three.N4lg2KsY1742297875262.js";import{e as r,a,o as i}from"./@tresjs.oW7bfow21742297875262.js";import"./index.m2tC-S851742297875262.js";import{c as s}from"./simplex-noise.jB2HxhHB1742297875262.js";import{C as c}from"./index.S0bqWcaz1742297875262.js";import{d as l,a3 as u,o as f,H as p,N as h,u as m,r as d,e as v,f as g,g as x,j as w,aj as y,ak as b,al as _}from"./@vue.NRI7TcgI1742297875262.js";import{_ as j}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.mwEtn2zt1742297875262.js";import"./postprocessing.9PKUyDJ51742297875262.js";import"./@vueuse.Y8_DCJgq1742297875262.js";import"./lamina.3U2_CwL21742297875262.js";import"./glsl-tokenizer.U9jA6lpa1742297875262.js";import"./@amap.PUMXk6JR1742297875262.js";import"./glsl-token-descope.HPcG6Rdz1742297875262.js";import"./glsl-token-depth.tfftMbEt1742297875262.js";import"./glsl-token-scope.r9dVP2Lo1742297875262.js";import"./glsl-token-properties.ZdYUR1vL1742297875262.js";import"./glsl-token-assignments.bNS8ExHR1742297875262.js";import"./glsl-token-string.kZss9pe71742297875262.js";import"./glsl-token-functions.Q4IzYUqZ1742297875262.js";import"./object-hash.pZYLN7q31742297875262.js";import"./jszip.TRpfdbXn1742297875262.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.sfwG_3pt1742297875262.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.dJxna8w81742297875262.js";import"./three-stdlib.ek_ppiag1742297875262.js";import"./@pmndrs.ByHGZr701742297875262.js";import"./utils.ZyVHzNwh1742297875262.js";const M=R;!function(t,n){const e=R,o=F();for(;;)try{if(584348===-parseInt(e(270))/1+-parseInt(e(310))/2+parseInt(e(263))/3*(parseInt(e(260))/4)+parseInt(e(305))/5*(-parseInt(e(257))/6)+parseInt(e(294))/7+parseInt(e(276))/8*(-parseInt(e(319))/9)+parseInt(e(280))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(304)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){z(this,(function(){const t=R,n=new RegExp(t(317)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=H(t(299));n[t(306)](o+t(288))&&e[t(306)](o+"input")?H():o("0")}))()}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();A(void 0,(function(){const t=R,n=function(){const t=R;let n;try{n=Function(t(330)+t(261)+");")()}catch(e){n=window}return n}(),e=n[t(291)]=n[t(291)]||{},o=["log",t(303),"info",t(271),t(284),t(313),"trace"];for(let r=0;r<o[t(323)];r++){const n=A[t(329)][t(255)][t(269)](A),a=o[r],i=e[a]||n;n[t(289)]=A[t(269)](A),n[t(302)]=i.toString[t(269)](i),e[a]=n}}))();const I=[M(300)],C=[M(290),M(331),M(295),M(278),M(279),M(274),M(333),M(285)],S=[M(314)],k=[M(287)];function R(t,n){const e=F();return(R=function(t,n){return e[t-=255]})(t,n)}function F(){const t=["apply","10240RAZZew","test","sin","Vector3","InstancedBufferAttribute","704580aHZoUd","TresGroup","joints","table","geometry","debu","convertSRGBToLinear","function *\\( *\\)","lookAt","2786202poIAox","TresMeshStandardMaterial","stateObject","position","length","value","random","alphaMap","array","uniforms","constructor","return (function() ","attributes-position","Color","attributes-halfRootAngleSin","prototype","offsetsF32","3324iDwtUd","map","counter","4577788xIzeiS",'{}.constructor("return this")( )',"   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","3CibKUs","action","time","push","cos","TresInstancedBufferGeometry","bind","1162998vjfwOG","error","width","while (true) {}","attributes-stretch","gger","8qoBsRX","toneMapped","attributes-offset","attributes-orientation","14978790JCeBdU","normalize","TresMesh","DoubleSide","exception","attributes-halfRootAngleCos","call","side","chain","__proto__","index","console","halfRootAngleCosF32","PlaneGeometry","6310360dEkwiG","attributes-uv","grass","attributes","set","init","material","Vector4","toString","warn"];return(F=function(){return t})()}const D=l({__name:M(296),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(o){const i=M;let l,d;const v=([l,d]=u((()=>a({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),l=await l,d(),l),g=o,x=s(Math[i(325)]);function w(n,e){const o=i,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,a=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,s=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,c=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(301)])(r,a,s,c)}function y(t,n){var e=2*x(t/50,n/50);return e+=4*x(t/100,n/100),e+=.2*x(t/10,n/10)}const b=function(n,e){const o=i,r=[],a=[],s=[],c=[],l=[];let u=new(t[o(301)]),f=new(t[o(301)]);const p=-.25;for(let i=0;i<n;i++){const h=Math[o(325)]()*e-e/2,m=Math[o(325)]()*e-e/2,d=y(h,m);r[o(266)](h,d,m);let v=Math.PI-Math[o(325)]()*(2*Math.PI);c.push(Math[o(307)](.5*v)),l[o(266)](Math[o(267)](.5*v));let g=new(t[o(308)])(0,1,0),x=g.x*Math.sin(v/2),b=g.y*Math[o(307)](v/2),_=g.z*Math.sin(v/2),j=Math[o(267)](v/2);u[o(298)](x,b,_,j)[o(281)](),v=.5*Math[o(325)]()+p,g=new(t[o(308)])(1,0,0),x=g.x*Math.sin(v/2),b=g.y*Math[o(307)](v/2),_=g.z*Math[o(307)](v/2),j=Math.cos(v/2),f.set(x,b,_,j)[o(281)](),u=w(u,f),v=.5*Math.random()+p,g=new(t[o(308)])(0,0,1),x=g.x*Math[o(307)](v/2),b=g.y*Math[o(307)](v/2),_=g.z*Math[o(307)](v/2),j=Math[o(267)](v/2),f[o(298)](x,b,_,j).normalize(),u=w(u,f),a.push(u.x,u.y,u.z,u.w),i<n/3?s[o(266)](1.8*Math.random()):s[o(266)](Math[o(325)]())}return{offsetsF32:new(t[o(309)])(new Float32Array(r),3),orientationsF32:new(t[o(309)])(new Float32Array(a),4),stretchesF32:new(t[o(309)])(new Float32Array(s),1),halfRootAngleCosF32:new(t[o(309)])(new Float32Array(l),1),halfRootAngleSinF32:new(t[o(309)])(new Float32Array(c),1)}}(g.instances,g[i(272)]),_=new(t[i(293)])(g.bW,g.bH,1,g[i(312)]).translate(0,g.bH/2,0),j=new(t[i(293)])(g[i(272)],g.width,32,32);j[i(318)](new(t[i(308)])(0,1,0));const z=j[i(297)][i(322)];for(let t=0;t<z[i(327)][i(323)];t+=3)z[i(327)][t+1]=y(z[i(327)][t],z[i(327)][t+2]);j[i(297)][i(322)].needsUpdate=!0,j.computeVertexNormals();const A=new(c({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new n(.3,.9,0)[i(316)](),bottomColor:new(t[i(332)])(0,.2,0)[i(316)]()},i(262),"\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }",(n=>{const e=i;n.side=t[e(283)]})));A[i(258)]=v[i(258)],A[i(326)]=v[i(326)],A[i(277)]=!1;const{onLoop:R}=r();return R((({elapsed:t})=>{const n=i;A[n(328)][n(265)][n(324)]=t/4})),(t,n)=>{const o=i;return f(),p(o(311),null,[h(o(282),{material:m(A)},[h(o(268),{index:m(_)[o(290)],"attributes-position":m(_).attributes[o(322)],"attributes-uv":m(_)[o(297)].uv,"attributes-offset":m(b)[o(256)],"attributes-orientation":m(b).orientationsF32,"attributes-stretch":m(b).stretchesF32,"attributes-halfRootAngleSin":m(b).halfRootAngleSinF32,"attributes-halfRootAngleCos":m(b)[o(292)]},null,8,C)],8,I),h(o(282),{position:[0,0,0],geometry:m(j)},[h(o(320),{color:"#000f00",side:e},null,8,k)],8,S)])}}});function H(t){function n(t){const e=R;if("string"==typeof t)return function(t){}[e(329)](e(273))[e(304)](e(259));1!==(""+t/t).length||t%20==0?function(){return!0}[e(329)](e(315)+e(275))[e(286)](e(264)):function(){return!1}[e(329)](e(315)+e(275))[e(304)](e(321)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const U=T;function E(){const t=["debu","/images/skyBox/desert_1k.hdr","__proto__","apply","grass","gger","513FUpUfS","resource.cos","function *\\( *\\)","string","TresPerspectiveCamera","error","313321amLdue","constructor","counter","5123466sLZvuS","test","prototype","length","exception","init","console","bind","while (true) {}","warn","chain","action","table","call","info","6329099briHJa","6wxggJc",'{}.constructor("return this")( )',"902768qbcjIC","27woMVjt","9745250APwrHx","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","trace","9192lJwSxt","TresCanvas","2080685fMGYcd","toString"];return(E=function(){return t})()}!function(t,n){const e=T,o=E();for(;;)try{if(555365===parseInt(e(306))/1*(-parseInt(e(283))/2)+parseInt(e(300))/3*(parseInt(e(290))/4)+parseInt(e(292))/5+-parseInt(e(309))/6+parseInt(e(282))/7+parseInt(e(285))/8*(-parseInt(e(286))/9)+parseInt(e(287))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const P=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function T(t,n){const e=E();return(T=function(t,n){return e[t-=268]})(t,n)}!function(){P(this,(function(){const t=T,n=new RegExp(t(302)),e=new RegExp(t(288),"i"),o=O(t(272));n[t(268)](o+t(277))&&e[t(268)](o+"input")?O():o("0")}))()}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[T(297)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();B(void 0,(function(){const t=T,n=function(){const t=T;let n;try{n=Function("return (function() "+t(284)+");")()}catch(e){n=window}return n}(),e=n[t(273)]=n[t(273)]||{},o=["log",t(276),t(281),t(305),t(271),t(279),t(289)];for(let r=0;r<o[t(270)];r++){const n=B[t(307)][t(269)][t(274)](B),a=o[r],i=e[a]||n;n[t(296)]=B[t(274)](B),n[t(293)]=i[t(293)][t(274)](i),e[a]=n}}))();const L=l({__name:U(298),setup(t){const n=d({alpha:!0,toneMapping:o,windowSize:!0,clearColor:6710886}),e=d({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=T,a=v(r(291));return f(),g(a,y(b(n)),{default:x((()=>[o[0]||(o[0]=h(r(304),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),w(m(i),y(b(e)),null,16),(f(),g(_,null,{default:x((()=>[w(D)])),_:1})),(f(),g(_,null,{default:x((()=>[w(m(j),{texture:"https://opensource-1314935952.cos.ap-nanjing.myqcloud.com"+r(295)},null,8,["texture"])])),_:1}))])),_:1},16)}}});function O(t){function n(t){const e=T;if(typeof t===e(303))return function(t){}[e(307)](e(275)).apply(e(308));1!==(""+t/t)[e(270)]||t%20==0?function(){return!0}[e(307)](e(294)+e(299))[e(280)](e(278)):function(){return!1}.constructor(e(294)+e(299))[e(297)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{L as default};
