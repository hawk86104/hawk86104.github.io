import"./vanilla.esm.5.5.0.CRlEbOMK1761276103973.js";import"./Resource.CSaxGSPI1761276103973.js";import{u as e}from"./useTexture.B3KXI5F11761276103973.js";import{K as a}from"./@tresjs.B_KjVy0E1761276103973.js";import{P as n}from"./tweakpane.CqZAnw7f1761276103973.js";import{d as t,ac as o,t as r,g as i,b as l,o as s,e as v,I as u,h as m,u as p,m as f,a9 as c,aa as d}from"./@vue.CKlgtJke1761276103973.js";import{aV as h,A as g}from"./three.Bhn4-0ry1761276103973.js";import"./object-hash.1qNYTrnD1761276103973.js";import"./@amap.fjyZdsU91761276103973.js";import"./jszip.y_yjJ09m1761276103973.js";import"./postprocessing.CeTFUAN_1761276103973.js";import"./@vueuse.wtfleElW1761276103973.js";const x=t({__name:"pointsEarth",async setup(t){let x,y;const T={color:"#17c5a9",pointSize:4},S={clearColor:"#122148",shadows:!1,alpha:!1,outputColorSpace:g},j={color:T.color,wireframe:!0,transparent:!0,opacity:.2},b=([x,y]=o(()=>e(["./plugins/earthSample/image/pointsEarth/00_earthmap1k.jpg","./plugins/earthSample/image/pointsEarth/circle.png","./plugins/earthSample/image/pointsEarth/04_rainbow1k.jpg","./plugins/earthSample/image/pointsEarth/01_earthbump1k.jpg","./plugins/earthSample/image/pointsEarth/02_earthspec1k.jpg"])),x=await x,y(),x),z=b[0],_=b[1],w=b[2],P=b[3],E=b[4],D={uniforms:{size:{type:"f",value:T.pointSize},uTime:{type:"f",value:0},uWaveHeight:{type:"f",value:.075},uWaveSpeed:{type:"f",value:.2},colorTexture:{type:"t",value:w},elevTexture:{type:"t",value:P},alphaTexture:{type:"t",value:E},earthTexture:{type:"t",value:z},starTexture:{type:"t",value:_}},vertexShader:"uniform float size;\n  uniform sampler2D elevTexture;\n  uniform sampler2D alphaTexture;\n  uniform float uTime;\n  uniform float uWaveHeight;\n  uniform float uWaveSpeed;\n\n  varying vec2 vUv;\n  varying float vVisible;\n  varying float vAlpha;\n  varying float vElevation;\n  \n  float random(vec3 st) {\n    return fract(sin(dot(st.xyz, vec3(12.9898,78.233,45.164))) * 43758.5453123);\n}\n\nfloat noise(vec3 st) {\n    vec3 i = floor(st);\n    vec3 f = fract(st);\n\n    \n    float a = random(i);\n    float b = random(i + vec3(1.0, 0.0, 0.0));\n    float c = random(i + vec3(0.0, 1.0, 0.0));\n    float d = random(i + vec3(1.0, 1.0, 0.0));\n    float e = random(i + vec3(0.0, 0.0, 1.0));\n    float f1 = random(i + vec3(1.0, 0.0, 1.0));\n    float g = random(i + vec3(0.0, 1.0, 1.0));\n    float h = random(i + vec3(1.0, 1.0, 1.0));\n\n    vec3 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(mix(mix(a, b, u.x), mix(c, d, u.x), u.y),\n               mix(mix(e, f1, u.x), mix(g, h, u.x), u.y), u.z);\n}\n\nfloat fbm(vec3 st) {\n    float value = 0.0;\n    float amplitude = 0.5;\n\n    for (int i = 0; i < 5; i++) {\n        value += amplitude * noise(st);\n        st *= 2.0;\n        amplitude *= 0.5;\n    }\n    return value;\n}\n\n  void main() {\n    vUv = uv;\n    float alphaLand = 1.0 - texture2D(alphaTexture, vUv).r;\n    vAlpha = alphaLand;\n    vec3 newPosition = position;\n\n    if(alphaLand < 0.5) {\n      \n      \n      float waveHeight = uWaveHeight; \n      float waveSpeed = uWaveSpeed;  \n      float displacement = (fbm(newPosition * 5.0 + uTime * waveSpeed) * 2.0 - 1.0) * waveHeight;\n      vElevation = displacement;\n      newPosition += normal * displacement ;\n    }\n\n    vec4 mvPosition = modelViewMatrix * vec4( newPosition, 1.0 );\n    float elv = texture2D(elevTexture, vUv).r;\n    vec3 vNormal = normalMatrix * normal;\n    vVisible = step(0.0, dot( -normalize(mvPosition.xyz), normalize(vNormal)));\n    mvPosition.z += 0.45 * elv;\n\n    \n    float dist = length(mvPosition.xyz);\n    \n    float pointSize = size * (1.0 - dist / 10.0);\n    gl_PointSize = max(pointSize, 1.0);\n    gl_PointSize = pointSize;\n    gl_Position = projectionMatrix * mvPosition;\n  }",fragmentShader:"uniform sampler2D colorTexture;\n  \n  uniform sampler2D earthTexture;\n  uniform sampler2D starTexture;\n\n  varying vec2 vUv;\n  varying float vVisible;\n  varying float vAlpha;\n  varying float vElevation;\n\n  void main() {\n    if (floor(vVisible + 0.1) == 0.0) discard;\n    vec2 coord = gl_PointCoord;\n    float alpha = texture2D(starTexture, coord).a;\n    \n    if (alpha < 0.1) discard;\n\n    \n    vec3 color = texture2D(colorTexture, vUv).rgb;\n    vec3 earth = texture2D(earthTexture, vUv).rgb;\n    color = mix(color, earth, 0.65);\n    if(\n      vAlpha > 0.5\n    ) {\n      gl_FragColor = vec4(color, vAlpha);\n    }else {\n      \n      float elevationEffect = clamp(vElevation*30.0, -1.0, 1.0); \n      vec3 deep_sea_blue = vec3(0.004, 0.227, 0.388);\n      vec3 adjustedColor = mix(deep_sea_blue, earth*1.75, (elevationEffect + 1.0) * 0.5); \n      gl_FragColor = vec4(adjustedColor, 1.0-vAlpha);\n    }\n  }",transparent:!0,side:h},C=r(),M=r(),W=(new n).addFolder({title:"Debug"});W.addBinding(T,"color",{type:"color"}).on("change",({value:e})=>{M.value.color.set(e)}),W.addBinding(D.uniforms.size,"value",{min:.1,max:10,step:.1,label:"粒子大小"}),W.addBinding(D.uniforms.uWaveHeight,"value",{min:.01,max:.5,step:.01,label:"海浪高度"}),W.addBinding(D.uniforms.uWaveSpeed,"value",{min:.01,max:1,step:.01,label:"海浪变化速度"});const k=({delta:e})=>{C.value&&(C.value.rotation.y+=.002,D.uniforms.uTime.value+=10*e)};return(e,n)=>{const t=i("TresCanvas");return s(),l(t,f(S,{"window-size":"",onLoop:k}),{default:v(()=>[n[2]||(n[2]=u("TresPerspectiveCamera",{position:[0,0,3.5],fov:45,near:.1,far:20},null,-1)),m(p(a),{autoRotate:!0,autoRotateSpeed:2}),u("TresGroup",{ref_key:"groupRef",ref:C},[u("TresMesh",null,[n[0]||(n[0]=u("TresIcosahedronGeometry",{args:[1,4]},null,-1)),u("TresMeshBasicMaterial",f({ref_key:"wireframeMaterialRef",ref:M},j),null,16)]),u("TresPoints",null,[n[1]||(n[1]=u("TresIcosahedronGeometry",{args:[1,128]},null,-1)),u("TresShaderMaterial",c(d(D)),null,16)])],512),n[3]||(n[3]=u("TresHemisphereLight",{args:["#ffffff","#080820",3]},null,-1))]),_:1},16)}}});export{x as default};
