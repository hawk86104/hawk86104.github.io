import{C as e,ar as o,a3 as t}from"./three.CC50Wz7a1758524188831.js";import{e as n}from"./@tresjs.BL1sBIDK1758524188831.js";import{g as i}from"./utils.C8Th6_b91758524188831.js";import{d as r,b as a,a2 as s,w as l,G as p,o as v,I as u,u as f,a7 as m,a8 as c}from"./@vue.pEDXJ_3Z1758524188831.js";const d=["position","uv"],y=r({__name:"rippleMesh",props:{positionSrc:{default:[{x:0,y:0},{x:10,y:10}]},color:{default:"#ffff00"},opacity:{default:.8},height:{default:100},num:{default:8},speed:{default:.15}},setup(r){const y=r,g=a(),h={side:t,transparent:!0,depthWrite:!1,depthTest:!0,vertexShader:`\nprecision lowp float;\nprecision lowp int;\n${o.fog_pars_vertex}\nvarying vec2 vUv;\nvoid main() {\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\t${o.fog_vertex}\n}\n`,fragmentShader:"\nprecision lowp float;\nprecision lowp int;\nuniform float time;\nuniform float opacity;\nuniform vec3 color;\nuniform float num;\nuniform float speed;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 fragColor = vec4(0.);\n\tfloat sin = sin((vUv.y - time * speed) * 10. * num);\n\tfloat high = 0.92;\n\tfloat medium = 0.4;\n\tif (sin > high) {\n\t\tfragColor = vec4(mix(vec3(.8, 1., 1.), color, (1. - sin) / (1. - high)), 1.);\n\t} else if(sin > medium) {\n\t\tfragColor = vec4(color, mix(1., 0., 1.-(sin - medium) / (high - medium)));\n\t} else {\n\t\tfragColor = vec4(color, 0.);\n\t}\n\tvec3 fade = mix(color, vec3(0., 0., 0.), vUv.y);\n\tfragColor = mix(fragColor, vec4(fade, 1.), 0.85);\n\tgl_FragColor = vec4(fragColor.rgb, fragColor.a * opacity * (1. - vUv.y));\n}\n",uniforms:{time:{type:"pv2",value:0},color:{type:"uvs",value:new e(y.color)},opacity:{type:"pv2",value:y.opacity},num:{type:"pv2",value:y.num},speed:{type:"pv2",value:y.speed}}};let x=null,w=null;function C(e=[],o){const t=[],n=[];for(let i=0,r=t.length,a=n.length;i<e.length-1;i++){let s=1,l=e[i],p=e[i+1];t[r++]=l.x,t[r++]=0,t[r++]=l.y,n[a++]=0,n[a++]=0,t[r++]=p.x,t[r++]=0,t[r++]=p.y,n[a++]=1,n[a++]=0,t[r++]=l.x,t[r++]=o,t[r++]=l.y,n[a++]=0,n[a++]=s,t[r++]=l.x,t[r++]=o,t[r++]=l.y,n[a++]=0,n[a++]=s,t[r++]=p.x,t[r++]=0,t[r++]=p.y,n[a++]=1,n[a++]=0,t[r++]=p.x,t[r++]=o,t[r++]=p.y,n[a++]=1,n[a++]=s}x=new Float32Array(t),w=new Float32Array(n)}let{centerPoint:_,points:M}=i(y.positionSrc);C(M,y.height);const{onLoop:j}=n();return j((({delta:e})=>{h.uniforms.time.value+=e})),s((()=>{y.color&&(h.uniforms.color.value=new e(y.color)),y.opacity&&(h.uniforms.opacity.value=y.opacity),y.num&&(h.uniforms.num.value=y.num),y.speed&&(h.uniforms.speed.value=y.speed),g.value&&g.value.position.set(_.x,g.value.position.y,_.y)})),l((()=>y.positionSrc),(e=>{const{centerPoint:o,points:t}=i(e);_=o,M=t,C(M,y.height),g.value&&g.value.position.set(_.x,g.value.position.y,_.y)})),(e,o)=>(v(),p("TresMesh",{renderOrder:2200,ref_key:"tresMeshRef",ref:g},[u("TresBufferGeometry",{position:[f(x),3],uv:[f(w),2]},null,8,d),u("TresShaderMaterial",m(c(h)),null,16)],512))}});export{y as _};
