import{p as t,U as n,z as e,Y as o}from"./@tresjs.TFxw2EXb1728531791220.js";import{_ as r,cN as a,n as s,A as i,cO as c,bX as l,bh as u,k as v,s as f}from"./three.QbUqWzuy1728531791220.js";import{P as p}from"./tweakpane.yHWGBmom1728531791220.js";import{d,a4 as m,e as g,o as x,f as h,g as y,L as I,j as b,u as _,aj as S,ak as U,al as w,m as P}from"./@vue.bvMz0l_u1728531791220.js";import{_ as D}from"./@fesjs.AIUeUkBK1728531791220.js";import"./@vueuse.MmMw6bXQ1728531791220.js";import"./vue-router.2bmjA1xE1728531791220.js";import"./lodash-es.guXTxyfJ1728531791220.js";import"./@qlin.yHhFDldE1728531791220.js";import"./pinia.K-WG64zG1728531791220.js";import"./@floating-ui.BPbuo5Gx1728531791220.js";import"./@juggle.7yjBMqoW1728531791220.js";function E(t,n){const e=L();return(E=function(t,n){return e[t-=397]})(t,n)}!function(t,n){const e=E,o=L();for(;;)try{if(513983===-parseInt(e(421))/1*(-parseInt(e(413))/2)+parseInt(e(452))/3*(-parseInt(e(414))/4)+-parseInt(e(425))/5+-parseInt(e(441))/6+-parseInt(e(426))/7*(-parseInt(e(415))/8)+parseInt(e(429))/9*(-parseInt(e(401))/10)+-parseInt(e(399))/11*(-parseInt(e(422))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[E(447)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){A(this,(function(){const t=E,n=new RegExp(t(407)),e=new RegExp(t(430),"i"),o=C(t(423));n[t(446)](o+t(402))&&e.test(o+t(438))?C():o("0")}))()}();const z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[E(447)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function L(){const t=["Matrix4","test","apply","gger","ShaderMaterial","while (true) {}","v3v","3QDydYY","string","Matrix3","open","responseText","constructor","name","prototype","message","length","error","3091FnWJxP","onload","1050040EaUpvz","chain","onabort","stateObject",'Shader "',"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","function *\\( *\\)","get","WagnerLoadShaderException","Texture","console","replace","1585328NPaImg","3082588UCQgrf","13064cLbqJc",'" load was aborted.',"info","bind","Vector3","log","1SvDFQe","69972yeBFVx","init","Vector2","3274970qhPEzt","2093epWyQv","index","object","81snBkVz","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","exception","onerror","isArray","\" couldn't be loaded.","value","debu","lastIndex","input","Vector4","send","208692IUPwTB","toString","counter","type"];return(L=function(){return t})()}z(void 0,(function(){const t=E;let n;try{n=Function('return (function() {}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(411)]=n[t(411)]||{},o=[t(420),"warn",t(417),t(398),t(431),"table","trace"];for(let a=0;a<o[t(397)];a++){const n=z[t(457)][t(459)].bind(z),r=o[a],s=e[r]||n;n.__proto__=z[t(418)](z),n[t(442)]=s[t(442)].bind(s),e[r]=n}}))();function M(t,n,e){const o=E;if(typeof t!==o(428)||null===t)return t;const r=Array[o(433)](t)?[]:{};for(const a in t)t.hasOwnProperty(a)&&(r[a]=M(t[a])),a==n&&(r[n]=e);return r}function C(t){function n(t){const e=E;if(typeof t===e(453))return function(t){}[e(457)](e(450))[e(447)](e(443));1!==(""+t/t)[e(397)]||t%20==0?function(){return!0}.constructor(e(436)+e(448)).call("action"):function(){return!1}.constructor("debugger").apply(e(404)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const F=N;function N(t,n){const e=j();return(N=function(t,n){return e[t-=442]})(t,n)}!function(t,n){const e=N,o=j();for(;;)try{if(832925===parseInt(e(461))/1+-parseInt(e(519))/2*(-parseInt(e(443))/3)+parseInt(e(464))/4*(parseInt(e(513))/5)+-parseInt(e(447))/6*(parseInt(e(527))/7)+-parseInt(e(484))/8+parseInt(e(445))/9+-parseInt(e(522))/10*(parseInt(e(505))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const T=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[N(489)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){T(this,(function(){const t=N,n=new RegExp(t(530)),e=new RegExp(t(488),"i"),o=B(t(487));n[t(536)](o+t(537))&&e[t(536)](o+"input")?B():o("0")}))()}();const R=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[N(489)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();R(void 0,(function(){const t=N;let n;try{n=Function(t(492)+'{}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(442)]=n[t(442)]||{},o=[t(466),t(480),"info",t(460),t(501),t(479),t(532)];for(let a=0;a<o[t(462)];a++){const n=R[t(515)][t(541)].bind(R),r=o[a],s=e[r]||n;n.__proto__=R[t(481)](R),n.toString=s[t(455)].bind(s),e[r]=n}}))();class G{constructor(t,n){const e=N;this[e(511)]=1,this[e(454)]=1,this.settings=n||{},this[e(529)]=this[e(450)][e(529)]||!1,this[e(483)]=t,this[e(516)]=this[e(456)](this[e(450)]),this[e(474)]=new(r[e(514)]),this.quad=new(r[e(446)])(new(r[e(524)])(1,1),new(r[e(504)])),this[e(474)].add(this[e(540)]),this[e(471)]=new(r[e(453)])(1,1,1,1,-1e4,1e4),this[e(508)]=new(r[e(518)])(1,1,{minFilter:void 0!==this[e(450)][e(528)]?this[e(450)].minFilter:s,magFilter:void 0!==this[e(450)][e(477)]?this[e(450)][e(477)]:s,wrapS:void 0!==this.settings.wrapS?this[e(450)][e(451)]:r[e(482)],wrapT:void 0!==this[e(450)].wrapT?this[e(450)].wrapT:r[e(482)],format:this[e(529)]?r[e(497)]:r[e(478)],type:void 0!==this[e(450)][e(509)]?this[e(450)].type:i,stencilBuffer:void 0===this[e(450)][e(472)]||this[e(450)][e(472)]}),this.back=this[e(508)][e(523)](),this[e(543)]=Date.now(),this.passes={},this[e(531)]={passItems:[],passes:[]}}addPass(t,n,e,o){const r=N;this[r(458)](n);const a={shaderName:t,params:e,uuid:o,shader:this[r(520)]};this[r(531)][r(534)][r(503)](a)}[F(535)](t){const n=F;for(let e=this[n(531)][n(534)][n(462)]-1;e>=0;e--)this[n(531)][n(534)][e].uuid===parseInt(t)&&this[n(531)][n(534)][n(448)](e,1);console[n(466)](this.Stack[n(534)])}CopyPass(){const t=F;this[t(538)][t(517)](this);return this.loadShadervf("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[F(458)](t){const n=F,e=n(463);return this.shader=function(t,n){const e=E,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,s=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,i={sampler2D:{type:"t",value:()=>new(r[E(410)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[E(424)])},vec3:{type:"v3",value:()=>new(r[E(419)])},vec4:{type:"v4",value:()=>new(r[E(439)])},bvec2:{type:"v2",value:()=>new(r[E(424)])},bvec3:{type:"v3",value:()=>new(r[E(419)])},bvec4:{type:"v4",value:()=>new(r[E(439)])},ivec2:{type:"v2",value:()=>new(r[E(424)])},ivec3:{type:"v3",value:()=>new(r[E(419)])},ivec4:{type:"v4",value:()=>new(r[E(439)])},mat2:{type:"v2",value:()=>new a},mat3:{type:"v3",value:()=>new(r[E(454)])},mat4:{type:"v4",value:()=>new(r[E(445)])}},c={float:{type:"fv",value:()=>[]},vec3:{type:e(451),value:()=>[]}};let l;const u={resolution:{type:"v2",value:new(r[e(424)])(1,1),default:!0},time:{type:"f",value:Date.now(),default:!0},tInput:{type:"t",value:new(r[e(410)]),default:!0}};let v,f;for(;null!==(l=o.exec(n));)l[e(427)]===o[e(437)]&&o[e(437)]++,v=l[1],f=l[2],u[f]={type:i[v][e(444)],value:i[v][e(435)]()};for(;null!==(l=s.exec(n));)l.index===o.lastIndex&&o[e(437)]++,v=l[1],f=l[2],l[3],u[f]={type:c[v][e(444)],value:c[v][e(435)]()};return new(r[e(449)])({uniforms:u,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(520)]}[F(538)](t){const n=F;this.shader=null,this[n(525)]={}}[F(476)](){this[F(499)]=this.front,this.write=this.back}[F(459)](t,n){const e=F,o=window[e(502)],r=window.innerHeight;t.setSize(1*o,1*r),n[e(449)][e(485)](70,o/r,n.near,n[e(473)]),this.setSize(o,r);return this[e(457)](o,r,!0)}[F(542)](t,n){const e=F;this[e(511)]=t,this.height=n,this[e(471)][e(449)][e(533)](t/-2,t/2,n/2,n/-2,this[e(471)][e(512)],this[e(471)][e(473)]),this[e(540)].scale.set(t,n,1),this.front[e(542)](t,n),this[e(465)][e(542)](t,n)}getOfflineTexture(t,n,e){const o=F;return new(r[o(518)])(t,n,{minFilter:r[o(510)],magFilter:r[o(510)],format:e?r[o(497)]:c})}render(t,n,e,o){const r=F;this[r(483)][r(506)](this[r(444)]),this.renderer[r(491)](t,n),o||this[r(470)]()}[F(470)](){const t=F,n=this[t(444)];this[t(444)]=this[t(499)],this[t(499)]=n}[F(526)](){const t=F;for(let n=0;n<this[t(531)][t(534)][t(462)];n++){const e=this[t(531)][t(534)][n][t(520)],o=this[t(531)][t(534)][n][t(525)];if(this[t(483)].setRenderTarget(this[t(444)]),e instanceof r[t(494)]){this[t(540)].material=e,this[t(540)].material[t(467)].tInput[t(521)]=this[t(499)][t(496)],this.quad.material[t(467)][t(493)][t(521)][t(490)](this[t(511)],this.height),this.quad[t(498)][t(467)][t(495)][t(521)]=.001*(Date.now()-this[t(543)]);for(const n in o)this[t(540)][t(498)][t(467)][n].value=o[n];this[t(483)][t(491)](this[t(474)],this[t(471)]),this.swapBuffers()}}}[F(507)](t,n){const e=F;this[e(483)][e(506)](null),this[e(540)][e(498)]=this.copyPass,this[e(540)][e(498)][e(467)][e(475)][e(521)]=this[e(499)].texture,this[e(540)][e(498)][e(467)].resolution[e(521)][e(490)](this.width,this[e(454)]),this[e(483)].render(this[e(474)],this[e(471)])}}function B(t){function n(t){const e=N;if("string"==typeof t)return function(t){}[e(515)](e(468))[e(489)](e(469));1!==(""+t/t)[e(462)]||t%20==0?function(){return!0}[e(515)](e(452)+e(486)).call(e(500)):function(){return!1}[e(515)](e(452)+e(486))[e(489)](e(539)),n(++t)}try{if(t)return n;n(0)}catch(e){}}function j(){const t=["stateObject","quad","prototype","setSize","startTime","console","60081QkWzYz","write","7135389vsjRzJ","Mesh","4630650uNnROL","splice","projectionMatrix","settings","wrapS","debu","OrthographicCamera","height","toString","CopyPass","getOfflineTexture","loadShadervf","onWindowResize","error","1401092XriUKS","length","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","76FAKHfR","back","log","uniforms","while (true) {}","counter","swapBuffers","camera","stencilBuffer","far","scene","tInput","Reset","magFilter","RGBFormat","table","warn","bind","ClampToEdgeWrapping","renderer","6291104VoGSxF","makePerspective","gger","init","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","apply","set","render","return (function() ","resolution","ShaderMaterial","time","texture","RGBAFormat","material","read","action","exception","innerWidth","push","MeshBasicMaterial","6457VvtBUe","setRenderTarget","toScreen","front","type","LinearFilter","width","near","392830WAEQdr","Scene","constructor","copyPass","call","WebGLRenderTarget","32ozIbdJ","shader","value","27530lGjhTf","clone","PlaneGeometry","params","pass","7RClMnn","minFilter","useRGBA","function *\\( *\\)","Stack","trace","makeOrthographic","passItems","removePass","test","chain","Pass"];return(j=function(){return t})()}const V="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",O=X;!function(t,n){const e=X,o=W();for(;;)try{if(201148===-parseInt(e(439))/1+parseInt(e(414))/2*(parseInt(e(371))/3)+parseInt(e(424))/4*(parseInt(e(374))/5)+-parseInt(e(386))/6*(parseInt(e(404))/7)+parseInt(e(403))/8+-parseInt(e(392))/9*(parseInt(e(375))/10)+parseInt(e(391))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const k=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[X(431)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){k(this,(function(){const t=X,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(425),"i"),o=q("init");n[t(413)](o+t(367))&&e.test(o+"input")?q():o("0")}))()}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[X(431)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function W(){const t=["dispose","addButton","removePass","toString","210485hNWTYr","918yBagrC","addBlade",'{}.constructor("return this")( )',"gger","counter","onWindowResize","action","prototype","string","DENOISEPass","addPass","1455088NMKnDW","7reYjpY","info","BufferGeometry","BoxGeometry","trace","translate","POISSONPass","CGAPass","return (function() ","test","168932FctyUC","bind","debu","SEPIAPass","移除~","material","__proto__","constructor","map","label","1541212LgkKYp","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","plugins/postProcessing/image/1324-normal.jpg","mergeGeometries","change","add","BOXBLURPass","apply","VIGNETTE2Pass","value","receiveShadow","castShadow","random","RGBPass","table","140937gIDvyR","Reset","target","click","pass","TOONPass","SNOISEPass","SOBELPass","chain","push","autoClearColor","plugins/postProcessing/image/1324.jpg","3gtoyhB","console","InvertPass","5OQiQAn","24670uzTRFX","addFolder","postProcessing","render","title","error","call","length","list","keys","values","462426zIyyUj"];return(W=function(){return t})()}function X(t,n){const e=W();return(X=function(t,n){return e[t-=362]})(t,n)}H(void 0,(function(){const t=X,n=function(){const t=X;let n;try{n=Function(t(412)+t(394)+");")()}catch(e){n=window}return n}(),e=n[t(372)]=n.console||{},o=["log","warn",t(405),t(380),"exception",t(438),t(408)];for(let r=0;r<o[t(382)];r++){const n=H[t(421)][t(399)][t(415)](H),a=o[r],s=e[a]||n;n[t(420)]=H.bind(H),n[t(390)]=s[t(390)][t(415)](s),e[a]=n}}))();function q(t){function n(t){const e=X;if(typeof t===e(400))return function(t){}[e(421)]("while (true) {}")[e(431)](e(396));1!==(""+t/t)[e(382)]||t%20==0?function(){return!0}[e(421)](e(416)+e(395))[e(381)](e(398)):function(){return!1}[e(421)](e(416)+e(395)).apply("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const Q=D(d({__name:O(377),async setup(o){const a=O;let s,i;const{camera:c,renderer:d,scene:g,sizes:x}=t();for(var h=new(r[a(406)]),y=[],I=0;I<100;I++){var b=new(r[a(407)])(100,100,100);b[a(409)](1500*Math[a(436)](),1500*Math[a(436)](),1500*Math[a(436)]()),y[a(368)](b)}h=l[a(427)](y);const _=([s,i]=m((()=>e({map:a(370)}))),s=await s,i(),s),S=([s,i]=m((()=>e({map:a(426)}))),s=await s,i(),s);var U=new u({map:_[a(422)],normalMap:S[a(422)],normalScale:new v(.8,-.8),shininess:100}),w=new f(h,U);w[a(435)]=!0,w[a(434)]=!0,g[a(433)][a(429)](w);const P=new G(d.value,{useRGBA:!0}),D=new p;let E=null,A=[{text:a(373),value:{InvertPass:V}},{text:"FXAAPass",value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:a(417),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:a(365),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:a(430),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:a(401),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:a(411),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:S[a(422)]}}},{text:a(366),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:a(437),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:"DOTPass",value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:"CIRCULARPass",value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:a(410),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:"VIGNETTE1Pass",value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:a(432),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:"FREICHENPass",value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:a(364),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],z=a(373),L=V,C=null;D.addBlade({view:a(383),label:"后处理类型",options:A,value:""}).on(a(428),(t=>{E=t[a(433)]}));const F=D[a(388)]({title:"新增",label:"新增通道"});let N=0;F.on(a(362),(t=>{const n=a;z=Object[n(384)](E)[0],L=Object[n(385)](E)[0],C=Object[n(385)](E)[1];let e=N++,o=D[n(376)]({title:z});for(const a in C){let t=C[a];o[n(393)]({view:"text",label:a,parse:t=>String(t),value:t})}o[n(388)]({title:n(418)+e,label:"关闭通道"}).on("click",(t=>{const e=n;let o=t[e(441)][e(379)].split("~")[1];P[e(389)](o)})).on(n(362),(()=>{o[n(387)]()}));let r=M(C,t[n(441)][n(423)],t[n(433)]);P[n(402)](z,L,r,e)})),P[a(397)](d[a(433)],c[a(433)]);const{onLoop:T}=n();return T((({delta:t})=>{const n=a;w&&(d.value[n(369)]=!0,P[n(440)](),w[n(419)]=U,P[n(378)](g[n(433)],c[n(433)]),P[n(363)](),P.toScreen(g[n(433)],c[n(433)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),Y=J;!function(t,n){const e=J,o=K();for(;;)try{if(504816===parseInt(e(528))/1*(-parseInt(e(527))/2)+-parseInt(e(524))/3*(parseInt(e(506))/4)+-parseInt(e(535))/5*(-parseInt(e(519))/6)+parseInt(e(518))/7+parseInt(e(540))/8*(parseInt(e(508))/9)+parseInt(e(541))/10*(-parseInt(e(499))/11)+-parseInt(e(529))/12*(parseInt(e(523))/13))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[J(507)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){Z(this,(function(){const t=J,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(501),"i"),o=rt("init");n[t(502)](o+t(505))&&e[t(502)](o+t(542))?rt():o("0")}))()}();const $=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function K(){const t=["error","constructor","39hqGVnl","26127riiajp","debu","postProcessingEditor","517344anXMCs","1CYhrWZ","4666344TSVqlc","#ffffff","while (true) {}","perspectiveCameraRef","console","exception","5EqzeXC","warn","string","manual","TresAmbientLight","8QbNqzi","2018530NAKGAF","input","TresCanvas","return (function() ","trace","11uzrvtw","TresDirectionalLight","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","test","stateObject","counter","chain","216deXBOC","apply","6319773ekpkAl","action","length","__proto__","toString","#000000","call",'{}.constructor("return this")( )',"prototype","info","6752298dWfXsT","5612412DAIGnM","bind"];return(K=function(){return t})()}function J(t,n){const e=K();return(J=function(t,n){return e[t-=499]})(t,n)}$(void 0,(function(){const t=J,n=function(){const t=J;let n;try{n=Function(t(544)+t(515)+");")()}catch(e){n=window}return n}(),e=n[t(533)]=n.console||{},o=["log",t(536),t(517),t(521),t(534),"table",t(545)];for(let r=0;r<o[t(510)];r++){const n=$[t(522)][t(516)][t(520)]($),a=o[r],s=e[a]||n;n[t(511)]=$.bind($),n.toString=s[t(512)][t(520)](s),e[a]=n}}))();const tt={ref:Y(532),position:[600,850,-1500],fov:45,near:.1,far:1e5},nt=I(Y(539),{color:"#ffffff",intensity:2},null,-1),et=I(Y(500),{position:[100,100,0],intensity:2,color:Y(530)},null,-1),ot=d({__name:Y(526),setup(t){const e=Y,r={clearColor:e(513),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(538)},a={autoRotate:!0,enableDamping:!0},{onLoop:s}=n();return s((({delta:t})=>{})),(t,n)=>{const s=g(e(543));return x(),h(s,P(r,{"window-size":""}),{default:y((()=>[I("TresPerspectiveCamera",tt,null,512),b(_(o),S(U(a)),null,16),nt,et,(x(),h(w,null,{default:y((()=>[b(Q)])),_:1}))])),_:1},16)}}});function rt(t){function n(t){const e=J;if(typeof t===e(537))return function(t){}[e(522)](e(531))[e(507)](e(504));1!==(""+t/t)[e(510)]||t%20==0?function(){return!0}[e(522)](e(525)+"gger")[e(514)](e(509)):function(){return!1}[e(522)](e(525)+"gger").apply(e(503)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{ot as default};
