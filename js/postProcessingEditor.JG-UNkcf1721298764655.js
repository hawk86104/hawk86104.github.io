import{p as t,$ as n,N as e,d as o}from"./@tresjs.iXEJQd7J1721298764655.js";import{j as r,a6 as s,V as a,al as i,M as c,r as l,Y as u,bf as v,aV as f,cD as p}from"./three.0bBjBDi41721298764655.js";import{P as d}from"./tweakpane.yHWGBmom1721298764655.js";import{d as m,a4 as g,e as x,o as h,f as y,g as I,J as b,j as _,u as S,aj as U,ak as w,al as D,m as P}from"./@vue.Q1VpS3901721298764655.js";import{_ as E}from"./@fesjs.brW7jqtK1721298764655.js";import"./@vueuse.hS-CVzal1721298764655.js";import"./vue-router.i1Z-d_LR1721298764655.js";import"./lodash-es.nFpJXAf-1721298764655.js";import"./@qlin.yHhFDldE1721298764655.js";import"./pinia.3lNuHAZQ1721298764655.js";import"./@floating-ui.BPbuo5Gx1721298764655.js";import"./@juggle.7yjBMqoW1721298764655.js";function A(){const t=["onabort","68861nXHcui","504oMYApJ","constructor","send","\" couldn't be loaded.","action","isArray","apply","__proto__",'" load was aborted.',"8867362xuHiSS","exec","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","index","counter","10786193YkamEC","1930906WHXjCi","ShaderMaterial",'Shader "',"type","Matrix2","chain","Matrix3","responseText","message","function *\\( *\\)","WagnerLoadShaderException","563595ONoLQO","name","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","warn","lastIndex","log","onload","error","1272mjzPXg",'{}.constructor("return this")( )',"info","Vector2","init","console","1ghYCOk","v3v","test","debu","gger","onerror","random","Vector4","string","call","while (true) {}","toString","replace","value","Vector3","10qRuOHU","length","8lAJQFu","89757poeWbC","object","6gFwMkl","now","bind","Texture","open","return (function() ","hasOwnProperty","stateObject","9893335yfGlhg"];return(A=function(){return t})()}!function(t,n){const e=L,o=A();for(;;)try{if(990504===parseInt(e(214))/1*(-parseInt(e(260))/2)+parseInt(e(200))/3*(-parseInt(e(231))/4)+parseInt(e(242))/5+parseInt(e(234))/6*(parseInt(e(254))/7)+-parseInt(e(245))/8*(-parseInt(e(232))/9)+parseInt(e(229))/10*(-parseInt(e(259))/11)+-parseInt(e(208))/12*(parseInt(e(244))/13))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const M=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(251)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){M(this,(function(){const t=L,n=new RegExp(t(198)),e=new RegExp(t(202),"i"),o=z(t(212));n.test(o+t(194))&&e[t(216)](o+"input")?z():o("0")}))()}();const F=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(251)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function L(t,n){const e=A();return(L=function(t,n){return e[t-=191]})(t,n)}F(void 0,(function(){const t=L;let n;try{n=Function(t(239)+t(209)+");")()}catch(r){n=window}const e=n[t(213)]=n[t(213)]||{},o=[t(205),t(203),t(210),t(207),"exception","table","trace"];for(let s=0;s<o.length;s++){const n=F[t(246)].prototype[t(236)](F),r=o[s],a=e[r]||n;n[t(252)]=F[t(236)](F),n[t(225)]=a.toString.bind(a),e[r]=n}}))();function C(t,n,e){const o=L;if(typeof t!==o(233)||null===t)return t;const r=Array[o(250)](t)?[]:{};for(const s in t)t[o(240)](s)&&(r[s]=C(t[s])),s==n&&(r[n]=e);return r}function z(t){function n(t){const e=L;if(typeof t===e(222))return function(t){}[e(246)](e(224))[e(251)](e(258));1!==(""+t/t)[e(230)]||t%20==0?function(){return!0}[e(246)](e(217)+e(218))[e(223)](e(249)):function(){return!1}[e(246)](e(217)+e(218)).apply(e(241)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const N=G;!function(t,n){const e=G,o=R();for(;;)try{if(589392===-parseInt(e(427))/1+parseInt(e(420))/2+-parseInt(e(363))/3+parseInt(e(431))/4+-parseInt(e(386))/5+parseInt(e(384))/6*(-parseInt(e(440))/7)+-parseInt(e(377))/8*(-parseInt(e(424))/9))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const T=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[G(397)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function R(){const t=["shader","removePass","length","function *\\( *\\)","render","uniforms","width","ClampToEdgeWrapping","write","debu","apply","far","log","toScreen","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","quad","innerWidth","Stack","startTime","prototype","loadShadervf","height","while (true) {}","stencilBuffer","magFilter","minFilter","Reset","wrapT","swapBuffers","gger","tInput","splice","params","925724PtwaMZ","setSize","wrapS","warn","322965EiAshh","bind","Scene","1124288NaNtMx","Pass","copyPass","makePerspective","2164260sYySBi","near","chain","toString","RGBAFormat","useRGBA","LinearFilter","trace","pass","693slzvde","test","__proto__","projectionMatrix","exception","clone","RGBFormat","now","init","camera","read","CopyPass","onWindowResize","UnsignedByteType","ShaderMaterial","return (function() ","WebGLRenderTarget","material","OrthographicCamera","call","scene","passItems","2382489jjNZyq","addPass","scale","settings","set","back","value","setRenderTarget","info","texture","error","Mesh",'{}.constructor("return this")( )',"counter","560FWMTvV","getOfflineTexture","console","constructor","resolution","front","renderer","23658yAUcuO","action","3088385yikcuH"];return(R=function(){return t})()}!function(){T(this,(function(){const t=G,n=new RegExp(t(390)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=O(t(349));n[t(441)](o+t(433))&&e[t(441)](o+"input")?O():o("0")}))()}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[G(397)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function G(t,n){const e=R();return(G=function(t,n){return e[t-=348]})(t,n)}B(void 0,(function(){const t=G,n=function(){const t=G;let n;try{n=Function(t(356)+t(375)+");")()}catch(e){n=window}return n}(),e=n[t(379)]=n.console||{},o=[t(399),t(423),t(371),t(373),t(444),"table",t(438)];for(let r=0;r<o.length;r++){const n=B[t(380)][t(406)][t(425)](B),s=o[r],a=e[s]||n;n[t(442)]=B.bind(B),n[t(434)]=a[t(434)][t(425)](a),e[s]=n}}))();class j{constructor(t,n){const e=G;this[e(393)]=1,this[e(408)]=1,this.settings=n||{},this.useRGBA=this[e(366)][e(436)]||!1,this[e(383)]=t,this[e(429)]=this[e(352)](this.settings),this[e(361)]=new(s[e(426)]),this[e(402)]=new(s[e(374)])(new l(1,1),new u),this.scene.add(this[e(402)]),this[e(350)]=new(s[e(359)])(1,1,1,1,-1e4,1e4),this[e(382)]=new(s[e(357)])(1,1,{minFilter:void 0!==this.settings.minFilter?this[e(366)][e(412)]:s[e(437)],magFilter:void 0!==this[e(366)][e(411)]?this.settings.magFilter:s[e(437)],wrapS:void 0!==this.settings[e(422)]?this[e(366)].wrapS:v,wrapT:void 0!==this[e(366)][e(414)]?this.settings[e(414)]:s[e(394)],format:this.useRGBA?s[e(435)]:s[e(446)],type:void 0!==this[e(366)].type?this[e(366)].type:s[e(354)],stencilBuffer:void 0===this.settings[e(410)]||this.settings.stencilBuffer}),this.back=this.front[e(445)](),this[e(405)]=Date[e(348)](),this.passes={},this[e(404)]={passItems:[],passes:[]}}[N(364)](t,n,e,o){const r=N;this[r(407)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(387)]};this[r(404)].passItems.push(s)}[N(388)](t){const n=N;for(let e=this[n(404)].passItems[n(389)]-1;e>=0;e--)this.Stack[n(362)][e].uuid===parseInt(t)&&this[n(404)].passItems[n(418)](e,1);console[n(399)](this[n(404)][n(362)])}[N(352)](){const t=N;this[t(428)][t(360)](this);return this[t(407)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}loadShadervf(t){const n=N,e=n(401);return this[n(387)]=function(t,n){const e=L,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,l=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,u={sampler2D:{type:"t",value:()=>new(s[L(237)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(s[L(211)])},vec3:{type:"v3",value:()=>new a},vec4:{type:"v4",value:()=>new(s[L(221)])},bvec2:{type:"v2",value:()=>new(s[L(211)])},bvec3:{type:"v3",value:()=>new(s[L(228)])},bvec4:{type:"v4",value:()=>new(s[L(221)])},ivec2:{type:"v2",value:()=>new r},ivec3:{type:"v3",value:()=>new(s[L(228)])},ivec4:{type:"v4",value:()=>new i},mat2:{type:"v2",value:()=>new(s[L(193)])},mat3:{type:"v3",value:()=>new(s[L(195)])},mat4:{type:"v4",value:()=>new c}},v={float:{type:"fv",value:()=>[]},vec3:{type:e(215),value:()=>[]}};let f;const p={resolution:{type:"v2",value:new r(1,1),default:!0},time:{type:"f",value:Date[e(235)](),default:!0},tInput:{type:"t",value:new(s[e(237)]),default:!0}};let d,m;for(;null!==(f=o.exec(n));)f[e(257)]===o[e(204)]&&o[e(204)]++,d=f[1],m=f[2],p[m]={type:u[d][e(192)],value:u[d][e(227)]()};for(;null!==(f=l[e(255)](n));)f.index===o[e(204)]&&o[e(204)]++,d=f[1],m=f[2],f[3],p[m]={type:v[d].type,value:v[d][e(227)]()};return new(s[e(261)])({uniforms:p,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(387)]}[N(428)](t){const n=N;this.shader=null,this[n(419)]={}}[N(413)](){const t=N;this[t(351)]=this[t(382)],this[t(395)]=this[t(368)]}[N(353)](t,n){const e=N,o=window[e(403)],r=window.innerHeight;t[e(421)](1*o,1*r),n[e(443)][e(430)](70,o/r,n[e(432)],n[e(398)]),this[e(421)](o,r);return this[e(378)](o,r,!0)}[N(421)](t,n){const e=N;this[e(393)]=t,this[e(408)]=n,this[e(350)][e(443)].makeOrthographic(t/-2,t/2,n/2,n/-2,this[e(350)][e(432)],this.camera[e(398)]),this.quad[e(365)][e(367)](t,n,1),this[e(382)][e(421)](t,n),this[e(368)][e(421)](t,n)}[N(378)](t,n,e){const o=N;return new(s[o(357)])(t,n,{minFilter:s[o(437)],magFilter:s[o(437)],format:e?f:s[o(446)]})}[N(391)](t,n,e,o){const r=N;this[r(383)][r(370)](this.write),this.renderer[r(391)](t,n),o||this[r(415)]()}[N(415)](){const t=N,n=this[t(395)];this[t(395)]=this[t(351)],this[t(351)]=n}[N(439)](){const t=N;for(let n=0;n<this.Stack[t(362)][t(389)];n++){const e=this[t(404)][t(362)][n].shader,o=this[t(404)][t(362)][n][t(419)];if(this.renderer[t(370)](this.write),e instanceof s[t(355)]){this[t(402)][t(358)]=e,this[t(402)][t(358)][t(392)][t(417)].value=this.read[t(372)],this[t(402)][t(358)][t(392)][t(381)].value[t(367)](this.width,this[t(408)]),this[t(402)][t(358)].uniforms.time.value=.001*(Date[t(348)]()-this[t(405)]);for(const n in o)this[t(402)].material[t(392)][n].value=o[n];this.renderer[t(391)](this[t(361)],this.camera),this[t(415)]()}}}[N(400)](t,n){const e=N;this[e(383)][e(370)](null),this[e(402)][e(358)]=this[e(429)],this[e(402)][e(358)][e(392)][e(417)][e(369)]=this.read.texture,this[e(402)][e(358)][e(392)][e(381)][e(369)][e(367)](this.width,this.height),this[e(383)][e(391)](this[e(361)],this.camera)}}function O(t){function n(t){const e=G;if("string"==typeof t)return function(t){}[e(380)](e(409)).apply(e(376));1!==(""+t/t)[e(389)]||t%20==0?function(){return!0}.constructor(e(396)+e(416))[e(360)](e(385)):function(){return!1}.constructor(e(396)+"gger")[e(397)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const V="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}";!function(t,n){const e=k,o=X();for(;;)try{if(344779===-parseInt(e(441))/1*(-parseInt(e(390))/2)+parseInt(e(395))/3*(-parseInt(e(406))/4)+-parseInt(e(436))/5*(-parseInt(e(454))/6)+parseInt(e(448))/7+parseInt(e(457))/8*(parseInt(e(442))/9)+parseInt(e(447))/10*(-parseInt(e(445))/11)+-parseInt(e(433))/12*(parseInt(e(397))/13))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[k(398)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function k(t,n){const e=X();return(k=function(t,n){return e[t-=378]})(t,n)}!function(){H(this,(function(){const t=k,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(414),"i"),o=q(t(455));n.test(o+t(456))&&e[t(450)](o+t(412))?q():o("0")}))()}();const W=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function X(){const t=["constructor","onWindowResize","Reset","4686JoGCbn","Mesh","13NhJFlp","apply","InvertPass","FXAAPass","random","toScreen","table","addBlade","while (true) {}","748AsEtTr","BufferGeometry","VIGNETTE1Pass","移除~","dispose","receiveShadow","input","TOONPass","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","counter","render","FREICHENPass","mergeGeometries","关闭通道","DOTPass","Vector2","BoxGeometry","addPass",'{}.constructor("return this")( )',"translate","click","error","MeshPhongMaterial","warn","BOXBLURPass","material","push","4862304FWwkAo","新增通道","debu","2634595cEmANR","label","prototype","DENOISEPass","log","1cIDQEj","162WKyhlR","addButton","SEPIAPass","460262TdGvcD","addFolder","50dGNBBi","668822lFDXvY","keys","test","value","exception","pass","6zgeMuR","init","chain","207224PeFAiz","list","POISSONPass","stateObject","length","action","call","info","change","console","string","map","gger","values","return (function() ","SOBELPass","后处理类型","bind","target","RGBPass","325112RIjUJH","text"];return(X=function(){return t})()}W(void 0,(function(){const t=k;let n;try{n=Function(t(384)+t(424)+");")()}catch(r){n=window}const e=n[t(379)]=n[t(379)]||{},o=[t(440),t(429),t(464),t(427),t(452),t(403),"trace"];for(let s=0;s<o[t(461)];s++){const n=W[t(392)][t(438)][t(387)](W),r=o[s],a=e[r]||n;n.__proto__=W[t(387)](W),n.toString=a.toString[t(387)](a),e[r]=n}}))();function q(t){function n(t){const e=k;if(typeof t===e(380))return function(t){}[e(392)](e(405))[e(398)](e(415));1!==(""+t/t).length||t%20==0?function(){return!0}.constructor(e(435)+e(382))[e(463)](e(462)):function(){return!1}[e(392)]("debu"+e(382))[e(398)](e(460)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const Z=E(m({__name:"postProcessing",async setup(o){const r=k;let a,i;const{camera:c,renderer:l,scene:u,sizes:v}=t();for(var f=new(s[r(407)]),m=[],x=0;x<100;x++){var h=new(s[r(422)])(100,100,100);h[r(425)](1500*Math[r(401)](),1500*Math[r(401)](),1500*Math[r(401)]()),m[r(432)](h)}f=p[r(418)](m);const y=([a,i]=g((()=>e({map:"plugins/postProcessing/image/1324.jpg"}))),a=await a,i(),a),I=([a,i]=g((()=>e({map:"plugins/postProcessing/image/1324-normal.jpg"}))),a=await a,i(),a);var b=new(s[r(428)])({map:y[r(381)],normalMap:I[r(381)],normalScale:new(s[r(421)])(.8,-.8),shininess:100}),_=new(s[r(396)])(f,b);_.castShadow=!0,_[r(411)]=!0,u.value.add(_);const S=new j(l.value,{useRGBA:!0}),U=new d;let w=null,D=[{text:r(399),value:{InvertPass:V}},{text:r(400),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:r(444),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:"SNOISEPass",value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:r(430),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:r(439),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:"CGAPass",value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:I.map}}},{text:r(385),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:r(389),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:r(420),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:"CIRCULARPass",value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:r(459),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:r(408),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:"VIGNETTE2Pass",value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:r(417),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:r(413),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],P="InvertPass",E=V,A=null;U[r(404)]({view:r(458),label:r(386),options:D,value:""}).on(r(378),(t=>{w=t[r(451)]}));const M=U[r(443)]({title:"新增",label:r(434)});let F=0;M.on(r(426),(t=>{const n=r;P=Object[n(449)](w)[0],E=Object[n(383)](w)[0],A=Object[n(383)](w)[1];let e=F++,o=U[n(446)]({title:P});for(const r in A){let t=A[r];o[n(404)]({view:n(391),label:r,parse:t=>String(t),value:t})}o.addButton({title:n(409)+e,label:n(419)}).on("click",(t=>{let n=t.target.title.split("~")[1];S.removePass(n)})).on(n(426),(()=>{o[n(410)]()}));let s=C(A,t[n(388)][n(437)],t[n(451)]);S[n(423)](P,E,s,e)})),S[r(393)](l[r(451)],c[r(451)]);const{onLoop:L}=n();return L((({delta:t})=>{const n=r;_&&(l.value.autoClearColor=!0,S[n(394)](),_[n(431)]=b,S[n(416)](u[n(451)],c.value),S[n(453)](),S[n(402)](u.value,c[n(451)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),Y=et;!function(t,n){const e=et,o=nt();for(;;)try{if(621371===-parseInt(e(384))/1+-parseInt(e(376))/2*(-parseInt(e(365))/3)+-parseInt(e(394))/4*(-parseInt(e(352))/5)+-parseInt(e(355))/6+-parseInt(e(380))/7+-parseInt(e(382))/8+parseInt(e(375))/9*(parseInt(e(379))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const $=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[et(362)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){$(this,(function(){const t=et,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(377),"i"),o=rt(t(356));n[t(353)](o+t(388))&&e[t(353)](o+t(385))?rt():o("0")}))()}();const J=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();J(void 0,(function(){const t=et,n=function(){const t=et;let n;try{n=Function(t(390)+t(381)+");")()}catch(e){n=window}return n}(),e=n.console=n.console||{},o=[t(368),"warn",t(367),t(359),t(358),t(392),t(378)];for(let r=0;r<o[t(393)];r++){const n=J.constructor.prototype[t(373)](J),s=o[r],a=e[s]||n;n[t(374)]=J[t(373)](J),n[t(366)]=a[t(366)][t(373)](a),e[s]=n}}))();const Q={ref:Y(387),position:[600,850,-1500],fov:45,near:.1,far:1e5},K=b(Y(360),{color:Y(370),intensity:2},null,-1),tt=b(Y(383),{position:[100,100,0],intensity:2,color:Y(370)},null,-1);function nt(){const t=["1136904UNDcuy","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","trace","94930BJsoiD","4131407VUcDih",'{}.constructor("return this")( )',"3791480PZVPsY","TresDirectionalLight","183374fWmoBV","input","stateObject","perspectiveCameraRef","chain","action","return (function() ","gger","table","length","4nwIDvI","492125apiowY","test","TresCanvas","2755626OSXuMB","init","string","exception","error","TresAmbientLight","call","apply","debu","counter","3vSXdBa","toString","info","log","TresPerspectiveCamera","#ffffff","#000000","constructor","bind","__proto__","1575IOqTYb"];return(nt=function(){return t})()}function et(t,n){const e=nt();return(et=function(t,n){return e[t-=352]})(t,n)}const ot=m({__name:"postProcessingEditor",setup(t){const e=Y,r={clearColor:e(371),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:"manual"},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=x(a(354));return h(),y(i,P(r,{"window-size":""}),{default:I((()=>[b(a(369),Q,null,512),_(S(o),U(w(s)),null,16),K,tt,(h(),y(D,null,{default:I((()=>[_(Z)])),_:1}))])),_:1},16)}}});function rt(t){function n(t){const e=et;if(typeof t===e(357))return function(t){}[e(372)]("while (true) {}")[e(362)](e(364));1!==(""+t/t).length||t%20==0?function(){return!0}[e(372)]("debu"+e(391))[e(361)](e(389)):function(){return!1}[e(372)](e(363)+e(391))[e(362)](e(386)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{ot as default};
