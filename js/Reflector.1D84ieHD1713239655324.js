import{au as x,bA as u,bw as g,bx as M,aH as h,bz as P,bB as b,b2 as T,b3 as s,be as c,bg as d,bd as w,aB as W,aG as R,aw as C}from"./vendor.DUm4xHeP1713239655324.js";function y(){const o=new x;return o.setAttribute("position",new u([-1,3,0,-1,-1,0,3,-1,0],3)),o.setAttribute("uv",new u([0,2,0,0,2,0],2)),o}const A="\nvec4 blur13(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n  vec4 color = vec4(0.0);\n  vec2 off1 = vec2(1.411764705882353) * direction;\n  vec2 off2 = vec2(3.2941176470588234) * direction;\n  vec2 off3 = vec2(5.176470588235294) * direction;\n  color += texture(image, uv) * 0.1964825501511404;\n  color += texture(image, uv + (off1 / resolution)) * 0.2969069646728344;\n  color += texture(image, uv - (off1 / resolution)) * 0.2969069646728344;\n  color += texture(image, uv + (off2 / resolution)) * 0.09447039785044732;\n  color += texture(image, uv - (off2 / resolution)) * 0.09447039785044732;\n  color += texture(image, uv + (off3 / resolution)) * 0.010381362401148057;\n  color += texture(image, uv - (off3 / resolution)) * 0.010381362401148057;\n  return color;\n}\n",U="\nfloat smootherstep(float edge0, float edge1, float x) {\n    x = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n    return x * x * x * (x * (x * 6.0 - 15.0) + 10.0);\n}\n",B="\nin vec3 position;\nin vec2 uv;\n\nout vec2 vUv;\n\nvoid main() {\n    vUv = uv;\n\n    gl_Position = vec4(position, 1.0);\n}\n",S="\nprecision highp float;\n\nuniform sampler2D tMap;\nuniform vec2 uDirection;\nuniform vec2 uResolution;\n\nin vec2 vUv;\n\nout vec4 FragColor;\n\n".concat(U,"\n").concat(A,"\n\nvoid main() {\n    FragColor = blur13(tMap, vUv, uResolution, smootherstep(1.0, 0.0, vUv.y) * uDirection);\n}\n");class z extends g{constructor(){super({glslVersion:M,uniforms:{tMap:{value:null},uDirection:{value:new h(1,0)},uResolution:{value:new h}},vertexShader:B,fragmentShader:S,blending:P,depthTest:!1,depthWrite:!1})}}class F extends b{constructor({width:t=512,height:r=512,clipBias:i=0,blurIterations:e=8}={}){super(),this.clipBias=i,this.blurIterations=e,this.reflectorPlane=new T,this.normal=new s,this.reflectorWorldPosition=new s,this.cameraWorldPosition=new s,this.rotationMatrix=new c,this.lookAtPosition=new s(0,0,-1),this.clipPlane=new d,this.view=new s,this.target=new s,this.q=new d,this.textureMatrix=new c,this.virtualCamera=new w,this.textureMatrixUniform={value:this.textureMatrix},this.renderTarget=new W(t,r,{depthBuffer:!1}),this.renderTargetRead=this.renderTarget.clone(),this.renderTargetWrite=this.renderTarget.clone(),this.renderTarget.depthBuffer=!0,this.renderTargetUniform={value:this.blurIterations>0?this.renderTargetRead.texture:this.renderTarget.texture},this.blurMaterial=new z,this.blurMaterial.uniforms.uResolution.value.set(t,r),this.screenCamera=new R(-1,1,1,-1,0,1),this.screenTriangle=y(),this.screen=new C(this.screenTriangle,this.blurMaterial),this.screen.frustumCulled=!1}setSize(t,r){this.renderTarget.setSize(t,r),this.renderTargetRead.setSize(t,r),this.renderTargetWrite.setSize(t,r),this.blurMaterial.uniforms.uResolution.value.set(t,r)}update(t,r,i){if(this.reflectorWorldPosition.setFromMatrixPosition(this.matrixWorld),this.cameraWorldPosition.setFromMatrixPosition(i.matrixWorld),this.rotationMatrix.extractRotation(this.matrixWorld),this.normal.set(0,0,1),this.normal.applyMatrix4(this.rotationMatrix),this.view.subVectors(this.reflectorWorldPosition,this.cameraWorldPosition),this.view.dot(this.normal)>0)return;this.view.reflect(this.normal).negate(),this.view.add(this.reflectorWorldPosition),this.rotationMatrix.extractRotation(i.matrixWorld),this.lookAtPosition.set(0,0,-1),this.lookAtPosition.applyMatrix4(this.rotationMatrix),this.lookAtPosition.add(this.cameraWorldPosition),this.target.subVectors(this.reflectorWorldPosition,this.lookAtPosition),this.target.reflect(this.normal).negate(),this.target.add(this.reflectorWorldPosition),this.virtualCamera.position.copy(this.view),this.virtualCamera.up.set(0,1,0),this.virtualCamera.up.applyMatrix4(this.rotationMatrix),this.virtualCamera.up.reflect(this.normal),this.virtualCamera.lookAt(this.target),this.virtualCamera.far=i.far,this.virtualCamera.updateMatrixWorld(),this.virtualCamera.projectionMatrix.copy(i.projectionMatrix),this.textureMatrix.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),this.textureMatrix.multiply(this.virtualCamera.projectionMatrix),this.textureMatrix.multiply(this.virtualCamera.matrixWorldInverse),this.textureMatrix.multiply(this.matrixWorld),this.reflectorPlane.setFromNormalAndCoplanarPoint(this.normal,this.reflectorWorldPosition),this.reflectorPlane.applyMatrix4(this.virtualCamera.matrixWorldInverse),this.clipPlane.set(this.reflectorPlane.normal.x,this.reflectorPlane.normal.y,this.reflectorPlane.normal.z,this.reflectorPlane.constant);const e=this.virtualCamera.projectionMatrix;this.q.x=(Math.sign(this.clipPlane.x)+e.elements[8])/e.elements[0],this.q.y=(Math.sign(this.clipPlane.y)+e.elements[9])/e.elements[5],this.q.z=-1,this.q.w=(1+e.elements[10])/e.elements[14],this.clipPlane.multiplyScalar(2/this.clipPlane.dot(this.q)),e.elements[2]=this.clipPlane.x,e.elements[6]=this.clipPlane.y,e.elements[10]=this.clipPlane.z+1-this.clipBias,e.elements[14]=this.clipPlane.w;const m=t.getRenderTarget(),f=t.xr.enabled,p=t.shadowMap.autoUpdate;t.xr.enabled=!1,t.shadowMap.autoUpdate=!1,t.setRenderTarget(this.renderTarget),t.state.buffers.depth.setMask(!0),t.autoClear===!1&&t.clear(),t.render(r,this.virtualCamera);const l=this.blurIterations;for(let a=0;a<l;a++){a===0?this.blurMaterial.uniforms.tMap.value=this.renderTarget.texture:this.blurMaterial.uniforms.tMap.value=this.renderTargetRead.texture;const n=(l-a-1)*.5;this.blurMaterial.uniforms.uDirection.value.set(a%2===0?n:0,a%2===0?0:n),t.setRenderTarget(this.renderTargetWrite),t.autoClear===!1&&t.clear(),t.render(this.screen,this.screenCamera);const v=this.renderTargetRead;this.renderTargetRead=this.renderTargetWrite,this.renderTargetWrite=v,this.renderTargetUniform.value=this.renderTargetRead.texture}t.xr.enabled=f,t.shadowMap.autoUpdate=p,t.setRenderTarget(m)}destroy(){this.renderTargetWrite.dispose(),this.renderTargetRead.dispose(),this.renderTarget.dispose(),this.blurMaterial.dispose(),this.screenTriangle.dispose();for(const t in this)this[t]=null;return null}}export{F as R};
