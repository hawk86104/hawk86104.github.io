import{e,k as n,a as i}from"./@tresjs.DDZ0vesk1744863032604.js";import{n as o,br as a,C as r,p as t,bq as l,a2 as s,ab as c,aI as u,cw as m,cx as f,cy as d,cz as v}from"./three.B0XaFSnH1744863032604.js";import{z as p}from"./three-custom-shader-material.Cs7iC7LJ1744863032604.js";import{r as g,i as h,s as y}from"./utils.D42y0R0G1744863032604.js";import{b as _,a as x}from"./buildingsCustomShaderMaterial.DyBo--wu1744863032604.js";import{d as b,a5 as w,b as j,H as S,o as C,e as O,j as k,am as z,f as B,J as M,u as P,F as T,h as N}from"./@vue.DK6ok9LJ1744863032604.js";import{_ as U}from"./roadLight.vue_vue_type_script_setup_true_lang.DMUbkT9t1744863032604.js";import"./postprocessing.DMK_Mhe01744863032604.js";import"./@vueuse.aRlY5CPe1744863032604.js";import"./@fesjs.1a7Lul6Z1744863032604.js";import"./vue-router.CdrpVSr11744863032604.js";import"./lodash-es.BOsRjQhS1744863032604.js";import"./@qlin.q6OWdsQV1744863032604.js";import"./pinia.vfLI9vPt1744863032604.js";import"./@babel.BPq7uOAK1744863032604.js";import"./@floating-ui.BFjFSAYt1744863032604.js";import"./@juggle.CcBCnTIR1744863032604.js";import"./three-mesh-bvh.CQMVAHAP1744863032604.js";var E=D;!function(){for(var e=D,n=A();;)try{if(659988===-parseInt(e(457))/1+parseInt(e(460))/2*(parseInt(e(465))/3)+-parseInt(e(472))/4+-parseInt(e(461))/5+parseInt(e(443))/6*(-parseInt(e(458))/7)+-parseInt(e(431))/8*(-parseInt(e(453))/9)+parseInt(e(470))/10)break;n.push(n.shift())}catch(i){n.push(n.shift())}}();var I,W=(I=!0,function(e,n){var i=I?function(){if(n){var i=n.apply(e,arguments);return n=null,i}}:function(){};return I=!1,i});function A(){var e=["#00d5ff","length","console","depthTest","uniforms","bind","transparent","constructor","getElapsedTime","369Yfpvhp","fresnelOpacity","time","clock","401229raFyFH","4517261QgPjEH","fragmentShader","3866juJtfH","183340KtQCNE","chain","toString","table","1497gDYxkq","hologramOpacity","counter"," \n      varying vec2 vUv;\n      varying vec3 vPositionW;\n      varying vec4 vPos;\n      varying vec3 vNormalW;\n      \n      uniform float time;\n      uniform float fresnelOpacity;\n      uniform float scanlineSize;\n      uniform float fresnelAmount;\n      uniform float signalSpeed;\n      uniform float hologramBrightness;\n      uniform float hologramOpacity;\n      uniform bool blinkFresnelOnly;\n      uniform bool enableBlinking;\n      uniform vec3 hologramColor;\n\n      float flicker( float amt, float time ) {return clamp( fract( cos( time ) * 43758.5453123 ), amt, 1.0 );}\n      float random(in float a, in float b) { return fract((cos(dot(vec2(a,b) ,vec2(12.9898,78.233))) * 43758.5453)); }\n\n      void main() {\n        vec2 vCoords = vPos.xy;\n        vCoords /= vPos.w;\n        vCoords = vCoords * 0.5 + 0.5;\n        vec2 myUV = fract( vCoords );\n\n        // Defines hologram main color\n        vec4 hologramColor = vec4(hologramColor, mix(hologramBrightness, vUv.y, 0.5));\n\n        // Add scanlines\n        float scanlines = 10.;\n        scanlines += 20. * sin(time *signalSpeed * 20.8 - myUV.y * 60. * scanlineSize);\n        scanlines *= smoothstep(1.3 * cos(time *signalSpeed + myUV.y * scanlineSize), 0.78, 0.9);\n        scanlines *= max(0.25, sin(time *signalSpeed) * 1.0);        \n        \n        // Scanlines offsets\n        float r = random(vUv.x, vUv.y);\n        float g = random(vUv.y * 20.2, \tvUv.y * .2);\n        float b = random(vUv.y * .9, \tvUv.y * .2);\n\n        // Scanline composition\n        hologramColor += vec4(r*scanlines, b*scanlines, r, 1.0) / 84.;\n        vec4 scanlineMix = mix(vec4(0.0), hologramColor, hologramColor.a);\n\n        // Calculates fresnel\n        vec3 viewDirectionW = normalize(cameraPosition - vPositionW);\n        float fresnelEffect = dot(viewDirectionW, vNormalW) * (1.6 - fresnelOpacity/2.);\n        fresnelEffect = clamp(fresnelAmount - fresnelEffect, 0., fresnelOpacity);\n\n        // Blinkin effect\n        //Suggested by Octano - https://x.com/OtanoDesign?s=20\n        float blinkValue = enableBlinking ? 0.6 - signalSpeed : 1.0;\n        float blink = flicker(blinkValue, time * signalSpeed * .02);\n    \n        // Final shader composition\n        vec3 finalColor;\n\n        if(blinkFresnelOnly){\n          // finalColor = vec3(1.0,1.0,0);\n          finalColor = scanlineMix.rgb + fresnelEffect * blink;\n        }else{\n          finalColor = scanlineMix.rgb * blink + fresnelEffect;\n        }\n\n        gl_FragColor = vec4( finalColor, hologramOpacity);\n\n      }","setValues","16572110cLcCGm","signalSpeed","4939276UlTEnn","__proto__","side","gger","stateObject","error","value","enableBlinking","\n      #define STANDARD\n      varying vec3 vViewPosition;\n      #ifdef USE_TRANSMISSION\n      varying vec3 vWorldPosition;\n      #endif\n    \n      varying vec2 vUv;\n      varying vec4 vPos;\n      varying vec3 vNormalW;\n      varying vec3 vPositionW;\n\n      #include <common>\n      #include <uv_pars_vertex>\n      #include <envmap_pars_vertex>\n      #include <color_pars_vertex>\n      #include <fog_pars_vertex>\n      #include <morphtarget_pars_vertex>\n      #include <skinning_pars_vertex>\n      #include <logdepthbuf_pars_vertex>\n      #include <clipping_planes_pars_vertex>\n\n      void main() {\n        \n        #include <uv_vertex>\n        #include <color_vertex>\n        #include <morphcolor_vertex>\n      \n        #if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n      \n          #include <beginnormal_vertex>\n          #include <morphnormal_vertex>\n          #include <skinbase_vertex>\n          #include <skinnormal_vertex>\n          #include <defaultnormal_vertex>\n      \n        #endif\n      \n        #include <begin_vertex>\n        #include <morphtarget_vertex>\n        #include <skinning_vertex>\n        #include <project_vertex>\n        #include <logdepthbuf_vertex>\n        #include <clipping_planes_vertex>\n      \n        #include <worldpos_vertex>\n        #include <envmap_vertex>\n        #include <fog_vertex>\n\n        mat4 modelViewProjectionMatrix = projectionMatrix * modelViewMatrix;\n\n        vUv = uv;\n        vPos = projectionMatrix * modelViewMatrix * vec4( transformed, 1.0 );\n        vPositionW = vec3( vec4( transformed, 1.0 ) * modelMatrix);\n        vNormalW = normalize( vec3( vec4( normal, 0.0 ) * modelMatrix ) );\n        \n        gl_Position = modelViewProjectionMatrix * vec4( transformed, 1.0 );\n\n      }","hologramBrightness","blendMode","info","string","apply","fresnelAmount","69512HNYOpy","exception","test","trace","input","vertexShader","warn","hologramColor","update","blinkFresnelOnly","function *\\( *\\)","prototype","6crSGiV"];return(A=function(){return e})()}!function(){W(this,(function(){var e=D,n=new RegExp(e(441)),i=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=L("init");n[e(433)](o+e(462))&&i[e(433)](o+e(435))?L():o("0")}))()}();var V,F=(V=!0,function(e,n){var i=V?function(){if(n){var i=n[D(429)](e,arguments);return n=null,i}}:function(){};return V=!1,i});function D(e,n){var i=A();return D=function(e,n){return i[e-=423]},D(e,n)}F(void 0,(function(){for(var e=D,n=function(){var e;try{e=Function('return (function() {}.constructor("return this")( ));')()}catch(n){e=window}return e}(),i=n[e(446)]=n.console||{},o=["log",e(437),e(427),e(477),e(432),e(464),e(434)],a=0;a<o[e(445)];a++){var r=F[e(451)][e(442)].bind(F),t=o[a],l=i[t]||r;r[e(473)]=F[e(449)](F),r[e(463)]=l[e(463)].bind(l),i[t]=r}}))();class H extends o{constructor(e={}){var n=D;super(),this[n(436)]=n(424),this[n(459)]=n(468),this.uniforms={time:new a(0),fresnelOpacity:new a(void 0!==e[n(454)]?e.fresnelOpacity:1),fresnelAmount:new a(void 0!==e[n(430)]?e[n(430)]:.45),scanlineSize:new a(void 0!==e.scanlineSize?e.scanlineSize:8),hologramBrightness:new a(void 0!==e[n(425)]?e.hologramBrightness:1),signalSpeed:new a(void 0!==e[n(471)]?e[n(471)]:1),hologramColor:new a(void 0!==e[n(438)]?new r(e[n(438)]):new r(n(444))),enableBlinking:new a(void 0===e[n(423)]||e[n(423)]),blinkFresnelOnly:new a(void 0===e[n(440)]||e[n(440)]),hologramOpacity:new a(void 0!==e[n(466)]?e[n(466)]:1)},this[n(456)]=new t,this[n(469)](e),this.depthTest=void 0!==e[n(447)]&&e[n(447)],this.blending=void 0!==e[n(426)]?e.blendMode:l,this[n(450)]=!0,this[n(474)]=void 0!==e[n(474)]?e[n(474)]:s}[E(439)](){var e=E;this[e(448)][e(455)][e(478)]=this[e(456)][e(452)]()}}function L(e){function n(e){var i=D;if(typeof e===i(428))return function(e){}.constructor("while (true) {}")[i(429)](i(467));1!==(""+e/e)[i(445)]||e%20==0?function(){return!0}.constructor("debu"+i(475)).call("action"):function(){return!1}[i(451)]("debu"+i(475)).apply(i(476)),n(++e)}try{if(e)return n;n(0)}catch(i){}}const G=b({__name:"importantBuildings",props:{group:{}},setup(n){const i=n,o=0,a=0,t=15,s=1.3,u="#e05b0f",m=new H({blendMode:l,hologramBrightness:2.5,side:c});m.uniforms.fresnelAmount.value=o,m.uniforms.scanlineSize.value=t,m.uniforms.signalSpeed.value=s,m.uniforms.fresnelOpacity.value=a,m.uniforms.hologramColor.value=new r(u),m.uniforms.enableBlinking.value=!1,m.depthTest=!0;let f,d,v=null;(()=>{const e=i.group.getObjectByName("02-huanqiujinrongzhongxin_huanqiujinrongzhongxin_0");e.name="环球金融中心",e.material.dispose(),g(e.geometry),e.material=m,f=i.group.getObjectByName("01-shanghaizhongxindasha_shanghaizhongxindasha_0"),f.name="上海中心",f.material.dispose(),g(f.geometry),f.material=m.clone(),f.material.uniforms.hologramColor.value=new r("#006cf9"),f.material.uniforms.fresnelAmount.value=1,f.material.uniforms.scanlineSize.value=2.1,f.material.uniforms.signalSpeed.value=.4,d=i.group.getObjectByName("03-jinmaodasha_jjinmaodasha_0"),d.name="金茂大厦",d.material.dispose(),g(d.geometry),d.material=m.clone(),d.material.uniforms.hologramColor.value=new r("#5e0fe0"),d.material.uniforms.scanlineSize.value=15,d.material.uniforms.signalSpeed.value=.18,v=i.group.getObjectByName("04-dongfangmingzhu_dongfangmingzhu_0"),v.name="东方明珠塔",v.material.dispose(),g(v.geometry),v.material=m.clone(),v.material.uniforms.scanlineSize.value=5,v.material.uniforms.signalSpeed.value=1.3,v.material.uniforms.hologramColor.value=new r("#e00f0f"),v.material.uniforms.fresnelOpacity.value=.1})();const{onLoop:p}=e();return p((()=>{m.update(),f.material.update(),d.material.update(),v.material.update()})),(e,n)=>null}}),q=["object"],R=b({__name:"buildingsMode",async setup(i){let o,a;h();const{scene:t}=([o,a]=w((()=>n("./plugins/digitalCity/model/shanghaiDraco/shanghaiDraco.gltf",{draco:!0,decoderPath:"./draco/"}))),o=await o,a(),o),l=t.clone(),s=j(0);l.traverse((async e=>{if(e.isMesh&&(-1!==e.name.indexOf("Shanghai")||-1!==e.name.indexOf("Object")))if(-1!==e.name.indexOf("Floor"));else if(-1!==e.name.indexOf("River")){const n=await y(e);n.position.set(0,0,1800),e.add(n)}else(e=>{const{geometry:n}=e;n.computeBoundingBox(),n.computeBoundingSphere(),n.computeBoundsTree();const{max:i,min:o}=n.boundingBox,a=new p({baseMaterial:u,vertexShader:x,fragmentShader:_,silent:!0,uniforms:{uMax:{value:i},uMin:{value:o},uBorderWidth:{value:.006},uCircleTime:{value:3},uColor:{value:new r("#005c58")},uOpacity:{value:.8},uLightColor:{value:new r("#990")},uTopColor:{value:new r("#888800")},uTime:s,uGradient:{value:!0}},depthWrite:!0,depthTest:!0,transparent:!0,side:c});e.material.dispose(),e.material=a})(e),(e=>{const n=new m(e.geometry,1e3);let i=(new f).fromEdgesGeometry(n);i.computeBoundsTree();let o=new d({color:new r("#000"),linewidth:.8,opacity:.6,transparent:!0,depthWrite:!0,depthTest:!0});o.resolution.set(window.innerWidth,window.innerHeight),e.add(new v(i,o))})(e)}));const{onLoop:g}=e();return g((({delta:e})=>{s.value+=e})),(e,n)=>(C(),S(T,null,[(C(),O(z,null,{default:B((()=>[M("primitive",{object:P(l),position:[1,0,1],"cast-shadow":"","receive-shadow":""},null,8,q)])),_:1})),k(G,{group:P(l)},null,8,["group"])],64))}}),J=b({__name:"city2",setup:e=>(e,n)=>{const o=N("TresCanvas");return C(),O(o,{shadows:"","window-size":"",clearColor:"#333"},{default:B((()=>[n[0]||(n[0]=M("TresPerspectiveCamera",{position:[.5,2,1.5],fov:45,near:.1,far:1e5},null,-1)),k(P(i)),n[1]||(n[1]=M("TresAmbientLight",{color:"#ffffff"},null,-1)),n[2]||(n[2]=M("TresDirectionalLight",{position:[0,3,3],intensity:2,color:"#ffffff","cast-shadow":"","shadow-mapSize-width":1024,"shadow-mapSize-height":1024},null,-1)),(C(),O(z,null,{default:B((()=>[k(R)])),_:1})),(C(),O(z,null,{default:B((()=>[k(U,{color:"#ffffff",radius:1,speed:1,geoJson:"plugins/digitalCity/geojson/secondarySmall.geojson","rotation-y":1.3826597599330712,scale:.001025905404044292,position:[-1.877460474821603,.01,-1.5464791950519081]})])),_:1})),n[3]||(n[3]=M("TresGridHelper",{args:[6,10],position:[0,0,0]},null,-1))])),_:1})}});export{J as default};
