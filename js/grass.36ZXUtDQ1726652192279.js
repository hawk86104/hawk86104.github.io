import{_ as t,V as n,C as e,T as o,a0 as r,ai as a}from"./three.3esZ7Hzr1726652192279.js";import{U as i,z as s,Y as c,L as l}from"./@tresjs.UGbbWZf51726652192279.js";import"./index._7QLgvAr1726652192279.js";import{a as u}from"./simplex-noise.P9JMzoHY1726652192279.js";import{C as f}from"./index.3TTzxxqz1726652192279.js";import{d as p,a4 as h,o as m,E as v,L as d,u as g,r as x,f as w,g as y,j as b,aj as _,ak as M,al as j}from"./@vue.JNsx1iN61726652192279.js";import{_ as z}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.ZUmeWr481726652192279.js";import"./@vueuse.OdTlFP151726652192279.js";import"./lamina.BHCgDTeW1726652192279.js";import"./glsl-tokenizer.lP_hSvTG1726652192279.js";import"./@amap.-LPMSFvH1726652192279.js";import"./glsl-token-descope.TGpK_NWT1726652192279.js";import"./glsl-token-depth.GdKEHOgt1726652192279.js";import"./glsl-token-scope.zN2AbQNE1726652192279.js";import"./glsl-token-properties.T_vYXvXb1726652192279.js";import"./glsl-token-assignments.M6Fk3b1G1726652192279.js";import"./glsl-token-string.0mUiHG4f1726652192279.js";import"./glsl-token-functions.lY9NGLSv1726652192279.js";import"./object-hash.659hUnW-1726652192279.js";import"./jszip.uBbFte4W1726652192279.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.6nzk6zFY1726652192279.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.Eexai_HQ1726652192279.js";import"./three-stdlib.yAKyCK811726652192279.js";import"./@pmndrs.GLf74zq01726652192279.js";import"./utils.JuFIwLkF1726652192279.js";const A=S;!function(t,n){const e=S,o=D();for(;;)try{if(808193===-parseInt(e(334))/1*(-parseInt(e(335))/2)+parseInt(e(371))/3+parseInt(e(344))/4+-parseInt(e(349))/5*(parseInt(e(327))/6)+-parseInt(e(366))/7*(-parseInt(e(361))/8)+-parseInt(e(363))/9+-parseInt(e(324))/10*(parseInt(e(372))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const I=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[S(380)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){I(this,(function(){const t=S,n=new RegExp(t(341)),e=new RegExp(t(348),"i"),o=E(t(370));n.test(o+"chain")&&e.test(o+t(374))?E():o("0")}))()}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[S(380)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function S(t,n){const e=D();return(S=function(t,n){return e[t-=312]})(t,n)}C(void 0,(function(){const t=S;let n;try{n=Function(t(357)+t(312)+");")()}catch(r){n=window}const e=n.console=n.console||{},o=[t(342),"warn",t(369),t(318),t(332),t(360),t(362)];for(let a=0;a<o[t(340)];a++){const n=C[t(338)][t(355)][t(376)](C),r=o[a],i=e[r]||n;n.__proto__=C[t(376)](C),n.toString=i[t(313)][t(376)](i),e[r]=n}}))();const k=["material"],F=[A(352),A(381),A(323),A(319),"attributes-orientation",A(337),"attributes-halfRootAngleSin",A(384)],R=[A(346)],L=[A(339)];function D(){const t=["table","206984KyLLau","trace","8333118wvLXWm","orientationsF32","set","63aMJUKG","InstancedBufferAttribute","Vector4","info","init","3739857ApxwXh","1100XezSJq","needsUpdate","input","random","bind","alphaMap","array","lookAt","apply","attributes-position","Color","sin","attributes-halfRootAngleCos","stretchesF32",'{}.constructor("return this")( )',"toString","push","map","width","toneMapped","error","attributes-offset","attributes","TresInstancedBufferGeometry","debu","attributes-uv","82370nieJTn","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","position","7782LjtCmC","DoubleSide","#000f00","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","Vector3","exception","value","7108nLcVJf","312AwDoMQ","string","attributes-stretch","constructor","side","length","function *\\( *\\)","log","offsetsF32","526384jWMFEM","gger","geometry","cos","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","625FBtbmh","convertSRGBToLinear","instances","index","PlaneGeometry","normalize","prototype","action","return (function() ","stateObject","computeVertexNormals"];return(D=function(){return t})()}const T=p({__name:"grass",props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(a){const c=A;let l,p;const x=([l,p]=h((()=>s({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),l=await l,p(),l),w=a,y=u(Math[c(375)]);function b(n,e){const o=c,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,a=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,i=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,s=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(368)])(r,a,i,s)}function _(t,n){var e=2*y(t/50,n/50);return e+=4*y(t/100,n/100),e+=.2*y(t/10,n/10)}const M=function(e,r){const a=c,i=[],s=[],l=[],u=[],f=[];let p=new(t[a(368)]),h=new(t[a(368)]);const m=-.25;for(let o=0;o<e;o++){const c=Math.random()*r-r/2,v=Math[a(375)]()*r-r/2,d=_(c,v);i[a(314)](c,d,v);let g=Math.PI-Math.random()*(2*Math.PI);u[a(314)](Math[a(383)](.5*g)),f.push(Math.cos(.5*g));let x=new(t[a(331)])(0,1,0),w=x.x*Math.sin(g/2),y=x.y*Math[a(383)](g/2),M=x.z*Math[a(383)](g/2),j=Math[a(347)](g/2);p.set(w,y,M,j)[a(354)](),g=.5*Math.random()+m,x=new(t[a(331)])(1,0,0),w=x.x*Math.sin(g/2),y=x.y*Math.sin(g/2),M=x.z*Math[a(383)](g/2),j=Math[a(347)](g/2),h[a(365)](w,y,M,j)[a(354)](),p=b(p,h),g=.5*Math[a(375)]()+m,x=new n(0,0,1),w=x.x*Math[a(383)](g/2),y=x.y*Math.sin(g/2),M=x.z*Math[a(383)](g/2),j=Math[a(347)](g/2),h[a(365)](w,y,M,j)[a(354)](),p=b(p,h),s[a(314)](p.x,p.y,p.z,p.w),o<e/3?l.push(1.8*Math[a(375)]()):l[a(314)](Math.random())}return{offsetsF32:new(t[a(367)])(new Float32Array(i),3),orientationsF32:new(t[a(367)])(new Float32Array(s),4),stretchesF32:new o(new Float32Array(l),1),halfRootAngleCosF32:new o(new Float32Array(f),1),halfRootAngleSinF32:new(t[a(367)])(new Float32Array(u),1)}}(w[c(351)],w[c(316)]),j=new(t[c(353)])(w.bW,w.bH,1,w.joints).translate(0,w.bH/2,0),z=new(t[c(353)])(w.width,w[c(316)],32,32);z[c(379)](new n(0,1,0));const I=z[c(320)][c(326)];for(let t=0;t<I.array[c(340)];t+=3)I[c(378)][t+1]=_(I.array[t],I[c(378)][t+2]);z.attributes.position[c(373)]=!0,z[c(359)]();const C=new(f({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new e(.3,.9,0)[c(350)](),bottomColor:new(t[c(382)])(0,.2,0)[c(350)]()},c(325),c(330),(t=>{t[c(339)]=r})));C[c(315)]=x[c(315)],C.alphaMap=x[c(377)],C[c(317)]=!1;const{onLoop:S}=i();return S((({elapsed:t})=>{const n=c;C.uniforms.time[n(333)]=t/4})),(n,e)=>{const o=c;return m(),v("TresGroup",null,[d("TresMesh",{material:g(C)},[d(o(321),{index:g(j)[o(352)],"attributes-position":g(j).attributes[o(326)],"attributes-uv":g(j).attributes.uv,"attributes-offset":g(M)[o(343)],"attributes-orientation":g(M)[o(364)],"attributes-stretch":g(M)[o(385)],"attributes-halfRootAngleSin":g(M).halfRootAngleSinF32,"attributes-halfRootAngleCos":g(M).halfRootAngleCosF32},null,8,F)],8,k),d("TresMesh",{position:[0,0,0],geometry:g(z)},[d("TresMeshStandardMaterial",{color:o(329),side:t[o(328)]},null,8,L)],8,R)])}}});function E(t){function n(t){const e=S;if(typeof t===e(336))return function(t){}[e(338)]("while (true) {}").apply("counter");1!==(""+t/t).length||t%20==0?function(){return!0}[e(338)](e(322)+e(345)).call(e(356)):function(){return!1}[e(338)](e(322)+e(345))[e(380)](e(358)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const O=q;!function(t,n){const e=q,o=H();for(;;)try{if(466391===parseInt(e(211))/1+parseInt(e(210))/2+-parseInt(e(204))/3+-parseInt(e(201))/4+-parseInt(e(220))/5+parseInt(e(198))/6*(parseInt(e(232))/7)+parseInt(e(205))/8*(parseInt(e(208))/9))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const P=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){P(this,(function(){const t=q,n=new RegExp(t(213)),e=new RegExp(t(209),"i"),o=V("init");n[t(199)](o+t(206))&&e[t(199)](o+t(214))?V():o("0")}))()}();const U=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();U(void 0,(function(){const t=q;let n;try{n=Function(t(217)+t(227)+");")()}catch(r){n=window}const e=n.console=n[t(229)]||{},o=[t(222),t(207),t(215),t(228),"exception",t(233),t(219)];for(let a=0;a<o.length;a++){const n=U[t(202)][t(200)][t(212)](U),r=o[a],i=e[r]||n;n[t(231)]=U[t(212)](U),n[t(216)]=i.toString[t(212)](i),e[r]=n}}))();const B=d(O(197),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1);function H(){const t=["1586217ZTSdhD","24QmWvlW","chain","warn","2177253gOHbwE","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","434932oRVMge","111480aAOUeT","bind","function *\\( *\\)","input","info","toString","return (function() ","apply","trace","2101300XGKeky","call","log","gger","counter","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","debu",'{}.constructor("return this")( )',"error","console","stateObject","__proto__","49mbGtag","table","TresPerspectiveCamera","643836nUPeqq","test","prototype","1561796iiLwnn","constructor","string"];return(H=function(){return t})()}function q(t,n){const e=H();return(q=function(t,n){return e[t-=197]})(t,n)}const G=p({__name:"grass",setup(t){const n=x({alpha:!0,toneMapping:a,windowSize:!0,clearColor:6710886}),e=x({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=q;return m(),w(g(l),_(M(n)),{default:y((()=>[B,b(g(c),_(M(e)),null,16),(m(),w(j,null,{default:y((()=>[b(T)])),_:1})),(m(),w(j,null,{default:y((()=>[b(g(z),{texture:r(225)})])),_:1}))])),_:1},16)}}});function V(t){function n(t){const e=q;if(typeof t===e(203))return function(t){}[e(202)]("while (true) {}").apply(e(224));1!==(""+t/t).length||t%20==0?function(){return!0}[e(202)]("debu"+e(223))[e(221)]("action"):function(){return!1}.constructor(e(226)+e(223))[e(218)](e(230)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{G as default};
