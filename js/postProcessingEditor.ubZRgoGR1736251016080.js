import{m as t,e as n,b as e,U as o}from"./@tresjs.8C7OKmBm1736251016080.js";import{_ as r,Y as s,V as a,as as i,k as l,M as c,s as u,W as v,n as f,bf as p,aW as m,cU as d,aD as g,c2 as x}from"./three.RuuDeeIf1736251016080.js";import{P as h}from"./tweakpane.yHWGBmom1736251016080.js";import{d as y,a4 as I,e as b,o as _,f as S,g as U,J as w,j as P,u as D,aj as E,ak as M,al as A,m as L}from"./@vue.-Mz_IXfk1736251016080.js";import{_ as C}from"./@fesjs.SlXnoRjV1736251016080.js";import"./@vueuse.HhUha1mw1736251016080.js";import"./vue-router.JOEPJWPi1736251016080.js";import"./lodash-es.guXTxyfJ1736251016080.js";import"./@qlin.yHhFDldE1736251016080.js";import"./pinia.PKDK8ItA1736251016080.js";import"./vue-demi.C4xddsk91736251016080.js";import"./@floating-ui.BPbuo5Gx1736251016080.js";import"./@juggle.7yjBMqoW1736251016080.js";function F(t,n){const e=T();return(F=function(t,n){return e[t-=358]})(t,n)}!function(t,n){const e=F,o=T();for(;;)try{if(228062===-parseInt(e(385))/1+parseInt(e(391))/2*(-parseInt(e(402))/3)+-parseInt(e(377))/4+parseInt(e(364))/5*(-parseInt(e(372))/6)+parseInt(e(405))/7*(-parseInt(e(358))/8)+-parseInt(e(410))/9*(-parseInt(e(382))/10)+parseInt(e(363))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[F(383)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){z(this,(function(){const t=F,n=new RegExp("function *\\( *\\)"),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=G(t(411));n[t(387)](o+t(373))&&e[t(387)](o+t(389))?G():o("0")}))()}();const N=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function T(){const t=["length","constructor","table","return (function() ","438147BYHfPw","init","prototype","onload","while (true) {}","WagnerLoadShaderException","2700608aYsCNn","info","now","send","\" couldn't be loaded.","11506110qlJJnp","1065jibaaZ","value","Matrix3","index","bind","call","random",'Shader "',"2946ldjANg","chain","onerror","message","onabort","394112nlpTyG","Vector2","Texture","ShaderMaterial","console","10RDolad","apply","replace","35023BKDSsN","action","test","exception","input","lastIndex","218hYrMus","Vector3","toString","debu","exec","responseText","trace","type","name","open","Matrix2","8007COQyHP","log","__proto__","7NXZblv"];return(T=function(){return t})()}N(void 0,(function(){const t=F,n=function(){const t=F;let n;try{n=Function(t(409)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n.console=n[t(381)]||{},o=[t(403),"warn",t(359),"error",t(388),t(408),t(397)];for(let r=0;r<o[t(406)];r++){const n=N[t(407)][t(412)][t(368)](N),s=o[r],a=e[s]||n;n[t(404)]=N.bind(N),n.toString=a[t(393)][t(368)](a),e[s]=n}}))();function R(t,n,e){if("object"!=typeof t||null===t)return t;const o=Array.isArray(t)?[]:{};for(const r in t)t.hasOwnProperty(r)&&(o[r]=R(t[r])),r==n&&(o[n]=e);return o}function G(t){function n(t){const e=F;if("string"==typeof t)return function(t){}[e(407)](e(414))[e(383)]("counter");1!==(""+t/t)[e(406)]||t%20==0?function(){return!0}[e(407)](e(394)+"gger")[e(369)](e(386)):function(){return!1}[e(407)]("debugger").apply("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const B=V;!function(t,n){const e=V,o=W();for(;;)try{if(223531===-parseInt(e(439))/1+-parseInt(e(523))/2+-parseInt(e(483))/3*(-parseInt(e(447))/4)+-parseInt(e(482))/5*(parseInt(e(516))/6)+-parseInt(e(466))/7+parseInt(e(528))/8+parseInt(e(541))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const j=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){j(this,(function(){const t=V,n=new RegExp(t(514)),e=new RegExp(t(463),"i"),o=k(t(460));n[t(488)](o+t(522))&&e.test(o+"input")?k():o("0")}))()}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[V(485)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function V(t,n){const e=W();return(V=function(t,n){return e[t-=438]})(t,n)}O(void 0,(function(){const t=V;let n;try{n=Function(t(455)+t(506)+");")()}catch(r){n=window}const e=n[t(471)]=n[t(471)]||{},o=["log",t(509),t(525),t(489),t(536),t(449),"trace"];for(let s=0;s<o[t(478)];s++){const n=O.constructor.prototype[t(441)](O),r=o[s],a=e[r]||n;n[t(474)]=O[t(441)](O),n[t(505)]=a.toString[t(441)](a),e[r]=n}}))();class H{constructor(t,n){const e=V;this[e(499)]=1,this.height=1,this[e(518)]=n||{},this[e(507)]=this.settings[e(507)]||!1,this[e(498)]=t,this[e(456)]=this[e(497)](this.settings),this[e(492)]=new(r[e(501)]),this[e(448)]=new u(new(r[e(538)])(1,1),new(r[e(484)])),this[e(492)][e(537)](this[e(448)]),this[e(479)]=new(r[e(453)])(1,1,1,1,-1e4,1e4),this.front=new v(1,1,{minFilter:void 0!==this[e(518)].minFilter?this.settings.minFilter:r[e(473)],magFilter:void 0!==this[e(518)][e(467)]?this[e(518)].magFilter:f,wrapS:void 0!==this[e(518)][e(511)]?this.settings[e(511)]:p,wrapT:void 0!==this[e(518)][e(493)]?this.settings.wrapT:r[e(457)],format:this[e(507)]?m:d,type:void 0!==this[e(518)][e(469)]?this.settings[e(469)]:r[e(480)],stencilBuffer:void 0===this[e(518)].stencilBuffer||this[e(518)][e(502)]}),this[e(530)]=this[e(500)][e(465)](),this[e(504)]=Date.now(),this[e(520)]={},this[e(438)]={passItems:[],passes:[]}}addPass(t,n,e,o){const r=V;this[r(462)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(519)]};this[r(438)][r(454)][r(535)](s)}removePass(t){const n=V;for(let e=this[n(438)][n(454)][n(478)]-1;e>=0;e--)this[n(438)][n(454)][e][n(539)]===parseInt(t)&&this.Stack.passItems[n(496)](e,1);console[n(490)](this[n(438)].passItems)}[B(497)](){const t=B;this.Pass[t(527)](this);return this[t(462)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[B(462)](t){const n=B;return this[n(519)]=function(t,n){const e=F,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,u=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,v={sampler2D:{type:"t",value:()=>new s},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[F(378)])},vec3:{type:"v3",value:()=>new a},vec4:{type:"v4",value:()=>new i},bvec2:{type:"v2",value:()=>new(r[F(378)])},bvec3:{type:"v3",value:()=>new a},bvec4:{type:"v4",value:()=>new i},ivec2:{type:"v2",value:()=>new l},ivec3:{type:"v3",value:()=>new(r[F(392)])},ivec4:{type:"v4",value:()=>new i},mat2:{type:"v2",value:()=>new(r[F(401)])},mat3:{type:"v3",value:()=>new(r[F(366)])},mat4:{type:"v4",value:()=>new c}},f={float:{type:"fv",value:()=>[]},vec3:{type:"v3v",value:()=>[]}};let p;const m={resolution:{type:"v2",value:new(r[e(378)])(1,1),default:!0},time:{type:"f",value:Date[e(360)](),default:!0},tInput:{type:"t",value:new(r[e(379)]),default:!0}};let d,g;for(;null!==(p=o.exec(n));)p[e(367)]===o[e(390)]&&o[e(390)]++,d=p[1],g=p[2],m[g]={type:v[d][e(398)],value:v[d][e(365)]()};for(;null!==(p=u[e(395)](n));)p[e(367)]===o[e(390)]&&o[e(390)]++,d=p[1],g=p[2],p[3],m[g]={type:f[d].type,value:f[d][e(365)]()};return new(r[e(380)])({uniforms:m,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}("varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }",t),this[n(519)]}[B(532)](t){const n=B;this[n(519)]=null,this[n(526)]={}}[B(451)](){const t=B;this[t(468)]=this.front,this[t(524)]=this.back}[B(475)](t,n){const e=B,o=window[e(486)],r=window[e(452)];t[e(446)](1*o,1*r),n[e(491)][e(508)](70,o/r,n[e(470)],n[e(464)]),this.setSize(o,r);return this[e(476)](o,r,!0)}[B(446)](t,n){const e=B;this[e(499)]=t,this[e(477)]=n,this[e(479)][e(491)][e(443)](t/-2,t/2,n/2,n/-2,this[e(479)][e(470)],this[e(479)].far),this.quad[e(513)][e(503)](t,n,1),this[e(500)].setSize(t,n),this[e(530)].setSize(t,n)}[B(476)](t,n,e){const o=B;return new v(t,n,{minFilter:r[o(473)],magFilter:r[o(473)],format:e?r[o(515)]:r[o(472)]})}render(t,n,e,o){const r=B;this.renderer[r(510)](this[r(524)]),this.renderer[r(487)](t,n),o||this.swapBuffers()}[B(459)](){const t=B,n=this[t(524)];this.write=this[t(468)],this.read=n}[B(540)](){const t=B;for(let n=0;n<this[t(438)][t(454)].length;n++){const e=this[t(438)][t(454)][n][t(519)],o=this[t(438)][t(454)][n][t(526)];if(this.renderer[t(510)](this[t(524)]),e instanceof r[t(445)]){this[t(448)][t(529)]=e,this[t(448)].material[t(440)][t(512)][t(458)]=this[t(468)][t(517)],this.quad[t(529)].uniforms[t(531)][t(458)][t(503)](this[t(499)],this.height),this[t(448)].material.uniforms[t(444)][t(458)]=.001*(Date.now()-this[t(504)]);for(const n in o)this.quad[t(529)][t(440)][n].value=o[n];this[t(498)].render(this.scene,this[t(479)]),this[t(459)]()}}}[B(495)](t,n){const e=B;this[e(498)][e(510)](null),this[e(448)][e(529)]=this[e(456)],this[e(448)][e(529)][e(440)][e(512)][e(458)]=this[e(468)][e(517)],this[e(448)].material.uniforms[e(531)].value[e(503)](this[e(499)],this.height),this.renderer[e(487)](this[e(492)],this[e(479)])}}function k(t){function n(t){const e=V;if(typeof t===e(521))return function(t){}.constructor(e(494))[e(485)](e(534));1!==(""+t/t)[e(478)]||t%20==0?function(){return!0}.constructor(e(461)+e(450))[e(527)](e(481)):function(){return!1}[e(442)](e(461)+"gger")[e(485)](e(533)),n(++t)}try{if(t)return n;n(0)}catch(e){}}function W(){const t=["stencilBuffer","set","startTime","toString",'{}.constructor("return this")( )',"useRGBA","makePerspective","warn","setRenderTarget","wrapS","tInput","scale","function *\\( *\\)","RGBAFormat","360PxdRba","texture","settings","shader","passes","string","chain","341064cUwjsY","write","info","params","call","2987056SLEGZX","material","back","resolution","Pass","stateObject","counter","push","exception","add","PlaneGeometry","uuid","pass","6972615CUCzvZ","Stack","55234oOYMDk","uniforms","bind","constructor","makeOrthographic","time","ShaderMaterial","setSize","572hAlxRk","quad","table","gger","Reset","innerHeight","OrthographicCamera","passItems","return (function() ","copyPass","ClampToEdgeWrapping","value","swapBuffers","init","debu","loadShadervf","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","far","clone","3080651ErrFzS","magFilter","read","type","near","console","RGBFormat","LinearFilter","__proto__","onWindowResize","getOfflineTexture","height","length","camera","UnsignedByteType","action","36945CNMLsU","3873tDChPY","MeshBasicMaterial","apply","innerWidth","render","test","error","log","projectionMatrix","scene","wrapT","while (true) {}","toScreen","splice","CopyPass","renderer","width","front","Scene"];return(W=function(){return t})()}const X="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",q=Y;!function(t,n){const e=Y,o=J();for(;;)try{if(340045===-parseInt(e(198))/1*(parseInt(e(175))/2)+-parseInt(e(203))/3+parseInt(e(124))/4*(-parseInt(e(150))/5)+-parseInt(e(149))/6+-parseInt(e(159))/7*(parseInt(e(160))/8)+parseInt(e(164))/9*(parseInt(e(157))/10)+parseInt(e(147))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Y(148)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function Y(t,n){const e=J();return(Y=function(t,n){return e[t-=123]})(t,n)}!function(){Z(this,(function(){const t=Y,n=new RegExp(t(161)),e=new RegExp(t(196),"i"),o=K(t(128));n[t(181)](o+t(134))&&e[t(181)](o+t(172))?K():o("0")}))()}();const $=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();$(void 0,(function(){const t=Y;let n;try{n=Function(t(165)+t(155)+");")()}catch(r){n=window}const e=n[t(201)]=n[t(201)]||{},o=["log",t(174),t(191),t(144),t(140),t(126),t(202)];for(let s=0;s<o.length;s++){const n=$[t(197)][t(195)][t(178)]($),r=o[s],a=e[r]||n;n[t(132)]=$.bind($),n[t(131)]=a[t(131)][t(178)](a),e[r]=n}}))();function J(){const t=["length","toString","__proto__","removePass","chain","addButton","material","BufferGeometry","后处理类型","toScreen","exception","关闭通道","value","split","error","POISSONPass","string","23072005dQbzeZ","apply","2452110sGQEMm","216150sxwfYC","list","VIGNETTE1Pass","InvertPass","postProcessing",'{}.constructor("return this")( )',"render","10VOKIJI","click","70JUeeZh","364808bmtMHI","function *\\( *\\)","addFolder","onWindowResize","1935981HPossN","return (function() ","plugins/postProcessing/image/1324.jpg","RGBPass","Reset","DENOISEPass","VIGNETTE2Pass","Mesh","input","debu","warn","470026ngJnWT","values","addBlade","bind","dispose","FREICHENPass","test","random","castShadow","FXAAPass","CIRCULARPass","stateObject","pass","mergeGeometries","移除~","call","info","新增通道","gger","DOTPass","prototype","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","constructor","2slWRXt","MeshPhongMaterial","Vector2","console","trace","486804MFpFsw","map","plugins/postProcessing/image/1324-normal.jpg","action","add","autoClearColor","keys","SEPIAPass","translate","44IBYFZy","while (true) {}","table","change","init","TOONPass"];return(J=function(){return t})()}function K(t){function n(t){const e=Y;if(typeof t===e(146))return function(t){}[e(197)](e(125)).apply("counter");1!==(""+t/t)[e(130)]||t%20==0?function(){return!0}.constructor(e(173)+e(193))[e(190)](e(206)):function(){return!1}.constructor(e(173)+e(193))[e(148)](e(186)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const Q=C(y({__name:q(154),async setup(o){const s=q;let a,i;const{camera:l,renderer:c,scene:u,sizes:v}=t();for(var f=new(r[s(137)]),p=[],m=0;m<100;m++){var d=new g(100,100,100);d[s(123)](1500*Math[s(182)](),1500*Math[s(182)](),1500*Math[s(182)]()),p.push(d)}f=x[s(188)](p);const y=([a,i]=I((()=>e({map:s(166)}))),a=await a,i(),a),b=([a,i]=I((()=>e({map:s(205)}))),a=await a,i(),a);var _=new(r[s(199)])({map:y[s(204)],normalMap:b[s(204)],normalScale:new(r[s(200)])(.8,-.8),shininess:100}),S=new(r[s(171)])(f,_);S[s(183)]=!0,S.receiveShadow=!0,u[s(142)][s(207)](S);const U=new H(c[s(142)],{useRGBA:!0}),w=new h;let P=null,D=[{text:s(153),value:{InvertPass:X}},{text:s(184),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:s(210),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:"SNOISEPass",value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:"BOXBLURPass",value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:s(169),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:"CGAPass",value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:b[s(204)]}}},{text:"SOBELPass",value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:s(167),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:s(194),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(185),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:s(145),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:s(152),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(170),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:s(180),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:s(129),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],E=s(153),M=X,A=null;w[s(177)]({view:s(151),label:s(138),options:D,value:""}).on(s(127),(t=>{P=t[s(142)]}));const L=w[s(135)]({title:"新增",label:s(192)});let C=0;L.on(s(158),(t=>{const n=s;E=Object[n(209)](P)[0],M=Object[n(176)](P)[0],A=Object[n(176)](P)[1];let e=C++,o=w[n(162)]({title:E});for(const s in A){let t=A[s];o[n(177)]({view:"text",label:s,parse:t=>String(t),value:t})}o[n(135)]({title:n(189)+e,label:n(141)}).on(n(158),(t=>{const e=n;let o=t.target.title[e(143)]("~")[1];U[e(133)](o)})).on(n(158),(()=>{o[n(179)]()}));let r=R(A,t.target.label,t[n(142)]);U.addPass(E,M,r,e)})),U[s(163)](c.value,l.value);const{onLoop:F}=n();return F((({delta:t})=>{const n=s;S&&(c[n(142)][n(208)]=!0,U[n(168)](),S[n(136)]=_,U[n(156)](u.value,l[n(142)]),U[n(187)](),U[n(139)](u[n(142)],l.value))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),tt=st;!function(t,n){const e=st,o=ot();for(;;)try{if(925995===parseInt(e(188))/1*(-parseInt(e(165))/2)+-parseInt(e(157))/3+-parseInt(e(184))/4+-parseInt(e(166))/5*(parseInt(e(152))/6)+-parseInt(e(162))/7*(parseInt(e(179))/8)+-parseInt(e(178))/9*(parseInt(e(176))/10)+parseInt(e(150))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const nt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[st(156)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){nt(this,(function(){const t=st,n=new RegExp(t(187)),e=new RegExp(t(169),"i"),o=it(t(151));n[t(186)](o+t(190))&&e[t(186)](o+t(155))?it():o("0")}))()}();const et=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function ot(){const t=["545ToXRTP","counter","return (function() ","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","gger","trace","TresAmbientLight","table","bind","string","8990GmPUFF","error","14796kZHMDj","312NnwiPP","console","toString","#ffffff","while (true) {}","2318680eMnLNp","info","test","function *\\( *\\)","197180qmwjjI","exception","chain","TresDirectionalLight","53126634EmgVPm","init","54762otSsMz","constructor","length","input","apply","178719AEmKKB","perspectiveCameraRef","call","action","warn","106701TynnRN","TresCanvas","debu","2zeyuMi"];return(ot=function(){return t})()}et(void 0,(function(){const t=st;let n;try{n=Function(t(168)+'{}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(180)]=n[t(180)]||{},o=["log",t(161),t(185),t(177),t(189),t(173),t(171)];for(let s=0;s<o[t(154)];s++){const n=et[t(153)].prototype[t(174)](et),r=o[s],a=e[r]||n;n.__proto__=et[t(174)](et),n[t(181)]=a[t(181)].bind(a),e[r]=n}}))();const rt={ref:tt(158),position:[600,850,-1500],fov:45,near:.1,far:1e5};function st(t,n){const e=ot();return(st=function(t,n){return e[t-=149]})(t,n)}const at=y({__name:"postProcessingEditor",setup(t){const e={clearColor:"#000000",shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:"manual"},r={autoRotate:!0,enableDamping:!0},{onLoop:s}=n();return s((({delta:t})=>{})),(t,n)=>{const s=st,a=b(s(163));return _(),S(a,L(e,{"window-size":""}),{default:U((()=>[w("TresPerspectiveCamera",rt,null,512),P(D(o),E(M(r)),null,16),n[0]||(n[0]=w(s(172),{color:s(182),intensity:2},null,-1)),n[1]||(n[1]=w(s(149),{position:[100,100,0],intensity:2,color:s(182)},null,-1)),(_(),S(A,null,{default:U((()=>[P(Q)])),_:1}))])),_:1},16)}}});function it(t){function n(t){const e=st;if(typeof t===e(175))return function(t){}[e(153)](e(183)).apply(e(167));1!==(""+t/t)[e(154)]||t%20==0?function(){return!0}[e(153)](e(164)+e(170))[e(159)](e(160)):function(){return!1}[e(153)](e(164)+e(170))[e(156)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{at as default};
