import{m as t,e as n,a as e,o}from"./@tresjs.ZmhvXhx31741583630766.js";import{V as r,_ as s,Y as a,ar as i,i as c,M as l,p as u,O as v,aV as f,aR as p,m as d,c3 as m}from"./three.sQDbNBks1741583630766.js";import{P as g}from"./tweakpane.yDiyAAkA1741583630766.js";import{d as x,a3 as h,e as y,o as I,f as b,g as _,N as S,j as U,u as w,aj as P,ak as D,al as E,m as A}from"./@vue.NRI7TcgI1741583630766.js";import{_ as M}from"./@fesjs.0Tn1apcA1741583630766.js";import"./postprocessing.7Yq_IN-m1741583630766.js";import"./@vueuse.Z9_WSajh1741583630766.js";import"./vue-router.bRqEeVtN1741583630766.js";import"./lodash-es.pklfUAS51741583630766.js";import"./@qlin.yHhFDldE1741583630766.js";import"./pinia.GzvRmFm31741583630766.js";import"./@floating-ui.BPbuo5Gx1741583630766.js";import"./@juggle.7yjBMqoW1741583630766.js";!function(t,n){const e=z,o=F();for(;;)try{if(826726===parseInt(e(500))/1*(parseInt(e(506))/2)+-parseInt(e(521))/3*(parseInt(e(490))/4)+parseInt(e(463))/5*(parseInt(e(517))/6)+parseInt(e(502))/7+parseInt(e(476))/8+parseInt(e(482))/9+-parseInt(e(505))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){L(this,(function(){const t=z,n=new RegExp(t(487)),e=new RegExp(t(513),"i"),o=T(t(509));n[t(475)](o+t(480))&&e[t(475)](o+t(511))?T():o("0")}))()}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[z(483)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function F(){const t=["test","2272344JWSYDk","ShaderMaterial","Vector4","open","chain","info","9502029tAHfzA","apply","get","random","type","function *\\( *\\)","onerror","value","304ClSHId",'{}.constructor("return this")( )',"send","v3v","toString","message","responseText","Texture","Matrix2","while (true) {}","816055xghhAS","WagnerLoadShaderException","7402066DXnbCZ","onload","log","37628910dySTVX","2JRMbWb","bind","exception","init","__proto__","input","index","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","length","constructor","lastIndex","60gqrXGw","call","console","name","9780ozZmHW","replace","gger","812030fqlbpT","\" couldn't be loaded.","Vector3","hasOwnProperty","string",'Shader "',"exec","action","Vector2","prototype","trace","debu"];return(F=function(){return t})()}function z(t,n){const e=F();return(z=function(t,n){return e[t-=462]})(t,n)}C(void 0,(function(){const t=z;let n;try{n=Function("return (function() "+t(491)+");")()}catch(r){n=window}const e=n[t(519)]=n[t(519)]||{},o=[t(504),"warn",t(481),"error",t(508),"table",t(473)];for(let s=0;s<o[t(514)];s++){const n=C.constructor[t(472)][t(507)](C),r=o[s],a=e[r]||n;n[t(510)]=C[t(507)](C),n[t(494)]=a[t(494)].bind(a),e[r]=n}}))();function N(t,n,e){const o=z;if("object"!=typeof t||null===t)return t;const r=Array.isArray(t)?[]:{};for(const s in t)t[o(466)](s)&&(r[s]=N(t[s])),s==n&&(r[n]=e);return r}function T(t){function n(t){const e=z;if(typeof t===e(467))return function(t){}[e(515)](e(499))[e(483)]("counter");1!==(""+t/t)[e(514)]||t%20==0?function(){return!0}[e(515)](e(474)+e(462))[e(518)](e(470)):function(){return!1}[e(515)](e(474)+e(462))[e(483)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const B=R;!function(t,n){const e=R,o=V();for(;;)try{if(208670===parseInt(e(440))/1+parseInt(e(424))/2+-parseInt(e(501))/3*(-parseInt(e(451))/4)+-parseInt(e(493))/5+-parseInt(e(525))/6*(parseInt(e(506))/7)+-parseInt(e(425))/8+parseInt(e(423))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(467)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function R(t,n){const e=V();return(R=function(t,n){return e[t-=423]})(t,n)}!function(){G(this,(function(){const t=R,n=new RegExp(t(431)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=O(t(428));n.test(o+t(516))&&e[t(511)](o+"input")?O():o("0")}))()}();const j=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(467)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function V(){const t=["settings","loadShadervf","back","scene","RGBAFormat","PlaneGeometry","passes","startTime","CopyPass","error","LinearFilter","removePass","near","texture","apply","swapBuffers","innerHeight","setSize","quad","addPass","projectionMatrix","renderer","set","innerWidth","shader","passItems","ShaderMaterial","exception","magFilter","getOfflineTexture","counter",'{}.constructor("return this")( )',"time","splice","toString","WebGLRenderTarget","now","Mesh","type","info","957895BkLaep","minFilter","table","action","length","ClampToEdgeWrapping","MeshBasicMaterial","while (true) {}","156405SqFuhm","value","onWindowResize","__proto__","setRenderTarget","534674CnGoqu","read","width","scale","add","test","height","uuid","camera","Stack","chain","return (function() ","constructor","wrapS","render","front","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","wrapT","write","6WtVJtg","1664784qgNUBf","66490NDBvAS","1195408XGnNUa","call","uniforms","init","bind","makeOrthographic","function *\\( *\\)","console","push","tInput","stateObject","clone","material","params","makePerspective","355701XhmXyB","gger","warn","Reset","debu","Pass","UnsignedByteType","string","pass","useRGBA","stencilBuffer","4ajyVTm","RGBFormat"];return(V=function(){return t})()}j(void 0,(function(){const t=R;let n;try{n=Function(t(517)+t(484)+");")()}catch(r){n=window}const e=n[t(432)]=n[t(432)]||{},o=["log",t(442),t(492),t(462),t(480),t(495),"trace"];for(let s=0;s<o[t(497)];s++){const n=j.constructor.prototype.bind(j),r=o[s],a=e[r]||n;n[t(504)]=j[t(429)](j),n[t(487)]=a[t(487)][t(429)](a),e[r]=n}}))();class H{constructor(t,n){const e=R;this[e(508)]=1,this[e(512)]=1,this[e(453)]=n||{},this[e(449)]=this[e(453)].useRGBA||!1,this[e(474)]=t,this.copyPass=this[e(461)](this[e(453)]),this[e(456)]=new u,this[e(471)]=new(s[e(490)])(new(s[e(458)])(1,1),new(s[e(499)])),this[e(456)][e(510)](this[e(471)]),this[e(514)]=new v(1,1,1,1,-1e4,1e4),this[e(521)]=new(s[e(488)])(1,1,{minFilter:void 0!==this.settings.minFilter?this[e(453)][e(494)]:s[e(463)],magFilter:void 0!==this[e(453)].magFilter?this[e(453)][e(481)]:s[e(463)],wrapS:void 0!==this[e(453)][e(519)]?this[e(453)].wrapS:f,wrapT:void 0!==this[e(453)][e(523)]?this[e(453)][e(523)]:s[e(498)],format:this[e(449)]?p:s[e(452)],type:void 0!==this[e(453)][e(491)]?this.settings[e(491)]:s[e(446)],stencilBuffer:void 0===this.settings[e(450)]||this[e(453)][e(450)]}),this[e(455)]=this.front[e(436)](),this[e(460)]=Date.now(),this[e(459)]={},this[e(515)]={passItems:[],passes:[]}}[B(472)](t,n,e,o){const r=B;this[r(454)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(477)]};this[r(515)][r(478)][r(433)](s)}[B(464)](t){const n=B;for(let e=this.Stack[n(478)].length-1;e>=0;e--)this.Stack[n(478)][e][n(513)]===parseInt(t)&&this[n(515)].passItems[n(486)](e,1);console.log(this[n(515)][n(478)])}[B(461)](){const t=B;this.Pass[t(426)](this);return this[t(454)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}loadShadervf(t){const n=B(522);return this.shader=function(t,n){const e=z,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,u=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,v={sampler2D:{type:"t",value:()=>new a},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(s[z(471)])},vec3:{type:"v3",value:()=>new(s[z(465)])},vec4:{type:"v4",value:()=>new(s[z(478)])},bvec2:{type:"v2",value:()=>new(s[z(471)])},bvec3:{type:"v3",value:()=>new(s[z(465)])},bvec4:{type:"v4",value:()=>new i},ivec2:{type:"v2",value:()=>new(s[z(471)])},ivec3:{type:"v3",value:()=>new(s[z(465)])},ivec4:{type:"v4",value:()=>new(s[z(478)])},mat2:{type:"v2",value:()=>new(s[z(498)])},mat3:{type:"v3",value:()=>new c},mat4:{type:"v4",value:()=>new l}},f={float:{type:"fv",value:()=>[]},vec3:{type:e(493),value:()=>[]}};let p;const d={resolution:{type:"v2",value:new r(1,1),default:!0},time:{type:"f",value:Date.now(),default:!0},tInput:{type:"t",value:new(s[e(497)]),default:!0}};let m,g;for(;null!==(p=o[e(469)](n));)p[e(512)]===o.lastIndex&&o[e(516)]++,m=p[1],g=p[2],d[g]={type:v[m][e(486)],value:v[m][e(489)]()};for(;null!==(p=u[e(469)](n));)p[e(512)]===o[e(516)]&&o[e(516)]++,m=p[1],g=p[2],p[3],d[g]={type:f[m][e(486)],value:f[m].value()};return new(s[e(477)])({uniforms:d,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(n,t),this.shader}[B(445)](t){const n=B;this[n(477)]=null,this[n(438)]={}}[B(443)](){const t=B;this[t(507)]=this[t(521)],this[t(524)]=this[t(455)]}[B(503)](t,n){const e=B,o=window[e(476)],r=window[e(469)];t[e(470)](1*o,1*r),n[e(473)][e(439)](70,o/r,n.near,n.far),this[e(470)](o,r);return this.getOfflineTexture(o,r,!0)}setSize(t,n){const e=B;this[e(508)]=t,this[e(512)]=n,this[e(514)].projectionMatrix[e(430)](t/-2,t/2,n/2,n/-2,this[e(514)][e(465)],this.camera.far),this.quad[e(509)][e(475)](t,n,1),this.front.setSize(t,n),this.back.setSize(t,n)}[B(482)](t,n,e){const o=B;return new(s[o(488)])(t,n,{minFilter:s[o(463)],magFilter:d,format:e?s[o(457)]:s[o(452)]})}[B(520)](t,n,e,o){const r=B;this[r(474)][r(505)](this[r(524)]),this[r(474)].render(t,n),o||this[r(468)]()}swapBuffers(){const t=B,n=this[t(524)];this[t(524)]=this.read,this[t(507)]=n}[B(448)](){const t=B;for(let n=0;n<this[t(515)][t(478)].length;n++){const e=this.Stack[t(478)][n].shader,o=this[t(515)].passItems[n].params;if(this[t(474)].setRenderTarget(this[t(524)]),e instanceof s[t(479)]){this[t(471)][t(437)]=e,this[t(471)][t(437)][t(427)][t(434)][t(502)]=this[t(507)][t(466)],this[t(471)].material[t(427)].resolution.value[t(475)](this[t(508)],this.height),this[t(471)][t(437)][t(427)][t(485)][t(502)]=.001*(Date[t(489)]()-this[t(460)]);for(const n in o)this[t(471)][t(437)].uniforms[n][t(502)]=o[n];this[t(474)][t(520)](this.scene,this[t(514)]),this[t(468)]()}}}toScreen(t,n){const e=B;this[e(474)][e(505)](null),this[e(471)][e(437)]=this.copyPass,this[e(471)][e(437)].uniforms[e(434)][e(502)]=this.read[e(466)],this[e(471)][e(437)][e(427)].resolution[e(502)][e(475)](this[e(508)],this.height),this[e(474)][e(520)](this[e(456)],this[e(514)])}}function O(t){function n(t){const e=R;if(typeof t===e(447))return function(t){}[e(518)](e(500))[e(467)](e(483));1!==(""+t/t)[e(497)]||t%20==0?function(){return!0}.constructor(e(444)+e(441))[e(426)](e(496)):function(){return!1}[e(518)](e(444)+e(441)).apply(e(435)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const k="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",W=$;function X(){const t=["toScreen","debu","stateObject","split","value","log","InvertPass","Mesh","info","FREICHENPass","click","length","Vector2","关闭通道","新增通道","bind","VIGNETTE1Pass","VIGNETTE2Pass","CIRCULARPass","counter","text","258Lvrhpa","24432JZvvdC","plugins/postProcessing/image/1324.jpg","table","target","toString","autoClearColor","gger","prototype","postProcessing","receiveShadow","SEPIAPass","values","addButton","exception","apply","2133208jpuZWe","BOXBLURPass","114FuEOzp","DENOISEPass","FXAAPass","BufferGeometry","RGBPass","mergeGeometries","1589QNySZA","POISSONPass","translate","addPass","6131FuYIZF","Reset","change","207750HGWGve","MeshPhongMaterial","57rCeugc","153EfmRGa","console","push","input","string","while (true) {}","DOTPass","action","test","material","random","dispose","__proto__",'{}.constructor("return this")( )',"map","SNOISEPass","keys","return (function() ","label","onWindowResize","7496avhSNF","TOONPass","constructor","CGAPass","addBlade","3143496zCCWJM","castShadow","15215hWUNkB","init","warn","BoxGeometry","SOBELPass"];return(X=function(){return t})()}!function(t,n){const e=$,o=X();for(;;)try{if(224682===parseInt(e(337))/1*(parseInt(e(327))/2)+-parseInt(e(342))/3*(-parseInt(e(397))/4)+-parseInt(e(370))/5*(parseInt(e(396))/6)+-parseInt(e(333))/7*(parseInt(e(363))/8)+-parseInt(e(343))/9*(parseInt(e(340))/10)+parseInt(e(325))/11+parseInt(e(368))/12)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){q(this,(function(){const t=$,n=new RegExp("function *\\( *\\)"),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=J(t(371));n.test(o+"chain")&&e[t(351)](o+t(346))?J():o("0")}))()}();const Z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[$(324)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function $(t,n){const e=X();return($=function(t,n){return e[t-=316]})(t,n)}Z(void 0,(function(){const t=$;let n;try{n=Function(t(360)+t(356)+");")()}catch(r){n=window}const e=n[t(344)]=n[t(344)]||{},o=[t(380),t(372),t(383),"error",t(323),t(399),"trace"];for(let s=0;s<o.length;s++){const n=Z[t(365)][t(317)][t(390)](Z),r=o[s],a=e[r]||n;n[t(355)]=Z[t(390)](Z),n[t(401)]=a[t(401)][t(390)](a),e[r]=n}}))();function J(t){function n(t){const e=$;if(typeof t===e(347))return function(t){}[e(365)](e(348))[e(324)](e(394));1!==(""+t/t)[e(386)]||t%20==0?function(){return!0}[e(365)]("debugger").call(e(350)):function(){return!1}[e(365)](e(376)+e(316)).apply(e(377)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const Y=M(x({__name:W(318),async setup(o){const r=W;let a,i;const{camera:c,renderer:l,scene:u,sizes:v}=t();for(var f=new(s[r(330)]),p=[],d=0;d<100;d++){var x=new(s[r(373)])(100,100,100);x[r(335)](1500*Math[r(353)](),1500*Math[r(353)](),1500*Math.random()),p[r(345)](x)}f=m[r(332)](p);const y=([a,i]=h((()=>e({map:r(398)}))),a=await a,i(),a),I=([a,i]=h((()=>e({map:"plugins/postProcessing/image/1324-normal.jpg"}))),a=await a,i(),a);var b=new(s[r(341)])({map:y[r(357)],normalMap:I[r(357)],normalScale:new(s[r(387)])(.8,-.8),shininess:100}),_=new(s[r(382)])(f,b);_[r(369)]=!0,_[r(319)]=!0,u[r(379)].add(_);const S=new H(l[r(379)],{useRGBA:!0}),U=new g;let w=null,P=[{text:"InvertPass",value:{InvertPass:k}},{text:r(329),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:r(320),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:r(358),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:r(326),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:r(328),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:r(366),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:I[r(357)]}}},{text:r(374),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:r(331),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:r(349),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:r(393),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:r(334),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:r(391),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:r(392),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:r(384),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:r(364),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],D=r(381),E=k,A=null;U[r(367)]({view:"list",label:"后处理类型",options:P,value:""}).on(r(339),(t=>{w=t[r(379)]}));const M=U.addButton({title:"新增",label:r(389)});let L=0;M.on(r(385),(t=>{const n=r;D=Object[n(359)](w)[0],E=Object[n(321)](w)[0],A=Object[n(321)](w)[1];let e=L++,o=U.addFolder({title:D});for(const r in A){let t=A[r];o.addBlade({view:n(395),label:r,parse:t=>String(t),value:t})}o[n(322)]({title:"移除~"+e,label:n(388)}).on(n(385),(t=>{const e=n;let o=t[e(400)].title[e(378)]("~")[1];S.removePass(o)})).on(n(385),(()=>{o[n(354)]()}));let s=N(A,t[n(400)][n(361)],t[n(379)]);S[n(336)](D,E,s,e)})),S[r(362)](l[r(379)],c.value);const{onLoop:C}=n();return C((({delta:t})=>{const n=r;_&&(l.value[n(402)]=!0,S[n(338)](),_[n(352)]=b,S.render(u[n(379)],c[n(379)]),S.pass(),S[n(375)](u.value,c[n(379)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),Q=K;function K(t,n){const e=rt();return(K=function(t,n){return e[t-=174]})(t,n)}!function(t,n){const e=K,o=rt();for(;;)try{if(130231===-parseInt(e(188))/1*(-parseInt(e(174))/2)+-parseInt(e(195))/3+parseInt(e(212))/4+-parseInt(e(184))/5*(-parseInt(e(208))/6)+-parseInt(e(189))/7+-parseInt(e(201))/8+-parseInt(e(176))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const tt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){tt(this,(function(){const t=K,n=new RegExp(t(204)),e=new RegExp(t(187),"i"),o=st(t(194));n[t(191)](o+t(209))&&e[t(191)](o+t(185))?st():o("0")}))()}();const nt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[K(203)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();nt(void 0,(function(){const t=K;let n;try{n=Function(t(196)+t(186)+");")()}catch(r){n=window}const e=n.console=n[t(181)]||{},o=[t(210),t(182),t(213),t(217),"exception",t(207),t(197)];for(let s=0;s<o[t(199)];s++){const n=nt.constructor[t(175)][t(211)](nt),r=o[s],a=e[r]||n;n[t(202)]=nt[t(211)](nt),n[t(205)]=a[t(205)].bind(a),e[r]=n}}))();const et={ref:"perspectiveCameraRef",position:[600,850,-1500],fov:45,near:.1,far:1e5},ot=x({__name:Q(180),setup(t){const e=Q,r={clearColor:e(179),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(216)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=y(a(200));return I(),b(i,A(r,{"window-size":""}),{default:_((()=>[S(a(206),et,null,512),U(w(o),P(D(s)),null,16),n[0]||(n[0]=S(a(215),{color:a(198),intensity:2},null,-1)),n[1]||(n[1]=S(a(192),{position:[100,100,0],intensity:2,color:a(198)},null,-1)),(I(),b(E,null,{default:_((()=>[U(Y)])),_:1}))])),_:1},16)}}});function rt(){const t=["error","38WHvFzY","prototype","445986qJxBLN","call","gger","#000000","postProcessingEditor","console","warn","while (true) {}","25ncdBtI","input",'{}.constructor("return this")( )',"\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","11635zVHest","1086519RkQLUH","string","test","TresDirectionalLight","constructor","init","458541lFylAM","return (function() ","trace","#ffffff","length","TresCanvas","426728JnoeCx","__proto__","apply","function *\\( *\\)","toString","TresPerspectiveCamera","table","106962TMcZAL","chain","log","bind","923960osOfZa","info","debu","TresAmbientLight","manual"];return(rt=function(){return t})()}function st(t){function n(t){const e=K;if(typeof t===e(190))return function(t){}[e(193)](e(183))[e(203)]("counter");1!==(""+t/t)[e(199)]||t%20==0?function(){return!0}.constructor(e(214)+e(178))[e(177)]("action"):function(){return!1}[e(193)](e(214)+e(178))[e(203)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{ot as default};
