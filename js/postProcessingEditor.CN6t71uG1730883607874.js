import{m as t,a as n,e,U as o}from"./@tresjs.C3WO4ZW41730883607874.js";import{_ as r,V as a,as as s,k as i,i as c,q as l,$ as u,O as v,W as f,aW as p,cP as d,n as m,cq as g,s as x}from"./three.fIUcjaNz1730883607874.js";import{P as h}from"./tweakpane.BCjFYDHx1730883607874.js";import{d as y,a6 as I,e as b,o as S,f as _,g as U,J as w,j as P,u as D,aj as E,ak as A,al as M,m as L}from"./@vue.Cfu43fwq1730883607874.js";import{_ as z}from"./@fesjs.DQmvwjPe1730883607874.js";import"./@vueuse.BSum2YDk1730883607874.js";import"./vue-router.BDLCs4Ld1730883607874.js";import"./lodash-es.BBTWvufR1730883607874.js";import"./@qlin.BIlp8Yi21730883607874.js";import"./pinia.DKpn0rzI1730883607874.js";import"./vue-demi.Dq6ymT-81730883607874.js";import"./@babel.BBWsvBIa1730883607874.js";import"./@floating-ui.B75jtkXD1730883607874.js";import"./@juggle.BnTvdTVm1730883607874.js";!function(t,n){const e=N,o=R();for(;;)try{if(971964===-parseInt(e(384))/1*(-parseInt(e(353))/2)+-parseInt(e(377))/3+-parseInt(e(392))/4*(parseInt(e(363))/5)+parseInt(e(338))/6+parseInt(e(334))/7*(parseInt(e(330))/8)+-parseInt(e(383))/9+-parseInt(e(344))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const F=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){F(this,(function(){const t=N,n=new RegExp(t(387)),e=new RegExp(t(343),"i"),o=B("init");n[t(335)](o+t(358))&&e[t(335)](o+t(380))?B():o("0")}))()}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();C(void 0,(function(){const t=N,n=function(){const t=N;let n;try{n=Function(t(355)+t(373)+");")()}catch(e){n=window}return n}(),e=n[t(368)]=n[t(368)]||{},o=[t(366),t(341),t(342),"error","exception",t(375),"trace"];for(let r=0;r<o.length;r++){const n=C[t(356)][t(337)][t(381)](C),a=o[r],s=e[a]||n;n[t(386)]=C[t(381)](C),n.toString=s[t(376)].bind(s),e[a]=n}}))();function T(t,n,e){const o=N;if(typeof t!==o(390)||null===t)return t;const r=Array[o(378)](t)?[]:{};for(const a in t)t[o(357)](a)&&(r[a]=T(t[a])),a==n&&(r[n]=e);return r}function N(t,n){const e=R();return(N=function(t,n){return e[t-=330]})(t,n)}function R(){const t=["ShaderMaterial","4TBqdZp","responseText","return (function() ","constructor","hasOwnProperty","chain","onload","index","counter","Vector2","620RLvTtY","debu","value","log","v3v","console","action","call","WagnerLoadShaderException","lastIndex",'{}.constructor("return this")( )',"type","table","toString","2510340SwUKvR","isArray","Matrix4","input","bind","open","5837085AWQqdx","755203UDXQzL","Texture","__proto__","function *\\( *\\)","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","message","object","get","60104luaQWl","24WSPITa","Vector4","replace","Matrix2","4462318YLqJUV","test","gger","prototype","6834012SXMTJI","while (true) {}","apply","warn","info","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","2412970zpBgRS","string","send",'Shader "',"exec","onerror","now","random"];return(R=function(){return t})()}function B(t){function n(t){const e=N;if(typeof t===e(345))return function(t){}.constructor(e(339))[e(340)](e(361));1!==(""+t/t).length||t%20==0?function(){return!0}[e(356)](e(364)+"gger")[e(370)](e(369)):function(){return!1}[e(356)](e(364)+e(336)).apply("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const G=H;!function(t,n){const e=H,o=k();for(;;)try{if(369752===-parseInt(e(202))/1+parseInt(e(204))/2*(parseInt(e(257))/3)+parseInt(e(256))/4*(-parseInt(e(168))/5)+parseInt(e(258))/6*(-parseInt(e(253))/7)+parseInt(e(197))/8*(parseInt(e(214))/9)+-parseInt(e(157))/10+parseInt(e(237))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const j=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[H(229)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){j(this,(function(){const t=H,n=new RegExp(t(182)),e=new RegExp(t(172),"i"),o=W("init");n[t(186)](o+t(165))&&e[t(186)](o+t(158))?W():o("0")}))()}();const V=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[H(229)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();V(void 0,(function(){const t=H,n=function(){const t=H;let n;try{n=Function(t(206)+t(205)+");")()}catch(e){n=window}return n}(),e=n[t(254)]=n[t(254)]||{},o=[t(181),t(192),t(231),t(191),t(221),t(210),t(187)];for(let r=0;r<o.length;r++){const n=V[t(248)][t(164)][t(209)](V),a=o[r],s=e[a]||n;n.__proto__=V[t(209)](V),n[t(241)]=s[t(241)][t(209)](s),e[a]=n}}))();class O{constructor(t,n){const e=H;this[e(161)]=1,this[e(235)]=1,this[e(170)]=n||{},this[e(236)]=this.settings[e(236)]||!1,this.renderer=t,this[e(198)]=this[e(178)](this[e(170)]),this[e(167)]=new l,this[e(183)]=new(r[e(247)])(new(r[e(179)])(1,1),new u),this[e(167)][e(211)](this[e(183)]),this[e(196)]=new v(1,1,1,1,-1e4,1e4),this.front=new f(1,1,{minFilter:void 0!==this[e(170)][e(227)]?this[e(170)][e(227)]:r[e(177)],magFilter:void 0!==this[e(170)].magFilter?this[e(170)][e(222)]:r[e(177)],wrapS:void 0!==this[e(170)].wrapS?this[e(170)].wrapS:p,wrapT:void 0!==this[e(170)].wrapT?this[e(170)][e(239)]:p,format:this[e(236)]?r[e(228)]:d,type:void 0!==this.settings[e(213)]?this[e(170)][e(213)]:r[e(190)],stencilBuffer:void 0===this[e(170)][e(240)]||this[e(170)].stencilBuffer}),this[e(166)]=this.front[e(250)](),this[e(233)]=Date[e(219)](),this.passes={},this.Stack={passItems:[],passes:[]}}[G(246)](t,n,e,o){const r=G;this[r(234)](n);const a={shaderName:t,params:e,uuid:o,shader:this[r(188)]};this.Stack[r(223)][r(238)](a)}[G(220)](t){const n=G;for(let e=this.Stack.passItems[n(242)]-1;e>=0;e--)this[n(224)][n(223)][e][n(217)]===parseInt(t)&&this[n(224)].passItems[n(163)](e,1);console.log(this[n(224)][n(223)])}[G(178)](){const t=G;this.Pass[t(194)](this);return this.loadShadervf("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[G(234)](t){const n=G,e=n(159);return this[n(188)]=function(t,n){const e=N,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,l=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,u={sampler2D:{type:"t",value:()=>new(r[N(385)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[N(362)])},vec3:{type:"v3",value:()=>new a},vec4:{type:"v4",value:()=>new s},bvec2:{type:"v2",value:()=>new(r[N(362)])},bvec3:{type:"v3",value:()=>new a},bvec4:{type:"v4",value:()=>new(r[N(331)])},ivec2:{type:"v2",value:()=>new i},ivec3:{type:"v3",value:()=>new a},ivec4:{type:"v4",value:()=>new(r[N(331)])},mat2:{type:"v2",value:()=>new(r[N(333)])},mat3:{type:"v3",value:()=>new c},mat4:{type:"v4",value:()=>new(r[N(379)])}},v={float:{type:"fv",value:()=>[]},vec3:{type:e(367),value:()=>[]}};let f;const p={resolution:{type:"v2",value:new(r[e(362)])(1,1),default:!0},time:{type:"f",value:Date[e(350)](),default:!0},tInput:{type:"t",value:new(r[e(385)]),default:!0}};let d,m;for(;null!==(f=o.exec(n));)f[e(360)]===o[e(372)]&&o[e(372)]++,d=f[1],m=f[2],p[m]={type:u[d][e(374)],value:u[d][e(365)]()};for(;null!==(f=l[e(348)](n));)f.index===o[e(372)]&&o[e(372)]++,d=f[1],m=f[2],f[3],p[m]={type:v[d][e(374)],value:v[d].value()};return new(r[e(352)])({uniforms:p,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(188)]}[G(225)](t){this.shader=null,this.params={}}[G(189)](){const t=G;this.read=this[t(175)],this[t(185)]=this[t(166)]}[G(251)](t,n){const e=G,o=window[e(203)],r=window.innerHeight;t[e(245)](1*o,1*r),n[e(208)][e(230)](70,o/r,n.near,n.far),this.setSize(o,r);return this[e(232)](o,r,!0)}setSize(t,n){const e=G;this[e(161)]=t,this[e(235)]=n,this[e(196)][e(208)][e(162)](t/-2,t/2,n/2,n/-2,this[e(196)][e(184)],this[e(196)][e(171)]),this.quad[e(212)][e(200)](t,n,1),this[e(175)][e(245)](t,n),this[e(166)][e(245)](t,n)}[G(232)](t,n,e){const o=G;return new(r[o(156)])(t,n,{minFilter:m,magFilter:r[o(177)],format:e?r[o(228)]:r[o(255)]})}render(t,n,e,o){const r=G;this[r(195)].setRenderTarget(this[r(185)]),this[r(195)][r(201)](t,n),o||this[r(215)]()}[G(215)](){const t=G,n=this.write;this.write=this[t(216)],this[t(216)]=n}[G(259)](){const t=G;for(let n=0;n<this.Stack[t(223)][t(242)];n++){const e=this[t(224)][t(223)][n][t(188)],o=this[t(224)][t(223)][n].params;if(this[t(195)][t(207)](this.write),e instanceof r[t(252)]){this[t(183)][t(174)]=e,this[t(183)][t(174)].uniforms[t(173)][t(160)]=this[t(216)][t(226)],this[t(183)][t(174)][t(244)].resolution[t(160)].set(this[t(161)],this.height),this[t(183)][t(174)][t(244)].time.value=.001*(Date[t(219)]()-this[t(233)]);for(const n in o)this[t(183)][t(174)].uniforms[n][t(160)]=o[n];this.renderer[t(201)](this[t(167)],this.camera),this[t(215)]()}}}[G(176)](t,n){const e=G;this[e(195)][e(207)](null),this[e(183)][e(174)]=this.copyPass,this[e(183)][e(174)][e(244)][e(173)][e(160)]=this[e(216)].texture,this.quad.material[e(244)].resolution[e(160)].set(this[e(161)],this[e(235)]),this[e(195)].render(this[e(167)],this[e(196)])}}function k(){const t=["counter","call","renderer","camera","2216DEgnPG","copyPass","gger","set","render","383275HejXwl","innerWidth","54MJIAhH",'{}.constructor("return this")( )',"return (function() ","setRenderTarget","projectionMatrix","bind","table","add","scale","type","23661CMrLnf","swapBuffers","read","uuid","debu","now","removePass","exception","magFilter","passItems","Stack","Pass","texture","minFilter","RGBAFormat","apply","makePerspective","info","getOfflineTexture","startTime","loadShadervf","height","useRGBA","3686188qSPjTO","push","wrapT","stencilBuffer","toString","length","string","uniforms","setSize","addPass","Mesh","constructor","stateObject","clone","onWindowResize","ShaderMaterial","65737jzZniB","console","RGBFormat","8HyPFPz","39015qbFRvb","222BGQDwW","pass","WebGLRenderTarget","3023840KvhlOu","input","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","value","width","makeOrthographic","splice","prototype","chain","back","scene","28995KUUGEW","while (true) {}","settings","far","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","tInput","material","front","toScreen","LinearFilter","CopyPass","PlaneGeometry","action","log","function *\\( *\\)","quad","near","write","test","trace","shader","Reset","UnsignedByteType","error","warn"];return(k=function(){return t})()}function H(t,n){const e=k();return(H=function(t,n){return e[t-=156]})(t,n)}function W(t){function n(t){const e=H;if(typeof t===e(243))return function(t){}.constructor(e(169)).apply(e(193));1!==(""+t/t)[e(242)]||t%20==0?function(){return!0}[e(248)]("debugger")[e(194)](e(180)):function(){return!1}[e(248)](e(218)+e(199))[e(229)](e(249)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const X="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}";!function(t,n){const e=Y,o=Z();for(;;)try{if(455090===parseInt(e(491))/1*(parseInt(e(451))/2)+-parseInt(e(496))/3+-parseInt(e(464))/4*(-parseInt(e(500))/5)+parseInt(e(446))/6*(-parseInt(e(495))/7)+parseInt(e(426))/8*(-parseInt(e(450))/9)+parseInt(e(475))/10*(-parseInt(e(424))/11)+-parseInt(e(470))/12*(-parseInt(e(455))/13))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Y(477)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function Z(){const t=["DENOISEPass","table","Vector2","SEPIAPass","476729rxFqYA","material","14712vsmcdC","bind","info","text","return (function() ","counter","addBlade","stateObject","title","target","debu","关闭通道","onWindowResize","console","CGAPass","value","移除~","plugins/postProcessing/image/1324-normal.jpg","MeshPhongMaterial","test","408kenCNn","BoxGeometry","Reset","trace","2943yHUDMr","6SEOiCL","function *\\( *\\)","label","map","2041351oYwoIx","prototype","TOONPass","FREICHENPass","toString","SOBELPass","mergeGeometries","list","add","32OmSckr","random","DOTPass","__proto__","values","dispose","48VSQUYD","removePass","constructor","length","click","20gIwbtA","warn","apply","change","init","BOXBLURPass","VIGNETTE1Pass","InvertPass","push","SNOISEPass","call","addButton","BufferGeometry","chain","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","keys","281426TNIAhj","string","pass","gger","25522eNxtkv","1499403KpvpDZ","log","plugins/postProcessing/image/1324.jpg","VIGNETTE2Pass","261540cNuYBD"];return(Z=function(){return t})()}!function(){q(this,(function(){const t=Y,n=new RegExp(t(452)),e=new RegExp(t(489),"i"),o=Q(t(479));n[t(445)](o+t(488))&&e[t(445)](o+"input")?Q():o("0")}))()}();const $=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Y(477)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function Y(t,n){const e=Z();return(Y=function(t,n){return e[t-=424]})(t,n)}$(void 0,(function(){const t=Y;let n;try{n=Function(t(430)+'{}.constructor("return this")( ));')()}catch(r){n=window}const e=n.console=n[t(439)]||{},o=[t(497),t(476),t(428),"error","exception",t(502),t(449)];for(let a=0;a<o[t(473)];a++){const n=$[t(472)][t(456)][t(427)]($),r=o[a],s=e[r]||n;n[t(467)]=$[t(427)]($),n.toString=s[t(459)].bind(s),e[r]=n}}))();function Q(t){function n(t){const e=Y;if(typeof t===e(492))return function(t){}[e(472)]("while (true) {}").apply(e(431));1!==(""+t/t)[e(473)]||t%20==0?function(){return!0}[e(472)](e(436)+e(494))[e(485)]("action"):function(){return!1}[e(472)](e(436)+e(494))[e(477)](e(433)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const K=z(y({__name:"postProcessing",async setup(o){const a=Y;let s,i;const{camera:c,renderer:l,scene:u,sizes:v}=t();for(var f=new(r[a(487)]),p=[],d=0;d<100;d++){var m=new(r[a(447)])(100,100,100);m.translate(1500*Math[a(465)](),1500*Math.random(),1500*Math[a(465)]()),p[a(483)](m)}f=g[a(461)](p);const y=([s,i]=I((()=>n({map:a(498)}))),s=await s,i(),s),b=([s,i]=I((()=>n({map:a(443)}))),s=await s,i(),s);var S=new(r[a(444)])({map:y[a(454)],normalMap:b[a(454)],normalScale:new(r[a(503)])(.8,-.8),shininess:100}),_=new x(f,S);_.castShadow=!0,_.receiveShadow=!0,u.value[a(463)](_);const U=new O(l.value,{useRGBA:!0}),w=new h;let P=null,D=[{text:a(482),value:{InvertPass:X}},{text:"FXAAPass",value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:a(504),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:a(484),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:a(480),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:a(501),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:a(440),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:b[a(454)]}}},{text:a(460),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:"RGBPass",value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:a(466),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:"CIRCULARPass",value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:"POISSONPass",value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:a(481),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:a(499),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:a(458),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:a(457),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],E=a(482),A=X,M=null;w[a(432)]({view:a(462),label:"后处理类型",options:D,value:""}).on(a(478),(t=>{P=t[a(441)]}));const L=w[a(486)]({title:"新增",label:"新增通道"});let z=0;L.on(a(474),(t=>{const n=a;E=Object[n(490)](P)[0],A=Object[n(468)](P)[0],M=Object[n(468)](P)[1];let e=z++,o=w.addFolder({title:E});for(const a in M){let t=M[a];o[n(432)]({view:n(429),label:a,parse:t=>String(t),value:t})}o[n(486)]({title:n(442)+e,label:n(437)}).on(n(474),(t=>{const e=n;let o=t[e(435)][e(434)].split("~")[1];U[e(471)](o)})).on("click",(()=>{o[n(469)]()}));let r=T(M,t.target[n(453)],t[n(441)]);U.addPass(E,A,r,e)})),U[a(438)](l.value,c[a(441)]);const{onLoop:F}=e();return F((({delta:t})=>{const n=a;_&&(l.value.autoClearColor=!0,U[n(448)](),_[n(425)]=S,U.render(u[n(441)],c.value),U[n(493)](),U.toScreen(u[n(441)],c[n(441)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]);function J(t,n){const e=nt();return(J=function(t,n){return e[t-=226]})(t,n)}const tt=J;function nt(){const t=["trace","#000000","gger","17cDdWwa",'{}.constructor("return this")( )',"constructor","79166BwYMjH","9277434cgVVMf","counter","7141959XwvBAd","debu","#ffffff","bind","warn","chain","43241TiOhNn","call","console","test","while (true) {}","manual","56zUltaY","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","error","return (function() ","3319050TpiPDa","action","stateObject","TresDirectionalLight","toString","exception","1190791VbhifB","TresCanvas","3312vkzfdn","5112VFIQka","TresPerspectiveCamera","postProcessingEditor","length","6950KlHSQP","apply","input","function *\\( *\\)","init","prototype"];return(nt=function(){return t})()}!function(t,n){const e=J,o=nt();for(;;)try{if(872727===-parseInt(e(268))/1*(parseInt(e(227))/2)+parseInt(e(254))/3*(parseInt(e(255))/4)+-parseInt(e(246))/5+parseInt(e(228))/6+-parseInt(e(252))/7*(-parseInt(e(242))/8)+parseInt(e(230))/9+parseInt(e(259))/10*(-parseInt(e(236))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const et=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){et(this,(function(){const t=J,n=new RegExp(t(262)),e=new RegExp(t(243),"i"),o=st(t(263));n[t(239)](o+t(235))&&e[t(239)](o+t(261))?st():o("0")}))()}();const ot=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[J(260)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();ot(void 0,(function(){const t=J;let n;try{n=Function(t(245)+t(269)+");")()}catch(r){n=window}const e=n[t(238)]=n.console||{},o=["log",t(234),"info",t(244),t(251),"table",t(265)];for(let a=0;a<o[t(258)];a++){const n=ot[t(226)][t(264)].bind(ot),r=o[a],s=e[r]||n;n.__proto__=ot[t(233)](ot),n.toString=s[t(250)].bind(s),e[r]=n}}))();const rt={ref:"perspectiveCameraRef",position:[600,850,-1500],fov:45,near:.1,far:1e5},at=y({__name:tt(257),setup(t){const n=tt,r={clearColor:n(266),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:n(241)},a={autoRotate:!0,enableDamping:!0},{onLoop:s}=e();return s((({delta:t})=>{})),(t,e)=>{const s=n,i=b(s(253));return S(),_(i,L(r,{"window-size":""}),{default:U((()=>[w(s(256),rt,null,512),P(D(o),E(A(a)),null,16),e[0]||(e[0]=w("TresAmbientLight",{color:s(232),intensity:2},null,-1)),e[1]||(e[1]=w(s(249),{position:[100,100,0],intensity:2,color:s(232)},null,-1)),(S(),_(M,null,{default:U((()=>[P(K)])),_:1}))])),_:1},16)}}});function st(t){function n(t){const e=J;if("string"==typeof t)return function(t){}[e(226)](e(240)).apply(e(229));1!==(""+t/t)[e(258)]||t%20==0?function(){return!0}[e(226)]("debu"+e(267))[e(237)](e(247)):function(){return!1}.constructor(e(231)+"gger")[e(260)](e(248)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{at as default};
