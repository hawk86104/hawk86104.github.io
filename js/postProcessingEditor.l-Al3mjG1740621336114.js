import{m as t,e as n,a as e,o}from"./@tresjs.Td0X-dew1740621336114.js";import{_ as r,ar as s,O as a,aV as i,aR as c,A as l,W as u,m as v,cB as f,bk as p}from"./three.sXv6UbbL1740621336114.js";import{P as d}from"./tweakpane.yDiyAAkA1740621336114.js";import{d as m,a3 as x,e as g,o as h,f as y,g as I,N as b,j as _,u as S,aj as w,ak as U,al as P,m as E}from"./@vue.NRI7TcgI1740621336114.js";import{_ as D}from"./@fesjs.LqZjJP5K1740621336114.js";import"./@vueuse.cgJUSr_21740621336114.js";import"./vue-router.42s9Lhcm1740621336114.js";import"./lodash-es.pklfUAS51740621336114.js";import"./@qlin.yHhFDldE1740621336114.js";import"./pinia.va49Nygd1740621336114.js";import"./@floating-ui.BPbuo5Gx1740621336114.js";import"./@juggle.7yjBMqoW1740621336114.js";function A(){const t=["112hZOsLv","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","send",'{}.constructor("return this")( )',"Vector4","input","Texture","isArray","type","6586734lLvWVf","gger","69AMrGVb","return (function() ","v3v","ShaderMaterial","hasOwnProperty","console","WagnerLoadShaderException","string","9582892ZFGffZ","action","now","chain","20GCjjbC","onabort","Vector3","1996407YAHIuE","exception","1028173IjezEv","object","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","\" couldn't be loaded.",'Shader "',"Matrix3","4ZLMfNw","index","replace","61586mrCwKR","apply","responseText","open","674946WtXEbI","bind","Matrix2","name","constructor","random","log","trace","onload","init","function *\\( *\\)","debu","while (true) {}","lastIndex","warn","test","1731715dTeqre","length","Vector2","message",'" load was aborted.',"toString","Matrix4","__proto__","value","get"];return(A=function(){return t})()}!function(t,n){const e=z,o=A();for(;;)try{if(716971===-parseInt(e(399))/1+parseInt(e(408))/2*(parseInt(e(382))/3)+parseInt(e(405))/4*(parseInt(e(361))/5)+parseInt(e(380))/6+parseInt(e(397))/7+parseInt(e(371))/8*(parseInt(e(345))/9)+-parseInt(e(394))/10*(parseInt(e(390))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const M=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[z(409)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){M(this,(function(){const t=z,n=new RegExp(t(355)),e=new RegExp(t(401),"i"),o=C(t(354));n[t(360)](o+t(393))&&e[t(360)](o+t(376))?C():o("0")}))()}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[z(409)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();L(void 0,(function(){const t=z,n=function(){const t=z;let n;try{n=Function(t(383)+t(374)+");")()}catch(e){n=window}return n}(),e=n[t(387)]=n[t(387)]||{},o=[t(351),t(359),"info","error",t(398),"table",t(352)];for(let r=0;r<o[t(362)];r++){const n=L.constructor.prototype[t(346)](L),s=o[r],a=e[s]||n;n[t(368)]=L.bind(L),n[t(366)]=a[t(366)][t(346)](a),e[s]=n}}))();function F(t,n,e){const o=z;if(typeof t!==o(400)||null===t)return t;const r=Array[o(378)](t)?[]:{};for(const s in t)t[o(386)](s)&&(r[s]=F(t[s])),s==n&&(r[n]=e);return r}function z(t,n){const e=A();return(z=function(t,n){return e[t-=343]})(t,n)}function C(t){function n(t){const e=z;if(typeof t===e(389))return function(t){}[e(349)](e(357)).apply("counter");1!==(""+t/t)[e(362)]||t%20==0?function(){return!0}.constructor(e(356)+e(381)).call(e(391)):function(){return!1}[e(349)](e(356)+e(381))[e(409)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const T=j;!function(t,n){const e=j,o=B();for(;;)try{if(834761===-parseInt(e(550))/1*(-parseInt(e(581))/2)+parseInt(e(523))/3+parseInt(e(552))/4*(-parseInt(e(555))/5)+-parseInt(e(565))/6*(parseInt(e(548))/7)+-parseInt(e(589))/8+parseInt(e(537))/9+-parseInt(e(527))/10*(-parseInt(e(553))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const N=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[j(588)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){N(this,(function(){const t=j,n=new RegExp(t(522)),e=new RegExp(t(516),"i"),o=V(t(563));n[t(515)](o+t(494))&&e[t(515)](o+t(502))?V():o("0")}))()}();const R=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[j(588)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function B(){const t=["uniforms","PlaneGeometry","init","warn","6cxcBJE","Pass","settings","swapBuffers","front","ShaderMaterial","stencilBuffer","scale","LinearFilter","splice","CopyPass","gger","toScreen","setRenderTarget","length","makeOrthographic","76qnvovx","ClampToEdgeWrapping","onWindowResize","debu","set","read","write","apply","2482024BlEFFp","copyPass","RGBFormat","type","material","WebGLRenderTarget","startTime","chain","camera","Reset","string","error","counter","minFilter","table","input","quad","magFilter","Mesh","exception","scene","useRGBA","innerHeight","clone","pass","call","wrapT","value","test","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","console","texture","stateObject","addPass","height","function *\\( *\\)","2051874XQRVkO","constructor","far","render","316090AxpqMW","width","loadShadervf","now","log","passItems","params","renderer","push","tInput","5609880bBxYMA","prototype","resolution","trace","MeshBasicMaterial","Stack","add","innerWidth","while (true) {}","bind","getOfflineTexture","7483651tRfTfD","Scene","18279lMapsh","passes","8FJxzbE","319AZhTHH","back","1761085BwmTsY","info","shader","projectionMatrix","wrapS","setSize"];return(B=function(){return t})()}R(void 0,(function(){const t=j;let n;try{n=Function('return (function() {}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(517)]=n[t(517)]||{},o=[t(531),t(564),t(556),t(498),t(506),t(501),t(540)];for(let s=0;s<o[t(579)];s++){const n=R[t(524)][t(538)][t(546)](R),r=o[s],a=e[r]||n;n.__proto__=R[t(546)](R),n.toString=a.toString[t(546)](a),e[r]=n}}))();class G{constructor(t,n){const e=j;this[e(528)]=1,this[e(521)]=1,this[e(567)]=n||{},this[e(508)]=this[e(567)][e(508)]||!1,this[e(534)]=t,this[e(590)]=this[e(575)](this[e(567)]),this[e(507)]=new(r[e(549)]),this[e(503)]=new(r[e(505)])(new(r[e(562)])(1,1),new(r[e(541)])),this[e(507)][e(543)](this[e(503)]),this[e(495)]=new a(1,1,1,1,-1e4,1e4),this[e(569)]=new(r[e(594)])(1,1,{minFilter:void 0!==this.settings.minFilter?this.settings[e(500)]:r[e(573)],magFilter:void 0!==this[e(567)][e(504)]?this[e(567)][e(504)]:r[e(573)],wrapS:void 0!==this.settings[e(559)]?this.settings[e(559)]:r[e(582)],wrapT:void 0!==this.settings[e(513)]?this.settings[e(513)]:i,format:this.useRGBA?c:r[e(591)],type:void 0!==this[e(567)][e(592)]?this[e(567)][e(592)]:l,stencilBuffer:void 0===this[e(567)][e(571)]||this[e(567)][e(571)]}),this[e(554)]=this.front[e(510)](),this[e(493)]=Date.now(),this[e(551)]={},this.Stack={passItems:[],passes:[]}}[T(520)](t,n,e,o){const r=T;this[r(529)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(557)]};this.Stack.passItems[r(535)](s)}removePass(t){const n=T;for(let e=this[n(542)][n(532)][n(579)]-1;e>=0;e--)this[n(542)].passItems[e].uuid===parseInt(t)&&this[n(542)].passItems[n(574)](e,1);console[n(531)](this[n(542)][n(532)])}[T(575)](){const t=T;this.Pass[t(512)](this);return this[t(529)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[T(529)](t){const n=T;return this[n(557)]=function(t,n){const e=z,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,a=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,i={sampler2D:{type:"t",value:()=>new(r[z(377)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[z(363)])},vec3:{type:"v3",value:()=>new(r[z(396)])},vec4:{type:"v4",value:()=>new s},bvec2:{type:"v2",value:()=>new(r[z(363)])},bvec3:{type:"v3",value:()=>new(r[z(396)])},bvec4:{type:"v4",value:()=>new(r[z(375)])},ivec2:{type:"v2",value:()=>new(r[z(363)])},ivec3:{type:"v3",value:()=>new(r[z(396)])},ivec4:{type:"v4",value:()=>new(r[z(375)])},mat2:{type:"v2",value:()=>new(r[z(347)])},mat3:{type:"v3",value:()=>new(r[z(404)])},mat4:{type:"v4",value:()=>new(r[z(367)])}},c={float:{type:"fv",value:()=>[]},vec3:{type:e(384),value:()=>[]}};let l;const u={resolution:{type:"v2",value:new(r[e(363)])(1,1),default:!0},time:{type:"f",value:Date[e(392)](),default:!0},tInput:{type:"t",value:new(r[e(377)]),default:!0}};let v,f;for(;null!==(l=o.exec(n));)l[e(406)]===o[e(358)]&&o[e(358)]++,v=l[1],f=l[2],u[f]={type:i[v][e(379)],value:i[v][e(369)]()};for(;null!==(l=a.exec(n));)l[e(406)]===o.lastIndex&&o.lastIndex++,v=l[1],f=l[2],l[3],u[f]={type:c[v][e(379)],value:c[v][e(369)]()};return new(r[e(385)])({uniforms:u,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}("varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }",t),this[n(557)]}[T(566)](t){const n=T;this[n(557)]=null,this[n(533)]={}}[T(496)](){const t=T;this[t(586)]=this[t(569)],this.write=this[t(554)]}[T(583)](t,n){const e=T,o=window[e(544)],r=window[e(509)];t.setSize(1*o,1*r),n[e(558)].makePerspective(70,o/r,n.near,n[e(525)]),this.setSize(o,r);return this[e(547)](o,r,!0)}setSize(t,n){const e=T;this[e(528)]=t,this[e(521)]=n,this[e(495)][e(558)][e(580)](t/-2,t/2,n/2,n/-2,this[e(495)].near,this[e(495)][e(525)]),this.quad[e(572)].set(t,n,1),this[e(569)][e(560)](t,n),this.back[e(560)](t,n)}[T(547)](t,n,e){const o=T;return new u(t,n,{minFilter:r[o(573)],magFilter:v,format:e?c:r[o(591)]})}[T(526)](t,n,e,o){const r=T;this[r(534)][r(578)](this[r(587)]),this.renderer[r(526)](t,n),o||this[r(568)]()}[T(568)](){const t=T,n=this[t(587)];this[t(587)]=this[t(586)],this[t(586)]=n}[T(511)](){const t=T;for(let n=0;n<this[t(542)].passItems[t(579)];n++){const e=this[t(542)][t(532)][n].shader,o=this.Stack[t(532)][n][t(533)];if(this.renderer[t(578)](this[t(587)]),e instanceof r[t(570)]){this[t(503)][t(593)]=e,this[t(503)].material[t(561)][t(536)][t(514)]=this[t(586)][t(518)],this[t(503)][t(593)][t(561)][t(539)][t(514)][t(585)](this.width,this[t(521)]),this[t(503)][t(593)][t(561)].time[t(514)]=.001*(Date[t(530)]()-this.startTime);for(const n in o)this.quad.material[t(561)][n][t(514)]=o[n];this[t(534)][t(526)](this[t(507)],this.camera),this.swapBuffers()}}}[T(577)](t,n){const e=T;this[e(534)].setRenderTarget(null),this[e(503)][e(593)]=this[e(590)],this[e(503)].material.uniforms.tInput[e(514)]=this[e(586)].texture,this.quad[e(593)][e(561)][e(539)][e(514)][e(585)](this[e(528)],this.height),this[e(534)].render(this.scene,this[e(495)])}}function j(t,n){const e=B();return(j=function(t,n){return e[t-=493]})(t,n)}function V(t){function n(t){const e=j;if(typeof t===e(497))return function(t){}[e(524)](e(545))[e(588)](e(499));1!==(""+t/t)[e(579)]||t%20==0?function(){return!0}[e(524)](e(584)+e(576)).call("action"):function(){return!1}[e(524)](e(584)+e(576))[e(588)](e(519)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const O="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",k=q;!function(t,n){const e=q,o=X();for(;;)try{if(943998===-parseInt(e(396))/1+parseInt(e(360))/2*(parseInt(e(423))/3)+parseInt(e(410))/4*(parseInt(e(398))/5)+-parseInt(e(407))/6+parseInt(e(406))/7+-parseInt(e(420))/8*(-parseInt(e(356))/9)+-parseInt(e(426))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(405)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){H(this,(function(){const t=q,n=new RegExp("function *\\( *\\)"),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=Z("init");n.test(o+t(409))&&e[t(386)](o+"input")?Z():o("0")}))()}();const W=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(405)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function X(){const t=["9329070WOhKQT","string","chain","64KegaIT","postProcessing","RGBPass","constructor","CIRCULARPass","BOXBLURPass","target","map","text","POISSONPass","24IinJnP","DENOISEPass","BufferGeometry","3569793LwiwTz","removePass","action","673080kSKENU","push","prototype","list","info","plugins/postProcessing/image/1324-normal.jpg","81414LmQzDS","SNOISEPass","error","bind","2ZuCDCB","values","addBlade","receiveShadow","SOBELPass","console","dispose","autoClearColor","while (true) {}","render","Vector2","plugins/postProcessing/image/1324.jpg","移除~","castShadow","log","random","关闭通道","VIGNETTE2Pass","click","VIGNETTE1Pass","value","addFolder","debu","DOTPass","SEPIAPass","warn","test","toString","gger",'{}.constructor("return this")( )',"material","FREICHENPass","addButton","toScreen","translate","keys","323524brqlZT","add","197465yPAMCX","call","length","Reset","BoxGeometry","counter","Mesh","apply","7285026sIXkAV"];return(X=function(){return t})()}function q(t,n){const e=X();return(q=function(t,n){return e[t-=351]})(t,n)}W(void 0,(function(){const t=q,n=function(){const t=q;let n;try{n=Function("return (function() "+t(389)+");")()}catch(e){n=window}return n}(),e=n[t(365)]=n.console||{},o=[t(374),t(385),t(354),t(358),"exception","table","trace"];for(let r=0;r<o[t(400)];r++){const n=W.constructor[t(352)].bind(W),s=o[r],a=e[s]||n;n.__proto__=W[t(359)](W),n[t(387)]=a[t(387)][t(359)](a),e[s]=n}}))();function Z(t){function n(t){const e=q;if(typeof t===e(408))return function(t){}[e(413)](e(368))[e(405)](e(403));1!==(""+t/t)[e(400)]||t%20==0?function(){return!0}[e(413)](e(382)+e(388))[e(399)](e(425)):function(){return!1}[e(413)](e(382)+e(388)).apply("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const $=D(m({__name:k(411),async setup(o){const s=k;let a,i;const{camera:c,renderer:l,scene:u,sizes:v}=t();for(var m=new(r[s(422)]),g=[],h=0;h<100;h++){var y=new(r[s(402)])(100,100,100);y[s(394)](1500*Math[s(375)](),1500*Math[s(375)](),1500*Math[s(375)]()),g[s(351)](y)}m=f(g);const I=([a,i]=x((()=>e({map:s(371)}))),a=await a,i(),a),b=([a,i]=x((()=>e({map:s(355)}))),a=await a,i(),a);var _=new p({map:I[s(417)],normalMap:b.map,normalScale:new(r[s(370)])(.8,-.8),shininess:100}),S=new(r[s(404)])(m,_);S[s(373)]=!0,S[s(363)]=!0,u[s(380)][s(397)](S);const w=new G(l[s(380)],{useRGBA:!0}),U=new d;let P=null,E=[{text:"InvertPass",value:{InvertPass:O}},{text:"FXAAPass",value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:s(384),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:s(357),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:s(415),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:s(421),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:"CGAPass",value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:b[s(417)]}}},{text:s(364),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:s(412),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:s(383),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(414),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:s(419),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:s(379),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(377),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:s(391),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:"TOONPass",value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],D="InvertPass",A=O,M=null;U.addBlade({view:s(353),label:"后处理类型",options:E,value:""}).on("change",(t=>{P=t.value}));const L=U[s(392)]({title:"新增",label:"新增通道"});let z=0;L.on(s(378),(t=>{const n=s;D=Object[n(395)](P)[0],A=Object[n(361)](P)[0],M=Object[n(361)](P)[1];let e=z++,o=U[n(381)]({title:D});for(const s in M){let t=M[s];o[n(362)]({view:n(418),label:s,parse:t=>String(t),value:t})}o[n(392)]({title:n(372)+e,label:n(376)}).on("click",(t=>{const e=n;let o=t[e(416)].title.split("~")[1];w[e(424)](o)})).on(n(378),(()=>{o[n(366)]()}));let r=F(M,t[n(416)].label,t.value);w.addPass(D,A,r,e)})),w.onWindowResize(l.value,c.value);const{onLoop:C}=n();return C((({delta:t})=>{const n=s;S&&(l.value[n(367)]=!0,w[n(401)](),S[n(390)]=_,w[n(369)](u[n(380)],c[n(380)]),w.pass(),w[n(393)](u[n(380)],c.value))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),K=Y;!function(t,n){const e=Y,o=nt();for(;;)try{if(881440===parseInt(e(176))/1+-parseInt(e(145))/2*(-parseInt(e(188))/3)+parseInt(e(160))/4+parseInt(e(172))/5*(parseInt(e(185))/6)+-parseInt(e(183))/7*(-parseInt(e(184))/8)+parseInt(e(191))/9*(-parseInt(e(167))/10)+-parseInt(e(168))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const J=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Y(149)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function Y(t,n){const e=nt();return(Y=function(t,n){return e[t-=144]})(t,n)}!function(){J(this,(function(){const t=Y,n=new RegExp(t(186)),e=new RegExp(t(158),"i"),o=ot(t(166));n[t(164)](o+t(174))&&e[t(164)](o+t(157))?ot():o("0")}))()}();const Q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();Q(void 0,(function(){const t=Y;let n;try{n=Function(t(156)+t(171)+");")()}catch(r){n=window}const e=n[t(159)]=n[t(159)]||{},o=[t(169),t(165),"info",t(144),t(192),t(153),t(180)];for(let s=0;s<o[t(151)];s++){const n=Q[t(181)][t(190)][t(155)](Q),r=o[s],a=e[r]||n;n[t(162)]=Q[t(155)](Q),n[t(175)]=a[t(175)][t(155)](a),e[r]=n}}))();const tt={ref:K(170),position:[600,850,-1500],fov:45,near:.1,far:1e5};function nt(){const t=["chain","toString","842039TLFnPp","string","while (true) {}","debu","trace","constructor","#000000","28FFvPpO","926216eFoVEe","6zuluAO","function *\\( *\\)","counter","4584xwDhFS","action","prototype","8469xSKJBP","exception","error","466YfopOz","TresDirectionalLight","postProcessingEditor","TresCanvas","apply","call","length","manual","table","#ffffff","bind","return (function() ","input","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","console","856672jIlVLM","gger","__proto__","TresAmbientLight","test","warn","init","1170vjfKLE","16904415fkatgC","log","perspectiveCameraRef",'{}.constructor("return this")( )',"3264815UdFOvI","stateObject"];return(nt=function(){return t})()}const et=m({__name:K(147),setup(t){const e=K,r={clearColor:e(182),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(152)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=g(a(148));return h(),y(i,E(r,{"window-size":""}),{default:I((()=>[b("TresPerspectiveCamera",tt,null,512),_(S(o),w(U(s)),null,16),n[0]||(n[0]=b(a(163),{color:a(154),intensity:2},null,-1)),n[1]||(n[1]=b(a(146),{position:[100,100,0],intensity:2,color:a(154)},null,-1)),(h(),y(P,null,{default:I((()=>[_($)])),_:1}))])),_:1},16)}}});function ot(t){function n(t){const e=Y;if(typeof t===e(177))return function(t){}[e(181)](e(178))[e(149)](e(187));1!==(""+t/t)[e(151)]||t%20==0?function(){return!0}[e(181)]("debugger")[e(150)](e(189)):function(){return!1}.constructor(e(179)+e(161))[e(149)](e(173)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{et as default};
