import{e as n,a as e}from"./@tresjs.BuwLZoeX1747645272909.js";import{a as t,ab as a}from"./three.BAUoVmiW1747645272909.js";import{d as o,a2 as r,G as i,o as s,I as m,ak as l,al as p,s as f,h as u,e as c,f as v,j as d,u as x,m as h}from"./@vue.C_fjx3FT1747645272909.js";import"./postprocessing.CLnpf0401747645272909.js";import"./@vueuse.BPE9cXaJ1747645272909.js";const y=["rotation"],q={ref:"TresTubeGeometryRef",args:[1e3,1e3]},g=o({__name:"rayMarchingMaterialCombination",setup(e){const{onLoop:o,onAfterLoop:f}=n(),u={transparent:!0,depthWrite:!0,depthTest:!0,side:a,vertexShader:"varying vec2 vUv;\nvoid main(){\n\tgl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.);\n\tvUv=uv;\n}",fragmentShader:"#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec3 u_mouse;\nuniform float u_time;\nvarying vec2 vUv;\nfloat sphere(vec3 p,float d){\n  return(length(p*2.)-d)/2.;\n}\n\nfloat sdPyramid(vec3 p,float h)\n{\n  float m2=h*h+.25;\n  \n  p.xz=abs(p.xz);\n  p.xz=(p.z>p.x)?p.zx:p.xz;\n  p.xz-=.5;\n  \n  vec3 q=vec3(p.z,h*p.y-.5*p.x,h*p.x+.5*p.y);\n  \n  float s=max(-q.x,0.);\n  float t=clamp((q.y-.5*p.z)/(m2+.25),0.,1.);\n  \n  float a=m2*(q.x+s)*(q.x+s)+q.y*q.y;\n  float b=m2*(q.x+.5*t)*(q.x+.5*t)+(q.y-m2*t)*(q.y-m2*t);\n  \n  float d2=min(q.y,-q.x*m2-q.y*.5)>0.?0.:min(a,b);\n  \n  return sqrt((d2+q.z*q.z)/m2)*sign(max(q.z,-p.y));\n}\nfloat sdBoxFrame(vec3 p,vec3 b,float e)\n{\n  p=abs(p)-b;\n  vec3 q=abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.))+min(max(p.x,max(q.y,q.z)),0.),\n      length(max(vec3(q.x,p.y,q.z),0.))+min(max(q.x,max(p.y,q.z)),0.)),\n      length(max(vec3(q.x,q.y,p.z),0.))+min(max(q.x,max(q.y,p.z)),0.));\n    }\n    mat2 rot2D(float angle){\n      float s=sin(angle);\n      float c=cos(angle);\n      return mat2(c,-s,s,c);\n    }\n    float map(vec3 p){\n      // p.xy*=rot2D(u_time);\n      vec3 pos=vec3(sin(u_time*10.),0.,0.);\n      float spheresdf=sphere(p,.5);\n      float BoxFramesdf=sdBoxFrame(p,vec3(.5,.3,.5),.025);\n      float entity=min(BoxFramesdf,spheresdf);\n      entity=min(sdPyramid(-p-vec3(1.,0.,0.),1.5),entity);\n      return entity;\n    }\n    \n    void main(){\n      vec3 ro=vec3(0.,0.,-4.);//起始位置\n      vec3 rd=normalize(vec3(vUv-.5,1.));//方向\n      // horizontal camera rotation\n      \n      ro.xz*=rot2D(-u_mouse.x*.001);\n      rd.xz*=rot2D(-u_mouse.x*.001);\n      ro.xy*=rot2D(-u_mouse.y*.001);\n      rd.xy*=rot2D(-u_mouse.y*.001);\n      float t=0.;\n      vec3 color=vec3(0.);\n      for(int i=0;i<80;i++){\n        vec3 p=ro+rd*t;\n        float d=map(p);\n        t+=d;\n        //优化效率\n        if(t>100.||d<.001){\n          break;\n        }\n        \n      }\n      color=vec3(t)*.2;\n      gl_FragColor=vec4(color,1.);\n      \n    }",uniforms:{u_resolution:{value:new t(window.innerWidth,window.innerHeight)},u_mouse:{value:new t(0,0)},u_time:{value:0}}},c=window.innerWidth/2,v=window.innerHeight/2;let d=0,x=0;return document.addEventListener("mousemove",(function(n){d=n.clientX-c,x=n.clientY-v}),!1),r((()=>{})),o((({elapsed:n})=>{u.uniforms.u_time.value+=.001,u.uniforms.u_mouse.value=new t(d,x)})),f((()=>{})),(n,e)=>(s(),i("TresMesh",{ref:"MeshRef",rotation:[Math.PI/2,0,0]},[m("TresPlaneGeometry",q,null,512),m("TresShaderMaterial",l(p(u)),null,16)],8,y))}}),z={ref:"perspectiveCameraRef",position:[0,1500,0],fov:45,near:1,far:1e4},_=o({__name:"rayMarchingCombination",setup(t){const a={clearColor:"#000000",shadows:!0,alpha:!1,useLegacyLights:!0},o={autoRotate:!1,enableDamping:!0},{onLoop:r}=n();return r((({delta:n})=>{})),f((()=>{})),(n,t)=>{const r=u("TresCanvas");return s(),c(r,h(a,{"window-size":""}),{default:v((()=>[m("TresPerspectiveCamera",z,null,512),d(x(e),l(p(o)),null,16),t[0]||(t[0]=m("TresAmbientLight",{color:"#ffffff"},null,-1)),t[1]||(t[1]=m("TresDirectionalLight",{position:[100,100,0],intensity:.5,color:"#ffffff"},null,-1)),d(g)])),_:1},16)}}});export{_ as default};
