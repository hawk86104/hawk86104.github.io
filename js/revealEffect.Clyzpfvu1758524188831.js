import{e as t,O as e,a as n}from"./@tresjs.BL1sBIDK1758524188831.js";import"./OimoPhysicsBuffer.CcBMdMc41758524188831.js";import{_ as r}from"./reflectorDUDV.vue_vue_type_script_setup_true_lang.0p0XW2Cf1758524188831.js";import"./vanilla.esm.5.5.0.UWCjMdOF1758524188831.js";import"./PackedMipMapGenerator.7JJE-1Hp1758524188831.js";import"./Resource.DxdCIUkg1758524188831.js";import{P as s}from"./tweakpane.C0HtAJSg1758524188831.js";import{d as o,w as a,G as i,o as c,a7 as v,a8 as g,aa as l,I as u,j as f,m,u as x,r as p,h as y,e as d,f as P,a5 as z}from"./@vue.pEDXJ_3Z1758524188831.js";import{a as h}from"./three.CC50Wz7a1758524188831.js";import"./postprocessing.DYlQqnRh1758524188831.js";import"./@vueuse.C-O_6is-1758524188831.js";import"./oimophysics.BBtHVm4j1758524188831.js";import"./dither.glsl.tNAdkJUa1758524188831.js";import"./Reflector.hbefUijb1758524188831.js";import"./vite-plugin-qiankun.B06WoCqG1758524188831.js";import"./object-hash.COWhg4aZ1758524188831.js";import"./@amap.CGUF9xH41758524188831.js";import"./jszip.BzP0QdiD1758524188831.js";import"./three-stdlib.CYvtwvCB1758524188831.js";const w=o({__name:"revealEffectMaterial",props:{uProgress:{default:0},texture:{default:null}},setup(e){const n=e,r={uniforms:{uTexture:{value:n.texture},uTime:{value:0},uProgress:{value:0},uImageRes:{value:new h(1,1)},uRes:{value:new h(1,1)}},transparent:!0,vertexShader:"\n\tuniform float uProgress;\n\tvarying vec2 vUv;\n\n\tvoid main()\n\t{\n\t\tvec3 newPosition = position;\n\n\t\t// Calculate the distance to the center of our plane\n\t\tfloat distanceToCenter = distance(vec2(0.5), uv);\n\n\t\t// Wave effect\n\t\tfloat wave = (1.0 - uProgress) * sin(distanceToCenter * 20.0 - uProgress * 5.0);\n\n\t\t// Apply the wave effect to the position Z\n\t\tnewPosition.z += wave;\n\n\t\t// FINAL POSITION\n\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);\n\n\t\t// VARYINGS\n\t\tvUv = uv;\n\t}\n\t",fragmentShader:'\n\t\tuniform sampler2D uTexture;\n\t\tuniform float uTime;\n\t\tuniform float uProgress;\n\t\tuniform vec2 uRes;\n\t\tuniform vec2 uImageRes;\n\n\t\tvarying vec2 vUv;\n\n\t\t\n//\n// GLSL textureless classic 3D noise "cnoise",\n// with an RSL-style periodic variant "pnoise".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-10-11\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise(vec3 P)\n{\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n\n\t\tvec2 CoverUV(vec2 u, vec2 s, vec2 i) {\n\t\t\tfloat rs = s.x / s.y; // Aspect plane size\n\t\t\tfloat ri = i.x / i.y; // Aspect image size\n\t\t\tvec2 st = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x); // New st\n\t\t\tvec2 o = (rs < ri ? vec2((st.x - s.x) / 2.0, 0.0) : vec2(0.0, (st.y - s.y) / 2.0)) / st; // Offset\n\t\t\treturn u * s / st + o;\n\t\t}\n\n\t\tvoid main()\n\t\t{\n\t\t\t\t// New UV to prevent image stretching on fullscreen mode\n\t\t\t\tvec2 newUv = CoverUV(vUv, uRes, uImageRes);\n\n\t\t\t\t// Displace the UV\n\t\t\t\tvec2 displacedUv = vUv + cnoise(vec3(vUv * 5.0, uTime * 0.1));\n\n\t\t\t\t// Perlin noise\n\t\t\t\tfloat strength = cnoise(vec3(displacedUv * 5.0, uTime * 0.2 ));\n\n\t\t\t\t// Radial gradient\n\t\t\t\tfloat radialGradient = distance(vUv, vec2(0.5)) * 12.5 - 7.0 * uProgress;\n\t\t\t\tstrength += radialGradient;\n\n\t\t\t\t// Clamp the value from 0 to 1 & invert it\n\t\t\t\tstrength = clamp(strength, 0.0, 1.0);\n\t\t\t\tstrength = 1.0 - strength;\n\n\t\t\t\t// Apply texture\n\t\t\t\tvec3 textureColor = texture2D(uTexture, newUv).rgb;\n\n\t\t\t\t// Opacity animation\n\t\t\t\tfloat opacityProgress = smoothstep(0.0, 0.7, uProgress);\n\n\t\t\t\t// FINAL COLOR\n\t\t\t\tgl_FragColor = vec4(textureColor, strength * opacityProgress);\n\t\t}\n\t'};a((()=>n.uProgress),(t=>{r&&(r.uniforms.uProgress.value=t)}));const{onLoop:s}=t();return s((({elapsed:t})=>{r&&(r.uniforms.uTime.value=t)})),(t,e)=>(c(),i("TresShaderMaterial",v(g(r)),null,16))}}),_={position:[0,0,-16]},j=o({__name:"revealEffectMesh",async setup(t){let n,r;const s=([n,r]=l((()=>e("./plugins/visualArts/video/vlg.mp4",{loop:!0}))),n=await n,r(),n||null);return(t,e)=>(c(),i("TresMesh",_,[e[0]||(e[0]=u("TresPlaneGeometry",{args:[16,10]},null,-1)),f(w,m(t.$attrs,{texture:x(s)}),null,16,["texture"])]))}}),T=o({__name:"revealEffect",setup(e){const o={clearColor:"#050505",antialias:!1},a={reflectivity:.8,showGridHelper:!1,scale:6},i=p({uProgress:0}),l=new s({title:"参数"});return l.addBinding(i,"uProgress",{label:"进度",min:0,max:1,step:.01}).disabled=!0,t().onLoop((({elapsed:t})=>{i.uProgress=(Math.sin(t)+1)/2,l.refresh()})),(t,e)=>{const s=y("TresCanvas");return c(),d(s,m(o,{"window-size":""}),{default:P((()=>[e[0]||(e[0]=u("TresPerspectiveCamera",{position:[0,0,30],fov:45,near:.1,far:1e3},null,-1)),f(x(n)),e[1]||(e[1]=u("TresAmbientLight",{intensity:.5},null,-1)),(c(),d(z,null,{default:P((()=>[f(j,v(g(i)),null,16)])),_:1})),(c(),d(z,null,{default:P((()=>[f(x(r),m({position:[0,-6,0]},a),null,16)])),_:1}))])),_:1},16)}}});export{T as default};
