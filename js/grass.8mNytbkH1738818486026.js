import{s as t,_ as n,ai as e}from"./three.WgQSjl1J1738818486026.js";import{e as o,a as r,o as a,f as i}from"./@tresjs.ZGxFoQtw1738818486026.js";import"./index.WjQAM0351738818486026.js";import{c as s}from"./simplex-noise.jB2HxhHB1738818486026.js";import{C as c}from"./index.Mut38q0v1738818486026.js";import{d as l,a3 as u,o as f,H as p,N as h,u as m,r as d,f as v,g,j as x,aj as w,ak as y,al as b}from"./@vue.NRI7TcgI1738818486026.js";import{_}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.3xMQSooE1738818486026.js";import"./@vueuse.Fak-HUpz1738818486026.js";import"./lamina.MAuZQj041738818486026.js";import"./glsl-tokenizer.KVpuRi-h1738818486026.js";import"./@amap.E-EiiwM61738818486026.js";import"./glsl-token-descope.yfpGDbeP1738818486026.js";import"./glsl-token-depth.mVZX70Jh1738818486026.js";import"./glsl-token-scope.OhEYOwuP1738818486026.js";import"./glsl-token-properties.FCZCijVk1738818486026.js";import"./glsl-token-assignments.58DmWlqx1738818486026.js";import"./glsl-token-string.4SWha1IC1738818486026.js";import"./glsl-token-functions.qx3JDc4K1738818486026.js";import"./object-hash.ZlXR4dyw1738818486026.js";import"./jszip.8di41imu1738818486026.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.SJTmxcZN1738818486026.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.-T6dZBkF1738818486026.js";import"./three-stdlib.9mw3NDon1738818486026.js";import"./@pmndrs.rZbwRp5K1738818486026.js";import"./utils.I4kdHeYg1738818486026.js";const M=z;!function(t,n){const e=z,o=I();for(;;)try{if(808071===parseInt(e(280))/1+parseInt(e(207))/2*(parseInt(e(210))/3)+-parseInt(e(213))/4*(parseInt(e(237))/5)+parseInt(e(234))/6*(-parseInt(e(230))/7)+-parseInt(e(251))/8+-parseInt(e(265))/9*(parseInt(e(279))/10)+-parseInt(e(246))/11*(-parseInt(e(224))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const j=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[z(271)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function z(t,n){const e=I();return(z=function(t,n){return e[t-=202]})(t,n)}!function(){j(this,(function(){const t=z,n=new RegExp(t(252)),e=new RegExp(t(232),"i"),o=E(t(275));n[t(256)](o+t(205))&&e[t(256)](o+t(220))?E():o("0")}))()}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[z(271)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function I(){const t=["attributes-halfRootAngleCos","halfRootAngleCosF32","20glUVGE","convertSRGBToLinear","error","string","TresGroup","attributes-stretch","InstancedBufferAttribute","console","Color","77uVYMnE","toneMapped","exception","joints","gger","11419800hSibJd","function *\\( *\\)","PlaneGeometry","trace","width","test","value","normalize","bind","toString","material","offsetsF32","instances","stretchesF32","6998661rhiWJo","map","computeVertexNormals","translate","cos","log","apply","position",'{}.constructor("return this")( )',"push","init","Vector4","set","TresMeshStandardMaterial","10lijUdn","827320ILRCRi","attributes-uv","alphaMap","side","length","attributes-orientation","chain","info","7010qxEfdl","needsUpdate","attributes","771MRRMXe","stateObject","geometry","207436xyLGQi","sin","attributes-position","DoubleSide","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","random","__proto__","input","Vector3","index","return (function() ","2987256CLaVnF","halfRootAngleSinF32","call","TresMesh","counter","array","28oqyXMY","warn","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","constructor","375090AumgnC"];return(I=function(){return t})()}A(void 0,(function(){const t=z;let n;try{n=Function(t(223)+t(273)+");")()}catch(r){n=window}const e=n[t(244)]=n[t(244)]||{},o=[t(270),t(231),t(206),t(239),t(248),"table",t(254)];for(let a=0;a<o[t(203)];a++){const n=A[t(233)].prototype[t(259)](A),r=o[a],i=e[r]||n;n[t(219)]=A[t(259)](A),n[t(260)]=i[t(260)][t(259)](i),e[r]=n}}))();const C=[M(261)],R=[M(222),M(215),M(281),"attributes-offset",M(204),M(242),"attributes-halfRootAngleSin",M(235)],S=[M(212)],k=["side"],F=l({__name:"grass",props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(e){const a=M;let i,l;const d=([i,l]=u((()=>r({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),i=await i,l(),i),v=e,g=s(Math[a(218)]);function x(t,e){const o=a,r=t.x*e.w+t.y*e.z-t.z*e.y+t.w*e.x,i=-t.x*e.z+t.y*e.w+t.z*e.x+t.w*e.y,s=t.x*e.y-t.y*e.x+t.z*e.w+t.w*e.z,c=-t.x*e.x-t.y*e.y-t.z*e.z+t.w*e.w;return new(n[o(276)])(r,i,s,c)}function w(t,n){var e=2*g(t/50,n/50);return e+=4*g(t/100,n/100),e+=.2*g(t/10,n/10)}const y=function(t,e){const o=a,r=[],i=[],s=[],c=[],l=[];let u=new(n[o(276)]),f=new(n[o(276)]);const p=-.25;for(let a=0;a<t;a++){const h=Math[o(218)]()*e-e/2,m=Math[o(218)]()*e-e/2,d=w(h,m);r.push(h,d,m);let v=Math.PI-Math.random()*(2*Math.PI);c[o(274)](Math.sin(.5*v)),l.push(Math[o(269)](.5*v));let g=new(n[o(221)])(0,1,0),y=g.x*Math[o(214)](v/2),b=g.y*Math[o(214)](v/2),_=g.z*Math[o(214)](v/2),M=Math[o(269)](v/2);u.set(y,b,_,M)[o(258)](),v=.5*Math[o(218)]()+p,g=new(n[o(221)])(1,0,0),y=g.x*Math.sin(v/2),b=g.y*Math[o(214)](v/2),_=g.z*Math[o(214)](v/2),M=Math[o(269)](v/2),f[o(277)](y,b,_,M)[o(258)](),u=x(u,f),v=.5*Math[o(218)]()+p,g=new(n[o(221)])(0,0,1),y=g.x*Math[o(214)](v/2),b=g.y*Math[o(214)](v/2),_=g.z*Math[o(214)](v/2),M=Math[o(269)](v/2),f[o(277)](y,b,_,M)[o(258)](),u=x(u,f),i[o(274)](u.x,u.y,u.z,u.w),a<t/3?s[o(274)](1.8*Math[o(218)]()):s[o(274)](Math[o(218)]())}return{offsetsF32:new(n[o(243)])(new Float32Array(r),3),orientationsF32:new(n[o(243)])(new Float32Array(i),4),stretchesF32:new(n[o(243)])(new Float32Array(s),1),halfRootAngleCosF32:new(n[o(243)])(new Float32Array(l),1),halfRootAngleSinF32:new(n[o(243)])(new Float32Array(c),1)}}(v[a(263)],v[a(255)]),b=new t(v.bW,v.bH,1,v[a(249)])[a(268)](0,v.bH/2,0),_=new(n[a(253)])(v[a(255)],v[a(255)],32,32);_.lookAt(new(n[a(221)])(0,1,0));const j=_[a(209)][a(272)];for(let t=0;t<j[a(229)][a(203)];t+=3)j[a(229)][t+1]=w(j[a(229)][t],j.array[t+2]);_[a(209)][a(272)][a(208)]=!0,_[a(267)]();const z=new(c({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(n[a(245)])(.3,.9,0)[a(238)](),bottomColor:new(n[a(245)])(0,.2,0)[a(238)]()},"   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }",a(217),(t=>{const e=a;t[e(202)]=n[e(216)]})));z.map=d[a(266)],z[a(282)]=d[a(282)],z[a(247)]=!1;const{onLoop:A}=o();return A((({elapsed:t})=>{const n=a;z.uniforms.time[n(257)]=t/4})),(t,e)=>{const o=a;return f(),p(o(241),null,[h(o(227),{material:m(z)},[h("TresInstancedBufferGeometry",{index:m(b)[o(222)],"attributes-position":m(b)[o(209)][o(272)],"attributes-uv":m(b)[o(209)].uv,"attributes-offset":m(y)[o(262)],"attributes-orientation":m(y).orientationsF32,"attributes-stretch":m(y)[o(264)],"attributes-halfRootAngleSin":m(y)[o(225)],"attributes-halfRootAngleCos":m(y)[o(236)]},null,8,R)],8,C),h(o(227),{position:[0,0,0],geometry:m(_)},[h(o(278),{color:"#000f00",side:n[o(216)]},null,8,k)],8,S)])}}});function E(t){function n(t){const e=z;if(typeof t===e(240))return function(t){}.constructor("while (true) {}")[e(271)](e(228));1!==(""+t/t)[e(203)]||t%20==0?function(){return!0}[e(233)]("debu"+e(250))[e(226)]("action"):function(){return!1}[e(233)]("debu"+e(250))[e(271)](e(211)),n(++t)}try{if(t)return n;n(0)}catch(e){}}!function(t,n){const e=T,o=O();for(;;)try{if(580680===parseInt(e(490))/1+-parseInt(e(504))/2*(parseInt(e(501))/3)+-parseInt(e(482))/4+-parseInt(e(509))/5+-parseInt(e(481))/6*(parseInt(e(496))/7)+parseInt(e(478))/8+parseInt(e(480))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const D=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){D(this,(function(){const t=T,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(493),"i"),o=P(t(487));n[t(499)](o+t(486))&&e[t(499)](o+t(498))?P():o("0")}))()}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[T(506)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function T(t,n){const e=O();return(T=function(t,n){return e[t-=477]})(t,n)}function O(){const t=["387625NRGAcw","bind","TresPerspectiveCamera","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","table","exception","7WgMhgW",'{}.constructor("return this")( )',"input","test","counter","895341mLrfYX","gger","warn","6TSpOdl","error","apply","string","trace","403765zwpNEJ","return (function() ","length","7050024xdeETh","console","15209748fnZhxk","6368748wusSee","1362472bbpIXF","constructor","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","call","chain","init","prototype","debu"];return(O=function(){return t})()}L(void 0,(function(){const t=T;let n;try{n=Function(t(510)+t(497)+");")()}catch(r){n=window}const e=n[t(479)]=n[t(479)]||{},o=["log",t(503),"info",t(505),t(495),t(494),t(508)];for(let a=0;a<o[t(477)];a++){const n=L[t(483)][t(488)][t(491)](L),r=o[a],i=e[r]||n;n.__proto__=L[t(491)](L),n.toString=i.toString.bind(i),e[r]=n}}))();const H=l({__name:"grass",setup(t){const n=d({alpha:!0,toneMapping:e,windowSize:!0,clearColor:6710886}),o=d({enableDamping:!0,autoRotate:!1});return(t,e)=>{const r=T;return f(),v(m(i),w(y(n)),{default:g((()=>[e[0]||(e[0]=h(r(492),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),x(m(a),w(y(o)),null,16),(f(),v(b,null,{default:g((()=>[x(F)])),_:1})),(f(),v(b,null,{default:g((()=>[x(m(_),{texture:r(484)})])),_:1}))])),_:1},16)}}});function P(t){function n(t){const e=T;if(typeof t===e(507))return function(t){}[e(483)]("while (true) {}")[e(506)](e(500));1!==(""+t/t)[e(477)]||t%20==0?function(){return!0}[e(483)](e(489)+"gger")[e(485)]("action"):function(){return!1}.constructor("debu"+e(502)).apply("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{H as default};
