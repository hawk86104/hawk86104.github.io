import{_ as t,C as n,ar as e,b as o,a0 as r,ai as a}from"./three.6w8Allze1738810638719.js";import{e as i,a as s,o as c,f as l}from"./@tresjs.8axf5yqM1738810638719.js";import"./index.7tFgzq-_1738810638719.js";import{c as u}from"./simplex-noise.jB2HxhHB1738810638719.js";import{C as p}from"./index.HkkGeLOW1738810638719.js";import{d as f,a3 as h,o as m,H as d,N as v,u as g,r as x,f as w,g as y,j as b,aj as _,ak as j,al as M}from"./@vue.NRI7TcgI1738810638719.js";import{_ as z}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.fhd_GqFa1738810638719.js";import"./@vueuse.hJpps2zM1738810638719.js";import"./lamina.E8oxb0U01738810638719.js";import"./glsl-tokenizer.mi2qP_pw1738810638719.js";import"./@amap.OmDF_WNh1738810638719.js";import"./glsl-token-descope.eMvuHmq21738810638719.js";import"./glsl-token-depth.7rBOGlcK1738810638719.js";import"./glsl-token-scope.9HVrvGLO1738810638719.js";import"./glsl-token-properties.nblORRV51738810638719.js";import"./glsl-token-assignments.c1ii8wgs1738810638719.js";import"./glsl-token-string.Mi9QJClA1738810638719.js";import"./glsl-token-functions.E38nyMlt1738810638719.js";import"./object-hash.IcDxbfA01738810638719.js";import"./jszip.DL2I3nsH1738810638719.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.AHX-xzsB1738810638719.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.NZw3jWL91738810638719.js";import"./three-stdlib.LzGCk-lJ1738810638719.js";import"./@pmndrs.lrUatEzS1738810638719.js";import"./utils.DM6l77YR1738810638719.js";const I=O;!function(t,n){const e=O,o=S();for(;;)try{if(128469===-parseInt(e(235))/1*(parseInt(e(238))/2)+-parseInt(e(169))/3*(-parseInt(e(199))/4)+-parseInt(e(218))/5*(parseInt(e(164))/6)+parseInt(e(183))/7*(-parseInt(e(226))/8)+-parseInt(e(160))/9+parseInt(e(176))/10*(parseInt(e(172))/11)+parseInt(e(180))/12*(parseInt(e(223))/13))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){A(this,(function(){const t=O,n=new RegExp(t(166)),e=new RegExp(t(201),"i"),o=T("init");n[t(228)](o+t(182))&&e[t(228)](o+"input")?T():o("0")}))()}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function S(){const t=["width","12hKdShd","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","warn","Vector4","orientationsF32","TresMesh","constructor","set","console","computeVertexNormals","attributes-position","grass","Vector3","attributes-offset","instances","time","return (function() ","normalize","60ihkyuG","value","position","index","cos","13hdgBZj","geometry","attributes-stretch","213112wFYPTK","side","test","attributes-halfRootAngleSin","sin","uniforms","toneMapped","Color","InstancedBufferAttribute","374gXbqIx","lookAt","joints","1046TyUjAl","toString","while (true) {}","offsetsF32","action",'{}.constructor("return this")( )',"2067651LczMwA","map","alphaMap","table","8508UapUpO","length","function *\\( *\\)","halfRootAngleCosF32","trace","81174euOpXQ","counter","push","165BjRgAv","attributes-halfRootAngleCos","PlaneGeometry","array","117470tYVvdR","random","needsUpdate","stateObject","4400700tmLFKE","stretchesF32","chain","14ODEZGj","string","gger","bind","TresInstancedBufferGeometry","DoubleSide","#000f00","apply","translate","convertSRGBToLinear","halfRootAngleSinF32","attributes","debu","attributes-orientation","call"];return(S=function(){return t})()}C(void 0,(function(){const t=O,n=function(){const t=O;let n;try{n=Function(t(216)+t(159)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(208)]||{},o=["log",t(202),"info","error","exception",t(163),t(168)];for(let r=0;r<o[t(165)];r++){const n=C[t(206)].prototype.bind(C),a=o[r],i=e[a]||n;n.__proto__=C[t(186)](C),n.toString=i[t(239)].bind(i),e[a]=n}}))();const k=["material"],F=[I(221),I(210),"attributes-uv",I(213),I(196),I(225),I(229),I(173)],R=[I(224)],D=[I(227)];function O(t,n){const e=S();return(O=function(t,n){return e[t-=158]})(t,n)}const E=f({__name:I(211),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(a){const c=I;let l,f;const x=([l,f]=h((()=>s({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),l=await l,f(),l),w=a,y=u(Math[c(177)]);function b(n,e){const o=c,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,a=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,i=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,s=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(203)])(r,a,i,s)}function _(t,n){var e=2*y(t/50,n/50);return e+=4*y(t/100,n/100),e+=.2*y(t/10,n/10)}const j=function(n,r){const a=c,i=[],s=[],l=[],u=[],p=[];let f=new e,h=new(t[a(203)]);const m=-.25;for(let e=0;e<n;e++){const c=Math.random()*r-r/2,d=Math[a(177)]()*r-r/2,v=_(c,d);i[a(171)](c,v,d);let g=Math.PI-Math.random()*(2*Math.PI);u.push(Math.sin(.5*g)),p.push(Math.cos(.5*g));let x=new o(0,1,0),w=x.x*Math[a(230)](g/2),y=x.y*Math.sin(g/2),j=x.z*Math.sin(g/2),M=Math.cos(g/2);f.set(w,y,j,M)[a(217)](),g=.5*Math[a(177)]()+m,x=new(t[a(212)])(1,0,0),w=x.x*Math[a(230)](g/2),y=x.y*Math.sin(g/2),j=x.z*Math[a(230)](g/2),M=Math[a(222)](g/2),h[a(207)](w,y,j,M)[a(217)](),f=b(f,h),g=.5*Math[a(177)]()+m,x=new(t[a(212)])(0,0,1),w=x.x*Math.sin(g/2),y=x.y*Math[a(230)](g/2),j=x.z*Math[a(230)](g/2),M=Math[a(222)](g/2),h[a(207)](w,y,j,M)[a(217)](),f=b(f,h),s[a(171)](f.x,f.y,f.z,f.w),e<n/3?l[a(171)](1.8*Math.random()):l[a(171)](Math[a(177)]())}return{offsetsF32:new(t[a(234)])(new Float32Array(i),3),orientationsF32:new(t[a(234)])(new Float32Array(s),4),stretchesF32:new(t[a(234)])(new Float32Array(l),1),halfRootAngleCosF32:new(t[a(234)])(new Float32Array(p),1),halfRootAngleSinF32:new(t[a(234)])(new Float32Array(u),1)}}(w[c(214)],w.width),M=new(t[c(174)])(w.bW,w.bH,1,w[c(237)])[c(191)](0,w.bH/2,0),z=new(t[c(174)])(w[c(198)],w.width,32,32);z[c(236)](new(t[c(212)])(0,1,0));const A=z[c(194)][c(220)];for(let t=0;t<A[c(175)].length;t+=3)A.array[t+1]=_(A[c(175)][t],A[c(175)][t+2]);z[c(194)][c(220)][c(178)]=!0,z[c(209)]();const C=new(p({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(t[c(233)])(.3,.9,0)[c(192)](),bottomColor:new n(0,.2,0)[c(192)]()},"   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }",c(200),(t=>{t[c(227)]=r})));C[c(161)]=x[c(161)],C[c(162)]=x[c(162)],C[c(232)]=!1;const{onLoop:S}=i();return S((({elapsed:t})=>{const n=c;C[n(231)][n(215)][n(219)]=t/4})),(n,e)=>{const o=c;return m(),d("TresGroup",null,[v(o(205),{material:g(C)},[v(o(187),{index:g(M)[o(221)],"attributes-position":g(M)[o(194)].position,"attributes-uv":g(M)[o(194)].uv,"attributes-offset":g(j)[o(241)],"attributes-orientation":g(j)[o(204)],"attributes-stretch":g(j)[o(181)],"attributes-halfRootAngleSin":g(j)[o(193)],"attributes-halfRootAngleCos":g(j)[o(167)]},null,8,F)],8,k),v(o(205),{position:[0,0,0],geometry:g(z)},[v("TresMeshStandardMaterial",{color:o(189),side:t[o(188)]},null,8,D)],8,R)])}}});function T(t){function n(t){const e=O;if(typeof t===e(184))return function(t){}[e(206)](e(240)).apply(e(170));1!==(""+t/t)[e(165)]||t%20==0?function(){return!0}[e(206)](e(195)+e(185))[e(197)](e(158)):function(){return!1}.constructor("debugger")[e(190)](e(179)),n(++t)}try{if(t)return n;n(0)}catch(e){}}function B(){const t=["264lpCqYE","2271890xtUQpO","warn","1779219NmMuSD","16MkOhXU",'{}.constructor("return this")( )',"log","console","4FucQeh","exception","16658580WOPxuG","info","362543jvGCSw","__proto__","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","apply","gger","5864CInoSY","init","input","1591016lUHpYT","constructor","table","return (function() ","bind","debu","prototype","call","length","while (true) {}","2519262wmgYaB","trace","11oSRioz","10vWsdNQ","toString","test","error","action"];return(B=function(){return t})()}function P(t,n){const e=B();return(P=function(t,n){return e[t-=282]})(t,n)}!function(t,n){const e=P,o=B();for(;;)try{if(361602===parseInt(e(303))/1+parseInt(e(308))/2*(-parseInt(e(291))/3)+-parseInt(e(299))/4*(parseInt(e(292))/5)+-parseInt(e(283))/6+parseInt(e(311))/7*(-parseInt(e(295))/8)+-parseInt(e(294))/9*(-parseInt(e(286))/10)+parseInt(e(285))/11*(parseInt(e(301))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const U=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){U(this,(function(){const t=P,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(305),"i"),o=G(t(309));n[t(288)](o+"chain")&&e[t(288)](o+t(310))?G():o("0")}))()}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();H(void 0,(function(){const t=P;let n;try{n=Function(t(314)+t(296)+");")()}catch(r){n=window}const e=n[t(298)]=n[t(298)]||{},o=[t(297),t(293),t(302),t(289),t(300),t(313),t(284)];for(let a=0;a<o[t(319)];a++){const n=H.constructor[t(317)][t(315)](H),r=o[a],i=e[r]||n;n[t(304)]=H[t(315)](H),n[t(287)]=i[t(287)].bind(i),e[r]=n}}))();const L=f({__name:"grass",setup(t){const n=x({alpha:!0,toneMapping:a,windowSize:!0,clearColor:6710886}),e=x({enableDamping:!0,autoRotate:!1});return(t,o)=>(m(),w(g(l),_(j(n)),{default:y((()=>[o[0]||(o[0]=v("TresPerspectiveCamera",{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),b(g(c),_(j(e)),null,16),(m(),w(M,null,{default:y((()=>[b(E)])),_:1})),(m(),w(M,null,{default:y((()=>[b(g(z),{texture:"https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr"})])),_:1}))])),_:1},16))}});function G(t){function n(t){const e=P;if("string"==typeof t)return function(t){}[e(312)](e(282))[e(306)]("counter");1!==(""+t/t)[e(319)]||t%20==0?function(){return!0}[e(312)](e(316)+e(307))[e(318)](e(290)):function(){return!1}.constructor("debugger")[e(306)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{L as default};
