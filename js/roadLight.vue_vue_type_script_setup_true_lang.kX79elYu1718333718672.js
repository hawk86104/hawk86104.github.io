import{a5 as k,q as _,aH as g,bk as C,bt as R,ba as v,cr as x,aa as B,o as f,c as p,K as L,L as M,a1 as h,T as d,bf as S,aD as E,ad as G}from"./vendor.V7oUbPUv1718333718672.js";import{l as J}from"./utils.S5xbYo2l1718333718672.js";const N=["position","rotation-y","scale"],V={renderOrder:3e3},Y=["args"],j=["map","side","color"],y=6e4,D=k({__name:"roadLight",props:{geoJson:{},color:{default:"#ffff00"},position:{default:[1837.0641427711184,30,-457.0929823910632]},radius:{default:2},rotationY:{default:-.3866683251512052},scale:{default:1.5083171193254858},speed:{default:1}},async setup(w){let t,a;const e=w,T=_(),r=_(),{map:o}=([t,a]=g(()=>C({map:"./plugins/digitalCity/image/line.png"})),t=await t,a(),t);o.needsUpdate=!0,o.wrapS=o.wrapT=R,o.repeat.set(1,1);const u=([t,a]=g(()=>J(e.geoJson)),t=await t,a(),t),n=[-31.258949,0,-121.465782];let m=[];for(var c=0;c<u.length;c++){const l=u[c],i=[];l.geometry.coordinates.forEach(s=>{i.push(new v((s[1]+n[0])*y,n[1],(s[0]+n[2])*y))}),m.push(new x(i))}B(()=>{e.color&&r.value&&(r.value.color=new E(e.color))});const{onLoop:b}=G();return b(({delta:l})=>{o.offset.x-=Math.random()/20*e.speed}),(l,i)=>(f(),p("TresGroup",{ref_key:"tgRef",ref:T,position:e.position,"rotation-y":e.rotationY,scale:e.scale},[(f(!0),p(L,null,M(d(m),s=>(f(),p("TresMesh",V,[h("TresTubeGeometry",{args:[s,64,e.radius,20,!1]},null,8,Y),h("TresMeshBasicMaterial",{ref_for:!0,ref_key:"tmbmRef",ref:r,map:d(o),side:d(S),transparent:!0,color:e.color},null,8,j)]))),256))],8,N))}});export{D as _};
