import{K as a}from"./@tresjs.B_KjVy0E1761276103973.js";import{P as e}from"./tweakpane.CqZAnw7f1761276103973.js";import{_ as o,a as s,b as r}from"./depth.vue_vue_type_script_setup_true_lang.vPefow2F1761276103973.js";import"./lamina.BeKFoY2k1761276103973.js";import"./three-custom-shader-material.DSmV-ApW1761276103973.js";import"./OimoPhysicsBuffer.BXemNmye1761276103973.js";import{_ as t}from"./reflectorDUDV.vue_vue_type_script_setup_true_lang.DxF4X4Ny1761276103973.js";import"./vanilla.esm.5.5.0.CRlEbOMK1761276103973.js";import"./Resource.CSaxGSPI1761276103973.js";import"./PackedMipMapGenerator.CqP5a0bT1761276103973.js";import{d as i,r as l,ae as p,g as n,b as m,o as d,e as c,I as h,h as u,u as f,a9 as j,aa as g,m as _}from"./@vue.CKlgtJke1761276103973.js";import{ad as B,A as b,cn as v,V as k}from"./three.Bhn4-0ry1761276103973.js";import"./postprocessing.CeTFUAN_1761276103973.js";import"./@vueuse.wtfleElW1761276103973.js";import"./glsl-tokenizer.D6vDr73b1761276103973.js";import"./@amap.fjyZdsU91761276103973.js";import"./glsl-token-descope.DZ_6fK_C1761276103973.js";import"./glsl-token-depth.Duvdnvlt1761276103973.js";import"./glsl-token-scope.BdCfdvWe1761276103973.js";import"./glsl-token-properties.DKXemF9b1761276103973.js";import"./glsl-token-assignments.Ctx_yUgS1761276103973.js";import"./glsl-token-string.Dcid9Vdn1761276103973.js";import"./glsl-token-functions.BQlKpBDG1761276103973.js";import"./oimophysics.CfVKSiAm1761276103973.js";import"./dither.glsl.tNAdkJUa1761276103973.js";import"./Reflector.CqqiY7381761276103973.js";import"./vite-plugin-qiankun.B06WoCqG1761276103973.js";import"./utils.CNife3_q1761276103973.js";import"./object-hash.1qNYTrnD1761276103973.js";import"./jszip.y_yjJ09m1761276103973.js";import"./three-stdlib.tb53t5ki1761276103973.js";const w={position:[0,.5,0]},y=i({__name:"layerMaterial",setup(i){const y=l({clearColor:"#000000",shadows:!0,alpha:!1,antialias:!0,pixelRatio:window.devicePixelRatio,shadowMapType:v,outputColorSpace:b,toneMapping:B,useLegacyLights:!0}),A=l({autoRotate:!0}),x=p({color1:"#000000",alpha1:1,colorA:"#ed08ff",colorB:"#1bff00",alpha2:1.1,near:.87,far:299.77}),M=new e({expanded:!0}),T=M.addFolder({title:"Color层"});T.addBinding(x,"color1",{label:"颜色"}),T.addBinding(x,"alpha1",{label:"alpha",step:.1,min:0,max:2});const C=M.addFolder({title:"Depth层"});return C.addBinding(x,"colorA",{label:"颜色A"}),C.addBinding(x,"colorB",{label:"颜色B"}),C.addBinding(x,"alpha2",{label:"alpha",step:.1,min:0,max:2}),C.addBinding(x,"near",{label:"near",step:.01,min:0,max:1}),C.addBinding(x,"far",{label:"far",step:.01,min:299,max:300}),(e,i)=>{const l=n("TresCanvas");return d(),m(l,_(y,{"window-size":""}),{default:c(()=>[i[1]||(i[1]=h("TresPerspectiveCamera",{position:[5,10,5],fov:30,near:1,far:1e3},null,-1)),u(f(a),j(g(A)),null,16),i[2]||(i[2]=h("TresAmbientLight",{color:"#ffffff",intensity:2},null,-1)),u(f(t),{reflectivity:2.6,showGridHelper:"",position:[0,-.6,0]}),h("TresMesh",w,[i[0]||(i[0]=h("TresSphereGeometry",{args:[1,500,500]},null,-1)),u(f(o),{color:"white",lighting:"physical"},{default:c(()=>[u(f(s),{color:f(x).color1,alpha:f(x).alpha1},null,8,["color","alpha"]),u(f(r),{colorA:f(x).colorA,colorB:f(x).colorB,alpha:f(x).alpha2,mode:"normal",near:f(x).near,far:f(x).far,origin:new k(100,100,100)},null,8,["colorA","colorB","alpha","near","far","origin"])]),_:1})])]),_:1},16)}}});export{y as default};
