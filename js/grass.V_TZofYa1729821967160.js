import{_ as t,at as n,T as e,a0 as o,ai as r}from"./three.x4oqFJNT1729821967160.js";import{U as a,z as i,Y as s,L as c}from"./@tresjs.QjD7q5YC1729821967160.js";import"./index.HfuXMWPf1729821967160.js";import{a as l}from"./simplex-noise.P9JMzoHY1729821967160.js";import{C as u}from"./index.rr4JiF8d1729821967160.js";import{d as f,a4 as p,o as h,E as m,L as v,u as d,r as g,f as x,g as w,j as y,aj as b,ak as _,al as j}from"./@vue.JNsx1iN61729821967160.js";import{_ as z}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.C7tMhrve1729821967160.js";import"./@vueuse.HMG_JnUD1729821967160.js";import"./lamina.yWSbuue71729821967160.js";import"./glsl-tokenizer.kwkA-85M1729821967160.js";import"./@amap.Y4sQVtej1729821967160.js";import"./glsl-token-descope.98vN6Gko1729821967160.js";import"./glsl-token-depth.wHSwzG2S1729821967160.js";import"./glsl-token-scope.Cxbx9H-51729821967160.js";import"./glsl-token-properties.UgwCWhvG1729821967160.js";import"./glsl-token-assignments.z6JHeFtL1729821967160.js";import"./glsl-token-string.piZje__F1729821967160.js";import"./glsl-token-functions.eRxQXCQh1729821967160.js";import"./object-hash.nNsVfdic1729821967160.js";import"./jszip.tCm-hQZR1729821967160.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.p-C5VC6W1729821967160.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.LzHtqdqr1729821967160.js";import"./three-stdlib.7oc1T0_b1729821967160.js";import"./@pmndrs.Bb7jBcbP1729821967160.js";import"./utils.hIFWVIsj1729821967160.js";const M=R;!function(t,n){const e=R,o=E();for(;;)try{if(609232===-parseInt(e(498))/1*(-parseInt(e(489))/2)+-parseInt(e(482))/3+parseInt(e(537))/4+-parseInt(e(501))/5*(-parseInt(e(495))/6)+-parseInt(e(515))/7*(-parseInt(e(493))/8)+parseInt(e(552))/9*(-parseInt(e(504))/10)+-parseInt(e(561))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const I=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){I(this,(function(){const t=R,n=new RegExp(t(557)),e=new RegExp(t(513),"i"),o=D(t(507));n.test(o+"chain")&&e[t(483)](o+t(555))?D():o("0")}))()}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(531)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();A(void 0,(function(){const t=R,n=function(){const t=R;let n;try{n=Function(t(517)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(550)]=n.console||{},o=[t(549),t(544),t(521),t(545),t(541),t(556),t(519)];for(let r=0;r<o[t(547)];r++){const n=A[t(496)][t(512)].bind(A),a=o[r],i=e[a]||n;n[t(497)]=A[t(488)](A),n[t(560)]=i.toString[t(488)](i),e[a]=n}}))();const C=[M(525)],S=[M(534),M(491),M(542),M(529),"attributes-orientation",M(530),"attributes-halfRootAngleSin","attributes-halfRootAngleCos"],k=[M(484)],F=[M(505)];function R(t,n){const e=E();return(R=function(t,n){return e[t-=482]})(t,n)}function E(){const t=["8ElIaQl","attributes","6fTgoYr","constructor","__proto__","542875UOtQVL","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","halfRootAngleCosF32","4930715gdLpFW","normalize","uniforms","789220WZbzzm","side","stretchesF32","init","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","computeVertexNormals","map","call","prototype","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","joints","2471847CPfOIB","TresInstancedBufferGeometry","return (function() ","push","trace","DoubleSide","info","string","Color","stateObject","material","width","alphaMap","sin","attributes-offset","attributes-stretch","apply","TresMesh","convertSRGBToLinear","index","translate","#000f00","1845816SLWKOl","debu","gger","array","exception","attributes-uv","value","warn","error","PlaneGeometry","length","TresGroup","log","console","set","99QQkgjs","action","position","input","table","function *\\( *\\)","while (true) {}","random","toString","2272864LZiXbw","1978785GlnjVZ","test","geometry","TresMeshStandardMaterial","cos","Vector3","bind","2tmxXQN","instances","attributes-position","InstancedBufferAttribute"];return(E=function(){return t})()}const L=f({__name:"grass",props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(r){const s=M;let c,f;const g=([c,f]=p((()=>i({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),c=await c,f(),c),x=r,w=l(Math.random);function y(t,e){const o=t.x*e.w+t.y*e.z-t.z*e.y+t.w*e.x,r=-t.x*e.z+t.y*e.w+t.z*e.x+t.w*e.y,a=t.x*e.y-t.y*e.x+t.z*e.w+t.w*e.z,i=-t.x*e.x-t.y*e.y-t.z*e.z+t.w*e.w;return new n(o,r,a,i)}function b(t,n){var e=2*w(t/50,n/50);return e+=4*w(t/100,n/100),e+=.2*w(t/10,n/10)}const _=function(o,r){const a=R,i=[],s=[],c=[],l=[],u=[];let f=new n,p=new n;const h=-.25;for(let n=0;n<o;n++){const e=Math[a(559)]()*r-r/2,m=Math.random()*r-r/2,v=b(e,m);i[a(518)](e,v,m);let d=Math.PI-Math[a(559)]()*(2*Math.PI);l[a(518)](Math[a(528)](.5*d)),u[a(518)](Math.cos(.5*d));let g=new(t[a(487)])(0,1,0),x=g.x*Math.sin(d/2),w=g.y*Math[a(528)](d/2),_=g.z*Math[a(528)](d/2),j=Math[a(486)](d/2);f[a(551)](x,w,_,j).normalize(),d=.5*Math[a(559)]()+h,g=new(t[a(487)])(1,0,0),x=g.x*Math[a(528)](d/2),w=g.y*Math[a(528)](d/2),_=g.z*Math[a(528)](d/2),j=Math[a(486)](d/2),p.set(x,w,_,j)[a(502)](),f=y(f,p),d=.5*Math[a(559)]()+h,g=new(t[a(487)])(0,0,1),x=g.x*Math[a(528)](d/2),w=g.y*Math[a(528)](d/2),_=g.z*Math[a(528)](d/2),j=Math[a(486)](d/2),p[a(551)](x,w,_,j).normalize(),f=y(f,p),s.push(f.x,f.y,f.z,f.w),n<o/3?c.push(1.8*Math.random()):c[a(518)](Math[a(559)]())}return{offsetsF32:new e(new Float32Array(i),3),orientationsF32:new(t[a(492)])(new Float32Array(s),4),stretchesF32:new(t[a(492)])(new Float32Array(c),1),halfRootAngleCosF32:new(t[a(492)])(new Float32Array(u),1),halfRootAngleSinF32:new(t[a(492)])(new Float32Array(l),1)}}(x[s(490)],x[s(526)]),j=new(t[s(546)])(x.bW,x.bH,1,x[s(514)])[s(535)](0,x.bH/2,0),z=new(t[s(546)])(x[s(526)],x.width,32,32);z.lookAt(new(t[s(487)])(0,1,0));const I=z[s(494)][s(554)];for(let t=0;t<I[s(540)][s(547)];t+=3)I[s(540)][t+1]=b(I[s(540)][t],I[s(540)][t+2]);z[s(494)][s(554)].needsUpdate=!0,z[s(509)]();const A=new(u({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(t[s(523)])(.3,.9,0)[s(533)](),bottomColor:new(t[s(523)])(0,.2,0).convertSRGBToLinear()},s(499),s(508),(t=>{t[s(505)]=o})));A[s(510)]=g[s(510)],A[s(527)]=g.alphaMap,A.toneMapped=!1;const{onLoop:E}=a();return E((({elapsed:t})=>{const n=s;A[n(503)].time[n(543)]=t/4})),(n,e)=>{const o=s;return h(),m(o(548),null,[v(o(532),{material:d(A)},[v(o(516),{index:d(j)[o(534)],"attributes-position":d(j).attributes[o(554)],"attributes-uv":d(j).attributes.uv,"attributes-offset":d(_).offsetsF32,"attributes-orientation":d(_).orientationsF32,"attributes-stretch":d(_)[o(506)],"attributes-halfRootAngleSin":d(_).halfRootAngleSinF32,"attributes-halfRootAngleCos":d(_)[o(500)]},null,8,S)],8,C),v(o(532),{position:[0,0,0],geometry:d(z)},[v(o(485),{color:o(536),side:t[o(520)]},null,8,F)],8,k)])}}});function D(t){function n(t){const e=R;if(typeof t===e(522))return function(t){}[e(496)](e(558)).apply("counter");1!==(""+t/t).length||t%20==0?function(){return!0}[e(496)](e(538)+e(539))[e(511)](e(553)):function(){return!1}[e(496)](e(538)+e(539))[e(531)](e(524)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const O=B;function B(t,n){const e=H();return(B=function(t,n){return e[t-=374]})(t,n)}!function(t,n){const e=B,o=H();for(;;)try{if(846273===parseInt(e(387))/1*(parseInt(e(407))/2)+parseInt(e(389))/3*(parseInt(e(403))/4)+-parseInt(e(390))/5*(parseInt(e(408))/6)+parseInt(e(395))/7*(parseInt(e(404))/8)+-parseInt(e(394))/9+-parseInt(e(376))/10+-parseInt(e(397))/11*(parseInt(e(382))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const T=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[B(391)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function H(){const t=["test","2442360IWpAEb","call","__proto__","log","error","1367851ESGjIb","info","10773BYraVn","710oStyHM","apply","return (function() ","bind","6156504mwScxn","14lEvZHk","gger","77NjndEp","action","init","constructor","prototype","exception","1732duamsW","6397472HzkBVk","table","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","2MstPww","27984ewZsfF","input",'{}.constructor("return this")( )',"debu","toString","console","9047950dSOtCu","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","string","grass","length"];return(H=function(){return t})()}!function(){T(this,(function(){const t=B,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(377),"i"),o=V(t(399));n[t(381)](o+"chain")&&e[t(381)](o+t(409))?V():o("0")}))()}();const P=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[B(391)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();P(void 0,(function(){const t=B,n=function(){const t=B;let n;try{n=Function(t(392)+t(410)+");")()}catch(e){n=window}return n}(),e=n[t(375)]=n[t(375)]||{},o=[t(385),"warn",t(388),t(386),t(402),t(405),"trace"];for(let r=0;r<o.length;r++){const n=P[t(400)][t(401)][t(393)](P),a=o[r],i=e[a]||n;n[t(384)]=P[t(393)](P),n[t(374)]=i[t(374)][t(393)](i),e[a]=n}}))();const G=v("TresPerspectiveCamera",{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1),U=f({__name:O(379),setup(t){const n=g({alpha:!0,toneMapping:r,windowSize:!0,clearColor:6710886}),e=g({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=B;return h(),x(d(c),b(_(n)),{default:w((()=>[G,y(d(s),b(_(e)),null,16),(h(),x(j,null,{default:w((()=>[y(L)])),_:1})),(h(),x(j,null,{default:w((()=>[y(d(z),{texture:r(406)})])),_:1}))])),_:1},16)}}});function V(t){function n(t){const e=B;if(typeof t===e(378))return function(t){}[e(400)]("while (true) {}").apply("counter");1!==(""+t/t)[e(380)]||t%20==0?function(){return!0}[e(400)](e(411)+e(396))[e(383)](e(398)):function(){return!1}[e(400)](e(411)+e(396)).apply("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{U as default};
