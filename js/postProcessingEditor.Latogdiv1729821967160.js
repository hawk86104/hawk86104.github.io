import{p as t,U as n,z as e,Y as o}from"./@tresjs.QjD7q5YC1729821967160.js";import{_ as r,at as a,k as s,bf as i,cr as c}from"./three.x4oqFJNT1729821967160.js";import{P as l}from"./tweakpane.yHWGBmom1729821967160.js";import{d as u,a4 as v,e as f,o as p,f as d,g,L as m,j as x,aj as h,ak as y,u as I,al as b,m as _}from"./@vue.JNsx1iN61729821967160.js";import{_ as S}from"./@fesjs.RBYJGevJ1729821967160.js";import"./@vueuse.HMG_JnUD1729821967160.js";import"./vue-router.x5Kg4cip1729821967160.js";import"./lodash-es.kYt-_xTG1729821967160.js";import"./@qlin.yHhFDldE1729821967160.js";import"./pinia.hn32Nk6P1729821967160.js";import"./@floating-ui.BPbuo5Gx1729821967160.js";import"./@juggle.7yjBMqoW1729821967160.js";function U(){const t=["constructor","Vector3","test","warn","get","name","error","onload","v3v","stateObject","__proto__","onerror","Vector2","gger","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","1840660fQIxvr","string","exec","object","Matrix3","81380QAJiJd","isArray","onabort","init","message","responseText","bind","9IJzxKK","value","hasOwnProperty","WagnerLoadShaderException","70vIUgMV","action","send","59562NbyZpF","call","length",'{}.constructor("return this")( )',"1770181bpFYjT","lastIndex","Matrix2","Vector4","debu","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","type","function *\\( *\\)","208284EtnZxk","open","index","apply","console","toString","ShaderMaterial","1572272BZXKPL","709644smpUtU","Matrix4","counter","input","trace","9istvLk",'Shader "',"Texture","exception","22VbSdTJ","chain","\" couldn't be loaded."];return(U=function(){return t})()}!function(t,n){const e=E,o=U();for(;;)try{if(129066===parseInt(e(366))/1+parseInt(e(406))/2*(-parseInt(e(379))/3)+-parseInt(e(374))/4+-parseInt(e(417))/5*(-parseInt(e(354))/6)+parseInt(e(358))/7+parseInt(e(373))/8*(parseInt(e(413))/9)+parseInt(e(401))/10*(-parseInt(e(383))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const w=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[E(369)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){w(this,(function(){const t=E,n=new RegExp(t(365)),e=new RegExp(t(363),"i"),o=M(t(409));n[t(388)](o+t(384))&&e[t(388)](o+t(377))?M():o("0")}))()}();const P=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[E(369)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();P(void 0,(function(){const t=E,n=function(){const t=E;let n;try{n=Function("return (function() "+t(357)+");")()}catch(e){n=window}return n}(),e=n[t(370)]=n[t(370)]||{},o=["log",t(389),"info",t(392),t(382),"table",t(378)];for(let r=0;r<o[t(356)];r++){const n=P[t(386)].prototype.bind(P),a=o[r],s=e[a]||n;n[t(396)]=P[t(412)](P),n[t(371)]=s[t(371)][t(412)](s),e[a]=n}}))();function D(t,n,e){const o=E;if(typeof t!==o(404)||null===t)return t;const r=Array[o(407)](t)?[]:{};for(const a in t)t[o(415)](a)&&(r[a]=D(t[a])),a==n&&(r[n]=e);return r}function E(t,n){const e=U();return(E=function(t,n){return e[t-=352]})(t,n)}function M(t){function n(t){const e=E;if(typeof t===e(402))return function(t){}[e(386)]("while (true) {}").apply(e(376));1!==(""+t/t)[e(356)]||t%20==0?function(){return!0}[e(386)](e(362)+"gger")[e(355)](e(352)):function(){return!1}[e(386)]("debu"+e(399)).apply(e(395)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const A=L;function L(t,n){const e=T();return(L=function(t,n){return e[t-=209]})(t,n)}!function(t,n){const e=L,o=T();for(;;)try{if(144563===parseInt(e(274))/1+parseInt(e(231))/2+parseInt(e(218))/3*(parseInt(e(284))/4)+-parseInt(e(248))/5*(parseInt(e(233))/6)+-parseInt(e(296))/7*(parseInt(e(234))/8)+parseInt(e(211))/9*(-parseInt(e(268))/10)+parseInt(e(299))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(242)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){C(this,(function(){const t=L,n=new RegExp(t(250)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=N(t(226));n[t(266)](o+"chain")&&e.test(o+t(271))?N():o("0")}))()}();const F=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();F(void 0,(function(){const t=L;let n;try{n=Function(t(213)+'{}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(283)]=n[t(283)]||{},o=[t(308),"warn",t(309),t(251),t(230),t(312),t(288)];for(let a=0;a<o.length;a++){const n=F[t(253)][t(261)][t(212)](F),r=o[a],s=e[r]||n;n.__proto__=F.bind(F),n.toString=s.toString[t(212)](s),e[r]=n}}))();class z{constructor(t,n){const e=L;this[e(229)]=1,this[e(272)]=1,this[e(235)]=n||{},this[e(245)]=this.settings[e(245)]||!1,this[e(262)]=t,this.copyPass=this[e(215)](this[e(235)]),this.scene=new(r[e(209)]),this[e(289)]=new(r[e(295)])(new(r[e(224)])(1,1),new(r[e(292)])),this[e(260)].add(this[e(289)]),this[e(265)]=new(r[e(238)])(1,1,1,1,-1e4,1e4),this[e(310)]=new(r[e(241)])(1,1,{minFilter:void 0!==this[e(235)][e(281)]?this[e(235)][e(281)]:r[e(214)],magFilter:void 0!==this[e(235)][e(273)]?this[e(235)][e(273)]:r[e(214)],wrapS:void 0!==this[e(235)].wrapS?this.settings[e(305)]:r[e(221)],wrapT:void 0!==this[e(235)][e(254)]?this.settings[e(254)]:i,format:this[e(245)]?r[e(223)]:r[e(225)],type:void 0!==this[e(235)][e(237)]?this[e(235)].type:r[e(276)],stencilBuffer:void 0===this[e(235)].stencilBuffer||this[e(235)][e(239)]}),this[e(270)]=this[e(310)][e(304)](),this[e(314)]=Date[e(227)](),this[e(302)]={},this[e(298)]={passItems:[],passes:[]}}[A(228)](t,n,e,o){const r=A;this.loadShadervf(n);const a={shaderName:t,params:e,uuid:o,shader:this[r(291)]};this.Stack.passItems[r(220)](a)}[A(287)](t){const n=A;for(let e=this[n(298)][n(297)][n(277)]-1;e>=0;e--)this[n(298)][n(297)][e].uuid===parseInt(t)&&this[n(298)][n(297)][n(267)](e,1);console[n(308)](this[n(298)].passItems)}[A(215)](){const t=A;this[t(217)][t(249)](this);return this.loadShadervf("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[A(263)](t){const n=A,e=n(246);return this[n(291)]=function(t,n){const e=E,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,i=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,c={sampler2D:{type:"t",value:()=>new(r[E(381)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[E(398)])},vec3:{type:"v3",value:()=>new(r[E(387)])},vec4:{type:"v4",value:()=>new a},bvec2:{type:"v2",value:()=>new s},bvec3:{type:"v3",value:()=>new(r[E(387)])},bvec4:{type:"v4",value:()=>new(r[E(361)])},ivec2:{type:"v2",value:()=>new(r[E(398)])},ivec3:{type:"v3",value:()=>new(r[E(387)])},ivec4:{type:"v4",value:()=>new(r[E(361)])},mat2:{type:"v2",value:()=>new(r[E(360)])},mat3:{type:"v3",value:()=>new(r[E(405)])},mat4:{type:"v4",value:()=>new(r[E(375)])}},l={float:{type:"fv",value:()=>[]},vec3:{type:e(394),value:()=>[]}};let u;const v={resolution:{type:"v2",value:new(r[e(398)])(1,1),default:!0},time:{type:"f",value:Date.now(),default:!0},tInput:{type:"t",value:new(r[e(381)]),default:!0}};let f,p;for(;null!==(u=o[e(403)](n));)u[e(368)]===o.lastIndex&&o[e(359)]++,f=u[1],p=u[2],v[p]={type:c[f].type,value:c[f][e(414)]()};for(;null!==(u=i[e(403)](n));)u[e(368)]===o[e(359)]&&o[e(359)]++,f=u[1],p=u[2],u[3],v[p]={type:l[f][e(364)],value:l[f][e(414)]()};return new(r[e(372)])({uniforms:v,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(291)]}[A(217)](t){const n=A;this[n(291)]=null,this[n(278)]={}}[A(280)](){const t=A;this[t(301)]=this[t(310)],this[t(279)]=this[t(270)]}[A(256)](t,n){const e=A,o=window[e(282)],r=window.innerHeight;t.setSize(1*o,1*r),n.projectionMatrix[e(244)](70,o/r,n[e(255)],n.far),this[e(275)](o,r);return this.getOfflineTexture(o,r,!0)}[A(275)](t,n){const e=A;this.width=t,this.height=n,this.camera[e(303)][e(232)](t/-2,t/2,n/2,n/-2,this[e(265)].near,this[e(265)][e(264)]),this[e(289)][e(210)].set(t,n,1),this[e(310)][e(275)](t,n),this[e(270)][e(275)](t,n)}getOfflineTexture(t,n,e){const o=A;return new(r[o(241)])(t,n,{minFilter:r[o(214)],magFilter:r[o(214)],format:e?r[o(223)]:r[o(225)]})}[A(252)](t,n,e,o){const r=A;this[r(262)].setRenderTarget(this[r(279)]),this[r(262)].render(t,n),o||this[r(269)]()}[A(269)](){const t=A,n=this[t(279)];this[t(279)]=this[t(301)],this[t(301)]=n}[A(243)](){const t=A;for(let n=0;n<this.Stack.passItems.length;n++){const e=this[t(298)][t(297)][n].shader,o=this[t(298)][t(297)][n].params;if(this[t(262)].setRenderTarget(this[t(279)]),e instanceof r[t(306)]){this.quad[t(258)]=e,this[t(289)][t(258)][t(240)][t(313)][t(286)]=this[t(301)].texture,this.quad[t(258)][t(240)].resolution[t(286)].set(this[t(229)],this.height),this.quad.material[t(240)][t(259)][t(286)]=.001*(Date[t(227)]()-this[t(314)]);for(const n in o)this.quad.material[t(240)][n][t(286)]=o[n];this[t(262)][t(252)](this[t(260)],this[t(265)]),this[t(269)]()}}}[A(257)](t,n){const e=A;this[e(262)][e(294)](null),this[e(289)][e(258)]=this[e(300)],this[e(289)][e(258)][e(240)].tInput.value=this[e(301)][e(311)],this.quad.material[e(240)][e(285)][e(286)][e(290)](this[e(229)],this.height),this[e(262)][e(252)](this[e(260)],this[e(265)])}}function T(){const t=["height","magFilter","179168RwjDDX","setSize","UnsignedByteType","length","params","write","Reset","minFilter","innerWidth","console","40036DpaDEg","resolution","value","removePass","trace","quad","set","shader","MeshBasicMaterial","gger","setRenderTarget","Mesh","1296491UbNxce","passItems","Stack","2640693pIIDaw","copyPass","read","passes","projectionMatrix","clone","wrapS","ShaderMaterial","while (true) {}","log","info","front","texture","table","tInput","startTime","Scene","scale","80820erQtqq","bind","return (function() ","LinearFilter","CopyPass","debu","Pass","33uPnSrT","stateObject","push","ClampToEdgeWrapping","counter","RGBAFormat","PlaneGeometry","RGBFormat","init","now","addPass","width","exception","68214imqQWn","makeOrthographic","6pYngUH","8dkSUPZ","settings","action","type","OrthographicCamera","stencilBuffer","uniforms","WebGLRenderTarget","apply","pass","makePerspective","useRGBA","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","string","943805oHJebe","call","function *\\( *\\)","error","render","constructor","wrapT","near","onWindowResize","toScreen","material","time","scene","prototype","renderer","loadShadervf","far","camera","test","splice","50tHcxgh","swapBuffers","back","input"];return(T=function(){return t})()}function N(t){function n(t){const e=L;if(typeof t===e(247))return function(t){}[e(253)](e(307))[e(242)](e(222));1!==(""+t/t).length||t%20==0?function(){return!0}[e(253)](e(216)+"gger").call(e(236)):function(){return!1}[e(253)](e(216)+e(293))[e(242)](e(219)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const R="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",B=k;!function(t,n){const e=k,o=V();for(;;)try{if(164482===parseInt(e(379))/1*(-parseInt(e(387))/2)+parseInt(e(378))/3+parseInt(e(365))/4+parseInt(e(393))/5+parseInt(e(350))/6+-parseInt(e(382))/7*(-parseInt(e(340))/8)+parseInt(e(347))/9*(-parseInt(e(327))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[k(384)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){G(this,(function(){const t=k,n=new RegExp(t(348)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=O(t(396));n[t(385)](o+t(370))&&e[t(385)](o+"input")?O():o("0")}))()}();const j=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[k(384)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function k(t,n){const e=V();return(k=function(t,n){return e[t-=318]})(t,n)}function V(){const t=["BoxGeometry","constructor","debu","toScreen","info","DOTPass","return (function() ","call","关闭通道","plugins/postProcessing/image/1324-normal.jpg","8SrZSRC","postProcessing",'{}.constructor("return this")( )',"table","VIGNETTE1Pass","while (true) {}","action","532233TMmpOP","function *\\( *\\)","push","515196MrQqiv","CGAPass","material","title","log","trace","values","target","FXAAPass","counter","plugins/postProcessing/image/1324.jpg","console","移除~","random","MeshPhongMaterial","599504wVdJXM","castShadow","value","prototype","change","chain","toString","bind","Mesh","addBlade","add","gger","dispose","870204TxUYNo","1jHvkke","Vector2","click","1463014YCSkgB","string","apply","test","mergeGeometries","586364gfPqut","后处理类型","pass","InvertPass","autoClearColor","translate","388370jGJFoc","Reset","render","init","stateObject","warn","DENOISEPass","addFolder","SNOISEPass","map","BufferGeometry","SEPIAPass","CIRCULARPass","receiveShadow","__proto__","text","addButton","label","length","onWindowResize","addPass","60MkveWB","SOBELPass","exception"];return(V=function(){return t})()}j(void 0,(function(){const t=k;let n;try{n=Function(t(336)+t(342)+");")()}catch(r){n=window}const e=n[t(361)]=n[t(361)]||{},o=[t(354),t(398),t(334),"error",t(329),t(343),t(355)];for(let a=0;a<o[t(324)];a++){const n=j[t(331)][t(368)][t(372)](j),r=o[a],s=e[r]||n;n[t(320)]=j[t(372)](j),n[t(371)]=s.toString.bind(s),e[r]=n}}))();function O(t){function n(t){const e=k;if(typeof t===e(383))return function(t){}[e(331)](e(345))[e(384)](e(359));1!==(""+t/t).length||t%20==0?function(){return!0}[e(331)](e(332)+e(376))[e(337)](e(346)):function(){return!1}[e(331)](e(332)+e(376))[e(384)](e(397)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const H=S(u({__name:B(341),async setup(o){const a=B;let s,i;const{camera:u,renderer:f,scene:p,sizes:d}=t();for(var g=new(r[a(403)]),m=[],x=0;x<100;x++){var h=new(r[a(330)])(100,100,100);h[a(392)](1500*Math[a(363)](),1500*Math[a(363)](),1500*Math[a(363)]()),m[a(349)](h)}g=c[a(386)](m);const y=([s,i]=v((()=>e({map:a(360)}))),s=await s,i(),s),I=([s,i]=v((()=>e({map:a(339)}))),s=await s,i(),s);var b=new(r[a(364)])({map:y[a(402)],normalMap:I[a(402)],normalScale:new(r[a(380)])(.8,-.8),shininess:100}),_=new(r[a(373)])(g,b);_[a(366)]=!0,_[a(319)]=!0,p[a(367)][a(375)](_);const S=new z(f.value,{useRGBA:!0}),U=new l;let w=null,P=[{text:a(390),value:{InvertPass:R}},{text:a(358),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:a(404),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:a(401),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:"BOXBLURPass",value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:a(399),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:a(351),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:I[a(402)]}}},{text:a(328),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:"RGBPass",value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:a(335),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:a(318),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:"POISSONPass",value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:a(344),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:"VIGNETTE2Pass",value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:"FREICHENPass",value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:"TOONPass",value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],E="InvertPass",M=R,A=null;U[a(374)]({view:"list",label:a(388),options:P,value:""}).on(a(369),(t=>{w=t.value}));const L=U.addButton({title:"新增",label:"新增通道"});let C=0;L.on(a(381),(t=>{const n=a;E=Object.keys(w)[0],M=Object[n(356)](w)[0],A=Object.values(w)[1];let e=C++,o=U[n(400)]({title:E});for(const a in A){let t=A[a];o[n(374)]({view:n(321),label:a,parse:t=>String(t),value:t})}o[n(322)]({title:n(362)+e,label:n(338)}).on(n(381),(t=>{const e=n;let o=t[e(357)][e(353)].split("~")[1];S.removePass(o)})).on("click",(()=>{o[n(377)]()}));let r=D(A,t[n(357)][n(323)],t[n(367)]);S[n(326)](E,M,r,e)})),S[a(325)](f[a(367)],u[a(367)]);const{onLoop:F}=n();return F((({delta:t})=>{const n=a;_&&(f.value[n(391)]=!0,S[n(394)](),_[n(352)]=b,S[n(395)](p[n(367)],u[n(367)]),S[n(389)](),S[n(333)](p[n(367)],u[n(367)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]);function W(){const t=["#ffffff","bind","postProcessingEditor","TresPerspectiveCamera","5378568XRHYpY","TresCanvas","prototype","error","1687dRNIrR","table","TresAmbientLight","__proto__","chain","toString","init","703374IOmVvj","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","5191045Ooiaci","constructor","length","985556mWDwco","debu","8SyRxEf","TresDirectionalLight","gger","apply","1306618wUcBcK","#000000","17136ImpGIY","info","39286593kRkDEg","while (true) {}","log","string","console","call","test","manual","input"];return(W=function(){return t})()}const X=q;function q(t,n){const e=W();return(q=function(t,n){return e[t-=320]})(t,n)}!function(t,n){const e=q,o=W();for(;;)try{if(852104===-parseInt(e(334))/1+parseInt(e(330))/2*(-parseInt(e(323))/3)+-parseInt(e(328))/4+-parseInt(e(325))/5+parseInt(e(336))/6*(parseInt(e(355))/7)+-parseInt(e(351))/8+parseInt(e(338))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(333)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){Z(this,(function(){const t=q,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(324),"i"),o=tt(t(322));n[t(344)](o+t(320))&&e[t(344)](o+t(346))?tt():o("0")}))()}();const Y=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(333)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();Y(void 0,(function(){const t=q,n=function(){let t;try{t=Function('return (function() {}.constructor("return this")( ));')()}catch(n){t=window}return t}(),e=n[t(342)]=n[t(342)]||{},o=[t(340),"warn",t(337),t(354),"exception",t(356),"trace"];for(let r=0;r<o.length;r++){const n=Y[t(326)][t(353)][t(348)](Y),a=o[r],s=e[a]||n;n[t(358)]=Y[t(348)](Y),n[t(321)]=s[t(321)].bind(s),e[a]=n}}))();const $={ref:"perspectiveCameraRef",position:[600,850,-1500],fov:45,near:.1,far:1e5},J=m(X(357),{color:"#ffffff",intensity:2},null,-1),Q=m(X(331),{position:[100,100,0],intensity:2,color:X(347)},null,-1),K=u({__name:X(349),setup(t){const e=X,r={clearColor:e(335),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(345)},a={autoRotate:!0,enableDamping:!0},{onLoop:s}=n();return s((({delta:t})=>{})),(t,n)=>{const s=e,i=f(s(352));return p(),d(i,_(r,{"window-size":""}),{default:g((()=>[m(s(350),$,null,512),x(I(o),h(y(a)),null,16),J,Q,(p(),d(b,null,{default:g((()=>[x(H)])),_:1}))])),_:1},16)}}});function tt(t){function n(t){const e=q;if(typeof t===e(341))return function(t){}[e(326)](e(339)).apply("counter");1!==(""+t/t)[e(327)]||t%20==0?function(){return!0}.constructor(e(329)+e(332))[e(343)]("action"):function(){return!1}[e(326)](e(329)+"gger")[e(333)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{K as default};
