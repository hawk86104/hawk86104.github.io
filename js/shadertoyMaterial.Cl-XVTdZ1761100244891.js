import{K as e}from"./@tresjs.DqJWjmrH1761100244891.js";import{a6 as n,ar as a,f as o,d as i,ak as t,o as r,p as s,cP as l}from"./three.DvmzhRS91761100244891.js";import"./vanilla.esm.5.5.0.CsbunUBT1761100244891.js";import{u as c}from"./utils.pnKaL4Sf1761100244891.js";import{B as v}from"./three-custom-shader-material.BR24gUv-1761100244891.js";import{P as u}from"./tweakpane.CqZAnw7f1761100244891.js";import{d as m,ac as p,r as f,q as d,g,b as h,o as y,e as C,I as x,h as w,u as b,a9 as T,aa as j,m as R}from"./@vue.CKlgtJke1761100244891.js";import"./postprocessing.CYU4Fj-U1761100244891.js";import"./@vueuse.mZcBai3M1761100244891.js";import"./object-hash.zo7S6bgL1761100244891.js";import"./@amap.fjyZdsU91761100244891.js";import"./jszip.DTlig5CR1761100244891.js";import"./Resource.mX5inOAT1761100244891.js";class U{constructor(e,o){const i=U.replaceVariable(e),t=new v({baseMaterial:a,vertexShader:"\t\n            varying vec2 vUv;\n            void main() {\n                csm_Position = position * vec3(1.0);\n                vUv = uv;\n            } ",fragmentShader:i,side:n,uniforms:o.material.uniforms});this.material=t,console.log(this.material)}static replaceVariable(e){if(/iTime|iTimeDelta/g.test(e="varying vec2 vUv;\n"+e)){let n=e.split("varying vec2 vUv;\n");e=(e="varying vec2 vUv;\nuniform float utime;\n"+n[1]).replace(/iTime|iTimeDelta/g,"utime")}if(/iResolution\.[a-zA-Z_]+/g.test(e)){let n=e.split("varying vec2 vUv;\n");e=(e=(e="varying vec2 vUv;\nuniform vec2 uresolution;\n"+n[1]).replace(/iResolution\.[a-zA-Z_]+/g,"1.")).replace(/iResolution/g,"1.")}if(/iChannel0|iChannel1|iChannel2|iChannel3/g.test(e)){let n=e.split("varying vec2 vUv;\n");e=(e="varying vec2 vUv;\nuniform sampler2D  utexture;\n"+n[1]).replace(/iChannel0|iChannel1|iChannel2|iChannel3/g,"utexture")}return e.replace(/iMouse/g,"umouse"),e.replace(/void mainImage\( out vec4 fragColor, in vec2 fragCoord \)/g,"void main()").replace(/fragColor/g,"csm_DiffuseColor").replace(/fragCoord/g,"vUv")}}const z={ref:"perspectiveCameraRef",position:[300,250,-122],fov:45,near:1,far:1e4},P=["object","side"],D=m({__name:"shadertoyMaterial",async setup(a){let v,m;const D={clearColor:"#000000",shadows:!0,alpha:!1,useLegacyLights:!0},K={autoRotate:!0,enableDamping:!0},_=new u({title:"参数"});let k=([v,m]=p(()=>c("./plugins/earthSample/image/earthA/moon_ring.png")),v=await v,m(),v),S=new o,Y=f({material:{uniforms:{utime:{value:0},uresolution:{value:new i(40,40)},utexture:{value:k}}}}),I=new t(100,100,100),A=new U("/* \n    Kishimisu's video: https://youtu.be/f4s1h2YETNY\n    Kishumisu's shader link: https://www.shadertoy.com/view/mtyGWy\n*/\n\nvec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    for (float i = 0.0; i < 5.0; i++) {\n        uv = fract(uv * 1.5) - 0.5;\n\n        float d = length(uv) * exp(-length(uv0));\n\n        vec3 col = palette(length(uv0) + i*.4 + iTime*.4);\n\n        d = sin(d*8. + iTime)/8.;\n        d = abs(d);\n\n        d = pow(0.01 / d, 1.2);\n\n        finalColor += col * d;\n    }\n        \n    fragColor = vec4(finalColor, 1.0);\n}",Y),B=new r(I,A.material);_.addBlade({view:"list",label:"shadertoy在线地址",parse:e=>String(e),options:[{text:"1",value:"/* \n    Kishimisu's video: https://youtu.be/f4s1h2YETNY\n    Kishumisu's shader link: https://www.shadertoy.com/view/mtyGWy\n*/\n\nvec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    for (float i = 0.0; i < 5.0; i++) {\n        uv = fract(uv * 1.5) - 0.5;\n\n        float d = length(uv) * exp(-length(uv0));\n\n        vec3 col = palette(length(uv0) + i*.4 + iTime*.4);\n\n        d = sin(d*8. + iTime)/8.;\n        d = abs(d);\n\n        d = pow(0.01 / d, 1.2);\n\n        finalColor += col * d;\n    }\n        \n    fragColor = vec4(finalColor, 1.0);\n}"},{text:"2",value:"precision highp float;\n\n\nmat2 rot(float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c,s,-s,c);\n}\n\nconst float pi = acos(-1.0);\nconst float pi2 = pi*2.0;\n\nvec2 pmod(vec2 p, float r) {\n    float a = atan(p.x, p.y) + pi/r;\n    float n = pi2 / r;\n    a = floor(a/n)*n;\n    return p*rot(-a);\n}\n\nfloat box( vec3 p, vec3 b ) {\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat ifsBox(vec3 p) {\n    for (int i=0; i<5; i++) {\n        p = abs(p) - 1.0;\n        p.xy *= rot(iTime*0.3);\n        p.xz *= rot(iTime*0.1);\n    }\n    p.xz *= rot(iTime);\n    return box(p, vec3(0.4,0.8,0.3));\n}\n\nfloat map(vec3 p, vec3 cPos) {\n    vec3 p1 = p;\n    p1.x = mod(p1.x-5., 10.) - 5.;\n    p1.y = mod(p1.y-5., 10.) - 5.;\n    p1.z = mod(p1.z, 16.)-8.;\n    p1.xy = pmod(p1.xy, 5.0);\n    return ifsBox(p1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n\n    vec3 cPos = vec3(0.0,0.0, -3.0 * iTime);\n    // vec3 cPos = vec3(0.3*sin(iTime*0.8), 0.4*cos(iTime*0.3), -6.0 * iTime);\n    vec3 cDir = normalize(vec3(0.0, 0.0, -1.0));\n    vec3 cUp  = vec3(sin(iTime), 1.0, 0.0);\n    vec3 cSide = cross(cDir, cUp);\n\n    vec3 ray = normalize(cSide * p.x + cUp * p.y + cDir);\n\n    // Phantom Mode https://www.shadertoy.com/view/MtScWW by aiekick\n    float acc = 0.0;\n    float acc2 = 0.0;\n    float t = 0.0;\n    for (int i = 0; i < 99; i++) {\n        vec3 pos = cPos + ray * t;\n        float dist = map(pos, cPos);\n        dist = max(abs(dist), 0.02);\n        float a = exp(-dist*3.0);\n        if (mod(length(pos)+24.0*iTime, 30.0) < 3.0) {\n            a *= 2.0;\n            acc2 += a;\n        }\n        acc += a;\n        t += dist * 0.5;\n    }\n\n    vec3 col = vec3(acc * 0.01, acc * 0.011 + acc2*0.002, acc * 0.012+ acc2*0.005);\n    fragColor = vec4(col, 1.0 - t * 0.03);\n}"}],value:"/* \n    Kishimisu's video: https://youtu.be/f4s1h2YETNY\n    Kishumisu's shader link: https://www.shadertoy.com/view/mtyGWy\n*/\n\nvec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    for (float i = 0.0; i < 5.0; i++) {\n        uv = fract(uv * 1.5) - 0.5;\n\n        float d = length(uv) * exp(-length(uv0));\n\n        vec3 col = palette(length(uv0) + i*.4 + iTime*.4);\n\n        d = sin(d*8. + iTime)/8.;\n        d = abs(d);\n\n        d = pow(0.01 / d, 1.2);\n\n        finalColor += col * d;\n    }\n        \n    fragColor = vec4(finalColor, 1.0);\n}"}).on("change",e=>{A=new U(e.value,Y),B.material=A.material,S.add(B),W(S,I)});let G=new t(100,100,100),L=new s(100,100),M=new l(100,10,100,16);_.addBlade({view:"list",label:"几何体",options:[{text:"BOX",value:G},{text:"Plane",value:L},{text:"TorusKnot",value:M}],value:G}).on("change",e=>{I=e.value,B.geometry=I,S.add(B),W(S,I)});const W=(e,n)=>{e.children[0].geometry.dispose(),e.children[0].geometry=n},E=({delta:e})=>{Y.material.uniforms.utime.value+=10*e};return d(()=>{S.add(B),W(S,I)}),(a,o)=>{const i=g("TresCanvas");return y(),h(i,R(D,{"window-size":"",onLoop:E}),{default:C(()=>[x("TresPerspectiveCamera",z,null,512),w(b(e),T(j(K)),null,16),o[0]||(o[0]=x("TresAmbientLight",{color:"#ffffff"},null,-1)),o[1]||(o[1]=x("TresDirectionalLight",{position:[100,100,0],intensity:.5,color:"#ffffff"},null,-1)),x("primitive",{object:b(S),side:b(n)},null,8,P),o[2]||(o[2]=x("TresAxesHelper",{args:[1e3],position:[0,19,0]},null,-1)),o[3]||(o[3]=x("TresGridHelper",{args:[6e3,100],position:[0,19,0]},null,-1))]),_:1},16)}}});export{D as default};
