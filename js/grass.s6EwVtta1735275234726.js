import{_ as t,C as n,ai as e}from"./three.jpi2UCEx1735275234726.js";import{e as o,b as r,U as a,c as i}from"./@tresjs.fCqPNEAw1735275234726.js";import"./index.yzG_wI0B1735275234726.js";import{a as s}from"./simplex-noise.Yx8GBgKo1735275234726.js";import{C as c}from"./index.Ny6GIji_1735275234726.js";import{d as l,a6 as u,o as f,D as p,J as h,u as m,r as d,f as v,g,j as x,aj as w,ak as y,al as b}from"./@vue.u2cBPEWn1735275234726.js";import{_}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.L8eZhExq1735275234726.js";import"./@vueuse.8jEBPPFT1735275234726.js";import"./lamina.-A-ohvLw1735275234726.js";import"./glsl-tokenizer.AJJjYiq61735275234726.js";import"./@amap.Ndko9EDY1735275234726.js";import"./glsl-token-descope.NcJgLc_41735275234726.js";import"./glsl-token-depth.5iADTwhW1735275234726.js";import"./glsl-token-scope.dtRhJfb81735275234726.js";import"./glsl-token-properties.s2Qs8KoR1735275234726.js";import"./glsl-token-assignments.Oe8FqfYq1735275234726.js";import"./glsl-token-string.FhJM36_31735275234726.js";import"./glsl-token-functions.2qVr5ufc1735275234726.js";import"./object-hash.czWCx2-t1735275234726.js";import"./jszip._AevLh8r1735275234726.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.twMt4AcC1735275234726.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.tEWuzEv61735275234726.js";import"./three-stdlib.FRPXc4iL1735275234726.js";import"./@pmndrs.fIuOSuk41735275234726.js";import"./utils.TMAlopu31735275234726.js";const M=A;function z(){const t=["6397895fEzDbf","halfRootAngleSinF32","cos","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","counter","computeVertexNormals","2PTvOzH","8766232GiKOlC","table","prototype","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","array","geometry","TresMesh","constructor","PlaneGeometry","input","set","attributes-halfRootAngleCos","error","position","Vector4","alphaMap","offsetsF32","#000f00","info","exception","3006QifpDg","bind","InstancedBufferAttribute","attributes","material","apply","console","lookAt","time","halfRootAngleCosF32","instances","__proto__","value","index","5027334fKvpdV","TresGroup","width","gger","12kpWiRf","194420BYmPDP","convertSRGBToLinear","attributes-uv","stretchesF32","string","2152485IhGMkP","map",'{}.constructor("return this")( )',"call","normalize","joints","warn","init","toString","push","TresMeshStandardMaterial","debu","log","sin","orientationsF32","test","uniforms","random","Vector3","side","length","attributes-halfRootAngleSin","1642095ZBcEew","995564XAWRyM","DoubleSide"];return(z=function(){return t})()}!function(t,n){const e=A,o=z();for(;;)try{if(947659===-parseInt(e(356))/1*(parseInt(e(347))/2)+-parseInt(e(324))/3+parseInt(e(395))/4*(-parseInt(e(346))/5)+-parseInt(e(391))/6+-parseInt(e(349))/7+-parseInt(e(357))/8+-parseInt(e(377))/9*(-parseInt(e(396))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const j=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[A(382)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function A(t,n){const e=z();return(A=function(t,n){return e[t-=322]})(t,n)}!function(){j(this,(function(){const t=A,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(353),"i"),o=E(t(331));n[t(339)](o+"chain")&&e.test(o+t(366))?E():o("0")}))()}();const I=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();I(void 0,(function(){const t=A;let n;try{n=Function("return (function() "+t(326)+");")()}catch(r){n=window}const e=n[t(383)]=n[t(383)]||{},o=[t(336),t(330),t(375),t(369),t(376),t(358),"trace"];for(let a=0;a<o[t(344)];a++){const n=I[t(364)][t(359)][t(378)](I),r=o[a],i=e[r]||n;n[t(388)]=I[t(378)](I),n[t(332)]=i[t(332)].bind(i),e[r]=n}}))();const C=[M(381)],k=["index","attributes-position",M(398),"attributes-offset","attributes-orientation","attributes-stretch",M(345),M(368)],D=[M(362)],R=[M(343)],S=l({__name:"grass",props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(e){const a=M;let i,l;const d=([i,l]=u((()=>r({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),i=await i,l(),i),v=e,g=s(Math[a(341)]);function x(n,e){const o=a,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,i=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,s=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,c=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(371)])(r,i,s,c)}function w(t,n){var e=2*g(t/50,n/50);return e+=4*g(t/100,n/100),e+=.2*g(t/10,n/10)}const y=function(n,e){const o=a,r=[],i=[],s=[],c=[],l=[];let u=new(t[o(371)]),f=new(t[o(371)]);const p=-.25;for(let a=0;a<n;a++){const h=Math.random()*e-e/2,m=Math[o(341)]()*e-e/2,d=w(h,m);r[o(333)](h,d,m);let v=Math.PI-Math.random()*(2*Math.PI);c.push(Math[o(337)](.5*v)),l.push(Math.cos(.5*v));let g=new(t[o(342)])(0,1,0),y=g.x*Math[o(337)](v/2),b=g.y*Math.sin(v/2),_=g.z*Math.sin(v/2),M=Math[o(351)](v/2);u[o(367)](y,b,_,M)[o(328)](),v=.5*Math[o(341)]()+p,g=new(t[o(342)])(1,0,0),y=g.x*Math[o(337)](v/2),b=g.y*Math[o(337)](v/2),_=g.z*Math[o(337)](v/2),M=Math[o(351)](v/2),f[o(367)](y,b,_,M)[o(328)](),u=x(u,f),v=.5*Math[o(341)]()+p,g=new(t[o(342)])(0,0,1),y=g.x*Math[o(337)](v/2),b=g.y*Math[o(337)](v/2),_=g.z*Math[o(337)](v/2),M=Math[o(351)](v/2),f[o(367)](y,b,_,M).normalize(),u=x(u,f),i[o(333)](u.x,u.y,u.z,u.w),a<n/3?s[o(333)](1.8*Math[o(341)]()):s.push(Math.random())}return{offsetsF32:new(t[o(379)])(new Float32Array(r),3),orientationsF32:new(t[o(379)])(new Float32Array(i),4),stretchesF32:new(t[o(379)])(new Float32Array(s),1),halfRootAngleCosF32:new(t[o(379)])(new Float32Array(l),1),halfRootAngleSinF32:new(t[o(379)])(new Float32Array(c),1)}}(v[a(387)],v.width),b=new(t[a(365)])(v.bW,v.bH,1,v[a(329)]).translate(0,v.bH/2,0),_=new(t[a(365)])(v.width,v[a(393)],32,32);_[a(384)](new(t[a(342)])(0,1,0));const z=_[a(380)][a(370)];for(let t=0;t<z[a(361)][a(344)];t+=3)z[a(361)][t+1]=w(z[a(361)][t],z.array[t+2]);_.attributes[a(370)].needsUpdate=!0,_[a(355)]();const j=new(c({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new n(.3,.9,0)[a(397)](),bottomColor:new n(0,.2,0)[a(397)]()},a(352),a(360),(n=>{const e=a;n.side=t[e(348)]})));j.map=d[a(325)],j.alphaMap=d[a(372)],j.toneMapped=!1;const{onLoop:A}=o();return A((({elapsed:t})=>{const n=a;j[n(340)][n(385)][n(389)]=t/4})),(n,e)=>{const o=a;return f(),p(o(392),null,[h("TresMesh",{material:m(j)},[h("TresInstancedBufferGeometry",{index:m(b)[o(390)],"attributes-position":m(b)[o(380)][o(370)],"attributes-uv":m(b)[o(380)].uv,"attributes-offset":m(y)[o(373)],"attributes-orientation":m(y)[o(338)],"attributes-stretch":m(y)[o(322)],"attributes-halfRootAngleSin":m(y)[o(350)],"attributes-halfRootAngleCos":m(y)[o(386)]},null,8,k)],8,C),h(o(363),{position:[0,0,0],geometry:m(_)},[h(o(334),{color:o(374),side:t[o(348)]},null,8,R)],8,D)])}}});function E(t){function n(t){const e=A;if(typeof t===e(323))return function(t){}.constructor("while (true) {}").apply(e(354));1!==(""+t/t)[e(344)]||t%20==0?function(){return!0}.constructor("debu"+e(394))[e(327)]("action"):function(){return!1}[e(364)](e(335)+e(394))[e(382)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const F=B;!function(t,n){const e=B,o=P();for(;;)try{if(847386===-parseInt(e(491))/1*(parseInt(e(519))/2)+parseInt(e(492))/3+parseInt(e(506))/4*(-parseInt(e(525))/5)+-parseInt(e(512))/6*(parseInt(e(502))/7)+parseInt(e(498))/8+-parseInt(e(486))/9*(-parseInt(e(504))/10)+-parseInt(e(522))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[B(523)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function P(){const t=["string","chain","warn","7WQQppk","stateObject","10299920rnZfZh","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","4GHdLRW","debu","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","__proto__","call","action","2639730CAeltZ","toString","console","TresPerspectiveCamera","init","prototype","grass","22BOWzEs","gger","table","2587321OzJEjg","apply","bind","159975WGYdJo",'{}.constructor("return this")( )',"test","9tShxCh","trace","return (function() ","exception","info","71497mONmlf","3304125lQholw","function *\\( *\\)","counter","length","error","constructor","1677176DLEfEH"];return(P=function(){return t})()}!function(){O(this,(function(){const t=B,n=new RegExp(t(493)),e=new RegExp(t(508),"i"),o=L(t(516));n.test(o+t(500))&&e[t(527)](o+"input")?L():o("0")}))()}();const T=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[B(523)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function B(t,n){const e=P();return(B=function(t,n){return e[t-=486]})(t,n)}T(void 0,(function(){const t=B,n=function(){const t=B;let n;try{n=Function(t(488)+t(526)+");")()}catch(e){n=window}return n}(),e=n[t(514)]=n[t(514)]||{},o=["log",t(501),t(490),t(496),t(489),t(521),t(487)];for(let r=0;r<o[t(495)];r++){const n=T.constructor[t(517)].bind(T),a=o[r],i=e[a]||n;n[t(509)]=T[t(524)](T),n[t(513)]=i.toString[t(524)](i),e[a]=n}}))();const H=l({__name:F(518),setup(t){const n=d({alpha:!0,toneMapping:e,windowSize:!0,clearColor:6710886}),o=d({enableDamping:!0,autoRotate:!1});return(t,e)=>{const r=B;return f(),v(m(i),w(y(n)),{default:g((()=>[e[0]||(e[0]=h(r(515),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),x(m(a),w(y(o)),null,16),(f(),v(b,null,{default:g((()=>[x(S)])),_:1})),(f(),v(b,null,{default:g((()=>[x(m(_),{texture:r(505)})])),_:1}))])),_:1},16)}}});function L(t){function n(t){const e=B;if(typeof t===e(499))return function(t){}[e(497)]("while (true) {}")[e(523)](e(494));1!==(""+t/t)[e(495)]||t%20==0?function(){return!0}.constructor(e(507)+e(520))[e(510)](e(511)):function(){return!1}[e(497)](e(507)+e(520))[e(523)](e(503)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{H as default};
