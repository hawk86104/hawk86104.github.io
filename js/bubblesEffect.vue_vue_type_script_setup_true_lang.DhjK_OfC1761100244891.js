import{F as e,_ as n}from"./@tresjs.DqJWjmrH1761100244891.js";import"./vanilla.esm.5.5.0.CsbunUBT1761100244891.js";import{u as o}from"./utils.pnKaL4Sf1761100244891.js";import{o as t,k as a,cq as i,bJ as l,a6 as r,q as s,b as u,ae as m}from"./three.DvmzhRS91761100244891.js";import{d as c,a as p,q as f,a3 as v,G as b,o as g,I as y,a9 as d,aa as w,u as h}from"./@vue.CKlgtJke1761100244891.js";const _=c({__name:"xRayEffect",props:{model:{},color:{default:"#84ccff"},opacity:{default:1}},setup(s){const u=s,m=p(),c=[];u.model.traverse(e=>{e instanceof t&&(e.geometry.verticesNeedUpdate=!0,c.push(e.geometry))});const h={uniforms:{c:{type:"f",value:1.11},p:{type:"f",value:1},glowColor:{type:"c",value:new a(u.color)},lightningTexture:{type:"t",value:null},offsetY:{type:"f",value:.1},uTime:{type:"f",value:0},uOpacity:{type:"f",value:u.opacity}},vertexShader:"uniform float c;\nuniform float p;\nuniform float uTime;\nvarying float intensity;\nvarying vec2 vUv;\nvoid main(){\n    vUv=uv;\n    vec3 vNormal=normalize(normalMatrix*normal);\n    intensity=pow(c-abs(dot(vNormal,vec3(0,0,1))),p);\n    gl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.);\n}",fragmentShader:"uniform vec3 glowColor;\nuniform sampler2D lightningTexture;\nvarying float intensity;\nvarying vec2 vUv;\nuniform float offsetY;\nuniform float uTime;\nuniform float uOpacity;\n\nvoid main(){\n  vec2 uv=vUv;\n  uv.y+=offsetY;\n  vec3 glow=glowColor*intensity;\n  vec3 color=vec3(step(.1,uv.y)-step(.2,uv.y))-vec3(texture2D(lightningTexture,uv));\n  float alpha=clamp(cos(uTime*3.),.5,1.);\n  gl_FragColor=vec4(glow+color,alpha*uOpacity);\n}",side:r,blending:l,depthWrite:!1};f(async()=>{const e=await o("./plugins/medical/image/brainXRayLight.png");h.uniforms.lightningTexture.value=e,console.log(e)}),h.uniforms.offsetY.value=Math.sin(5);const{camera:_}=e(),{onBeforeRender:z}=n();return z(({delta:e})=>{_.value?.position&&m.value&&(h.uniforms.uTime.value+=e)}),v(()=>{m.value&&(m.value.geometry.dispose(),m.value.geometry=i(c)),u.color&&(h.uniforms.glowColor.value=new a(u.color)),u.opacity&&(h.uniforms.uOpacity.value=u.opacity)}),(e,n)=>(g(),b("TresMesh",{ref_key:"TresMeshRef",ref:m,"render-order":9},[n[0]||(n[0]=y("TresBufferGeometry",null,null,-1)),y("TresShaderMaterial",d(w(h)),null,16)],512))}});const z=c({__name:"bubblesEffect",props:{model:{},color:{default:"#FFF"},opacity:{default:1}},setup(e){const o=e,c=["afective","semantic","episodic","process","amigdala","brainstem","bridge","cerebellum","analitic"],f={};o.model.traverse(e=>{e instanceof t&&c.map(n=>{if(e.name.includes(n)){if(f[n]){const o=[f[n],e.geometry];return f[n]=i(o),f}return f[n]=e.geometry}return[]})});const _=p(),z=new s({uniforms:{glowColor:{type:"c",value:new a(o.color)},uTime:{type:"f",value:0},uSlowTime:{type:"f",value:0},uBubblesUp:{type:"f",value:1},uOpacity:{type:"f",value:o.opacity}},vertexShader:"uniform float p;\nuniform float uTime;\nuniform float uSlowTime;\nuniform float uBubblesUp;\nvarying float intensity;\nattribute vec2 aDelayDuration;\nattribute float size;\nattribute vec4 bubbles;\nvarying float alpha;\n\nfloat easeExpoInOut(float p){\n    return((p*=2.)<1.)?.5*pow(2.,10.*(p-1.)):.5*(2.-pow(2.,-10.*(p-1.)));\n}\n\nvoid main()\n{\n    intensity=.9;\n    vec4 mvPosition=modelViewMatrix*vec4(position,1.);\n    gl_PointSize=size*(300./-mvPosition.z);\n    float m=mod(size,sin(uSlowTime*.12+size));\n    \n    alpha=step(.5,abs(m));\n    if(m>.5&&m<.7){\n        gl_PointSize=.9*size;\n    }\n    if(m>.8){\n        gl_PointSize=.9*size;\n    }\n    \n    gl_Position=projectionMatrix*mvPosition;\n    \n    if(bubbles.w>0.&&bubbles.w<2.&&bubbles.x!=0.&&bubbles.y!=0.){\n        gl_PointSize=size+15.;\n        alpha=clamp(abs(sin(uTime-bubbles.y)),.3,1.);\n        \n        float tProgress=smoothstep(0.,aDelayDuration.x,uBubblesUp);\n        vec3 tranlated=mix(position,bubbles.xyz,tProgress);\n        vec4 bPosition=modelViewMatrix*vec4(tranlated,1.);\n        \n        gl_PointSize=uBubblesUp*gl_PointSize;\n        gl_Position+=projectionMatrix*bPosition;\n        alpha=5.;\n    }\n    \n    if(bubbles.w==2.){\n        alpha=clamp(abs(sin(uTime-bubbles.y)),.3,.6);\n        gl_PointSize=size+60.;\n        \n        gl_PointSize=uBubblesUp*gl_PointSize;\n        float normalized=clamp(uBubblesUp,0.,2.)*2.;\n        vec3 tranlated=mix(position,bubbles.xyz,normalized);\n        vec4 bPosition=modelViewMatrix*vec4(tranlated,1.);\n        gl_Position+=projectionMatrix*bPosition;\n    }\n    if(bubbles.w==3.){\n        alpha=clamp(abs(sin(uTime-bubbles.y)),.3,1.);\n        gl_PointSize=size+90.;\n        \n        gl_PointSize=uBubblesUp*gl_PointSize;\n        float normalized=clamp(uBubblesUp,0.,2.)*2.;\n        vec3 tranlated=mix(position,bubbles.xyz,normalized);\n        vec4 bPosition=modelViewMatrix*vec4(tranlated,1.);\n        gl_Position+=projectionMatrix*bPosition;\n    }\n}",fragmentShader:"precision mediump float;\nuniform vec3 glowColor;\nvarying float intensity;\nvarying float alpha;\nuniform float uOpacity;\nvoid main() {\n  float distanceToCenter = distance(gl_PointCoord, vec2(.5));\n  float pct = 1. - smoothstep(0., .5, distanceToCenter);\n  vec3 color = vec3(1.) * gl_FragColor.rgb;\n  vec3 glow = glowColor * intensity;\n  gl_FragColor = vec4(glow, clamp(alpha, 0., 1.));\n  gl_FragColor = vec4(glow, pct * gl_FragColor.a);\n  gl_FragColor = vec4(gl_FragColor.rgb, gl_FragColor.a * uOpacity);\n  \n}",blending:l,side:r,depthTest:!1,vertexColors:!1,transparent:!0});v(()=>{_.value&&(()=>{const e=[],n=[],o=[],t=[];for(let a=0;a<2e4-3*c.length;a+=1){const i=u.randInt(0,c.length-1),l=c[i],r=f[l].attributes.position.array[3*a+0]||0,s=f[l].attributes.position.array[3*a+1]||0,m=f[l].attributes.position.array[3*a+2]||0;if(n.push(r,s,m),e[a]=u.randFloat(10,20),a%100==0){const e=u.randInt(100,250)+s;t.push(r,e,m,1)}else t.push(r,s,m,0);o[2*a+0]=u.randFloat(.5,1.5),o[2*a+1]=2.5}_.value.setAttribute("aDelayDuration",new m(o,2)),_.value.setAttribute("bubbles",new m(t,4)),_.value.setAttribute("position",new m(n,3)),_.value.setAttribute("color",new m([],3)),_.value.setAttribute("size",new m(e,1)),_.value.computeBoundingSphere()})()});const x=p(),{onBeforeRender:P}=n();return P(()=>{x.value&&(x.value.material.uniforms.uTime.value+=.05,x.value.material.uniforms.uSlowTime.value+=1/400),o.color&&(z.uniforms.glowColor.value=new a(o.color)),o.opacity&&(z.uniforms.uOpacity.value=o.opacity)}),(e,n)=>(g(),b("TresPoints",{ref_key:"TresMeshRef",ref:x},[y("TresBufferGeometry",{ref_key:"BufferGeometryRef",ref:_},null,512),y("TresShaderMaterial",d(w(h(z))),null,16)],512))}});export{_,z as a};
