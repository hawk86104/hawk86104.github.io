import{b as e,m as s,e as o,T as t,a as r}from"./@tresjs.C_lUIoBy1753233172036.js";import{l as n}from"./utils.CqikTZ-Z1753233172036.js";import{f as i}from"./utils.B9MstTZ71753233172036.js";import{aa as a,b as p,a2 as l,G as m,o as c,F as u,W as d,e as h,H as f,f as j,I as y,M as g,m as T,u as v,d as b,r as w,h as M,j as L,a7 as x,a8 as C,a5 as z}from"./@vue.DwSifnVs1753233172036.js";import{m as S}from"./d3-geo.BTOaKD1k1753233172036.js";import{bk as B,a3 as O,B as _,l as k,C as E,g as G,V as D,cM as P}from"./three.CcAUWIwc1753233172036.js";import{c as H,d as F,a as I}from"./three-mesh-bvh.22kFL5Bh1753233172036.js";import"./postprocessing.BWGCgD611753233172036.js";import"./@vueuse.35KRNqxK1753233172036.js";import"./@fesjs.CJmphC0G1753233172036.js";import"./vue-router.0le_2Tu71753233172036.js";import"./lodash-es.C7pWAXPe1753233172036.js";import"./@qlin.q6OWdsQV1753233172036.js";import"./pinia.ia5100Wx1753233172036.js";import"./@babel.BPq7uOAK1753233172036.js";import"./@floating-ui.BFjFSAYt1753233172036.js";import"./@juggle.CcBCnTIR1753233172036.js";import"./@tweenjs.ULy8-5Ku1753233172036.js";import"./axios.Bbi9I5N71753233172036.js";import"./axios.DLTVXJci1753233172036.js";import"./color.BNLXVtq_1753233172036.js";import"./@amap.CGUF9xH41753233172036.js";import"./color-string.Bt6H5dTd1753233172036.js";import"./color-name.BQ5IbGbl1753233172036.js";import"./simple-swizzle.D8o1wE6V1753233172036.js";import"./is-arrayish.CLsR9Wfx1753233172036.js";import"./color-convert.BIEBOW2m1753233172036.js";import"./lodash.DoOIeEkB1753233172036.js";import"./d3-array.G5ptHY8Z1753233172036.js";const A=["position"],$=["blending","map"],q=["name","renderOrder","pCenter"],R=["args"],V=["color","side"],W=["renderOrder","position-z"],J=["position"],K=["renderOrder"],N=["position"],Q={__name:"jiangSuMapMesh",async setup(r){let b,w;_.prototype.computeBoundsTree=H,_.prototype.disposeBoundsTree=F,k.prototype.raycast=I;const M=([b,w]=a((()=>n("./plugins/simpleGIS/json/320000_full.json","features"))),b=await b,w(),b),{map:L}=([b,w]=a((()=>e({map:"./plugins/simpleGIS/image/icon.png"}))),b=await b,w(),b),x=M[0].properties.centroid,C=S();C.center(x).translate([0,0]);const z=[];M.forEach((e=>{const s=new E(`hsl( 16, ${30*Math.random()+55}%, ${30*Math.random()+55}%)`).getHex(),o=.3*Math.random()+.3,{centroid:t,oneCenter:r,center:n,name:i}=e.properties,{coordinates:a,type:p}=e.geometry,l=t||r||n||[0,0],m=C(l);m[1]=-m[1],m[2]=o,z.push({type:"Html",position:m,name:i});const c=C(l);c[1]=.2-c[1],c[2]=o+.22,z.push({type:"Sprite",position:c}),a.forEach((e=>{function t(e){const t=new P;e.forEach(((e,s)=>{const[o,r]=C(e);0===s?t.moveTo(o,-r):t.lineTo(o,-r)})),z.push({type:"Shape",shape:t,name:i,color:s,depth:o,pCenter:c});const r=[];e.forEach((e=>{const[s,o]=C(e);r.push(s,-o,0)})),z.push({type:"Line",points:new Float32Array(r),depth:o})}"MultiPolygon"===p&&e.forEach((e=>t(e))),"Polygon"===p&&t(e)}))}));const Q=p();l((()=>{Q.value&&((e=>{e.rotation.x=-Math.PI/2;const s=(new G).setFromObject(e).getCenter(new D),o=[0,0];e.position.x=e.position.x-s.x-o[0],e.position.z=e.position.z-s.z-o[1]})(Q.value),Q.value.children.forEach((e=>{"Mesh"===e.type&&e.geometry.computeBoundsTree()})))}));const U=e=>{e.object.material.opacity=.4},X=e=>{e.eventObject.material.opacity=1},{camera:Y,controls:Z}=s();let ee=null;const se=e=>{const s=new D;s.x=e.point.x,s.y=e.point.y+10,s.z=e.point.z,ee=i(Y,s,Z)},{onBeforeLoop:oe}=o();oe((()=>{ee?.update()}));const te={wrapperClass:"wrapper",as:"div",center:!0,sprite:!0,prepend:!0,transform:!0};return(e,s)=>(c(),m("TresGroup",{ref_key:"tgRef",ref:Q},[(c(),m(u,null,d(z,((e,o)=>(c(),m(u,{key:`${o}`},["Html"===e.type?(c(),h(v(t),T({key:0,ref_for:!0},te,{position:e.position}),{default:j((()=>[y("span",null,g(e.name),1)])),_:2},1040,["position"])):f("",!0),"Sprite"===e.type?(c(),m("TresSprite",{key:1,position:e.position,scale:.3,renderOrder:1e3},[y("TresSpriteMaterial",{color:16711680,blending:B,map:v(L)},null,8,$)],8,A)):f("",!0),"Shape"===e.type?(c(),m("TresMesh",{key:2,name:e.name,renderOrder:o,pCenter:e.pCenter,onPointerEnter:U,onPointerLeave:X,onClick:se},[y("TresExtrudeGeometry",{args:[e.shape,{depth:e.depth,bevelEnabled:!1}]},null,8,R),y("TresMeshStandardMaterial",{color:e.color,emissive:0,roughness:.45,metalness:.8,transparent:!0,side:O},null,8,V)],40,q)):f("",!0),"Line"===e.type?(c(),m(u,{key:3},[y("TresLine",{renderOrder:o,"position-z":e.depth+1e-4},[y("TresBufferGeometry",{position:[e.points,3]},null,8,J),s[0]||(s[0]=y("TresLineBasicMaterial",{color:16777215,linewidth:.5},null,-1))],8,W),y("TresLine",{renderOrder:o,"position-z":-1e-4},[y("TresBufferGeometry",{position:[e.points,3]},null,8,N),s[1]||(s[1]=y("TresLineBasicMaterial",{color:0,linewidth:.5},null,-1))],8,K)],64)):f("",!0)],64)))),64))],512))}},U=b({__name:"jiangSuMap",setup(e){const s=w({clearColor:"#ffdbd1",alpha:!0,antialias:!0}),o=w({enableDamping:!0,dampingFactor:.05,makeDefault:!0});return(e,t)=>{const n=M("TresCanvas");return c(),h(n,T(s,{"window-size":""}),{default:j((()=>[t[0]||(t[0]=y("TresPerspectiveCamera",{position:[0,12,0],fov:75,near:.1,far:1e3,up:[0,0,-1]},null,-1)),L(v(r),x(C(o)),null,16),t[1]||(t[1]=y("TresAmbientLight",{intensity:8.8},null,-1)),t[2]||(t[2]=y("TresDirectionalLight",{position:[0,10,5],intensity:.2},null,-1)),t[3]||(t[3]=y("TresDirectionalLight",{position:[0,10,-5],intensity:.2},null,-1)),t[4]||(t[4]=y("TresDirectionalLight",{position:[5,10,0],intensity:.2},null,-1)),t[5]||(t[5]=y("TresDirectionalLight",{position:[-5,10,0],intensity:.2},null,-1)),t[6]||(t[6]=y("TresGridHelper",{args:[20,10]},null,-1)),(c(),h(z,null,{default:j((()=>[L(Q)])),_:1}))])),_:1},16)}}});export{U as default};
