import{a6 as t,r as n,C as e,V as o,K as r,a9 as a}from"./three.ej3u8izI1722217438692.js";import{$ as i,N as s,d as c,x as l}from"./@tresjs.vs5lCFs11722217438692.js";import"./index.IqPLYqrQ1722217438692.js";import{a as u}from"./simplex-noise.MycypUyu1722217438692.js";import{C as f}from"./index.DTwgDyGF1722217438692.js";import{d as p,a4 as h,o as m,D as v,J as d,u as g,r as x,f as w,g as y,j as b,aj as _,ak as M,al as j}from"./@vue.Q1VpS3901722217438692.js";import{_ as z}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.-CnItdwr1722217438692.js";import"./tweakpane.yHWGBmom1722217438692.js";import"./@vueuse.mG9rDBoo1722217438692.js";import"./lamina.4l8g5GBL1722217438692.js";import"./glsl-tokenizer.BRlB_-gZ1722217438692.js";import"./@amap.FTf_Qzi31722217438692.js";import"./glsl-token-descope.1dt_eix41722217438692.js";import"./glsl-token-depth.s7IWiR181722217438692.js";import"./glsl-token-scope.uycQVoyS1722217438692.js";import"./glsl-token-properties.EeHk1UpB1722217438692.js";import"./glsl-token-assignments.jJd6DmGv1722217438692.js";import"./glsl-token-string.R7dCM80c1722217438692.js";import"./glsl-token-functions.DFHfxlmC1722217438692.js";import"./object-hash.H_vbRcKd1722217438692.js";import"./jszip.FHAQs96M1722217438692.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.64N_xVXb1722217438692.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.3809NdAQ1722217438692.js";import"./three-stdlib.lHRu5jBh1722217438692.js";import"./@pmndrs.NGMcpQ2E1722217438692.js";import"./utils.lKdopKNL1722217438692.js";const A=C;!function(t,n){const e=C,o=E();for(;;)try{if(752506===parseInt(e(477))/1+parseInt(e(464))/2+parseInt(e(479))/3+-parseInt(e(468))/4*(-parseInt(e(465))/5)+-parseInt(e(434))/6+-parseInt(e(451))/7+-parseInt(e(426))/8)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const I=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(435)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function C(t,n){const e=E();return(C=function(t,n){return e[t-=409]})(t,n)}!function(){I(this,(function(){const t=C,n=new RegExp(t(423)),e=new RegExp(t(481),"i"),o=P(t(445));n.test(o+"chain")&&e[t(486)](o+t(459))?P():o("0")}))()}();const S=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(435)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();S(void 0,(function(){const t=C;let n;try{n=Function(t(431)+t(458)+");")()}catch(r){n=window}const e=n[t(462)]=n.console||{},o=[t(441),t(420),t(466),"error",t(427),"table",t(442)];for(let a=0;a<o[t(419)];a++){const n=S[t(433)][t(415)][t(457)](S),r=o[a],i=e[r]||n;n.__proto__=S.bind(S),n[t(418)]=i[t(418)][t(457)](i),e[r]=n}}))();const k=[A(432)],F=["index","attributes-position","attributes-uv",A(428),"attributes-orientation",A(416),A(449),A(439)],R=[A(476)],D=[A(446)],T=p({__name:"grass",props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(a){const c=A;let l,p;const x=([l,p]=h((()=>s({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),l=await l,p(),l),w=a,y=u(Math[c(410)]);function b(n,e){const o=c,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,a=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,i=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,s=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(437)])(r,a,i,s)}function _(t,n){var e=2*y(t/50,n/50);return e+=4*y(t/100,n/100),e+=.2*y(t/10,n/10)}const M=function(n,e){const a=c,i=[],s=[],l=[],u=[],f=[];let p=new(t[a(437)]),h=new(t[a(437)]);const m=-.25;for(let r=0;r<n;r++){const c=Math[a(410)]()*e-e/2,v=Math[a(410)]()*e-e/2,d=_(c,v);i[a(448)](c,d,v);let g=Math.PI-Math[a(410)]()*(2*Math.PI);u[a(448)](Math[a(463)](.5*g)),f.push(Math[a(467)](.5*g));let x=new o(0,1,0),w=x.x*Math.sin(g/2),y=x.y*Math.sin(g/2),M=x.z*Math[a(463)](g/2),j=Math[a(467)](g/2);p[a(411)](w,y,M,j)[a(454)](),g=.5*Math[a(410)]()+m,x=new o(1,0,0),w=x.x*Math[a(463)](g/2),y=x.y*Math[a(463)](g/2),M=x.z*Math[a(463)](g/2),j=Math[a(467)](g/2),h[a(411)](w,y,M,j).normalize(),p=b(p,h),g=.5*Math[a(410)]()+m,x=new(t[a(484)])(0,0,1),w=x.x*Math[a(463)](g/2),y=x.y*Math.sin(g/2),M=x.z*Math[a(463)](g/2),j=Math.cos(g/2),h[a(411)](w,y,M,j)[a(454)](),p=b(p,h),s.push(p.x,p.y,p.z,p.w),r<n/3?l.push(1.8*Math.random()):l[a(448)](Math[a(410)]())}return{offsetsF32:new r(new Float32Array(i),3),orientationsF32:new r(new Float32Array(s),4),stretchesF32:new(t[a(482)])(new Float32Array(l),1),halfRootAngleCosF32:new(t[a(482)])(new Float32Array(f),1),halfRootAngleSinF32:new r(new Float32Array(u),1)}}(w[c(424)],w[c(412)]),j=new(t[c(436)])(w.bW,w.bH,1,w.joints)[c(470)](0,w.bH/2,0),z=new n(w[c(412)],w[c(412)],32,32);z[c(413)](new(t[c(484)])(0,1,0));const I=z[c(438)][c(472)];for(let t=0;t<I[c(455)][c(419)];t+=3)I[c(455)][t+1]=_(I.array[t],I[c(455)][t+2]);z[c(438)][c(472)][c(485)]=!0,z.computeVertexNormals();const C=new(f({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new e(.3,.9,0)[c(471)](),bottomColor:new(t[c(447)])(0,.2,0).convertSRGBToLinear()},c(475),c(474),(n=>{const e=c;n[e(446)]=t[e(483)]})));C[c(429)]=x.map,C[c(452)]=x[c(452)],C[c(421)]=!1;const{onLoop:S}=i();return S((({elapsed:t})=>{const n=c;C[n(430)][n(469)][n(443)]=t/4})),(n,e)=>{const o=c;return m(),v(o(460),null,[d(o(409),{material:g(C)},[d(o(473),{index:g(j).index,"attributes-position":g(j).attributes[o(472)],"attributes-uv":g(j)[o(438)].uv,"attributes-offset":g(M)[o(444)],"attributes-orientation":g(M)[o(461)],"attributes-stretch":g(M)[o(453)],"attributes-halfRootAngleSin":g(M).halfRootAngleSinF32,"attributes-halfRootAngleCos":g(M)[o(425)]},null,8,F)],8,k),d(o(409),{position:[0,0,0],geometry:g(z)},[d(o(450),{color:"#000f00",side:t[o(483)]},null,8,D)],8,R)])}}});function E(){const t=["material","constructor","5356608ajOMJs","apply","PlaneGeometry","Vector4","attributes","attributes-halfRootAngleCos","action","log","trace","value","offsetsF32","init","side","Color","push","attributes-halfRootAngleSin","TresMeshStandardMaterial","7536487HiFJRt","alphaMap","stretchesF32","normalize","array","call","bind",'{}.constructor("return this")( )',"input","TresGroup","orientationsF32","console","sin","2716340GSbDbZ","1257430hLaUEw","info","cos","16bkELrs","time","translate","convertSRGBToLinear","position","TresInstancedBufferGeometry","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","geometry","636838rqBWMP","gger","4433415GAVIKl","counter","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","InstancedBufferAttribute","DoubleSide","Vector3","needsUpdate","test","TresMesh","random","set","width","lookAt","string","prototype","attributes-stretch","while (true) {}","toString","length","warn","toneMapped","debu","function *\\( *\\)","instances","halfRootAngleCosF32","14054736PNKsKZ","exception","attributes-offset","map","uniforms","return (function() "];return(E=function(){return t})()}function P(t){function n(t){const e=C;if(typeof t===e(414))return function(t){}[e(433)](e(417))[e(435)](e(480));1!==(""+t/t).length||t%20==0?function(){return!0}[e(433)](e(422)+e(478))[e(456)](e(440)):function(){return!1}[e(433)](e(422)+e(478)).apply("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const L=H;function O(){const t=["toString","while (true) {}","call","action","__proto__","prototype","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","init","1360aapAUn","length","error","grass","constructor","log","warn","18807TOSuZa","gger","bind","table","3997800zGzeAA","console","2296584oTMmLx",'{}.constructor("return this")( )',"115KvMPlZ","debu","14957154PlumbT","127124icXOTn","trace","counter","7030248RDpnps","apply","function *\\( *\\)","51674iQIFFE","122iQFvtW","info","TresPerspectiveCamera"];return(O=function(){return t})()}!function(t,n){const e=H,o=O();for(;;)try{if(865792===-parseInt(e(463))/1*(parseInt(e(444))/2)+parseInt(e(469))/3+parseInt(e(474))/4*(-parseInt(e(471))/5)+parseInt(e(477))/6+parseInt(e(480))/7*(-parseInt(e(456))/8)+parseInt(e(473))/9+parseInt(e(467))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[H(478)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){B(this,(function(){const t=H,n=new RegExp(t(479)),e=new RegExp(t(454),"i"),o=N(t(455));n.test(o+"chain")&&e.test(o+"input")?N():o("0")}))()}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[H(478)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function H(t,n){const e=O();return(H=function(t,n){return e[t-=444]})(t,n)}G(void 0,(function(){const t=H,n=function(){const t=H;let n;try{n=Function("return (function() "+t(470)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(468)]||{},o=[t(461),t(462),t(445),t(458),"exception",t(466),t(475)];for(let r=0;r<o[t(457)];r++){const n=G[t(460)][t(452)][t(465)](G),a=o[r],i=e[a]||n;n[t(451)]=G.bind(G),n.toString=i[t(447)].bind(i),e[a]=n}}))();const U=d(L(446),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1),q=p({__name:L(459),setup(t){const n=x({alpha:!0,toneMapping:a,windowSize:!0,clearColor:6710886}),e=x({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=H;return m(),w(g(l),_(M(n)),{default:y((()=>[U,b(g(c),_(M(e)),null,16),(m(),w(j,null,{default:y((()=>[b(T)])),_:1})),(m(),w(j,null,{default:y((()=>[b(g(z),{texture:r(453)})])),_:1}))])),_:1},16)}}});function N(t){function n(t){const e=H;if("string"==typeof t)return function(t){}[e(460)](e(448))[e(478)](e(476));1!==(""+t/t)[e(457)]||t%20==0?function(){return!0}[e(460)](e(472)+"gger")[e(449)](e(450)):function(){return!1}.constructor(e(472)+e(464)).apply("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{q as default};
