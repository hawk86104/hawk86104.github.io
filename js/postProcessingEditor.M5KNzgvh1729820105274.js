import{p as t,U as n,z as e,Y as o}from"./@tresjs.S6PXiQcG1729820105274.js";import{_ as r,Y as s,k as a,V as i,M as c,n as l,bf as u,cM as v,B as f,az as p,bX as d}from"./three.0W5n8UBO1729820105274.js";import{P as m}from"./tweakpane.yHWGBmom1729820105274.js";import{d as g,a4 as x,e as h,o as y,f as b,g as I,L as _,j as S,u as U,aj as w,ak as D,al as P,m as E}from"./@vue.bvMz0l_u1729820105274.js";import{_ as M}from"./@fesjs.NJfsHdwi1729820105274.js";import"./@vueuse.3M_MDcJc1729820105274.js";import"./vue-router.RgcUnLYP1729820105274.js";import"./lodash-es.guXTxyfJ1729820105274.js";import"./@qlin.yHhFDldE1729820105274.js";import"./pinia.Qyaqm_as1729820105274.js";import"./@floating-ui.BPbuo5Gx1729820105274.js";import"./@juggle.7yjBMqoW1729820105274.js";!function(t,n){const e=F,o=z();for(;;)try{if(131572===-parseInt(e(461))/1+parseInt(e(405))/2+-parseInt(e(447))/3+parseInt(e(453))/4*(parseInt(e(417))/5)+parseInt(e(433))/6+-parseInt(e(416))/7*(parseInt(e(430))/8)+-parseInt(e(406))/9*(-parseInt(e(423))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){L(this,(function(){const t=F,n=new RegExp(t(420)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=N(t(456));n[t(407)](o+t(441))&&e.test(o+t(428))?N():o("0")}))()}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[F(414)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function z(){const t=["string","651222qeRvnn","exec","index","bind","call","prototype","12UONVcO","onerror","get","init","Vector2","exception","constructor","random","244143oGVapt","onabort","open","responseText",'" load was aborted.',"Matrix3","log","252720TTzKFJ","9LBqDUd","test","Vector4","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx",'{}.constructor("return this")( )',"error","gger","type","apply",'Shader "',"1099ndeGeg","309445oJEAZj","message","console","function *\\( *\\)","info","name","3706810OiNrES","Matrix2","now","toString","table","input","WagnerLoadShaderException","9328wDAraR","v3v","counter","558858EqOBuT","object","stateObject","value","ShaderMaterial","length","send","lastIndex","chain","Texture","Vector3","__proto__","while (true) {}"];return(z=function(){return t})()}A(void 0,(function(){const t=F;let n;try{n=Function("return (function() "+t(410)+");")()}catch(r){n=window}const e=n.console=n[t(419)]||{},o=[t(404),"warn",t(421),t(411),t(458),t(427),"trace"];for(let s=0;s<o[t(438)];s++){const n=A.constructor[t(452)].bind(A),r=o[s],a=e[r]||n;n[t(444)]=A[t(450)](A),n[t(426)]=a[t(426)].bind(a),e[r]=n}}))();function F(t,n){const e=z();return(F=function(t,n){return e[t-=403]})(t,n)}function C(t,n,e){if(typeof t!==F(434)||null===t)return t;const o=Array.isArray(t)?[]:{};for(const r in t)t.hasOwnProperty(r)&&(o[r]=C(t[r])),r==n&&(o[n]=e);return o}function N(t){function n(t){const e=F;if(typeof t===e(446))return function(t){}[e(459)](e(445)).apply(e(432));1!==(""+t/t)[e(438)]||t%20==0?function(){return!0}[e(459)]("debu"+e(412))[e(451)]("action"):function(){return!1}[e(459)]("debu"+e(412))[e(414)](e(435)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const T=O;!function(t,n){const e=O,o=B();for(;;)try{if(723310===parseInt(e(511))/1*(-parseInt(e(490))/2)+-parseInt(e(579))/3+parseInt(e(528))/4*(-parseInt(e(494))/5)+parseInt(e(535))/6+-parseInt(e(549))/7+parseInt(e(532))/8*(-parseInt(e(541))/9)+parseInt(e(565))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const R=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){R(this,(function(){const t=O,n=new RegExp(t(537)),e=new RegExp(t(556),"i"),o=V(t(568));n.test(o+t(500))&&e[t(506)](o+"input")?V():o("0")}))()}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[O(508)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function B(){const t=["makeOrthographic","__proto__","passItems","scale","PlaneGeometry","console","set","innerWidth","LinearFilter","wrapT","101984NqCpag","front","constructor","back","6995440SxsbkO","height","onWindowResize","2626416xObdfz","type","function *\\( *\\)","loadShadervf","getOfflineTexture","addPass","9VkTLTT","stencilBuffer","call","quad","Mesh","camera","setRenderTarget","width","5964147HpUTsJ","log","OrthographicCamera","value","uniforms","texture","resolution","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","innerHeight","table","minFilter","scene","Scene","MeshBasicMaterial","bind","debu","36453900SPwKLF","CopyPass","removePass","init","length","far","swapBuffers","render","read","warn","while (true) {}","time","magFilter","toScreen","2390949uCATRf","setSize","renderer","near","shader","UnsignedByteType","wrapS","pass","RGBFormat","info","Pass","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","RGBAFormat","passes","gger","856892wUlNns","Reset","trace","copyPass","80cMiVWU","tInput","clone","Stack","startTime","add","chain",'{}.constructor("return this")( )',"material","action","counter","error","test","write","apply","useRGBA","WebGLRenderTarget","1chLNve","settings","now","makePerspective","string","prototype","ShaderMaterial"];return(B=function(){return t})()}G(void 0,(function(){const t=O,n=function(){const t=O;let n;try{n=Function("return (function() "+t(501)+");")()}catch(e){n=window}return n}(),e=n[t(523)]=n[t(523)]||{},o=[t(550),t(574),t(588),t(505),"exception",t(558),t(492)];for(let r=0;r<o[t(569)];r++){const n=G.constructor[t(516)][t(563)](G),s=o[r],a=e[s]||n;n[t(519)]=G[t(563)](G),n.toString=a.toString[t(563)](a),e[s]=n}}))();class j{constructor(t,n){const e=O;this[e(548)]=1,this[e(533)]=1,this[e(512)]=n||{},this[e(509)]=this[e(512)][e(509)]||!1,this[e(581)]=t,this[e(493)]=this[e(566)](this.settings),this[e(560)]=new(r[e(561)]),this[e(544)]=new(r[e(545)])(new(r[e(522)])(1,1),new(r[e(562)])),this[e(560)][e(499)](this[e(544)]),this[e(546)]=new(r[e(551)])(1,1,1,1,-1e4,1e4),this[e(529)]=new(r[e(510)])(1,1,{minFilter:void 0!==this[e(512)][e(559)]?this[e(512)][e(559)]:r[e(526)],magFilter:void 0!==this.settings[e(577)]?this[e(512)][e(577)]:l,wrapS:void 0!==this[e(512)][e(585)]?this[e(512)][e(585)]:u,wrapT:void 0!==this.settings[e(527)]?this[e(512)][e(527)]:u,format:this[e(509)]?r[e(591)]:v,type:void 0!==this[e(512)].type?this[e(512)][e(536)]:r[e(584)],stencilBuffer:void 0===this[e(512)][e(542)]||this[e(512)][e(542)]}),this[e(531)]=this[e(529)][e(496)](),this[e(498)]=Date.now(),this[e(592)]={},this[e(497)]={passItems:[],passes:[]}}[T(540)](t,n,e,o){const r=T;this[r(538)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(583)]};this[r(497)][r(520)].push(s)}[T(567)](t){const n=T;for(let e=this[n(497)][n(520)][n(569)]-1;e>=0;e--)this.Stack[n(520)][e].uuid===parseInt(t)&&this[n(497)][n(520)].splice(e,1);console[n(550)](this[n(497)][n(520)])}[T(566)](){const t=T;this[t(589)][t(543)](this);return this[t(538)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[T(538)](t){const n=T,e=n(590);return this[n(583)]=function(t,n){const e=F,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,l=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,u={sampler2D:{type:"t",value:()=>new(r[F(442)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new a},vec3:{type:"v3",value:()=>new i},vec4:{type:"v4",value:()=>new(r[F(408)])},bvec2:{type:"v2",value:()=>new(r[F(457)])},bvec3:{type:"v3",value:()=>new(r[F(443)])},bvec4:{type:"v4",value:()=>new(r[F(408)])},ivec2:{type:"v2",value:()=>new(r[F(457)])},ivec3:{type:"v3",value:()=>new(r[F(443)])},ivec4:{type:"v4",value:()=>new(r[F(408)])},mat2:{type:"v2",value:()=>new(r[F(424)])},mat3:{type:"v3",value:()=>new(r[F(403)])},mat4:{type:"v4",value:()=>new c}},v={float:{type:"fv",value:()=>[]},vec3:{type:e(431),value:()=>[]}};let f;const p={resolution:{type:"v2",value:new(r[e(457)])(1,1),default:!0},time:{type:"f",value:Date[e(425)](),default:!0},tInput:{type:"t",value:new s,default:!0}};let d,m;for(;null!==(f=o[e(448)](n));)f[e(449)]===o[e(440)]&&o[e(440)]++,d=f[1],m=f[2],p[m]={type:u[d][e(413)],value:u[d][e(436)]()};for(;null!==(f=l[e(448)](n));)f[e(449)]===o.lastIndex&&o[e(440)]++,d=f[1],m=f[2],f[3],p[m]={type:v[d].type,value:v[d].value()};return new(r[e(437)])({uniforms:p,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this.shader}[T(589)](t){this.shader=null,this.params={}}[T(491)](){const t=T;this[t(573)]=this.front,this[t(507)]=this[t(531)]}[T(534)](t,n){const e=T,o=window[e(525)],r=window[e(557)];t[e(580)](1*o,1*r),n.projectionMatrix[e(514)](70,o/r,n[e(582)],n[e(570)]),this[e(580)](o,r);return this[e(539)](o,r,!0)}[T(580)](t,n){const e=T;this[e(548)]=t,this.height=n,this[e(546)].projectionMatrix[e(518)](t/-2,t/2,n/2,n/-2,this.camera.near,this[e(546)][e(570)]),this[e(544)][e(521)][e(524)](t,n,1),this.front[e(580)](t,n),this[e(531)][e(580)](t,n)}[T(539)](t,n,e){const o=T;return new(r[o(510)])(t,n,{minFilter:r[o(526)],magFilter:r[o(526)],format:e?r[o(591)]:r[o(587)]})}[T(572)](t,n,e,o){const r=T;this.renderer[r(547)](this.write),this[r(581)].render(t,n),o||this[r(571)]()}[T(571)](){const t=T,n=this.write;this.write=this[t(573)],this[t(573)]=n}[T(586)](){const t=T;for(let n=0;n<this[t(497)][t(520)].length;n++){const e=this[t(497)][t(520)][n][t(583)],o=this[t(497)].passItems[n].params;if(this[t(581)][t(547)](this[t(507)]),e instanceof r[t(517)]){this[t(544)][t(502)]=e,this.quad[t(502)].uniforms.tInput[t(552)]=this[t(573)][t(554)],this[t(544)][t(502)].uniforms.resolution[t(552)].set(this[t(548)],this[t(533)]),this[t(544)][t(502)][t(553)][t(576)][t(552)]=.001*(Date[t(513)]()-this[t(498)]);for(const n in o)this.quad.material.uniforms[n][t(552)]=o[n];this[t(581)][t(572)](this[t(560)],this.camera),this[t(571)]()}}}[T(578)](t,n){const e=T;this.renderer[e(547)](null),this[e(544)][e(502)]=this.copyPass,this[e(544)].material.uniforms[e(495)].value=this[e(573)].texture,this.quad[e(502)][e(553)][e(555)][e(552)][e(524)](this[e(548)],this[e(533)]),this[e(581)][e(572)](this[e(560)],this.camera)}}function O(t,n){const e=B();return(O=function(t,n){return e[t-=490]})(t,n)}function V(t){function n(t){const e=O;if(typeof t===e(515))return function(t){}[e(530)](e(575))[e(508)](e(504));1!==(""+t/t)[e(569)]||t%20==0?function(){return!0}[e(530)](e(564)+e(593))[e(543)](e(503)):function(){return!1}.constructor("debu"+e(593))[e(508)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const H="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",k=Z;function W(){const t=["移除~","614IExwbD","init","label","random","addPass","FXAAPass","title","SOBELPass","189212ZHJRMj","toString","gger","plugins/postProcessing/image/1324-normal.jpg","trace","list","VIGNETTE2Pass","InvertPass","RGBPass","material","removePass","7251492EtBNsF","autoClearColor","exception","4093KzEZpL","while (true) {}","postProcessing","text","新增通道","debu","17273320YGuBad","push","values","add","BOXBLURPass","render","FREICHENPass","length","error","bind","MeshPhongMaterial","plugins/postProcessing/image/1324.jpg","input","target","后处理类型","7MLtKSH","mergeGeometries","toScreen","counter","229784lxywgX","90oUrGoo","TOONPass","Vector2","dispose","test","stateObject","关闭通道","3015252oVBkHm","map","console","change","addButton","receiveShadow","CGAPass","keys","DENOISEPass","return (function() ","POISSONPass","10681857CskfzH","constructor","translate","call","castShadow","value","action","Mesh","click","addBlade","apply"];return(W=function(){return t})()}!function(t,n){const e=Z,o=W();for(;;)try{if(770781===parseInt(e(340))/1*(parseInt(e(396))/2)+parseInt(e(373))/3+-parseInt(e(326))/4*(parseInt(e(366))/5)+-parseInt(e(337))/6+-parseInt(e(361))/7*(-parseInt(e(365))/8)+-parseInt(e(384))/9+parseInt(e(346))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const X=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Z(394)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){X(this,(function(){const t=Z,n=new RegExp("function *\\( *\\)"),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=$(t(397));n[t(370)](o+"chain")&&e[t(370)](o+t(358))?$():o("0")}))()}();const q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Z(394)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function Z(t,n){const e=W();return(Z=function(t,n){return e[t-=320]})(t,n)}q(void 0,(function(){const t=Z,n=function(){const t=Z;let n;try{n=Function(t(382)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(375)]=n[t(375)]||{},o=["log","warn","info",t(354),t(339),"table",t(330)];for(let r=0;r<o[t(353)];r++){const n=q.constructor.prototype[t(355)](q),s=o[r],a=e[s]||n;n.__proto__=q[t(355)](q),n[t(327)]=a[t(327)][t(355)](a),e[s]=n}}))();function $(t){function n(t){const e=Z;if("string"==typeof t)return function(t){}[e(385)](e(341))[e(394)](e(364));1!==(""+t/t)[e(353)]||t%20==0?function(){return!0}[e(385)](e(345)+e(328))[e(387)](e(390)):function(){return!1}.constructor(e(345)+e(328)).apply(e(371)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const J=M(g({__name:k(342),async setup(o){const s=k;let a,i;const{camera:c,renderer:l,scene:u,sizes:v}=t();for(var g=new f,h=[],y=0;y<100;y++){var b=new p(100,100,100);b[s(386)](1500*Math[s(321)](),1500*Math[s(321)](),1500*Math.random()),h[s(347)](b)}g=d[s(362)](h);const I=([a,i]=x((()=>e({map:s(357)}))),a=await a,i(),a),_=([a,i]=x((()=>e({map:s(329)}))),a=await a,i(),a);var S=new(r[s(356)])({map:I[s(374)],normalMap:_[s(374)],normalScale:new(r[s(368)])(.8,-.8),shininess:100}),U=new(r[s(391)])(g,S);U[s(388)]=!0,U[s(378)]=!0,u[s(389)][s(349)](U);const w=new j(l[s(389)],{useRGBA:!0}),D=new m;let P=null,E=[{text:s(333),value:{InvertPass:H}},{text:s(323),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:"SEPIAPass",value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:"SNOISEPass",value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:s(350),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:s(381),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:s(379),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:_[s(374)]}}},{text:s(325),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:s(334),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:"DOTPass",value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:"CIRCULARPass",value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:s(383),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:"VIGNETTE1Pass",value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(332),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:s(352),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:s(367),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],M=s(333),L=H,A=null;D[s(393)]({view:s(331),label:s(360),options:E,value:""}).on(s(376),(t=>{P=t[s(389)]}));const z=D.addButton({title:"新增",label:s(344)});let F=0;z.on(s(392),(t=>{const n=s;M=Object[n(380)](P)[0],L=Object[n(348)](P)[0],A=Object[n(348)](P)[1];let e=F++,o=D.addFolder({title:M});for(const s in A){let t=A[s];o[n(393)]({view:n(343),label:s,parse:t=>String(t),value:t})}o[n(377)]({title:n(395)+e,label:n(372)}).on(n(392),(t=>{const e=n;let o=t.target[e(324)].split("~")[1];w[e(336)](o)})).on(n(392),(()=>{o[n(369)]()}));let r=C(A,t[n(359)][n(320)],t.value);w[n(322)](M,L,r,e)})),w.onWindowResize(l[s(389)],c[s(389)]);const{onLoop:N}=n();return N((({delta:t})=>{const n=s;U&&(l[n(389)][n(338)]=!0,w.Reset(),U[n(335)]=S,w[n(351)](u[n(389)],c[n(389)]),w.pass(),w[n(363)](u.value,c[n(389)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),K=Q;function Q(t,n){const e=rt();return(Q=function(t,n){return e[t-=249]})(t,n)}!function(t,n){const e=Q,o=rt();for(;;)try{if(630040===-parseInt(e(255))/1+-parseInt(e(274))/2*(parseInt(e(251))/3)+-parseInt(e(264))/4+parseInt(e(280))/5+parseInt(e(261))/6*(-parseInt(e(285))/7)+-parseInt(e(283))/8*(parseInt(e(287))/9)+parseInt(e(275))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Y=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){Y(this,(function(){const t=Q,n=new RegExp(t(249)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=at(t(269));n.test(o+t(288))&&e[t(279)](o+t(282))?at():o("0")}))()}();const tt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Q(250)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();tt(void 0,(function(){const t=Q,n=function(){const t=Q;let n;try{n=Function(t(284)+t(257)+");")()}catch(e){n=window}return n}(),e=n[t(266)]=n.console||{},o=["log",t(267),t(268),t(265),t(256),"table",t(262)];for(let r=0;r<o[t(273)];r++){const n=tt[t(263)][t(289)][t(258)](tt),s=o[r],a=e[s]||n;n[t(253)]=tt[t(258)](tt),n.toString=a.toString[t(258)](a),e[s]=n}}))();const nt={ref:K(278),position:[600,850,-1500],fov:45,near:.1,far:1e5},et=_(K(270),{color:K(254),intensity:2},null,-1),ot=_(K(271),{position:[100,100,0],intensity:2,color:K(254)},null,-1);function rt(){const t=["input","200GDDMHt","return (function() ","7fNFufX","TresPerspectiveCamera","13887Vpucqc","chain","prototype","function *\\( *\\)","apply","980769fQLIWQ","while (true) {}","__proto__","#ffffff","305917DngjnT","exception",'{}.constructor("return this")( )',"bind","#000000","call","4112952UgOSdx","trace","constructor","4275012FHnpQk","error","console","warn","info","init","TresAmbientLight","TresDirectionalLight","counter","length","4rUJRyd","25567180OrXkUb","manual","debu","perspectiveCameraRef","test","4129525knmntf","TresCanvas"];return(rt=function(){return t})()}const st=g({__name:"postProcessingEditor",setup(t){const e=K,r={clearColor:e(259),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(276)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=h(a(281));return y(),b(i,E(r,{"window-size":""}),{default:I((()=>[_(a(286),nt,null,512),S(U(o),w(D(s)),null,16),et,ot,(y(),b(P,null,{default:I((()=>[S(J)])),_:1}))])),_:1},16)}}});function at(t){function n(t){const e=Q;if("string"==typeof t)return function(t){}.constructor(e(252))[e(250)](e(272));1!==(""+t/t)[e(273)]||t%20==0?function(){return!0}[e(263)]("debugger")[e(260)]("action"):function(){return!1}[e(263)](e(277)+"gger")[e(250)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{st as default};
