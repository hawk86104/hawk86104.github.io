import{t,_ as n,T as e,ab as o}from"./three.CQvcOG671729762363846.js";import{z as r,U as i,Y as a,L as s}from"./@tresjs.CmAaFQUS1729762363846.js";import"./index.Bc7Skskb1729762363846.js";import{a as c}from"./simplex-noise.DHLuNIrQ1729762363846.js";import{C as l}from"./index.BDIKs_XA1729762363846.js";import{d as u,a5 as p,o as f,E as h,L as m,u as d,r as v,f as g,g as x,j as w,aj as y,ak as b,al as _}from"./@vue.n8X62v121729762363846.js";import{_ as j}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.BFOFPgO41729762363846.js";import"./@vueuse.DvZn62wO1729762363846.js";import"./lamina.BstTZpjC1729762363846.js";import"./glsl-tokenizer.DodQ2RCy1729762363846.js";import"./@amap.irWeW_Ar1729762363846.js";import"./glsl-token-descope.DFLM-Xvu1729762363846.js";import"./glsl-token-depth.qv9DfUWQ1729762363846.js";import"./glsl-token-scope.D67Ze7Xe1729762363846.js";import"./glsl-token-properties.BUXAY3Ki1729762363846.js";import"./glsl-token-assignments.CRs3kqBo1729762363846.js";import"./glsl-token-string.Eyit8_HG1729762363846.js";import"./glsl-token-functions.D2Lt0tGo1729762363846.js";import"./object-hash.BiCA96VN1729762363846.js";import"./jszip.B5yG0Hpd1729762363846.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.C8eWs5BI1729762363846.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.Cc6U0YE41729762363846.js";import"./three-stdlib.CqKdLpwa1729762363846.js";import"./@fesjs.CZZ05Yp51729762363846.js";import"./vue-router.Du5s6fg51729762363846.js";import"./lodash-es.BBTWvufR1729762363846.js";import"./@qlin.BIlp8Yi21729762363846.js";import"./pinia.DOkF60i-1729762363846.js";import"./@babel.Bwyie5id1729762363846.js";import"./@floating-ui.B75jtkXD1729762363846.js";import"./@juggle.BnTvdTVm1729762363846.js";import"./chalk.B3MNILV41729762363846.js";/* empty css                                 */import"./iconify-icon.DK1S_nhj1729762363846.js";import"./@iconify.DKvOo9eU1729762363846.js";import"./oimophysics.B0i2NtyE1729762363846.js";import"./@pmndrs.DnYI6N3H1729762363846.js";import"./three-custom-shader-material.CWa5qaDo1729762363846.js";import"./three.quarks.BQqMGnDH1729762363846.js";import"./quarks.core.C7CDonSm1729762363846.js";import"./tweakpane.BCjFYDHx1729762363846.js";import"./utils.BYbPvAJn1729762363846.js";const M=k;function z(){const t=["68145lwqtwH","lookAt","TresMesh","__proto__","init","table","cos","position","array","attributes-uv","prototype","action","geometry","side","return (function() ","width","attributes-position","exception",'{}.constructor("return this")( )',"warn","index","Color","random","console","debu","attributes-stretch","Vector3","TresMeshStandardMaterial","attributes-orientation","165eRXoog","TresInstancedBufferGeometry","PlaneGeometry","test","convertSRGBToLinear","string","set","halfRootAngleCosF32","push","TresGroup","computeVertexNormals","orientationsF32","#000f00","bind","783QcMSlV","apply","translate","attributes","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","uniforms","2516661UCbana","trace","toString","16108pRAOkn","attributes-offset","Vector4","2054qVkQYr","offsetsF32","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","toneMapped","10731dmBraK","normalize","8zkGAnN","while (true) {}","attributes-halfRootAngleCos","needsUpdate","1365840hMUFNE","counter","info","alphaMap","constructor","log","222VSUoVx","sin","function *\\( *\\)","DoubleSide","length","time","input","halfRootAngleSinF32","error","stretchesF32","InstancedBufferAttribute","112435oXGWEm","material"];return(z=function(){return t})()}!function(t,n){const e=k,o=z();for(;;)try{if(167462===parseInt(e(446))/1+parseInt(e(419))/2*(parseInt(e(407))/3)+-parseInt(e(416))/4*(parseInt(e(393))/5)+-parseInt(e(435))/6*(-parseInt(e(423))/7)+parseInt(e(425))/8*(-parseInt(e(413))/9)+parseInt(e(429))/10+parseInt(e(448))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[k(408)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){A(this,(function(){const t=k,n=new RegExp(t(437)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=E(t(452));n[t(396)](o+"chain")&&e[t(396)](o+t(441))?E():o("0")}))()}();const I=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[k(408)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function k(t,n){const e=z();return(k=function(t,n){return e[t-=387]})(t,n)}I(void 0,(function(){const t=k;let n;try{n=Function(t(462)+t(466)+");")()}catch(r){n=window}const e=n[t(387)]=n[t(387)]||{},o=[t(434),t(467),t(431),t(443),t(465),t(453),t(414)];for(let i=0;i<o[t(439)];i++){const n=I.constructor[t(458)][t(406)](I),r=o[i],a=e[r]||n;n[t(451)]=I[t(406)](I),n[t(415)]=a.toString[t(406)](a),e[r]=n}}))();const C=[M(447)],S=[M(468),M(464),M(457),M(417),M(392),M(389),"attributes-halfRootAngleSin",M(427)],R=[M(460)],F=["side"],D=u({__name:"grass",props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(o){const a=M;let s,u;const v=([s,u]=p((()=>r({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),s=await s,u(),s),g=o,x=c(Math[a(470)]);function w(t,e){const o=a,r=t.x*e.w+t.y*e.z-t.z*e.y+t.w*e.x,i=-t.x*e.z+t.y*e.w+t.z*e.x+t.w*e.y,s=t.x*e.y-t.y*e.x+t.z*e.w+t.w*e.z,c=-t.x*e.x-t.y*e.y-t.z*e.z+t.w*e.w;return new(n[o(418)])(r,i,s,c)}function y(t,n){var e=2*x(t/50,n/50);return e+=4*x(t/100,n/100),e+=.2*x(t/10,n/10)}const b=function(t,o){const r=a,i=[],s=[],c=[],l=[],u=[];let p=new(n[r(418)]),f=new(n[r(418)]);const h=-.25;for(let e=0;e<t;e++){const a=Math[r(470)]()*o-o/2,m=Math.random()*o-o/2,d=y(a,m);i[r(401)](a,d,m);let v=Math.PI-Math[r(470)]()*(2*Math.PI);l[r(401)](Math[r(436)](.5*v)),u[r(401)](Math[r(454)](.5*v));let g=new(n[r(390)])(0,1,0),x=g.x*Math.sin(v/2),b=g.y*Math[r(436)](v/2),_=g.z*Math[r(436)](v/2),j=Math[r(454)](v/2);p[r(399)](x,b,_,j)[r(424)](),v=.5*Math.random()+h,g=new(n[r(390)])(1,0,0),x=g.x*Math.sin(v/2),b=g.y*Math[r(436)](v/2),_=g.z*Math[r(436)](v/2),j=Math[r(454)](v/2),f.set(x,b,_,j)[r(424)](),p=w(p,f),v=.5*Math[r(470)]()+h,g=new(n[r(390)])(0,0,1),x=g.x*Math[r(436)](v/2),b=g.y*Math.sin(v/2),_=g.z*Math[r(436)](v/2),j=Math[r(454)](v/2),f.set(x,b,_,j)[r(424)](),p=w(p,f),s.push(p.x,p.y,p.z,p.w),e<t/3?c[r(401)](1.8*Math[r(470)]()):c[r(401)](Math[r(470)]())}return{offsetsF32:new e(new Float32Array(i),3),orientationsF32:new(n[r(445)])(new Float32Array(s),4),stretchesF32:new e(new Float32Array(c),1),halfRootAngleCosF32:new(n[r(445)])(new Float32Array(u),1),halfRootAngleSinF32:new(n[r(445)])(new Float32Array(l),1)}}(g.instances,g.width),_=new t(g.bW,g.bH,1,g.joints)[a(409)](0,g.bH/2,0),j=new(n[a(395)])(g[a(463)],g[a(463)],32,32);j[a(449)](new(n[a(390)])(0,1,0));const z=j.attributes[a(455)];for(let t=0;t<z[a(456)].length;t+=3)z.array[t+1]=y(z[a(456)][t],z[a(456)][t+2]);j[a(410)][a(455)][a(428)]=!0,j[a(403)]();const A=new(l({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(n[a(469)])(.3,.9,0)[a(397)](),bottomColor:new(n[a(469)])(0,.2,0)[a(397)]()},a(421),a(411),(t=>{const e=a;t[e(461)]=n[e(438)]})));A.map=v.map,A.alphaMap=v[a(432)],A[a(422)]=!1;const{onLoop:I}=i();return I((({elapsed:t})=>{const n=a;A[n(412)][n(440)].value=t/4})),(t,e)=>{const o=a;return f(),h(o(402),null,[m("TresMesh",{material:d(A)},[m(o(394),{index:d(_)[o(468)],"attributes-position":d(_).attributes[o(455)],"attributes-uv":d(_)[o(410)].uv,"attributes-offset":d(b)[o(420)],"attributes-orientation":d(b)[o(404)],"attributes-stretch":d(b)[o(444)],"attributes-halfRootAngleSin":d(b)[o(442)],"attributes-halfRootAngleCos":d(b)[o(400)]},null,8,S)],8,C),m(o(450),{position:[0,0,0],geometry:d(j)},[m(o(391),{color:o(405),side:n[o(438)]},null,8,F)],8,R)])}}});function E(t){function n(t){const e=k;if(typeof t===e(398))return function(t){}.constructor(e(426))[e(408)](e(430));1!==(""+t/t)[e(439)]||t%20==0?function(){return!0}[e(433)]("debugger").call(e(459)):function(){return!1}[e(433)](e(388)+"gger")[e(408)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const q=O;!function(t,n){const e=O,o=L();for(;;)try{if(959329===parseInt(e(201))/1+parseInt(e(210))/2+-parseInt(e(186))/3+-parseInt(e(217))/4+-parseInt(e(203))/5+-parseInt(e(185))/6*(-parseInt(e(184))/7)+-parseInt(e(187))/8*(-parseInt(e(204))/9))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[O(206)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){H(this,(function(){const t=O,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(183),"i"),o=P(t(191));n[t(193)](o+t(213))&&e[t(193)](o+"input")?P():o("0")}))()}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[O(206)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function L(){const t=["test","length","trace","call","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","string","grass","console","618179oKnICH","stateObject","9256260vvLBJH","360NqYunH","debu","apply","info","bind","error","3017110qJNMWk","return (function() ","__proto__","chain","TresPerspectiveCamera","gger","table","1812596gDBHvm","log","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","7xFtqEM","5193516CUzgEd","4550370uqxCVa","357640RSLrOB","constructor","while (true) {}","toString","init","exception"];return(L=function(){return t})()}B(void 0,(function(){const t=O;let n;try{n=Function(t(211)+'{}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(200)]=n[t(200)]||{},o=[t(218),"warn",t(207),t(209),t(192),t(216),t(195)];for(let i=0;i<o.length;i++){const n=B[t(188)].prototype.bind(B),r=o[i],a=e[r]||n;n[t(212)]=B[t(208)](B),n[t(190)]=a[t(190)][t(208)](a),e[r]=n}}))();const T=m(q(214),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1);function O(t,n){const e=L();return(O=function(t,n){return e[t-=183]})(t,n)}const U=u({__name:q(199),setup(t){const n=v({alpha:!0,toneMapping:o,windowSize:!0,clearColor:6710886}),e=v({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=O;return f(),g(d(s),y(b(n)),{default:x((()=>[T,w(d(a),y(b(e)),null,16),(f(),g(_,null,{default:x((()=>[w(D)])),_:1})),(f(),g(_,null,{default:x((()=>[w(d(j),{texture:r(197)})])),_:1}))])),_:1},16)}}});function P(t){function n(t){const e=O;if(typeof t===e(198))return function(t){}[e(188)](e(189))[e(206)]("counter");1!==(""+t/t)[e(194)]||t%20==0?function(){return!0}.constructor(e(205)+e(215))[e(196)]("action"):function(){return!1}[e(188)](e(205)+e(215))[e(206)](e(202)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{U as default};
