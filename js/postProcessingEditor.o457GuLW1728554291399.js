import{p as t,U as n,z as e,Y as o}from"./@tresjs.IlQvaTJ91728554291399.js";import{k as r,_ as s,V as a,at as i,t as c,W as l,n as u,bg as v,b6 as f,cp as p,bn as d}from"./three.YiCjTDWq1728554291399.js";import{P as m}from"./tweakpane.yHWGBmom1728554291399.js";import{d as g,a4 as x,e as h,o as y,f as I,g as b,L as _,j as S,u as w,aj as U,ak as P,al as D,m as E}from"./@vue.JNsx1iN61728554291399.js";import{_ as A}from"./@fesjs.GdZzFg1i1728554291399.js";import"./@vueuse.nb-8z3af1728554291399.js";import"./vue-router.NPtXaYpe1728554291399.js";import"./lodash-es.kYt-_xTG1728554291399.js";import"./@qlin.yHhFDldE1728554291399.js";import"./pinia.puw_7oLs1728554291399.js";import"./@floating-ui.BPbuo5Gx1728554291399.js";import"./@juggle.7yjBMqoW1728554291399.js";!function(t,n){const e=M,o=C();for(;;)try{if(260630===-parseInt(e(356))/1+-parseInt(e(368))/2*(-parseInt(e(358))/3)+parseInt(e(316))/4*(-parseInt(e(345))/5)+parseInt(e(333))/6+-parseInt(e(332))/7*(-parseInt(e(336))/8)+parseInt(e(328))/9*(-parseInt(e(371))/10)+parseInt(e(343))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[M(326)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function M(t,n){const e=C();return(M=function(t,n){return e[t-=310]})(t,n)}!function(){L(this,(function(){const t=M,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(359),"i"),o=N("init");n[t(311)](o+t(367))&&e[t(311)](o+"input")?N():o("0")}))()}();const z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[M(326)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function C(){const t=["Texture","stateObject","Vector2","Matrix3","console","while (true) {}","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","apply","message","72azqAEb","onload","Matrix2","exception","65541LoaUeq","809904maBJeL","Vector3","warn","328dHduIR","name","toString","responseText","type","exec","send","7534043gPVYYe","Matrix4","5teAPVp","length","error","now","prototype","get",'{}.constructor("return this")( )','" load was aborted.',"onerror","replace","return (function() ","292186XRWyyi","v3v","118731syrTdr","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","hasOwnProperty","constructor","index","ShaderMaterial","gger","value","WagnerLoadShaderException","chain","2TMHYTT","lastIndex","Vector4","421790PzBRsC","table","call","test",'Shader "',"string","debu","bind","1412436cTwrRq","trace","counter"];return(C=function(){return t})()}z(void 0,(function(){const t=M,n=function(){const t=M;let n;try{n=Function(t(355)+t(351)+");")()}catch(e){n=window}return n}(),e=n[t(323)]=n[t(323)]||{},o=["log",t(335),"info",t(347),t(331),t(372),t(317)];for(let r=0;r<o[t(346)];r++){const n=z.constructor[t(349)][t(315)](z),s=o[r],a=e[s]||n;n.__proto__=z[t(315)](z),n.toString=a[t(338)][t(315)](a),e[s]=n}}))();function F(t,n,e){const o=M;if("object"!=typeof t||null===t)return t;const r=Array.isArray(t)?[]:{};for(const s in t)t[o(360)](s)&&(r[s]=F(t[s])),s==n&&(r[n]=e);return r}function N(t){function n(t){const e=M;if(typeof t===e(313))return function(t){}.constructor(e(324)).apply(e(318));1!==(""+t/t)[e(346)]||t%20==0?function(){return!0}[e(361)](e(314)+"gger")[e(310)]("action"):function(){return!1}[e(361)](e(314)+e(364))[e(326)](e(320)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const T=R;function R(t,n){const e=V();return(R=function(t,n){return e[t-=353]})(t,n)}!function(t,n){const e=R,o=V();for(;;)try{if(920888===parseInt(e(430))/1*(parseInt(e(407))/2)+-parseInt(e(383))/3+parseInt(e(412))/4*(parseInt(e(369))/5)+-parseInt(e(392))/6+-parseInt(e(437))/7+parseInt(e(390))/8*(-parseInt(e(416))/9)+parseInt(e(400))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(434)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){B(this,(function(){const t=R,n=new RegExp(t(382)),e=new RegExp(t(362),"i"),o=O(t(455));n[t(442)](o+"chain")&&e[t(442)](o+t(377))?O():o("0")}))()}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(434)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();G(void 0,(function(){const t=R;let n;try{n=Function(t(411)+t(450)+");")()}catch(r){n=window}const e=n.console=n.console||{},o=[t(378),t(408),t(449),t(381),t(421),t(355),t(354)];for(let s=0;s<o[t(448)];s++){const n=G[t(451)].prototype[t(373)](G),r=o[s],a=e[r]||n;n.__proto__=G[t(373)](G),n[t(376)]=a[t(376)][t(373)](a),e[r]=n}}))();class j{constructor(t,n){const e=R;this[e(406)]=1,this[e(388)]=1,this.settings=n||{},this.useRGBA=this[e(398)][e(413)]||!1,this[e(444)]=t,this.copyPass=this.CopyPass(this[e(398)]),this[e(456)]=new(s[e(432)]),this[e(353)]=new(s[e(429)])(new c(1,1),new(s[e(387)])),this[e(456)][e(394)](this[e(353)]),this[e(410)]=new(s[e(419)])(1,1,1,1,-1e4,1e4),this[e(415)]=new l(1,1,{minFilter:void 0!==this[e(398)][e(422)]?this[e(398)].minFilter:s[e(418)],magFilter:void 0!==this.settings.magFilter?this.settings[e(389)]:u,wrapS:void 0!==this.settings[e(417)]?this[e(398)][e(417)]:v,wrapT:void 0!==this[e(398)][e(436)]?this[e(398)][e(436)]:s[e(428)],format:this[e(413)]?s[e(386)]:s[e(372)],type:void 0!==this[e(398)][e(358)]?this[e(398)].type:s[e(368)],stencilBuffer:void 0===this[e(398)][e(367)]||this.settings[e(367)]}),this[e(454)]=this[e(415)].clone(),this[e(399)]=Date[e(359)](),this.passes={},this[e(433)]={passItems:[],passes:[]}}[T(420)](t,n,e,o){const r=T;this[r(396)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(397)]};this[r(433)][r(435)][r(364)](s)}[T(391)](t){const n=T;for(let e=this[n(433)][n(435)].length-1;e>=0;e--)this[n(433)].passItems[e][n(363)]===parseInt(t)&&this.Stack.passItems.splice(e,1);console[n(378)](this.Stack.passItems)}CopyPass(){const t=T;this[t(357)][t(375)](this);return this[t(396)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}loadShadervf(t){const n=T,e=n(443);return this[n(397)]=function(t,n){const e=M,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,c=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,l={sampler2D:{type:"t",value:()=>new(s[M(319)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(s[M(321)])},vec3:{type:"v3",value:()=>new(s[M(334)])},vec4:{type:"v4",value:()=>new(s[M(370)])},bvec2:{type:"v2",value:()=>new(s[M(321)])},bvec3:{type:"v3",value:()=>new(s[M(334)])},bvec4:{type:"v4",value:()=>new(s[M(370)])},ivec2:{type:"v2",value:()=>new(s[M(321)])},ivec3:{type:"v3",value:()=>new a},ivec4:{type:"v4",value:()=>new i},mat2:{type:"v2",value:()=>new(s[M(330)])},mat3:{type:"v3",value:()=>new(s[M(322)])},mat4:{type:"v4",value:()=>new(s[M(344)])}},u={float:{type:"fv",value:()=>[]},vec3:{type:e(357),value:()=>[]}};let v;const f={resolution:{type:"v2",value:new r(1,1),default:!0},time:{type:"f",value:Date[e(348)](),default:!0},tInput:{type:"t",value:new(s[e(319)]),default:!0}};let p,d;for(;null!==(v=o.exec(n));)v[e(362)]===o[e(369)]&&o[e(369)]++,p=v[1],d=v[2],f[d]={type:l[p][e(340)],value:l[p][e(365)]()};for(;null!==(v=c[e(341)](n));)v[e(362)]===o.lastIndex&&o[e(369)]++,p=v[1],d=v[2],v[3],f[d]={type:u[p][e(340)],value:u[p].value()};return new(s[e(363)])({uniforms:f,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(397)]}[T(357)](t){const n=T;this[n(397)]=null,this[n(441)]={}}[T(361)](){const t=T;this.read=this[t(415)],this.write=this.back}[T(424)](t,n){const e=T,o=window[e(366)],r=window[e(365)];t[e(445)](1*o,1*r),n.projectionMatrix[e(426)](70,o/r,n[e(438)],n[e(452)]),this.setSize(o,r);return this.getOfflineTexture(o,r,!0)}[T(445)](t,n){const e=T;this.width=t,this[e(388)]=n,this.camera[e(370)][e(402)](t/-2,t/2,n/2,n/-2,this[e(410)].near,this[e(410)][e(452)]),this[e(353)][e(371)][e(379)](t,n,1),this[e(415)][e(445)](t,n),this[e(454)][e(445)](t,n)}[T(403)](t,n,e){const o=T;return new l(t,n,{minFilter:s[o(418)],magFilter:s[o(418)],format:e?f:s[o(372)]})}render(t,n,e,o){const r=T;this.renderer[r(393)](this[r(431)]),this[r(444)][r(453)](t,n),o||this.swapBuffers()}[T(423)](){const t=T,n=this.write;this[t(431)]=this.read,this[t(360)]=n}[T(395)](){const t=T;for(let n=0;n<this[t(433)][t(435)].length;n++){const e=this[t(433)][t(435)][n][t(397)],o=this[t(433)][t(435)][n][t(441)];if(this[t(444)][t(393)](this.write),e instanceof s[t(446)]){this[t(353)][t(380)]=e,this[t(353)][t(380)][t(439)][t(425)][t(440)]=this[t(360)].texture,this[t(353)][t(380)][t(439)][t(404)][t(440)].set(this.width,this[t(388)]),this[t(353)].material[t(439)][t(405)][t(440)]=.001*(Date.now()-this[t(399)]);for(const n in o)this[t(353)][t(380)][t(439)][n][t(440)]=o[n];this[t(444)][t(453)](this.scene,this[t(410)]),this.swapBuffers()}}}[T(374)](t,n){const e=T;this.renderer[e(393)](null),this[e(353)][e(380)]=this[e(414)],this[e(353)][e(380)][e(439)][e(425)][e(440)]=this[e(360)][e(409)],this.quad[e(380)][e(439)][e(404)].value[e(379)](this[e(406)],this[e(388)]),this.renderer[e(453)](this[e(456)],this[e(410)])}}function V(){const t=["removePass","9818544gRumLg","setRenderTarget","add","pass","loadShadervf","shader","settings","startTime","35484750hKvmyF","debu","makeOrthographic","getOfflineTexture","resolution","time","width","3148178UUkrju","warn","texture","camera","return (function() ","44IHUzrW","useRGBA","copyPass","front","117widejG","wrapS","LinearFilter","OrthographicCamera","addPass","exception","minFilter","swapBuffers","onWindowResize","tInput","makePerspective","counter","ClampToEdgeWrapping","Mesh","1dnqgpa","write","Scene","Stack","apply","passItems","wrapT","10378207TjWgwQ","near","uniforms","value","params","test","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","renderer","setSize","ShaderMaterial","action","length","info",'{}.constructor("return this")( )',"constructor","far","render","back","init","scene","quad","trace","table","stateObject","Pass","type","now","read","Reset","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","uuid","push","innerHeight","innerWidth","stencilBuffer","UnsignedByteType","298105QpeKpI","projectionMatrix","scale","RGBFormat","bind","toScreen","call","toString","input","log","set","material","error","function *\\( *\\)","2325819CKzLMS","while (true) {}","gger","RGBAFormat","MeshBasicMaterial","height","magFilter","592744AAuPhr"];return(V=function(){return t})()}function O(t){function n(t){const e=R;if("string"==typeof t)return function(t){}[e(451)](e(384))[e(434)](e(427));1!==(""+t/t)[e(448)]||t%20==0?function(){return!0}.constructor(e(401)+e(385))[e(375)](e(447)):function(){return!1}[e(451)](e(401)+e(385))[e(434)](e(356)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const k="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",H=q;!function(t,n){const e=q,o=Z();for(;;)try{if(490376===-parseInt(e(122))/1*(parseInt(e(143))/2)+-parseInt(e(124))/3*(-parseInt(e(166))/4)+parseInt(e(123))/5+-parseInt(e(171))/6*(parseInt(e(178))/7)+-parseInt(e(115))/8*(parseInt(e(181))/9)+-parseInt(e(174))/10+-parseInt(e(125))/11*(-parseInt(e(167))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const W=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(164)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){W(this,(function(){const t=q,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(150),"i"),o=$("init");n[t(172)](o+"chain")&&e.test(o+"input")?$():o("0")}))()}();const X=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function q(t,n){const e=Z();return(q=function(t,n){return e[t-=113]})(t,n)}function Z(){const t=["plugins/postProcessing/image/1324-normal.jpg","CIRCULARPass","length","map","push","random","action","新增通道","error","keys","2KFZznY","onWindowResize","BoxGeometry","TOONPass","value","string","bind","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","translate","关闭通道","DENOISEPass","SNOISEPass","VIGNETTE1Pass","Mesh","FXAAPass","prototype","click","removePass","VIGNETTE2Pass","gger","call","apply","InvertPass","68KAvsQD","15694716BBYpNS","split","postProcessing","castShadow","1992bLbIdp","test","toScreen","8841560MiIKcO","target","autoClearColor",'{}.constructor("return this")( )',"889gAJrMx","while (true) {}","exception","31338lJvJVN","change","constructor","table","debu","list","pass","values","712uOLLxR","Vector2","addBlade","DOTPass","material","addPass","add","759901zdwZyb","4325865YmNbcM","55311amQunT","11yijNGE","text","BOXBLURPass","BufferGeometry","toString","RGBPass","addButton","Reset"];return(Z=function(){return t})()}X(void 0,(function(){const t=q,n=function(){const t=q;let n;try{n=Function("return (function() "+t(177)+");")()}catch(e){n=window}return n}(),e=n.console=n.console||{},o=["log","warn","info",t(141),t(180),t(184),"trace"];for(let r=0;r<o[t(135)];r++){const n=X[t(183)][t(158)][t(149)](X),s=o[r],a=e[s]||n;n.__proto__=X.bind(X),n.toString=a[t(129)].bind(a),e[s]=n}}))();function $(t){function n(t){const e=q;if(typeof t===e(148))return function(t){}[e(183)](e(179))[e(164)]("counter");1!==(""+t/t)[e(135)]||t%20==0?function(){return!0}[e(183)]("debugger")[e(163)](e(139)):function(){return!1}[e(183)](e(185)+e(162)).apply("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const K=A(g({__name:H(169),async setup(o){const r=H;let a,i;const{camera:c,renderer:l,scene:u,sizes:v}=t();for(var f=new(s[r(128)]),g=[],h=0;h<100;h++){var y=new(s[r(145)])(100,100,100);y[r(151)](1500*Math.random(),1500*Math.random(),1500*Math[r(138)]()),g[r(137)](y)}f=p(g);const I=([a,i]=x((()=>e({map:"plugins/postProcessing/image/1324.jpg"}))),a=await a,i(),a),b=([a,i]=x((()=>e({map:r(133)}))),a=await a,i(),a);var _=new d({map:I[r(136)],normalMap:b[r(136)],normalScale:new(s[r(116)])(.8,-.8),shininess:100}),S=new(s[r(156)])(f,_);S[r(170)]=!0,S.receiveShadow=!0,u.value[r(121)](S);const w=new j(l[r(147)],{useRGBA:!0}),U=new m;let P=null,D=[{text:r(165),value:{InvertPass:k}},{text:r(157),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:"SEPIAPass",value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:r(154),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:r(127),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:r(153),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:"CGAPass",value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:b[r(136)]}}},{text:"SOBELPass",value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:r(130),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:r(118),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:r(134),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:"POISSONPass",value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:r(155),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:r(161),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:"FREICHENPass",value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:r(146),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],E=r(165),A=k,L=null;U[r(117)]({view:r(186),label:"后处理类型",options:D,value:""}).on(r(182),(t=>{P=t[r(147)]}));const M=U[r(131)]({title:"新增",label:r(140)});let z=0;M.on(r(159),(t=>{const n=r;E=Object[n(142)](P)[0],A=Object[n(114)](P)[0],L=Object[n(114)](P)[1];let e=z++,o=U.addFolder({title:E});for(const r in L){let t=L[r];o[n(117)]({view:n(126),label:r,parse:t=>String(t),value:t})}o[n(131)]({title:"移除~"+e,label:n(152)}).on(n(159),(t=>{const e=n;let o=t[e(175)].title[e(168)]("~")[1];w[e(160)](o)})).on(n(159),(()=>{o.dispose()}));let s=F(L,t[n(175)].label,t[n(147)]);w[n(120)](E,A,s,e)})),w[r(144)](l[r(147)],c.value);const{onLoop:C}=n();return C((({delta:t})=>{const n=r;S&&(l[n(147)][n(176)]=!0,w[n(132)](),S[n(119)]=_,w.render(u[n(147)],c[n(147)]),w[n(113)](),w[n(173)](u[n(147)],c[n(147)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),Y=ot;!function(t,n){const e=ot,o=st();for(;;)try{if(671603===-parseInt(e(342))/1*(parseInt(e(325))/2)+-parseInt(e(340))/3+parseInt(e(323))/4+parseInt(e(312))/5+parseInt(e(344))/6+parseInt(e(319))/7*(-parseInt(e(335))/8)+-parseInt(e(337))/9*(-parseInt(e(313))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const J=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[ot(318)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){J(this,(function(){const t=ot,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(330),"i"),o=at(t(332));n.test(o+t(347))&&e[t(315)](o+t(350))?at():o("0")}))()}();const Q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();Q(void 0,(function(){const t=ot,n=function(){const t=ot;let n;try{n=Function(t(346)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(339)]=n[t(339)]||{},o=[t(320),"warn","info",t(327),"exception",t(336),t(321)];for(let r=0;r<o[t(326)];r++){const n=Q[t(316)][t(343)][t(341)](Q),s=o[r],a=e[s]||n;n.__proto__=Q.bind(Q),n[t(333)]=a[t(333)][t(341)](a),e[s]=n}}))();const tt={ref:"perspectiveCameraRef",position:[600,850,-1500],fov:45,near:.1,far:1e5},nt=_(Y(338),{color:Y(322),intensity:2},null,-1),et=_("TresDirectionalLight",{position:[100,100,0],intensity:2,color:"#ffffff"},null,-1);function ot(t,n){const e=st();return(ot=function(t,n){return e[t-=312]})(t,n)}const rt=g({__name:"postProcessingEditor",setup(t){const e={clearColor:"#000000",shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:"manual"},r={autoRotate:!0,enableDamping:!0},{onLoop:s}=n();return s((({delta:t})=>{})),(t,n)=>{const s=ot,a=h(s(328));return y(),I(a,E(e,{"window-size":""}),{default:b((()=>[_(s(331),tt,null,512),S(w(o),U(P(r)),null,16),nt,et,(y(),I(D,null,{default:b((()=>[S(K)])),_:1}))])),_:1},16)}}});function st(){const t=["call","test","constructor","stateObject","apply","7HxsFpl","log","trace","#ffffff","246448kddlVn","while (true) {}","582Dlauky","length","error","TresCanvas","gger","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","TresPerspectiveCamera","init","toString","action","6635544ASXIbc","table","2853NPhjlL","TresAmbientLight","console","2595570KbNSwI","bind","2987vOkZXk","prototype","1768422zRiCcd","counter","return (function() ","chain","debu","string","input","1726615qaDHcj","79930GRLkFu"];return(st=function(){return t})()}function at(t){function n(t){const e=ot;if(typeof t===e(349))return function(t){}[e(316)](e(324)).apply(e(345));1!==(""+t/t)[e(326)]||t%20==0?function(){return!0}[e(316)](e(348)+e(329))[e(314)](e(334)):function(){return!1}[e(316)]("debu"+e(329)).apply(e(317)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{rt as default};
