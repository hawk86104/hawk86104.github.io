import{p as t,N as n,$ as e,d as o}from"./@tresjs.bNNpPzYW1722507394274.js";import{a6 as r,al as s,V as a,q as i,r as c,Y as l,O as u,l as v,b3 as f,y as p,W as d,bZ as m}from"./three.Brogx0uK1722507394274.js";import{P as x}from"./tweakpane.BCjFYDHx1722507394274.js";import{d as g,a4 as h,e as y,o as I,f as b,g as _,J as S,j as w,u as U,aj as P,ak as D,al as E,m as A}from"./@vue.CFXy4cc91722507394274.js";import{_ as M}from"./@fesjs.HUfyfxyE1722507394274.js";import"./@vueuse.CY5GWLAn1722507394274.js";import"./vue-router.B7QAPA1N1722507394274.js";import"./lodash-es.X8SAORSL1722507394274.js";import"./@qlin.BIlp8Yi21722507394274.js";import"./pinia.CScY4tX71722507394274.js";import"./vue-demi.Dq6ymT-81722507394274.js";import"./@babel.DOgRMOv71722507394274.js";import"./@amap.B-BVafMU1722507394274.js";import"./@floating-ui.B75jtkXD1722507394274.js";import"./@juggle.BnTvdTVm1722507394274.js";function L(t,n){const e=z();return(L=function(t,n){return e[t-=417]})(t,n)}!function(t,n){const e=L,o=z();for(;;)try{if(598897===-parseInt(e(436))/1*(parseInt(e(453))/2)+-parseInt(e(420))/3+-parseInt(e(458))/4*(-parseInt(e(447))/5)+-parseInt(e(473))/6+parseInt(e(476))/7*(parseInt(e(470))/8)+-parseInt(e(444))/9+-parseInt(e(474))/10*(-parseInt(e(448))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(463)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){C(this,(function(){const t=L,n=new RegExp(t(427)),e=new RegExp(t(432),"i"),o=T(t(418));n.test(o+t(431))&&e[t(478)](o+"input")?T():o("0")}))()}();const F=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(463)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();F(void 0,(function(){const t=L,n=function(){const t=L;let n;try{n=Function(t(434)+t(484)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(485)]||{},o=[t(460),t(452),"info","error",t(472),t(456),t(441)];for(let r=0;r<o[t(475)];r++){const n=F.constructor[t(468)][t(454)](F),s=o[r],a=e[s]||n;n[t(421)]=F.bind(F),n[t(450)]=a[t(450)].bind(a),e[s]=n}}))();function z(){const t=["Texture","hasOwnProperty","WagnerLoadShaderException","isArray","lastIndex",'{}.constructor("return this")( )',"console","string","init","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","3390162leCINB","__proto__",'Shader "',"send","onabort","call","counter","function *\\( *\\)","Vector3","object","type","chain","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","exec","return (function() ","open","44546uYMbwl","replace","Vector4","index","gger","trace","ShaderMaterial","now","7051257YCTfXd",'" load was aborted.',"responseText","7465VhooiS","1573YifyeC","debu","toString","Matrix4","warn","8egXBwJ","bind","Matrix3","table","value","996IQmNLM","random","log","\" couldn't be loaded.","stateObject","apply","get","Vector2","v3v","constructor","prototype","message","7327552PoxpBa","onload","exception","499752bMBxUK","103930VyRdZD","length","7HXJYkj","name","test"];return(z=function(){return t})()}function N(t,n,e){const o=L;if(typeof t!==o(429)||null===t)return t;const r=Array[o(482)](t)?[]:{};for(const s in t)t[o(480)](s)&&(r[s]=N(t[s])),s==n&&(r[n]=e);return r}function T(t){function n(t){const e=L;if(typeof t===e(417))return function(t){}[e(467)]("while (true) {}").apply(e(426));1!==(""+t/t)[e(475)]||t%20==0?function(){return!0}[e(467)](e(449)+"gger")[e(425)]("action"):function(){return!1}[e(467)](e(449)+e(440))[e(463)](e(462)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const G=O;!function(t,n){const e=O,o=j();for(;;)try{if(538856===-parseInt(e(431))/1+parseInt(e(403))/2+-parseInt(e(375))/3*(-parseInt(e(443))/4)+parseInt(e(442))/5+parseInt(e(453))/6+parseInt(e(396))/7*(parseInt(e(461))/8)+-parseInt(e(409))/9*(parseInt(e(395))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const R=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[O(449)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){R(this,(function(){const t=O,n=new RegExp(t(381)),e=new RegExp(t(400),"i"),o=H("init");n[t(385)](o+t(451))&&e[t(385)](o+t(388))?H():o("0")}))()}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[O(449)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function j(){const t=["chain","makePerspective","4536234mUEPqZ","while (true) {}","passes","camera","loadShadervf","Stack","Reset","RGBAFormat","8MaYbOh","settings","log","shader","resolution","bind","set","info","near","4995auAvaV","warn","back","ClampToEdgeWrapping","value","clone","function *\\( *\\)","length","write","exception","test","read","constructor","input","now","magFilter","pass","setRenderTarget","quad","Scene","460PlPEvf","1109906GDFDda","setSize","uuid","passItems","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","ShaderMaterial","splice","627724PJFsAf","height","projectionMatrix","removePass","stencilBuffer","toString","285183fVzhcR","gger","wrapS","copyPass","width","startTime","console","useRGBA","getOfflineTexture","prototype","front","swapBuffers","WebGLRenderTarget","scale","action","addPass","LinearFilter","texture","render","uniforms","far","params","138492uenyCc","minFilter","__proto__","return (function() ","Pass","debu","toScreen","type","RGBFormat","material","table","4066255hIsCZV","224GQpvmO","add","time","renderer","counter","call","apply","scene"];return(j=function(){return t})()}B(void 0,(function(){const t=O,n=function(){const t=O;let n;try{n=Function(t(434)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(415)]=n.console||{},o=["log",t(376),t(373),"error",t(384),t(441),"trace"];for(let r=0;r<o[t(382)];r++){const n=B[t(387)][t(418)][t(466)](B),s=o[r],a=e[s]||n;n[t(433)]=B[t(466)](B),n.toString=a[t(408)][t(466)](a),e[s]=n}}))();class V{constructor(t,n){const e=O;this.width=1,this[e(404)]=1,this[e(462)]=n||{},this[e(416)]=this[e(462)][e(416)]||!1,this.renderer=t,this[e(412)]=this.CopyPass(this.settings),this[e(450)]=new(r[e(394)]),this[e(393)]=new i(new c(1,1),new l),this.scene[e(444)](this[e(393)]),this[e(456)]=new u(1,1,1,1,-1e4,1e4),this[e(419)]=new(r[e(421)])(1,1,{minFilter:void 0!==this[e(462)].minFilter?this[e(462)][e(432)]:r[e(425)],magFilter:void 0!==this[e(462)].magFilter?this[e(462)][e(390)]:v,wrapS:void 0!==this[e(462)][e(411)]?this[e(462)].wrapS:f,wrapT:void 0!==this[e(462)].wrapT?this[e(462)].wrapT:r[e(378)],format:this[e(416)]?r[e(460)]:r[e(439)],type:void 0!==this[e(462)][e(438)]?this[e(462)][e(438)]:p,stencilBuffer:void 0===this.settings.stencilBuffer||this[e(462)][e(407)]}),this[e(377)]=this.front[e(380)](),this.startTime=Date[e(389)](),this[e(455)]={},this[e(458)]={passItems:[],passes:[]}}[G(424)](t,n,e,o){const r=G;this[r(457)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(464)]};this[r(458)][r(399)].push(s)}[G(406)](t){const n=G;for(let e=this[n(458)][n(399)].length-1;e>=0;e--)this[n(458)].passItems[e][n(398)]===parseInt(t)&&this[n(458)][n(399)][n(402)](e,1);console[n(463)](this[n(458)][n(399)])}CopyPass(){const t=G;this[t(435)][t(448)](this);return this[t(457)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[G(457)](t){const n=G;return this[n(464)]=function(t,n){const e=L,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,i=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,c={sampler2D:{type:"t",value:()=>new(r[L(479)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[L(465)])},vec3:{type:"v3",value:()=>new(r[L(428)])},vec4:{type:"v4",value:()=>new(r[L(438)])},bvec2:{type:"v2",value:()=>new(r[L(465)])},bvec3:{type:"v3",value:()=>new(r[L(428)])},bvec4:{type:"v4",value:()=>new s},ivec2:{type:"v2",value:()=>new(r[L(465)])},ivec3:{type:"v3",value:()=>new a},ivec4:{type:"v4",value:()=>new(r[L(438)])},mat2:{type:"v2",value:()=>new(void 0)},mat3:{type:"v3",value:()=>new(r[L(455)])},mat4:{type:"v4",value:()=>new(r[L(451)])}},l={float:{type:"fv",value:()=>[]},vec3:{type:e(466),value:()=>[]}};let u;const v={resolution:{type:"v2",value:new(r[e(465)])(1,1),default:!0},time:{type:"f",value:Date[e(443)](),default:!0},tInput:{type:"t",value:new(r[e(479)]),default:!0}};let f,p;for(;null!==(u=o[e(433)](n));)u[e(439)]===o[e(483)]&&o[e(483)]++,f=u[1],p=u[2],v[p]={type:c[f][e(430)],value:c[f].value()};for(;null!==(u=i.exec(n));)u[e(439)]===o.lastIndex&&o[e(483)]++,f=u[1],p=u[2],u[3],v[p]={type:l[f].type,value:l[f][e(457)]()};return new(r[e(442)])({uniforms:v,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}("varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }",t),this[n(464)]}Pass(t){const n=G;this[n(464)]=null,this[n(430)]={}}[G(459)](){const t=G;this[t(386)]=this.front,this[t(383)]=this.back}onWindowResize(t,n){const e=G,o=window.innerWidth,r=window.innerHeight;t[e(397)](1*o,1*r),n[e(405)][e(452)](70,o/r,n[e(374)],n[e(429)]),this[e(397)](o,r);return this[e(417)](o,r,!0)}setSize(t,n){const e=G;this.width=t,this[e(404)]=n,this[e(456)][e(405)].makeOrthographic(t/-2,t/2,n/2,n/-2,this[e(456)][e(374)],this.camera[e(429)]),this[e(393)][e(422)].set(t,n,1),this.front[e(397)](t,n),this.back[e(397)](t,n)}[G(417)](t,n,e){const o=G;return new d(t,n,{minFilter:r[o(425)],magFilter:r[o(425)],format:e?r[o(460)]:r[o(439)]})}render(t,n,e,o){const r=G;this.renderer[r(392)](this[r(383)]),this.renderer[r(427)](t,n),o||this[r(420)]()}[G(420)](){const t=G,n=this.write;this[t(383)]=this[t(386)],this.read=n}[G(391)](){const t=G;for(let n=0;n<this[t(458)][t(399)].length;n++){const e=this[t(458)][t(399)][n][t(464)],o=this[t(458)][t(399)][n][t(430)];if(this[t(446)][t(392)](this[t(383)]),e instanceof r[t(401)]){this[t(393)][t(440)]=e,this[t(393)][t(440)][t(428)].tInput[t(379)]=this[t(386)].texture,this[t(393)].material.uniforms[t(465)][t(379)][t(372)](this[t(413)],this.height),this[t(393)][t(440)].uniforms[t(445)][t(379)]=.001*(Date[t(389)]()-this[t(414)]);for(const n in o)this[t(393)].material[t(428)][n].value=o[n];this.renderer[t(427)](this[t(450)],this[t(456)]),this[t(420)]()}}}[G(437)](t,n){const e=G;this.renderer[e(392)](null),this[e(393)][e(440)]=this[e(412)],this[e(393)].material[e(428)].tInput.value=this.read[e(426)],this[e(393)].material[e(428)].resolution[e(379)][e(372)](this[e(413)],this[e(404)]),this.renderer.render(this.scene,this[e(456)])}}function O(t,n){const e=j();return(O=function(t,n){return e[t-=372]})(t,n)}function H(t){function n(t){const e=O;if("string"==typeof t)return function(t){}[e(387)](e(454))[e(449)](e(447));1!==(""+t/t)[e(382)]||t%20==0?function(){return!0}.constructor(e(436)+e(410))[e(448)](e(423)):function(){return!1}[e(387)](e(436)+e(410)).apply("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const k="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}";!function(t,n){const e=q,o=Z();for(;;)try{if(835958===parseInt(e(214))/1+-parseInt(e(244))/2*(parseInt(e(261))/3)+-parseInt(e(234))/4+parseInt(e(257))/5*(parseInt(e(258))/6)+-parseInt(e(227))/7+-parseInt(e(228))/8+parseInt(e(217))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const W=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(197)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){W(this,(function(){const t=q,n=new RegExp(t(253)),e=new RegExp(t(220),"i"),o=Y("init");n[t(203)](o+t(218))&&e[t(203)](o+"input")?Y():o("0")}))()}();const X=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(197)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function Z(){const t=["info","POISSONPass","error","text","map","value","pass","4EzGWwN","toString","InvertPass","values","DENOISEPass","DOTPass","关闭通道","addButton","string","function *\\( *\\)","FXAAPass",'{}.constructor("return this")( )',"label","10xcAosQ","3761286IHdlcG","push","length","2362413tRYJrY","while (true) {}","console","CIRCULARPass","target","RGBPass","BoxGeometry","counter","MeshPhongMaterial","render","apply","bind","addBlade","BOXBLURPass","新增通道","plugins/postProcessing/image/1324-normal.jpg","test","keys","removePass","addFolder","trace","add","constructor","debu","SOBELPass","BufferGeometry","title","317531NGHGMR","translate","gger","32519907wVGEhw","chain","toScreen","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","Reset","random","Vector2","table","Mesh","list","8318044NGHpOv","9117832JZRXjY","SEPIAPass","click","exception","stateObject","FREICHENPass","1782780kitDHc","addPass","change"];return(Z=function(){return t})()}X(void 0,(function(){const t=q,n=function(){const t=q;let n;try{n=Function("return (function() "+t(255)+");")()}catch(e){n=window}return n}(),e=n[t(263)]=n[t(263)]||{},o=["log","warn",t(237),t(239),t(231),t(224),t(207)];for(let r=0;r<o.length;r++){const n=X[t(209)].prototype[t(198)](X),s=o[r],a=e[s]||n;n.__proto__=X[t(198)](X),n[t(245)]=a[t(245)].bind(a),e[s]=n}}))();function q(t,n){const e=Z();return(q=function(t,n){return e[t-=190]})(t,n)}function Y(t){function n(t){const e=q;if(typeof t===e(252))return function(t){}.constructor(e(262)).apply(e(194));1!==(""+t/t)[e(260)]||t%20==0?function(){return!0}.constructor(e(210)+e(216)).call("action"):function(){return!1}[e(209)]("debu"+e(216))[e(197)](e(232)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const $=M(g({__name:"postProcessing",async setup(o){const s=q;let a,i;const{camera:c,renderer:l,scene:u,sizes:v}=t();for(var f=new(r[s(212)]),p=[],d=0;d<100;d++){var g=new(r[s(193)])(100,100,100);g[s(215)](1500*Math[s(222)](),1500*Math[s(222)](),1500*Math.random()),p[s(259)](g)}f=m(p);const y=([a,i]=h((()=>n({map:"plugins/postProcessing/image/1324.jpg"}))),a=await a,i(),a),I=([a,i]=h((()=>n({map:s(202)}))),a=await a,i(),a);var b=new(r[s(195)])({map:y[s(241)],normalMap:I.map,normalScale:new(r[s(223)])(.8,-.8),shininess:100}),_=new(r[s(225)])(f,b);_.castShadow=!0,_.receiveShadow=!0,u[s(242)][s(208)](_);const S=new V(l[s(242)],{useRGBA:!0}),w=new x;let U=null,P=[{text:s(246),value:{InvertPass:k}},{text:s(254),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:s(229),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:"SNOISEPass",value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:s(200),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:s(248),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:"CGAPass",value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:I.map}}},{text:s(211),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:s(192),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:s(249),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(190),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:s(238),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:"VIGNETTE1Pass",value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:"VIGNETTE2Pass",value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:s(233),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:"TOONPass",value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],D=s(246),E=k,A=null;w[s(199)]({view:s(226),label:"后处理类型",options:P,value:""}).on(s(236),(t=>{U=t[s(242)]}));const M=w[s(251)]({title:"新增",label:s(201)});let L=0;M.on(s(230),(t=>{const n=s;D=Object[n(204)](U)[0],E=Object[n(247)](U)[0],A=Object[n(247)](U)[1];let e=L++,o=w[n(206)]({title:D});for(const s in A){let t=A[s];o[n(199)]({view:n(240),label:s,parse:t=>String(t),value:t})}o[n(251)]({title:"移除~"+e,label:n(250)}).on(n(230),(t=>{const e=n;let o=t[e(191)][e(213)].split("~")[1];S[e(205)](o)})).on(n(230),(()=>{o.dispose()}));let r=N(A,t.target[n(256)],t[n(242)]);S[n(235)](D,E,r,e)})),S.onWindowResize(l[s(242)],c.value);const{onLoop:C}=e();return C((({delta:t})=>{const n=s;_&&(l[n(242)].autoClearColor=!0,S[n(221)](),_.material=b,S[n(196)](u[n(242)],c.value),S[n(243)](),S[n(219)](u[n(242)],c[n(242)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]);function J(t,n){const e=rt();return(J=function(t,n){return e[t-=436]})(t,n)}const Q=J;!function(t,n){const e=J,o=rt();for(;;)try{if(682945===-parseInt(e(482))/1*(-parseInt(e(445))/2)+-parseInt(e(468))/3+-parseInt(e(448))/4*(-parseInt(e(462))/5)+parseInt(e(443))/6+parseInt(e(459))/7*(parseInt(e(457))/8)+parseInt(e(438))/9*(parseInt(e(465))/10)+-parseInt(e(466))/11*(parseInt(e(481))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const K=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[J(474)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){K(this,(function(){const t=J,n=new RegExp(t(472)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=at(t(455));n.test(o+"chain")&&e[t(449)](o+t(439))?at():o("0")}))()}();const tt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[J(474)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();tt(void 0,(function(){const t=J;let n;try{n=Function(t(483)+t(473)+");")()}catch(r){n=window}const e=n[t(471)]=n[t(471)]||{},o=[t(467),"warn",t(444),t(440),t(437),t(447),t(480)];for(let s=0;s<o[t(453)];s++){const n=tt[t(450)][t(461)][t(475)](tt),r=o[s],a=e[r]||n;n[t(446)]=tt[t(475)](tt),n[t(454)]=a[t(454)][t(475)](a),e[r]=n}}))();const nt={ref:Q(477),position:[600,850,-1500],fov:45,near:.1,far:1e5},et=S(Q(469),{color:Q(452),intensity:2},null,-1),ot=S(Q(479),{position:[100,100,0],intensity:2,color:"#ffffff"},null,-1);function rt(){const t=["counter","call","1003930sZKxQZ","237589iNCpCA","log","2270262YNBukq","TresAmbientLight","postProcessingEditor","console","function *\\( *\\)",'{}.constructor("return this")( )',"apply","bind","action","perspectiveCameraRef","gger","TresDirectionalLight","trace","1068zEIMyt","49RjvFtc","return (function() ","TresCanvas","exception","9TruhPl","input","error","#000000","stateObject","2106450RGYpdi","info","25222spmJkI","__proto__","table","121312Sjkxzt","test","constructor","TresPerspectiveCamera","#ffffff","length","toString","init","manual","21352tTxpAY","while (true) {}","2513YVLxcR","debu","prototype","220idibGS"];return(rt=function(){return t})()}const st=g({__name:Q(470),setup(t){const n=Q,r={clearColor:n(441),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:n(456)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=e();return a((({delta:t})=>{})),(t,e)=>{const a=n,i=y(a(436));return I(),b(i,A(r,{"window-size":""}),{default:_((()=>[S(a(451),nt,null,512),w(U(o),P(D(s)),null,16),et,ot,(I(),b(E,null,{default:_((()=>[w($)])),_:1}))])),_:1},16)}}});function at(t){function n(t){const e=J;if("string"==typeof t)return function(t){}[e(450)](e(458))[e(474)](e(463));1!==(""+t/t)[e(453)]||t%20==0?function(){return!0}.constructor(e(460)+e(478))[e(464)](e(476)):function(){return!1}[e(450)](e(460)+"gger")[e(474)](e(442)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{st as default};
