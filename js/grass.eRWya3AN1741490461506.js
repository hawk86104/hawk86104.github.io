import{_ as t,T as n,ai as e}from"./three.Vxh8Czkt1741490461506.js";import{e as o,a as r,o as i,f as a}from"./@tresjs.rE98Wm941741490461506.js";import"./index.k4DMll4J1741490461506.js";import{c as s}from"./simplex-noise.jB2HxhHB1741490461506.js";import{C as c}from"./index.CQdDy-wE1741490461506.js";import{d as l,a3 as u,o as f,H as p,N as h,u as m,r as d,f as v,g,j as x,aj as w,ak as y,al as b}from"./@vue.NRI7TcgI1741490461506.js";import{_}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.ilOOQOLo1741490461506.js";import"./postprocessing.wUw4_rsV1741490461506.js";import"./@vueuse.9Z-Ayxy41741490461506.js";import"./lamina.KkS8mf6a1741490461506.js";import"./glsl-tokenizer.OL0FglwD1741490461506.js";import"./@amap.TO4JQn7s1741490461506.js";import"./glsl-token-descope.-1HTzlsp1741490461506.js";import"./glsl-token-depth.oDGevtYT1741490461506.js";import"./glsl-token-scope.5WxLFSmj1741490461506.js";import"./glsl-token-properties.w7_KHOpX1741490461506.js";import"./glsl-token-assignments.NOaFtsIH1741490461506.js";import"./glsl-token-string.pnDNc_vL1741490461506.js";import"./glsl-token-functions.1kgcNozn1741490461506.js";import"./object-hash.bPWYxSd_1741490461506.js";import"./jszip.6x-WYzg11741490461506.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.rZTED_091741490461506.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.uAMtDlD51741490461506.js";import"./three-stdlib.2KPeCEvi1741490461506.js";import"./@pmndrs.VkB-hYkG1741490461506.js";import"./utils.roSHm5sF1741490461506.js";const j=M;function M(t,n){const e=A();return(M=function(t,n){return e[t-=483]})(t,n)}!function(t,n){const e=M,o=A();for(;;)try{if(432278===parseInt(e(501))/1+-parseInt(e(515))/2+-parseInt(e(540))/3+parseInt(e(551))/4+-parseInt(e(527))/5+-parseInt(e(499))/6*(parseInt(e(535))/7)+parseInt(e(534))/8)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[M(486)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function A(){const t=["convertSRGBToLinear","while (true) {}","3723780uiJxCc","random","init","debu","test","lookAt","attributes-offset","14620288dUTvjz","21lJWlZo","Vector3","attributes","position","gger","2027370sEXdaB","console","bind","attributes-orientation","attributes-halfRootAngleSin","computeVertexNormals","TresMesh","material","geometry","uniforms","info","1874180LWDfns","sin","error","__proto__","push","halfRootAngleCosF32","prototype","set","stretchesF32","apply","halfRootAngleSinF32","width","attributes-position","attributes-stretch","constructor","Vector4","TresMeshStandardMaterial","PlaneGeometry","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","alphaMap","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","instances","1519374bdejeb","Color","640876XhBouL","exception","TresInstancedBufferGeometry","call","InstancedBufferAttribute","string","index","toString","cos",'{}.constructor("return this")( )',"counter","TresGroup","orientationsF32","array","648892bxYDAS","map","trace","needsUpdate","DoubleSide","time","stateObject","normalize","length","toneMapped"];return(A=function(){return t})()}!function(){z(this,(function(){const t=M,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(495),"i"),o=R(t(529));n.test(o+"chain")&&e[t(531)](o+"input")?R():o("0")}))()}();const I=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();I(void 0,(function(){const t=M;let n;try{n=Function("return (function() "+t(510)+");")()}catch(r){n=window}const e=n[t(541)]=n[t(541)]||{},o=["log","warn",t(550),t(553),t(502),"table",t(517)];for(let i=0;i<o[t(523)];i++){const n=I.constructor[t(483)][t(542)](I),r=o[i],a=e[r]||n;n[t(554)]=I.bind(I),n.toString=a[t(508)].bind(a),e[r]=n}}))();const C=[j(547)],S=[j(507),j(489),"attributes-uv",j(533),j(543),j(490),j(544),"attributes-halfRootAngleCos"],k=[j(548)],F=["side"],D=l({__name:"grass",props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(e){const i=j;let a,l;const d=([a,l]=u((()=>r({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),a=await a,l(),a),v=e,g=s(Math[i(528)]);function x(n,e){const o=i,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,a=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,s=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,c=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(492)])(r,a,s,c)}function w(t,n){var e=2*g(t/50,n/50);return e+=4*g(t/100,n/100),e+=.2*g(t/10,n/10)}const y=function(e,o){const r=i,a=[],s=[],c=[],l=[],u=[];let f=new(t[r(492)]),p=new(t[r(492)]);const h=-.25;for(let n=0;n<e;n++){const i=Math[r(528)]()*o-o/2,m=Math[r(528)]()*o-o/2,d=w(i,m);a.push(i,d,m);let v=Math.PI-Math[r(528)]()*(2*Math.PI);l.push(Math[r(552)](.5*v)),u[r(555)](Math.cos(.5*v));let g=new(t[r(536)])(0,1,0),y=g.x*Math[r(552)](v/2),b=g.y*Math[r(552)](v/2),_=g.z*Math[r(552)](v/2),j=Math[r(509)](v/2);f.set(y,b,_,j)[r(522)](),v=.5*Math[r(528)]()+h,g=new(t[r(536)])(1,0,0),y=g.x*Math[r(552)](v/2),b=g.y*Math.sin(v/2),_=g.z*Math.sin(v/2),j=Math[r(509)](v/2),p[r(484)](y,b,_,j)[r(522)](),f=x(f,p),v=.5*Math[r(528)]()+h,g=new(t[r(536)])(0,0,1),y=g.x*Math[r(552)](v/2),b=g.y*Math[r(552)](v/2),_=g.z*Math[r(552)](v/2),j=Math[r(509)](v/2),p[r(484)](y,b,_,j)[r(522)](),f=x(f,p),s.push(f.x,f.y,f.z,f.w),n<e/3?c[r(555)](1.8*Math[r(528)]()):c.push(Math.random())}return{offsetsF32:new(t[r(505)])(new Float32Array(a),3),orientationsF32:new(t[r(505)])(new Float32Array(s),4),stretchesF32:new n(new Float32Array(c),1),halfRootAngleCosF32:new(t[r(505)])(new Float32Array(u),1),halfRootAngleSinF32:new(t[r(505)])(new Float32Array(l),1)}}(v[i(498)],v[i(488)]),b=new(t[i(494)])(v.bW,v.bH,1,v.joints).translate(0,v.bH/2,0),_=new(t[i(494)])(v[i(488)],v[i(488)],32,32);_[i(532)](new(t[i(536)])(0,1,0));const M=_[i(537)][i(538)];for(let t=0;t<M[i(514)][i(523)];t+=3)M[i(514)][t+1]=w(M[i(514)][t],M[i(514)][t+2]);_.attributes[i(538)][i(518)]=!0,_[i(545)]();const z=new(c({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(t[i(500)])(.3,.9,0)[i(525)](),bottomColor:new(t[i(500)])(0,.2,0)[i(525)]()},"   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }",i(497),(n=>{const e=i;n.side=t[e(519)]})));z.map=d[i(516)],z[i(496)]=d.alphaMap,z[i(524)]=!1;const{onLoop:A}=o();return A((({elapsed:t})=>{const n=i;z[n(549)][n(520)].value=t/4})),(n,e)=>{const o=i;return f(),p(o(512),null,[h(o(546),{material:m(z)},[h(o(503),{index:m(b)[o(507)],"attributes-position":m(b).attributes[o(538)],"attributes-uv":m(b).attributes.uv,"attributes-offset":m(y).offsetsF32,"attributes-orientation":m(y)[o(513)],"attributes-stretch":m(y)[o(485)],"attributes-halfRootAngleSin":m(y)[o(487)],"attributes-halfRootAngleCos":m(y)[o(556)]},null,8,S)],8,C),h(o(546),{position:[0,0,0],geometry:m(_)},[h(o(493),{color:"#000f00",side:t[o(519)]},null,8,F)],8,k)])}}});function R(t){function n(t){const e=M;if(typeof t===e(506))return function(t){}[e(491)](e(526))[e(486)](e(511));1!==(""+t/t)[e(523)]||t%20==0?function(){return!0}[e(491)](e(530)+"gger")[e(504)]("action"):function(){return!1}[e(491)]("debu"+e(539))[e(486)](e(521)),n(++t)}try{if(t)return n;n(0)}catch(e){}}!function(t,n){const e=B,o=T();for(;;)try{if(997105===parseInt(e(264))/1+-parseInt(e(284))/2+-parseInt(e(268))/3*(-parseInt(e(270))/4)+parseInt(e(263))/5*(parseInt(e(267))/6)+-parseInt(e(262))/7+parseInt(e(287))/8*(parseInt(e(259))/9)+-parseInt(e(273))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const E=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[B(265)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function T(){const t=["constructor","exception",'{}.constructor("return this")( )',"error","prototype","bind","string","toString","table","length","3825946fUrbEt","info","warn","1400024FKGSib","counter","log","init","debu","function *\\( *\\)","27iikUqA","trace","chain","1824333sVLdgm","10dpfNQW","248402VftwSL","apply","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","2689482EsAOsx","326658afBVVZ","test","68whFPCf","TresPerspectiveCamera","return (function() ","3502700wrhTOr"];return(T=function(){return t})()}!function(){E(this,(function(){const t=B,n=new RegExp(t(258)),e=new RegExp(t(266),"i"),o=P(t(256));n.test(o+t(261))&&e[t(269)](o+"input")?P():o("0")}))()}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[B(265)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function B(t,n){const e=T();return(B=function(t,n){return e[t-=254]})(t,n)}L(void 0,(function(){const t=B,n=function(){const t=B;let n;try{n=Function(t(272)+t(276)+");")()}catch(e){n=window}return n}(),e=n.console=n.console||{},o=[t(255),t(286),t(285),t(277),t(275),t(282),t(260)];for(let r=0;r<o[t(283)];r++){const n=L.constructor[t(278)].bind(L),i=o[r],a=e[i]||n;n.__proto__=L[t(279)](L),n[t(281)]=a[t(281)][t(279)](a),e[i]=n}}))();const O=l({__name:"grass",setup(t){const n=d({alpha:!0,toneMapping:e,windowSize:!0,clearColor:6710886}),o=d({enableDamping:!0,autoRotate:!1});return(t,e)=>{const r=B;return f(),v(m(a),w(y(n)),{default:g((()=>[e[0]||(e[0]=h(r(271),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),x(m(i),w(y(o)),null,16),(f(),v(b,null,{default:g((()=>[x(D)])),_:1})),(f(),v(b,null,{default:g((()=>[x(m(_),{texture:"https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr"})])),_:1}))])),_:1},16)}}});function P(t){function n(t){const e=B;if(typeof t===e(280))return function(t){}[e(274)]("while (true) {}").apply(e(254));1!==(""+t/t).length||t%20==0?function(){return!0}[e(274)](e(257)+"gger").call("action"):function(){return!1}[e(274)](e(257)+"gger")[e(265)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{O as default};
