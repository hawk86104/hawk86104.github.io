import{s as t,a5 as n,V as e,aj as o,K as r,Z as a,ab as i}from"./three.HHcT7YAr1718612273914.js";import{r as s,N as c,d as l,P as u}from"./@tresjs.W42D3qe_1718612273914.js";import"./index.FfOSsCyI1718612273914.js";import{a as f}from"./simplex-noise.MycypUyu1718612273914.js";import{C as p}from"./index.gLXaRzp41718612273914.js";import{d as h,a3 as m,o as d,D as v,J as g,u as x,r as w,f as y,g as b,j as _,aj as j,ak as M,al as z}from"./@vue.CpOXM7bB1718612273914.js";import{_ as A}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.I5x5-5EA1718612273914.js";import"./@vueuse.YjRg4c7n1718612273914.js";import"./tweakpane.qqn77PB81718612273914.js";import"./lamina.AheoqacU1718612273914.js";import"./glsl-tokenizer.yImbcCwc1718612273914.js";import"./@amap.zA6BxCQR1718612273914.js";import"./glsl-token-descope.61xp-EZv1718612273914.js";import"./glsl-token-depth.4I12_5-Z1718612273914.js";import"./glsl-token-scope.GxY2Spy61718612273914.js";import"./glsl-token-properties.ogKN24PT1718612273914.js";import"./glsl-token-assignments.3j6AUEVT1718612273914.js";import"./glsl-token-string.GsokCkw11718612273914.js";import"./glsl-token-functions.M4ENNoPy1718612273914.js";import"./object-hash.NQGxxEoE1718612273914.js";import"./jszip.ceBEBY8K1718612273914.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.8o5MZ8bt1718612273914.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.Yob2c1yp1718612273914.js";import"./three-stdlib.eIANyClj1718612273914.js";import"./@pmndrs.GoGkK4yp1718612273914.js";import"./utils.dWba5xFt1718612273914.js";const I=C;!function(t,n){const e=C,o=P();for(;;)try{if(660378===-parseInt(e(229))/1+parseInt(e(279))/2+-parseInt(e(270))/3+-parseInt(e(248))/4*(parseInt(e(276))/5)+parseInt(e(218))/6+parseInt(e(235))/7*(parseInt(e(292))/8)+parseInt(e(217))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const k=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function C(t,n){const e=P();return(C=function(t,n){return e[t-=216]})(t,n)}!function(){k(this,(function(){const t=C,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(284),"i"),o=O(t(274));n[t(266)](o+t(240))&&e[t(266)](o+t(228))?O():o("0")}))()}();const S=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(239)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();S(void 0,(function(){const t=C;let n;try{n=Function(t(234)+t(291)+");")()}catch(r){n=window}const e=n[t(225)]=n[t(225)]||{},o=[t(293),t(216),t(230),t(272),t(244),t(258),t(220)];for(let a=0;a<o[t(238)];a++){const n=S[t(221)].prototype[t(233)](S),r=o[a],i=e[r]||n;n.__proto__=S[t(233)](S),n[t(219)]=i[t(219)][t(233)](i),e[r]=n}}))();const F=[I(288)],R=[I(273),I(287),"attributes-uv","attributes-offset",I(275),I(283),I(296),I(286)],D=[I(264)],T=["side"],L=h({__name:I(252),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(i){const l=I;let u,h;const w=([u,h]=m((()=>c({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),u=await u,h(),u),y=i,b=f(Math[l(262)]);function _(t,e){const o=l,r=t.x*e.w+t.y*e.z-t.z*e.y+t.w*e.x,a=-t.x*e.z+t.y*e.w+t.z*e.x+t.w*e.y,i=t.x*e.y-t.y*e.x+t.z*e.w+t.w*e.z,s=-t.x*e.x-t.y*e.y-t.z*e.z+t.w*e.w;return new(n[o(281)])(r,a,i,s)}function j(t,n){var e=2*b(t/50,n/50);return e+=4*b(t/100,n/100),e+=.2*b(t/10,n/10)}const M=function(t,e){const a=l,i=[],s=[],c=[],u=[],f=[];let p=new(n[a(281)]),h=new o;const m=-.25;for(let o=0;o<t;o++){const r=Math.random()*e-e/2,l=Math[a(262)]()*e-e/2,d=j(r,l);i[a(289)](r,d,l);let v=Math.PI-Math[a(262)]()*(2*Math.PI);u.push(Math[a(250)](.5*v)),f[a(289)](Math[a(241)](.5*v));let g=new(n[a(269)])(0,1,0),x=g.x*Math.sin(v/2),w=g.y*Math[a(250)](v/2),y=g.z*Math[a(250)](v/2),b=Math.cos(v/2);p[a(236)](x,w,y,b)[a(268)](),v=.5*Math[a(262)]()+m,g=new(n[a(269)])(1,0,0),x=g.x*Math[a(250)](v/2),w=g.y*Math[a(250)](v/2),y=g.z*Math[a(250)](v/2),b=Math[a(241)](v/2),h[a(236)](x,w,y,b)[a(268)](),p=_(p,h),v=.5*Math[a(262)]()+m,g=new(n[a(269)])(0,0,1),x=g.x*Math[a(250)](v/2),w=g.y*Math.sin(v/2),y=g.z*Math[a(250)](v/2),b=Math[a(241)](v/2),h[a(236)](x,w,y,b)[a(268)](),p=_(p,h),s[a(289)](p.x,p.y,p.z,p.w),o<t/3?c.push(1.8*Math.random()):c[a(289)](Math[a(262)]())}return{offsetsF32:new(n[a(277)])(new Float32Array(i),3),orientationsF32:new r(new Float32Array(s),4),stretchesF32:new(n[a(277)])(new Float32Array(c),1),halfRootAngleCosF32:new(n[a(277)])(new Float32Array(f),1),halfRootAngleSinF32:new(n[a(277)])(new Float32Array(u),1)}}(y[l(256)],y[l(285)]),z=new t(y.bW,y.bH,1,y[l(295)])[l(251)](0,y.bH/2,0),A=new(n[l(227)])(y[l(285)],y[l(285)],32,32);A.lookAt(new e(0,1,0));const k=A[l(280)][l(245)];for(let t=0;t<k.array.length;t+=3)k[l(271)][t+1]=j(k.array[t],k[l(271)][t+2]);A[l(280)][l(245)].needsUpdate=!0,A[l(255)]();const C=new(p({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(n[l(249)])(.3,.9,0)[l(263)](),bottomColor:new(n[l(249)])(0,.2,0).convertSRGBToLinear()},l(226),"\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }",(t=>{t[l(232)]=a})));C[l(267)]=w[l(267)],C.alphaMap=w[l(265)],C[l(257)]=!1;const{onLoop:S}=s();return S((({elapsed:t})=>{const n=l;C[n(278)][n(237)][n(242)]=t/4})),(t,e)=>{const o=l;return d(),v(o(224),null,[g(o(254),{material:x(C)},[g(o(261),{index:x(z)[o(273)],"attributes-position":x(z)[o(280)][o(245)],"attributes-uv":x(z)[o(280)].uv,"attributes-offset":x(M)[o(290)],"attributes-orientation":x(M)[o(223)],"attributes-stretch":x(M)[o(247)],"attributes-halfRootAngleSin":x(M)[o(246)],"attributes-halfRootAngleCos":x(M)[o(231)]},null,8,R)],8,F),g(o(254),{position:[0,0,0],geometry:x(A)},[g("TresMeshStandardMaterial",{color:"#000f00",side:n[o(282)]},null,8,T)],8,D)])}}});function O(t){function n(t){const e=C;if("string"==typeof t)return function(t){}[e(221)](e(253)).apply(e(222));1!==(""+t/t)[e(238)]||t%20==0?function(){return!0}[e(221)](e(243)+e(260)).call(e(294)):function(){return!1}.constructor("debu"+e(260)).apply(e(259)),n(++t)}try{if(t)return n;n(0)}catch(e){}}function P(){const t=["map","normalize","Vector3","1433346ojczSK","array","error","index","init","attributes-orientation","5fOqsXA","InstancedBufferAttribute","uniforms","1472800sWjEFN","attributes","Vector4","DoubleSide","attributes-stretch","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","width","attributes-halfRootAngleCos","attributes-position","material","push","offsetsF32",'{}.constructor("return this")( )',"197576lFLAaR","log","action","joints","attributes-halfRootAngleSin","warn","8765874zbLKhp","5334006kgYzUH","toString","trace","constructor","counter","orientationsF32","TresGroup","console","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","PlaneGeometry","input","918629OkqOUP","info","halfRootAngleCosF32","side","bind","return (function() ","77zIaNym","set","time","length","apply","chain","cos","value","debu","exception","position","halfRootAngleSinF32","stretchesF32","3257060cdUTFc","Color","sin","translate","grass","while (true) {}","TresMesh","computeVertexNormals","instances","toneMapped","table","stateObject","gger","TresInstancedBufferGeometry","random","convertSRGBToLinear","geometry","alphaMap","test"];return(P=function(){return t})()}const B=N;!function(t,n){const e=N,o=H();for(;;)try{if(734122===-parseInt(e(338))/1*(-parseInt(e(312))/2)+-parseInt(e(332))/3*(-parseInt(e(339))/4)+-parseInt(e(322))/5*(parseInt(e(318))/6)+parseInt(e(313))/7+parseInt(e(310))/8*(-parseInt(e(344))/9)+parseInt(e(328))/10*(-parseInt(e(319))/11)+parseInt(e(340))/12)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const E=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[N(315)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){E(this,(function(){const t=N,n=new RegExp(t(326)),e=new RegExp(t(327),"i"),o=V(t(321));n[t(337)](o+t(306))&&e.test(o+t(334))?V():o("0")}))()}();const U=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[N(315)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function H(){const t=["error","test","9pxkIJc","2584uqGdJB","23196396oWfNcR","exception","__proto__","toString","9DGLNWI","chain","constructor","return (function() ","bind","6424216JmbPwo","string","160322DhStTM","3418688AVuLcP",'{}.constructor("return this")( )',"apply","action","warn","4801002pLpKYT","154JsZBug","trace","init","5OwrTpf","prototype","console","length","function *\\( *\\)","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","923310bZDfSU","log","TresPerspectiveCamera","debu","2262Xuefwj","grass","input","gger"];return(H=function(){return t})()}function N(t,n){const e=H();return(N=function(t,n){return e[t-=306]})(t,n)}U(void 0,(function(){const t=N,n=function(){const t=N;let n;try{n=Function(t(308)+t(314)+");")()}catch(e){n=window}return n}(),e=n[t(324)]=n[t(324)]||{},o=[t(329),t(317),"info",t(336),t(341),"table",t(320)];for(let r=0;r<o.length;r++){const n=U[t(307)][t(323)][t(309)](U),a=o[r],i=e[a]||n;n[t(342)]=U[t(309)](U),n.toString=i[t(343)].bind(i),e[a]=n}}))();const q=g(B(330),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1),G=h({__name:B(333),setup(t){const n=w({alpha:!0,toneMapping:i,windowSize:!0,clearColor:6710886}),e=w({enableDamping:!0,autoRotate:!1});return(t,o)=>(d(),y(x(u),j(M(n)),{default:b((()=>[q,_(x(l),j(M(e)),null,16),(d(),y(z,null,{default:b((()=>[_(L)])),_:1})),(d(),y(z,null,{default:b((()=>[_(x(A),{texture:"https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr"})])),_:1}))])),_:1},16))}});function V(t){function n(t){const e=N;if(typeof t===e(311))return function(t){}[e(307)]("while (true) {}")[e(315)]("counter");1!==(""+t/t)[e(325)]||t%20==0?function(){return!0}[e(307)]("debu"+e(335)).call(e(316)):function(){return!1}[e(307)](e(331)+"gger").apply("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{G as default};
