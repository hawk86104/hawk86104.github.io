import{m as t,e as n,a as e,o}from"./@tresjs.Uh9iM8du1742436572432.js";import{V as r,_ as s,Y as a,b as i,r as c,s as l,aR as u,c3 as v}from"./three.RUAk_tvU1742436572432.js";import{P as f}from"./tweakpane.yDiyAAkA1742436572432.js";import{d as p,a3 as m,e as d,o as g,f as x,g as h,N as y,j as I,u as b,aj as _,ak as S,al as U,m as w}from"./@vue.deO5D3Lf1742436572432.js";import{_ as D}from"./@fesjs.40Mt4LlK1742436572432.js";import"./postprocessing.5QD_59xS1742436572432.js";import"./@vueuse.F4UpVCIS1742436572432.js";import"./vue-router.EzCcHFzL1742436572432.js";import"./lodash-es.p1wj6C0b1742436572432.js";import"./@qlin.yHhFDldE1742436572432.js";import"./pinia.9br8mKkJ1742436572432.js";import"./@floating-ui.BPbuo5Gx1742436572432.js";import"./@juggle.7yjBMqoW1742436572432.js";!function(t,n){const e=L,o=M();for(;;)try{if(943363===parseInt(e(504))/1+parseInt(e(511))/2+parseInt(e(479))/3+parseInt(e(491))/4*(-parseInt(e(507))/5)+-parseInt(e(521))/6+parseInt(e(506))/7*(-parseInt(e(483))/8)+parseInt(e(517))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const P=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(470)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){P(this,(function(){const t=L,n=new RegExp(t(494)),e=new RegExp(t(485),"i"),o=C("init");n[t(496)](o+"chain")&&e[t(496)](o+t(501))?C():o("0")}))()}();const E=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(470)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function L(t,n){const e=M();return(L=function(t,n){return e[t-=465]})(t,n)}E(void 0,(function(){const t=L,n=function(){const t=L;let n;try{n=Function("return (function() "+t(524)+");")()}catch(e){n=window}return n}(),e=n[t(481)]=n[t(481)]||{},o=[t(497),"warn","info",t(489),t(510),t(520),t(482)];for(let r=0;r<o.length;r++){const n=E[t(515)][t(512)][t(513)](E),s=o[r],a=e[s]||n;n[t(474)]=E[t(513)](E),n[t(477)]=a[t(477)][t(513)](a),e[s]=n}}))();function A(t,n,e){const o=L;if(typeof t!==o(525)||null===t)return t;const r=Array[o(493)](t)?[]:{};for(const s in t)t[o(473)](s)&&(r[s]=A(t[s])),s==n&&(r[n]=e);return r}function M(){const t=["exception","380590KsrgsD","prototype","bind","gger","constructor","string","8160219hrNuPL","random","responseText","table","6730572zvcvXN",'" load was aborted.',"Vector2",'{}.constructor("return this")( )',"object","Matrix2","open","Vector3","action","message","apply","Matrix4","type","hasOwnProperty","__proto__","Texture","value","toString","onload","4515387YtisAh","name","console","trace","9236048vVMOCN","debu","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","replace","onerror","exec","error","Matrix3","48040zGjhXf","lastIndex","isArray","function *\\( *\\)",'Shader "',"test","log","v3v","length","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","input","Vector4","WagnerLoadShaderException","1326106NSqqeY","ShaderMaterial","7xCoHlc","295zNQeCQ","call","stateObject"];return(M=function(){return t})()}function C(t){function n(t){const e=L;if(typeof t===e(516))return function(t){}[e(515)]("while (true) {}").apply("counter");1!==(""+t/t)[e(499)]||t%20==0?function(){return!0}.constructor(e(484)+"gger")[e(508)](e(468)):function(){return!1}[e(515)](e(484)+e(514))[e(470)](e(509)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const z=F;function F(t,n){const e=R();return(F=function(t,n){return e[t-=364]})(t,n)}!function(t,n){const e=F,o=R();for(;;)try{if(770189===-parseInt(e(384))/1*(-parseInt(e(430))/2)+-parseInt(e(456))/3+parseInt(e(392))/4*(parseInt(e(441))/5)+-parseInt(e(410))/6*(-parseInt(e(457))/7)+parseInt(e(391))/8*(parseInt(e(447))/9)+parseInt(e(423))/10*(-parseInt(e(409))/11)+-parseInt(e(375))/12*(parseInt(e(449))/13))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const N=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[F(468)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){N(this,(function(){const t=F,n=new RegExp(t(451)),e=new RegExp(t(450),"i"),o=j(t(455));n.test(o+t(377))&&e.test(o+t(433))?j():o("0")}))()}();const T=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[F(468)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function R(){const t=["__proto__","bind","setSize","near","getOfflineTexture","toString","275ugczUE","444jkLNfc","action","addPass","innerWidth","counter","resolution","CopyPass","LinearFilter","read","stencilBuffer",'{}.constructor("return this")( )',"console","width","61030QpvySl","camera","prototype","far","render","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","WebGLRenderTarget","20GssUiJ","params","uniforms","input","constructor","ClampToEdgeWrapping","string","length","renderer","loadShadervf","RGBFormat","99765URqdNg","Scene","copyPass","scene","quad","texture","27MPhQzR","pass","13aLSXVf","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","function *\\( *\\)","return (function() ","gger","write","init","1903344mjjUVd","68383AcYYpa","material","passItems","OrthographicCamera","uuid","Pass","scale","front","time","ShaderMaterial","type","apply","useRGBA","info","wrapS","wrapT","swapBuffers","minFilter","trace","clone","RGBAFormat","toScreen","debu","value","tInput","shader","setRenderTarget","24300636LNnpoW","warn","chain","height","makeOrthographic","innerHeight","push","table","settings","126461kylIvd","set","call","back","startTime","Reset","removePass","2071136BaOwqS","164QHSwqy","MeshBasicMaterial","Stack","makePerspective","now","add","passes","log","UnsignedByteType","while (true) {}","magFilter"];return(R=function(){return t})()}T(void 0,(function(){const t=F,n=function(){const t=F;let n;try{n=Function(t(452)+t(420)+");")()}catch(e){n=window}return n}(),e=n[t(421)]=n[t(421)]||{},o=[t(399),t(376),t(470),"error","exception",t(382),t(366)];for(let r=0;r<o[t(437)];r++){const n=T[t(434)][t(425)].bind(T),s=o[r],a=e[s]||n;n[t(403)]=T.bind(T),n.toString=a[t(408)][t(404)](a),e[s]=n}}))();class B{constructor(t,n){const e=F;this.width=1,this[e(378)]=1,this[e(383)]=n||{},this[e(469)]=this.settings[e(469)]||!1,this[e(438)]=t,this[e(443)]=this[e(416)](this.settings),this[e(444)]=new(s[e(442)]),this[e(445)]=new c(new l(1,1),new(s[e(393)])),this.scene[e(397)](this[e(445)]),this.camera=new(s[e(460)])(1,1,1,1,-1e4,1e4),this[e(464)]=new(s[e(429)])(1,1,{minFilter:void 0!==this.settings[e(365)]?this[e(383)][e(365)]:s[e(417)],magFilter:void 0!==this[e(383)][e(402)]?this[e(383)][e(402)]:s[e(417)],wrapS:void 0!==this[e(383)][e(471)]?this[e(383)][e(471)]:s[e(435)],wrapT:void 0!==this.settings[e(472)]?this[e(383)][e(472)]:s[e(435)],format:this[e(469)]?u:s[e(440)],type:void 0!==this[e(383)][e(467)]?this[e(383)][e(467)]:s[e(400)],stencilBuffer:void 0===this.settings[e(419)]||this.settings[e(419)]}),this[e(387)]=this[e(464)][e(367)](),this[e(388)]=Date[e(396)](),this[e(398)]={},this.Stack={passItems:[],passes:[]}}[z(412)](t,n,e,o){const r=z;this[r(439)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(373)]};this[r(394)].passItems[r(381)](s)}[z(390)](t){const n=z;for(let e=this[n(394)][n(459)][n(437)]-1;e>=0;e--)this[n(394)][n(459)][e][n(461)]===parseInt(t)&&this.Stack[n(459)].splice(e,1);console[n(399)](this.Stack[n(459)])}CopyPass(){this[z(462)].call(this);return this.loadShadervf("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[z(439)](t){const n=z,e=n(428);return this.shader=function(t,n){const e=L,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,c=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,l={sampler2D:{type:"t",value:()=>new a},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new r},vec3:{type:"v3",value:()=>new i},vec4:{type:"v4",value:()=>new(s[L(502)])},bvec2:{type:"v2",value:()=>new r},bvec3:{type:"v3",value:()=>new(s[L(467)])},bvec4:{type:"v4",value:()=>new(s[L(502)])},ivec2:{type:"v2",value:()=>new(s[L(523)])},ivec3:{type:"v3",value:()=>new(s[L(467)])},ivec4:{type:"v4",value:()=>new(s[L(502)])},mat2:{type:"v2",value:()=>new(s[L(465)])},mat3:{type:"v3",value:()=>new(s[L(490)])},mat4:{type:"v4",value:()=>new(s[L(471)])}},u={float:{type:"fv",value:()=>[]},vec3:{type:e(498),value:()=>[]}};let v;const f={resolution:{type:"v2",value:new r(1,1),default:!0},time:{type:"f",value:Date.now(),default:!0},tInput:{type:"t",value:new(s[e(475)]),default:!0}};let p,m;for(;null!==(v=o[e(488)](n));)v.index===o[e(492)]&&o[e(492)]++,p=v[1],m=v[2],f[m]={type:l[p].type,value:l[p][e(476)]()};for(;null!==(v=c[e(488)](n));)v.index===o[e(492)]&&o[e(492)]++,p=v[1],m=v[2],v[3],f[m]={type:u[p][e(472)],value:u[p].value()};return new(s[e(505)])({uniforms:f,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(373)]}[z(462)](t){this[z(373)]=null,this.params={}}[z(389)](){const t=z;this.read=this[t(464)],this[t(454)]=this.back}onWindowResize(t,n){const e=z,o=window[e(413)],r=window[e(380)];t[e(405)](1*o,1*r),n.projectionMatrix[e(395)](70,o/r,n[e(406)],n[e(426)]),this[e(405)](o,r);return this[e(407)](o,r,!0)}[z(405)](t,n){const e=z;this[e(422)]=t,this[e(378)]=n,this[e(424)].projectionMatrix[e(379)](t/-2,t/2,n/2,n/-2,this[e(424)].near,this.camera[e(426)]),this[e(445)][e(463)].set(t,n,1),this[e(464)][e(405)](t,n),this[e(387)][e(405)](t,n)}getOfflineTexture(t,n,e){const o=z;return new(s[o(429)])(t,n,{minFilter:s[o(417)],magFilter:s[o(417)],format:e?s[o(368)]:s[o(440)]})}[z(427)](t,n,e,o){const r=z;this[r(438)][r(374)](this[r(454)]),this[r(438)][r(427)](t,n),o||this.swapBuffers()}[z(364)](){const t=z,n=this[t(454)];this.write=this[t(418)],this[t(418)]=n}[z(448)](){const t=z;for(let n=0;n<this[t(394)].passItems[t(437)];n++){const e=this[t(394)][t(459)][n].shader,o=this.Stack.passItems[n][t(431)];if(this.renderer[t(374)](this[t(454)]),e instanceof s[t(466)]){this[t(445)][t(458)]=e,this[t(445)].material.uniforms.tInput.value=this[t(418)][t(446)],this.quad[t(458)].uniforms.resolution[t(371)][t(385)](this[t(422)],this[t(378)]),this.quad[t(458)][t(432)][t(465)].value=.001*(Date[t(396)]()-this[t(388)]);for(const n in o)this[t(445)][t(458)][t(432)][n][t(371)]=o[n];this[t(438)][t(427)](this[t(444)],this[t(424)]),this.swapBuffers()}}}[z(369)](t,n){const e=z;this[e(438)][e(374)](null),this[e(445)].material=this[e(443)],this[e(445)][e(458)][e(432)][e(372)][e(371)]=this.read.texture,this[e(445)][e(458)][e(432)][e(415)][e(371)].set(this[e(422)],this[e(378)]),this[e(438)].render(this[e(444)],this[e(424)])}}function j(t){function n(t){const e=F;if(typeof t===e(436))return function(t){}[e(434)](e(401))[e(468)](e(414));1!==(""+t/t)[e(437)]||t%20==0?function(){return!0}[e(434)]("debu"+e(453))[e(386)](e(411)):function(){return!1}[e(434)](e(370)+e(453))[e(468)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const G="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",O=W;!function(t,n){const e=W,o=H();for(;;)try{if(322548===-parseInt(e(208))/1+-parseInt(e(180))/2+-parseInt(e(215))/3+-parseInt(e(231))/4+parseInt(e(212))/5+parseInt(e(204))/6*(-parseInt(e(202))/7)+parseInt(e(195))/8)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const V=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[W(191)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){V(this,(function(){const t=W,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(197),"i"),o=X(t(217));n[t(221)](o+"chain")&&e.test(o+t(219))?X():o("0")}))()}();const k=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function H(){const t=["map","2678030aasZya","constructor","addBlade","960423RLKMZk","call","init","change","input","render","test","push","return (function() ","BoxGeometry","__proto__","click","target","plugins/postProcessing/image/1324.jpg","SOBELPass","Vector2","514332qqSNKI","addButton","console","receiveShadow","add","DOTPass","while (true) {}","material","info","BufferGeometry","value","gger","split","POISSONPass","error","toString","mergeGeometries","values","移除~","RGBPass","关闭通道","bind","Mesh","797216FcVuEA","length","title",'{}.constructor("return this")( )',"addFolder","action","VIGNETTE2Pass","stateObject","VIGNETTE1Pass","prototype","random","apply","keys","toScreen","postProcessing","9237104jfLJUL","InvertPass","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","castShadow","新增通道","debu","MeshPhongMaterial","699783pHUxoB","log","6KNPHzR","list","SEPIAPass","后处理类型","420395jPObdL","onWindowResize","SNOISEPass"];return(H=function(){return t})()}function W(t,n){const e=H();return(W=function(t,n){return e[t-=161]})(t,n)}k(void 0,(function(){const t=W;let n;try{n=Function(t(223)+t(183)+");")()}catch(r){n=window}const e=n.console=n[t(233)]||{},o=[t(203),"warn",t(165),t(171),"exception","table","trace"];for(let s=0;s<o[t(181)];s++){const n=k.constructor[t(189)][t(178)](k),r=o[s],a=e[r]||n;n[t(225)]=k[t(178)](k),n[t(172)]=a.toString[t(178)](a),e[r]=n}}))();function X(t){function n(t){const e=W;if("string"==typeof t)return function(t){}[e(213)](e(163))[e(191)]("counter");1!==(""+t/t)[e(181)]||t%20==0?function(){return!0}[e(213)](e(200)+e(168))[e(216)](e(185)):function(){return!1}.constructor(e(200)+e(168))[e(191)](e(187)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const q=D(p({__name:O(194),async setup(o){const r=O;let a,i;const{camera:c,renderer:l,scene:u,sizes:p}=t();for(var d=new(s[r(166)]),g=[],x=0;x<100;x++){var h=new(s[r(224)])(100,100,100);h.translate(1500*Math.random(),1500*Math[r(190)](),1500*Math.random()),g[r(222)](h)}d=v[r(173)](g);const y=([a,i]=m((()=>e({map:r(228)}))),a=await a,i(),a),I=([a,i]=m((()=>e({map:"plugins/postProcessing/image/1324-normal.jpg"}))),a=await a,i(),a);var b=new(s[r(201)])({map:y.map,normalMap:I[r(211)],normalScale:new(s[r(230)])(.8,-.8),shininess:100}),_=new(s[r(179)])(d,b);_[r(198)]=!0,_[r(234)]=!0,u.value[r(161)](_);const S=new B(l[r(167)],{useRGBA:!0}),U=new f;let w=null,D=[{text:r(196),value:{InvertPass:G}},{text:"FXAAPass",value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:r(206),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:r(210),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:"BOXBLURPass",value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:"DENOISEPass",value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:"CGAPass",value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:I[r(211)]}}},{text:r(229),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:r(176),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:r(162),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:"CIRCULARPass",value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:r(170),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:r(188),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:r(186),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:"FREICHENPass",value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:"TOONPass",value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],P=r(196),E=G,L=null;U[r(214)]({view:r(205),label:r(207),options:D,value:""}).on(r(218),(t=>{w=t[r(167)]}));const M=U[r(232)]({title:"新增",label:r(199)});let C=0;M.on(r(226),(t=>{const n=r;P=Object[n(192)](w)[0],E=Object[n(174)](w)[0],L=Object[n(174)](w)[1];let e=C++,o=U[n(184)]({title:P});for(const r in L){let t=L[r];o.addBlade({view:"text",label:r,parse:t=>String(t),value:t})}o[n(232)]({title:n(175)+e,label:n(177)}).on("click",(t=>{const e=n;let o=t.target[e(182)][e(169)]("~")[1];S.removePass(o)})).on(n(226),(()=>{o.dispose()}));let s=A(L,t[n(227)].label,t[n(167)]);S.addPass(P,E,s,e)})),S[r(209)](l[r(167)],c[r(167)]);const{onLoop:z}=n();return z((({delta:t})=>{const n=r;_&&(l[n(167)].autoClearColor=!0,S.Reset(),_[n(164)]=b,S[n(220)](u[n(167)],c[n(167)]),S.pass(),S[n(193)](u[n(167)],c[n(167)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),Z=J;!function(t,n){const e=J,o=$();for(;;)try{if(536973===-parseInt(e(407))/1+parseInt(e(423))/2+-parseInt(e(441))/3*(parseInt(e(414))/4)+-parseInt(e(428))/5+-parseInt(e(424))/6+parseInt(e(438))/7*(parseInt(e(432))/8)+-parseInt(e(442))/9*(-parseInt(e(415))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[J(437)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function $(){const t=["test","bind","apply","42cTtcyc",'{}.constructor("return this")( )',"constructor","1898727jBEaeO","9fDYmBD","console","TresCanvas","length","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","533374RJjiwS","string","gger","toString","trace","init","postProcessingEditor","4bQaDIB","10123710DeQuOf","exception","TresDirectionalLight","input","return (function() ","#ffffff","debu","warn","1956516OZxiAs","1576350QcJsvC","__proto__","manual","while (true) {}","1610130sDWfSJ","prototype","counter","info","396504bymEAl","chain","perspectiveCameraRef"];return($=function(){return t})()}!function(){Q(this,(function(){const t=J,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(406),"i"),o=nt(t(412));n[t(435)](o+t(433))&&e[t(435)](o+t(418))?nt():o("0")}))()}();const Y=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[J(437)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function J(t,n){const e=$();return(J=function(t,n){return e[t-=405]})(t,n)}Y(void 0,(function(){const t=J,n=function(){const t=J;let n;try{n=Function(t(419)+t(439)+");")()}catch(e){n=window}return n}(),e=n[t(443)]=n[t(443)]||{},o=["log",t(422),t(431),"error",t(416),"table",t(411)];for(let r=0;r<o[t(405)];r++){const n=Y[t(440)][t(429)][t(436)](Y),s=o[r],a=e[s]||n;n[t(425)]=Y[t(436)](Y),n[t(410)]=a[t(410)][t(436)](a),e[s]=n}}))();const K={ref:Z(434),position:[600,850,-1500],fov:45,near:.1,far:1e5},tt=p({__name:Z(413),setup(t){const e=Z,r={clearColor:"#000000",shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(426)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=d(a(444));return g(),x(i,w(r,{"window-size":""}),{default:h((()=>[y("TresPerspectiveCamera",K,null,512),I(b(o),_(S(s)),null,16),n[0]||(n[0]=y("TresAmbientLight",{color:a(420),intensity:2},null,-1)),n[1]||(n[1]=y(a(417),{position:[100,100,0],intensity:2,color:"#ffffff"},null,-1)),(g(),x(U,null,{default:h((()=>[I(q)])),_:1}))])),_:1},16)}}});function nt(t){function n(t){const e=J;if(typeof t===e(408))return function(t){}[e(440)](e(427))[e(437)](e(430));1!==(""+t/t)[e(405)]||t%20==0?function(){return!0}.constructor(e(421)+e(409)).call("action"):function(){return!1}[e(440)]("debu"+e(409))[e(437)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{tt as default};
