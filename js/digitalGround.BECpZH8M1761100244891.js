import{r as e,_ as a,K as r}from"./@tresjs.DqJWjmrH1761100244891.js";import{P as n}from"./tweakpane.CqZAnw7f1761100244891.js";import{_ as o}from"./reflectorDUDV.vue_vue_type_script_setup_true_lang.C3soJrEE1761100244891.js";import{d as t,w as i,G as l,o as s,I as u,a9 as v,aa as m,r as f,g as p,b as d,e as g,h as c,u as x,m as h}from"./@vue.CKlgtJke1761100244891.js";import{k as w,as as j,aE as _,r as P,az as C,a6 as G}from"./three.DvmzhRS91761100244891.js";import"./postprocessing.CYU4Fj-U1761100244891.js";import"./@vueuse.mZcBai3M1761100244891.js";import"./dither.glsl.tNAdkJUa1761100244891.js";import"./Reflector.C-cnab8L1761100244891.js";import"./OimoPhysicsBuffer.RP9_cA631761100244891.js";import"./oimophysics.CfVKSiAm1761100244891.js";import"./vite-plugin-qiankun.B06WoCqG1761100244891.js";import"./utils.CNife3_q1761100244891.js";const D=["rotateX"],b=["args"],y=t({__name:"digitalGround",props:{size:{default:10},speed:{default:1},color:{default:"#FFFFFF"}},setup(r){const n=r,{textures:o,isLoading:t}=e(["./plugins/floor/image/digitalGround1.png","./plugins/floor/image/digitalGround2.png","./plugins/floor/image/digitalGround3.png","./plugins/floor/image/digitalGround4.png"]),f={uniforms:{time:{value:0},radius:{value:n.size},uColor:{value:new w(n.color)},texture0:{value:null},texture1:{value:null},texture2:{value:null},texture3:{value:null}},vertexShader:"\n        varying vec3 vPosition;\n        varying vec2 vUv;\n        void main(){\n            vPosition = position;\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }\n    ",fragmentShader:"\n        uniform float time;\n        uniform float radius;\n\n        uniform sampler2D texture0;\n        uniform sampler2D texture1;\n        uniform sampler2D texture2;\n        uniform sampler2D texture3;\n\n        varying vec3 vPosition;\n        uniform vec3 uColor;\n        varying vec2 vUv;\n\n        float wave(float a, float l, float s, float second, float val) {\n            float PI = 3.141592653;\n            float wave = a * sin(- val * 2.0 * PI / l + second * s * 2.0 * PI / l);\n            return (wave + 1.0) / 2.0;\n        }\n        void main(){\n            vec4 basceColor = vec4(uColor, 1.0);\n            vec4 back = texture2D( texture0, vUv * 16.0);\n\n            vec4 ori1 = texture2D( texture1, vUv * 4.0); // 电子元件\n            vec4 ori2 = texture2D( texture2, vUv * 16.0 ); // 点\n            vec4 ori3 = texture2D( texture3, vUv * 16.0 ); // 网格\n\n            float length = length( vec2(vPosition.x, vPosition.y) );\n            // 应用波函数蒙版\n            float flag1 = wave(1.0, radius / 2.0, 45.0, time, length);\n            if (flag1 < 0.5) {\n                flag1 = 0.0;\n            }\n            ori1.a = ori1.a * (flag1 * 0.8 + 0.2);\n            float flag2 = wave(1.0, radius / 3.0, 30.0, time, length);\n            ori2.a = ori2.a * (flag2 * 0.8 + 0.2);\n            float flag3 = wave(1.0, 60.0, 20.0, time, length);\n            ori3.a = ori3.a * (flag3 * 2.0 - 1.5);\n            // 应用蒙版\n            float alpha = clamp(ori1.a + ori2.a + ori3.a + back.a * 0.01, 0.0, 1.0);\n            basceColor.a = alpha*2.0;\n\n            gl_FragColor = basceColor * clamp((2.0 - (length * 2.0 / radius)), 0.0, 1.0);\n        }\n    ",side:G,transparent:!0};i([o,t],([e,a])=>{if(e&&!a){for(let a=0;a<e.length;a++)e[a].colorSpace=j,e[a].wrapS=_,e[a].wrapT=_,e[a].magFilter=P,e[a].minFilter=C;f.uniforms.texture0.value=e[0],f.uniforms.texture1.value=e[1],f.uniforms.texture2.value=e[2],f.uniforms.texture3.value=e[3]}}),i(()=>n.color,e=>{f.uniforms.uColor.value=new w(e)});const{onBeforeRender:p}=a();return p(({elapsed:e})=>{f.uniforms.time.value=e/10*n.speed}),(e,a)=>(s(),l("TresGroup",null,[u("TresMesh",{rotateX:-Math.PI/2},[u("TresCircleGeometry",{args:[e.size]},null,8,b),u("TresShaderMaterial",v(m(f)),null,16)],8,D)]))}}),F=t({__name:"digitalGround",setup(e){const a=f({reflectivity:.1,showGridHelper:!1,scale:1}),t=f({color:"#de62f2",speed:.8,size:10}),i=new n({title:"digitalGround",expanded:!0});return i.addBinding(t,"color",{label:"颜色"}),i.addBinding(t,"speed",{label:"速度",min:.1,max:5,step:.1}),i.addBinding(t,"size",{label:"大小",min:.1,max:20,step:.1}),(e,n)=>{const i=p("TresCanvas");return s(),d(i,{clearColor:"#666666","window-size":""},{default:g(()=>[n[0]||(n[0]=u("TresPerspectiveCamera",{position:[3,3,0],fov:45,near:.1,far:1e4},null,-1)),c(x(r),{enableDamping:"",autoRotate:""}),c(y,v(m(t)),null,16),c(o,h({position:[0,-.5,0]},a),null,16)]),_:1})}}});export{F as default};
