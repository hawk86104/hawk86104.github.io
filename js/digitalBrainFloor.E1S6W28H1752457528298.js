import{cf as o,N as s,_ as e,ce as a}from"./three.DOaOWaa_1752457528298.js";import{a as i}from"./@tresjs.CutcgRLX1752457528298.js";import{P as t}from"./tweakpane.C0HtAJSg1752457528298.js";import{_ as r}from"./reflectorMesh.vue_vue_type_script_setup_true_lang.DMdkL5hM1752457528298.js";import"./index.CEkoY90U1752457528298.js";import{l}from"./util.CygnVFDe1752457528298.js";import{_ as n}from"./cloudPoints.vue_vue_type_script_setup_true_lang.ALJykY3-1752457528298.js";import{_ as p,a as m}from"./bubblesEffect.vue_vue_type_script_setup_true_lang.DheFmHp71752457528298.js";import{_ as d}from"./randomLoading.vue_vue_type_script_setup_true_lang.TXwGU1WL1752457528298.js";import{d as u,r as c,a9 as _,h as j,G as f,o as g,j as b,u as h,f as y,I as w,a6 as v,a7 as B,e as L,H as k,m as x,a4 as C,F as T}from"./@vue.CcDZ19ef1752457528298.js";import"./postprocessing.BhLg8VAN1752457528298.js";import"./@vueuse.D5pFWdqo1752457528298.js";import"./utils.BMJFJ69p1752457528298.js";import"./@fesjs.t5OnzKcQ1752457528298.js";import"./vue-router.8pdmj1nv1752457528298.js";import"./lodash-es.C7pWAXPe1752457528298.js";import"./@qlin.q6OWdsQV1752457528298.js";import"./pinia.D2lIig6I1752457528298.js";import"./@babel.BPq7uOAK1752457528298.js";import"./@floating-ui.BFjFSAYt1752457528298.js";import"./@juggle.CcBCnTIR1752457528298.js";import"./index.28NlFPHI1752457528298.js";import"./three-mesh-ui.module.BXFGKuQq1752457528298.js";import"./starLoading.GAPnrgZ31752457528298.js";import"./cssLoaders.xDiDlJ0_1752457528298.js";import"./bubbleLoading.B49UHpwD1752457528298.js";import"./yangyangLoading.BBO92wuf1752457528298.js";const S={position:[0,120,0]},z=u({__name:"digitalBrainFloor",async setup(u){let z,F;const G=c({mirrorSize:500,gridSize:490,mirrorColor:"#efefef",divisions:10,colorCenterLine:"#444444",colorGrid:"#888888"}),M=c({color:"#fff",show:!0,opacity:1}),P=new t({title:"参数"});P.addBinding(M,"show",{label:"点云显示"}),P.addBinding(M,"color",{label:"点云颜色"}),P.addBinding(M,"opacity",{label:"点云透明度",min:0,max:1,step:.1});const E=c({color:"#84ccff",show:!0,opacity:1});P.addBinding(E,"show",{label:"脑轮廓显示"}),P.addBinding(E,"color",{label:"脑轮廓颜色"}),P.addBinding(E,"opacity",{label:"脑轮廓透明度",min:0,max:1,step:.1});const R=c({color:"#9e00af",show:!0,opacity:1});P.addBinding(R,"show",{label:"脑组织显示"}),P.addBinding(R,"color",{label:"脑组织颜色"}),P.addBinding(R,"opacity",{label:"脑组织透明度",min:0,max:1,step:.1});const q=new o,A=([z,F]=_((()=>l("./plugins/medical/model/brainparts.OBJ",q))),z=await z,F(),z),H=c({clearColor:"#201919",shadows:!0,alpha:!1,shadowMapType:a,outputColorSpace:e,toneMapping:s}),I=c({autoRotate:!0,autoRotateSpeed:2});return(o,s)=>{const e=j("TresCanvas");return g(),f(T,null,[b(h(d)),b(e,x(H,{"window-size":""}),{default:y((()=>[s[0]||(s[0]=w("TresPerspectiveCamera",{position:[100,400,500],fov:45,near:.1,far:1e4,"look-at":[0,0,0]},null,-1)),b(h(i),v(B(I)),null,16),s[1]||(s[1]=w("TresAmbientLight",{intensity:.5},null,-1)),w("TresGroup",S,[M.show?(g(),L(n,x({key:0,model:h(A)},M),null,16,["model"])):k("",!0),(g(),L(C,null,{default:y((()=>[E.show?(g(),L(p,x({key:0,model:h(A)},E),null,16,["model"])):k("",!0)])),_:1})),R.show?(g(),L(m,x({key:1,model:h(A)},R),null,16,["model"])):k("",!0)]),b(r,v(B(G)),null,16)])),_:1},16)],64)}}});export{z as default};
