import{a as t,r as n,N as e,d as o}from"./@tresjs.W42D3qe_1718612273914.js";import{a5 as r,j as s,V as a,i,M as c,l,k as u,B as v,bU as f}from"./three.HHcT7YAr1718612273914.js";import{P as p}from"./tweakpane.qqn77PB81718612273914.js";import{d,a3 as m,e as g,o as x,f as h,g as y,J as I,j as b,u as _,aj as S,ak as U,al as w,m as P}from"./@vue.CpOXM7bB1718612273914.js";import{_ as D}from"./@fesjs.K6L2Ptsw1718612273914.js";import"./@vueuse.YjRg4c7n1718612273914.js";import"./vue-router.8CWAXHk21718612273914.js";import"./lodash-es.nFpJXAf-1718612273914.js";import"./@qlin.yHhFDldE1718612273914.js";import"./pinia.Io9o2y5w1718612273914.js";import"./@floating-ui.BPbuo5Gx1718612273914.js";import"./@juggle.7yjBMqoW1718612273914.js";function E(t,n){const e=M();return(E=function(t,n){return e[t-=132]})(t,n)}!function(t,n){const e=E,o=M();for(;;)try{if(551606===-parseInt(e(202))/1*(-parseInt(e(135))/2)+parseInt(e(165))/3+-parseInt(e(187))/4*(-parseInt(e(160))/5)+parseInt(e(156))/6*(-parseInt(e(197))/7)+parseInt(e(157))/8*(-parseInt(e(162))/9)+parseInt(e(201))/10*(-parseInt(e(168))/11)+-parseInt(e(190))/12*(-parseInt(e(175))/13))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[E(200)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function M(){const t=["index","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","263100klZdde","string","onabort","1293048pQnupr","debu","type","v3v",'{}.constructor("return this")( )',"bind","table","7xCuGui","trace","Vector2","apply","33690UvEEoz","207428BaEyVX","Matrix2","test",'" load was aborted.',"2qhEDJs","now","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","call","ShaderMaterial","gger","info","Vector3","__proto__","warn","open","hasOwnProperty","error","WagnerLoadShaderException","input","replace","constructor","onload","object","\" couldn't be loaded.","isArray","6082644mbOiKf","8biAetb","send","get","60tWggMK","onerror","8082819CCULpf","value","action","3047025tPDeBE","prototype","stateObject","990UIvFqG","name","lastIndex","responseText","function *\\( *\\)","random","exec","91vlOFVl","console","toString","Vector4","counter","message",'Shader "',"Texture","exception","return (function() "];return(M=function(){return t})()}!function(){A(this,(function(){const t=E,n=new RegExp(t(172)),e=new RegExp(t(137),"i"),o=F("init");n[t(133)](o+"chain")&&e[t(133)](o+t(149))?F():o("0")}))()}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[E(200)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();L(void 0,(function(){const t=E,n=function(){const t=E;let n;try{n=Function(t(184)+t(194)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(176)]||{},o=["log",t(144),t(141),t(147),t(183),t(196),t(198)];for(let r=0;r<o.length;r++){const n=L[t(151)][t(166)].bind(L),s=o[r],a=e[s]||n;n[t(143)]=L[t(195)](L),n[t(177)]=a[t(177)][t(195)](a),e[s]=n}}))();function C(t,n,e){const o=E;if(typeof t!==o(153)||null===t)return t;const r=Array[o(155)](t)?[]:{};for(const s in t)t[o(146)](s)&&(r[s]=C(t[s])),s==n&&(r[n]=e);return r}function F(t){function n(t){const e=E;if(typeof t===e(188))return function(t){}.constructor("while (true) {}").apply(e(179));1!==(""+t/t).length||t%20==0?function(){return!0}[e(151)](e(191)+e(140))[e(138)](e(164)):function(){return!1}[e(151)](e(191)+e(140))[e(200)](e(167)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const z=N;!function(t,n){const e=N,o=B();for(;;)try{if(207558===parseInt(e(373))/1*(-parseInt(e(338))/2)+-parseInt(e(351))/3+parseInt(e(378))/4*(parseInt(e(279))/5)+parseInt(e(324))/6*(-parseInt(e(364))/7)+-parseInt(e(276))/8+-parseInt(e(374))/9*(parseInt(e(310))/10)+-parseInt(e(361))/11*(-parseInt(e(342))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const T=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[N(291)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function N(t,n){const e=B();return(N=function(t,n){return e[t-=274]})(t,n)}!function(){T(this,(function(){const t=N,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(278),"i"),o=j("init");n.test(o+t(284))&&e[t(335)](o+t(275))?j():o("0")}))()}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[N(291)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();G(void 0,(function(){const t=N;let n;try{n=Function("return (function() "+t(300)+");")()}catch(r){n=window}const e=n.console=n.console||{},o=[t(304),t(337),t(287),"error","exception","table",t(367)];for(let s=0;s<o.length;s++){const n=G[t(311)].prototype[t(350)](G),r=o[s],a=e[r]||n;n[t(344)]=G.bind(G),n[t(320)]=a.toString[t(350)](a),e[r]=n}}))();class R{constructor(t,n){const e=N;this[e(323)]=1,this[e(352)]=1,this[e(326)]=n||{},this[e(286)]=this[e(326)].useRGBA||!1,this.renderer=t,this[e(289)]=this[e(366)](this[e(326)]),this[e(292)]=new(r[e(280)]),this.quad=new(r[e(354)])(new(r[e(340)])(1,1),new(r[e(343)])),this[e(292)][e(349)](this.quad),this[e(360)]=new(r[e(331)])(1,1,1,1,-1e4,1e4),this[e(285)]=new(r[e(298)])(1,1,{minFilter:void 0!==this.settings[e(348)]?this[e(326)][e(348)]:l,magFilter:void 0!==this.settings[e(308)]?this[e(326)][e(308)]:r[e(356)],wrapS:void 0!==this[e(326)][e(368)]?this.settings.wrapS:r[e(332)],wrapT:void 0!==this[e(326)][e(315)]?this[e(326)].wrapT:r[e(332)],format:this[e(286)]?r[e(309)]:r[e(375)],type:void 0!==this.settings[e(379)]?this[e(326)].type:r[e(321)],stencilBuffer:void 0===this.settings[e(328)]||this[e(326)][e(328)]}),this[e(347)]=this[e(285)][e(318)](),this[e(376)]=Date[e(299)](),this[e(312)]={},this.Stack={passItems:[],passes:[]}}[z(358)](t,n,e,o){const r=z;this[r(363)](n);const s={shaderName:t,params:e,uuid:o,shader:this.shader};this[r(329)][r(317)][r(282)](s)}[z(339)](t){const n=z;for(let e=this[n(329)].passItems[n(327)]-1;e>=0;e--)this[n(329)][n(317)][e][n(305)]===parseInt(t)&&this[n(329)].passItems[n(353)](e,1);console[n(304)](this[n(329)][n(317)])}CopyPass(){const t=z;this[t(333)][t(330)](this);return this.loadShadervf("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[z(363)](t){const n=z,e=n(325);return this[n(290)]=function(t,n){const e=E,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,l=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,u={sampler2D:{type:"t",value:()=>new(r[E(182)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[E(199)])},vec3:{type:"v3",value:()=>new(r[E(142)])},vec4:{type:"v4",value:()=>new(r[E(178)])},bvec2:{type:"v2",value:()=>new s},bvec3:{type:"v3",value:()=>new(r[E(142)])},bvec4:{type:"v4",value:()=>new(r[E(178)])},ivec2:{type:"v2",value:()=>new(r[E(199)])},ivec3:{type:"v3",value:()=>new a},ivec4:{type:"v4",value:()=>new(r[E(178)])},mat2:{type:"v2",value:()=>new(r[E(132)])},mat3:{type:"v3",value:()=>new i},mat4:{type:"v4",value:()=>new c}},v={float:{type:"fv",value:()=>[]},vec3:{type:e(193),value:()=>[]}};let f;const p={resolution:{type:"v2",value:new(r[e(199)])(1,1),default:!0},time:{type:"f",value:Date[e(136)](),default:!0},tInput:{type:"t",value:new(r[e(182)]),default:!0}};let d,m;for(;null!==(f=o[e(174)](n));)f[e(185)]===o[e(170)]&&o[e(170)]++,d=f[1],m=f[2],p[m]={type:u[d][e(192)],value:u[d][e(163)]()};for(;null!==(f=l.exec(n));)f[e(185)]===o[e(170)]&&o[e(170)]++,d=f[1],m=f[2],f[3],p[m]={type:v[d].type,value:v[d][e(163)]()};return new(r[e(139)])({uniforms:p,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(290)]}[z(333)](t){const n=z;this.shader=null,this[n(302)]={}}[z(306)](){const t=z;this.read=this.front,this[t(362)]=this[t(347)]}[z(281)](t,n){const e=z,o=window.innerWidth,r=window[e(357)];t[e(288)](1*o,1*r),n[e(277)][e(303)](70,o/r,n[e(307)],n.far),this[e(288)](o,r);return this[e(313)](o,r,!0)}setSize(t,n){const e=z;this[e(323)]=t,this.height=n,this[e(360)][e(277)].makeOrthographic(t/-2,t/2,n/2,n/-2,this[e(360)][e(307)],this[e(360)][e(377)]),this[e(295)][e(365)][e(283)](t,n,1),this[e(285)].setSize(t,n),this[e(347)][e(288)](t,n)}[z(313)](t,n,e){const o=z;return new(r[o(298)])(t,n,{minFilter:r[o(356)],magFilter:r[o(356)],format:e?r[o(309)]:void 0})}[z(372)](t,n,e,o){const r=z;this[r(296)][r(293)](this[r(362)]),this[r(296)][r(372)](t,n),o||this[r(319)]()}[z(319)](){const t=z,n=this[t(362)];this[t(362)]=this[t(359)],this.read=n}[z(345)](){const t=z;for(let n=0;n<this[t(329)][t(317)][t(327)];n++){const e=this[t(329)][t(317)][n].shader,o=this[t(329)].passItems[n][t(302)];if(this[t(296)][t(293)](this[t(362)]),e instanceof u){this[t(295)][t(336)]=e,this[t(295)][t(336)][t(341)][t(369)][t(297)]=this[t(359)].texture,this.quad[t(336)][t(341)][t(301)].value[t(283)](this[t(323)],this[t(352)]),this[t(295)].material[t(341)][t(294)][t(297)]=.001*(Date[t(299)]()-this.startTime);for(const n in o)this[t(295)][t(336)][t(341)][n].value=o[n];this[t(296)][t(372)](this[t(292)],this[t(360)]),this.swapBuffers()}}}[z(355)](t,n){const e=z;this[e(296)].setRenderTarget(null),this.quad.material=this[e(289)],this.quad[e(336)][e(341)][e(369)].value=this[e(359)][e(316)],this[e(295)][e(336)][e(341)][e(301)].value[e(283)](this[e(323)],this[e(352)]),this[e(296)][e(372)](this[e(292)],this[e(360)])}}function B(){const t=["scene","setRenderTarget","time","quad","renderer","value","WebGLRenderTarget","now",'{}.constructor("return this")( )',"resolution","params","makePerspective","log","uuid","Reset","near","magFilter","RGBAFormat","28670ttVNeP","constructor","passes","getOfflineTexture","gger","wrapT","texture","passItems","clone","swapBuffers","toString","UnsignedByteType","action","width","48qAxxuq","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","settings","length","stencilBuffer","Stack","call","OrthographicCamera","ClampToEdgeWrapping","Pass","string","test","material","warn","8jDWnwT","removePass","PlaneGeometry","uniforms","26604kcMUwU","MeshBasicMaterial","__proto__","pass","debu","back","minFilter","add","bind","1083639cheIlp","height","splice","Mesh","toScreen","LinearFilter","innerHeight","addPass","read","camera","5698Eeldka","write","loadShadervf","52157YbmpPK","scale","CopyPass","trace","wrapS","tInput","stateObject","counter","render","72323vAxZId","1062bTFDLV","RGBFormat","startTime","far","16mYqGjZ","type","while (true) {}","input","855688aJwKAu","projectionMatrix","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","268165GwZTDD","Scene","onWindowResize","push","set","chain","front","useRGBA","info","setSize","copyPass","shader","apply"];return(B=function(){return t})()}function j(t){function n(t){const e=N;if(typeof t===e(334))return function(t){}.constructor(e(274))[e(291)](e(371));1!==(""+t/t)[e(327)]||t%20==0?function(){return!0}[e(311)](e(346)+e(314))[e(330)](e(322)):function(){return!1}[e(311)]("debu"+e(314))[e(291)](e(370)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const V="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",O=W;!function(t,n){const e=W,o=X();for(;;)try{if(759594===parseInt(e(286))/1*(-parseInt(e(278))/2)+-parseInt(e(302))/3*(-parseInt(e(241))/4)+-parseInt(e(236))/5+-parseInt(e(296))/6+parseInt(e(251))/7+-parseInt(e(233))/8*(parseInt(e(293))/9)+parseInt(e(295))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){H(this,(function(){const t=W,n=new RegExp(t(306)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=q("init");n.test(o+t(275))&&e.test(o+t(297))?q():o("0")}))()}();const k=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[W(309)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function W(t,n){const e=X();return(W=function(t,n){return e[t-=233]})(t,n)}function X(){const t=["32880380XvqcPO","7801350AdppJS","input","新增通道","values","trace","change","1913796WTJPoH","bind","keys","exception","function *\\( *\\)","移除~","dispose","apply","console","material","88904silKrZ","removePass","length","5419295MKZGLK","add","title","gger","stateObject","4exWcbZ","call","Vector2","FXAAPass","POISSONPass","TOONPass","__proto__","random","toString","string","10575572mXPHZm","BoxGeometry","list","VIGNETTE1Pass","plugins/postProcessing/image/1324.jpg","debu","VIGNETTE2Pass","addButton","counter","addFolder","value","InvertPass","SOBELPass","error","DENOISEPass","castShadow","render","mergeGeometries","text","log","target","SNOISEPass","map","addPass","chain","FREICHENPass","postProcessing","42aXXaar","addBlade","Mesh","autoClearColor","constructor","label","DOTPass","SEPIAPass","46221tAFjYy","click","action","receiveShadow","toScreen","split","pass","1071UzHRPE","MeshPhongMaterial"];return(X=function(){return t})()}k(void 0,(function(){const t=W;let n;try{n=Function('return (function() {}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(310)]=n[t(310)]||{},o=[t(270),"warn","info",t(264),t(305),"table",t(300)];for(let s=0;s<o[t(235)];s++){const n=k.constructor.prototype[t(303)](k),r=o[s],a=e[r]||n;n[t(247)]=k[t(303)](k),n[t(249)]=a[t(249)][t(303)](a),e[r]=n}}))();function q(t){function n(t){const e=W;if(typeof t===e(250))return function(t){}[e(282)]("while (true) {}")[e(309)](e(259));1!==(""+t/t)[e(235)]||t%20==0?function(){return!0}[e(282)]("debu"+e(239))[e(242)](e(288)):function(){return!1}[e(282)](e(256)+"gger")[e(309)](e(240)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const Z=D(d({__name:O(277),async setup(o){const s=O;let a,i;const{camera:c,renderer:l,scene:u,sizes:d}=t();for(var g=new v,x=[],h=0;h<100;h++){var y=new(r[s(252)])(100,100,100);y.translate(1500*Math[s(248)](),1500*Math[s(248)](),1500*Math[s(248)]()),x.push(y)}g=f[s(268)](x);const I=([a,i]=m((()=>e({map:s(255)}))),a=await a,i(),a),b=([a,i]=m((()=>e({map:"plugins/postProcessing/image/1324-normal.jpg"}))),a=await a,i(),a);var _=new(r[s(294)])({map:I[s(273)],normalMap:b[s(273)],normalScale:new(r[s(243)])(.8,-.8),shininess:100}),S=new(r[s(280)])(g,_);S[s(266)]=!0,S[s(289)]=!0,u[s(261)][s(237)](S);const U=new R(l[s(261)],{useRGBA:!0}),w=new p;let P=null,D=[{text:s(262),value:{InvertPass:V}},{text:s(244),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:s(285),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:s(272),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:"BOXBLURPass",value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:s(265),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:"CGAPass",value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:b.map}}},{text:s(263),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:"RGBPass",value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:s(284),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:"CIRCULARPass",value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:s(245),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:s(254),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(257),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:s(276),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:s(246),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],E="InvertPass",A=V,M=null;w.addBlade({view:s(253),label:"后处理类型",options:D,value:""}).on(s(301),(t=>{P=t[s(261)]}));const L=w[s(258)]({title:"新增",label:s(298)});let F=0;L.on(s(287),(t=>{const n=s;E=Object[n(304)](P)[0],A=Object.values(P)[0],M=Object[n(299)](P)[1];let e=F++,o=w[n(260)]({title:E});for(const s in M){let t=M[s];o[n(279)]({view:n(269),label:s,parse:t=>String(t),value:t})}o[n(258)]({title:n(307)+e,label:"关闭通道"}).on("click",(t=>{const e=n;let o=t[e(271)][e(238)][e(291)]("~")[1];U[e(234)](o)})).on("click",(()=>{o[n(308)]()}));let r=C(M,t[n(271)][n(283)],t[n(261)]);U[n(274)](E,A,r,e)})),U.onWindowResize(l[s(261)],c[s(261)]);const{onLoop:z}=n();return z((({delta:t})=>{const n=s;S&&(l[n(261)][n(281)]=!0,U.Reset(),S[n(311)]=_,U[n(267)](u[n(261)],c[n(261)]),U[n(292)](),U[n(290)](u[n(261)],c[n(261)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]);function J(){const t=["warn","postProcessingEditor","2827374mcNpry","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","gger","1367691XYFvED","5xOyZJJ","perspectiveCameraRef","length","124960RTSxAz","1664700txSMaf","chain","return (function() ","41594HuZiYw","TresCanvas","#000000","counter","bind","init","error","test","call","apply","input","debu","#ffffff","TresDirectionalLight",'{}.constructor("return this")( )',"__proto__","toString","5267844qSyfKi","trace","prototype","constructor","action","TresAmbientLight","table","function *\\( *\\)","string","1096VEQNjA","TresPerspectiveCamera","1302044MojDOp","22XMNUqU","stateObject","2VbZJYD","console","while (true) {}"];return(J=function(){return t})()}const K=et;!function(t,n){const e=et,o=J();for(;;)try{if(666791===parseInt(e(419))/1+-parseInt(e(422))/2*(-parseInt(e(430))/3)+parseInt(e(435))/4*(-parseInt(e(431))/5)+-parseInt(e(427))/6+parseInt(e(391))/7*(-parseInt(e(417))/8)+parseInt(e(408))/9+parseInt(e(434))/10*(parseInt(e(420))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const $=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[et(400)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){$(this,(function(){const t=et,n=new RegExp(t(415)),e=new RegExp(t(428),"i"),o=rt(t(396));n[t(398)](o+t(389))&&e.test(o+t(401))?rt():o("0")}))()}();const Y=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();Y(void 0,(function(){const t=et,n=function(){const t=et;let n;try{n=Function(t(390)+t(405)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(423)]||{},o=["log",t(425),"info",t(397),"exception",t(414),t(409)];for(let r=0;r<o[t(433)];r++){const n=Y.constructor[t(410)].bind(Y),s=o[r],a=e[s]||n;n[t(406)]=Y[t(395)](Y),n[t(407)]=a[t(407)][t(395)](a),e[s]=n}}))();const Q={ref:K(432),position:[600,850,-1500],fov:45,near:.1,far:1e5},tt=I(K(413),{color:K(403),intensity:2},null,-1),nt=I(K(404),{position:[100,100,0],intensity:2,color:K(403)},null,-1);function et(t,n){const e=J();return(et=function(t,n){return e[t-=389]})(t,n)}const ot=d({__name:K(426),setup(t){const e=K,r={clearColor:e(393),shadows:!0,alpha:!1,useLegacyLights:!0},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=g(a(392));return x(),h(i,P(r,{"window-size":""}),{default:y((()=>[I(a(418),Q,null,512),b(_(o),S(U(s)),null,16),tt,nt,(x(),h(w,null,{default:y((()=>[b(Z)])),_:1}))])),_:1},16)}}});function rt(t){function n(t){const e=et;if(typeof t===e(416))return function(t){}[e(411)](e(424))[e(400)](e(394));1!==(""+t/t).length||t%20==0?function(){return!0}[e(411)](e(402)+e(429))[e(399)](e(412)):function(){return!1}[e(411)](e(402)+e(429))[e(400)](e(421)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{ot as default};
