import{e,a}from"./@tresjs.B1VqNfqw1755074079444.js";import{ah as t,ac as o,a3 as n,X as r,_ as s}from"./three.QlBabAUP1755074079444.js";import{d as l,h as i,e as p,o as c,f as d,I as h,j as u,u as m,a7 as f,a8 as v,m as g}from"./@vue.BzMISRrV1755074079444.js";import"./postprocessing.D49g_X_Q1755074079444.js";import"./@vueuse.C47q1p2Z1755074079444.js";const y=30,M=256,C=256,S=(e,a)=>{let{x:t,y:o,radius:n,weight:r}=a;n=parseInt(n*r);const s=e.createRadialGradient(t,o,0,t,o,n);s.addColorStop(0,"rgba(255, 255, 0, 1)"),s.addColorStop(1,"rgba(255, 0, 0, 0)"),e.fillStyle=s,e.globalAlpha=r,e.beginPath(),e.arc(t,o,n,0,2*Math.PI),e.closePath(),e.fill()},w=()=>{const e={1:"#f00",.8:"#e2fa00",.6:"#33f900",.3:"#0349df",0:"#fff"},a=document.createElement("canvas");a.width=256,a.height=10,a.style.position="absolute",a.style.top="0",a.style.right="0";const n=a.getContext("2d"),r=n.createLinearGradient(0,0,256,0);for(const t in e)r.addColorStop(t,e[t]);n.fillStyle=r,n.fillRect(0,0,256,10),document.body.appendChild(a);const s=new t(a);return s.minFilter=o,s.needsUpdate=!0,s},x=()=>{const e=document.createElement("canvas");e.width=M,e.height=C,e.style.position="absolute",e.style.top="20px",e.style.right="0";const a=e.getContext("2d"),n=(()=>{const e=new Array;for(let a=0;a<y;a++)e[a]=parseInt(25*Math.random()+10);return e})();for(let t=0;t<y;t++){const e=n[t]/35,o=Math.random()*M,r=Math.random()*C;S(a,{x:o,y:r,radius:80,weight:e})}document.body.appendChild(e);const r=new t(e);return r.minFilter=o,r.needsUpdate=!0,r},b=l({__name:"simpleExample",setup(t){const o={clearColor:"#030311",shadows:!0,alpha:!1,outputColorSpace:s,shadowMapType:r,useLegacyLights:!0};e().onLoop((({delta:e})=>{}));const l={transparent:!0,side:n,vertexShader:"\n\tvarying vec2 vUv;\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }",fragmentShader:"\n\t#ifdef GL_ES\n  precision highp float;\n  #endif\n  varying vec2 vUv;\n  uniform sampler2D alphaScaleMap;\n  uniform sampler2D paletteMap;\n  void main() {\n    vec4 alphaColor = texture2D(alphaScaleMap, vUv);\n    vec4 color = texture2D(paletteMap, vec2(alphaColor.a, 0.0));\n    gl_FragColor = vec4(color.r, color.g, color.b, alphaColor.a);\n\t}",uniforms:{alphaScaleMap:{type:"t",value:x()},paletteMap:{type:"t",value:w()}}};function y(e){e&&console.log(e)}return(e,t)=>{const n=i("TresCanvas");return c(),p(n,g(o,{"window-size":""}),{default:d((()=>[t[1]||(t[1]=h("TresPerspectiveCamera",{position:[0,0,3e3],fov:40,near:.1,far:1e4},null,-1)),u(m(a),{autoRotate:!0,autoRotateSpeed:2}),t[2]||(t[2]=h("TresAmbientLight",{color:"#eef0ff",intensity:1},null,-1)),h("TresMesh",{position:[0,0,10],onPointerMove:y},[t[0]||(t[0]=h("TresPlaneGeometry",{args:[1500,1500]},null,-1)),h("TresShaderMaterial",f(v(l)),null,16)],32)])),_:1},16)}}});export{b as default};
