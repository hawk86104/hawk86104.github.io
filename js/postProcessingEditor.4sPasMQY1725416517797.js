import{p as t,$ as n,N as e,d as o}from"./@tresjs.5lh7VmqZ1725416517797.js";import{j as r,a6 as a,V as s,al as i,q as c,W as l,l as u,bc as v,cJ as f,cl as p,bl as d}from"./three.VTQVqxMx1725416517797.js";import{P as m}from"./tweakpane.yHWGBmom1725416517797.js";import{d as g,a5 as x,e as h,o as y,f as I,g as b,L as _,j as S,u as U,aj as w,ak as D,al as P,m as E}from"./@vue._6MD2XyK1725416517797.js";import{_ as L}from"./@fesjs.ILazvsHx1725416517797.js";import"./@vueuse.L-salR9N1725416517797.js";import"./vue-router.oJSnFzhA1725416517797.js";import"./lodash-es.kYt-_xTG1725416517797.js";import"./@qlin.yHhFDldE1725416517797.js";import"./pinia.QjdSMCYS1725416517797.js";import"./@floating-ui.BPbuo5Gx1725416517797.js";import"./@juggle.7yjBMqoW1725416517797.js";!function(t,n){const e=F,o=z();for(;;)try{if(688280===-parseInt(e(200))/1+parseInt(e(195))/2*(parseInt(e(198))/3)+parseInt(e(202))/4*(-parseInt(e(189))/5)+-parseInt(e(217))/6+parseInt(e(186))/7*(-parseInt(e(160))/8)+-parseInt(e(177))/9+parseInt(e(167))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const M=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[F(203)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){M(this,(function(){const t=F,n=new RegExp(t(178)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=N(t(168));n[t(212)](o+"chain")&&e[t(212)](o+t(183))?N():o("0")}))()}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[F(203)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();A(void 0,(function(){const t=F;let n;try{n=Function("return (function() "+t(165)+");")()}catch(r){n=window}const e=n[t(173)]=n[t(173)]||{},o=[t(219),"warn",t(185),t(210),t(207),"table",t(166)];for(let a=0;a<o[t(199)];a++){const n=A.constructor.prototype[t(180)](A),r=o[a],s=e[r]||n;n.__proto__=A[t(180)](A),n[t(201)]=s[t(201)][t(180)](s),e[r]=n}}))();function C(t,n,e){const o=F;if(typeof t!==o(204)||null===t)return t;const r=Array[o(163)](t)?[]:{};for(const a in t)t[o(197)](a)&&(r[a]=C(t[a])),a==n&&(r[n]=e);return r}function F(t,n){const e=z();return(F=function(t,n){return e[t-=160]})(t,n)}function z(){const t=["send","2423772wYkhDU","function *\\( *\\)","onload","bind","random","string","input","\" couldn't be loaded.","info","72149JOwhdu","replace","Vector3","2049655PJZyqI","name","index","Vector2","get","responseText","340vIvCvb","stateObject","hasOwnProperty","11976OHQYQD","length","1320616IyivZb","toString","4layULs","apply","object","type","Matrix2","exception","value","v3v","error","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","test","open","WagnerLoadShaderException","Texture","gger","3238596HsUlfl",'Shader "',"log","exec",'" load was aborted.',"56kChYlJ","constructor","message","isArray","Matrix4",'{}.constructor("return this")( )',"trace","26214100hpNHRJ","init","call","Matrix3","ShaderMaterial","lastIndex","console","onerror","Vector4"];return(z=function(){return t})()}function N(t){function n(t){const e=F;if(typeof t===e(182))return function(t){}[e(161)]("while (true) {}")[e(203)]("counter");1!==(""+t/t)[e(199)]||t%20==0?function(){return!0}[e(161)]("debugger")[e(169)]("action"):function(){return!1}.constructor("debu"+e(216))[e(203)](e(196)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const T=j;!function(t,n){const e=j,o=B();for(;;)try{if(155372===-parseInt(e(396))/1+-parseInt(e(429))/2*(parseInt(e(452))/3)+-parseInt(e(369))/4+parseInt(e(393))/5+-parseInt(e(430))/6+-parseInt(e(356))/7*(-parseInt(e(352))/8)+parseInt(e(451))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const R=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function B(){const t=["toString","length","material","startTime","quad","gger","scene","60MqYbbQ","1294236EKgRXf","return (function() ","setRenderTarget","read","renderer","projectionMatrix","params","resolution","LinearFilter","function *\\( *\\)","ShaderMaterial","RGBFormat","addPass","init","debu","trace","prototype","camera","set","table","makeOrthographic","1590417rBDLmy","9270nVRokx","shader","8CqLRgO","loadShadervf","far","add","2102387YJRjOU","texture",'{}.constructor("return this")( )',"OrthographicCamera","onWindowResize","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","__proto__","uuid","ClampToEdgeWrapping","call","now","stencilBuffer","CopyPass","125900gnOOUT","innerWidth","bind","uniforms","PlaneGeometry","passItems","input","height","passes","info","copyPass","MeshBasicMaterial","front","apply","tInput","RGBAFormat","write","scale","wrapT","clone","console","value","exception","magFilter","528175opsrCC","swapBuffers","render","87436cSZcxt","log","back","UnsignedByteType","settings","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","innerHeight","time","useRGBA","constructor","setSize","WebGLRenderTarget","type","while (true) {}","splice","width","wrapS","pass","Stack","test","near","action","Scene","minFilter","Reset","removePass"];return(B=function(){return t})()}!function(){R(this,(function(){const t=j,n=new RegExp(t(439)),e=new RegExp(t(401),"i"),o=V(t(443));n[t(415)](o+"chain")&&e.test(o+t(375))?V():o("0")}))()}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[j(382)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function j(t,n){const e=B();return(j=function(t,n){return e[t-=351]})(t,n)}G(void 0,(function(){const t=j,n=function(){const t=j;let n;try{n=Function(t(431)+t(358)+");")()}catch(e){n=window}return n}(),e=n[t(389)]=n[t(389)]||{},o=[t(397),"warn",t(378),"error",t(391),t(449),t(445)];for(let r=0;r<o[t(423)];r++){const n=G.constructor[t(446)][t(371)](G),a=o[r],s=e[a]||n;n[t(362)]=G[t(371)](G),n[t(422)]=s.toString[t(371)](s),e[a]=n}}))();class O{constructor(t,n){const e=j;this[e(411)]=1,this.height=1,this.settings=n||{},this[e(404)]=this[e(400)][e(404)]||!1,this[e(434)]=t,this[e(379)]=this[e(368)](this.settings),this[e(428)]=new(a[e(418)]),this.quad=new c(new(a[e(373)])(1,1),new(a[e(380)])),this[e(428)][e(355)](this[e(426)]),this.camera=new(a[e(359)])(1,1,1,1,-1e4,1e4),this[e(381)]=new l(1,1,{minFilter:void 0!==this[e(400)][e(419)]?this[e(400)][e(419)]:a[e(438)],magFilter:void 0!==this[e(400)][e(392)]?this[e(400)][e(392)]:u,wrapS:void 0!==this.settings[e(412)]?this[e(400)][e(412)]:v,wrapT:void 0!==this[e(400)].wrapT?this[e(400)][e(387)]:a[e(364)],format:this[e(404)]?a[e(384)]:a[e(441)],type:void 0!==this.settings.type?this[e(400)][e(408)]:a[e(399)],stencilBuffer:void 0===this[e(400)][e(367)]||this.settings.stencilBuffer}),this.back=this[e(381)][e(388)](),this[e(425)]=Date.now(),this[e(377)]={},this[e(414)]={passItems:[],passes:[]}}[T(442)](t,n,e,o){const r=T;this[r(353)](n);const a={shaderName:t,params:e,uuid:o,shader:this[r(351)]};this[r(414)].passItems.push(a)}[T(421)](t){const n=T;for(let e=this.Stack[n(374)][n(423)]-1;e>=0;e--)this[n(414)][n(374)][e][n(363)]===parseInt(t)&&this[n(414)][n(374)][n(410)](e,1);console[n(397)](this[n(414)][n(374)])}[T(368)](){const t=T;this.Pass[t(365)](this);return this[t(353)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[T(353)](t){const n=T,e=n(361);return this.shader=function(t,n){const e=F,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,c=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,l={sampler2D:{type:"t",value:()=>new(a[F(215)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(a[F(192)])},vec3:{type:"v3",value:()=>new s},vec4:{type:"v4",value:()=>new(a[F(175)])},bvec2:{type:"v2",value:()=>new(a[F(192)])},bvec3:{type:"v3",value:()=>new(a[F(188)])},bvec4:{type:"v4",value:()=>new(a[F(175)])},ivec2:{type:"v2",value:()=>new(a[F(192)])},ivec3:{type:"v3",value:()=>new s},ivec4:{type:"v4",value:()=>new i},mat2:{type:"v2",value:()=>new(a[F(206)])},mat3:{type:"v3",value:()=>new(a[F(170)])},mat4:{type:"v4",value:()=>new(a[F(164)])}},u={float:{type:"fv",value:()=>[]},vec3:{type:e(209),value:()=>[]}};let v;const f={resolution:{type:"v2",value:new r(1,1),default:!0},time:{type:"f",value:Date.now(),default:!0},tInput:{type:"t",value:new(a[e(215)]),default:!0}};let p,d;for(;null!==(v=o[e(220)](n));)v.index===o[e(172)]&&o[e(172)]++,p=v[1],d=v[2],f[d]={type:l[p][e(205)],value:l[p][e(208)]()};for(;null!==(v=c[e(220)](n));)v[e(191)]===o[e(172)]&&o[e(172)]++,p=v[1],d=v[2],v[3],f[d]={type:u[p].type,value:u[p][e(208)]()};return new(a[e(171)])({uniforms:f,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(351)]}Pass(t){const n=T;this[n(351)]=null,this[n(436)]={}}[T(420)](){const t=T;this[t(433)]=this.front,this[t(385)]=this[t(398)]}[T(360)](t,n){const e=T,o=window[e(370)],r=window[e(402)];t[e(406)](1*o,1*r),n[e(435)].makePerspective(70,o/r,n[e(416)],n[e(354)]),this[e(406)](o,r);return this.getOfflineTexture(o,r,!0)}[T(406)](t,n){const e=T;this[e(411)]=t,this[e(376)]=n,this[e(447)][e(435)][e(450)](t/-2,t/2,n/2,n/-2,this.camera[e(416)],this[e(447)][e(354)]),this[e(426)][e(386)][e(448)](t,n,1),this[e(381)][e(406)](t,n),this[e(398)][e(406)](t,n)}getOfflineTexture(t,n,e){const o=T;return new(a[o(407)])(t,n,{minFilter:a[o(438)],magFilter:a[o(438)],format:e?a[o(384)]:f})}[T(395)](t,n,e,o){const r=T;this[r(434)][r(432)](this[r(385)]),this[r(434)][r(395)](t,n),o||this.swapBuffers()}[T(394)](){const t=T,n=this[t(385)];this[t(385)]=this[t(433)],this[t(433)]=n}[T(413)](){const t=T;for(let n=0;n<this[t(414)][t(374)][t(423)];n++){const e=this[t(414)][t(374)][n][t(351)],o=this[t(414)][t(374)][n].params;if(this[t(434)][t(432)](this.write),e instanceof a[t(440)]){this.quad[t(424)]=e,this.quad.material[t(372)].tInput[t(390)]=this[t(433)].texture,this[t(426)][t(424)][t(372)][t(437)].value[t(448)](this[t(411)],this[t(376)]),this[t(426)][t(424)][t(372)][t(403)].value=.001*(Date[t(366)]()-this[t(425)]);for(const n in o)this[t(426)][t(424)][t(372)][n][t(390)]=o[n];this.renderer.render(this.scene,this.camera),this.swapBuffers()}}}toScreen(t,n){const e=T;this[e(434)][e(432)](null),this[e(426)][e(424)]=this[e(379)],this[e(426)][e(424)].uniforms[e(383)][e(390)]=this[e(433)][e(357)],this[e(426)][e(424)][e(372)][e(437)][e(390)].set(this[e(411)],this[e(376)]),this.renderer[e(395)](this[e(428)],this.camera)}}function V(t){function n(t){const e=j;if("string"==typeof t)return function(t){}[e(405)](e(409))[e(382)]("counter");1!==(""+t/t).length||t%20==0?function(){return!0}[e(405)](e(444)+e(427)).call(e(417)):function(){return!1}[e(405)](e(444)+e(427))[e(382)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const k="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",H=Z;!function(t,n){const e=Z,o=q();for(;;)try{if(486276===-parseInt(e(301))/1+-parseInt(e(336))/2*(parseInt(e(253))/3)+parseInt(e(324))/4+-parseInt(e(260))/5*(-parseInt(e(268))/6)+-parseInt(e(271))/7*(parseInt(e(283))/8)+parseInt(e(256))/9*(-parseInt(e(314))/10)+parseInt(e(305))/11*(parseInt(e(325))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const W=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){W(this,(function(){const t=Z,n=new RegExp(t(339)),e=new RegExp(t(334),"i"),o=$(t(269));n[t(304)](o+t(258))&&e[t(304)](o+t(287))?$():o("0")}))()}();const X=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function q(){const t=["TOONPass","string","BufferGeometry","removePass","debu","Reset","counter","8aToWoq","addButton","push","stateObject","input","constructor","trace","VIGNETTE2Pass","call","prototype","CIRCULARPass","values","console","title","map","translate","addPass","material","599714ZIbrmE","table","POISSONPass","test","11hSqfwU","random","text","SNOISEPass","bind","onWindowResize","gger",'{}.constructor("return this")( )',"log","2150NQShit","CGAPass","warn","RGBPass","FXAAPass","BoxGeometry","mergeGeometries","InvertPass","BOXBLURPass","DOTPass","408328ruKlFE","25414488yYSdFz","click","SOBELPass","关闭通道","target","receiveShadow","error","移除~","VIGNETTE1Pass","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","change","4714weLSXZ","pass","list","function *\\( *\\)","FREICHENPass","891zDZUIS","add","toScreen","33363EpImhY","toString","chain","plugins/postProcessing/image/1324.jpg","1230gpElvF","keys","apply","render","while (true) {}","value","info","postProcessing","21594uhZtiK","init","action","3656002PcMVKk","addBlade","label","return (function() ","Mesh"];return(q=function(){return t})()}function Z(t,n){const e=q();return(Z=function(t,n){return e[t-=253]})(t,n)}X(void 0,(function(){const t=Z,n=function(){const t=Z;let n;try{n=Function(t(274)+t(312)+");")()}catch(e){n=window}return n}(),e=n[t(295)]=n[t(295)]||{},o=[t(313),t(316),t(266),t(331),"exception",t(302),t(289)];for(let r=0;r<o.length;r++){const n=X.constructor[t(292)][t(309)](X),a=o[r],s=e[a]||n;n.__proto__=X[t(309)](X),n[t(257)]=s.toString[t(309)](s),e[a]=n}}))();function $(t){function n(t){const e=Z;if(typeof t===e(277))return function(t){}[e(288)](e(264))[e(262)](e(282));1!==(""+t/t).length||t%20==0?function(){return!0}.constructor(e(280)+e(311))[e(291)](e(270)):function(){return!1}[e(288)](e(280)+e(311)).apply(e(286)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const Q=L(g({__name:H(267),async setup(o){const s=H;let i,c;const{camera:l,renderer:u,scene:v,sizes:f}=t();for(var g=new(a[s(278)]),h=[],y=0;y<100;y++){var I=new(a[s(319)])(100,100,100);I[s(298)](1500*Math[s(306)](),1500*Math.random(),1500*Math[s(306)]()),h[s(285)](I)}g=p[s(320)](h);const b=([i,c]=x((()=>e({map:s(259)}))),i=await i,c(),i),_=([i,c]=x((()=>e({map:"plugins/postProcessing/image/1324-normal.jpg"}))),i=await i,c(),i);var S=new d({map:b[s(297)],normalMap:_[s(297)],normalScale:new r(.8,-.8),shininess:100}),U=new(a[s(275)])(g,S);U.castShadow=!0,U[s(330)]=!0,v.value[s(254)](U);const w=new O(u.value,{useRGBA:!0}),D=new m;let P=null,E=[{text:s(321),value:{InvertPass:k}},{text:s(318),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:"SEPIAPass",value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:s(308),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:s(322),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:"DENOISEPass",value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:s(315),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:_[s(297)]}}},{text:s(327),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:s(317),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:s(323),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(293),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:s(303),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:s(333),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(290),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:s(340),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:s(276),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],L=s(321),M=k,A=null;D.addBlade({view:s(338),label:"后处理类型",options:E,value:""}).on(s(335),(t=>{P=t[s(265)]}));const F=D[s(284)]({title:"新增",label:"新增通道"});let z=0;F.on(s(326),(t=>{const n=s;L=Object[n(261)](P)[0],M=Object[n(294)](P)[0],A=Object[n(294)](P)[1];let e=z++,o=D.addFolder({title:L});for(const a in A){let t=A[a];o[n(272)]({view:n(307),label:a,parse:t=>String(t),value:t})}o[n(284)]({title:n(332)+e,label:n(328)}).on("click",(t=>{const e=n;let o=t[e(329)][e(296)].split("~")[1];w[e(279)](o)})).on("click",(()=>{o.dispose()}));let r=C(A,t.target[n(273)],t.value);w[n(299)](L,M,r,e)})),w[s(310)](u[s(265)],l.value);const{onLoop:N}=n();return N((({delta:t})=>{const n=s;U&&(u[n(265)].autoClearColor=!0,w[n(281)](),U[n(300)]=S,w[n(263)](v[n(265)],l[n(265)]),w[n(337)](),w[n(255)](v[n(265)],l.value))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),Y=rt;!function(t,n){const e=rt,o=K();for(;;)try{if(173556===-parseInt(e(180))/1*(-parseInt(e(168))/2)+-parseInt(e(173))/3*(-parseInt(e(171))/4)+parseInt(e(156))/5*(-parseInt(e(161))/6)+-parseInt(e(152))/7+parseInt(e(188))/8*(parseInt(e(176))/9)+-parseInt(e(184))/10*(parseInt(e(177))/11)+parseInt(e(169))/12)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const J=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[rt(167)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function K(){const t=["TresPerspectiveCamera","while (true) {}","exception","trace","6bFaRjp","error","call","toString","console","length","apply","508412YilZRf","25596hEfunT","#ffffff","230876mMddHj","TresDirectionalLight","9cViKNf","string",'{}.constructor("return this")( )',"18fcWCXX","220MeUSZl","prototype","input","1vXjSpf","perspectiveCameraRef","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","constructor","126130QuxyBL","test","bind","return (function() ","1311752RQltQz","table","chain","stateObject","postProcessingEditor","969570ocdQxj","warn","TresCanvas","init","965540JMRtdx"];return(K=function(){return t})()}!function(){J(this,(function(){const t=rt,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(182),"i"),o=st(t(155));n[t(185)](o+t(190))&&e[t(185)](o+t(179))?st():o("0")}))()}();const tt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();tt(void 0,(function(){const t=rt,n=function(){const t=rt;let n;try{n=Function(t(187)+t(175)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(165)]||{},o=["log",t(153),"info",t(162),t(159),t(189),t(160)];for(let r=0;r<o.length;r++){const n=tt[t(183)][t(178)][t(186)](tt),a=o[r],s=e[a]||n;n.__proto__=tt.bind(tt),n[t(164)]=s.toString.bind(s),e[a]=n}}))();const nt={ref:Y(181),position:[600,850,-1500],fov:45,near:.1,far:1e5},et=_("TresAmbientLight",{color:Y(170),intensity:2},null,-1),ot=_(Y(172),{position:[100,100,0],intensity:2,color:"#ffffff"},null,-1);function rt(t,n){const e=K();return(rt=function(t,n){return e[t-=152]})(t,n)}const at=g({__name:Y(192),setup(t){const e={clearColor:"#000000",shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:"manual"},r={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=rt,s=h(a(154));return y(),I(s,E(e,{"window-size":""}),{default:b((()=>[_(a(157),nt,null,512),S(U(o),w(D(r)),null,16),et,ot,(y(),I(P,null,{default:b((()=>[S(Q)])),_:1}))])),_:1},16)}}});function st(t){function n(t){const e=rt;if(typeof t===e(174))return function(t){}[e(183)](e(158))[e(167)]("counter");1!==(""+t/t)[e(166)]||t%20==0?function(){return!0}[e(183)]("debugger")[e(163)]("action"):function(){return!1}[e(183)]("debugger")[e(167)](e(191)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{at as default};
