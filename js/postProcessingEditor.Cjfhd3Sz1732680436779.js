import{m as t,e as n,b as e,U as o}from"./@tresjs.ozxSQdlw1732680436779.js";import{_ as r,as as s,cQ as a,n as i,aW as c,W as l,aD as u,cu as v}from"./three.HQIWXjA-1732680436779.js";import{P as f}from"./tweakpane.yHWGBmom1732680436779.js";import{d as p,a6 as d,e as m,o as g,f as x,g as h,J as y,j as I,u as b,aj as _,ak as S,al as U,m as w}from"./@vue.u2cBPEWn1732680436779.js";import{_ as P}from"./@fesjs.PwptM7Gh1732680436779.js";import"./@vueuse.OVEejUj91732680436779.js";import"./vue-router.87op6V6j1732680436779.js";import"./lodash-es.guXTxyfJ1732680436779.js";import"./@qlin.yHhFDldE1732680436779.js";import"./pinia.u6SS9Z3a1732680436779.js";import"./vue-demi.C4xddsk91732680436779.js";import"./@floating-ui.BPbuo5Gx1732680436779.js";import"./@juggle.7yjBMqoW1732680436779.js";!function(t,n){const e=M,o=E();for(;;)try{if(104287===-parseInt(e(464))/1+parseInt(e(480))/2*(-parseInt(e(501))/3)+parseInt(e(450))/4+-parseInt(e(497))/5+parseInt(e(451))/6*(parseInt(e(446))/7)+-parseInt(e(485))/8*(-parseInt(e(453))/9)+-parseInt(e(494))/10*(-parseInt(e(466))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const D=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[M(441)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function E(){const t=["send","counter","1032410YBoMPa","Matrix4","get","info","9fuubJr","name","WagnerLoadShaderException","onabort","object","exec","value","onload","apply","Matrix3","exception","console","ShaderMaterial","707TQyIwC","\" couldn't be loaded.","string","Texture","582096oNqagB","2466YLpYys","trace","9IeqJNy","message","debu","prototype","v3v","random","index","isArray","length","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","function *\\( *\\)","109579TAEKOp","onerror","11xUICBU","hasOwnProperty","log","constructor","call","action","type","now","error","lastIndex","return (function() ","replace","warn","table","132722HCzptG","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","Vector3",'Shader "',"toString","1025072lDTKui","bind","while (true) {}","input","Vector2",'" load was aborted.',"gger","init","stateObject","3042620MAYpGk"];return(E=function(){return t})()}!function(){D(this,(function(){const t=M,n=new RegExp(t(463)),e=new RegExp(t(481),"i"),o=C(t(492));n.test(o+"chain")&&e.test(o+t(488))?C():o("0")}))()}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[M(441)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();A(void 0,(function(){const t=M,n=function(){const t=M;let n;try{n=Function(t(476)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(444)]=n[t(444)]||{},o=[t(468),t(478),t(500),t(474),t(443),t(479),t(452)];for(let r=0;r<o[t(461)];r++){const n=A[t(469)][t(456)][t(486)](A),s=o[r],a=e[s]||n;n.__proto__=A.bind(A),n[t(484)]=a[t(484)].bind(a),e[s]=n}}))();function M(t,n){const e=E();return(M=function(t,n){return e[t-=441]})(t,n)}function L(t,n,e){const o=M;if(typeof t!==o(505)||null===t)return t;const r=Array[o(460)](t)?[]:{};for(const s in t)t[o(467)](s)&&(r[s]=L(t[s])),s==n&&(r[n]=e);return r}function C(t){function n(t){const e=M;if(typeof t===e(448))return function(t){}[e(469)](e(487))[e(441)](e(496));1!==(""+t/t)[e(461)]||t%20==0?function(){return!0}[e(469)](e(455)+e(491))[e(470)](e(471)):function(){return!1}.constructor("debu"+e(491))[e(441)](e(493)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const z=T;!function(t,n){const e=T,o=N();for(;;)try{if(877924===-parseInt(e(268))/1+-parseInt(e(246))/2+parseInt(e(236))/3+-parseInt(e(253))/4+-parseInt(e(317))/5+-parseInt(e(275))/6*(-parseInt(e(228))/7)+-parseInt(e(305))/8*(-parseInt(e(256))/9))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const F=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function T(t,n){const e=N();return(T=function(t,n){return e[t-=226]})(t,n)}function N(){const t=["log","WebGLRenderTarget","Mesh","CopyPass","tInput","apply","UnsignedByteType","removePass","back","type","render","gger","exception","push","uniforms","16380632wrTqBI","projectionMatrix","startTime","LinearFilter","renderer","toString","near","info","pass","table","splice","getOfflineTexture","8448080VEOmWE","PlaneGeometry",'{}.constructor("return this")( )',"prototype","while (true) {}","height","setRenderTarget","loadShadervf","now","innerHeight","minFilter","setSize","innerWidth","11244443TCYtbv","set","bind","input","shader","clone","wrapS","Stack","3068439WiAIts","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","Scene","useRGBA","Reset","swapBuffers","write","trace","settings","length","1473224zPkSmG","test","copyPass","RGBAFormat","far","passItems","call","215316iTQwtf","__proto__","resolution","9SBCxrQ","makePerspective","constructor","string","uuid","quad","error","MeshBasicMaterial","read","Pass","debu","ShaderMaterial","1318760MFzVRP","add","passes","RGBFormat","scene","value","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","6azDIGA","console","onWindowResize","width","scale","wrapT","ClampToEdgeWrapping","stencilBuffer","OrthographicCamera","camera","magFilter","material","function *\\( *\\)","stateObject","front"];return(N=function(){return t})()}!function(){F(this,(function(){const t=T,n=new RegExp(t(287)),e=new RegExp(t(274),"i"),o=G("init");n[t(247)](o+"chain")&&e[t(247)](o+t(231))?G():o("0")}))()}();const R=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[T(295)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();R(void 0,(function(){const t=T;let n;try{n=Function("return (function() "+t(319)+");")()}catch(r){n=window}const e=n[t(276)]=n[t(276)]||{},o=[t(290),"warn",t(312),t(262),t(302),t(314),t(243)];for(let s=0;s<o[t(245)];s++){const n=R[t(258)][t(320)][t(230)](R),r=o[s],a=e[r]||n;n[t(254)]=R[t(230)](R),n[t(310)]=a.toString[t(230)](a),e[r]=n}}))();class B{constructor(t,n){const e=T;this[e(278)]=1,this[e(322)]=1,this[e(244)]=n||{},this[e(239)]=this[e(244)][e(239)]||!1,this[e(309)]=t,this[e(248)]=this[e(293)](this.settings),this[e(272)]=new(r[e(238)]),this.quad=new(r[e(292)])(new(r[e(318)])(1,1),new(r[e(263)])),this[e(272)][e(269)](this[e(261)]),this.camera=new(r[e(283)])(1,1,1,1,-1e4,1e4),this[e(289)]=new(r[e(291)])(1,1,{minFilter:void 0!==this[e(244)][e(327)]?this.settings[e(327)]:i,magFilter:void 0!==this[e(244)][e(285)]?this.settings[e(285)]:r[e(308)],wrapS:void 0!==this[e(244)][e(234)]?this[e(244)][e(234)]:r[e(281)],wrapT:void 0!==this.settings[e(280)]?this.settings.wrapT:r[e(281)],format:this[e(239)]?c:r[e(271)],type:void 0!==this.settings.type?this[e(244)][e(299)]:r[e(296)],stencilBuffer:void 0===this.settings[e(282)]||this[e(244)].stencilBuffer}),this[e(298)]=this.front[e(233)](),this[e(307)]=Date.now(),this[e(270)]={},this.Stack={passItems:[],passes:[]}}addPass(t,n,e,o){const r=T;this[r(324)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(232)]};this.Stack[r(251)][r(303)](s)}[z(297)](t){const n=z;for(let e=this[n(235)][n(251)][n(245)]-1;e>=0;e--)this[n(235)][n(251)][e][n(260)]===parseInt(t)&&this[n(235)][n(251)][n(315)](e,1);console[n(290)](this[n(235)].passItems)}[z(293)](){const t=z;this.Pass[t(252)](this);return this[t(324)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[z(324)](t){const n=z,e=n(237);return this.shader=function(t,n){const e=M,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,i=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,c={sampler2D:{type:"t",value:()=>new(r[M(449)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[M(489)])},vec3:{type:"v3",value:()=>new(r[M(482)])},vec4:{type:"v4",value:()=>new s},bvec2:{type:"v2",value:()=>new(r[M(489)])},bvec3:{type:"v3",value:()=>new(r[M(482)])},bvec4:{type:"v4",value:()=>new s},ivec2:{type:"v2",value:()=>new(r[M(489)])},ivec3:{type:"v3",value:()=>new(r[M(482)])},ivec4:{type:"v4",value:()=>new s},mat2:{type:"v2",value:()=>new a},mat3:{type:"v3",value:()=>new(r[M(442)])},mat4:{type:"v4",value:()=>new(r[M(498)])}},l={float:{type:"fv",value:()=>[]},vec3:{type:e(457),value:()=>[]}};let u;const v={resolution:{type:"v2",value:new(r[e(489)])(1,1),default:!0},time:{type:"f",value:Date[e(473)](),default:!0},tInput:{type:"t",value:new(r[e(449)]),default:!0}};let f,p;for(;null!==(u=o[e(506)](n));)u[e(459)]===o[e(475)]&&o.lastIndex++,f=u[1],p=u[2],v[p]={type:c[f][e(472)],value:c[f].value()};for(;null!==(u=i.exec(n));)u[e(459)]===o.lastIndex&&o[e(475)]++,f=u[1],p=u[2],u[3],v[p]={type:l[f][e(472)],value:l[f][e(507)]()};return new(r[e(445)])({uniforms:v,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(232)]}[z(265)](t){this[z(232)]=null,this.params={}}[z(240)](){const t=z;this.read=this[t(289)],this[t(242)]=this.back}[z(277)](t,n){const e=z,o=window[e(227)],r=window[e(326)];t.setSize(1*o,1*r),n.projectionMatrix[e(257)](70,o/r,n.near,n[e(250)]),this[e(226)](o,r);return this[e(316)](o,r,!0)}[z(226)](t,n){const e=z;this[e(278)]=t,this[e(322)]=n,this[e(284)][e(306)].makeOrthographic(t/-2,t/2,n/2,n/-2,this[e(284)][e(311)],this[e(284)][e(250)]),this[e(261)][e(279)].set(t,n,1),this[e(289)][e(226)](t,n),this[e(298)][e(226)](t,n)}[z(316)](t,n,e){const o=z;return new l(t,n,{minFilter:r[o(308)],magFilter:r[o(308)],format:e?r[o(249)]:r[o(271)]})}[z(300)](t,n,e,o){const r=z;this[r(309)][r(323)](this[r(242)]),this[r(309)][r(300)](t,n),o||this[r(241)]()}[z(241)](){const t=z,n=this[t(242)];this[t(242)]=this[t(264)],this[t(264)]=n}[z(313)](){const t=z;for(let n=0;n<this[t(235)].passItems[t(245)];n++){const e=this.Stack[t(251)][n][t(232)],o=this[t(235)].passItems[n].params;if(this[t(309)][t(323)](this[t(242)]),e instanceof r[t(267)]){this[t(261)][t(286)]=e,this[t(261)].material[t(304)][t(294)][t(273)]=this.read.texture,this.quad[t(286)].uniforms[t(255)][t(273)][t(229)](this[t(278)],this[t(322)]),this.quad[t(286)][t(304)].time[t(273)]=.001*(Date[t(325)]()-this[t(307)]);for(const n in o)this[t(261)].material[t(304)][n][t(273)]=o[n];this[t(309)][t(300)](this[t(272)],this[t(284)]),this[t(241)]()}}}toScreen(t,n){const e=z;this[e(309)].setRenderTarget(null),this[e(261)][e(286)]=this[e(248)],this[e(261)][e(286)][e(304)][e(294)][e(273)]=this[e(264)].texture,this.quad[e(286)][e(304)].resolution.value.set(this[e(278)],this[e(322)]),this.renderer[e(300)](this.scene,this[e(284)])}}function G(t){function n(t){const e=T;if(typeof t===e(259))return function(t){}[e(258)](e(321))[e(295)]("counter");1!==(""+t/t).length||t%20==0?function(){return!0}[e(258)]("debu"+e(301))[e(252)]("action"):function(){return!1}[e(258)](e(266)+"gger")[e(295)](e(288)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const j="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}";!function(t,n){const e=H,o=k();for(;;)try{if(159625===parseInt(e(232))/1*(parseInt(e(231))/2)+-parseInt(e(229))/3+parseInt(e(230))/4+-parseInt(e(298))/5+-parseInt(e(300))/6*(parseInt(e(236))/7)+parseInt(e(269))/8*(parseInt(e(271))/9)+parseInt(e(244))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[H(263)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){O(this,(function(){const t=H,n=new RegExp(t(266)),e=new RegExp(t(261),"i"),o=W(t(274));n[t(304)](o+t(301))&&e.test(o+t(260))?W():o("0")}))()}();const V=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function H(t,n){const e=k();return(H=function(t,n){return e[t-=228]})(t,n)}function k(){const t=["input","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","debu","apply","removePass","push","function *\\( *\\)","list","action","8UsrdCD","map","218493ndxtlj","change","bind","init","移除~","dispose","addButton","DOTPass","autoClearColor","后处理类型","counter","onWindowResize","__proto__","Vector2","plugins/postProcessing/image/1324.jpg",'{}.constructor("return this")( )',"string","length","info","addBlade","keys","VIGNETTE2Pass","BufferGeometry","stateObject","call","关闭通道","values","402160EIRpvg","CGAPass","9258amLcFR","chain","constructor","SOBELPass","test","return (function() ","while (true) {}","addPass","204384OjVudy","707412dXlIOX","74126aHLWAy","2UJDhUU","新增通道","TOONPass","value","651igOQaH","BOXBLURPass","random","translate","console","warn","DENOISEPass","CIRCULARPass","1764280EFuBoA","MeshPhongMaterial","POISSONPass","InvertPass","addFolder","toString","target","Mesh","gger","exception","plugins/postProcessing/image/1324-normal.jpg","split","toScreen","click","SNOISEPass","receiveShadow"];return(k=function(){return t})()}V(void 0,(function(){const t=H,n=function(){const t=H;let n;try{n=Function(t(305)+t(286)+");")()}catch(e){n=window}return n}(),e=n[t(240)]=n[t(240)]||{},o=["log",t(241),t(289),"error",t(253),"table","trace"];for(let r=0;r<o.length;r++){const n=V[t(302)].prototype[t(273)](V),s=o[r],a=e[s]||n;n[t(283)]=V[t(273)](V),n[t(249)]=a.toString[t(273)](a),e[s]=n}}))();function W(t){function n(t){const e=H;if(typeof t===e(287))return function(t){}.constructor(e(306))[e(263)](e(281));1!==(""+t/t)[e(288)]||t%20==0?function(){return!0}[e(302)](e(262)+e(252))[e(295)](e(268)):function(){return!1}[e(302)](e(262)+"gger")[e(263)](e(294)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const X=P(p({__name:"postProcessing",async setup(o){const s=H;let a,i;const{camera:c,renderer:l,scene:p,sizes:m}=t();for(var g=new(r[s(293)]),x=[],h=0;h<100;h++){var y=new u(100,100,100);y[s(239)](1500*Math[s(238)](),1500*Math[s(238)](),1500*Math[s(238)]()),x[s(265)](y)}g=v(x);const I=([a,i]=d((()=>e({map:s(285)}))),a=await a,i(),a),b=([a,i]=d((()=>e({map:s(254)}))),a=await a,i(),a);var _=new(r[s(245)])({map:I[s(270)],normalMap:b[s(270)],normalScale:new(r[s(284)])(.8,-.8),shininess:100}),S=new(r[s(251)])(g,_);S.castShadow=!0,S[s(259)]=!0,p[s(235)].add(S);const U=new B(l[s(235)],{useRGBA:!0}),w=new f;let P=null,D=[{text:s(247),value:{InvertPass:j}},{text:"FXAAPass",value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:"SEPIAPass",value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:s(258),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:s(237),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:s(242),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:s(299),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:b[s(270)]}}},{text:s(303),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:"RGBPass",value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:s(278),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(243),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:s(246),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:"VIGNETTE1Pass",value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(292),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:"FREICHENPass",value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:s(234),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],E=s(247),A=j,M=null;w[s(290)]({view:s(267),label:s(280),options:D,value:""}).on(s(272),(t=>{P=t.value}));const C=w[s(277)]({title:"新增",label:s(233)});let z=0;C.on(s(257),(t=>{const n=s;E=Object[n(291)](P)[0],A=Object[n(297)](P)[0],M=Object.values(P)[1];let e=z++,o=w[n(248)]({title:E});for(const s in M){let t=M[s];o[n(290)]({view:"text",label:s,parse:t=>String(t),value:t})}o.addButton({title:n(275)+e,label:n(296)}).on(n(257),(t=>{const e=n;let o=t[e(250)].title[e(255)]("~")[1];U[e(264)](o)})).on(n(257),(()=>{o[n(276)]()}));let r=L(M,t[n(250)].label,t.value);U[n(228)](E,A,r,e)})),U[s(282)](l[s(235)],c[s(235)]);const{onLoop:F}=n();return F((({delta:t})=>{const n=s;S&&(l[n(235)][n(279)]=!0,U.Reset(),S.material=_,U.render(p[n(235)],c[n(235)]),U.pass(),U[n(256)](p.value,c[n(235)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),q=$;function Z(){const t=["warn","628gZnghi","console","counter","4dGpPle","1300LDNVEf",'{}.constructor("return this")( )',"error","length","constructor","10283TiRQec","TresDirectionalLight","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","toString","12863457Cncqxn","table","init","273990psunmt","chain","return (function() ","manual","apply","TresAmbientLight","debu","postProcessingEditor","4882215SevqvE","exception","2541639YfMsRl","call","prototype","test","string","TresCanvas","#000000","input","info","4919BlxCXv","16819UbIPjA","action","bind","__proto__","3064PFTHCG","#ffffff"];return(Z=function(){return t})()}function $(t,n){const e=Z();return($=function(t,n){return e[t-=325]})(t,n)}!function(t,n){const e=$,o=Z();for(;;)try{if(901301===parseInt(e(342))/1*(-parseInt(e(350))/2)+-parseInt(e(333))/3*(-parseInt(e(353))/4)+parseInt(e(331))/5+-parseInt(e(366))/6+parseInt(e(359))/7*(-parseInt(e(347))/8)+parseInt(e(363))/9+-parseInt(e(354))/10*(parseInt(e(343))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[$(327)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){Q(this,(function(){const t=$,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(361),"i"),o=tt(t(365));n[t(336)](o+t(367))&&e.test(o+t(340))?tt():o("0")}))()}();const Y=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();Y(void 0,(function(){const t=$,n=function(){const t=$;let n;try{n=Function(t(325)+t(355)+");")()}catch(e){n=window}return n}(),e=n[t(351)]=n.console||{},o=["log",t(349),t(341),t(356),t(332),t(364),"trace"];for(let r=0;r<o[t(357)];r++){const n=Y[t(358)][t(335)][t(345)](Y),s=o[r],a=e[s]||n;n[t(346)]=Y.bind(Y),n[t(362)]=a[t(362)][t(345)](a),e[s]=n}}))();const J={ref:"perspectiveCameraRef",position:[600,850,-1500],fov:45,near:.1,far:1e5},K=p({__name:q(330),setup(t){const e=q,r={clearColor:e(339),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(326)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=m(a(338));return g(),x(i,w(r,{"window-size":""}),{default:h((()=>[y("TresPerspectiveCamera",J,null,512),I(b(o),_(S(s)),null,16),n[0]||(n[0]=y(a(328),{color:a(348),intensity:2},null,-1)),n[1]||(n[1]=y(a(360),{position:[100,100,0],intensity:2,color:a(348)},null,-1)),(g(),x(U,null,{default:h((()=>[I(X)])),_:1}))])),_:1},16)}}});function tt(t){function n(t){const e=$;if(typeof t===e(337))return function(t){}[e(358)]("while (true) {}").apply(e(352));1!==(""+t/t)[e(357)]||t%20==0?function(){return!0}.constructor(e(329)+"gger")[e(334)](e(344)):function(){return!1}[e(358)](e(329)+"gger").apply("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{K as default};
