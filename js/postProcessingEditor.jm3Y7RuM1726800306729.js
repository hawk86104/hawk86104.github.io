import{p as t,U as n,z as e,Y as o}from"./@tresjs.pv1MNfNv1726800306729.js";import{_ as r,Y as s,k as a,at as i,V as c,cO as l,M as u,n as v,bf as f,aW as p,cP as d,m,cr as x,s as g}from"./three.ZddO3ejJ1726800306729.js";import{P as h}from"./tweakpane.yHWGBmom1726800306729.js";import{d as y,a4 as I,e as b,o as _,f as S,g as U,L as w,j as P,u as D,aj as E,ak as M,al as A,m as L}from"./@vue.bvMz0l_u1726800306729.js";import{_ as C}from"./@fesjs.ZmXcHXlr1726800306729.js";import"./@vueuse.bZHkTEeA1726800306729.js";import"./vue-router.IQrzWmDn1726800306729.js";import"./lodash-es.guXTxyfJ1726800306729.js";import"./@qlin.yHhFDldE1726800306729.js";import"./pinia.sgFdRj_31726800306729.js";import"./@floating-ui.BPbuo5Gx1726800306729.js";import"./@juggle.7yjBMqoW1726800306729.js";!function(t,n){const e=R,o=N();for(;;)try{if(228766===parseInt(e(412))/1+parseInt(e(420))/2*(parseInt(e(438))/3)+parseInt(e(429))/4*(parseInt(e(396))/5)+-parseInt(e(423))/6*(-parseInt(e(444))/7)+parseInt(e(388))/8*(-parseInt(e(393))/9)+-parseInt(e(424))/10*(parseInt(e(417))/11)+-parseInt(e(413))/12)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){z(this,(function(){const t=R,n=new RegExp(t(398)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=G(t(416));n[t(453)](o+t(404))&&e[t(453)](o+t(408))?G():o("0")}))()}();const F=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();F(void 0,(function(){const t=R;let n;try{n=Function(t(389)+t(430)+");")()}catch(r){n=window}const e=n[t(395)]=n[t(395)]||{},o=[t(437),t(391),t(386),t(450),t(441),t(402),"trace"];for(let s=0;s<o[t(455)];s++){const n=F[t(433)].prototype.bind(F),r=o[s],a=e[r]||n;n[t(400)]=F[t(392)](F),n.toString=a[t(432)][t(392)](a),e[r]=n}}))();function T(t,n,e){const o=R;if("object"!=typeof t||null===t)return t;const r=Array[o(418)](t)?[]:{};for(const s in t)t[o(421)](s)&&(r[s]=T(t[s])),s==n&&(r[n]=e);return r}function N(){const t=["exception","Vector4","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","1022WHCoAH","open","WagnerLoadShaderException","index","random","v3v","error",'" load was aborted.',"apply","test","name","length","info","message","232zdWNMD","return (function() ","now","warn","bind","33381QbFMOx","stateObject","console","100355xmGBxB","call","function *\\( *\\)","lastIndex","__proto__","action","table",'Shader "',"chain","gger","get","type","input","replace","responseText","Matrix3","273075dPsHNV","1907316drJrDo","\" couldn't be loaded.","onload","init","11iDyTUw","isArray","Vector3","89116mMgcPR","hasOwnProperty","ShaderMaterial","17388SgrxsS","3546580yKyuxo","debu","counter","value","onerror","4ESjboP",'{}.constructor("return this")( )',"Vector2","toString","constructor","onabort","Texture","send","log","9tIQJOk","exec","while (true) {}"];return(N=function(){return t})()}function R(t,n){const e=N();return(R=function(t,n){return e[t-=386]})(t,n)}function G(t){function n(t){const e=R;if("string"==typeof t)return function(t){}[e(433)](e(440)).apply(e(426));1!==(""+t/t)[e(455)]||t%20==0?function(){return!0}[e(433)](e(425)+e(405))[e(397)](e(401)):function(){return!1}[e(433)](e(425)+e(405))[e(452)](e(394)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const B=V;!function(t,n){const e=V,o=O();for(;;)try{if(376964===-parseInt(e(438))/1+-parseInt(e(426))/2*(parseInt(e(410))/3)+-parseInt(e(417))/4*(-parseInt(e(422))/5)+parseInt(e(449))/6*(-parseInt(e(381))/7)+-parseInt(e(432))/8*(parseInt(e(376))/9)+-parseInt(e(365))/10+parseInt(e(383))/11*(parseInt(e(408))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const j=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[V(372)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function V(t,n){const e=O();return(V=function(t,n){return e[t-=360]})(t,n)}!function(){j(this,(function(){const t=V,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(459),"i"),o=W(t(454));n[t(367)](o+t(465))&&e[t(367)](o+"input")?W():o("0")}))()}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[V(372)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function O(){const t=["84dosUNe","pass","WebGLRenderTarget","far","getOfflineTexture","passes","renderer","2014040FAMLoP","LinearFilter","innerWidth","type","makePerspective","5nQftXl","log","magFilter","now","32542KWCAzb","ClampToEdgeWrapping","camera","params","Mesh","wrapS","460384isleSc","time","makeOrthographic","console","debu","error","253565yPdWXt","projectionMatrix","OrthographicCamera","constructor","PlaneGeometry","write","material","scene","innerHeight","width","stateObject","110652xfYLpS","height","shader","add","wrapT","init","settings","RGBFormat","minFilter","toString","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","trace","tInput","removePass","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","set","chain","UnsignedByteType","MeshBasicMaterial","setSize","string","splice","2507950ZRlTbd","Pass","test","useRGBA","render","bind","toScreen","apply","clone","back","Reset","117ZvUyYU","quad","loadShadervf","addPass","swapBuffers","49aDMrTn","push","3763364dMeClj","prototype","CopyPass","__proto__","passItems","counter","exception","Stack","return (function() ","setRenderTarget","length","read","action","startTime","resolution","uniforms","Scene","front","texture","gger","value","uuid","stencilBuffer","near","copyPass","60OoHUwc","call"];return(O=function(){return t})()}H(void 0,(function(){const t=V,n=function(){const t=V;let n;try{n=Function(t(391)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(435)]=n[t(435)]||{},o=[t(423),"warn","info",t(437),t(389),"table",t(460)];for(let r=0;r<o[t(393)];r++){const n=H[t(441)][t(384)][t(370)](H),s=o[r],a=e[s]||n;n[t(386)]=H[t(370)](H),n[t(458)]=a.toString[t(370)](a),e[s]=n}}))();class k{constructor(t,n){const e=V;this[e(447)]=1,this[e(450)]=1,this[e(455)]=n||{},this.useRGBA=this[e(455)][e(368)]||!1,this[e(416)]=t,this[e(407)]=this.CopyPass(this[e(455)]),this.scene=new(r[e(399)]),this.quad=new(r[e(430)])(new(r[e(442)])(1,1),new(r[e(361)])),this.scene[e(452)](this[e(377)]),this[e(428)]=new(r[e(440)])(1,1,1,1,-1e4,1e4),this[e(400)]=new(r[e(412)])(1,1,{minFilter:void 0!==this.settings[e(457)]?this[e(455)][e(457)]:v,magFilter:void 0!==this[e(455)][e(424)]?this[e(455)][e(424)]:r[e(418)],wrapS:void 0!==this[e(455)][e(431)]?this.settings[e(431)]:r[e(427)],wrapT:void 0!==this[e(455)][e(453)]?this[e(455)][e(453)]:f,format:this.useRGBA?p:r[e(456)],type:void 0!==this[e(455)][e(420)]?this[e(455)][e(420)]:r[e(360)],stencilBuffer:void 0===this[e(455)].stencilBuffer||this[e(455)][e(405)]}),this[e(374)]=this[e(400)][e(373)](),this.startTime=Date[e(425)](),this[e(415)]={},this[e(390)]={passItems:[],passes:[]}}[B(379)](t,n,e,o){const r=B;this.loadShadervf(n);const s={shaderName:t,params:e,uuid:o,shader:this.shader};this[r(390)][r(387)][r(382)](s)}[B(462)](t){const n=B;for(let e=this.Stack[n(387)][n(393)]-1;e>=0;e--)this[n(390)][n(387)][e][n(404)]===parseInt(t)&&this.Stack.passItems[n(364)](e,1);console.log(this[n(390)][n(387)])}[B(385)](){const t=B;this[t(366)][t(409)](this);return this[t(378)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[B(378)](t){const n=B,e=n(463);return this[n(451)]=function(t,n){const e=R,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,v=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,f={sampler2D:{type:"t",value:()=>new s},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new a},vec3:{type:"v3",value:()=>new(r[R(419)])},vec4:{type:"v4",value:()=>new(r[R(442)])},bvec2:{type:"v2",value:()=>new(r[R(431)])},bvec3:{type:"v3",value:()=>new(r[R(419)])},bvec4:{type:"v4",value:()=>new i},ivec2:{type:"v2",value:()=>new(r[R(431)])},ivec3:{type:"v3",value:()=>new c},ivec4:{type:"v4",value:()=>new(r[R(442)])},mat2:{type:"v2",value:()=>new l},mat3:{type:"v3",value:()=>new(r[R(411)])},mat4:{type:"v4",value:()=>new u}},p={float:{type:"fv",value:()=>[]},vec3:{type:e(449),value:()=>[]}};let d;const m={resolution:{type:"v2",value:new(r[e(431)])(1,1),default:!0},time:{type:"f",value:Date[e(390)](),default:!0},tInput:{type:"t",value:new(r[e(435)]),default:!0}};let x,g;for(;null!==(d=o[e(439)](n));)d[e(447)]===o[e(399)]&&o[e(399)]++,x=d[1],g=d[2],m[g]={type:f[x][e(407)],value:f[x][e(427)]()};for(;null!==(d=v.exec(n));)d.index===o[e(399)]&&o[e(399)]++,x=d[1],g=d[2],d[3],m[g]={type:p[x][e(407)],value:p[x][e(427)]()};return new(r[e(422)])({uniforms:m,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(451)]}Pass(t){const n=B;this.shader=null,this[n(429)]={}}[B(375)](){const t=B;this.read=this[t(400)],this[t(443)]=this.back}onWindowResize(t,n){const e=B,o=window[e(419)],r=window[e(446)];t[e(362)](1*o,1*r),n[e(439)][e(421)](70,o/r,n.near,n.far),this[e(362)](o,r);return this[e(414)](o,r,!0)}setSize(t,n){const e=B;this[e(447)]=t,this[e(450)]=n,this.camera[e(439)][e(434)](t/-2,t/2,n/2,n/-2,this[e(428)][e(406)],this[e(428)][e(413)]),this[e(377)].scale[e(464)](t,n,1),this[e(400)].setSize(t,n),this[e(374)][e(362)](t,n)}[B(414)](t,n,e){const o=B;return new(r[o(412)])(t,n,{minFilter:v,magFilter:r[o(418)],format:e?p:d})}[B(369)](t,n,e,o){const r=B;this.renderer[r(392)](this[r(443)]),this[r(416)].render(t,n),o||this.swapBuffers()}[B(380)](){const t=B,n=this.write;this[t(443)]=this[t(394)],this[t(394)]=n}[B(411)](){const t=B;for(let n=0;n<this[t(390)].passItems[t(393)];n++){const e=this.Stack[t(387)][n].shader,o=this[t(390)][t(387)][n][t(429)];if(this[t(416)][t(392)](this[t(443)]),e instanceof m){this[t(377)][t(444)]=e,this[t(377)][t(444)].uniforms.tInput.value=this[t(394)][t(401)],this.quad[t(444)][t(398)][t(397)][t(403)].set(this[t(447)],this[t(450)]),this[t(377)][t(444)][t(398)][t(433)][t(403)]=.001*(Date[t(425)]()-this[t(396)]);for(const n in o)this.quad[t(444)][t(398)][n][t(403)]=o[n];this[t(416)][t(369)](this[t(445)],this[t(428)]),this[t(380)]()}}}[B(371)](t,n){const e=B;this[e(416)].setRenderTarget(null),this[e(377)][e(444)]=this[e(407)],this[e(377)][e(444)][e(398)][e(461)][e(403)]=this.read.texture,this[e(377)].material[e(398)][e(397)][e(403)][e(464)](this[e(447)],this[e(450)]),this.renderer[e(369)](this[e(445)],this[e(428)])}}function W(t){function n(t){const e=V;if(typeof t===e(363))return function(t){}[e(441)]("while (true) {}")[e(372)](e(388));1!==(""+t/t).length||t%20==0?function(){return!0}[e(441)](e(436)+e(402))[e(409)](e(395)):function(){return!1}[e(441)](e(436)+e(402))[e(372)](e(448)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const X="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",q=$;!function(t,n){const e=$,o=Q();for(;;)try{if(140240===parseInt(e(138))/1+-parseInt(e(187))/2*(parseInt(e(179))/3)+parseInt(e(142))/4+-parseInt(e(190))/5*(-parseInt(e(134))/6)+-parseInt(e(169))/7*(parseInt(e(161))/8)+-parseInt(e(146))/9+parseInt(e(186))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function $(t,n){const e=Q();return($=function(t,n){return e[t-=124]})(t,n)}function Q(){const t=["BoxGeometry","label","toScreen","addButton","新增通道","431571jakstn","translate","keys","gger",'{}.constructor("return this")( )',"value","error","2175280mnXlGT","2qLVVQH","Reset","dispose","429820vThCIX","pass","移除~","push","list","后处理类型","while (true) {}","call","string","FREICHENPass","VIGNETTE1Pass","trace","init","SOBELPass","BufferGeometry","material","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","click","render","removePass","change","SEPIAPass","test","6fWeupE","toString","__proto__","console","215651nzrfIq","addFolder","log","function *\\( *\\)","138508FvvuaM","constructor","random","split","1816155ETrOFV","table","length","text","map","plugins/postProcessing/image/1324-normal.jpg","SNOISEPass","FXAAPass","InvertPass","autoClearColor","return (function() ","target","prototype","apply","values","16raPGHD","Vector2","postProcessing","addPass","action","MeshPhongMaterial","chain","addBlade","237573kIpRKU","DENOISEPass","bind","plugins/postProcessing/image/1324.jpg","warn"];return(Q=function(){return t})()}!function(){Z(this,(function(){const t=$,n=new RegExp(t(141)),e=new RegExp(t(127),"i"),o=K(t(202));n[t(133)](o+t(167))&&e[t(133)](o+"input")?K():o("0")}))()}();const Y=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();Y(void 0,(function(){const t=$;let n;try{n=Function(t(156)+t(183)+");")()}catch(r){n=window}const e=n.console=n[t(137)]||{},o=[t(140),t(173),"info",t(185),"exception",t(147),t(201)];for(let s=0;s<o[t(148)];s++){const n=Y[t(143)][t(158)].bind(Y),r=o[s],a=e[r]||n;n[t(136)]=Y.bind(Y),n.toString=a[t(135)][t(171)](a),e[r]=n}}))();function K(t){function n(t){const e=$;if(typeof t===e(198))return function(t){}[e(143)](e(196))[e(159)]("counter");1!==(""+t/t)[e(148)]||t%20==0?function(){return!0}[e(143)]("debu"+e(182))[e(197)](e(165)):function(){return!1}[e(143)]("debugger")[e(159)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const J=C(y({__name:q(163),async setup(o){const s=q;let a,i;const{camera:c,renderer:l,scene:u,sizes:v}=t();for(var f=new(r[s(125)]),p=[],d=0;d<100;d++){var m=new(r[s(174)])(100,100,100);m[s(180)](1500*Math[s(144)](),1500*Math[s(144)](),1500*Math[s(144)]()),p[s(193)](m)}f=x(p);const y=([a,i]=I((()=>e({map:s(172)}))),a=await a,i(),a),b=([a,i]=I((()=>e({map:s(151)}))),a=await a,i(),a);var _=new(r[s(166)])({map:y[s(150)],normalMap:b[s(150)],normalScale:new(r[s(162)])(.8,-.8),shininess:100}),S=new g(f,_);S.castShadow=!0,S.receiveShadow=!0,u.value.add(S);const U=new k(l[s(184)],{useRGBA:!0}),w=new h;let P=null,D=[{text:s(154),value:{InvertPass:X}},{text:s(153),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:s(132),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:s(152),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:"BOXBLURPass",value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:s(170),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:"CGAPass",value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:b.map}}},{text:s(124),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:"RGBPass",value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:"DOTPass",value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:"CIRCULARPass",value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:"POISSONPass",value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:s(200),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:"VIGNETTE2Pass",value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:s(199),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:"TOONPass",value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],E=s(154),M=X,A=null;w[s(168)]({view:s(194),label:s(195),options:D,value:""}).on(s(131),(t=>{P=t[s(184)]}));const L=w[s(177)]({title:"新增",label:s(178)});let C=0;L.on("click",(t=>{const n=s;E=Object[n(181)](P)[0],M=Object.values(P)[0],A=Object[n(160)](P)[1];let e=C++,o=w[n(139)]({title:E});for(const s in A){let t=A[s];o[n(168)]({view:n(149),label:s,parse:t=>String(t),value:t})}o[n(177)]({title:n(192)+e,label:"关闭通道"}).on("click",(t=>{const e=n;let o=t[e(157)].title[e(145)]("~")[1];U[e(130)](o)})).on(n(128),(()=>{o[n(189)]()}));let r=T(A,t[n(157)][n(175)],t.value);U[n(164)](E,M,r,e)})),U.onWindowResize(l[s(184)],c.value);const{onLoop:z}=n();return z((({delta:t})=>{const n=s;S&&(l.value[n(155)]=!0,U[n(188)](),S[n(126)]=_,U[n(129)](u[n(184)],c[n(184)]),U[n(191)](),U[n(176)](u.value,c[n(184)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),tt=it;!function(t,n){const e=it,o=ot();for(;;)try{if(297517===-parseInt(e(184))/1+parseInt(e(173))/2*(parseInt(e(196))/3)+parseInt(e(187))/4+-parseInt(e(176))/5+-parseInt(e(203))/6+parseInt(e(183))/7+parseInt(e(208))/8)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const nt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[it(171)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){nt(this,(function(){const t=it,n=new RegExp(t(192)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=lt("init");n[t(179)](o+"chain")&&e[t(179)](o+t(177))?lt():o("0")}))()}();const et=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function ot(){const t=["exception","toString","3938352xHptVL","prototype","action","apply","TresDirectionalLight","1332tTQWab","call","TresAmbientLight","2082450LlgITK","input","while (true) {}","test","console","error","#000000","2912126JWQCZn","309957kyzvad","warn","perspectiveCameraRef","608728LoHgEi","trace","stateObject","string","constructor","function *\\( *\\)",'{}.constructor("return this")( )',"postProcessingEditor","table","2307kzQWAc","TresPerspectiveCamera","length","info","log","gger","debu","3292104rUfbRY","bind","#ffffff"];return(ot=function(){return t})()}et(void 0,(function(){const t=it,n=function(){const t=it;let n;try{n=Function("return (function() "+t(193)+");")()}catch(e){n=window}return n}(),e=n[t(180)]=n[t(180)]||{},o=[t(200),t(185),t(199),t(181),t(206),t(195),t(188)];for(let r=0;r<o[t(198)];r++){const n=et.constructor[t(209)][t(204)](et),s=o[r],a=e[s]||n;n.__proto__=et[t(204)](et),n[t(207)]=a[t(207)][t(204)](a),e[s]=n}}))();const rt={ref:tt(186),position:[600,850,-1500],fov:45,near:.1,far:1e5},st=w(tt(175),{color:tt(205),intensity:2},null,-1),at=w(tt(172),{position:[100,100,0],intensity:2,color:"#ffffff"},null,-1);function it(t,n){const e=ot();return(it=function(t,n){return e[t-=171]})(t,n)}const ct=y({__name:tt(194),setup(t){const e=tt,r={clearColor:e(182),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:"manual"},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=b("TresCanvas");return _(),S(i,L(r,{"window-size":""}),{default:U((()=>[w(a(197),rt,null,512),P(D(o),E(M(s)),null,16),st,at,(_(),S(A,null,{default:U((()=>[P(J)])),_:1}))])),_:1},16)}}});function lt(t){function n(t){const e=it;if(typeof t===e(190))return function(t){}[e(191)](e(178))[e(171)]("counter");1!==(""+t/t)[e(198)]||t%20==0?function(){return!0}[e(191)](e(202)+e(201))[e(174)](e(210)):function(){return!1}[e(191)](e(202)+e(201))[e(171)](e(189)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{ct as default};
