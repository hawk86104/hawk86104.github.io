import{m as t,e as n,b as e,U as o}from"./@tresjs.XlmHwCPa1735906732968.js";import{k as r,_ as s,as as a,n as i,bf as c,cU as l,m as u,cw as v}from"./three.VhLXWX0H1735906732968.js";import{P as f}from"./tweakpane.yHWGBmom1735906732968.js";import{d as p,a4 as d,e as m,o as x,f as g,g as h,J as y,j as I,u as b,aj as _,ak as S,al as U,m as w}from"./@vue.yG49nQHr1735906732968.js";import{_ as P}from"./@fesjs.OL5agSaf1735906732968.js";import"./@vueuse.HCIFcVWX1735906732968.js";import"./vue-router.OGOa9Z4t1735906732968.js";import"./lodash-es.kYt-_xTG1735906732968.js";import"./@qlin.yHhFDldE1735906732968.js";import"./pinia.ZaWyowAg1735906732968.js";import"./vue-demi.C4xddsk91735906732968.js";import"./@floating-ui.BPbuo5Gx1735906732968.js";import"./@juggle.7yjBMqoW1735906732968.js";!function(t,n){const e=L,o=A();for(;;)try{if(656670===parseInt(e(460))/1+-parseInt(e(443))/2+parseInt(e(450))/3+-parseInt(e(449))/4+parseInt(e(431))/5*(parseInt(e(455))/6)+-parseInt(e(428))/7+-parseInt(e(453))/8)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const D=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(479)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){D(this,(function(){const t=L,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(433),"i"),o=C("init");n[t(457)](o+t(441))&&e[t(457)](o+t(472))?C():o("0")}))()}();const E=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(479)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function L(t,n){const e=A();return(L=function(t,n){return e[t-=425]})(t,n)}function A(){const t=["ShaderMaterial","stateObject","counter","598980nGbFSd","953772VWCMfN","length","bind","132408hPKxOU","responseText","136824mseLve","send","test","v3v","toString","136459KZbppx","onerror","message",'" load was aborted.',"info","string","Matrix2","get","Vector2","\" couldn't be loaded.","while (true) {}","hasOwnProperty","input","trace","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","random","value","onabort","gger","apply","index","action","type","Vector3","lastIndex","console","call","constructor","562058baqehe","isArray","Texture","230nmzqhi","replace","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","debu","onload","Matrix3","error",'{}.constructor("return this")( )',"Vector4","log","chain","WagnerLoadShaderException","1200214LqFFOC",'Shader "',"Matrix4"];return(A=function(){return t})()}E(void 0,(function(){const t=L;let n;try{n=Function("return (function() "+t(438)+");")()}catch(r){n=window}const e=n.console=n[t(425)]||{},o=[t(440),"warn",t(464),t(437),"exception","table",t(473)];for(let s=0;s<o[t(451)];s++){const n=E[t(427)].prototype[t(452)](E),r=o[s],a=e[r]||n;n.__proto__=E.bind(E),n[t(459)]=a[t(459)][t(452)](a),e[r]=n}}))();function M(t,n,e){const o=L;if("object"!=typeof t||null===t)return t;const r=Array[o(429)](t)?[]:{};for(const s in t)t[o(471)](s)&&(r[s]=M(t[s])),s==n&&(r[n]=e);return r}function C(t){function n(t){const e=L;if(typeof t===e(465))return function(t){}[e(427)](e(470))[e(479)](e(448));1!==(""+t/t)[e(451)]||t%20==0?function(){return!0}[e(427)]("debu"+e(478))[e(426)](e(481)):function(){return!1}[e(427)](e(434)+e(478))[e(479)](e(447)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const F=R;!function(t,n){const e=R,o=N();for(;;)try{if(253097===parseInt(e(365))/1*(parseInt(e(315))/2)+parseInt(e(370))/3+parseInt(e(388))/4*(-parseInt(e(347))/5)+parseInt(e(350))/6*(parseInt(e(384))/7)+parseInt(e(326))/8*(-parseInt(e(389))/9)+-parseInt(e(329))/10*(parseInt(e(303))/11)+-parseInt(e(319))/12)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(332)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){z(this,(function(){const t=R,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(393),"i"),o=G("init");n[t(294)](o+t(373))&&e[t(294)](o+"input")?G():o("0")}))()}();const T=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(332)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function N(){const t=["tInput","counter","back","wrapT","3928IxSXau","loadShadervf","length","60yWFaBt","debu","shader","apply","material","WebGLRenderTarget","clone","RGBFormat","console","addPass","scene","CopyPass","MeshBasicMaterial","wrapS","return (function() ","render","read","removePass","65ovjGkU","PlaneGeometry","swapBuffers","6PRnbla","far","params","camera","toScreen","Pass","call","stateObject","front","passes","__proto__","passItems","while (true) {}","onWindowResize","LinearFilter","116XJtrYF","uniforms","setRenderTarget","width","write","441294QALjoH","setSize","resolution","chain","action","renderer",'{}.constructor("return this")( )',"scale","value","useRGBA","warn","splice","Scene","now","208096ivYBER","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","ClampToEdgeWrapping","set","52708SICUnF","495HnTFyf","log","exception","constructor","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","settings","getOfflineTexture","startTime","toString","OrthographicCamera","trace","test","type","makeOrthographic","info","RGBAFormat","stencilBuffer","texture","add","prototype","122177laBRAB","near","projectionMatrix","Mesh","quad","UnsignedByteType","string","magFilter","innerWidth","bind","time","minFilter","8716XfmJXn","height","Stack","uuid","1971708llTEJf","gger","table"];return(N=function(){return t})()}T(void 0,(function(){const t=R;let n;try{n=Function(t(343)+t(376)+");")()}catch(r){n=window}const e=n[t(337)]=n[t(337)]||{},o=[t(390),t(380),t(297),"error",t(391),t(321),t(293)];for(let s=0;s<o[t(328)];s++){const n=T[t(392)][t(302)][t(312)](T),r=o[s],a=e[r]||n;n[t(360)]=T[t(312)](T),n[t(291)]=a.toString[t(312)](a),e[r]=n}}))();class B{constructor(t,n){const e=R;this[e(368)]=1,this[e(316)]=1,this[e(394)]=n||{},this[e(379)]=this[e(394)][e(379)]||!1,this[e(375)]=t,this.copyPass=this[e(340)](this.settings),this[e(339)]=new(s[e(382)]),this.quad=new(s[e(306)])(new(s[e(348)])(1,1),new(s[e(341)])),this.scene[e(301)](this[e(307)]),this.camera=new(s[e(292)])(1,1,1,1,-1e4,1e4),this[e(358)]=new(s[e(334)])(1,1,{minFilter:void 0!==this[e(394)][e(314)]?this[e(394)].minFilter:s[e(364)],magFilter:void 0!==this.settings[e(310)]?this[e(394)][e(310)]:i,wrapS:void 0!==this[e(394)].wrapS?this[e(394)][e(342)]:c,wrapT:void 0!==this[e(394)][e(325)]?this.settings[e(325)]:s[e(386)],format:this.useRGBA?s[e(298)]:s[e(336)],type:void 0!==this[e(394)][e(295)]?this[e(394)][e(295)]:s[e(308)],stencilBuffer:void 0===this[e(394)][e(299)]||this[e(394)][e(299)]}),this[e(324)]=this[e(358)][e(335)](),this[e(396)]=Date[e(383)](),this[e(359)]={},this[e(317)]={passItems:[],passes:[]}}[F(338)](t,n,e,o){const r=F;this[r(327)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(331)]};this[r(317)][r(361)].push(s)}[F(346)](t){const n=F;for(let e=this[n(317)][n(361)][n(328)]-1;e>=0;e--)this[n(317)].passItems[e][n(318)]===parseInt(t)&&this[n(317)][n(361)][n(381)](e,1);console[n(390)](this.Stack.passItems)}[F(340)](){const t=F;this[t(355)][t(356)](this);return this[t(327)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[F(327)](t){const n=F,e=n(385);return this[n(331)]=function(t,n){const e=L,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,i=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,c={sampler2D:{type:"t",value:()=>new(s[L(430)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new r},vec3:{type:"v3",value:()=>new(s[L(483)])},vec4:{type:"v4",value:()=>new(s[L(439)])},bvec2:{type:"v2",value:()=>new(s[L(468)])},bvec3:{type:"v3",value:()=>new(s[L(483)])},bvec4:{type:"v4",value:()=>new(s[L(439)])},ivec2:{type:"v2",value:()=>new(s[L(468)])},ivec3:{type:"v3",value:()=>new(s[L(483)])},ivec4:{type:"v4",value:()=>new a},mat2:{type:"v2",value:()=>new(s[L(466)])},mat3:{type:"v3",value:()=>new(s[L(436)])},mat4:{type:"v4",value:()=>new(s[L(445)])}},l={float:{type:"fv",value:()=>[]},vec3:{type:e(458),value:()=>[]}};let u;const v={resolution:{type:"v2",value:new r(1,1),default:!0},time:{type:"f",value:Date.now(),default:!0},tInput:{type:"t",value:new(s[e(430)]),default:!0}};let f,p;for(;null!==(u=o.exec(n));)u[e(480)]===o.lastIndex&&o.lastIndex++,f=u[1],p=u[2],v[p]={type:c[f][e(482)],value:c[f].value()};for(;null!==(u=i.exec(n));)u[e(480)]===o[e(484)]&&o[e(484)]++,f=u[1],p=u[2],u[3],v[p]={type:l[f][e(482)],value:l[f][e(476)]()};return new(s[e(446)])({uniforms:v,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(331)]}[F(355)](t){this[F(331)]=null,this.params={}}Reset(){const t=F;this[t(345)]=this[t(358)],this[t(369)]=this[t(324)]}[F(363)](t,n){const e=F,o=window[e(311)],r=window.innerHeight;t[e(371)](1*o,1*r),n[e(305)].makePerspective(70,o/r,n[e(304)],n.far),this[e(371)](o,r);return this[e(395)](o,r,!0)}[F(371)](t,n){const e=F;this[e(368)]=t,this.height=n,this[e(353)][e(305)][e(296)](t/-2,t/2,n/2,n/-2,this[e(353)].near,this[e(353)][e(351)]),this[e(307)][e(377)][e(387)](t,n,1),this[e(358)][e(371)](t,n),this.back.setSize(t,n)}getOfflineTexture(t,n,e){const o=F;return new(s[o(334)])(t,n,{minFilter:s[o(364)],magFilter:s[o(364)],format:e?s[o(298)]:l})}[F(344)](t,n,e,o){const r=F;this[r(375)].setRenderTarget(this.write),this.renderer[r(344)](t,n),o||this[r(349)]()}swapBuffers(){const t=F,n=this[t(369)];this[t(369)]=this[t(345)],this[t(345)]=n}pass(){const t=F;for(let n=0;n<this[t(317)][t(361)][t(328)];n++){const e=this.Stack[t(361)][n].shader,o=this[t(317)].passItems[n][t(352)];if(this[t(375)][t(367)](this[t(369)]),e instanceof u){this.quad[t(333)]=e,this[t(307)][t(333)][t(366)].tInput[t(378)]=this.read.texture,this[t(307)][t(333)][t(366)][t(372)][t(378)][t(387)](this[t(368)],this[t(316)]),this.quad[t(333)][t(366)][t(313)][t(378)]=.001*(Date[t(383)]()-this.startTime);for(const n in o)this[t(307)][t(333)].uniforms[n][t(378)]=o[n];this.renderer[t(344)](this[t(339)],this[t(353)]),this[t(349)]()}}}[F(354)](t,n){const e=F;this.renderer[e(367)](null),this[e(307)][e(333)]=this.copyPass,this[e(307)][e(333)][e(366)][e(322)][e(378)]=this[e(345)][e(300)],this[e(307)][e(333)][e(366)][e(372)].value[e(387)](this[e(368)],this[e(316)]),this.renderer[e(344)](this[e(339)],this.camera)}}function R(t,n){const e=N();return(R=function(t,n){return e[t-=291]})(t,n)}function G(t){function n(t){const e=R;if(typeof t===e(309))return function(t){}.constructor(e(362))[e(332)](e(323));1!==(""+t/t)[e(328)]||t%20==0?function(){return!0}.constructor(e(330)+e(320))[e(356)](e(374)):function(){return!1}[e(392)]("debu"+e(320)).apply(e(357)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const j="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",O=H;!function(t,n){const e=H,o=W();for(;;)try{if(308409===parseInt(e(401))/1+-parseInt(e(372))/2*(-parseInt(e(361))/3)+parseInt(e(375))/4*(-parseInt(e(405))/5)+parseInt(e(326))/6*(-parseInt(e(354))/7)+-parseInt(e(329))/8+-parseInt(e(360))/9*(-parseInt(e(373))/10)+parseInt(e(392))/11*(parseInt(e(370))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const V=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[H(366)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){V(this,(function(){const t=H,n=new RegExp(t(374)),e=new RegExp(t(381),"i"),o=X(t(386));n[t(328)](o+t(323))&&e[t(328)](o+t(394))?X():o("0")}))()}();const k=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[H(366)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function H(t,n){const e=W();return(H=function(t,n){return e[t-=320]})(t,n)}function W(){const t=["781976pctCdy","add","FREICHENPass","SEPIAPass","plugins/postProcessing/image/1324-normal.jpg","receiveShadow","log","FXAAPass","CGAPass","DOTPass","random","addPass","BufferGeometry","Reset","values","keys","value","关闭通道","console","Mesh","POISSONPass","label","material","info","table","2730539eBxbZS","prototype","split","while (true) {}","map","counter","36uWduZO","3rTwXJf","return (function() ","target","push","action","apply","VIGNETTE2Pass","mergeGeometries","plugins/postProcessing/image/1324.jpg","12vWvtXZ","addBlade","603838BUbfDI","51730KkHwsk","function *\\( *\\)","69756qjvLzY","autoClearColor","postProcessing","bind","text","pass","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","dispose","SOBELPass","BoxGeometry","toString","init","string","warn","__proto__","click","list","3888203YxnTAo","call","input","InvertPass","addButton","stateObject","MeshPhongMaterial","removePass","constructor","521246MzSvCU",'{}.constructor("return this")( )',"addFolder","change","115QGWcUN","CIRCULARPass","translate","DENOISEPass","chain","length","SNOISEPass","6ahjCvv","castShadow","test"];return(W=function(){return t})()}k(void 0,(function(){const t=H,n=function(){const t=H;let n;try{n=Function(t(362)+t(402)+");")()}catch(e){n=window}return n}(),e=n[t(347)]=n.console||{},o=[t(335),t(388),t(352),"error","exception",t(353),"trace"];for(let r=0;r<o[t(324)];r++){const n=k.constructor[t(355)][t(378)](k),s=o[r],a=e[s]||n;n[t(389)]=k[t(378)](k),n[t(385)]=a[t(385)][t(378)](a),e[s]=n}}))();function X(t){function n(t){const e=H;if(typeof t===e(387))return function(t){}[e(400)](e(357))[e(366)](e(359));1!==(""+t/t)[e(324)]||t%20==0?function(){return!0}.constructor("debugger")[e(393)](e(365)):function(){return!1}.constructor("debugger")[e(366)](e(397)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const q=P(p({__name:O(377),async setup(o){const a=O;let i,c;const{camera:l,renderer:u,scene:p,sizes:m}=t();for(var x=new(s[a(341)]),g=[],h=0;h<100;h++){var y=new(s[a(384)])(100,100,100);y[a(321)](1500*Math[a(339)](),1500*Math.random(),1500*Math[a(339)]()),g[a(364)](y)}x=v[a(368)](g);const I=([i,c]=d((()=>e({map:a(369)}))),i=await i,c(),i),b=([i,c]=d((()=>e({map:a(333)}))),i=await i,c(),i);var _=new(s[a(398)])({map:I[a(358)],normalMap:b[a(358)],normalScale:new r(.8,-.8),shininess:100}),S=new(s[a(348)])(x,_);S[a(327)]=!0,S[a(334)]=!0,p[a(345)][a(330)](S);const U=new B(u[a(345)],{useRGBA:!0}),w=new f;let P=null,D=[{text:a(395),value:{InvertPass:j}},{text:a(336),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:a(332),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:a(325),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:"BOXBLURPass",value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:a(322),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:a(337),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:b[a(358)]}}},{text:a(383),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:"RGBPass",value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:a(338),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:a(320),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:a(349),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:"VIGNETTE1Pass",value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:a(367),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:a(331),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:"TOONPass",value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],E="InvertPass",L=j,A=null;w[a(371)]({view:a(391),label:"后处理类型",options:D,value:""}).on(a(404),(t=>{P=t[a(345)]}));const C=w[a(396)]({title:"新增",label:"新增通道"});let F=0;C.on(a(390),(t=>{const n=a;E=Object[n(344)](P)[0],L=Object[n(343)](P)[0],A=Object[n(343)](P)[1];let e=F++,o=w[n(403)]({title:E});for(const s in A){let t=A[s];o.addBlade({view:n(379),label:s,parse:t=>String(t),value:t})}o.addButton({title:"移除~"+e,label:n(346)}).on("click",(t=>{const e=n;let o=t[e(363)].title[e(356)]("~")[1];U[e(399)](o)})).on(n(390),(()=>{o[n(382)]()}));let r=M(A,t.target[n(350)],t[n(345)]);U[n(340)](E,L,r,e)})),U.onWindowResize(u.value,l[a(345)]);const{onLoop:z}=n();return z((({delta:t})=>{const n=a;S&&(u[n(345)][n(376)]=!0,U[n(342)](),S[n(351)]=_,U.render(p[n(345)],l[n(345)]),U[n(380)](),U.toScreen(p.value,l[n(345)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),Z=K;!function(t,n){const e=K,o=Q();for(;;)try{if(741817===-parseInt(e(431))/1+-parseInt(e(405))/2*(parseInt(e(412))/3)+parseInt(e(403))/4*(-parseInt(e(406))/5)+parseInt(e(437))/6*(parseInt(e(407))/7)+-parseInt(e(402))/8*(-parseInt(e(418))/9)+-parseInt(e(433))/10+-parseInt(e(404))/11*(-parseInt(e(411))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const $=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){$(this,(function(){const t=K,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(428),"i"),o=nt(t(432));n.test(o+t(417))&&e[t(413)](o+"input")?nt():o("0")}))()}();const J=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[K(430)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();J(void 0,(function(){const t=K,n=function(){const t=K;let n;try{n=Function("return (function() "+t(426)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(408)]||{},o=[t(422),t(425),"info",t(414),t(421),t(438),t(419)];for(let r=0;r<o.length;r++){const n=J[t(409)][t(439)].bind(J),s=o[r],a=e[s]||n;n[t(415)]=J.bind(J),n[t(399)]=a[t(399)][t(396)](a),e[s]=n}}))();const Y={ref:"perspectiveCameraRef",position:[600,850,-1500],fov:45,near:.1,far:1e5};function K(t,n){const e=Q();return(K=function(t,n){return e[t-=396]})(t,n)}function Q(){const t=["1414292mWMBwd","init","8098310iiwaVZ","counter","length","TresDirectionalLight","22890keohnn","table","prototype","bind","#ffffff","string","toString","manual","postProcessingEditor","120824TWvYZq","4rbPJjL","47641lDprRt","82VkLnvm","4646305LLWgjo","1057NesRES","console","constructor","debu","8916lymCtW","39009oStgWI","test","error","__proto__","#000000","chain","378XuCdmx","trace","stateObject","exception","log","gger","TresPerspectiveCamera","warn",'{}.constructor("return this")( )',"call","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","TresCanvas","apply"];return(Q=function(){return t})()}const tt=p({__name:Z(401),setup(t){const e=Z,r={clearColor:e(416),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(400)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=m(a(429));return x(),g(i,w(r,{"window-size":""}),{default:h((()=>[y(a(424),Y,null,512),I(b(o),_(S(s)),null,16),n[0]||(n[0]=y("TresAmbientLight",{color:a(397),intensity:2},null,-1)),n[1]||(n[1]=y(a(436),{position:[100,100,0],intensity:2,color:a(397)},null,-1)),(x(),g(U,null,{default:h((()=>[I(q)])),_:1}))])),_:1},16)}}});function nt(t){function n(t){const e=K;if(typeof t===e(398))return function(t){}[e(409)]("while (true) {}")[e(430)](e(434));1!==(""+t/t)[e(435)]||t%20==0?function(){return!0}[e(409)](e(410)+e(423))[e(427)]("action"):function(){return!1}[e(409)](e(410)+e(423)).apply(e(420)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{tt as default};
