import{_ as o,K as e}from"./@tresjs.DqJWjmrH1761100244891.js";import{V as a,j as n,k as t,o as r,cq as s,a0 as i}from"./three.DvmzhRS91761100244891.js";import"./vanilla.esm.5.5.0.CsbunUBT1761100244891.js";import{u as l}from"./utils.pnKaL4Sf1761100244891.js";import{u as m}from"./index.wJolfAi41761100244891.js";import{P as c}from"./tweakpane.CqZAnw7f1761100244891.js";import{d as p,ac as u,r as v,a as d,w as g,G as x,o as f,I as y,a9 as b,aa as w,u as C,g as h,b as P,e as j,h as z,ap as _}from"./@vue.CKlgtJke1761100244891.js";import"./postprocessing.CYU4Fj-U1761100244891.js";import"./@vueuse.mZcBai3M1761100244891.js";import"./object-hash.zo7S6bgL1761100244891.js";import"./@amap.fjyZdsU91761100244891.js";import"./jszip.DTlig5CR1761100244891.js";import"./Resource.mX5inOAT1761100244891.js";import"./three-stdlib.Bkbtr8od1761100244891.js";import"./useLoader.DWT9Jk041761100244891.js";const M=["geometry"],A=p({__name:"fragmentModelCom",async setup(e){let i,p;const h=o=>{const e=[];return o.traverse(o=>{o instanceof r&&(o.geometry.deleteAttribute("uv"),o.geometry.deleteAttribute("tangent"),e.push(o.geometry))}),s(e)},P=h(([i,p]=u(()=>m("https://opensource.cdn.icegl.cn/model/eCommerce/guanYu.glb")),i=await i,p(),i).scene.children[0]);P.rotateX(Math.PI/2),P.translate(0,-.9,0);const j=P.clone().toNonIndexed(),z=h(([i,p]=u(()=>m("https://opensource.cdn.icegl.cn/model/industry4/modelDraco.glb")),i=await i,p(),i).scene.children[0]);z.rotateX(-Math.PI/2),z.rotateY(Math.PI/3);const _=z.clone().toNonIndexed(),A=j.attributes.position.array,D=j.attributes.position.count,N=_.attributes.position.array,V=_.attributes.normal.array,I=_.attributes.position.count,R=new Float32Array(D),B=new Float32Array(3*(D+2)),F=new Float32Array(3*(D+2)),S=new Float32Array(3*(D+2));for(let o=0;o<D;o+=3){const e=1*Math.random(),n=o%I;R[o]=e,R[o+1]=e,R[o+2]=e;const t=3*o,r=A[t],s=A[t+1],i=A[t+2],l=A[t+3],m=A[t+4],c=A[t+5],p=A[t+6],u=A[t+7],v=A[t+8],d=new a(r+l+p,s+m+u,i+c+v).divideScalar(3);B.set([d.x,d.y,d.z],3*o),B.set([d.x,d.y,d.z],3*(o+1)),B.set([d.x,d.y,d.z],3*(o+2));const g=(o,e,a)=>{const n=3*a;for(let t=0;t<3;t++){const r=n+3*t;e.set([o[r],o[r+1],o[r+2]],3*(a+t))}};g(N,F,n),g(V,S,n)}j.setAttribute("aRandom",new n(R,1)),j.setAttribute("aCenter",new n(B,3)),j.setAttribute("toPosition",new n(F,3)),j.setAttribute("toNormal",new n(S,3)),console.log(j.attributes);const T=([i,p]=u(()=>l("./plugins/visualArts/image/fragment512px.png")),i=await i,p(),i),U={uniforms:{u_progress:{value:-.1},matcap1:{value:T},m1Color:{type:"v3",value:new t("#ffc0fa")},matcap2:{value:T},m2Color:{type:"v3",value:new t("#bcd4ff")}},vertexShader:"varying vec2 vUv;\nvarying vec3 vNormal;\nvarying vec3 vViewPosition;\n\nattribute vec3 aCenter;\nattribute vec3 toPosition;\nattribute vec3 toNormal;\nattribute float aRandom;\n\nuniform float u_progress;\n\n#include <common>\n\nmat4 rotation3d(vec3 axis, float angle) {\n  axis = normalize(axis);\n  float s = sin(angle);\n  float c = cos(angle);\n  float oc = 1.0 - c;\n\n  return mat4(\n      oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s,\n      oc * axis.z * axis.x + axis.y * s, 0.0, oc * axis.x * axis.y + axis.z * s,\n      oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s, 0.0,\n      oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s,\n      oc * axis.z * axis.z + c, 0.0, 0.0, 0.0, 0.0, 1.0);\n}\n\nvoid main() {\n  vUv = uv;\n\n  float progress = u_progress;\n  float sinProgress = sin(progress * PI);\n\n  vec3 pos = mix(position, toPosition, progress);\n  vec3 nor = mix(normal, toNormal, progress);\n\n  vNormal = normalMatrix * normalize(nor);\n\n  float prog = ((pos.y + 1.) / 2.) * 1.1;\n\n  float locprog = clamp((sinProgress - 0.9 * prog) / 0.2, 0., 1.);\n\n  vec3 transform = pos - aCenter;\n\n  transform += 3. * aRandom * nor * locprog;\n\n  transform *= (1.0 - locprog);\n\n  transform += aCenter;\n\n  mat4 rotation = rotation3d(vec3(0., 1., 0.), aRandom * (locprog)*PI * 3.);\n\n  transform = (rotation * vec4(transform, 1.)).xyz;\n\n  vec4 modelViewPosition = modelViewMatrix * vec4(transform, 1.0);\n\n  gl_Position = projectionMatrix * modelViewPosition;\n\n  vViewPosition = -modelViewPosition.xyz;\n}",fragmentShader:"varying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec3 vViewPosition;\nuniform sampler2D matcap;\nuniform sampler2D matcap2;\nuniform float u_progress;\nuniform vec3 m1Color;\nuniform vec3 m2Color;\n\nvoid main() {\n  vec3 viewDir = normalize(vViewPosition);\n  vec3 x = normalize(vec3(viewDir.z, 0.0, -viewDir.x));\n  vec3 y = cross(viewDir, x);\n  vec2 uv = vec2(dot(x, vNormal), dot(y, vNormal)) * 0.495 + 0.5;\n\n  float progress = abs(sin(u_progress));\n\n  vec3 matcapColor = texture2D(matcap, uv).rgb;\n  matcapColor = mix(matcapColor, m1Color, 0.5);\n  vec3 matcap2Color = texture2D(matcap2, uv).rgb;\n  matcap2Color = mix(matcap2Color, m2Color, 0.5);\n\n  vec3 color = vec3(matcapColor);\n  color = mix(color, matcap2Color, progress);\n\n  gl_FragColor = vec4(color, 1.0);\n}"},X=v({c1:"#ffc0fa",c2:"#bcd4ff"}),Y=d(.5),k=new c({title:"参数"});return k.addBinding(U.uniforms.u_progress,"value",{label:"变化量",min:-.1,max:1,step:.001}).disabled=!0,k.addBinding(X,"c1",{label:"颜色1st"}),k.addBinding(X,"c2",{label:"颜色2rd"}),k.addBinding(Y,"value",{label:"速度",min:.001,max:1,step:.001}),g(X,o=>{U.uniforms.m1Color.value.set(o.c1),U.uniforms.m2Color.value.set(o.c2)},{deep:!0}),o().onBeforeRender(({elapsed:o})=>{U.uniforms.u_progress.value=(Math.sin(o*Y.value)+1)/2,k.refresh()}),(o,e)=>(f(),x("TresMesh",{geometry:C(j)},[y("TresShaderMaterial",b(w(U)),null,16)],8,M))}}),D=p({__name:"fragmentModel",setup(o){const a=v({enableDamping:!0,enableZoom:!0,autoRotate:!0,enablePan:!0,enableRotate:!0}),n={clearColor:"#000000",windowSize:!0,toneMapping:i,toneMappingExposure:.8};return(o,t)=>{const r=h("TresCanvas");return f(),P(r,b(w(n)),{default:j(()=>[t[0]||(t[0]=y("TresPerspectiveCamera",{position:[0,2,8],fov:45,near:.1,far:1e3},null,-1)),z(C(e),b(w(a)),null,16),t[1]||(t[1]=y("TresAmbientLight",{intensity:2},null,-1)),(f(),P(_,null,{default:j(()=>[z(A)]),_:1}))]),_:1},16)}}});export{D as default};
