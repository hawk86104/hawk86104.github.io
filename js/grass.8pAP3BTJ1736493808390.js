import{_ as t,C as n,V as e,ai as o}from"./three.lAfZYOpc1736493808390.js";import{e as r,b as a,U as i,c as s}from"./@tresjs.g7tJPOCI1736493808390.js";import"./index.xXpPnLl01736493808390.js";import{c}from"./simplex-noise.jB2HxhHB1736493808390.js";import{C as l}from"./index.QSC3gk6Q1736493808390.js";import{d as u,a4 as f,o as p,D as h,J as m,u as v,r as d,f as g,g as x,j as y,aj as w,ak as b,al as _}from"./@vue.-Mz_IXfk1736493808390.js";import{_ as M}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.7FpG22F_1736493808390.js";import"./@vueuse.kU-N6GoC1736493808390.js";import"./lamina.bMvYlR9n1736493808390.js";import"./glsl-tokenizer.KZVa7SXR1736493808390.js";import"./@amap.nSU5n3nL1736493808390.js";import"./glsl-token-descope.rP0xMGlR1736493808390.js";import"./glsl-token-depth.aH1FpG9a1736493808390.js";import"./glsl-token-scope.yzyvhnVx1736493808390.js";import"./glsl-token-properties.S1j66vC31736493808390.js";import"./glsl-token-assignments.P9grjbVp1736493808390.js";import"./glsl-token-string.0CJUJEg21736493808390.js";import"./glsl-token-functions.tkMPzmy51736493808390.js";import"./object-hash.DG5huwqG1736493808390.js";import"./jszip.NJRHV3NU1736493808390.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.Y9S8vQgA1736493808390.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.emV2MxkJ1736493808390.js";import"./three-stdlib.fsyd4aYS1736493808390.js";import"./@pmndrs.oxz-0pU-1736493808390.js";import"./utils.E_OH3_rZ1736493808390.js";const z=D;function j(){const t=["log","side","needsUpdate","attributes-offset","console","info","time","PlaneGeometry","map","push","154930eUqJen","10133944mgwRTd",'{}.constructor("return this")( )',"__proto__","convertSRGBToLinear","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","test","TresInstancedBufferGeometry","return (function() ","length","28EGvxow","grass","toneMapped","offsetsF32","22924rnOdnm","2039556LdIcnM","2680lBhfGg","attributes-position","counter","Vector3","Vector4","gger","alphaMap","#000f00","init","table","set","debu","action","attributes","attributes-orientation","cos","Color","error","geometry","index","lookAt","prototype","material","constructor","InstancedBufferAttribute","halfRootAngleCosF32","stateObject","1698744ddaWzR","toString","normalize","613805mJAiRi","random","9VCIWaF","9UrCmco","attributes-uv","attributes-stretch","orientationsF32","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","TresMesh","sin","apply","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","8976205Nsftfi","TresGroup","uniforms","array","bind","value","DoubleSide","string","chain","width","call","warn"];return(j=function(){return t})()}!function(t,n){const e=D,o=j();for(;;)try{if(644884===parseInt(e(161))/1*(-parseInt(e(192))/2)+-parseInt(e(155))/3+parseInt(e(202))/4*(-parseInt(e(158))/5)+-parseInt(e(207))/6+parseInt(e(170))/7+parseInt(e(193))/8*(parseInt(e(160))/9)+parseInt(e(128))/10*(parseInt(e(206))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const I=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){I(this,(function(){const t=D,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(169),"i"),o=E(t(136));n[t(198)](o+t(178))&&e[t(198)](o+"input")?E():o("0")}))()}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[D(168)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();A(void 0,(function(){const t=D;let n;try{n=Function(t(200)+t(194)+");")()}catch(r){n=window}const e=n[t(186)]=n[t(186)]||{},o=[t(182),t(181),t(187),t(145),"exception",t(137),"trace"];for(let a=0;a<o[t(201)];a++){const n=A.constructor[t(149)].bind(A),r=o[a],i=e[r]||n;n[t(195)]=A[t(174)](A),n[t(156)]=i[t(156)].bind(i),e[r]=n}}))();const C=[z(150)],R=[z(147),z(129),z(162),z(185),z(142),z(163),"attributes-halfRootAngleSin","attributes-halfRootAngleCos"],S=[z(146)],F=[z(183)],k=u({__name:z(203),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(o){const i=z;let s,u;const d=([s,u]=f((()=>a({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),s=await s,u(),s),g=o,x=c(Math[i(159)]);function y(n,e){const o=i,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,a=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,s=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,c=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(132)])(r,a,s,c)}function w(t,n){var e=2*x(t/50,n/50);return e+=4*x(t/100,n/100),e+=.2*x(t/10,n/10)}const b=function(n,o){const r=i,a=[],s=[],c=[],l=[],u=[];let f=new(t[r(132)]),p=new(t[r(132)]);const h=-.25;for(let i=0;i<n;i++){const m=Math[r(159)]()*o-o/2,v=Math[r(159)]()*o-o/2,d=w(m,v);a[r(191)](m,d,v);let g=Math.PI-Math[r(159)]()*(2*Math.PI);l[r(191)](Math[r(167)](.5*g)),u[r(191)](Math[r(143)](.5*g));let x=new e(0,1,0),b=x.x*Math[r(167)](g/2),_=x.y*Math[r(167)](g/2),M=x.z*Math.sin(g/2),z=Math[r(143)](g/2);f.set(b,_,M,z)[r(157)](),g=.5*Math[r(159)]()+h,x=new(t[r(131)])(1,0,0),b=x.x*Math[r(167)](g/2),_=x.y*Math[r(167)](g/2),M=x.z*Math[r(167)](g/2),z=Math.cos(g/2),p[r(138)](b,_,M,z)[r(157)](),f=y(f,p),g=.5*Math[r(159)]()+h,x=new(t[r(131)])(0,0,1),b=x.x*Math[r(167)](g/2),_=x.y*Math[r(167)](g/2),M=x.z*Math[r(167)](g/2),z=Math[r(143)](g/2),p[r(138)](b,_,M,z)[r(157)](),f=y(f,p),s[r(191)](f.x,f.y,f.z,f.w),i<n/3?c[r(191)](1.8*Math[r(159)]()):c.push(Math[r(159)]())}return{offsetsF32:new(t[r(152)])(new Float32Array(a),3),orientationsF32:new(t[r(152)])(new Float32Array(s),4),stretchesF32:new(t[r(152)])(new Float32Array(c),1),halfRootAngleCosF32:new(t[r(152)])(new Float32Array(u),1),halfRootAngleSinF32:new(t[r(152)])(new Float32Array(l),1)}}(g.instances,g[i(179)]),_=new(t[i(189)])(g.bW,g.bH,1,g.joints).translate(0,g.bH/2,0),M=new(t[i(189)])(g[i(179)],g[i(179)],32,32);M[i(148)](new(t[i(131)])(0,1,0));const j=M[i(141)].position;for(let t=0;t<j.array[i(201)];t+=3)j[i(173)][t+1]=w(j[i(173)][t],j[i(173)][t+2]);M[i(141)].position[i(184)]=!0,M.computeVertexNormals();const I=new(l({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(t[i(144)])(.3,.9,0)[i(196)](),bottomColor:new n(0,.2,0)[i(196)]()},i(165),i(197),(n=>{const e=i;n[e(183)]=t[e(176)]})));I[i(190)]=d[i(190)],I[i(134)]=d.alphaMap,I[i(204)]=!1;const{onLoop:A}=r();return A((({elapsed:t})=>{const n=i;I[n(172)][n(188)][n(175)]=t/4})),(n,e)=>{const o=i;return p(),h(o(171),null,[m(o(166),{material:v(I)},[m(o(199),{index:v(_)[o(147)],"attributes-position":v(_)[o(141)].position,"attributes-uv":v(_)[o(141)].uv,"attributes-offset":v(b)[o(205)],"attributes-orientation":v(b)[o(164)],"attributes-stretch":v(b).stretchesF32,"attributes-halfRootAngleSin":v(b).halfRootAngleSinF32,"attributes-halfRootAngleCos":v(b)[o(153)]},null,8,R)],8,C),m(o(166),{position:[0,0,0],geometry:v(M)},[m("TresMeshStandardMaterial",{color:o(135),side:t[o(176)]},null,8,F)],8,S)])}}});function D(t,n){const e=j();return(D=function(t,n){return e[t-=128]})(t,n)}function E(t){function n(t){const e=D;if(typeof t===e(177))return function(t){}[e(151)]("while (true) {}").apply(e(130));1!==(""+t/t)[e(201)]||t%20==0?function(){return!0}[e(151)](e(139)+e(133))[e(180)](e(140)):function(){return!1}[e(151)](e(139)+e(133))[e(168)](e(154)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const O=L;!function(t,n){const e=L,o=P();for(;;)try{if(993002===-parseInt(e(449))/1*(-parseInt(e(461))/2)+-parseInt(e(467))/3*(parseInt(e(462))/4)+-parseInt(e(465))/5*(-parseInt(e(460))/6)+-parseInt(e(474))/7+-parseInt(e(458))/8+parseInt(e(471))/9+parseInt(e(480))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const T=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(475)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){T(this,(function(){const t=L,n=new RegExp(t(456)),e=new RegExp(t(466),"i"),o=G(t(468));n[t(453)](o+t(464))&&e.test(o+"input")?G():o("0")}))()}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function L(t,n){const e=P();return(L=function(t,n){return e[t-=445]})(t,n)}function P(){const t=["function *\\( *\\)","return (function() ","12262216qfzKhc","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","84nUSpRs","134VEuWLd","72188vCvGai","counter","chain","609640JdFNBX","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","87seNWoS","init","constructor","info","6948369fcHbIz","debu","error","12452699PVDsxE","apply","while (true) {}","gger","warn","toString","14053040xCKgEM","string","grass","trace","TresPerspectiveCamera","bind","14086MofNGN","log","length","prototype","test","action","console"];return(P=function(){return t})()}B(void 0,(function(){const t=L,n=function(){const t=L;let n;try{n=Function(t(457)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n.console=n[t(455)]||{},o=[t(450),t(478),t(470),t(473),"exception","table",t(446)];for(let r=0;r<o[t(451)];r++){const n=B[t(469)][t(452)][t(448)](B),a=o[r],i=e[a]||n;n.__proto__=B[t(448)](B),n[t(479)]=i[t(479)][t(448)](i),e[a]=n}}))();const U=u({__name:O(445),setup(t){const n=d({alpha:!0,toneMapping:o,windowSize:!0,clearColor:6710886}),e=d({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=L;return p(),g(v(s),w(b(n)),{default:x((()=>[o[0]||(o[0]=m(r(447),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),y(v(i),w(b(e)),null,16),(p(),g(_,null,{default:x((()=>[y(k)])),_:1})),(p(),g(_,null,{default:x((()=>[y(v(M),{texture:r(459)})])),_:1}))])),_:1},16)}}});function G(t){function n(t){const e=L;if(typeof t===e(481))return function(t){}.constructor(e(476)).apply(e(463));1!==(""+t/t).length||t%20==0?function(){return!0}[e(469)](e(472)+e(477)).call(e(454)):function(){return!1}.constructor(e(472)+e(477)).apply("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{U as default};
