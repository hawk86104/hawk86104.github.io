import{m as t,_ as n,C as e,t as o,b as r,a7 as i,ap as a}from"./three.hBhj0ayh1743149128717.js";import{e as s,a as c,o as l}from"./@tresjs.GCV-1VTd1743149128717.js";import"./index.Xix8hMyG1743149128717.js";import{c as u}from"./simplex-noise.jB2HxhHB1743149128717.js";import{C as f}from"./index.PmOAufZy1743149128717.js";import{d as p,a3 as h,o as m,H as v,N as d,u as g,r as x,e as w,f as y,g as b,j as _,aj as j,ak as z,al as M}from"./@vue.L-brCdZe1743149128717.js";import{_ as A}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.WoP0Euu11743149128717.js";import"./postprocessing.JYKQQ2FM1743149128717.js";import"./@vueuse.K3OHOx4F1743149128717.js";import"./lamina.mqNewNRZ1743149128717.js";import"./glsl-tokenizer.ukpT6Px21743149128717.js";import"./@amap.vd0D2A1W1743149128717.js";import"./glsl-token-descope.ygEThuDH1743149128717.js";import"./glsl-token-depth.-hC1Mir11743149128717.js";import"./glsl-token-scope.KNe4AlMc1743149128717.js";import"./glsl-token-properties.DGubRxCv1743149128717.js";import"./glsl-token-assignments.n_He5C1p1743149128717.js";import"./glsl-token-string.dqNRlliU1743149128717.js";import"./glsl-token-functions.zyCLDcqa1743149128717.js";import"./object-hash.7UG-M_Ap1743149128717.js";import"./jszip.i7DSFoEV1743149128717.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.gV2yslDy1743149128717.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.M5frV4ig1743149128717.js";import"./three-stdlib.WxcFbdsf1743149128717.js";import"./@pmndrs.ln9AfXsI1743149128717.js";import"./utils.8PlTguw41743149128717.js";const I=R;!function(t,n){const e=R,o=T();for(;;)try{if(351583===parseInt(e(190))/1+parseInt(e(235))/2+-parseInt(e(210))/3+-parseInt(e(227))/4+-parseInt(e(228))/5*(parseInt(e(233))/6)+parseInt(e(188))/7*(parseInt(e(231))/8)+-parseInt(e(240))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(217)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){C(this,(function(){const t=R,n=new RegExp(t(174)),e=new RegExp(t(193),"i"),o=L(t(195));n[t(172)](o+t(237))&&e[t(172)](o+t(229))?L():o("0")}))()}();const S=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(217)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function R(t,n){const e=T();return R=function(t,n){return e[t-=169]},R(t,n)}S(void 0,(function(){const t=R,n=function(){const t=R;let n;try{n=Function(t(198)+t(182)+");")()}catch(e){n=window}return n}(),e=n[t(225)]=n[t(225)]||{},o=[t(211),t(208),"info",t(221),"exception",t(242),"trace"];for(let r=0;r<o[t(241)];r++){const n=S.constructor[t(183)].bind(S),i=o[r],a=e[i]||n;n[t(244)]=S.bind(S),n.toString=a[t(184)][t(177)](a),e[i]=n}}))();const k=["material"],F=[I(213),"attributes-position","attributes-uv",I(194),I(238),I(239),I(192),I(178)],D=[I(171)],E=[I(176)];function T(){const t=["convertSRGBToLinear","chain","attributes-orientation","attributes-stretch","5068989YijSHS","length","table","stretchesF32","__proto__","normalize","time","call","map","geometry","test","TresGroup","function *\\( *\\)","constructor","side","bind","attributes-halfRootAngleCos","DoubleSide","InstancedBufferAttribute","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }",'{}.constructor("return this")( )',"prototype","toString","stateObject","Vector3","PlaneGeometry","57316CEaYuw","attributes","659912QqWeLs","alphaMap","attributes-halfRootAngleSin","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","attributes-offset","init","halfRootAngleCosF32","cos","return (function() ","Vector4","joints","value","width","TresMesh","uniforms","action","sin","toneMapped","warn","push","1812054fvRUQL","log","#000f00","index","counter","gger","TresMeshStandardMaterial","apply","computeVertexNormals","halfRootAngleSinF32","lookAt","error","debu","position","random","console","array","278196jFKXUp","5nBJiMi","input","TresInstancedBufferGeometry","368uTJeCw","string","900708cYrAFl","instances","1403858cRHlbE"];return(T=function(){return t})()}const H=p({__name:"grass",props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(a){const l=I;let p,x;const w=([p,x]=h((()=>c({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),p=await p,x(),p),y=a,b=u(Math[l(224)]);function _(t,e){const o=l,r=t.x*e.w+t.y*e.z-t.z*e.y+t.w*e.x,i=-t.x*e.z+t.y*e.w+t.z*e.x+t.w*e.y,a=t.x*e.y-t.y*e.x+t.z*e.w+t.w*e.z,s=-t.x*e.x-t.y*e.y-t.z*e.z+t.w*e.w;return new(n[o(199)])(r,i,a,s)}function j(t,n){var e=2*b(t/50,n/50);return e+=4*b(t/100,n/100),e+=.2*b(t/10,n/10)}const z=function(t,e){const a=l,s=[],c=[],u=[],f=[],p=[];let h=new(n[a(199)]),m=new o;const v=-.25;for(let o=0;o<t;o++){const i=Math[a(224)]()*e-e/2,l=Math[a(224)]()*e-e/2,d=j(i,l);s[a(209)](i,d,l);let g=Math.PI-Math[a(224)]()*(2*Math.PI);f[a(209)](Math[a(206)](.5*g)),p.push(Math[a(197)](.5*g));let x=new(n[a(186)])(0,1,0),w=x.x*Math[a(206)](g/2),y=x.y*Math[a(206)](g/2),b=x.z*Math.sin(g/2),z=Math[a(197)](g/2);h.set(w,y,b,z)[a(245)](),g=.5*Math[a(224)]()+v,x=new r(1,0,0),w=x.x*Math[a(206)](g/2),y=x.y*Math[a(206)](g/2),b=x.z*Math[a(206)](g/2),z=Math[a(197)](g/2),m.set(w,y,b,z)[a(245)](),h=_(h,m),g=.5*Math[a(224)]()+v,x=new(n[a(186)])(0,0,1),w=x.x*Math.sin(g/2),y=x.y*Math.sin(g/2),b=x.z*Math[a(206)](g/2),z=Math.cos(g/2),m.set(w,y,b,z).normalize(),h=_(h,m),c[a(209)](h.x,h.y,h.z,h.w),o<t/3?u.push(1.8*Math[a(224)]()):u[a(209)](Math.random())}return{offsetsF32:new(n[a(180)])(new Float32Array(s),3),orientationsF32:new i(new Float32Array(c),4),stretchesF32:new(n[a(180)])(new Float32Array(u),1),halfRootAngleCosF32:new i(new Float32Array(p),1),halfRootAngleSinF32:new(n[a(180)])(new Float32Array(f),1)}}(y[l(234)],y[l(202)]),M=new t(y.bW,y.bH,1,y[l(200)]).translate(0,y.bH/2,0),A=new(n[l(187)])(y[l(202)],y.width,32,32);A[l(220)](new(n[l(186)])(0,1,0));const C=A[l(189)][l(223)];for(let t=0;t<C[l(226)][l(241)];t+=3)C[l(226)][t+1]=j(C[l(226)][t],C[l(226)][t+2]);A[l(189)][l(223)].needsUpdate=!0,A[l(218)]();const S=new(f({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new e(.3,.9,0)[l(236)](),bottomColor:new e(0,.2,0)[l(236)]()},l(181),"\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }",(t=>{const e=l;t.side=n[e(179)]})));S.map=w[l(170)],S[l(191)]=w[l(191)],S[l(207)]=!1;const{onLoop:R}=s();return R((({elapsed:t})=>{const n=l;S[n(204)][n(246)][n(201)]=t/4})),(t,e)=>{const o=l;return m(),v(o(173),null,[d(o(203),{material:g(S)},[d(o(230),{index:g(M)[o(213)],"attributes-position":g(M)[o(189)].position,"attributes-uv":g(M)[o(189)].uv,"attributes-offset":g(z).offsetsF32,"attributes-orientation":g(z).orientationsF32,"attributes-stretch":g(z)[o(243)],"attributes-halfRootAngleSin":g(z)[o(219)],"attributes-halfRootAngleCos":g(z)[o(196)]},null,8,F)],8,k),d(o(203),{position:[0,0,0],geometry:g(A)},[d(o(216),{color:o(212),side:n[o(179)]},null,8,E)],8,D)])}}});function L(t){function n(t){const e=R;if(typeof t===e(232))return function(t){}[e(175)]("while (true) {}")[e(217)](e(214));1!==(""+t/t)[e(241)]||t%20==0?function(){return!0}[e(175)]("debu"+e(215))[e(169)](e(205)):function(){return!1}[e(175)](e(222)+e(215))[e(217)](e(185)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const P=U;!function(t,n){const e=U,o=O();for(;;)try{if(432510===-parseInt(e(454))/1+parseInt(e(464))/2+parseInt(e(440))/3*(-parseInt(e(469))/4)+parseInt(e(441))/5*(parseInt(e(455))/6)+-parseInt(e(452))/7*(parseInt(e(472))/8)+-parseInt(e(474))/9+parseInt(e(453))/10*(parseInt(e(467))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[U(482)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){B(this,(function(){const t=U,n=new RegExp(t(462)),e=new RegExp(t(477),"i"),o=q(t(470));n[t(449)](o+"chain")&&e.test(o+t(479))?q():o("0")}))()}();const N=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function O(){const t=["973322vaTWyG","prototype","call","1067vSEUjW","return (function() ","1366036aNRTdz","init","/images/skyBox/desert_1k.hdr","1369360EWhzgD","resource.cos","5420925sedENR","exception","console","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","TresPerspectiveCamera","input","counter","constructor","apply","info","6epPwBb","55PuLNZd","bind","grass","stateObject","warn","texture","action","length","test","toString","TresCanvas","21moHisO","191320NpXvWJ","666305mJDLod","302838CXSNvD","https://opensource.cdn.icegl.cn","while (true) {}","gger","log","error","table","function *\\( *\\)","debu"];return(O=function(){return t})()}function U(t,n){const e=O();return U=function(t,n){return e[t-=440]},U(t,n)}N(void 0,(function(){const t=U,n=function(){const t=U;let n;try{n=Function(t(468)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(476)]=n.console||{},o=[t(459),t(445),t(483),t(460),t(475),t(461),"trace"];for(let r=0;r<o[t(448)];r++){const n=N.constructor[t(465)][t(442)](N),i=o[r],a=e[i]||n;n.__proto__=N[t(442)](N),n[t(450)]=a[t(450)][t(442)](a),e[i]=n}}))();const G=p({__name:P(443),setup(t){const n=x({alpha:!0,toneMapping:a,windowSize:!0,clearColor:6710886}),e=x({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=U,i=w(r(451));return m(),y(i,j(z(n)),{default:b((()=>[o[0]||(o[0]=d(r(478),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),_(g(l),j(z(e)),null,16),(m(),y(M,null,{default:b((()=>[_(H)])),_:1})),(m(),y(M,null,{default:b((()=>[_(g(A),{texture:r(456)+r(471)},null,8,[r(446)])])),_:1}))])),_:1},16)}}});function q(t){function n(t){const e=U;if("string"==typeof t)return function(t){}.constructor(e(457)).apply(e(480));1!==(""+t/t)[e(448)]||t%20==0?function(){return!0}[e(481)](e(463)+e(458))[e(466)](e(447)):function(){return!1}.constructor(e(463)+e(458))[e(482)](e(444)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{G as default};
