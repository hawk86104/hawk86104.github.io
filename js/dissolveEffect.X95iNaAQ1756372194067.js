import{k as e,b as o,e as s,a as t}from"./@tresjs.Df2Jc2df1756372194067.js";import{_ as r}from"./component.vue_vue_type_script_setup_true_lang.CFC2eiMB1756372194067.js";import{_ as a}from"./vanilla.esm.5.5.0.b8Nged_k1756372194067.js";import"./@fesjs.BxIxMXgl1756372194067.js";import"./Resource.CtByW1MJ1756372194067.js";/* empty css                                                                             */import{l as i}from"./bubbleLoading.CXlOzAAA1756372194067.js";import"./three-mesh-ui.module.Dgb2GCtr1756372194067.js";/* empty css                                                              */import"./OimoPhysicsBuffer.DTTXKZYU1756372194067.js";import{_ as l}from"./reflectorDUDV.vue_vue_type_script_setup_true_lang.CFU1w0z71756372194067.js";import"./PackedMipMapGenerator.DAS1QEbV1756372194067.js";import{P as n}from"./tweakpane.C0HtAJSg1756372194067.js";import{_ as u}from"./lamboEffect.vue_vue_type_script_setup_true_lang.Brha0Z8n1756372194067.js";import{aa as d,a2 as p,G as m,o as c,u as f,d as g,r as v,b as h,h as _,j as x,f as j,I as y,e as C,a7 as b,a8 as M,a5 as P,m as S,F as T}from"./@vue.BzMISRrV1756372194067.js";import{C as w,aA as k,a3 as B}from"./three.QlBabAUP1756372194067.js";import"./postprocessing.eHqBklb71756372194067.js";import"./@vueuse.BIpwRBdi1756372194067.js";import"./three-stdlib.CWxBXjoj1756372194067.js";import"./object-hash._drSlZxG1756372194067.js";import"./@amap.CGUF9xH41756372194067.js";import"./jszip.CcduwmMh1756372194067.js";import"./vue-router.Dko1PBP91756372194067.js";import"./lodash-es.C7pWAXPe1756372194067.js";import"./pinia.CqPBZQk21756372194067.js";import"./@qlin.q6OWdsQV1756372194067.js";import"./@babel.BPq7uOAK1756372194067.js";import"./@floating-ui.BFjFSAYt1756372194067.js";import"./@juggle.CcBCnTIR1756372194067.js";import"./utils.B5jG6Hsc1756372194067.js";import"./oimophysics.BBtHVm4j1756372194067.js";import"./dither.glsl.tNAdkJUa1756372194067.js";import"./Reflector.Cru6rol41756372194067.js";import"./vite-plugin-qiankun.B06WoCqG1756372194067.js";const I=["object","rotation"],D={__name:"dissolveEffectModel",props:{edgeColor:{default:1118481},edgeWidth:{default:.03},dissolveSpeed:{default:.003},funRef:{appear:null,disappear:null}},async setup(t,{expose:r}){let a,i;const l=t,{scene:n,nodes:u,materials:g}=([a,i]=d((()=>e("https://opensource.cdn.icegl.cn/model/industry4/lambo.glb",{draco:!0,decoderPath:"./draco/"}))),a=await a,i(),a);Object.values(u).forEach((e=>{e.isMesh&&(e.name.startsWith("glass")&&e.geometry.computeVertexNormals(),"silver_001_BreakDiscs_0"===e.name&&(e.material=g.BreakDiscs.clone(),e.material.color=new w("#ddd")))})),u.glass_003.scale.setScalar(2.7),g.FrameBlack.color=new w("black"),g.FrameBlack.roughness=0,g.FrameBlack.metalness=.75,g.Chrome.color=new w("#333"),g.Chrome.metalness=1,g.Chrome.roughness=0,g.BreakDiscs.color=new w("#555"),g.BreakDiscs.metalness=.2,g.BreakDiscs.roughness=.2,g.TiresGum.color=new w("#181818"),g.TiresGum.metalness=0,g.TiresGum.roughness=.4,g.GreyElements.color=new w("#292929"),g.GreyElements.metalness=0,u.yellow_WhiteCar_0.material=new k({roughness:.3,metalness:.05,color:"#111",envMapIntensity:.75,clearcoatRoughness:0,clearcoat:1});const v=([a,i]=d((()=>o(["./plugins/digitalCity/image/smokeparticle.png","./plugins/industry4/image/dissolve.jpg"]))),a=await a,i(),a),h=[];let _=!1;const x={dissolveProgress:0,noiseTexture:v[0],edgeColorTexture:v[1]};let j=l.dissolveSpeed;const y=()=>{if(!_){_=!0,j=l.dissolveSpeed;for(const e of h)e.uniforms.dissolveSpeed={value:j},e.uniforms.dissolveProgress={value:0}}},C=()=>{if(!_){_=!0,j=-l.dissolveSpeed;for(const e of h)e.uniforms.dissolveSpeed={value:j},e.uniforms.dissolveProgress={value:1}}};l.funRef.appear=y,l.funRef.disappear=C,r({appear:y,disappear:C}),Object.values(u).forEach((e=>{if(e.isMesh){e.frustumCulled=!1;const o=e.material;o.transparent=!0,o.onBeforeCompile=e=>{h.push(e),e.uniforms.edgeColor={value:new w(l.edgeColor)},e.uniforms.edgeWidth={value:l.edgeWidth},e.uniforms.dissolveSpeed={value:l.dissolveSpeed},e.uniforms.dissolveProgress={value:x.dissolveProgress},e.uniforms.noiseTexture={value:x.noiseTexture},e.uniforms.edgeColorTexture={value:x.edgeColorTexture},e.vertexShader=e.vertexShader.replace("#include <common>",["varying vec2 xUv;","#include <common>"].join("\n")),e.vertexShader=e.vertexShader.replace("#include <uv_vertex>",["xUv = uv;","#include <uv_vertex>"].join("\n")),e.fragmentShader=e.fragmentShader.replace("#include <common>","#include <common>\n             uniform float dissolveProgress;\n             uniform float edgeWidth;\n             uniform vec3 edgeColor;\n             uniform sampler2D noiseTexture;\n             uniform sampler2D edgeColorTexture;\n             varying vec2 xUv;\n            "),e.fragmentShader=e.fragmentShader.replace("#include <dithering_fragment>","#include <dithering_fragment>\n                float noiseValue = texture2D(noiseTexture, xUv).r;\n              \tvec4 finalColor = texture2D(edgeColorTexture, xUv);\n\n\t\t\t\t\t\t\t\tvec3 mixedColor = mix(finalColor.rgb, edgeColor, 0.5);\n\t\t\t\t\t\t\t\tfinalColor.rgb = mixedColor;\n\n                // vec4 finalColor = linearToOutputTexel( vec4(edgeColor, gl_FragColor.a) );\n\t\t\t\t\t\t\t\tfloat alpha = step(noiseValue - edgeWidth, dissolveProgress);\n                gl_FragColor.a = alpha;\n\t\t\t\t\t\t\t\tfloat useOrigin = step(noiseValue, dissolveProgress);\n\t\t\t\t\t\t\t\tgl_FragColor.rgb = mix(finalColor.rgb, gl_FragColor.rgb, useOrigin);")}}}));const{onLoop:b}=s();return b((({dt:e})=>{if(_)for(const o of h){const{dissolveProgress:e,dissolveSpeed:s}=o.uniforms;e.value+=s.value,e.value<0&&(_=!1),e.value>1&&(_=!1)}})),p((()=>{if(l.dissolveSpeed)for(const e of h)e.uniforms.dissolveSpeed.value=l.dissolveSpeed;if(l.edgeColor)for(const e of h)e.uniforms.edgeColor.value=new w(l.edgeColor);if(l.edgeWidth)for(const e of h)e.uniforms.edgeWidth.value=l.edgeWidth})),(e,o)=>(c(),m("primitive",{object:f(n),scale:.015,rotation:[0,Math.PI/1.5,0]},null,8,I))}},R=["rotation"],W=["side"],G=["rotation"],E=["side"],F=g({__name:"dissolveEffect",setup(e){const o=v({clearColor:"#15151a",antialias:!1,logarithmicDepthBuffer:!0,renderMode:"manual"}),s=v({autoRotate:!0}),d=new n({title:"溶解参数",expanded:!0}),p=v({edgeColor:"#111111",edgeWidth:.03,dissolveSpeed:.003,funRef:{appear:null,disappear:null}});d.addBinding(p,"edgeColor",{label:"颜色"}),d.addBinding(p,"edgeWidth",{label:"宽度",min:0,max:.13,step:.01}),d.addBinding(p,"dissolveSpeed",{label:"速度",min:.001,max:.01,step:.001});const g=d.addButton({title:"显示",label:"模型"}),w=h(null);g.on("click",(()=>{w.value.appear?w.value.appear():w.value.funRef.appear()}));return d.addButton({title:"消失",label:"模型"}).on("click",(()=>{w.value.appear?w.value.disappear():w.value.funRef.disappear()})),(e,n)=>{const d=_("TresCanvas");return c(),m(T,null,[x(f(i)),x(d,S(o,{"window-size":""}),{default:j((()=>[n[2]||(n[2]=y("TresPerspectiveCamera",{position:[0,10,15],fov:25,near:.1,far:1e4},null,-1)),x(f(t),b(M(s)),null,16),n[3]||(n[3]=y("TresHemisphereLight",{intensity:.5},null,-1)),(c(),C(P,null,{default:j((()=>[x(D,S(p,{ref_key:"dissolveEffectModelRef",ref:w}),null,16)])),_:1})),(c(),C(P,null,{default:j((()=>[x(f(l),{position:[0,-1.562,0],reflectivity:2.6,showGridHelper:!1,scale:1.5})])),_:1})),y("TresMesh",{scale:4,position:[3,-1.161,-1.5],rotation:[-Math.PI/2,0,Math.PI/2.5]},[n[0]||(n[0]=y("TresRingGeometry",{args:[.9,1,4,1]},null,-1)),y("TresMeshStandardMaterial",{color:"white",roughness:.75,side:B},null,8,W)],8,R),y("TresMesh",{scale:4,position:[-3,-1.161,-1],rotation:[-Math.PI/2,0,Math.PI/2.5]},[n[1]||(n[1]=y("TresRingGeometry",{args:[.9,1,3,1]},null,-1)),y("TresMeshStandardMaterial",{color:"white",roughness:.75,side:B},null,8,E)],8,G),(c(),C(P,null,{default:j((()=>[x(f(r),{resolution:512},{default:j((()=>[x(f(a),{intensity:2,position:[0,1,3],scale:[10,1,1]}),x(f(a),{intensity:2,"rotation-x":Math.PI/2,position:[0,4,-6],scale:[10,1,1]},null,8,["rotation-x"]),x(f(a),{intensity:2,"rotation-x":Math.PI/2,position:[0,4,-3],scale:[10,1,1]},null,8,["rotation-x"]),x(f(a),{intensity:2,"rotation-x":Math.PI/2,position:[0,4,0],scale:[10,1,1]},null,8,["rotation-x"]),x(f(a),{intensity:2,"rotation-x":Math.PI/2,position:[0,4,3],scale:[10,1,1]},null,8,["rotation-x"]),x(f(a),{intensity:2,"rotation-x":Math.PI/2,position:[0,4,6],scale:[10,1,1]},null,8,["rotation-x"]),x(f(a),{intensity:2,"rotation-x":Math.PI/2,position:[0,4,9],scale:[10,1,1]},null,8,["rotation-x"]),x(f(a),{intensity:2,"rotation-y":Math.PI/2,position:[-50,2,0],scale:[100,2,1]},null,8,["rotation-y"]),x(f(a),{intensity:2,"rotation-y":-Math.PI/2,position:[50,2,0],scale:[100,2,1]},null,8,["rotation-y"]),x(f(a),{form:"ring",color:"red",intensity:10,scale:2,position:[10,5,10]})])),_:1})])),_:1})),x(u)])),_:1},16)],64)}}});export{F as default};
