import"./@fesjs.DbrjsIBT1761100244891.js";import{F as e,N as a,y as t,K as r}from"./@tresjs.DqJWjmrH1761100244891.js";import"./Resource.mX5inOAT1761100244891.js";/* empty css                                                                             */import{_ as o}from"./randomLoading.vue_vue_type_script_setup_true_lang.DVHfE-Hw1761100244891.js";import"./three-mesh-ui.module.B6HSvFaK1761100244891.js";import"./global.CFybmx-G1761100244891.js";/* empty css                                                              */import{d as s,w as n,G as l,H as i,u as m,o as c,I as p,ad as d,b as u,e as g,a as h,r as f,g as v,h as _,ap as S,a9 as y,aa as w,F as j}from"./@vue.CKlgtJke1761100244891.js";import"./vanilla.esm.5.5.0.CsbunUBT1761100244891.js";import{af as b,o as M,O,d as T,a0 as R}from"./three.DvmzhRS91761100244891.js";import{P as z}from"./tweakpane.CqZAnw7f1761100244891.js";import"./vue-router.AUgVvTqV1761100244891.js";import"./lodash-es.DWe8oqPO1761100244891.js";import"./pinia.-nSLzXOT1761100244891.js";import"./@qlin.y-0Z8WnK1761100244891.js";import"./@babel.BPq7uOAK1761100244891.js";import"./@floating-ui.Bhq4ibgf1761100244891.js";import"./@juggle.Vc7cP4_P1761100244891.js";import"./postprocessing.CYU4Fj-U1761100244891.js";import"./@vueuse.mZcBai3M1761100244891.js";import"./starLoading.BZXulw6M1761100244891.js";import"./utils.g-0SwCPh1761100244891.js";import"./cssLoaders.BrTFRgeJ1761100244891.js";import"./bubbleLoading.CpUQAUq31761100244891.js";import"./yangyangLoading.BaxHfpnX1761100244891.js";import"./color.DSPNiGxi1761100244891.js";import"./color-string.Bn2Vqey71761100244891.js";import"./color-name.gyPnsvCn1761100244891.js";import"./lodash.DPxB_j171761100244891.js";import"./@amap.fjyZdsU91761100244891.js";import"./object-hash.zo7S6bgL1761100244891.js";import"./jszip.DTlig5CR1761100244891.js";const N=({focus:e=0,size:a=25,samples:t=10}={})=>{const r=b.shadowmap_pars_fragment;return b.shadowmap_pars_fragment=b.shadowmap_pars_fragment.replace("#ifdef USE_SHADOWMAP",`#ifdef USE_SHADOWMAP\n\n    #define PENUMBRA_FILTER_SIZE float(${a})\n    #define RGB_NOISE_FUNCTION(uv) (randRGB(uv))\n    vec3 randRGB(vec2 uv) {\n      return vec3(\n        fract(sin(dot(uv, vec2(12.75613, 38.12123))) * 13234.76575),\n        fract(sin(dot(uv, vec2(19.45531, 58.46547))) * 43678.23431),\n        fract(sin(dot(uv, vec2(23.67817, 78.23121))) * 93567.23423)\n      );\n    }\n    \n    vec3 lowPassRandRGB(vec2 uv) {\n      // 3x3 convolution (average)\n      // can be implemented as separable with an extra buffer for a total of 6 samples instead of 9\n      vec3 result = vec3(0);\n      result += RGB_NOISE_FUNCTION(uv + vec2(-1.0, -1.0));\n      result += RGB_NOISE_FUNCTION(uv + vec2(-1.0,  0.0));\n      result += RGB_NOISE_FUNCTION(uv + vec2(-1.0, +1.0));\n      result += RGB_NOISE_FUNCTION(uv + vec2( 0.0, -1.0));\n      result += RGB_NOISE_FUNCTION(uv + vec2( 0.0,  0.0));\n      result += RGB_NOISE_FUNCTION(uv + vec2( 0.0, +1.0));\n      result += RGB_NOISE_FUNCTION(uv + vec2(+1.0, -1.0));\n      result += RGB_NOISE_FUNCTION(uv + vec2(+1.0,  0.0));\n      result += RGB_NOISE_FUNCTION(uv + vec2(+1.0, +1.0));\n      result *= 0.111111111; // 1.0 / 9.0\n      return result;\n    }\n    vec3 highPassRandRGB(vec2 uv) {\n      // by subtracting the low-pass signal from the original signal, we're being left with the high-pass signal\n      // hp(x) = x - lp(x)\n      return RGB_NOISE_FUNCTION(uv) - lowPassRandRGB(uv) + 0.5;\n    }\n    \n    \n    vec2 vogelDiskSample(int sampleIndex, int sampleCount, float angle) {\n      const float goldenAngle = 2.399963f; // radians\n      float r = sqrt(float(sampleIndex) + 0.5f) / sqrt(float(sampleCount));\n      float theta = float(sampleIndex) * goldenAngle + angle;\n      float sine = sin(theta);\n      float cosine = cos(theta);\n      return vec2(cosine, sine) * r;\n    }\n    float penumbraSize( const in float zReceiver, const in float zBlocker ) { // Parallel plane estimation\n      return (zReceiver - zBlocker) / zBlocker;\n    }\n    float findBlocker(sampler2D shadowMap, vec2 uv, float compare, float angle) {\n      float texelSize = 1.0 / float(textureSize(shadowMap, 0).x);\n      float blockerDepthSum = float(${e});\n      float blockers = 0.0;\n    \n      int j = 0;\n      vec2 offset = vec2(0.);\n      float depth = 0.;\n    \n      #pragma unroll_loop_start\n      for(int i = 0; i < ${t}; i ++) {\n        offset = (vogelDiskSample(j, ${t}, angle) * texelSize) * 2.0 * PENUMBRA_FILTER_SIZE;\n        depth = unpackRGBAToDepth( texture2D( shadowMap, uv + offset));\n        if (depth < compare) {\n          blockerDepthSum += depth;\n          blockers++;\n        }\n        j++;\n      }\n      #pragma unroll_loop_end\n    \n      if (blockers > 0.0) {\n        return blockerDepthSum / blockers;\n      }\n      return -1.0;\n    }\n            \n    float vogelFilter(sampler2D shadowMap, vec2 uv, float zReceiver, float filterRadius, float angle) {\n      float texelSize = 1.0 / float(textureSize(shadowMap, 0).x);\n      float shadow = 0.0f;\n      int j = 0;\n      vec2 vogelSample = vec2(0.0);\n      vec2 offset = vec2(0.0);\n      #pragma unroll_loop_start\n      for (int i = 0; i < ${t}; i++) {\n        vogelSample = vogelDiskSample(j, ${t}, angle) * texelSize;\n        offset = vogelSample * (1.0 + filterRadius * float(${a}));\n        shadow += step( zReceiver, unpackRGBAToDepth( texture2D( shadowMap, uv + offset ) ) );\n        j++;\n      }\n      #pragma unroll_loop_end\n      return shadow * 1.0 / ${t}.0;\n    }\n    \n    float PCSS (sampler2D shadowMap, vec4 coords) {\n      vec2 uv = coords.xy;\n      float zReceiver = coords.z; // Assumed to be eye-space z in this code\n      float angle = highPassRandRGB(gl_FragCoord.xy).r * PI2;\n      float avgBlockerDepth = findBlocker(shadowMap, uv, zReceiver, angle);\n      if (avgBlockerDepth == -1.0) {\n        return 1.0;\n      }\n      float penumbraRatio = penumbraSize(zReceiver, avgBlockerDepth);\n      return vogelFilter(shadowMap, uv, zReceiver, 1.25 * penumbraRatio, angle);\n    }`).replace("#if defined( SHADOWMAP_TYPE_PCF )","\nreturn PCSS(shadowMap, shadowCoord);\n#if defined( SHADOWMAP_TYPE_PCF )"),(e,a,t)=>{b.shadowmap_pars_fragment=r,function(e,a,t){a.traverse(a=>{a.material&&(Array.isArray(a.material)?a.material.forEach(a=>{e.properties.remove(a),a.dispose()}):(e.properties.remove(a.material),a.material.dispose()))}),e.info.programs.length=0,e.compile(a,t)}(e,a,t)}},B=s({__name:"index",props:{enabled:{type:Boolean,default:!0},size:{default:25},focus:{default:0},samples:{default:10}},setup(a){const t=a,{camera:r,renderer:o,scene:s}=e();let l=null;const i=e=>{const{enabled:a,size:t,focus:n,samples:i}=e;l&&(l(o,s.value,r.value),l=null),a&&(l=N({focus:n,size:t,samples:i}),s.value.traverse(e=>{e instanceof M&&e.material.dispose()}))};return i(t),n(t,()=>{i(t)}),(e,a)=>null}}),k=["rotation"],I=["geometry","material"],x=["geometry","material"],P=["geometry","material"],C=["geometry","material"],E=["geometry","material"],G=["geometry","material"],D=["geometry","material"],F=["geometry","material"],A=["geometry","material"],U=["geometry","material"],L=["geometry","material"],$=["geometry","material"],H=["geometry"],W=["geometry","material"],q=["geometry","material"],Y=["geometry","material"],Z=["geometry","material"],K=s({__name:"roomMesh",setup(e){const{state:t,nodes:r,materials:o}=a("./plugins/visualArts/model/room-transformed.glb",{draco:!0,decoderPath:"./draco/"});return(e,a)=>m(t)?(c(),l("TresGroup",{key:0,rotation:[-Math.PI/2,0,0]},[p("TresMesh",{castShadow:"",receiveShadow:"",geometry:d(m(r).Object_2.geometry),material:d(m(o)).Material},null,8,I),p("TresMesh",{castShadow:"",receiveShadow:"",geometry:m(r).Object_3.geometry,material:m(o)["Material.002"]},null,8,x),p("TresMesh",{castShadow:"",receiveShadow:"",geometry:m(r).Object_4.geometry,material:m(o)["Material.003"]},null,8,P),p("TresMesh",{castShadow:"",receiveShadow:"",geometry:m(r).Object_6.geometry,material:m(o).krzeslo_1},null,8,C),p("TresMesh",{castShadow:"",receiveShadow:"",geometry:m(r).Object_7.geometry,material:m(o).krzeslo_okno},null,8,E),p("TresMesh",{castShadow:"",receiveShadow:"",geometry:m(r).Object_8.geometry,material:m(o).krzeslo_prawe},null,8,G),p("TresMesh",{castShadow:"",receiveShadow:"",geometry:m(r).Object_9.geometry,material:m(o).krzeslo_srodek},null,8,D),p("TresMesh",{castShadow:"",receiveShadow:"",geometry:m(r).Object_10.geometry,material:m(o).podloga},null,8,F),p("TresMesh",{castShadow:"",receiveShadow:"",geometry:m(r).Object_11.geometry,material:m(o).sciana_okno},null,8,A),p("TresMesh",{castShadow:"",receiveShadow:"",geometry:m(r).Object_12.geometry,material:m(o)["stolik.001"]},null,8,U),p("TresMesh",{castShadow:"",receiveShadow:"",geometry:m(r).Object_16.geometry,material:m(o)["Material.006"]},null,8,L),p("TresMesh",{castShadow:"",receiveShadow:"",geometry:m(r).Object_5.geometry,material:m(o)["Material.004"]},null,8,$),p("TresMesh",{geometry:m(r).Object_13.geometry},[...a[0]||(a[0]=[p("TresMeshStandardMaterial",{transparent:"",opacity:.5},null,-1)])],8,H),p("TresMesh",{castShadow:"",receiveShadow:"",geometry:m(r).Object_14.geometry,material:m(o)["Material.002"]},null,8,W),p("TresMesh",{castShadow:"",receiveShadow:"",geometry:m(r).Object_15.geometry,material:m(o)["Material.005"]},null,8,q),p("TresMesh",{castShadow:"",receiveShadow:"",geometry:m(r).Object_17.geometry,material:m(o).mata},null,8,Y),p("TresMesh",{castShadow:"",receiveShadow:"",geometry:m(r).Object_18.geometry,material:m(o).stolik},null,8,Z)],8,k)):i("",!0)}}),X=s({__name:"sphere",setup:e=>(e,a)=>(c(),u(m(t),{floatFactor:15,speed:2},{default:g(()=>[...a[0]||(a[0]=[p("TresMesh",{castShadow:"",position:[0,5,0]},[p("TresSphereGeometry"),p("TresMeshBasicMaterial",{color:"hotpink",roughness:1})],-1)])]),_:1}))}),J=["shadow-mapSize"],Q=s({__name:"roomup",setup(e){const a=h(null);n(a,e=>{e&&(e.shadow.camera=new O(-8.5,8.5,8.5,-8.5,.1,20))});const s={clearColor:"#d0d0d0",windowSize:!0,toneMapping:R,toneMappingExposure:.8,shadows:!0},i=f({enabled:!0,size:25,focus:0,samples:10}),d=new z({title:"参数"});return d.addBinding(i,"enabled",{label:"开启PCSS"}),d.addBinding(i,"size",{label:"size",min:1,max:100,step:1}),d.addBinding(i,"focus",{label:"focus",min:0,max:2,step:.1}),d.addBinding(i,"samples",{label:"samples",min:1,max:20,step:1}),(e,n)=>{const d=v("TresCanvas");return c(),l(j,null,[_(m(o)),_(d,y(w(s)),{default:g(()=>[n[0]||(n[0]=p("TresPerspectiveCamera",{position:[5,2,10],fov:45,near:.1,far:1e3},null,-1)),_(m(r),{enableDamping:""}),n[1]||(n[1]=p("TresAmbientLight",{intensity:2},null,-1)),_(m(t),null,{default:g(()=>[p("TresDirectionalLight",{ref_key:"dLight",ref:a,position:[5,5,-8],castShadow:"",intensity:5,"shadow-mapSize":new T(2048,2048),"shadow-bias":-.001},null,8,J)]),_:1}),(c(),u(S,null,{default:g(()=>[_(K,{scale:.5,position:[0,-1,0]})]),_:1})),_(X,{position:[0,5,-8]}),_(X,{position:[2,4,-8],scale:.9}),_(X,{position:[-2,2,-8],scale:.8}),_(m(B),y(w(i)),null,16)]),_:1},16)],64)}}});export{Q as default};
