import"./index.T-vY6kZg1743660816268.js";import{a as t,m as e,D as n,e as r,o}from"./@tresjs.zc7faK4J1743660816268.js";import{_ as i}from"./whiteFloorMesh.vue_vue_type_script_setup_true_lang.nlWo1JuN1743660816268.js";import{_ as a}from"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.qw21cr551743660816268.js";import{P as c}from"./tweakpane.ivGeiIdz1743660816268.js";import{T as l,a2 as s,n as u,aZ as f,a4 as p,V as v,b as d,C as m,t as h,l as x,ai as g}from"./three.2wx8FU0g1743660816268.js";import{d as w,a4 as y,a2 as C,w as b,o as S,H as P,u as _,r as F,e as j,j as D,g as z,aj as k,ak as I,F as B,N,f as T,al as M,m as R}from"./@vue.B5PFBfKs1743660816268.js";import{_ as E}from"./randomLoading.vue_vue_type_script_setup_true_lang.HuXlgv2z1743660816268.js";import"./utils.J8F9Jo-01743660816268.js";import"./@fesjs.9AUNBPBQ1743660816268.js";import"./vue-router.K4ys0Z-O1743660816268.js";import"./lodash-es.IJc9G_SW1743660816268.js";import"./@qlin.o0hjOMCg1743660816268.js";import"./pinia.0dYyFDku1743660816268.js";import"./@floating-ui.HzHndBae1743660816268.js";import"./@juggle.4EyLec-41743660816268.js";import"./three-mesh-ui.module._G62nyeC1743660816268.js";import"./postprocessing.ApTwx-211743660816268.js";import"./@vueuse.jtbb8I7w1743660816268.js";import"./whiteFloor.45lmiqp31743660816268.js";import"./starLoading.cJyZWFHa1743660816268.js";import"./cssLoaders.bhHKUWvv1743660816268.js";import"./bubbleLoading.rC3bW8Z-1743660816268.js";import"./yangyangLoading.yRjR1R_U1743660816268.js";var W=X;!function(t,e){for(var n=X,r=L();;)try{if(882130===parseInt(n(356))/1+-parseInt(n(402))/2*(parseInt(n(399))/3)+-parseInt(n(372))/4+-parseInt(n(409))/5*(parseInt(n(403))/6)+parseInt(n(391))/7+-parseInt(n(375))/8+-parseInt(n(389))/9*(-parseInt(n(383))/10))break;r.push(r.shift())}catch(o){r.push(r.shift())}}();var V,H=(V=!0,function(t,e){var n=V?function(){if(e){var n=e.apply(t,arguments);return e=null,n}}:function(){};return V=!1,n});function L(){var t=["\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","\n                uniform sampler2D uTexture;\n\n                varying vec2 vUv;\n\n                void main() {\n                    ","PerspectiveCamera","call","226405GvLLkf","add","328704lFJMBe","gl_FragColor = texture2D(uTexture, vUv);","blit","Mesh",'{}.constructor("return this")( )',"info","constructor","camera","apply","function *\\( *\\)","ShaderMaterial","while (true) {}","value","mesh","uTexture","test","745828UMvUUw","toString","return (function() ","4539680xPnNdC","scene","material","log","string","prototype","  \n                }","exception","739150jGUuOo","length","setRenderTarget","stateObject","chain","bind","261KpunYY","uniforms","8225791oAoigl","PlaneGeometry","error","gger","console","innerHeight","\n                varying vec2 vUv;\n\n                void main() {\n                    vUv = uv;\n                    gl_Position = vec4(position.xy, 0.0, 1.0);    \n                }","input","1726449yWiFwT","warn","renderer","4rWKDjT","114gpWcaS","Scene"];return(L=function(){return t})()}!function(){H(this,(function(){var t=X,e=new RegExp(t(365)),n=new RegExp(t(405),"i"),r=G("init");e.test(r+t(387))&&n[t(371)](r+t(398))?G():r("0")}))()}();var U,A=(U=!0,function(t,e){var n=U?function(){if(e){var n=e[X(364)](t,arguments);return e=null,n}}:function(){};return U=!1,n});A(void 0,(function(){for(var t=X,e=function(){var t,e=X;try{t=Function(e(374)+e(360)+");")()}catch(n){t=window}return t}(),n=e.console=e[t(395)]||{},r=[t(378),t(400),t(361),t(393),t(382),"table","trace"],o=0;o<r.length;o++){var i=A[t(362)][t(380)].bind(A),a=r[o],c=n[a]||i;i.__proto__=A[t(388)](A),i[t(373)]=c[t(373)][t(388)](c),n[a]=i}}))();class O{constructor(t,e){var n=X;this[n(377)]=new(l[n(366)])({uniforms:{uTexture:{type:"t",value:null}},vertexShader:n(397),fragmentShader:n(406)+(e||n(357))+n(381),depthTest:!1,depthWrite:!1}),this[n(369)]=new(l[n(359)])(new(l[n(392)])(2,2),this[n(377)]),this[n(363)]=new(l[n(407)])(45,window.innerWidth/window[n(396)],1,1e3),this.renderer=t,this[n(376)]=new(l[n(404)]),this[n(376)][n(410)](this[n(369)])}[W(358)](t,e){var n=W;this.renderer[n(385)](e),this[n(377)][n(390)][n(370)][n(368)]=t,this[n(401)].render(this.scene,this[n(363)]),this.renderer[n(385)](null)}}function X(t,e){var n=L();return X=function(t,e){return n[t-=356]},X(t,e)}function G(t){function e(t){var n=X;if(typeof t===n(379))return function(t){}[n(362)](n(367)).apply("counter");1!==(""+t/t)[n(384)]||t%20==0?function(){return!0}.constructor("debu"+n(394))[n(408)]("action"):function(){return!1}[n(362)]("debu"+n(394))[n(364)](n(386)),e(++t)}try{if(t)return e;e(0)}catch(n){}}const Z=$;!function(t,e){const n=$,r=K();for(;;)try{if(362140===-parseInt(n(484))/1*(parseInt(n(498))/2)+parseInt(n(553))/3+-parseInt(n(507))/4*(parseInt(n(495))/5)+parseInt(n(528))/6+parseInt(n(539))/7+-parseInt(n(550))/8+parseInt(n(536))/9)break;r.push(r.shift())}catch(o){r.push(r.shift())}}();const Y=function(){let t=!0;return function(e,n){const r=t?function(){if(n){const t=n[$(516)](e,arguments);return n=null,t}}:function(){};return t=!1,r}}();!function(){Y(this,(function(){const t=$,e=new RegExp(t(508)),n=new RegExp(t(538),"i"),r=Q(t(503));e.test(r+t(515))&&n[t(491)](r+"input")?Q():r("0")}))()}();const q=function(){let t=!0;return function(e,n){const r=t?function(){if(n){const t=n[$(516)](e,arguments);return n=null,t}}:function(){};return t=!1,r}}();function $(t,e){const n=K();return $=function(t,e){return n[t-=484]},$(t,e)}function K(){const t=["compute","material","value","stateObject","blitProgram","call","2917384jdybte","frontFaceRT","while (true) {}","1948020PNCCZt","\n                uniform sampler2D uPrevDepth;\n                uniform float uCameraFarInverse;\n                uniform float uSample;\n                uniform vec2  uScreenSize;\n\n                varying vec3 vWorldSpaceNormal;\n                varying vec3 vCameraSpacePos;\n\n                void main() {\n\n                    vec2 uv = gl_FragCoord.xy / uScreenSize;\n                    float prevRegisteredDepth = texture2D(uPrevDepth, uv).w;\n                    float currentDepth        = abs(vCameraSpacePos.z) * uCameraFarInverse;\n\n                    if(currentDepth <= prevRegisteredDepth) {\n                        discard;\n                    }\n\n                    gl_FragColor = vec4(vWorldSpaceNormal, currentDepth);    \n                }","Mesh","5jBrqiE","string","constructor","bind","texture","ShaderMaterial","WebGLRenderTarget","test","mesh","\n                varying vec3 vCameraSpacePos;\n                varying vec3 vWorldSpaceNormal;\n\n                void main() {\n                    vCameraSpacePos = (modelViewMatrix * vec4(position, 1.0)).xyz;\n                    vWorldSpaceNormal = normal;\n\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);    \n                }","pong","10cLOlss","frontFaceMaterial","action","215066cjSRkM","blit","autoClear","toString","Scene","init","traverse","console","counter","1370392PZOzei","function *\\( *\\)","DoubleSide","length","clone","Vector2","table","warn","chain","apply","getBackFaceTexture","setRenderTarget","error","FloatType","trace","resultBuffer","uniforms","far","renderer","exception","gger","907248PPHlmB","ping","add","return (function() ","debu","uPrevDepth","\n                uniform float uCameraFarInverse;\n\n                varying vec3 vWorldSpaceNormal;\n                varying vec3 vCameraSpacePos;\n\n                void main() {\n                    float currentDepth = abs(vCameraSpacePos.z) * uCameraFarInverse;\n                    gl_FragColor = vec4(vWorldSpaceNormal, currentDepth);    \n                }","log","8766531oLLaGf","getFrontFaceTexture","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","1225469wmKkPN","scene","prototype","__proto__","camera"];return(K=function(){return t})()}q(void 0,(function(){const t=$,e=function(){const t=$;let e;try{e=Function(t(531)+'{}.constructor("return this")( ));')()}catch(n){e=window}return e}(),n=e[t(505)]=e[t(505)]||{},r=[t(535),t(514),"info",t(519),t(526),t(513),t(521)];for(let o=0;o<r[t(510)];o++){const e=q[t(486)][t(541)].bind(q),i=r[o],a=n[i]||e;e[t(542)]=q[t(487)](q),e[t(501)]=a[t(501)].bind(a),n[i]=e}}))();class J{constructor(t,e,n){const r=$;this.mesh=t[r(511)](),this[r(543)]=e,this[r(525)]=n,this[r(540)]=new(l[r(502)]),this[r(540)][r(530)](this[r(492)]),this[r(548)]=new O(this[r(525)]),this[r(529)]=new(l[r(490)])(innerWidth,innerHeight,{type:l[r(520)],depthBuffer:!1,stencilBuffer:!1}),this[r(494)]=new(l[r(490)])(innerWidth,innerHeight,{type:l[r(520)],depthBuffer:!1,stencilBuffer:!1}),this[r(551)]=new(l[r(490)])(innerWidth,innerHeight,{type:l[r(520)]}),this.frontFaceMaterial=new(l[r(489)])({uniforms:{uCameraFarInverse:{value:1/this.camera.far}},vertexShader:r(493),fragmentShader:r(534),depthTest:!0,depthWrite:!0,side:s}),this[r(545)]=new u({uniforms:{uScreenSize:{value:new(l[r(512)])(innerWidth,innerHeight)},uPrevDepth:{type:"t",value:this.ping[r(488)]},uCameraFarInverse:{value:1/this.camera[r(524)]},uSample:{value:0}},vertexShader:"\n                varying vec3 vCameraSpacePos;\n                varying vec3 vWorldSpaceNormal;\n\n                void main() {\n                    vCameraSpacePos = (modelViewMatrix * vec4(position, 1.0)).xyz;\n                    vWorldSpaceNormal = normalize((modelMatrix * vec4(normal, 0.0)).xyz);\n\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);    \n                }",fragmentShader:r(554),depthTest:!1,depthWrite:!1,side:l[r(509)]}),this[r(492)][r(504)]((t=>{const e=r;t instanceof l[e(555)]&&(t[e(545)]=this[e(545)])}))}[Z(544)](t){const e=Z;this[e(525)][e(518)](this[e(529)]),this[e(525)].clear(),this.renderer[e(518)](this[e(494)]),this.renderer.clear(),this[e(492)].traverse((t=>{const n=e;t instanceof l[n(555)]&&(t[n(545)]=this[n(545)])})),this[e(545)].uniforms.uCameraFarInverse[e(546)]=1/this.camera[e(524)];for(let n=0;n<t;n++){let t=n%2==0?this.ping:this[e(494)],r=n%2==0?this[e(494)]:this[e(529)];this[e(545)][e(523)][e(533)].value=t[e(488)],this[e(545)][e(523)].uSample[e(546)]=n,this[e(525)][e(500)]=!1,this[e(525)][e(518)](r),this[e(525)].render(this[e(540)],this[e(543)]),this[e(525)][e(500)]=!0,this[e(548)][e(499)](r[e(488)],t)}this[e(522)]=t%2==0?this[e(529)]:this.pong,this[e(492)].traverse((t=>{const n=e;t instanceof l[n(555)]&&(t[n(545)]=this[n(496)])})),this[e(525)].setRenderTarget(this[e(551)]),this.renderer.render(this[e(540)],this[e(543)])}[Z(517)](){const t=Z;return this[t(522)][t(488)]}[Z(537)](){const t=Z;return this[t(551)][t(488)]}}function Q(t){function e(t){const n=$;if(typeof t===n(485))return function(t){}[n(486)](n(552))[n(516)](n(506));1!==(""+t/t)[n(510)]||t%20==0?function(){return!0}[n(486)](n(532)+n(527))[n(549)](n(497)):function(){return!1}[n(486)](n(532)+"gger")[n(516)](n(547)),e(++t)}try{if(t)return e;e(0)}catch(n){}}const tt=["object"],et=w({__name:"ssrtGlassMesh",props:{skyBoxTexture:{},modelPath:{},modelName:{},extintionFactor:{default:5},reflectionFactor:{default:1},exposure:{default:0},extintionColor1:{default:"rgb(192,123,25)"},extintionColor2:{default:"rgb(26, 166, 192)"},extintionCol1Random:{type:Boolean,default:!1},extintionCol2Random:{type:Boolean,default:!1}},async setup(o){let i,a;const c=o,{map:l}=([i,a]=y((()=>t({map:c.skyBoxTexture}))),i=await i,a(),i);l.wrapS=f,l.wrapT=f,l.magFilter=p,l.minFilter=p;const{camera:g,renderer:w,scene:F}=e(),j=new u({uniforms:{uSkybox:{type:"t",value:l},uBackFaceBuffer:{type:"t",value:null},uFrontFaceBuffer:{type:"t",value:null},uCameraFarInverse:{value:1/g.value.far},uScreenSizeInv:{value:new v(1/window.innerWidth,1/window.innerHeight)},uCameraPos:{value:new d(0,0,0)},uTime:{value:0},uExtintionColor1:{value:new m("#fff").sub(new m(c.extintionColor1).convertLinearToSRGB())},uExtintionColor2:{value:new m("#fff").sub(new m(c.extintionColor2).convertLinearToSRGB())},uExtintionFactor:{value:c.extintionFactor},uExposure:{value:c.exposure},uReflectionFactor:{value:c.reflectionFactor},uExtinctionFX1:{value:new h(c.extintionCol1Random?1:0,c.extintionCol2Random?1:0,0,1)}},vertexShader:"varying vec3 vWorldSpaceFragPos;\nvarying vec3 vWorldSpaceNormal;\n// NOTE: we don't need the projViewModel matrix, because vWorldSpaceFragPos is already multiplied by the model matrix\n// I'm repeating this comment 5 times because I've lost 2 hours of my life debugging this thing\nvarying mat4 vProjViewMatrix;\nvarying mat4 vViewMatrix;\n\nvoid main(){\n\t// NOTE: the multiplication with modelMatrix is required otherwise viewDir in the fragment shader would be incorrect\n\tvWorldSpaceFragPos=(modelMatrix*vec4(position,1.)).xyz;\n\tvWorldSpaceNormal=normalize((modelMatrix*vec4(normal,0.)).xyz);\n\t\n\tgl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.);\n\tvProjViewMatrix=projectionMatrix*viewMatrix;\n\tvViewMatrix=viewMatrix;\n}",fragmentShader:"uniform sampler2D uSkybox;\nuniform sampler2D uBackFaceBuffer;\nuniform sampler2D uFrontFaceBuffer;\n\nuniform vec3 uExtintionColor1;\nuniform vec3 uExtintionColor2;\nuniform float uExtintionFactor;\nuniform float uExposure;\nuniform float uReflectionFactor;\nuniform vec4 uExtinctionFX1;\n\nuniform float uTime;\n\nuniform vec3 uCameraPos;\nuniform vec2 uScreenSizeInv;\nuniform float uCameraFarInverse;\n\nvarying vec3 vWorldSpaceFragPos;\nvarying vec3 vWorldSpaceNormal;\nvarying mat4 vProjViewMatrix;\nvarying mat4 vViewMatrix;\n\nconst float PI=3.14159265359;\nconst float e=2.7182818284590;\n\nconst float planeSize=3.;\nconst vec3 planeColor=pow(vec3(202./255.,205./255.,185./255.),vec3(3.));\n\nfloat mod289(float x){return x-floor(x*(1./289.))*289.;}\nvec4 mod289(vec4 x){return x-floor(x*(1./289.))*289.;}\nvec4 perm(vec4 x){return mod289(((x*34.)+1.)*x);}\n\nfloat noise(vec3 p){\n\tvec3 a=floor(p);\n\tvec3 d=p-a;\n\td=d*d*(3.-2.*d);\n\t\n\tvec4 b=a.xxyy+vec4(0.,1.,0.,1.);\n\tvec4 k1=perm(b.xyxy);\n\tvec4 k2=perm(k1.xyxy+b.zzww);\n\t\n\tvec4 c=k2+a.zzzz;\n\tvec4 k3=perm(c);\n\tvec4 k4=perm(c+1.);\n\t\n\tvec4 o1=fract(k3*(1./41.));\n\tvec4 o2=fract(k4*(1./41.));\n\t\n\tvec4 o3=o2*d.z+o1*(1.-d.z);\n\tvec2 o4=o3.yw*d.x+o3.xz*(1.-d.x);\n\t\n\treturn o4.y*d.y+o4.x*(1.-d.y);\n}\n\nvec3 acesFilm(const vec3 x){\n\tconst float a=2.51;\n\tconst float b=.03;\n\tconst float c=2.43;\n\tconst float d=.59;\n\tconst float e=.14;\n\treturn clamp((x*(a*x+b))/(x*(c*x+d)+e),0.,1.);\n}\n\n// gets the skybox color from a given view direction\nvec3 getSkyboxColor(vec3 viewDir){\n\t// skybox coordinates\n\tvec2 skyboxUV=vec2(\n\t\t(atan(viewDir.x,viewDir.z)+PI)/(PI*2.),\n\t\t(asin(viewDir.y)+PI*.5)/(PI)\n\t);\n\t\n\tvec3 col=texture2D(uSkybox,skyboxUV).xyz;\n\tcol=pow(col,vec3(2.2));\n\treturn col;\n}\n\nbool refract2(vec3 v,vec3 n,float ni_over_nt,inout vec3 refracted){\n\tvec3 uv=normalize(v);\n\tfloat dt=dot(uv,n);\n\tfloat discriminant=1.-ni_over_nt*ni_over_nt*(1.-dt*dt);\n\tif(discriminant>0.){\n\t\trefracted=ni_over_nt*(v-n*dt)-n*sqrt(discriminant);\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}\n\nvec3 binarySearchHitPoint(vec3 lastP,vec3 hitP,vec3 rayDir){\n\t\n\tfor(int i=0;i<10;i++){\n\t\tvec3 midP=(lastP+hitP)*.5;\n\t\t\n\t\t// project midP in uv space\n\t\tvec4 projCoord=vProjViewMatrix*vec4(midP,1.);\n\t\tprojCoord.xyz/=projCoord.w;\n\t\t\n\t\tvec2 midpNDC=projCoord.xy;\n\t\tvec2 midpUV=midpNDC*.5+.5;\n\t\t\n\t\t// get depth at point\n\t\tvec4 backBuffer=texture2D(uBackFaceBuffer,midpUV);\n\t\tfloat depth=backBuffer.w;\n\t\t\n\t\tfloat midpDepth=abs((vViewMatrix*vec4(midP,1.)).z)*uCameraFarInverse;\n\t\tif(midpDepth>depth){\n\t\t\thitP=midP;\n\t\t}else{\n\t\t\tlastP=midP;\n\t\t}\n\t}\n\t\n\treturn hitP;\n}\n\nvec3 getRefractedColor(vec3 refractionDir,vec3 hitPoint,float refractionIndex){\n\t// move the hitpoint inside the mesh with epsilon\n\thitPoint+=refractionDir*.0001;\n\t\n\t// raymarch!\n\tfloat stepSize=.02;\n\tfloat stepMult=1.5;\n\t\n\tvec3 lastP=hitPoint;\n\tvec3 p=hitPoint;\n\tvec3 hitPNormal;\n\tfloat currStepSize=stepSize;\n\tfloat transmissionDistance=0.;\n\tfor(int i=0;i<20;i++){\n\t\tp+=currStepSize*refractionDir;\n\t\t\n\t\t// project p in uv space\n\t\tvec4 projCoord=vProjViewMatrix*vec4(p,1.);\n\t\tprojCoord.xyz/=projCoord.w;\n\t\t\n\t\tvec2 pNDC=projCoord.xy;\n\t\tvec2 pUV=pNDC*.5+.5;\n\t\t\n\t\t// get depth at point\n\t\tvec4 backBuffer=texture2D(uBackFaceBuffer,pUV);\n\t\tfloat depth=backBuffer.w;\n\t\tvec3 norm=backBuffer.xyz;\n\t\t\n\t\t// get p depth\n\t\tfloat pDepth=abs((vViewMatrix*vec4(p,1.)).z)*uCameraFarInverse;\n\t\t\n\t\tif(pDepth>depth){\n\t\t\t\n\t\t\tvec3 hitp=binarySearchHitPoint(lastP,p,refractionDir);\n\t\t\tp=hitp;\n\t\t\t\n\t\t\t// ************ get the hitpoint normal\n\t\t\tvec4 projCoord=vProjViewMatrix*vec4(p,1.);\n\t\t\tprojCoord.xyz/=projCoord.w;\n\t\t\t\n\t\t\tvec2 pNDC=projCoord.xy;\n\t\t\tvec2 pUV=pNDC*.5+.5;\n\t\t\t\n\t\t\t// get depth at point\n\t\t\thitPNormal=texture2D(uBackFaceBuffer,pUV).xyz;\n\t\t\t// ************ get the hitpoint normal - END\n\t\t\t\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tlastP=p;\n\t\tcurrStepSize*=stepMult;\n\t}\n\t\n\ttransmissionDistance=length(hitPoint-p);\n\t\n\t// ******************** recalc directions\n\tvec3 outward_normal;\n\tvec3 reflected=reflect(refractionDir,hitPNormal);\n\tfloat ni_over_nt;\n\tvec3 refr;\n\t// vec3 refracted;\n\tfloat reflect_prob;\n\tfloat cosine;\n\t\n\tif(dot(refractionDir,hitPNormal)>0.){\n\t\toutward_normal=-hitPNormal;\n\t\tni_over_nt=refractionIndex;\n\t\tcosine=refractionIndex*dot(refractionDir,hitPNormal);\n\t}else{\n\t\toutward_normal=hitPNormal;\n\t\tni_over_nt=1./refractionIndex;\n\t\tcosine=-dot(refractionDir,hitPNormal);\n\t}\n\t\n\t// if (refract2(refractionDir, outward_normal, ni_over_nt, refracted)) {\n\t\tif(refract2(refractionDir,outward_normal,ni_over_nt,refr)){\n\t\t\tfloat r0=(1.-refractionIndex)/(1.+refractionIndex);\n\t\t\tr0*=r0;\n\t\t\treflect_prob=r0+(1.-r0)*pow((1.-cosine),5.);\n\t\t}else{\n\t\t\treflect_prob=1.;\n\t\t}\n\t\t// ******************** recalc directions - END\n\t\t\n\t\t// ******************** get colors\n\t\tvec3 col;\n\t\tvec3 colrefl;\n\t\tvec3 colrefr;\n\t\t// if(refracted.y < 0.0) {\n\t\t\tif(refr.y<0.){\n\t\t\t\t// float t = p.y / abs(refracted.y);\n\t\t\t\t// vec3 planeHitP = p + refracted * t;\n\t\t\t\tfloat t=p.y/abs(refr.y);\n\t\t\t\tvec3 planeHitP=p+refr*t;\n\t\t\t\tif(abs(planeHitP.x)<planeSize&&abs(planeHitP.z)<planeSize){\n\t\t\t\t\tcolrefr=planeColor;\n\t\t\t\t}else{\n\t\t\t\t\t// colrefr = getSkyboxColor(refracted);\n\t\t\t\t\tcolrefr=getSkyboxColor(refr);\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\t// colrefr = getSkyboxColor(refracted);\n\t\t\t\tcolrefr=getSkyboxColor(refr);\n\t\t\t}\n\t\t\t\n\t\t\tif(reflected.y<0.){\n\t\t\t\tfloat t=p.y/abs(reflected.y);\n\t\t\t\tvec3 planeHitP=p+reflected*t;\n\t\t\t\tif(abs(planeHitP.x)<planeSize&&abs(planeHitP.z)<planeSize){\n\t\t\t\t\tcolrefl=planeColor;\n\t\t\t\t}else{\n\t\t\t\t\tcolrefl=getSkyboxColor(reflected);\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tcolrefl=getSkyboxColor(reflected);\n\t\t\t}\n\t\t\t\n\t\t\tcol=colrefl*(reflect_prob*uReflectionFactor)+colrefr*(1.-reflect_prob);\n\t\t\t// ******************** get colors\n\t\t\t\n\t\t\tvec3 transm=vec3(1.);\n\t\t\t// const int steps = 8;\n\t\t\tconst int steps=15;\n\t\t\tfloat step=transmissionDistance/float(steps);\n\t\t\tfloat fc=uExtintionFactor*.07;\n\t\t\t\n\t\t\t// raymarching transmission color\n\t\t\t\n\t\t\t// float noiseStrength = 0.8;\n\t\t\tfloat noiseSpeed=.5;\n\t\t\tfloat noiseTimeSpeed=.5;\n\t\t\t\n\t\t\tfor(int i=0;i<steps;i++){\n\t\t\t\tvec3 np=hitPoint+refractionDir*float(i)*step;\n\t\t\t\t\n\t\t\t\tvec3 nnp=np;\n\t\t\t\tvec3 w=normalize(np-vec3(.75,1.5,0.));\n\t\t\t\tvec3 u=vec3(0.,0.,1.);\n\t\t\t\t// vec3 timeOffset = uTime * normalize(np - vec3(0.75, 1.5, 0.0));\n\t\t\t\tvec3 timeOffset=cos(uTime)*w+sin(uTime)*u;\n\t\t\t\tfloat colorNoiseX=noise(np*noiseSpeed+timeOffset*noiseTimeSpeed);\n\t\t\t\tfloat colorNoiseY=noise(np*noiseSpeed+timeOffset*noiseTimeSpeed+vec3(15.3278,125.19879,0.));\n\t\t\t\tfloat colorNoiseZ=noise(np*noiseSpeed+timeOffset*noiseTimeSpeed+vec3(2.6008,78.19879,543.12993));\n\t\t\t\t\n\t\t\t\tfloat targ=length(nnp*.8*uExtinctionFX1.w-vec3(.75,1.5,0.));\n\t\t\t\tfloat targAperture=.25;\n\t\t\t\t\n\t\t\t\t// wave raymarch\n\t\t\t\tif(uExtinctionFX1.z>.5){\n\t\t\t\t\tnnp=np+sin(np.x*2.5+uTime*1.5)*.3;\n\t\t\t\t\ttarg=nnp.y-.85*uExtinctionFX1.w;\n\t\t\t\t}else{\n\t\t\t\t\tnnp=np+vec3(colorNoiseX,colorNoiseY,colorNoiseZ)*1.05;\n\t\t\t\t\tvec3 diff=nnp-vec3(3.3,4.5,0.);\n\t\t\t\t\tfloat angle=(atan(diff.x,diff.y)+PI)/(PI*2.);\n\t\t\t\t\ttarg=length(diff)+sin(angle*32.*PI+uTime*1.5)*.4;\n\t\t\t\t\ttarg*=.475;\n\t\t\t\t\ttargAperture=.5+colorNoiseX*.75;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// what's the color at np?\n\t\t\t\tvec3 col1=uExtintionColor1;\n\t\t\t\tvec3 col2=uExtintionColor2;\n\t\t\t\tif(uExtinctionFX1.x>.5){\n\t\t\t\t\tcol1=vec3(colorNoiseX,colorNoiseY,colorNoiseZ)*.85;\n\t\t\t\t}\n\t\t\t\tif(uExtinctionFX1.y>.5){\n\t\t\t\t\tcol2=vec3(colorNoiseX,colorNoiseY,colorNoiseZ)*.85;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(targ<1.){\n\t\t\t\t\t\n\t\t\t\t\ttransm*=exp(-step*col2*fc);\n\t\t\t\t\t\n\t\t\t\t}else if(targ>1.&&targ<1.+targAperture){\n\t\t\t\t\tfloat t=(targ-1.)/targAperture;\n\t\t\t\t\t\n\t\t\t\t\ttransm*=exp(-step*(col1*t+col2*(1.-t))*fc);\n\t\t\t\t\t\n\t\t\t\t}else if(targ<(1.+targAperture)*1.85){\n\t\t\t\t\ttransm*=exp(-step*col1*fc);\n\t\t\t\t\t\n\t\t\t\t}else{\n\t\t\t\t\t// transm = (col1) * targAperture;\n\t\t\t\t\t// transm *= exp(-step * col1 * uExtintionFactor);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// return col * uExtintionColor2 * transm;\n\t\t\tcol*=transm;\n\t\t\t\n\t\t\treturn col;\n\t\t}\n\t\t\n\t\tvoid main(){\n\t\t\tvec2 screenUV=gl_FragCoord.xy*uScreenSizeInv;\n\t\t\t\n\t\t\tvec3 viewDir=normalize(vWorldSpaceFragPos-uCameraPos);\n\t\t\tvec3 normal=vWorldSpaceNormal;\n\t\t\tfloat refractionIndex=1.5;\n\t\t\t\n\t\t\tvec3 outward_normal;\n\t\t\tvec3 reflected=reflect(viewDir,normal);\n\t\t\tfloat ni_over_nt;\n\t\t\tvec3 refracted;\n\t\t\tfloat reflect_prob;\n\t\t\tfloat cosine;\n\t\t\t\n\t\t\tif(dot(viewDir,normal)>0.){\n\t\t\t\toutward_normal=-normal;\n\t\t\t\tni_over_nt=refractionIndex;\n\t\t\t\tcosine=refractionIndex*dot(viewDir,normal);\n\t\t\t}else{\n\t\t\t\toutward_normal=normal;\n\t\t\t\tni_over_nt=1./refractionIndex;\n\t\t\t\tcosine=-dot(viewDir,normal);\n\t\t\t}\n\t\t\t\n\t\t\tif(refract2(viewDir,outward_normal,ni_over_nt,refracted)){\n\t\t\t\tfloat r0=(1.-refractionIndex)/(1.+refractionIndex);\n\t\t\t\tr0*=r0;\n\t\t\t\treflect_prob=r0+(1.-r0)*pow((1.-cosine),5.);\n\t\t\t}else{\n\t\t\t\treflect_prob=1.;\n\t\t\t}\n\t\t\t\n\t\t\tvec3 reflectedCol;\n\t\t\tif(reflected.y<0.){\n\t\t\t\tfloat t=vWorldSpaceFragPos.y/abs(reflected.y);\n\t\t\t\tvec3 planeHitP=vWorldSpaceFragPos+reflected*t;\n\t\t\t\tif(abs(planeHitP.x)<planeSize&&abs(planeHitP.z)<planeSize){\n\t\t\t\t\treflectedCol=planeColor;\n\t\t\t\t}else{\n\t\t\t\t\treflectedCol=getSkyboxColor(reflected);\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\treflectedCol=getSkyboxColor(reflected);\n\t\t\t}\n\t\t\t\n\t\t\tvec3 col=reflectedCol*reflect_prob*uReflectionFactor+getRefractedColor(refracted,vWorldSpaceFragPos,refractionIndex)*(1.-reflect_prob);\n\t\t\t// getRefractedColor(normalize(refracted + vec3(0.0, 0.0, 0.0)), vWorldSpaceFragPos) * (1.0 - reflect_prob) * 0.333 +\n\t\t\t// getRefractedColor(normalize(refracted + vec3(0.0, 0.15, 0.0)), vWorldSpaceFragPos) * (1.0 - reflect_prob) * 0.333 +\n\t\t\t// getRefractedColor(normalize(refracted + vec3(0.0, 0.35, 0.0)), vWorldSpaceFragPos) * (1.0 - reflect_prob) * 0.333;\n\t\t\t\n\t\t\t// col = getRefractedColor(refracted, vWorldSpaceFragPos) * (1.0 - reflect_prob);\n\t\t\t// vec3 col = getRefractedColor(refracted, vWorldSpaceFragPos);\n\t\t\t// col = getSkyboxColor(reflected) * reflect_prob * 1.0;\n\t\t\t\n\t\t\t// vec3 col = viewDir;\n\t\t\t// gl_FragColor = vec4(col, 1.0);\n\t\t\t// return;\n\t\t\t\n\t\t\tcol*=pow(2.,uExposure);\n\t\t\tcol=acesFilm(col);\n\t\t\tcol=pow(col,vec3(1./2.2));\n\t\t\t\n\t\t\tgl_FragColor=vec4(col,1.);\n\t\t\t// gl_FragColor = vec4(getSkyboxColor(viewDir), 1.0) * 0.5 + vec4(viewDir * 0.5 + 0.5, 1.0);\n\t\t}"}),{nodes:D}=([i,a]=y((()=>n(c.modelPath,{draco:!0,decoderPath:"./draco/"}))),i=await i,a(),i),z=D.Scene.getObjectByName(c.modelName),k=new J(z,g.value,w.value),I=z?.clone();I?.traverse((t=>{t instanceof x&&(t.material=j,t.material.side=s)}));const{onAfterLoop:B}=r();return B((({elapsed:t})=>{z&&j&&(j.uniforms.uCameraPos.value=g.value.position.clone(),j.uniforms.uTime.value=t,k.compute(6),j.uniforms.uBackFaceBuffer.value=k.getBackFaceTexture(),j.uniforms.uFrontFaceBuffer.value=k.getFrontFaceTexture(),w.value.setRenderTarget(null),w.value.autoClear=!1)})),C((()=>{c.extintionFactor&&(j.uniforms.uExtintionFactor.value=c.extintionFactor),c.reflectionFactor&&(j.uniforms.uReflectionFactor.value=c.reflectionFactor),c.exposure&&(j.uniforms.uExposure.value=c.exposure),c.extintionColor1&&(j.uniforms.uExtintionColor1.value=new m("#fff").sub(new m(c.extintionColor1).convertLinearToSRGB())),c.extintionColor2&&(j.uniforms.uExtintionColor2.value=new m("#fff").sub(new m(c.extintionColor2).convertLinearToSRGB())),c.extintionCol1Random&&(j.uniforms.uExposure.value=c.exposure)})),b((()=>c.extintionCol1Random),(t=>{j.uniforms.uExtinctionFX1.value.x=t?1:0}),{immediate:!0}),b((()=>c.extintionCol2Random),(t=>{j.uniforms.uExtinctionFX1.value.y=t?1:0}),{immediate:!0}),(t,e)=>(S(),P("primitive",{object:_(I)},null,8,tt))}}),nt=w({__name:"ssrtGlass",setup(t){const e={clearColor:"#201919",windowSize:!0,toneMapping:g,toneMappingExposure:.8},n=F({size:[20,20],color:"#cbcb96",shadowColor:"#b8b59e",edge:.35}),r=F({extintionFactor:5,reflectionFactor:1,exposure:0,extintionColor1:"rgb(192,123,25)",extintionColor2:"rgb(26, 166, 192)",extintionCol1Random:!1,extintionCol2Random:!1}),l=new c({title:"参数"});return l.addBinding(r,"extintionFactor",{label:"消光系数",min:0,max:10,step:.1}),l.addBinding(r,"reflectionFactor",{label:"反射系数",min:0,max:2,step:.1}),l.addBinding(r,"exposure",{label:"曝光系数",min:-1,max:1,step:.1}),l.addBinding(r,"extintionColor1",{label:"消光颜色一"}),l.addBinding(r,"extintionColor2",{label:"消光颜色二"}),l.addBinding(r,"extintionCol1Random",{label:"随机色1"}),l.addBinding(r,"extintionCol2Random",{label:"随机色2"}),(t,c)=>{const l=j("TresCanvas");return S(),P(B,null,[D(_(E)),D(l,k(I(e)),{default:z((()=>[c[0]||(c[0]=N("TresPerspectiveCamera",{position:[0,8,-13],fov:45,near:.1,far:1e3,"look-at":[0,0,0]},null,-1)),D(_(o),{enableDamping:""}),c[1]||(c[1]=N("TresAmbientLight",{intensity:10},null,-1)),(S(),T(M,null,{default:z((()=>[D(i,k(I(n)),null,16)])),_:1})),(S(),T(M,null,{default:z((()=>[D(et,R({scale:2},r,{modelPath:"https://opensource.cdn.icegl.cn/model/eCommerce/guanYu.glb",modelName:"statue",skyBoxTexture:"https://opensource.cdn.icegl.cn/images/skyBox/workshop_blur.jpg"}),null,16,["modelPath","skyBoxTexture"])])),_:1})),(S(),T(M,null,{default:z((()=>[D(a,{texture:"https://opensource.cdn.icegl.cn/images/skyBox/workshop_blur.jpg"},null,8,["texture"])])),_:1}))])),_:1},16)],64)}}});export{nt as default};
