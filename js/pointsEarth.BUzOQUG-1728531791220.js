import{_ as e,z as n}from"./three.QbUqWzuy1728531791220.js";import{U as t,Y as a,z as o}from"./@tresjs.TFxw2EXb1728531791220.js";import{P as r}from"./tweakpane.yHWGBmom1728531791220.js";import{d as i,a4 as l,Y as s,e as u,o as c,f,g as p,j as v,u as m,L as d,m as h,aj as g,ak as x}from"./@vue.bvMz0l_u1728531791220.js";import"./@vueuse.MmMw6bXQ1728531791220.js";const y=w;!function(e,n){const t=w,a=b();for(;;)try{if(709301===-parseInt(t(390))/1+-parseInt(t(401))/2*(-parseInt(t(380))/3)+-parseInt(t(387))/4*(-parseInt(t(386))/5)+parseInt(t(370))/6*(-parseInt(t(358))/7)+parseInt(t(396))/8*(parseInt(t(351))/9)+-parseInt(t(383))/10*(parseInt(t(382))/11)+-parseInt(t(347))/12*(-parseInt(t(367))/13))break;a.push(a.shift())}catch(o){a.push(a.shift())}}();const T=function(){let e=!0;return function(n,t){const a=e?function(){if(t){const e=t[w(375)](n,arguments);return t=null,e}}:function(){};return e=!1,a}}();!function(){T(this,(function(){const e=w,n=new RegExp("function *\\( *\\)"),t=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),a=D(e(360));n[e(397)](a+e(350))&&t[e(397)](a+e(357))?D():a("0")}))()}();const S=function(){let e=!0;return function(n,t){const a=e?function(){if(t){const e=t[w(375)](n,arguments);return t=null,e}}:function(){};return e=!1,a}}();function b(){const e=["4YmjPAc","warn","debu","766013OFucka","TresShaderMaterial","pointSize","Debug","value","rotation","10088GvacJQ","test","粒子大小","length","prototype","171854fMQqVq","uniforms","trace","set","SRGBColorSpace","size","海浪高度","#ffffff","TresGroup","21086004OVfSWb","addFolder","TresPerspectiveCamera","chain","1359aaLUEi","addBinding","table",'{}.constructor("return this")( )',"constructor","console","input","840161bfSapd","log","init","string","wireframeMaterialRef","uTime","return (function() ","海浪变化速度","TresMeshBasicMaterial","13thhPTl","TresIcosahedronGeometry","TresCanvas","42ATChXd","bind","groupRef","gger","color","apply","error","uWaveSpeed","action","call","6TuCowc","pointsEarth","231frgVpU","19760JHEbrj","counter","stateObject","1187695sYKQPu"];return(b=function(){return e})()}function w(e,n){const t=b();return(w=function(e,n){return t[e-=345]})(e,n)}S(void 0,(function(){const e=w,n=function(){const e=w;let n;try{n=Function(e(364)+e(354)+");")()}catch(t){n=window}return n}(),t=n[e(356)]=n[e(356)]||{},a=[e(359),e(388),"info",e(376),"exception",e(353),e(403)];for(let o=0;o<a[e(399)];o++){const n=S[e(355)][e(400)].bind(S),r=a[o],i=t[r]||n;n.__proto__=S.bind(S),n.toString=i.toString[e(371)](i),t[r]=n}}))();const _=d(y(349),{position:[0,0,3.5],fov:45,near:.1,far:20},null,-1),z=d(y(368),{args:[1,4]},null,-1),j=d(y(368),{args:[1,128]},null,-1),E=d("TresHemisphereLight",{args:[y(345),"#080820",3]},null,-1),P=i({__name:y(381),async setup(i){const T=y;let S,b;const w={color:"#17c5a9",pointSize:4},P={clearColor:"#122148",shadows:!1,alpha:!1,outputColorSpace:e[T(405)]},D={color:w[T(374)],wireframe:!0,transparent:!0,opacity:.2},I=([S,b]=l((()=>o(["./plugins/earthSample/image/pointsEarth/00_earthmap1k.jpg","./plugins/earthSample/image/pointsEarth/circle.png","./plugins/earthSample/image/pointsEarth/04_rainbow1k.jpg","./plugins/earthSample/image/pointsEarth/01_earthbump1k.jpg","./plugins/earthSample/image/pointsEarth/02_earthspec1k.jpg"]))),S=await S,b(),S),A=I[0],C=I[1],k=I[2],U=I[3],M=I[4],W={uniforms:{size:{type:"f",value:w[T(392)]},uTime:{type:"f",value:0},uWaveHeight:{type:"f",value:.075},uWaveSpeed:{type:"f",value:.2},colorTexture:{type:"t",value:k},elevTexture:{type:"t",value:U},alphaTexture:{type:"t",value:M},earthTexture:{type:"t",value:A},starTexture:{type:"t",value:C}},vertexShader:"  uniform float size;\n  uniform sampler2D elevTexture;\n  uniform sampler2D alphaTexture;\n  uniform float uTime;\n  uniform float uWaveHeight;\n  uniform float uWaveSpeed;\n\n  varying vec2 vUv;\n  varying float vVisible;\n  varying float vAlpha;\n  varying float vElevation;\n  // Function to generate fBm with vec3 input\n  float random(vec3 st) {\n    return fract(sin(dot(st.xyz, vec3(12.9898,78.233,45.164))) * 43758.5453123);\n}\n\nfloat noise(vec3 st) {\n    vec3 i = floor(st);\n    vec3 f = fract(st);\n\n    // Eight corners in 3D of a tile\n    float a = random(i);\n    float b = random(i + vec3(1.0, 0.0, 0.0));\n    float c = random(i + vec3(0.0, 1.0, 0.0));\n    float d = random(i + vec3(1.0, 1.0, 0.0));\n    float e = random(i + vec3(0.0, 0.0, 1.0));\n    float f1 = random(i + vec3(1.0, 0.0, 1.0));\n    float g = random(i + vec3(0.0, 1.0, 1.0));\n    float h = random(i + vec3(1.0, 1.0, 1.0));\n\n    vec3 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(mix(mix(a, b, u.x), mix(c, d, u.x), u.y),\n               mix(mix(e, f1, u.x), mix(g, h, u.x), u.y), u.z);\n}\n\nfloat fbm(vec3 st) {\n    float value = 0.0;\n    float amplitude = 0.5;\n\n    for (int i = 0; i < 5; i++) {\n        value += amplitude * noise(st);\n        st *= 2.0;\n        amplitude *= 0.5;\n    }\n    return value;\n}\n\n  void main() {\n    vUv = uv;\n    float alphaLand = 1.0 - texture2D(alphaTexture, vUv).r;\n    vAlpha = alphaLand;\n    vec3 newPosition = position;\n\n    if(alphaLand < 0.5) {\n      // Sea\n      // fBm for wave-like displacement\n      float waveHeight = uWaveHeight; // Adjust wave height as needed\n      float waveSpeed = uWaveSpeed;  // Adjust wave speed as needed\n      float displacement = (fbm(newPosition * 5.0 + uTime * waveSpeed) * 2.0 - 1.0) * waveHeight;\n      vElevation = displacement;\n      newPosition += normal * displacement ;\n    }\n\n    vec4 mvPosition = modelViewMatrix * vec4( newPosition, 1.0 );\n    float elv = texture2D(elevTexture, vUv).r;\n    vec3 vNormal = normalMatrix * normal;\n    vVisible = step(0.0, dot( -normalize(mvPosition.xyz), normalize(vNormal)));\n    mvPosition.z += 0.45 * elv;\n\n    // 求出 mvPosition 距离相机的距离\n    float dist = length(mvPosition.xyz);\n    // 根据距离调整 size\n    float pointSize = size * (1.0 - dist / 10.0);\n    gl_PointSize = max(pointSize, 1.0);\n    gl_PointSize = pointSize;\n    gl_Position = projectionMatrix * mvPosition;\n  }\n",fragmentShader:"  uniform sampler2D colorTexture;\n  // uniform sampler2D alphaTexture;\n  uniform sampler2D earthTexture;\n  uniform sampler2D starTexture;\n\n  varying vec2 vUv;\n  varying float vVisible;\n  varying float vAlpha;\n  varying float vElevation;\n\n  void main() {\n    if (floor(vVisible + 0.1) == 0.0) discard;\n    vec2 coord = gl_PointCoord;\n    float alpha = texture2D(starTexture, coord).a;\n    // 根据 alpha 值来裁剪形状\n    if (alpha < 0.1) discard;\n\n    // float alphaLand = 1.0 - texture2D(alphaTexture, vUv).r;\n    vec3 color = texture2D(colorTexture, vUv).rgb;\n    vec3 earth = texture2D(earthTexture, vUv).rgb;\n    color = mix(color, earth, 0.65);\n    if(\n      vAlpha > 0.5\n    ) {\n      gl_FragColor = vec4(color, vAlpha);\n    }else {\n      // 对于海洋部分，根据 vElevation 调整颜色\n      float elevationEffect = clamp(vElevation*30.0, -1.0, 1.0); // 将 vElevation 限制在 [-1, 1] 范围内\n      vec3 deep_sea_blue = vec3(0.004, 0.227, 0.388);\n      vec3 adjustedColor = mix(deep_sea_blue, earth*1.75, (elevationEffect + 1.0) * 0.5); // 根据 vElevation 调整颜色\n      gl_FragColor = vec4(adjustedColor, 1.0-vAlpha);\n    }\n  }\n",transparent:!0,side:n},H=s(),L=s(),V=(new r)[T(348)]({title:T(393)});V[T(352)](w,T(374),{type:T(374)}).on("change",(({value:e})=>{const n=T;L[n(394)][n(374)][n(404)](e)})),V[T(352)](W[T(402)][T(406)],"value",{min:.1,max:10,step:.1,label:T(398)}),V[T(352)](W[T(402)].uWaveHeight,T(394),{min:.01,max:.5,step:.01,label:T(407)}),V[T(352)](W[T(402)][T(377)],T(394),{min:.01,max:1,step:.01,label:T(365)});const{onLoop:R}=t();return R((({delta:e})=>{const n=T;H[n(394)]&&(H[n(394)][n(395)].y+=.002,W[n(402)][n(363)][n(394)]+=10*e)})),(e,n)=>{const t=T,o=u(t(369));return c(),f(o,h(P,{"window-size":""}),{default:p((()=>[_,v(m(a),{autoRotate:!0,autoRotateSpeed:2}),d(t(346),{ref_key:t(372),ref:H},[d("TresMesh",null,[z,d(t(366),h({ref_key:t(362),ref:L},D),null,16)]),d("TresPoints",null,[j,d(t(391),g(x(W)),null,16)])],512),E])),_:1},16)}}});function D(e){function n(e){const t=w;if(typeof e===t(361))return function(e){}.constructor("while (true) {}")[t(375)](t(384));1!==(""+e/e)[t(399)]||e%20==0?function(){return!0}.constructor(t(389)+t(373))[t(379)](t(378)):function(){return!1}.constructor(t(389)+t(373))[t(375)](t(385)),n(++e)}try{if(e)return n;n(0)}catch(t){}}export{P as default};
