import{m as t,e as n,b as e,U as o}from"./@tresjs.g7tJPOCI1736493808390.js";import{_ as r,V as a,cT as s,s as i,aW as l,W as c,n as u,B as v,c2 as f,k as p}from"./three.lAfZYOpc1736493808390.js";import{P as d}from"./tweakpane.yHWGBmom1736493808390.js";import{d as m,a4 as g,e as x,o as h,f as y,g as I,J as b,j as _,u as S,aj as U,ak as w,al as P,m as D}from"./@vue.-Mz_IXfk1736493808390.js";import{_ as E}from"./@fesjs.JLOwLS8V1736493808390.js";import"./@vueuse.kU-N6GoC1736493808390.js";import"./vue-router.orb3lCQB1736493808390.js";import"./lodash-es.guXTxyfJ1736493808390.js";import"./@qlin.yHhFDldE1736493808390.js";import"./pinia.HJbEB2CQ1736493808390.js";import"./vue-demi.C4xddsk91736493808390.js";import"./@floating-ui.BPbuo5Gx1736493808390.js";import"./@juggle.7yjBMqoW1736493808390.js";!function(t,n){const e=L,o=F();for(;;)try{if(218515===-parseInt(e(168))/1+-parseInt(e(119))/2+-parseInt(e(160))/3*(-parseInt(e(141))/4)+parseInt(e(143))/5*(parseInt(e(125))/6)+-parseInt(e(123))/7+-parseInt(e(176))/8*(parseInt(e(158))/9)+parseInt(e(164))/10*(parseInt(e(153))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){A(this,(function(){const t=L,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(127),"i"),o=z(t(118));n[t(167)](o+t(116))&&e[t(167)](o+t(115))?z():o("0")}))()}();const M=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(151)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function L(t,n){const e=F();return(L=function(t,n){return e[t-=112]})(t,n)}function F(){const t=["responseText","random","message","53532cUxHbF","exec","168705kKcvUD","value","console","log","311890NQJOQe",'Shader "',"Vector3","test","207585gEnxRp","stateObject","toString","length",'" load was aborted.',"\" couldn't be loaded.","string","v3v","560bSWkit","table","replace","type","prototype","input","chain","hasOwnProperty","init","514708FSrTXL","object","Vector4","Vector2","972468kGitEz","action","11802VMjahP","isArray","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","call","send","info","constructor","index","while (true) {}","Texture","WagnerLoadShaderException","onload","warn","gger","counter","debu","16EumpYd","Matrix4","595oJlTWS","bind","lastIndex","open","ShaderMaterial","now","get","__proto__","apply","Matrix3","275dJOtCH","name"];return(F=function(){return t})()}M(void 0,(function(){const t=L;let n;try{n=Function('return (function() {}.constructor("return this")( ));')()}catch(r){n=window}const e=n.console=n[t(162)]||{},o=[t(163),t(137),t(130),"error","exception",t(177),"trace"];for(let a=0;a<o[t(171)];a++){const n=M[t(131)][t(114)].bind(M),r=o[a],s=e[r]||n;n[t(150)]=M.bind(M),n.toString=s[t(170)][t(144)](s),e[r]=n}}))();function C(t,n,e){const o=L;if(typeof t!==o(120)||null===t)return t;const r=Array[o(126)](t)?[]:{};for(const a in t)t[o(117)](a)&&(r[a]=C(t[a])),a==n&&(r[n]=e);return r}function z(t){function n(t){const e=L;if(typeof t===e(174))return function(t){}[e(131)](e(133)).apply(e(139));1!==(""+t/t).length||t%20==0?function(){return!0}[e(131)]("debu"+e(138))[e(128)](e(124)):function(){return!1}[e(131)](e(140)+e(138))[e(151)](e(169)),n(++t)}try{if(t)return n;n(0)}catch(e){}}function T(){const t=["setSize","6672690IdPsBk","Pass","19137bpfUcW","uniforms","addPass","UnsignedByteType","length","settings","render","onWindowResize","now","info","push","setRenderTarget","makePerspective","magFilter","texture","read","36394116MadHiP","bind","LinearFilter","width","console","params","Reset","swapBuffers","minFilter","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","table","while (true) {}","ShaderMaterial","371491VhcAvl","WebGLRenderTarget","wrapS","removePass","prototype","CopyPass","ClampToEdgeWrapping","tInput","shader","call","set","toString","height","action","stencilBuffer","196wJTBsM",'{}.constructor("return this")( )',"toScreen","resolution","warn","far","getOfflineTexture","front","PlaneGeometry","RGBAFormat","write","scene","chain","RGBFormat","time","loadShadervf","back","456530qXdGTl","camera","function *\\( *\\)","constructor","innerHeight","apply","renderer","startTime","2rNJmIX","passes","passItems","Scene","clone","120QTSRIT","stateObject","uuid","useRGBA","add","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","pass","Stack","OrthographicCamera","return (function() ","quad","9487752DsoUGL","MeshBasicMaterial","exception","splice","288tHGhCT","projectionMatrix","scale","type","near","debu","wrapT","init","gger","copyPass","log","value","504483tVmXvb","material","test"];return(T=function(){return t})()}const N=R;!function(t,n){const e=R,o=T();for(;;)try{if(941773===-parseInt(e(477))/1*(-parseInt(e(517))/2)+-parseInt(e(555))/3*(-parseInt(e(492))/4)+-parseInt(e(553))/5+parseInt(e(522))/6*(-parseInt(e(549))/7)+parseInt(e(533))/8+parseInt(e(537))/9*(-parseInt(e(509))/10)+parseInt(e(464))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(514)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function R(t,n){const e=T();return(R=function(t,n){return e[t-=463]})(t,n)}!function(){G(this,(function(){const t=R,n=new RegExp(t(511)),e=new RegExp(t(527),"i"),o=O(t(544));n[t(551)](o+t(504))&&e[t(551)](o+"input")?O():o("0")}))()}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(514)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();B(void 0,(function(){const t=R;let n;try{n=Function(t(531)+t(493)+");")()}catch(r){n=window}const e=n[t(468)]=n[t(468)]||{},o=[t(547),t(496),t(564),"error",t(535),t(474),"trace"];for(let a=0;a<o[t(559)];a++){const n=B[t(512)][t(481)].bind(B),r=o[a],s=e[r]||n;n.__proto__=B.bind(B),n[t(488)]=s[t(488)][t(465)](s),e[r]=n}}))();class j{constructor(t,n){const e=R;this[e(467)]=1,this[e(489)]=1,this[e(560)]=n||{},this[e(525)]=this[e(560)][e(525)]||!1,this[e(515)]=t,this[e(546)]=this[e(482)](this.settings),this[e(503)]=new(r[e(520)]),this[e(532)]=new i(new(r[e(500)])(1,1),new(r[e(534)])),this[e(503)][e(526)](this.quad),this[e(510)]=new(r[e(530)])(1,1,1,1,-1e4,1e4),this[e(499)]=new(r[e(478)])(1,1,{minFilter:void 0!==this[e(560)].minFilter?this[e(560)][e(472)]:r[e(466)],magFilter:void 0!==this[e(560)].magFilter?this[e(560)][e(568)]:r[e(466)],wrapS:void 0!==this[e(560)][e(479)]?this.settings[e(479)]:r[e(483)],wrapT:void 0!==this[e(560)][e(543)]?this[e(560)][e(543)]:r[e(483)],format:this[e(525)]?l:r[e(505)],type:void 0!==this[e(560)][e(540)]?this[e(560)][e(540)]:r[e(558)],stencilBuffer:void 0===this[e(560)][e(491)]||this[e(560)][e(491)]}),this.back=this[e(499)][e(521)](),this[e(516)]=Date[e(563)](),this[e(518)]={},this[e(529)]={passItems:[],passes:[]}}[N(557)](t,n,e,o){const r=N;this.loadShadervf(n);const a={shaderName:t,params:e,uuid:o,shader:this[r(485)]};this[r(529)][r(519)][r(565)](a)}[N(480)](t){const n=N;for(let e=this[n(529)].passItems[n(559)]-1;e>=0;e--)this[n(529)][n(519)][e][n(524)]===parseInt(t)&&this[n(529)][n(519)][n(536)](e,1);console[n(547)](this[n(529)][n(519)])}CopyPass(){const t=N;this[t(554)].call(this);return this[t(507)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}loadShadervf(t){const n=N,e=n(473);return this[n(485)]=function(t,n){const e=L,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,i=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,l={sampler2D:{type:"t",value:()=>new(r[L(134)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[L(122)])},vec3:{type:"v3",value:()=>new a},vec4:{type:"v4",value:()=>new(r[L(121)])},bvec2:{type:"v2",value:()=>new(r[L(122)])},bvec3:{type:"v3",value:()=>new(r[L(166)])},bvec4:{type:"v4",value:()=>new(r[L(121)])},ivec2:{type:"v2",value:()=>new(r[L(122)])},ivec3:{type:"v3",value:()=>new a},ivec4:{type:"v4",value:()=>new(r[L(121)])},mat2:{type:"v2",value:()=>new s},mat3:{type:"v3",value:()=>new(r[L(152)])},mat4:{type:"v4",value:()=>new(r[L(142)])}},c={float:{type:"fv",value:()=>[]},vec3:{type:e(175),value:()=>[]}};let u;const v={resolution:{type:"v2",value:new(r[e(122)])(1,1),default:!0},time:{type:"f",value:Date[e(148)](),default:!0},tInput:{type:"t",value:new(r[e(134)]),default:!0}};let f,p;for(;null!==(u=o[e(159)](n));)u[e(132)]===o[e(145)]&&o[e(145)]++,f=u[1],p=u[2],v[p]={type:l[f][e(113)],value:l[f][e(161)]()};for(;null!==(u=i.exec(n));)u.index===o.lastIndex&&o[e(145)]++,f=u[1],p=u[2],u[3],v[p]={type:c[f].type,value:c[f][e(161)]()};return new(r[e(147)])({uniforms:v,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this.shader}[N(554)](t){const n=N;this[n(485)]=null,this[n(469)]={}}[N(470)](){const t=N;this[t(463)]=this[t(499)],this[t(502)]=this[t(508)]}[N(562)](t,n){const e=N,o=window.innerWidth,r=window[e(513)];t[e(552)](1*o,1*r),n[e(538)][e(567)](70,o/r,n[e(541)],n[e(497)]),this[e(552)](o,r);return this[e(498)](o,r,!0)}[N(552)](t,n){const e=N;this[e(467)]=t,this[e(489)]=n,this[e(510)][e(538)].makeOrthographic(t/-2,t/2,n/2,n/-2,this[e(510)].near,this[e(510)].far),this[e(532)][e(539)][e(487)](t,n,1),this[e(499)][e(552)](t,n),this[e(508)].setSize(t,n)}getOfflineTexture(t,n,e){const o=N;return new c(t,n,{minFilter:u,magFilter:r[o(466)],format:e?r[o(501)]:r[o(505)]})}[N(561)](t,n,e,o){const r=N;this.renderer.setRenderTarget(this[r(502)]),this[r(515)][r(561)](t,n),o||this.swapBuffers()}[N(471)](){const t=N,n=this.write;this[t(502)]=this[t(463)],this[t(463)]=n}[N(528)](){const t=N;for(let n=0;n<this[t(529)][t(519)][t(559)];n++){const e=this[t(529)][t(519)][n][t(485)],o=this[t(529)][t(519)][n][t(469)];if(this.renderer[t(566)](this[t(502)]),e instanceof r[t(476)]){this[t(532)][t(550)]=e,this[t(532)][t(550)][t(556)][t(484)].value=this[t(463)][t(569)],this.quad[t(550)].uniforms[t(495)][t(548)][t(487)](this[t(467)],this.height),this[t(532)][t(550)][t(556)][t(506)][t(548)]=.001*(Date[t(563)]()-this[t(516)]);for(const n in o)this[t(532)][t(550)][t(556)][n][t(548)]=o[n];this[t(515)][t(561)](this.scene,this.camera),this[t(471)]()}}}[N(494)](t,n){const e=N;this[e(515)].setRenderTarget(null),this[e(532)][e(550)]=this[e(546)],this[e(532)][e(550)][e(556)][e(484)].value=this.read.texture,this[e(532)][e(550)][e(556)][e(495)].value[e(487)](this[e(467)],this.height),this[e(515)].render(this[e(503)],this.camera)}}function O(t){function n(t){const e=R;if("string"==typeof t)return function(t){}.constructor(e(475)).apply("counter");1!==(""+t/t)[e(559)]||t%20==0?function(){return!0}[e(512)](e(542)+e(545))[e(486)](e(490)):function(){return!1}[e(512)](e(542)+e(545)).apply(e(523)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const V="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",H=X;!function(t,n){const e=X,o=q();for(;;)try{if(688616===parseInt(e(390))/1+-parseInt(e(381))/2*(-parseInt(e(419))/3)+-parseInt(e(426))/4*(parseInt(e(395))/5)+parseInt(e(356))/6*(parseInt(e(408))/7)+parseInt(e(414))/8+parseInt(e(393))/9+-parseInt(e(355))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const k=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[X(417)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){k(this,(function(){const t=X,n=new RegExp(t(386)),e=new RegExp(t(346),"i"),o=J("init");n[t(400)](o+t(422))&&e[t(400)](o+"input")?J():o("0")}))()}();const W=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function X(t,n){const e=q();return(X=function(t,n){return e[t-=343]})(t,n)}function q(){const t=["161329qVHFWr","warn","info","material","debu","addButton","2329064GHXDtp","toString","DENOISEPass","apply","后处理类型","1449258aOklrT","stateObject","BoxGeometry","chain","values","constructor","plugins/postProcessing/image/1324.jpg","150232zrgXOP","VIGNETTE2Pass","removePass","call","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","value","while (true) {}","action","Reset","MeshPhongMaterial","plugins/postProcessing/image/1324-normal.jpg","FXAAPass","onWindowResize","20789260ueOtFa","192vUuXXl","log","CGAPass","移除~","pass","click","BOXBLURPass","counter","random","addPass","FREICHENPass","target","mergeGeometries","list","bind","keys",'{}.constructor("return this")( )',"addFolder","split","receiveShadow","label","Mesh","autoClearColor","trace","dispose","4xrRVgl","change","SNOISEPass","console","TOONPass","function *\\( *\\)","SEPIAPass","__proto__","SOBELPass","29489fSkozp","InvertPass","error","9393372TEcmne","postProcessing","40folGWA","text","toScreen","addBlade","VIGNETTE1Pass","test","push","add","castShadow","length","map","exception","RGBPass"];return(q=function(){return t})()}W(void 0,(function(){const t=X;let n;try{n=Function("return (function() "+t(372)+");")()}catch(r){n=window}const e=n[t(384)]=n[t(384)]||{},o=[t(357),t(409),t(410),t(392),t(406),"table",t(379)];for(let a=0;a<o[t(404)];a++){const n=W[t(424)].prototype[t(370)](W),r=o[a],s=e[r]||n;n[t(388)]=W[t(370)](W),n[t(415)]=s[t(415)][t(370)](s),e[r]=n}}))();function J(t){function n(t){const e=X;if("string"==typeof t)return function(t){}[e(424)](e(348))[e(417)](e(363));1!==(""+t/t)[e(404)]||t%20==0?function(){return!0}.constructor(e(412)+"gger")[e(345)](e(349)):function(){return!1}[e(424)]("debugger")[e(417)](e(420)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const Z=E(m({__name:H(394),async setup(o){const a=H;let s,i;const{camera:l,renderer:c,scene:u,sizes:m}=t();for(var x=new v,h=[],y=0;y<100;y++){var I=new(r[a(421)])(100,100,100);I.translate(1500*Math[a(364)](),1500*Math[a(364)](),1500*Math[a(364)]()),h[a(401)](I)}x=f[a(368)](h);const b=([s,i]=g((()=>e({map:a(425)}))),s=await s,i(),s),_=([s,i]=g((()=>e({map:a(352)}))),s=await s,i(),s);var S=new(r[a(351)])({map:b[a(405)],normalMap:_.map,normalScale:new p(.8,-.8),shininess:100}),U=new(r[a(377)])(x,S);U[a(403)]=!0,U[a(375)]=!0,u[a(347)][a(402)](U);const w=new j(c[a(347)],{useRGBA:!0}),P=new d;let D=null,E=[{text:a(391),value:{InvertPass:V}},{text:a(353),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:a(387),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:a(383),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:a(362),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:a(416),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:a(358),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:_.map}}},{text:a(389),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:a(407),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:"DOTPass",value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:"CIRCULARPass",value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:"POISSONPass",value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:a(399),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:a(343),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:a(366),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:a(385),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],A="InvertPass",M=V,L=null;P[a(398)]({view:a(369),label:a(418),options:E,value:""}).on(a(382),(t=>{D=t[a(347)]}));const F=P[a(413)]({title:"新增",label:"新增通道"});let z=0;F.on("click",(t=>{const n=a;A=Object[n(371)](D)[0],M=Object[n(423)](D)[0],L=Object[n(423)](D)[1];let e=z++,o=P[n(373)]({title:A});for(const a in L){let t=L[a];o[n(398)]({view:n(396),label:a,parse:t=>String(t),value:t})}o.addButton({title:n(359)+e,label:"关闭通道"}).on(n(361),(t=>{const e=n;let o=t[e(367)].title[e(374)]("~")[1];w[e(344)](o)})).on(n(361),(()=>{o[n(380)]()}));let r=C(L,t[n(367)][n(376)],t[n(347)]);w[n(365)](A,M,r,e)})),w[a(354)](c.value,l[a(347)]);const{onLoop:T}=n();return T((({delta:t})=>{const n=a;U&&(c.value[n(378)]=!0,w[n(350)](),U[n(411)]=S,w.render(u.value,l.value),w[n(360)](),w[n(397)](u.value,l[n(347)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),$=K;!function(t,n){const e=K,o=Y();for(;;)try{if(442616===parseInt(e(333))/1*(parseInt(e(343))/2)+parseInt(e(330))/3*(-parseInt(e(357))/4)+-parseInt(e(350))/5+parseInt(e(329))/6*(-parseInt(e(361))/7)+-parseInt(e(349))/8*(-parseInt(e(337))/9)+parseInt(e(367))/10*(-parseInt(e(341))/11)+parseInt(e(363))/12*(parseInt(e(332))/13))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[K(347)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function K(t,n){const e=Y();return(K=function(t,n){return e[t-=326]})(t,n)}function Y(){const t=["2171HEQayI","4aTDXOJ","input","string","#ffffff","2439VIdGSK","constructor","stateObject","test","3432mlKmvv","#000000","165418MqwwjP","TresAmbientLight","toString","console","apply","exception","8328GxAvyl","3742695letvji","init","call","info","counter","table","length","448QAPsxu",'{}.constructor("return this")( )',"perspectiveCameraRef","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","7SIJPFb","while (true) {}","123972vjNXjF","chain","debu","log","5300lPeoWS","prototype","trace","gger","2820558srYXvO","13704LHnbsn","bind"];return(Y=function(){return t})()}!function(){Q(this,(function(){const t=K,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(360),"i"),o=ot(t(351));n[t(340)](o+t(364))&&e[t(340)](o+t(334))?ot():o("0")}))()}();const tt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();tt(void 0,(function(){const t=K,n=function(){const t=K;let n;try{n=Function("return (function() "+t(358)+");")()}catch(e){n=window}return n}(),e=n[t(346)]=n.console||{},o=[t(366),"warn",t(353),"error",t(348),t(355),t(327)];for(let r=0;r<o[t(356)];r++){const n=tt[t(338)][t(326)][t(331)](tt),a=o[r],s=e[a]||n;n.__proto__=tt[t(331)](tt),n[t(345)]=s.toString.bind(s),e[a]=n}}))();const nt={ref:$(359),position:[600,850,-1500],fov:45,near:.1,far:1e5},et=m({__name:"postProcessingEditor",setup(t){const e=$,r={clearColor:e(342),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:"manual"},a={autoRotate:!0,enableDamping:!0},{onLoop:s}=n();return s((({delta:t})=>{})),(t,n)=>{const s=e,i=x("TresCanvas");return h(),y(i,D(r,{"window-size":""}),{default:I((()=>[b("TresPerspectiveCamera",nt,null,512),_(S(o),U(w(a)),null,16),n[0]||(n[0]=b(s(344),{color:s(336),intensity:2},null,-1)),n[1]||(n[1]=b("TresDirectionalLight",{position:[100,100,0],intensity:2,color:s(336)},null,-1)),(h(),y(P,null,{default:I((()=>[_(Z)])),_:1}))])),_:1},16)}}});function ot(t){function n(t){const e=K;if(typeof t===e(335))return function(t){}[e(338)](e(362)).apply(e(354));1!==(""+t/t).length||t%20==0?function(){return!0}[e(338)](e(365)+e(328))[e(352)]("action"):function(){return!1}[e(338)]("debugger")[e(347)](e(339)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{et as default};
