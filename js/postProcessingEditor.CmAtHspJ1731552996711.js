import{m as t,e as n,b as e,U as o}from"./@tresjs.01P8tiuF1731552996711.js";import{k as r,Y as s,_ as a,as as i,q as c,s as l,n as u,W as v,bW as f,bn as p}from"./three.KG0QRRig1731552996711.js";import{P as d}from"./tweakpane.yHWGBmom1731552996711.js";import{d as m,a6 as g,e as x,o as h,f as y,g as I,J as b,j as _,u as S,aj as U,ak as w,al as P,m as E}from"./@vue.-THQH3GC1731552996711.js";import{_ as D}from"./@fesjs.ffiiLppw1731552996711.js";import"./@vueuse.YduQ9gvc1731552996711.js";import"./vue-router.4ictOE9I1731552996711.js";import"./lodash-es.kYt-_xTG1731552996711.js";import"./@qlin.yHhFDldE1731552996711.js";import"./pinia.Yf0ZNVo31731552996711.js";import"./vue-demi.C4xddsk91731552996711.js";import"./@floating-ui.BPbuo5Gx1731552996711.js";import"./@juggle.7yjBMqoW1731552996711.js";!function(t,n){const e=z,o=M();for(;;)try{if(205879===parseInt(e(307))/1*(-parseInt(e(373))/2)+-parseInt(e(315))/3*(parseInt(e(339))/4)+parseInt(e(323))/5+-parseInt(e(340))/6+-parseInt(e(319))/7+parseInt(e(350))/8*(-parseInt(e(344))/9)+parseInt(e(324))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[z(354)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function M(){const t=["Vector4","function *\\( *\\)","Vector2","table","object","10839gLUISc","while (true) {}","value","onload","1740655Pjbpve","index","Matrix2","open","1715385AHdYzn","9078760thXjPV","log","console","responseText","hasOwnProperty","random","exec","error",'{}.constructor("return this")( )',"type","\" couldn't be loaded.","now","isArray","send","bind","164ECMnmf","1131270qZccrU","ShaderMaterial","return (function() ","message","14562eRerou","trace","__proto__","Texture","Vector3","debu","280nrkJXG","call","input","string","apply","Matrix4","Matrix3","constructor","prototype","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","WagnerLoadShaderException","gger","chain",'Shader "',"toString","exception","counter","warn","lastIndex","v3v","action","name","init","18iZtmdb",'" load was aborted.',"44789MZAZzP","test","get"];return(M=function(){return t})()}!function(){A(this,(function(){const t=z,n=new RegExp(t(311)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=F(t(372));n.test(o+t(362))&&e[t(308)](o+t(352))?F():o("0")}))()}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[z(354)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function z(t,n){const e=M();return(z=function(t,n){return e[t-=307]})(t,n)}L(void 0,(function(){const t=z,n=function(){const t=z;let n;try{n=Function(t(342)+t(332)+");")()}catch(e){n=window}return n}(),e=n[t(326)]=n[t(326)]||{},o=[t(325),t(367),"info",t(331),t(365),t(313),t(345)];for(let r=0;r<o.length;r++){const n=L[t(357)][t(358)][t(338)](L),s=o[r],a=e[s]||n;n[t(346)]=L.bind(L),n[t(364)]=a[t(364)].bind(a),e[s]=n}}))();function C(t,n,e){const o=z;if(typeof t!==o(314)||null===t)return t;const r=Array[o(336)](t)?[]:{};for(const s in t)t[o(328)](s)&&(r[s]=C(t[s])),s==n&&(r[n]=e);return r}function F(t){function n(t){const e=z;if(typeof t===e(353))return function(t){}[e(357)](e(316))[e(354)](e(366));1!==(""+t/t).length||t%20==0?function(){return!0}[e(357)](e(349)+e(361))[e(351)](e(370)):function(){return!1}[e(357)](e(349)+e(361))[e(354)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const T=R;!function(t,n){const e=R,o=j();for(;;)try{if(684832===parseInt(e(506))/1+parseInt(e(525))/2*(-parseInt(e(546))/3)+-parseInt(e(510))/4+-parseInt(e(508))/5+parseInt(e(520))/6*(parseInt(e(568))/7)+-parseInt(e(534))/8*(-parseInt(e(589))/9)+-parseInt(e(499))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const N=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){N(this,(function(){const t=R,n=new RegExp(t(559)),e=new RegExp(t(514),"i"),o=O("init");n[t(497)](o+"chain")&&e[t(497)](o+"input")?O():o("0")}))()}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(532)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function R(t,n){const e=j();return(R=function(t,n){return e[t-=494]})(t,n)}G(void 0,(function(){const t=R;let n;try{n=Function(t(530)+t(537)+");")()}catch(r){n=window}const e=n[t(577)]=n[t(577)]||{},o=[t(521),t(590),t(582),"error",t(553),"table","trace"];for(let s=0;s<o[t(581)];s++){const n=G[t(565)][t(560)][t(495)](G),r=o[s],a=e[r]||n;n.__proto__=G.bind(G),n.toString=a.toString[t(495)](a),e[r]=n}}))();class B{constructor(t,n){const e=R;this[e(549)]=1,this[e(524)]=1,this[e(554)]=n||{},this[e(528)]=this.settings.useRGBA||!1,this[e(542)]=t,this[e(509)]=this.CopyPass(this.settings),this[e(572)]=new c,this[e(544)]=new l(new(a[e(551)])(1,1),new(a[e(584)])),this[e(572)][e(571)](this[e(544)]),this[e(552)]=new(a[e(545)])(1,1,1,1,-1e4,1e4),this[e(562)]=new(a[e(505)])(1,1,{minFilter:void 0!==this[e(554)][e(500)]?this[e(554)][e(500)]:u,magFilter:void 0!==this[e(554)].magFilter?this[e(554)][e(526)]:a[e(573)],wrapS:void 0!==this[e(554)][e(547)]?this[e(554)].wrapS:a[e(535)],wrapT:void 0!==this[e(554)][e(566)]?this[e(554)][e(566)]:a[e(535)],format:this[e(528)]?a[e(583)]:a[e(580)],type:void 0!==this[e(554)].type?this[e(554)][e(588)]:a[e(527)],stencilBuffer:void 0===this.settings[e(502)]||this[e(554)][e(502)]}),this[e(519)]=this[e(562)].clone(),this.startTime=Date[e(556)](),this[e(561)]={},this.Stack={passItems:[],passes:[]}}[T(578)](t,n,e,o){const r=T;this[r(507)](n);const s={shaderName:t,params:e,uuid:o,shader:this.shader};this.Stack[r(587)][r(540)](s)}removePass(t){const n=T;for(let e=this.Stack[n(587)][n(581)]-1;e>=0;e--)this[n(575)][n(587)][e][n(494)]===parseInt(t)&&this[n(575)][n(587)][n(555)](e,1);console[n(521)](this[n(575)].passItems)}[T(536)](){const t=T;this[t(574)][t(570)](this);return this[t(507)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[T(507)](t){const n=T,e=n(550);return this[n(541)]=function(t,n){const e=z,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,c=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,l={sampler2D:{type:"t",value:()=>new(a[z(347)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(a[z(312)])},vec3:{type:"v3",value:()=>new(a[z(348)])},vec4:{type:"v4",value:()=>new(a[z(310)])},bvec2:{type:"v2",value:()=>new(a[z(312)])},bvec3:{type:"v3",value:()=>new(a[z(348)])},bvec4:{type:"v4",value:()=>new(a[z(310)])},ivec2:{type:"v2",value:()=>new(a[z(312)])},ivec3:{type:"v3",value:()=>new(a[z(348)])},ivec4:{type:"v4",value:()=>new i},mat2:{type:"v2",value:()=>new(a[z(321)])},mat3:{type:"v3",value:()=>new(a[z(356)])},mat4:{type:"v4",value:()=>new(a[z(355)])}},u={float:{type:"fv",value:()=>[]},vec3:{type:e(369),value:()=>[]}};let v;const f={resolution:{type:"v2",value:new r(1,1),default:!0},time:{type:"f",value:Date[e(335)](),default:!0},tInput:{type:"t",value:new s,default:!0}};let p,d;for(;null!==(v=o[e(330)](n));)v[e(320)]===o[e(368)]&&o[e(368)]++,p=v[1],d=v[2],f[d]={type:l[p][e(333)],value:l[p][e(317)]()};for(;null!==(v=c[e(330)](n));)v.index===o[e(368)]&&o[e(368)]++,p=v[1],d=v[2],v[3],f[d]={type:u[p][e(333)],value:u[p].value()};return new(a[e(341)])({uniforms:f,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this.shader}[T(574)](t){const n=T;this[n(541)]=null,this[n(533)]={}}[T(517)](){const t=T;this[t(564)]=this.front,this[t(543)]=this[t(519)]}[T(557)](t,n){const e=T,o=window[e(529)],r=window[e(522)];t.setSize(1*o,1*r),n[e(567)][e(569)](70,o/r,n[e(511)],n[e(591)]),this[e(496)](o,r);return this.getOfflineTexture(o,r,!0)}setSize(t,n){const e=T;this[e(549)]=t,this[e(524)]=n,this[e(552)].projectionMatrix[e(523)](t/-2,t/2,n/2,n/-2,this[e(552)][e(511)],this.camera.far),this.quad.scale.set(t,n,1),this.front[e(496)](t,n),this[e(519)][e(496)](t,n)}getOfflineTexture(t,n,e){const o=T;return new v(t,n,{minFilter:a[o(573)],magFilter:u,format:e?a[o(583)]:a[o(580)]})}render(t,n,e,o){const r=T;this.renderer.setRenderTarget(this[r(543)]),this[r(542)].render(t,n),o||this[r(585)]()}[T(585)](){const t=T,n=this[t(543)];this.write=this[t(564)],this[t(564)]=n}pass(){const t=T;for(let n=0;n<this[t(575)][t(587)][t(581)];n++){const e=this[t(575)][t(587)][n].shader,o=this[t(575)].passItems[n][t(533)];if(this[t(542)][t(586)](this[t(543)]),e instanceof a[t(548)]){this[t(544)][t(576)]=e,this[t(544)][t(576)].uniforms[t(515)].value=this[t(564)][t(558)],this[t(544)][t(576)][t(579)].resolution[t(504)].set(this[t(549)],this[t(524)]),this.quad.material[t(579)][t(539)][t(504)]=.001*(Date[t(556)]()-this[t(538)]);for(const n in o)this[t(544)][t(576)][t(579)][n][t(504)]=o[n];this[t(542)][t(518)](this[t(572)],this[t(552)]),this.swapBuffers()}}}toScreen(t,n){const e=T;this.renderer[e(586)](null),this[e(544)][e(576)]=this.copyPass,this[e(544)][e(576)][e(579)][e(515)][e(504)]=this[e(564)].texture,this[e(544)][e(576)][e(579)][e(503)].value[e(563)](this[e(549)],this.height),this[e(542)][e(518)](this[e(572)],this.camera)}}function j(){const t=["params","9737648IgYHJI","ClampToEdgeWrapping","CopyPass",'{}.constructor("return this")( )',"startTime","time","push","shader","renderer","write","quad","OrthographicCamera","2267295iASGTl","wrapS","ShaderMaterial","width","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","PlaneGeometry","camera","exception","settings","splice","now","onWindowResize","texture","function *\\( *\\)","prototype","passes","front","set","read","constructor","wrapT","projectionMatrix","70LLkGor","makePerspective","call","add","scene","LinearFilter","Pass","Stack","material","console","addPass","uniforms","RGBFormat","length","info","RGBAFormat","MeshBasicMaterial","swapBuffers","setRenderTarget","passItems","type","9rgkvoU","warn","far","uuid","bind","setSize","test","action","5015320LXCJna","minFilter","gger","stencilBuffer","resolution","value","WebGLRenderTarget","849784UkXnIr","loadShadervf","2676175qTxdXG","copyPass","781744JQSsri","near","debu","while (true) {}","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","tInput","counter","Reset","render","back","363486UdSKxW","log","innerHeight","makeOrthographic","height","2vKPziy","magFilter","UnsignedByteType","useRGBA","innerWidth","return (function() ","stateObject","apply"];return(j=function(){return t})()}function O(t){function n(t){const e=R;if("string"==typeof t)return function(t){}[e(565)](e(513))[e(532)](e(516));1!==(""+t/t)[e(581)]||t%20==0?function(){return!0}.constructor(e(512)+e(501))[e(570)](e(498)):function(){return!1}[e(565)](e(512)+e(501)).apply(e(531)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const V="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",H=q;!function(t,n){const e=q,o=X();for(;;)try{if(820640===parseInt(e(190))/1+parseInt(e(223))/2*(-parseInt(e(234))/3)+parseInt(e(189))/4+parseInt(e(239))/5*(parseInt(e(187))/6)+-parseInt(e(195))/7+-parseInt(e(163))/8+parseInt(e(182))/9*(parseInt(e(200))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const k=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(243)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){k(this,(function(){const t=q,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(177),"i"),o=Z(t(211));n.test(o+t(188))&&e[t(180)](o+t(196))?Z():o("0")}))()}();const W=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(243)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function X(){const t=["dispose","constructor","add","plugins/postProcessing/image/1324.jpg","value","call","863448UnAmeK","keys","map","后处理类型","text","addFolder","CIRCULARPass","error","SNOISEPass","Reset","addButton","3KcYjIb","SOBELPass","autoClearColor","push","TOONPass","2701670ggCHIv","receiveShadow","DENOISEPass","random","apply","InvertPass","toString","target",'{}.constructor("return this")( )',"POISSONPass","log","5470880MmolOZ","removePass","table","return (function() ","debu","RGBPass","onWindowResize","FREICHENPass","castShadow","bind","plugins/postProcessing/image/1324-normal.jpg","addPass","toScreen","trace","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","addBlade","BoxGeometry","test","SEPIAPass","33309HAEMuw","warn","action","gger","prototype","6EnXhbW","chain","2137872FaQCBd","1345572czPHPO","关闭通道","FXAAPass","title","console","6860588dJtNcY","input","CGAPass","__proto__","新增通道","1340VODmVA","render","stateObject","length","click","label","mergeGeometries","移除~","string","list","BOXBLURPass","init","BufferGeometry","split","info","counter","postProcessing"];return(X=function(){return t})()}function q(t,n){const e=X();return(q=function(t,n){return e[t-=158]})(t,n)}W(void 0,(function(){const t=q,n=function(){const t=q;let n;try{n=Function(t(166)+t(160)+");")()}catch(e){n=window}return n}(),e=n[t(194)]=n[t(194)]||{},o=[t(162),t(183),t(214),t(230),"exception",t(165),t(176)];for(let r=0;r<o[t(203)];r++){const n=W.constructor[t(186)].bind(W),s=o[r],a=e[s]||n;n[t(198)]=W[t(172)](W),n.toString=a[t(158)].bind(a),e[s]=n}}))();function Z(t){function n(t){const e=q;if(typeof t===e(208))return function(t){}[e(218)]("while (true) {}")[e(243)](e(215));1!==(""+t/t).length||t%20==0?function(){return!0}.constructor("debu"+e(185))[e(222)](e(184)):function(){return!1}[e(218)](e(167)+e(185))[e(243)](e(202)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const $=D(m({__name:H(216),async setup(o){const s=H;let i,c;const{camera:u,renderer:v,scene:m,sizes:x}=t();for(var h=new(a[s(212)]),y=[],I=0;I<100;I++){var b=new(a[s(179)])(100,100,100);b.translate(1500*Math[s(242)](),1500*Math[s(242)](),1500*Math[s(242)]()),y[s(237)](b)}h=f[s(206)](y);const _=([i,c]=g((()=>e({map:s(220)}))),i=await i,c(),i),S=([i,c]=g((()=>e({map:s(173)}))),i=await i,c(),i);var U=new p({map:_.map,normalMap:S[s(225)],normalScale:new r(.8,-.8),shininess:100}),w=new l(h,U);w[s(171)]=!0,w[s(240)]=!0,m[s(221)][s(219)](w);const P=new B(v[s(221)],{useRGBA:!0}),E=new d;let D=null,A=[{text:"InvertPass",value:{InvertPass:V}},{text:s(192),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:s(181),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:s(231),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:s(210),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:s(241),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:s(197),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:S.map}}},{text:s(235),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:s(168),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:"DOTPass",value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(229),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:s(161),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:"VIGNETTE1Pass",value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:"VIGNETTE2Pass",value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:s(170),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:s(238),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],M=s(244),L=V,z=null;E[s(178)]({view:s(209),label:s(226),options:A,value:""}).on("change",(t=>{D=t[s(221)]}));const F=E[s(233)]({title:"新增",label:s(199)});let T=0;F.on(s(204),(t=>{const n=s;M=Object[n(224)](D)[0],L=Object.values(D)[0],z=Object.values(D)[1];let e=T++,o=E[n(228)]({title:M});for(const s in z){let t=z[s];o[n(178)]({view:n(227),label:s,parse:t=>String(t),value:t})}o.addButton({title:n(207)+e,label:n(191)}).on(n(204),(t=>{const e=n;let o=t[e(159)][e(193)][e(213)]("~")[1];P[e(164)](o)})).on(n(204),(()=>{o[n(217)]()}));let r=C(z,t[n(159)][n(205)],t.value);P[n(174)](M,L,r,e)})),P[s(169)](v.value,u[s(221)]);const{onLoop:N}=n();return N((({delta:t})=>{const n=s;w&&(v[n(221)][n(236)]=!0,P[n(232)](),w.material=U,P[n(201)](m[n(221)],u[n(221)]),P.pass(),P[n(175)](m[n(221)],u[n(221)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),J=Y;!function(t,n){const e=Y,o=Q();for(;;)try{if(367558===-parseInt(e(170))/1+-parseInt(e(181))/2*(-parseInt(e(183))/3)+parseInt(e(180))/4*(parseInt(e(182))/5)+parseInt(e(169))/6*(-parseInt(e(164))/7)+-parseInt(e(193))/8+parseInt(e(204))/9+-parseInt(e(174))/10*(-parseInt(e(186))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const K=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Y(175)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function Y(t,n){const e=Q();return(Y=function(t,n){return e[t-=163]})(t,n)}function Q(){const t=["TresCanvas","constructor","bind","counter","#ffffff","exception","4196672XmUAsk","debu","test","call","length","chain","manual","TresDirectionalLight","toString","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","info","4834287UcGzEJ","TresPerspectiveCamera","693AhCMLx","action","error","gger","__proto__","39834RnzKiI","38649MgWzEZ","string","postProcessingEditor","log","990130ynVTAg","apply","init","table","while (true) {}","warn","3928lZNnyB","2oRKZze","430MyLUiX","226020mdIHkU","input","function *\\( *\\)","99sdSpnK"];return(Q=function(){return t})()}!function(){K(this,(function(){const t=Y,n=new RegExp(t(185)),e=new RegExp(t(202),"i"),o=ot(t(176));n[t(195)](o+t(198))&&e.test(o+t(184))?ot():o("0")}))()}();const tt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Y(175)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();tt(void 0,(function(){const t=Y;let n;try{n=Function('return (function() {}.constructor("return this")( ));')()}catch(r){n=window}const e=n.console=n.console||{},o=[t(173),t(179),t(203),t(166),t(192),t(177),"trace"];for(let s=0;s<o[t(197)];s++){const n=tt[t(188)].prototype[t(189)](tt),r=o[s],a=e[r]||n;n[t(168)]=tt[t(189)](tt),n[t(201)]=a[t(201)][t(189)](a),e[r]=n}}))();const nt={ref:"perspectiveCameraRef",position:[600,850,-1500],fov:45,near:.1,far:1e5},et=m({__name:J(172),setup(t){const e=J,r={clearColor:"#000000",shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(199)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=x(a(187));return h(),y(i,E(r,{"window-size":""}),{default:I((()=>[b(a(163),nt,null,512),_(S(o),U(w(s)),null,16),n[0]||(n[0]=b("TresAmbientLight",{color:a(191),intensity:2},null,-1)),n[1]||(n[1]=b(a(200),{position:[100,100,0],intensity:2,color:a(191)},null,-1)),(h(),y(P,null,{default:I((()=>[_($)])),_:1}))])),_:1},16)}}});function ot(t){function n(t){const e=Y;if(typeof t===e(171))return function(t){}[e(188)](e(178))[e(175)](e(190));1!==(""+t/t)[e(197)]||t%20==0?function(){return!0}[e(188)](e(194)+e(167))[e(196)](e(165)):function(){return!1}.constructor(e(194)+e(167))[e(175)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{et as default};
