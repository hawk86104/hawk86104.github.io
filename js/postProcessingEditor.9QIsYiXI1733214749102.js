import{m as t,e as n,b as e,U as o}from"./@tresjs.lftldzUe1733214749102.js";import{k as r,Y as s,m as a,_ as i,V as c,as as l,t as u,n as v,cM as f,bW as p}from"./three.aWgA1gea1733214749102.js";import{P as d}from"./tweakpane.yHWGBmom1733214749102.js";import{d as m,a6 as g,e as x,o as h,f as y,g as I,J as b,j as _,u as S,aj as U,ak as w,al as P,m as D}from"./@vue.-THQH3GC1733214749102.js";import{_ as E}from"./@fesjs.Of4PiCSw1733214749102.js";import"./@vueuse.xtU2GBMi1733214749102.js";import"./vue-router.lCq72hq_1733214749102.js";import"./lodash-es.kYt-_xTG1733214749102.js";import"./@qlin.yHhFDldE1733214749102.js";import"./pinia.YZvRaeWc1733214749102.js";import"./vue-demi.C4xddsk91733214749102.js";import"./@floating-ui.BPbuo5Gx1733214749102.js";import"./@juggle.7yjBMqoW1733214749102.js";!function(t,n){const e=C,o=M();for(;;)try{if(340269===-parseInt(e(535))/1*(parseInt(e(486))/2)+parseInt(e(534))/3+-parseInt(e(496))/4+-parseInt(e(483))/5*(-parseInt(e(525))/6)+parseInt(e(492))/7*(parseInt(e(507))/8)+parseInt(e(514))/9+-parseInt(e(499))/10*(parseInt(e(521))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(505)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function M(){const t=["exec","Texture","1728180KjmYXr","constructor","responseText","64CYLQcs","trace","init","gger","bind","open","21JitqLj","now","send","prototype","495732FzMmkS",'Shader "',"Vector4","10447110kzBwOY","name","exception","type","length","return (function() ","apply","Matrix2","1555664swwGHA","chain","log","index","v3v","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx",'" load was aborted.',"3115674fTVLMP","onabort","Matrix4","Vector3","isArray","Matrix3","\" couldn't be loaded.","11amDyPc","test","__proto__","counter","6fowItL","WagnerLoadShaderException","message","get","action","input","lastIndex","value","error","1202847ALnAFO","5226moUjCj","toString","Vector2","info","stateObject","console"];return(M=function(){return t})()}!function(){L(this,(function(){const t=C,n=new RegExp("function *\\( *\\)"),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=z(t(488));n[t(522)](o+t(508))&&e[t(522)](o+t(530))?z():o("0")}))()}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(505)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function C(t,n){const e=M();return(C=function(t,n){return e[t-=480]})(t,n)}A(void 0,(function(){const t=C,n=function(){const t=C;let n;try{n=Function(t(504)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(480)]=n.console||{},o=[t(509),"warn",t(538),t(533),t(501),"table",t(487)];for(let r=0;r<o[t(503)];r++){const n=A.constructor[t(495)].bind(A),s=o[r],a=e[s]||n;n[t(523)]=A[t(490)](A),n.toString=a.toString[t(490)](a),e[s]=n}}))();function F(t,n,e){if("object"!=typeof t||null===t)return t;const o=Array[C(518)](t)?[]:{};for(const r in t)t.hasOwnProperty(r)&&(o[r]=F(t[r])),r==n&&(o[n]=e);return o}function z(t){function n(t){const e=C;if("string"==typeof t)return function(t){}[e(484)]("while (true) {}")[e(505)](e(524));1!==(""+t/t)[e(503)]||t%20==0?function(){return!0}[e(484)]("debu"+e(489)).call(e(529)):function(){return!1}.constructor("debu"+e(489))[e(505)](e(539)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const T=j;!function(t,n){const e=j,o=B();for(;;)try{if(426344===parseInt(e(433))/1*(parseInt(e(461))/2)+-parseInt(e(456))/3+-parseInt(e(373))/4+parseInt(e(376))/5*(parseInt(e(391))/6)+parseInt(e(442))/7*(-parseInt(e(462))/8)+-parseInt(e(392))/9*(-parseInt(e(467))/10)+parseInt(e(375))/11*(parseInt(e(423))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const N=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){N(this,(function(){const t=j,n=new RegExp(t(403)),e=new RegExp(t(397),"i"),o=V(t(400));n[t(457)](o+t(430))&&e[t(457)](o+"input")?V():o("0")}))()}();const R=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[j(371)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function B(){const t=["Mesh","2866610pjrmgm","WebGLRenderTarget","wrapT","push","makePerspective","ClampToEdgeWrapping","apply","info","2105076YKVgPA","console","1441YSmEhC","125EmdLsB","back","CopyPass","camera","width","read","__proto__","call","projectionMatrix","exception","quad","wrapS","addPass","passItems","Pass","131430SVfXfZ","9KMTLRo","front","texture","removePass","error","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","UnsignedByteType","settings","init","copyPass","prototype","function *\\( *\\)","innerWidth","height","magFilter","value","params","trace","far","action","length","now","material","table","splice","Scene","near","stateObject","log","makeOrthographic","OrthographicCamera","68268EdRReG","swapBuffers","loadShadervf","minFilter","uniforms","shader","useRGBA","chain","onWindowResize","string","2iCFbxu","innerHeight","time","renderer","Reset","bind",'{}.constructor("return this")( )',"Stack","scale","647829SdNiyU","startTime","MeshBasicMaterial","write","toString","stencilBuffer","debu","set","gger","scene","getOfflineTexture","setRenderTarget","setSize","LinearFilter","152295qWXUWD","test","passes","type","resolution","256756NzYwFJ","72yqnVbg","render","warn","RGBAFormat"];return(B=function(){return t})()}R(void 0,(function(){const t=j,n=function(){const t=j;let n;try{n=Function("return (function() "+t(439)+");")()}catch(e){n=window}return n}(),e=n[t(374)]=n[t(374)]||{},o=["log",t(464),t(372),t(396),t(385),t(415),t(409)];for(let r=0;r<o[t(412)];r++){const n=R.constructor[t(402)][t(438)](R),s=o[r],a=e[s]||n;n[t(382)]=R[t(438)](R),n[t(446)]=a.toString[t(438)](a),e[s]=n}}))();class G{constructor(t,n){const e=j;this[e(380)]=1,this[e(405)]=1,this[e(399)]=n||{},this[e(429)]=this[e(399)][e(429)]||!1,this[e(436)]=t,this[e(401)]=this[e(378)](this[e(399)]),this[e(451)]=new(i[e(417)]),this.quad=new(i[e(466)])(new u(1,1),new(i[e(444)])),this[e(451)].add(this.quad),this[e(379)]=new(i[e(422)])(1,1,1,1,-1e4,1e4),this.front=new(i[e(468)])(1,1,{minFilter:void 0!==this[e(399)][e(426)]?this.settings[e(426)]:i[e(455)],magFilter:void 0!==this[e(399)].magFilter?this[e(399)][e(406)]:v,wrapS:void 0!==this[e(399)][e(387)]?this[e(399)].wrapS:i[e(472)],wrapT:void 0!==this[e(399)][e(469)]?this[e(399)][e(469)]:i[e(472)],format:this[e(429)]?i[e(465)]:f,type:void 0!==this[e(399)][e(459)]?this[e(399)][e(459)]:i[e(398)],stencilBuffer:void 0===this[e(399)][e(447)]||this.settings[e(447)]}),this[e(377)]=this.front.clone(),this[e(443)]=Date[e(413)](),this[e(458)]={},this.Stack={passItems:[],passes:[]}}[T(388)](t,n,e,o){const r=T;this[r(425)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(428)]};this[r(440)][r(389)][r(470)](s)}[T(395)](t){const n=T;for(let e=this[n(440)][n(389)][n(412)]-1;e>=0;e--)this[n(440)].passItems[e].uuid===parseInt(t)&&this[n(440)][n(389)][n(416)](e,1);console[n(420)](this[n(440)][n(389)])}CopyPass(){const t=T;this[t(390)][t(383)](this);return this[t(425)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}loadShadervf(t){return this[T(428)]=function(t,n){const e=C,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,u=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,v={sampler2D:{type:"t",value:()=>new(i[C(482)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(i[C(537)])},vec3:{type:"v3",value:()=>new c},vec4:{type:"v4",value:()=>new(i[C(498)])},bvec2:{type:"v2",value:()=>new(i[C(537)])},bvec3:{type:"v3",value:()=>new(i[C(517)])},bvec4:{type:"v4",value:()=>new(i[C(498)])},ivec2:{type:"v2",value:()=>new(i[C(537)])},ivec3:{type:"v3",value:()=>new(i[C(517)])},ivec4:{type:"v4",value:()=>new l},mat2:{type:"v2",value:()=>new(i[C(506)])},mat3:{type:"v3",value:()=>new(i[C(519)])},mat4:{type:"v4",value:()=>new(i[C(516)])}},f={float:{type:"fv",value:()=>[]},vec3:{type:e(511),value:()=>[]}};let p;const d={resolution:{type:"v2",value:new r(1,1),default:!0},time:{type:"f",value:Date[e(493)](),default:!0},tInput:{type:"t",value:new s,default:!0}};let m,g;for(;null!==(p=o[e(481)](n));)p.index===o[e(531)]&&o[e(531)]++,m=p[1],g=p[2],d[g]={type:v[m][e(502)],value:v[m].value()};for(;null!==(p=u[e(481)](n));)p[e(510)]===o.lastIndex&&o.lastIndex++,m=p[1],g=p[2],p[3],d[g]={type:f[m][e(502)],value:f[m][e(532)]()};return new a({uniforms:d,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}("varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }",t),this.shader}[T(390)](t){const n=T;this[n(428)]=null,this[n(408)]={}}[T(437)](){const t=T;this[t(381)]=this.front,this[t(445)]=this[t(377)]}[T(431)](t,n){const e=T,o=window[e(404)],r=window[e(434)];t[e(454)](1*o,1*r),n.projectionMatrix[e(471)](70,o/r,n[e(418)],n.far),this[e(454)](o,r);return this[e(452)](o,r,!0)}[T(454)](t,n){const e=T;this[e(380)]=t,this[e(405)]=n,this[e(379)][e(384)][e(421)](t/-2,t/2,n/2,n/-2,this[e(379)].near,this[e(379)][e(410)]),this[e(386)][e(441)][e(449)](t,n,1),this[e(393)][e(454)](t,n),this[e(377)][e(454)](t,n)}getOfflineTexture(t,n,e){const o=T;return new(i[o(468)])(t,n,{minFilter:i[o(455)],magFilter:i[o(455)],format:e?i[o(465)]:f})}[T(463)](t,n,e,o){const r=T;this.renderer[r(453)](this[r(445)]),this[r(436)].render(t,n),o||this.swapBuffers()}[T(424)](){const t=T,n=this[t(445)];this.write=this[t(381)],this[t(381)]=n}pass(){const t=T;for(let n=0;n<this.Stack[t(389)][t(412)];n++){const e=this[t(440)][t(389)][n][t(428)],o=this[t(440)].passItems[n][t(408)];if(this[t(436)][t(453)](this[t(445)]),e instanceof a){this[t(386)][t(414)]=e,this.quad[t(414)][t(427)].tInput[t(407)]=this[t(381)][t(394)],this[t(386)].material[t(427)].resolution.value[t(449)](this[t(380)],this[t(405)]),this.quad[t(414)][t(427)][t(435)][t(407)]=.001*(Date[t(413)]()-this.startTime);for(const n in o)this.quad[t(414)][t(427)][n][t(407)]=o[n];this[t(436)].render(this.scene,this.camera),this[t(424)]()}}}toScreen(t,n){const e=T;this[e(436)].setRenderTarget(null),this[e(386)].material=this[e(401)],this.quad[e(414)][e(427)].tInput[e(407)]=this[e(381)].texture,this[e(386)][e(414)][e(427)][e(460)][e(407)][e(449)](this[e(380)],this[e(405)]),this[e(436)][e(463)](this[e(451)],this[e(379)])}}function j(t,n){const e=B();return(j=function(t,n){return e[t-=371]})(t,n)}function V(t){function n(t){const e=j;if(typeof t===e(432))return function(t){}.constructor("while (true) {}").apply("counter");1!==(""+t/t).length||t%20==0?function(){return!0}.constructor(e(448)+"gger")[e(383)](e(411)):function(){return!1}.constructor("debu"+e(450)).apply(e(419)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const O="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",k=q;function H(){const t=["3155080jLMzhv","后处理类型","map","text","POISSONPass","BufferGeometry","split","prototype","plugins/postProcessing/image/1324-normal.jpg","constructor","关闭通道","420032uLJdfH","InvertPass","CGAPass","__proto__","translate","pass","Vector2","gger","values","toString","406GOFEge","apply","call","error","MeshPhongMaterial","string","console",'{}.constructor("return this")( )',"VIGNETTE1Pass","mergeGeometries","autoClearColor","addFolder","新增通道","random","log","init","Reset","postProcessing","debu","1884DDYjaz","VIGNETTE2Pass","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","addPass","list","action","warn","value","while (true) {}","click","label","BoxGeometry","function *\\( *\\)","SNOISEPass","target","移除~","TOONPass","chain","FXAAPass","9tfBetf","bind","2901535CkbrpP","378778ugKXxD","1893040ckOhAF","SEPIAPass","render","test","FREICHENPass","length","input","8511534GCaMWo","return (function() ","BOXBLURPass","counter","SOBELPass","receiveShadow","Mesh","info","trace","material","dispose"];return(H=function(){return t})()}!function(t,n){const e=q,o=H();for(;;)try{if(311599===parseInt(e(479))/1+-parseInt(e(449))/2*(-parseInt(e(446))/3)+parseInt(e(450))/4+-parseInt(e(448))/5+parseInt(e(508))/6*(-parseInt(e(489))/7)+parseInt(e(468))/8+-parseInt(e(457))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const W=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(490)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){W(this,(function(){const t=q,n=new RegExp(t(439)),e=new RegExp(t(510),"i"),o=Y(t(504));n[t(453)](o+t(444))&&e.test(o+t(456))?Y():o("0")}))()}();const X=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(490)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function q(t,n){const e=H();return(q=function(t,n){return e[t-=432]})(t,n)}X(void 0,(function(){const t=q;let n;try{n=Function(t(458)+t(496)+");")()}catch(r){n=window}const e=n.console=n[t(495)]||{},o=[t(503),t(433),t(464),t(492),"exception","table",t(465)];for(let s=0;s<o[t(455)];s++){const n=X[t(477)][t(475)][t(447)](X),r=o[s],a=e[r]||n;n[t(482)]=X[t(447)](X),n[t(488)]=a[t(488)][t(447)](a),e[r]=n}}))();function Y(t){function n(t){const e=q;if(typeof t===e(494))return function(t){}.constructor(e(435))[e(490)](e(460));1!==(""+t/t)[e(455)]||t%20==0?function(){return!0}.constructor(e(507)+e(486))[e(491)](e(432)):function(){return!1}[e(477)](e(507)+"gger")[e(490)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const Z=E(m({__name:k(506),async setup(o){const r=k;let s,a;const{camera:c,renderer:l,scene:u,sizes:v}=t();for(var f=new(i[r(473)]),m=[],x=0;x<100;x++){var h=new(i[r(438)])(100,100,100);h[r(483)](1500*Math[r(502)](),1500*Math.random(),1500*Math.random()),m.push(h)}f=p[r(498)](m);const y=([s,a]=g((()=>e({map:"plugins/postProcessing/image/1324.jpg"}))),s=await s,a(),s),I=([s,a]=g((()=>e({map:r(476)}))),s=await s,a(),s);var b=new(i[r(493)])({map:y[r(470)],normalMap:I.map,normalScale:new(i[r(485)])(.8,-.8),shininess:100}),_=new(i[r(463)])(f,b);_.castShadow=!0,_[r(462)]=!0,u.value.add(_);const S=new G(l.value,{useRGBA:!0}),U=new d;let w=null,P=[{text:r(480),value:{InvertPass:O}},{text:r(445),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:r(451),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:r(440),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:r(459),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:"DENOISEPass",value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:r(481),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:I.map}}},{text:r(461),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:"RGBPass",value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:"DOTPass",value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:"CIRCULARPass",value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:r(472),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:r(497),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:r(509),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:r(454),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:r(443),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],D=r(480),E=O,L=null;U.addBlade({view:r(512),label:r(469),options:P,value:""}).on("change",(t=>{w=t[r(434)]}));const M=U.addButton({title:"新增",label:r(501)});let A=0;M.on(r(436),(t=>{const n=r;D=Object.keys(w)[0],E=Object[n(487)](w)[0],L=Object.values(w)[1];let e=A++,o=U[n(500)]({title:D});for(const r in L){let t=L[r];o.addBlade({view:n(471),label:r,parse:t=>String(t),value:t})}o.addButton({title:n(442)+e,label:n(478)}).on(n(436),(t=>{const e=n;let o=t[e(441)].title[e(474)]("~")[1];S.removePass(o)})).on("click",(()=>{o[n(467)]()}));let s=F(L,t.target[n(437)],t[n(434)]);S[n(511)](D,E,s,e)})),S.onWindowResize(l[r(434)],c[r(434)]);const{onLoop:C}=n();return C((({delta:t})=>{const n=r;_&&(l[n(434)][n(499)]=!0,S[n(505)](),_[n(466)]=b,S[n(452)](u[n(434)],c[n(434)]),S[n(484)](),S.toScreen(u[n(434)],c[n(434)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),$=et;!function(t,n){const e=et,o=tt();for(;;)try{if(637669===-parseInt(e(461))/1*(parseInt(e(477))/2)+parseInt(e(473))/3*(-parseInt(e(476))/4)+-parseInt(e(474))/5+parseInt(e(493))/6+-parseInt(e(490))/7+parseInt(e(472))/8*(parseInt(e(475))/9)+parseInt(e(454))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const J=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[et(479)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){J(this,(function(){const t=et,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(459),"i"),o=ot(t(465));n.test(o+t(467))&&e[t(468)](o+t(464))?ot():o("0")}))()}();const K=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[et(479)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();K(void 0,(function(){const t=et;let n;try{n=Function(t(471)+t(487)+");")()}catch(r){n=window}const e=n[t(486)]=n[t(486)]||{},o=[t(455),t(495),t(458),t(492),t(482),t(478),t(466)];for(let s=0;s<o[t(469)];s++){const n=K[t(496)][t(489)][t(456)](K),r=o[s],a=e[r]||n;n[t(451)]=K.bind(K),n[t(488)]=a[t(488)].bind(a),e[r]=n}}))();const Q={ref:$(457),position:[600,850,-1500],fov:45,near:.1,far:1e5};function tt(){const t=["52UsJmRJ","86UtKYXC","table","apply","stateObject","#ffffff","exception","TresCanvas","gger","#000000","console",'{}.constructor("return this")( )',"toString","prototype","4864545RtcFrn","manual","error","7052358uwIwBi","string","warn","constructor","__proto__","TresAmbientLight","TresDirectionalLight","18016150lHEtGR","log","bind","perspectiveCameraRef","info","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","while (true) {}","21905InrSpR","postProcessingEditor","counter","input","init","trace","chain","test","length","debu","return (function() ","37328orLjgE","171315vpQxiR","5936410duYJrs","2367UBVxLq"];return(tt=function(){return t})()}const nt=m({__name:$(462),setup(t){const e=$,r={clearColor:e(485),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(491)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=x(a(483));return h(),y(i,D(r,{"window-size":""}),{default:I((()=>[b("TresPerspectiveCamera",Q,null,512),_(S(o),U(w(s)),null,16),n[0]||(n[0]=b(a(452),{color:"#ffffff",intensity:2},null,-1)),n[1]||(n[1]=b(a(453),{position:[100,100,0],intensity:2,color:a(481)},null,-1)),(h(),y(P,null,{default:I((()=>[_(Z)])),_:1}))])),_:1},16)}}});function et(t,n){const e=tt();return(et=function(t,n){return e[t-=451]})(t,n)}function ot(t){function n(t){const e=et;if(typeof t===e(494))return function(t){}[e(496)](e(460))[e(479)](e(463));1!==(""+t/t).length||t%20==0?function(){return!0}[e(496)](e(470)+e(484)).call("action"):function(){return!1}.constructor("debu"+e(484)).apply(e(480)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{nt as default};
