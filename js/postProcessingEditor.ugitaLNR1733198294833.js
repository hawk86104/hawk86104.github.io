import{m as t,e as n,b as e,U as o}from"./@tresjs.sklxXn0u1733198294833.js";import{_ as r,V as s,as as a,M as i,s as c,$ as l,W as u,n as v,bY as f,k as p}from"./three.8iJMi2lU1733198294833.js";import{P as d}from"./tweakpane.yHWGBmom1733198294833.js";import{d as m,a6 as g,e as x,o as h,f as y,g as I,J as b,j as _,u as S,aj as U,ak as w,al as P,m as D}from"./@vue.-THQH3GC1733198294833.js";import{_ as E}from"./@fesjs.X1U4uwri1733198294833.js";import"./@vueuse.N_fQXUYA1733198294833.js";import"./vue-router.H2Xo87u11733198294833.js";import"./lodash-es.kYt-_xTG1733198294833.js";import"./@qlin.yHhFDldE1733198294833.js";import"./pinia.ZJJJwhVu1733198294833.js";import"./vue-demi.C4xddsk91733198294833.js";import"./@floating-ui.BPbuo5Gx1733198294833.js";import"./@juggle.7yjBMqoW1733198294833.js";!function(t,n){const e=z,o=M();for(;;)try{if(385999===parseInt(e(440))/1+parseInt(e(428))/2*(-parseInt(e(432))/3)+-parseInt(e(386))/4+parseInt(e(418))/5*(parseInt(e(429))/6)+-parseInt(e(411))/7*(-parseInt(e(414))/8)+parseInt(e(425))/9*(parseInt(e(396))/10)+-parseInt(e(381))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[z(409)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){A(this,(function(){const t=z,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(423),"i"),o=F(t(406));n.test(o+t(385))&&e[t(376)](o+"input")?F():o("0")}))()}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[z(409)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function M(){const t=["value","hasOwnProperty","name","onerror","error","console","get","prototype","replace","10pGTxrA","onload",'" load was aborted.',"stateObject","table","exec","gger","warn","\" couldn't be loaded.","Matrix2","init","Vector2","object","apply","exception","67207rFrEiF","WagnerLoadShaderException","message","496TzULRs","onabort","__proto__","log","5roKhWf","Vector3","Matrix3","random","isArray","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","ShaderMaterial","1832373tAaBrn","action","index","28dumWRo","4028898LsQroL","open",'{}.constructor("return this")( )',"130107MYsizd","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","debu","bind","lastIndex","info","responseText","constructor","513897FnCRFF","test","Texture","v3v",'Shader "',"toString","5840340aHBRKk","type","send","length","chain","1840536UYUyee"];return(M=function(){return t})()}function z(t,n){const e=M();return(z=function(t,n){return e[t-=376]})(t,n)}L(void 0,(function(){const t=z;let n;try{n=Function("return (function() "+t(431)+");")()}catch(r){n=window}const e=n.console=n[t(392)]||{},o=[t(417),t(403),t(437),t(391),t(410),t(400),"trace"];for(let s=0;s<o[t(384)];s++){const n=L.constructor[t(394)].bind(L),r=o[s],a=e[r]||n;n[t(416)]=L[t(435)](L),n.toString=a[t(380)][t(435)](a),e[r]=n}}))();function C(t,n,e){const o=z;if(typeof t!==o(408)||null===t)return t;const r=Array[o(422)](t)?[]:{};for(const s in t)t[o(388)](s)&&(r[s]=C(t[s])),s==n&&(r[n]=e);return r}function F(t){function n(t){const e=z;if("string"==typeof t)return function(t){}[e(439)]("while (true) {}").apply("counter");1!==(""+t/t).length||t%20==0?function(){return!0}[e(439)](e(434)+e(402)).call(e(426)):function(){return!1}[e(439)](e(434)+e(402))[e(409)](e(399)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const T=R;!function(t,n){const e=R,o=G();for(;;)try{if(227566===parseInt(e(558))/1+parseInt(e(537))/2+parseInt(e(520))/3*(-parseInt(e(592))/4)+-parseInt(e(553))/5*(-parseInt(e(510))/6)+-parseInt(e(574))/7*(parseInt(e(501))/8)+parseInt(e(596))/9+parseInt(e(555))/10*(-parseInt(e(565))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const N=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(521)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function R(t,n){const e=G();return(R=function(t,n){return e[t-=497]})(t,n)}function G(){const t=["2514264BvrcAU","scale","settings","read","function *\\( *\\)","CopyPass","string","uniforms","now","6qESPDA","ShaderMaterial","while (true) {}","width","startTime","texture","uuid","__proto__","front","info","255qLKtmy","apply","scene","passes","removePass","passItems","copyPass","minFilter","set","stateObject","splice","projectionMatrix","prototype","camera","shader","toString","log","397822JOSzgU","pass","getOfflineTexture","Scene","loadShadervf","height","innerWidth","material","setSize","params","clone","resolution","back","tInput","RGBAFormat","LinearFilter","1201545ZPzRVM","warn","40010NkjBXp","input","console","446520KpnJzd","magFilter","test","exception","wrapT","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","time","671hvVnUi","value","add","OrthographicCamera","constructor","error","toScreen","quad","return (function() ","7exPGCf","type","Pass","addPass","near","makeOrthographic","Stack","table","Reset","render","innerHeight","makePerspective","UnsignedByteType","ClampToEdgeWrapping","WebGLRenderTarget","debu","write","swapBuffers","19004mHAGwg","call","counter","setRenderTarget","2736045EDUVRJ","gger","useRGBA","renderer","stencilBuffer","wrapS","chain","bind","RGBFormat","PlaneGeometry","length"];return(G=function(){return t})()}!function(){N(this,(function(){const t=R,n=new RegExp(t(505)),e=new RegExp(t(563),"i"),o=V("init");n.test(o+t(602))&&e[t(560)](o+t(556))?V():o("0")}))()}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(521)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();B(void 0,(function(){const t=R;let n;try{n=Function(t(573)+'{}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(557)]=n[t(557)]||{},o=[t(536),t(554),t(519),t(570),t(561),t(581),"trace"];for(let s=0;s<o[t(500)];s++){const n=B.constructor[t(532)].bind(B),r=o[s],a=e[r]||n;n[t(517)]=B[t(497)](B),n.toString=a[t(535)].bind(a),e[r]=n}}))();class j{constructor(t,n){const e=R;this[e(513)]=1,this.height=1,this[e(503)]=n||{},this[e(598)]=this[e(503)][e(598)]||!1,this[e(599)]=t,this[e(526)]=this[e(506)](this[e(503)]),this.scene=new(r[e(540)]),this[e(572)]=new c(new(r[e(499)])(1,1),new l),this.scene[e(567)](this[e(572)]),this[e(533)]=new(r[e(568)])(1,1,1,1,-1e4,1e4),this[e(518)]=new u(1,1,{minFilter:void 0!==this[e(503)].minFilter?this.settings[e(527)]:v,magFilter:void 0!==this[e(503)][e(559)]?this[e(503)][e(559)]:r[e(552)],wrapS:void 0!==this[e(503)][e(601)]?this[e(503)][e(601)]:r[e(587)],wrapT:void 0!==this[e(503)][e(562)]?this[e(503)][e(562)]:r[e(587)],format:this[e(598)]?r[e(551)]:r[e(498)],type:void 0!==this[e(503)][e(575)]?this[e(503)][e(575)]:r[e(586)],stencilBuffer:void 0===this[e(503)].stencilBuffer||this[e(503)][e(600)]}),this[e(549)]=this[e(518)][e(547)](),this[e(514)]=Date[e(509)](),this[e(523)]={},this[e(580)]={passItems:[],passes:[]}}[T(577)](t,n,e,o){const r=T;this[r(541)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(534)]};this[r(580)][r(525)].push(s)}[T(524)](t){const n=T;for(let e=this[n(580)][n(525)][n(500)]-1;e>=0;e--)this[n(580)][n(525)][e][n(516)]===parseInt(t)&&this[n(580)][n(525)][n(530)](e,1);console[n(536)](this[n(580)][n(525)])}CopyPass(){const t=T;this[t(576)][t(593)](this);return this.loadShadervf("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[T(541)](t){const n=T;return this.shader=function(t,n){const e=z,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,c=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,l={sampler2D:{type:"t",value:()=>new(r[z(377)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[z(407)])},vec3:{type:"v3",value:()=>new s},vec4:{type:"v4",value:()=>new a},bvec2:{type:"v2",value:()=>new(r[z(407)])},bvec3:{type:"v3",value:()=>new s},bvec4:{type:"v4",value:()=>new a},ivec2:{type:"v2",value:()=>new(r[z(407)])},ivec3:{type:"v3",value:()=>new(r[z(419)])},ivec4:{type:"v4",value:()=>new a},mat2:{type:"v2",value:()=>new(r[z(405)])},mat3:{type:"v3",value:()=>new(r[z(420)])},mat4:{type:"v4",value:()=>new i}},u={float:{type:"fv",value:()=>[]},vec3:{type:e(378),value:()=>[]}};let v;const f={resolution:{type:"v2",value:new(r[e(407)])(1,1),default:!0},time:{type:"f",value:Date.now(),default:!0},tInput:{type:"t",value:new(r[e(377)]),default:!0}};let p,d;for(;null!==(v=o[e(401)](n));)v.index===o.lastIndex&&o.lastIndex++,p=v[1],d=v[2],f[d]={type:l[p].type,value:l[p][e(387)]()};for(;null!==(v=c[e(401)](n));)v[e(427)]===o.lastIndex&&o[e(436)]++,p=v[1],d=v[2],v[3],f[d]={type:u[p][e(382)],value:u[p][e(387)]()};return new(r[e(424)])({uniforms:f,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}("varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }",t),this[n(534)]}Pass(t){const n=T;this[n(534)]=null,this[n(546)]={}}[T(582)](){const t=T;this[t(504)]=this[t(518)],this.write=this[t(549)]}onWindowResize(t,n){const e=T,o=window[e(543)],r=window[e(584)];t[e(545)](1*o,1*r),n[e(531)][e(585)](70,o/r,n[e(578)],n.far),this[e(545)](o,r);return this.getOfflineTexture(o,r,!0)}[T(545)](t,n){const e=T;this[e(513)]=t,this[e(542)]=n,this[e(533)][e(531)][e(579)](t/-2,t/2,n/2,n/-2,this.camera[e(578)],this[e(533)].far),this[e(572)][e(502)][e(528)](t,n,1),this[e(518)][e(545)](t,n),this[e(549)].setSize(t,n)}[T(539)](t,n,e){const o=T;return new(r[o(588)])(t,n,{minFilter:v,magFilter:v,format:e?r[o(551)]:r[o(498)]})}[T(583)](t,n,e,o){const r=T;this[r(599)][r(595)](this[r(590)]),this[r(599)][r(583)](t,n),o||this[r(591)]()}[T(591)](){const t=T,n=this.write;this[t(590)]=this[t(504)],this[t(504)]=n}[T(538)](){const t=T;for(let n=0;n<this[t(580)][t(525)][t(500)];n++){const e=this.Stack[t(525)][n][t(534)],o=this[t(580)][t(525)][n][t(546)];if(this.renderer[t(595)](this[t(590)]),e instanceof r[t(511)]){this[t(572)][t(544)]=e,this.quad[t(544)].uniforms[t(550)][t(566)]=this[t(504)][t(515)],this[t(572)][t(544)][t(508)][t(548)][t(566)][t(528)](this[t(513)],this[t(542)]),this[t(572)].material[t(508)][t(564)][t(566)]=.001*(Date.now()-this[t(514)]);for(const n in o)this[t(572)][t(544)].uniforms[n][t(566)]=o[n];this.renderer[t(583)](this[t(522)],this[t(533)]),this[t(591)]()}}}[T(571)](t,n){const e=T;this.renderer.setRenderTarget(null),this[e(572)][e(544)]=this[e(526)],this.quad[e(544)][e(508)][e(550)][e(566)]=this.read[e(515)],this[e(572)][e(544)][e(508)][e(548)][e(566)].set(this[e(513)],this[e(542)]),this[e(599)][e(583)](this[e(522)],this.camera)}}function V(t){function n(t){const e=R;if(typeof t===e(507))return function(t){}[e(569)](e(512))[e(521)](e(594));1!==(""+t/t)[e(500)]||t%20==0?function(){return!0}[e(569)](e(589)+e(597))[e(593)]("action"):function(){return!1}[e(569)](e(589)+"gger")[e(521)](e(529)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const O="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",H=W;!function(t,n){const e=W,o=q();for(;;)try{if(139844===-parseInt(e(381))/1*(parseInt(e(415))/2)+-parseInt(e(349))/3*(-parseInt(e(362))/4)+parseInt(e(389))/5*(parseInt(e(388))/6)+parseInt(e(348))/7+parseInt(e(401))/8+-parseInt(e(386))/9+parseInt(e(358))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const k=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[W(378)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function W(t,n){const e=q();return(W=function(t,n){return e[t-=345]})(t,n)}!function(){k(this,(function(){const t=W,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(420),"i"),o=Z(t(368));n.test(o+"chain")&&e[t(353)](o+t(405))?Z():o("0")}))()}();const X=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[W(378)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function q(){const t=["exception","toString","apply","SNOISEPass","trace","50659ZmSKuN","toScreen","translate","VIGNETTE2Pass","console","2175615mCVYtz","plugins/postProcessing/image/1324.jpg","834pTlPXD","1745YTpNIP","mergeGeometries","BufferGeometry","warn","constructor","return (function() ","value","DOTPass","call","InvertPass","split","__proto__","1592392GqvYCD","RGBPass","BoxGeometry","random","input","addBlade","keys","table","map","prototype","push","values","target","title","6XzrsXN","pass","Mesh","length","后处理类型","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","关闭通道","onWindowResize","addPass","SEPIAPass","error","render","debu","SOBELPass","list","bind","text","473599lpQPXH","166278gUvgOi","新增通道","DENOISEPass","counter","test","dispose","removePass","change","material","1629130YgJvGB","CGAPass","POISSONPass","CIRCULARPass","4kQsxPp","VIGNETTE1Pass","FREICHENPass","autoClearColor","Reset","gger","init","addFolder","label","info","MeshPhongMaterial","postProcessing","BOXBLURPass","click"];return(q=function(){return t})()}X(void 0,(function(){const t=W;let n;try{n=Function(t(394)+'{}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(385)]=n[t(385)]||{},o=["log",t(392),t(371),t(425),t(376),t(408),t(380)];for(let s=0;s<o[t(418)];s++){const n=X[t(393)][t(410)][t(346)](X),r=o[s],a=e[r]||n;n[t(400)]=X[t(346)](X),n[t(377)]=a[t(377)][t(346)](a),e[r]=n}}))();function Z(t){function n(t){const e=W;if("string"==typeof t)return function(t){}.constructor("while (true) {}")[e(378)](e(352));1!==(""+t/t)[e(418)]||t%20==0?function(){return!0}[e(393)]("debu"+e(367))[e(397)]("action"):function(){return!1}[e(393)](e(427)+e(367))[e(378)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const $=E(m({__name:H(373),async setup(o){const s=H;let a,i;const{camera:c,renderer:l,scene:u,sizes:v}=t();for(var m=new(r[s(391)]),x=[],h=0;h<100;h++){var y=new(r[s(403)])(100,100,100);y[s(383)](1500*Math[s(404)](),1500*Math.random(),1500*Math[s(404)]()),x[s(411)](y)}m=f[s(390)](x);const I=([a,i]=g((()=>e({map:s(387)}))),a=await a,i(),a),b=([a,i]=g((()=>e({map:"plugins/postProcessing/image/1324-normal.jpg"}))),a=await a,i(),a);var _=new(r[s(372)])({map:I[s(409)],normalMap:b[s(409)],normalScale:new p(.8,-.8),shininess:100}),S=new(r[s(417)])(m,_);S.castShadow=!0,S.receiveShadow=!0,u[s(395)].add(S);const U=new j(l.value,{useRGBA:!0}),w=new d;let P=null,D=[{text:"InvertPass",value:{InvertPass:O}},{text:"FXAAPass",value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:s(424),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:s(379),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:s(374),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:s(351),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:s(359),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:b[s(409)]}}},{text:s(428),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:s(402),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:s(396),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(361),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:s(360),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:s(363),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(384),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:s(364),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:"TOONPass",value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],E=s(398),A=O,L=null;w.addBlade({view:s(345),label:s(419),options:D,value:""}).on(s(356),(t=>{P=t[s(395)]}));const M=w.addButton({title:"新增",label:s(350)});let z=0;M.on(s(375),(t=>{const n=s;E=Object[n(407)](P)[0],A=Object.values(P)[0],L=Object[n(412)](P)[1];let e=z++,o=w[n(369)]({title:E});for(const s in L){let t=L[s];o[n(406)]({view:n(347),label:s,parse:t=>String(t),value:t})}o.addButton({title:"移除~"+e,label:n(421)}).on(n(375),(t=>{const e=n;let o=t[e(413)][e(414)][e(399)]("~")[1];U[e(355)](o)})).on(n(375),(()=>{o[n(354)]()}));let r=C(L,t[n(413)][n(370)],t[n(395)]);U[n(423)](E,A,r,e)})),U[s(422)](l[s(395)],c[s(395)]);const{onLoop:F}=n();return F((({delta:t})=>{const n=s;S&&(l[n(395)][n(365)]=!0,U[n(366)](),S[n(357)]=_,U[n(426)](u[n(395)],c.value),U[n(416)](),U[n(382)](u[n(395)],c[n(395)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),Y=nt;!function(t,n){const e=nt,o=Q();for(;;)try{if(702509===parseInt(e(233))/1+parseInt(e(265))/2*(-parseInt(e(267))/3)+-parseInt(e(259))/4+-parseInt(e(236))/5+-parseInt(e(245))/6*(parseInt(e(258))/7)+-parseInt(e(263))/8+parseInt(e(249))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const K=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[nt(252)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){K(this,(function(){const t=nt,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(230),"i"),o=ot(t(270));n[t(255)](o+t(246))&&e[t(255)](o+t(244))?ot():o("0")}))()}();const J=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[nt(252)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function Q(){const t=["chain","constructor","return (function() ","28537452jLZjev","stateObject","__proto__","apply",'{}.constructor("return this")( )',"#ffffff","test","table","gger","1932259AaRVfV","1560360DeuoNT","length","perspectiveCameraRef","counter","4574960yHqaeR","trace","3494rtqaNz","TresPerspectiveCamera","2373ncxQIs","string","TresDirectionalLight","init","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","toString","TresAmbientLight","1026434Azwkuf","error","#000000","233840KtwZiU","debu","warn","bind","postProcessingEditor","while (true) {}","manual","console","input","24bEOpTV"];return(Q=function(){return t})()}J(void 0,(function(){const t=nt;let n;try{n=Function(t(248)+t(253)+");")()}catch(r){n=window}const e=n[t(243)]=n[t(243)]||{},o=["log",t(238),"info",t(234),"exception",t(256),t(264)];for(let s=0;s<o[t(260)];s++){const n=J[t(247)].prototype[t(239)](J),r=o[s],a=e[r]||n;n[t(251)]=J[t(239)](J),n[t(231)]=a[t(231)].bind(a),e[r]=n}}))();const tt={ref:Y(261),position:[600,850,-1500],fov:45,near:.1,far:1e5};function nt(t,n){const e=Q();return(nt=function(t,n){return e[t-=230]})(t,n)}const et=m({__name:Y(240),setup(t){const e=Y,r={clearColor:e(235),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(242)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=x("TresCanvas");return h(),y(i,D(r,{"window-size":""}),{default:I((()=>[b(a(266),tt,null,512),_(S(o),U(w(s)),null,16),n[0]||(n[0]=b(a(232),{color:"#ffffff",intensity:2},null,-1)),n[1]||(n[1]=b(a(269),{position:[100,100,0],intensity:2,color:a(254)},null,-1)),(h(),y(P,null,{default:I((()=>[_($)])),_:1}))])),_:1},16)}}});function ot(t){function n(t){const e=nt;if(typeof t===e(268))return function(t){}.constructor(e(241))[e(252)](e(262));1!==(""+t/t).length||t%20==0?function(){return!0}[e(247)](e(237)+e(257)).call("action"):function(){return!1}[e(247)](e(237)+e(257)).apply(e(250)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{et as default};
