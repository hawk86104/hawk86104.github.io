import{m as t,e as n,a as e,o}from"./@tresjs.W3PFJhMo1741658416045.js";import{_ as r,V as s,b as a,s as i,W as c,cX as l,A as u,m as v,l as f,c3 as p}from"./three.FyUEtfsR1741658416045.js";import{P as m}from"./tweakpane.yDiyAAkA1741658416045.js";import{d,a3 as g,e as x,o as h,f as y,g as I,N as b,j as _,u as S,aj as U,ak as w,al as D,m as P}from"./@vue.NRI7TcgI1741658416045.js";import{_ as E}from"./@fesjs.hAnhKQG-1741658416045.js";import"./postprocessing.llR5x4wQ1741658416045.js";import"./@vueuse.5uFvLf9q1741658416045.js";import"./vue-router.qhodDV9M1741658416045.js";import"./lodash-es.pklfUAS51741658416045.js";import"./@qlin.yHhFDldE1741658416045.js";import"./pinia.Iw2DqQac1741658416045.js";import"./@floating-ui.BPbuo5Gx1741658416045.js";import"./@juggle.7yjBMqoW1741658416045.js";!function(t,n){const e=z,o=L();for(;;)try{if(719944===parseInt(e(211))/1*(parseInt(e(145))/2)+-parseInt(e(188))/3*(-parseInt(e(166))/4)+parseInt(e(164))/5*(parseInt(e(175))/6)+parseInt(e(191))/7*(parseInt(e(210))/8)+-parseInt(e(209))/9*(parseInt(e(213))/10)+parseInt(e(155))/11+parseInt(e(169))/12*(-parseInt(e(159))/13))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[z(177)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){A(this,(function(){const t=z,n=new RegExp(t(158)),e=new RegExp(t(149),"i"),o=F(t(205));n[t(190)](o+t(197))&&e.test(o+t(154))?F():o("0")}))()}();const M=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[z(177)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function L(){const t=["324576EpAsUt","16ImWVGf","1NgyHtw","prototype","370eEVevA","onabort","gger","type","\" couldn't be loaded.","2560622UJbVdA","return (function() ","warn","send","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","index","stateObject","toString","__proto__","input","9818886lemvol","v3v","bind","function *\\( *\\)","8619nCQJSW","now",'Shader "',"exception","constructor","919805yuPDUq","log","1049012DyRcDH","Vector2","message","23196iUFoqJ","onerror",'" load was aborted.',"console","WagnerLoadShaderException","hasOwnProperty","6elIeZc","object","apply","Matrix2","trace",'{}.constructor("return this")( )',"Matrix3","get","open","error","string","random","debu","9KoxiyF","while (true) {}","test","672819bzqezi","name","table","Vector4","action","Vector3","chain","value","ShaderMaterial","info","length","Texture","responseText","Matrix4","init","call","onload","lastIndex"];return(L=function(){return t})()}M(void 0,(function(){const t=z;let n;try{n=Function(t(146)+t(180)+");")()}catch(r){n=window}const e=n.console=n[t(172)]||{},o=[t(165),t(147),t(200),t(184),t(162),t(193),t(179)];for(let s=0;s<o[t(201)];s++){const n=M[t(163)][t(212)][t(157)](M),r=o[s],a=e[r]||n;n[t(153)]=M[t(157)](M),n[t(152)]=a[t(152)][t(157)](a),e[r]=n}}))();function z(t,n){const e=L();return(z=function(t,n){return e[t-=144]})(t,n)}function C(t,n,e){const o=z;if(typeof t!==o(176)||null===t)return t;const r=Array.isArray(t)?[]:{};for(const s in t)t[o(174)](s)&&(r[s]=C(t[s])),s==n&&(r[n]=e);return r}function F(t){function n(t){const e=z;if(typeof t===e(185))return function(t){}[e(163)](e(189))[e(177)]("counter");1!==(""+t/t)[e(201)]||t%20==0?function(){return!0}[e(163)](e(187)+e(215))[e(206)](e(195)):function(){return!1}.constructor(e(187)+"gger")[e(177)](e(151)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const N=R;!function(t,n){const e=R,o=G();for(;;)try{if(427935===parseInt(e(351))/1+parseInt(e(404))/2*(parseInt(e(405))/3)+-parseInt(e(371))/4*(-parseInt(e(376))/5)+parseInt(e(375))/6+-parseInt(e(429))/7+-parseInt(e(423))/8*(parseInt(e(353))/9)+parseInt(e(412))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const T=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function G(){const t=["prototype","copyPass","length","minFilter","CopyPass","getOfflineTexture","time","Pass","settings","pass","wrapS","constructor","RGBAFormat","2aBnrgQ","819465BoxnnR","now","innerWidth","value","read","swapBuffers","width","1393930tIcOov","tInput","render","magFilter","table","warn","height","return (function() ","apply",'{}.constructor("return this")( )',"WebGLRenderTarget","8XVkuVR","counter","Reset","OrthographicCamera","init","camera","4166491AxyAbI","front","uniforms","__proto__","toScreen","gger","passItems","Scene","splice","LinearFilter","call","makePerspective","write","log","debu","test","add","scene","Mesh","texture","setRenderTarget","input","useRGBA","shader","462352boNkRi","exception","6203133IyiQGL","type","loadShadervf","trace","addPass","setSize","resolution","params","projectionMatrix","Stack","onWindowResize","startTime","far","near","renderer","scale","material","while (true) {}","76CxazLW","makeOrthographic","info","chain","561354AGNFyd","195770mcDqWX","stateObject","console","set","stencilBuffer","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","wrapT","bind","MeshBasicMaterial","string","uuid","back","quad","ClampToEdgeWrapping","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)"];return(G=function(){return t})()}!function(){T(this,(function(){const t=R,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(390),"i"),o=V(t(427));n.test(o+t(374))&&e[t(342)](o+t(348))?V():o("0")}))()}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(420)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function R(t,n){const e=G();return(R=function(t,n){return e[t-=341]})(t,n)}B(void 0,(function(){const t=R,n=function(){const t=R;let n;try{n=Function(t(419)+t(421)+");")()}catch(e){n=window}return n}(),e=n[t(378)]=n[t(378)]||{},o=[t(442),t(417),t(373),"error",t(352),t(416),t(356)];for(let r=0;r<o[t(393)];r++){const n=B.constructor[t(391)][t(383)](B),s=o[r],a=e[s]||n;n[t(432)]=B.bind(B),n.toString=a.toString[t(383)](a),e[s]=n}}))();class j{constructor(t,n){const e=R;this[e(411)]=1,this[e(418)]=1,this.settings=n||{},this[e(349)]=this[e(399)].useRGBA||!1,this[e(367)]=t,this[e(392)]=this.CopyPass(this[e(399)]),this.scene=new(r[e(436)]),this[e(388)]=new(r[e(345)])(new i(1,1),new(r[e(384)])),this[e(344)][e(343)](this[e(388)]),this[e(428)]=new(r[e(426)])(1,1,1,1,-1e4,1e4),this[e(430)]=new c(1,1,{minFilter:void 0!==this.settings[e(394)]?this.settings[e(394)]:r[e(438)],magFilter:void 0!==this[e(399)].magFilter?this.settings[e(415)]:r[e(438)],wrapS:void 0!==this[e(399)][e(401)]?this[e(399)][e(401)]:r[e(389)],wrapT:void 0!==this.settings[e(382)]?this[e(399)][e(382)]:r[e(389)],format:this[e(349)]?r[e(403)]:l,type:void 0!==this[e(399)].type?this[e(399)][e(354)]:u,stencilBuffer:void 0===this.settings[e(380)]||this[e(399)][e(380)]}),this[e(387)]=this[e(430)].clone(),this[e(364)]=Date.now(),this.passes={},this.Stack={passItems:[],passes:[]}}[N(357)](t,n,e,o){const r=N;this[r(355)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(350)]};this[r(362)][r(435)].push(s)}removePass(t){const n=N;for(let e=this[n(362)].passItems.length-1;e>=0;e--)this[n(362)].passItems[e][n(386)]===parseInt(t)&&this[n(362)][n(435)][n(437)](e,1);console[n(442)](this[n(362)][n(435)])}[N(395)](){const t=N;this[t(398)][t(439)](this);return this[t(355)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}loadShadervf(t){const n=N,e=n(381);return this[n(350)]=function(t,n){const e=z,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,i=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,c={sampler2D:{type:"t",value:()=>new(r[z(202)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new s},vec3:{type:"v3",value:()=>new(r[z(196)])},vec4:{type:"v4",value:()=>new(r[z(194)])},bvec2:{type:"v2",value:()=>new(r[z(167)])},bvec3:{type:"v3",value:()=>new(r[z(196)])},bvec4:{type:"v4",value:()=>new(r[z(194)])},ivec2:{type:"v2",value:()=>new(r[z(167)])},ivec3:{type:"v3",value:()=>new a},ivec4:{type:"v4",value:()=>new(r[z(194)])},mat2:{type:"v2",value:()=>new(r[z(178)])},mat3:{type:"v3",value:()=>new(r[z(181)])},mat4:{type:"v4",value:()=>new(r[z(204)])}},l={float:{type:"fv",value:()=>[]},vec3:{type:e(156),value:()=>[]}};let u;const v={resolution:{type:"v2",value:new(r[e(167)])(1,1),default:!0},time:{type:"f",value:Date[e(160)](),default:!0},tInput:{type:"t",value:new(r[e(202)]),default:!0}};let f,p;for(;null!==(u=o.exec(n));)u[e(150)]===o[e(208)]&&o[e(208)]++,f=u[1],p=u[2],v[p]={type:c[f].type,value:c[f].value()};for(;null!==(u=i.exec(n));)u[e(150)]===o[e(208)]&&o[e(208)]++,f=u[1],p=u[2],u[3],v[p]={type:l[f][e(216)],value:l[f][e(198)]()};return new(r[e(199)])({uniforms:v,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this.shader}[N(398)](t){const n=N;this[n(350)]=null,this[n(360)]={}}[N(425)](){const t=N;this[t(409)]=this[t(430)],this.write=this[t(387)]}[N(363)](t,n){const e=N,o=window[e(407)],r=window.innerHeight;t[e(358)](1*o,1*r),n.projectionMatrix[e(440)](70,o/r,n[e(366)],n[e(365)]),this[e(358)](o,r);return this[e(396)](o,r,!0)}[N(358)](t,n){const e=N;this[e(411)]=t,this[e(418)]=n,this.camera[e(361)][e(372)](t/-2,t/2,n/2,n/-2,this[e(428)][e(366)],this.camera[e(365)]),this[e(388)][e(368)][e(379)](t,n,1),this[e(430)].setSize(t,n),this.back[e(358)](t,n)}[N(396)](t,n,e){const o=N;return new(r[o(422)])(t,n,{minFilter:r[o(438)],magFilter:v,format:e?r[o(403)]:l})}[N(414)](t,n,e,o){const r=N;this.renderer[r(347)](this[r(441)]),this.renderer.render(t,n),o||this[r(410)]()}[N(410)](){const t=N,n=this[t(441)];this[t(441)]=this.read,this[t(409)]=n}[N(400)](){const t=N;for(let n=0;n<this[t(362)][t(435)][t(393)];n++){const e=this[t(362)][t(435)][n][t(350)],o=this[t(362)][t(435)][n][t(360)];if(this[t(367)][t(347)](this.write),e instanceof f){this[t(388)][t(369)]=e,this[t(388)][t(369)].uniforms[t(413)].value=this[t(409)].texture,this[t(388)][t(369)][t(431)][t(359)].value[t(379)](this[t(411)],this.height),this[t(388)][t(369)][t(431)][t(397)][t(408)]=.001*(Date[t(406)]()-this.startTime);for(const n in o)this[t(388)][t(369)][t(431)][n][t(408)]=o[n];this[t(367)][t(414)](this[t(344)],this[t(428)]),this[t(410)]()}}}[N(433)](t,n){const e=N;this[e(367)][e(347)](null),this[e(388)][e(369)]=this[e(392)],this[e(388)][e(369)][e(431)][e(413)].value=this.read[e(346)],this[e(388)][e(369)][e(431)][e(359)][e(408)][e(379)](this[e(411)],this[e(418)]),this[e(367)][e(414)](this[e(344)],this.camera)}}function V(t){function n(t){const e=R;if(typeof t===e(385))return function(t){}[e(402)](e(370))[e(420)](e(424));1!==(""+t/t).length||t%20==0?function(){return!0}[e(402)](e(341)+e(434))[e(439)]("action"):function(){return!1}[e(402)](e(341)+e(434)).apply(e(377)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const O="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",H=X;!function(t,n){const e=X,o=q();for(;;)try{if(275916===-parseInt(e(359))/1+parseInt(e(373))/2*(parseInt(e(395))/3)+-parseInt(e(345))/4*(parseInt(e(351))/5)+parseInt(e(404))/6*(parseInt(e(391))/7)+parseInt(e(372))/8*(parseInt(e(365))/9)+parseInt(e(399))/10+-parseInt(e(361))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const k=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){k(this,(function(){const t=X,n=new RegExp(t(348)),e=new RegExp(t(332),"i"),o=Z(t(363));n[t(408)](o+"chain")&&e[t(408)](o+t(344))?Z():o("0")}))()}();const W=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[X(358)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function X(t,n){const e=q();return(X=function(t,n){return e[t-=331]})(t,n)}function q(){const t=["168trQcuD","1062564wWKfFi","FXAAPass","random","SEPIAPass","postProcessing","toScreen","prototype","log","MeshPhongMaterial","InvertPass","string","values","receiveShadow","VIGNETTE2Pass","castShadow","add","BufferGeometry","label","212625LYZxGD","material","map","bind","3fbzDas","action","新增通道","关闭通道","484390MNbkBB","removePass","return (function() ","addButton","onWindowResize","12wrGDgy","__proto__","constructor","autoClearColor","test","push","list","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","gger","info","call","VIGNETTE1Pass","target","BoxGeometry","Mesh","error","DOTPass","change","debu","input","343724ROOkZe","value","DENOISEPass","function *\\( *\\)","length","click","15VSJvgm","toString","warn","移除~","Reset","RGBPass",'{}.constructor("return this")( )',"apply","268500WNHwzB","CIRCULARPass","3931664SjBmmB","translate","init","mergeGeometries","222498tjZfBU","while (true) {}","plugins/postProcessing/image/1324-normal.jpg","Vector2","SNOISEPass","console","addPass"];return(q=function(){return t})()}W(void 0,(function(){const t=X;let n;try{n=Function(t(401)+t(357)+");")()}catch(r){n=window}const e=n[t(370)]=n[t(370)]||{},o=[t(380),t(353),t(334),t(340),"exception","table","trace"];for(let s=0;s<o[t(349)];s++){const n=W[t(406)][t(379)][t(394)](W),r=o[s],a=e[r]||n;n[t(405)]=W.bind(W),n[t(352)]=a.toString.bind(a),e[r]=n}}))();function Z(t){function n(t){const e=X;if(typeof t===e(383))return function(t){}.constructor(e(366))[e(358)]("counter");1!==(""+t/t)[e(349)]||t%20==0?function(){return!0}.constructor(e(343)+e(333))[e(335)](e(396)):function(){return!1}[e(406)]("debu"+e(333))[e(358)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const $=E(d({__name:H(377),async setup(o){const s=H;let a,i;const{camera:c,renderer:l,scene:u,sizes:v}=t();for(var f=new(r[s(389)]),d=[],x=0;x<100;x++){var h=new(r[s(338)])(100,100,100);h[s(362)](1500*Math[s(375)](),1500*Math.random(),1500*Math.random()),d[s(409)](h)}f=p[s(364)](d);const y=([a,i]=g((()=>e({map:"plugins/postProcessing/image/1324.jpg"}))),a=await a,i(),a),I=([a,i]=g((()=>e({map:s(367)}))),a=await a,i(),a);var b=new(r[s(381)])({map:y[s(393)],normalMap:I.map,normalScale:new(r[s(368)])(.8,-.8),shininess:100}),_=new(r[s(339)])(f,b);_[s(387)]=!0,_[s(385)]=!0,u[s(346)][s(388)](_);const S=new j(l.value,{useRGBA:!0}),U=new m;let w=null,D=[{text:s(382),value:{InvertPass:O}},{text:s(374),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:s(376),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:s(369),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:"BOXBLURPass",value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:s(347),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:"CGAPass",value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:I[s(393)]}}},{text:"SOBELPass",value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:s(356),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:s(341),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(360),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:"POISSONPass",value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:s(336),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(386),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:"FREICHENPass",value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:"TOONPass",value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],P="InvertPass",E=O,A=null;U.addBlade({view:s(331),label:"后处理类型",options:D,value:""}).on(s(342),(t=>{w=t[s(346)]}));const M=U[s(402)]({title:"新增",label:s(397)});let L=0;M.on(s(350),(t=>{const n=s;P=Object.keys(w)[0],E=Object[n(384)](w)[0],A=Object[n(384)](w)[1];let e=L++,o=U.addFolder({title:P});for(const s in A){let t=A[s];o.addBlade({view:"text",label:s,parse:t=>String(t),value:t})}o[n(402)]({title:n(354)+e,label:n(398)}).on(n(350),(t=>{const e=n;let o=t.target.title.split("~")[1];S[e(400)](o)})).on(n(350),(()=>{o.dispose()}));let r=C(A,t[n(337)][n(390)],t[n(346)]);S[n(371)](P,E,r,e)})),S[s(403)](l[s(346)],c[s(346)]);const{onLoop:z}=n();return z((({delta:t})=>{const n=s;_&&(l[n(346)][n(407)]=!0,S[n(355)](),_[n(392)]=b,S.render(u[n(346)],c[n(346)]),S.pass(),S[n(378)](u[n(346)],c[n(346)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),Q=K;!function(t,n){const e=K,o=et();for(;;)try{if(862635===-parseInt(e(494))/1+parseInt(e(467))/2+parseInt(e(475))/3+parseInt(e(469))/4+-parseInt(e(486))/5*(-parseInt(e(491))/6)+-parseInt(e(483))/7+parseInt(e(466))/8)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const J=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){J(this,(function(){const t=K,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(476),"i"),o=ot(t(461));n[t(473)](o+"chain")&&e[t(473)](o+t(488))?ot():o("0")}))()}();const Y=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function K(t,n){const e=et();return(K=function(t,n){return e[t-=459]})(t,n)}Y(void 0,(function(){const t=K,n=function(){const t=K;let n;try{n=Function("return (function() "+t(459)+");")()}catch(e){n=window}return n}(),e=n[t(484)]=n[t(484)]||{},o=[t(495),t(463),t(468),t(493),t(481),t(478),"trace"];for(let r=0;r<o[t(470)];r++){const n=Y.constructor[t(489)][t(462)](Y),s=o[r],a=e[s]||n;n[t(479)]=Y[t(462)](Y),n[t(492)]=a[t(492)].bind(a),e[s]=n}}))();const tt={ref:Q(472),position:[600,850,-1500],fov:45,near:.1,far:1e5},nt=d({__name:"postProcessingEditor",setup(t){const e=Q,r={clearColor:"#000000",shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(465)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=x(a(471));return h(),y(i,P(r,{"window-size":""}),{default:I((()=>[b("TresPerspectiveCamera",tt,null,512),_(S(o),U(w(s)),null,16),n[0]||(n[0]=b(a(485),{color:a(480),intensity:2},null,-1)),n[1]||(n[1]=b(a(490),{position:[100,100,0],intensity:2,color:"#ffffff"},null,-1)),(h(),y(D,null,{default:I((()=>[_($)])),_:1}))])),_:1},16)}}});function et(){const t=["exception","while (true) {}","7156079jlXCvi","console","TresAmbientLight","5YUkGPy","action","input","prototype","TresDirectionalLight","1596246BuOsNA","toString","error","502994YdYoNg","log",'{}.constructor("return this")( )',"counter","init","bind","warn","debu","manual","9217200GZqWdZ","105194IyHSzZ","info","2116428dLaNcA","length","TresCanvas","perspectiveCameraRef","test","gger","1164093NphivQ","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","string","table","__proto__","#ffffff"];return(et=function(){return t})()}function ot(t){function n(t){const e=K;if(typeof t===e(477))return function(t){}.constructor(e(482)).apply(e(460));1!==(""+t/t).length||t%20==0?function(){return!0}.constructor(e(464)+e(474)).call(e(487)):function(){return!1}.constructor(e(464)+e(474)).apply("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{nt as default};
