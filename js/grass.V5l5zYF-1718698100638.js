import{a5 as t,C as n,K as e,aj as o,ab as r}from"./three.erXpfL-r1718698100638.js";import{r as a,N as i,d as s,P as c}from"./@tresjs.aawOCoPx1718698100638.js";import"./index.BMLKePo31718698100638.js";import{a as l}from"./simplex-noise.MycypUyu1718698100638.js";import{C as u}from"./index.eYkSz4SJ1718698100638.js";import{d as f,a3 as p,o as h,D as m,J as v,u as d,r as g,f as x,g as w,j as y,aj as b,ak as _,al as j}from"./@vue.CpOXM7bB1718698100638.js";import{_ as M}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.bpDCCzaw1718698100638.js";import"./@vueuse.TW6-TkVF1718698100638.js";import"./tweakpane.qqn77PB81718698100638.js";import"./lamina.Bn8sblrk1718698100638.js";import"./glsl-tokenizer.RLlRtTA81718698100638.js";import"./@amap.TW6HTmRb1718698100638.js";import"./glsl-token-descope.C_rwZCa11718698100638.js";import"./glsl-token-depth.nDnrmTHD1718698100638.js";import"./glsl-token-scope.0ryTw9bP1718698100638.js";import"./glsl-token-properties.vyoztBdq1718698100638.js";import"./glsl-token-assignments.GimxlU0u1718698100638.js";import"./glsl-token-string.IbwI77yI1718698100638.js";import"./glsl-token-functions.LDKY2qLw1718698100638.js";import"./object-hash.SpRbwitp1718698100638.js";import"./jszip.KspeudHJ1718698100638.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.hKfjoIrX1718698100638.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.zuz17rQj1718698100638.js";import"./three-stdlib.Jy3o-bPq1718698100638.js";import"./@pmndrs.ZdH7ThqA1718698100638.js";import"./utils.EmITq-d01718698100638.js";const z=A;function A(t,n){const e=C();return(A=function(t,n){return e[t-=286]})(t,n)}!function(t,n){const e=A,o=C();for(;;)try{if(140337===-parseInt(e(341))/1+parseInt(e(316))/2*(-parseInt(e(311))/3)+-parseInt(e(293))/4*(parseInt(e(347))/5)+parseInt(e(303))/6*(-parseInt(e(331))/7)+-parseInt(e(336))/8*(-parseInt(e(348))/9)+-parseInt(e(317))/10*(-parseInt(e(305))/11)+parseInt(e(337))/12)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const I=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[A(310)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function C(){const t=["joints","array","773941ujmksE","uniforms","position","log","chain","8VEWvnb","4890456GZSyuC","bind","halfRootAngleCosF32","__proto__","152078MtPydn","random","input","set","map","cos","115gFOWAZ","2322414eYtRaW","material","error","push","Color","InstancedBufferAttribute","prototype","sin","alphaMap","constructor","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","TresGroup","#000f00","stateObject","TresMeshStandardMaterial","TresInstancedBufferGeometry","info","debu","attributes-orientation","time","init","DoubleSide","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","32764ugfYtO","lookAt","attributes-stretch","geometry","test","attributes","instances","counter","trace","exception","6tKJvnY",'{}.constructor("return this")( )',"44kNnHtv","needsUpdate","index","toString","PlaneGeometry","apply","59235fEosjf","normalize","convertSRGBToLinear","length","gger","18IzGfVO","258730gRMLQx","Vector4","toneMapped","side","width","Vector3","offsetsF32","attributes-offset","string","TresMesh","attributes-halfRootAngleSin","warn"];return(C=function(){return t})()}!function(){I(this,(function(){const t=A,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(358),"i"),o=P(t(290));n[t(297)](o+t(335))&&e[t(297)](o+t(343))?P():o("0")}))()}();const S=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[A(310)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();S(void 0,(function(){const t=A,n=function(){const t=A;let n;try{n=Function("return (function() "+t(304)+");")()}catch(e){n=window}return n}(),e=n.console=n.console||{},o=[t(334),t(328),t(286),t(350),t(302),"table",t(301)];for(let r=0;r<o.length;r++){const n=S[t(357)][t(354)][t(338)](S),a=o[r],i=e[a]||n;n[t(340)]=S[t(338)](S),n[t(308)]=i[t(308)][t(338)](i),e[a]=n}}))();const k=[z(349)],R=[z(307),"attributes-position","attributes-uv",z(324),z(288),z(295),z(327),"attributes-halfRootAngleCos"],F=[z(296)],D=[z(320)],O=f({__name:"grass",props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(r){const s=z;let c,f;const g=([c,f]=p((()=>i({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),c=await c,f(),c),x=r,w=l(Math.random);function y(t,n){const e=t.x*n.w+t.y*n.z-t.z*n.y+t.w*n.x,r=-t.x*n.z+t.y*n.w+t.z*n.x+t.w*n.y,a=t.x*n.y-t.y*n.x+t.z*n.w+t.w*n.z,i=-t.x*n.x-t.y*n.y-t.z*n.z+t.w*n.w;return new o(e,r,a,i)}function b(t,n){var e=2*w(t/50,n/50);return e+=4*w(t/100,n/100),e+=.2*w(t/10,n/10)}const _=function(n,o){const r=A,a=[],i=[],s=[],c=[],l=[];let u=new(t[r(318)]),f=new(t[r(318)]);const p=-.25;for(let e=0;e<n;e++){const h=Math.random()*o-o/2,m=Math[r(342)]()*o-o/2,v=b(h,m);a[r(351)](h,v,m);let d=Math.PI-Math[r(342)]()*(2*Math.PI);c[r(351)](Math[r(355)](.5*d)),l[r(351)](Math[r(346)](.5*d));let g=new(t[r(322)])(0,1,0),x=g.x*Math[r(355)](d/2),w=g.y*Math[r(355)](d/2),_=g.z*Math[r(355)](d/2),j=Math[r(346)](d/2);u[r(344)](x,w,_,j)[r(312)](),d=.5*Math.random()+p,g=new(t[r(322)])(1,0,0),x=g.x*Math.sin(d/2),w=g.y*Math[r(355)](d/2),_=g.z*Math[r(355)](d/2),j=Math[r(346)](d/2),f[r(344)](x,w,_,j)[r(312)](),u=y(u,f),d=.5*Math[r(342)]()+p,g=new(t[r(322)])(0,0,1),x=g.x*Math[r(355)](d/2),w=g.y*Math[r(355)](d/2),_=g.z*Math[r(355)](d/2),j=Math[r(346)](d/2),f.set(x,w,_,j)[r(312)](),u=y(u,f),i.push(u.x,u.y,u.z,u.w),e<n/3?s[r(351)](1.8*Math[r(342)]()):s.push(Math[r(342)]())}return{offsetsF32:new e(new Float32Array(a),3),orientationsF32:new(t[r(353)])(new Float32Array(i),4),stretchesF32:new(t[r(353)])(new Float32Array(s),1),halfRootAngleCosF32:new(t[r(353)])(new Float32Array(l),1),halfRootAngleSinF32:new(t[r(353)])(new Float32Array(c),1)}}(x[s(299)],x.width),j=new(t[s(309)])(x.bW,x.bH,1,x[s(329)]).translate(0,x.bH/2,0),M=new(t[s(309)])(x[s(321)],x.width,32,32);M[s(294)](new(t[s(322)])(0,1,0));const I=M[s(298)][s(333)];for(let t=0;t<I[s(330)][s(314)];t+=3)I[s(330)][t+1]=b(I.array[t],I.array[t+2]);M[s(298)][s(333)][s(306)]=!0,M.computeVertexNormals();const C=new(u({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(t[s(352)])(.3,.9,0).convertSRGBToLinear(),bottomColor:new n(0,.2,0)[s(313)]()},s(292),"\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }",(n=>{const e=s;n[e(320)]=t[e(291)]})));C.map=g[s(345)],C.alphaMap=g[s(356)],C[s(319)]=!1;const{onLoop:S}=a();return S((({elapsed:t})=>{const n=s;C[n(332)][n(289)].value=t/4})),(n,e)=>{const o=s;return h(),m(o(359),null,[v(o(326),{material:d(C)},[v(o(363),{index:d(j)[o(307)],"attributes-position":d(j)[o(298)].position,"attributes-uv":d(j)[o(298)].uv,"attributes-offset":d(_)[o(323)],"attributes-orientation":d(_).orientationsF32,"attributes-stretch":d(_).stretchesF32,"attributes-halfRootAngleSin":d(_).halfRootAngleSinF32,"attributes-halfRootAngleCos":d(_)[o(339)]},null,8,R)],8,k),v(o(326),{position:[0,0,0],geometry:d(M)},[v(o(362),{color:o(360),side:t[o(291)]},null,8,D)],8,F)])}}});function P(t){function n(t){const e=A;if(typeof t===e(325))return function(t){}.constructor("while (true) {}")[e(310)](e(300));1!==(""+t/t)[e(314)]||t%20==0?function(){return!0}[e(357)](e(287)+e(315)).call("action"):function(){return!1}[e(357)](e(287)+e(315))[e(310)](e(361)),n(++t)}try{if(t)return n;n(0)}catch(e){}}!function(t,n){const e=H,o=L();for(;;)try{if(648728===-parseInt(e(426))/1*(parseInt(e(417))/2)+-parseInt(e(419))/3*(-parseInt(e(432))/4)+-parseInt(e(430))/5+parseInt(e(436))/6+-parseInt(e(413))/7+parseInt(e(408))/8*(parseInt(e(428))/9)+-parseInt(e(438))/10*(-parseInt(e(427))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const E=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[H(416)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function L(){const t=['{}.constructor("return this")( )',"3400404vdeSxW","test","4572940AJPhRF","stateObject","error","warn","while (true) {}","exception","table","686776PXBRtd","constructor","string","action","debu","857640tWogXL","toString","bind","apply","246iDeHSL","call","18CdTAog","prototype","return (function() ","__proto__","length","info","console","2971WDWPcO","11AuOpow","63swAYhj","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","5897350CUqxlC","log","460796lvVfGe","counter","trace"];return(L=function(){return t})()}!function(){E(this,(function(){const t=H,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(429),"i"),o=N("init");n[t(437)](o+"chain")&&e[t(437)](o+"input")?N():o("0")}))()}();const T=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[H(416)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();T(void 0,(function(){const t=H;let n;try{n=Function(t(421)+t(435)+");")()}catch(r){n=window}const e=n[t(425)]=n[t(425)]||{},o=[t(431),t(441),t(424),t(440),t(443),t(407),t(434)];for(let a=0;a<o[t(423)];a++){const n=T[t(409)][t(420)].bind(T),r=o[a],i=e[r]||n;n[t(422)]=T[t(415)](T),n.toString=i[t(414)][t(415)](i),e[r]=n}}))();const B=v("TresPerspectiveCamera",{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1);function H(t,n){const e=L();return(H=function(t,n){return e[t-=407]})(t,n)}const G=f({__name:"grass",setup(t){const n=g({alpha:!0,toneMapping:r,windowSize:!0,clearColor:6710886}),e=g({enableDamping:!0,autoRotate:!1});return(t,o)=>(h(),x(d(c),b(_(n)),{default:w((()=>[B,y(d(s),b(_(e)),null,16),(h(),x(j,null,{default:w((()=>[y(O)])),_:1})),(h(),x(j,null,{default:w((()=>[y(d(M),{texture:"https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr"})])),_:1}))])),_:1},16))}});function N(t){function n(t){const e=H;if(typeof t===e(410))return function(t){}[e(409)](e(442))[e(416)](e(433));1!==(""+t/t).length||t%20==0?function(){return!0}[e(409)]("debugger")[e(418)](e(411)):function(){return!1}[e(409)](e(412)+"gger")[e(416)](e(439)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{G as default};
