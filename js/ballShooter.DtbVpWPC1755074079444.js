import{m as e,a as t}from"./@tresjs.B1VqNfqw1755074079444.js";import{V as n,M as s,p as a,Q as o,aX as r,ab as i,c3 as l,b8 as c,I as u,b9 as d,C as m,di as p,dj as h,A as f,l as y,B as g,al as w,ay as M,bL as v,aQ as D,f as L}from"./three.QlBabAUP1755074079444.js";import{d as _,aa as b,s as x,G as R,o as I,F as S,I as T,u as P,b as j,w as X,j as B,e as C,a5 as z,f as A,H as E,r as k,h as G,a7 as q,a8 as F}from"./@vue.BzMISRrV1755074079444.js";import{_ as H}from"./XRcom.vue_vue_type_script_setup_true_lang.D81p_QMS1755074079444.js";import"./postprocessing.D49g_X_Q1755074079444.js";import"./@vueuse.C47q1p2Z1755074079444.js";const Q=new n(1,1,1),V=new n;let Z=null;async function N(){null===Z&&(Z=await import("https://cdn.skypack.dev/@dimforge/rapier3d-compat@0.15.0"),await Z.init());const e=new n(0,-9.81,0),t=new Z.World(e),r=[],i=new WeakMap,l=new n,c=new o,u=new s;function d(e,t=0,n=0){const s=function(e){const t=e.parameters;if("BoxGeometry"===e.type){const e=void 0!==t.width?t.width/2:.5,n=void 0!==t.height?t.height/2:.5,s=void 0!==t.depth?t.depth/2:.5;return Z.ColliderDesc.cuboid(e,n,s)}if("SphereGeometry"===e.type||"IcosahedronGeometry"===e.type){const e=void 0!==t.radius?t.radius:1;return Z.ColliderDesc.ball(e)}return null}(e.geometry);if(null===s)return;s.setMass(t),s.setRestitution(n);const a=e.isInstancedMesh?function(e,t,n){const s=e.instanceMatrix.array,a=[];for(let o=0;o<e.count;o++){const e=l.fromArray(s,16*o+12);a.push(m(e,null,t,n))}return a}(e,t,s):m(e.position,e.quaternion,t,s);t>0&&(r.push(e),i.set(e,a))}function m(e,n,s,a){const o=s>0?Z.RigidBodyDesc.dynamic():Z.RigidBodyDesc.fixed();o.setTranslation(...e),null!==n&&o.setRotation(n);const r=t.createRigidBody(o);return t.createCollider(a,r),r}const p=new a;return setInterval((function(){t.timestep=p.getDelta(),t.step();for(let e=0,t=r.length;e<t;e++){const t=r[e];if(t.isInstancedMesh){const e=t.instanceMatrix.array,n=i.get(t);for(let t=0;t<n.length;t++){const s=n[t],a=s.translation();c.copy(s.rotation()),u.compose(a,c,Q).toArray(e,16*t)}t.instanceMatrix.needsUpdate=!0,t.computeBoundingSphere()}else{const e=i.get(t);t.position.copy(e.translation()),t.quaternion.copy(e.rotation())}}}),1e3/60),{addScene:function(e){e.traverse((e=>{if(e.isMesh){const t=e.userData.physics;t&&d(e,t.mass,t.restitution)}}))},addMesh:d,setMeshPosition:function(e,t,n=0){let s=i.get(e);e.isInstancedMesh&&(s=s[n]),s.setAngvel(V),s.setLinvel(V),s.setTranslation(t)},setMeshVelocity:function(e,t,n=0){let s=i.get(e);e.isInstancedMesh&&(s=s[n]),s.setLinvel(t)}}}const U=["geometry","material"],W=["rotation-z","geometry","material"],J=["rotation-z","geometry","material"],K=["rotation-x","geometry","material"],O=["rotation-x","geometry","material"],Y=["object"],$=_({__name:"physicsBalls",props:{XRcom:{default:null}},async setup(t){let a,o;const p=t,h=new r(6,2,6),f=new i({visible:!1}),y={physics:{mass:0}},g=new l(.08,3),w=new c,M=new u(g,w,800);M.instanceMatrix.setUsage(d),M.userData.physics={mass:1,restitution:1.1};const v=new s,D=new m;for(let e=0;e<M.count;e++){const t=4*Math.random()-2,n=4*Math.random(),s=4*Math.random()-2;v.setPosition(t,n,s),M.setMatrixAt(e,v),M.setColorAt(e,D.setHex(16777215*Math.random()))}const{scene:L}=e(),_=([a,o]=b((()=>N())),a=await a,o(),a);x((()=>{_.addScene(L.value)}));let j=0;const X=new n;function B(e){e.userData.isSelecting&&(_.setMeshPosition(M,e.position,j),X.x=2*(Math.random()-.5),X.y=2*(Math.random()-.5),X.z=Math.random()-9,X.applyQuaternion(e.quaternion),_.setMeshVelocity(M,X,j),++j===M.count&&(j=0))}return p.XRcom.onBeforeLoop((()=>{B(p.XRcom.controller0),B(p.XRcom.controller1)})),(e,t)=>(I(),R(S,null,[T("TresMesh",{name:"floor",position:[0,-1,0],geometry:P(h),material:P(f),userData:y},null,8,U),T("TresMesh",{name:"wallPX",position:[4,3,0],"rotation-z":Math.PI/2,geometry:P(h),material:P(f),userData:y},null,8,W),T("TresMesh",{name:"wallNX",position:[-4,3,0],"rotation-z":Math.PI/2,geometry:P(h),material:P(f),userData:y},null,8,J),T("TresMesh",{name:"wallPZ",position:[0,3,4],"rotation-x":Math.PI/2,geometry:P(h),material:P(f),userData:y},null,8,K),T("TresMesh",{name:"wallNZ",position:[0,3,-4],"rotation-x":Math.PI/2,geometry:P(h),material:P(f),userData:y},null,8,O),T("primitive",{object:P(M)},null,8,Y)],64))}}),ee=["geometry"],te=_({__name:"ballShooterSence",setup(e){const t=new p(6,6,6,10,10,10),n=function(){this?.userData&&(this.userData.isSelecting=!0)},s=function(){this?.userData&&(this.userData.isSelecting=!1)},a=function(e){let t,n;switch(e.targetRayMode){case"tracked-pointer":return t=new g,t.setAttribute("position",new w([0,0,0,0,0,-1],3)),t.setAttribute("color",new w([.5,.5,.5,0,0,0],3)),n=new M({vertexColors:!0,blending:v}),new D(t,n);case"gaze":return t=new h(.02,.04,32).translate(0,0,-1),n=new f({opacity:.5,transparent:!0}),new y(t,n)}return new L},o=j(null);return X(o,(e=>{e&&(e.controller0.addEventListener("selectstart",n),e.controller0.addEventListener("selectend",s),e.controller0.addEventListener("connected",(function(e){this.add(a(e.data))})),e.controller0.addEventListener("disconnected",(function(){this.remove(this.children[0])})),e.controller1.addEventListener("selectstart",n),e.controller1.addEventListener("selectend",s),e.controller1.addEventListener("connected",(function(e){this.add(a(e.data))})),e.controller1.addEventListener("disconnected",(function(){this.remove(this.children[0])})))})),(e,n)=>(I(),R(S,null,[T("TresLineSegments",{position:[0,3,0],geometry:P(t)},n[0]||(n[0]=[T("TresLineBasicMaterial",{color:8421504},null,-1)]),8,ee),B(H,{ref_key:"XRcomRef",ref:o,sessionInit:{optionalFeatures:["depth-sensing"],depthSensing:{usagePreference:["gpu-optimized"],dataFormatPreference:[]}}},null,512),(I(),C(z,null,{default:A((()=>[o.value?(I(),C($,{key:0,XRcom:o.value},null,8,["XRcom"])):E("",!0)])),_:1}))],64))}}),ne=_({__name:"ballShooter",setup(e){const n=k({clearColor:"#444444",antialias:!0,renderMode:"demand",windowSize:!0});return(e,s)=>{const a=G("TresCanvas");return I(),C(a,q(F(n)),{default:A((()=>[s[0]||(s[0]=T("TresPerspectiveCamera",{position:[0,1.6,3],fov:50,near:.1,far:100},null,-1)),B(P(t)),s[1]||(s[1]=T("TresHemisphereLight",{args:[12303291,8947848,3]},null,-1)),s[2]||(s[2]=T("TresDirectionalLight",{position:[1,1,1],intensity:3},null,-1)),B(te)])),_:1},16)}}});export{ne as default};
