import{_ as t,V as n,a0 as e,at as o,T as r,ai as a}from"./three.ewwqFbMB1726139596986.js";import{U as i,z as s,Y as c,L as l}from"./@tresjs.ml1V726H1726139596986.js";import"./index.L1loL-fg1726139596986.js";import{a as u}from"./simplex-noise.P9JMzoHY1726139596986.js";import{C as f}from"./index.BN5GHgZp1726139596986.js";import{d as p,a4 as h,o as m,E as v,L as d,u as g,r as x,f as w,g as y,j as b,aj as _,ak as z,al as M}from"./@vue.JNsx1iN61726139596986.js";import{_ as j}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.dHrsogRN1726139596986.js";import"./@vueuse.leIfNolX1726139596986.js";import"./lamina.8lO-BYQz1726139596986.js";import"./glsl-tokenizer.AMiuccS21726139596986.js";import"./@amap.Fadeb9eG1726139596986.js";import"./glsl-token-descope.zcUtT4Wy1726139596986.js";import"./glsl-token-depth.TUweh8uf1726139596986.js";import"./glsl-token-scope.Jq0_C9Mo1726139596986.js";import"./glsl-token-properties.htjL0f_51726139596986.js";import"./glsl-token-assignments.EU2rkl0S1726139596986.js";import"./glsl-token-string.sQYJMTSX1726139596986.js";import"./glsl-token-functions.JTK3IqoC1726139596986.js";import"./object-hash.FoPRLmFN1726139596986.js";import"./jszip.fP2cdsII1726139596986.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.7IQnmKqH1726139596986.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.Gg5SQEjg1726139596986.js";import"./three-stdlib.XegO5T8a1726139596986.js";import"./@pmndrs.i3ABMTfO1726139596986.js";import"./utils.JlbtvQn_1726139596986.js";const I=A;function A(t,n){const e=F();return(A=function(t,n){return e[t-=105]})(t,n)}!function(t,n){const e=A,o=F();for(;;)try{if(646500===parseInt(e(131))/1+-parseInt(e(137))/2*(parseInt(e(160))/3)+-parseInt(e(112))/4+parseInt(e(159))/5+-parseInt(e(181))/6*(-parseInt(e(116))/7)+-parseInt(e(153))/8+parseInt(e(167))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[A(148)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){C(this,(function(){const t=A,n=new RegExp(t(142)),e=new RegExp(t(120),"i"),o=H(t(117));n[t(147)](o+t(143))&&e[t(147)](o+t(132))?H():o("0")}))()}();const S=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[A(148)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function F(){const t=["gger","bind","5133904izrkoU","console","geometry","alphaMap","21CEQIJe","init","lookAt","#000f00","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","width","TresMeshStandardMaterial","PlaneGeometry","DoubleSide","halfRootAngleCosF32","string","value","toneMapped","stretchesF32","orientationsF32","1063770QTteIf","input","InstancedBufferAttribute","attributes-uv","Color","needsUpdate","1444plTTYc","__proto__","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","attributes-orientation","function *\\( *\\)","chain","normalize","attributes-position","sin","test","apply","trace","debu","convertSRGBToLinear","toString","470776NFBhFB","instances","exception","attributes-offset","attributes","random","6398565ZCoFnE","5316ptjITV","grass","constructor","map","stateObject","push","time","4912497kEmfpp","call","attributes-stretch","computeVertexNormals","action",'{}.constructor("return this")( )',"translate","array","length","Vector3","log","index","cos","TresMesh","757782qgAaSc","Vector4","joints","return (function() ","halfRootAngleSinF32","side","set","uniforms","position","attributes-halfRootAngleCos"];return(F=function(){return t})()}S(void 0,(function(){const t=A,n=function(){const t=A;let n;try{n=Function(t(184)+t(172)+");")()}catch(e){n=window}return n}(),e=n[t(113)]=n[t(113)]||{},o=[t(177),"warn","info","error",t(155),"table",t(149)];for(let r=0;r<o[t(175)];r++){const n=S.constructor.prototype[t(111)](S),a=o[r],i=e[a]||n;n[t(138)]=S.bind(S),n.toString=i[t(152)][t(111)](i),e[a]=n}}))();const k=["material"],D=[I(178),I(145),I(134),I(156),I(141),I(169),"attributes-halfRootAngleSin",I(109)],R=[I(114)],E=[I(105)],T=p({__name:I(161),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(a){const c=I;let l,p;const x=([l,p]=h((()=>s({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),l=await l,p(),l),w=a,y=u(Math.random);function b(n,e){const o=A,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,a=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,i=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,s=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(182)])(r,a,i,s)}function _(t,n){var e=2*y(t/50,n/50);return e+=4*y(t/100,n/100),e+=.2*y(t/10,n/10)}const z=function(e,a){const i=A,s=[],c=[],l=[],u=[],f=[];let p=new(t[i(182)]),h=new o;const m=-.25;for(let o=0;o<e;o++){const r=Math[i(158)]()*a-a/2,v=Math.random()*a-a/2,d=_(r,v);s.push(r,d,v);let g=Math.PI-Math[i(158)]()*(2*Math.PI);u[i(165)](Math[i(146)](.5*g)),f[i(165)](Math[i(179)](.5*g));let x=new n(0,1,0),w=x.x*Math[i(146)](g/2),y=x.y*Math[i(146)](g/2),z=x.z*Math[i(146)](g/2),M=Math.cos(g/2);p[i(106)](w,y,z,M)[i(144)](),g=.5*Math[i(158)]()+m,x=new(t[i(176)])(1,0,0),w=x.x*Math.sin(g/2),y=x.y*Math[i(146)](g/2),z=x.z*Math.sin(g/2),M=Math.cos(g/2),h[i(106)](w,y,z,M).normalize(),p=b(p,h),g=.5*Math.random()+m,x=new(t[i(176)])(0,0,1),w=x.x*Math[i(146)](g/2),y=x.y*Math[i(146)](g/2),z=x.z*Math.sin(g/2),M=Math.cos(g/2),h[i(106)](w,y,z,M)[i(144)](),p=b(p,h),c[i(165)](p.x,p.y,p.z,p.w),o<e/3?l[i(165)](1.8*Math[i(158)]()):l[i(165)](Math[i(158)]())}return{offsetsF32:new(t[i(133)])(new Float32Array(s),3),orientationsF32:new(t[i(133)])(new Float32Array(c),4),stretchesF32:new r(new Float32Array(l),1),halfRootAngleCosF32:new(t[i(133)])(new Float32Array(f),1),halfRootAngleSinF32:new(t[i(133)])(new Float32Array(u),1)}}(w[c(154)],w[c(121)]),M=new(t[c(123)])(w.bW,w.bH,1,w[c(183)])[c(173)](0,w.bH/2,0),j=new(t[c(123)])(w[c(121)],w[c(121)],32,32);j[c(118)](new n(0,1,0));const C=j.attributes[c(108)];for(let t=0;t<C[c(174)][c(175)];t+=3)C[c(174)][t+1]=_(C[c(174)][t],C.array[t+2]);j[c(157)][c(108)][c(136)]=!0,j[c(170)]();const S=new(f({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(t[c(135)])(.3,.9,0)[c(151)](),bottomColor:new(t[c(135)])(0,.2,0)[c(151)]()},c(140),c(139),(n=>{const e=c;n.side=t[e(124)]})));S[c(163)]=x.map,S.alphaMap=x[c(115)],S[c(128)]=!1;const{onLoop:F}=i();return F((({elapsed:t})=>{const n=c;S[n(107)][n(166)][n(127)]=t/4})),(t,n)=>{const o=c;return m(),v("TresGroup",null,[d(o(180),{material:g(S)},[d("TresInstancedBufferGeometry",{index:g(M)[o(178)],"attributes-position":g(M)[o(157)][o(108)],"attributes-uv":g(M)[o(157)].uv,"attributes-offset":g(z).offsetsF32,"attributes-orientation":g(z)[o(130)],"attributes-stretch":g(z)[o(129)],"attributes-halfRootAngleSin":g(z)[o(185)],"attributes-halfRootAngleCos":g(z)[o(125)]},null,8,D)],8,k),d(o(180),{position:[0,0,0],geometry:g(j)},[d(o(122),{color:o(119),side:e},null,8,E)],8,R)])}}});function H(t){function n(t){const e=A;if(typeof t===e(126))return function(t){}.constructor("while (true) {}")[e(148)]("counter");1!==(""+t/t)[e(175)]||t%20==0?function(){return!0}.constructor(e(150)+"gger")[e(168)](e(171)):function(){return!1}[e(162)](e(150)+e(110))[e(148)](e(164)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const L=P;!function(t,n){const e=P,o=V();for(;;)try{if(178110===parseInt(e(259))/1+parseInt(e(247))/2*(parseInt(e(266))/3)+parseInt(e(275))/4+parseInt(e(282))/5+-parseInt(e(270))/6+-parseInt(e(258))/7*(parseInt(e(253))/8)+parseInt(e(255))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[P(264)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){B(this,(function(){const t=P,n=new RegExp(t(265)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=N("init");n.test(o+t(273))&&e[t(261)](o+t(249))?N():o("0")}))()}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[P(264)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function P(t,n){const e=V();return(P=function(t,n){return e[t-=247]})(t,n)}O(void 0,(function(){const t=P;let n;try{n=Function('return (function() {}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(257)]=n[t(257)]||{},o=[t(276),t(280),t(272),t(252),t(251),"table",t(254)];for(let a=0;a<o[t(262)];a++){const n=O[t(274)][t(271)][t(248)](O),r=o[a],i=e[r]||n;n[t(278)]=O[t(248)](O),n[t(277)]=i.toString[t(248)](i),e[r]=n}}))();const U=d(L(281),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1),q=p({__name:L(269),setup(t){const n=x({alpha:!0,toneMapping:a,windowSize:!0,clearColor:6710886}),e=x({enableDamping:!0,autoRotate:!1});return(t,o)=>(m(),w(g(l),_(z(n)),{default:y((()=>[U,b(g(c),_(z(e)),null,16),(m(),w(M,null,{default:y((()=>[b(T)])),_:1})),(m(),w(M,null,{default:y((()=>[b(g(j),{texture:"https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr"})])),_:1}))])),_:1},16))}});function V(){const t=["217794bFCFcK","stateObject","test","length","debu","apply","function *\\( *\\)","267hAqTCc","gger","counter","grass","1725720sIlzSN","prototype","info","chain","constructor","1249784ZzppJI","log","toString","__proto__","action","warn","TresPerspectiveCamera","451855IDHSvX","804dEhrUa","bind","input","call","exception","error","1712336QhSmKf","trace","210447DraSvC","while (true) {}","console","7QHHHSV"];return(V=function(){return t})()}function N(t){function n(t){const e=P;if("string"==typeof t)return function(t){}[e(274)](e(256))[e(264)](e(268));1!==(""+t/t)[e(262)]||t%20==0?function(){return!0}[e(274)](e(263)+"gger")[e(250)](e(279)):function(){return!1}[e(274)](e(263)+e(267)).apply(e(260)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{q as default};
