import{a as t,r as n,N as e,d as o}from"./@tresjs.rn1P_YDI1719803971187.js";import{j as r,a5 as s,aj as a,r as i,s as c,Y as l,W as u,be as v,k as f,az as p,bV as d,bj as m}from"./three.BsQyBKrV1719803971187.js";import{P as g}from"./tweakpane.qqn77PB81719803971187.js";import{d as x,a3 as h,e as y,o as I,f as b,g as _,J as S,j as U,u as w,aj as P,ak as D,al as E,m as A}from"./@vue.CpOXM7bB1719803971187.js";import{_ as L}from"./@fesjs.OMA0Tumj1719803971187.js";import"./@vueuse.T5wlwfAk1719803971187.js";import"./vue-router.nza8fidy1719803971187.js";import"./lodash-es.nFpJXAf-1719803971187.js";import"./@qlin.yHhFDldE1719803971187.js";import"./pinia.Gj9UzxIP1719803971187.js";import"./@floating-ui.BPbuo5Gx1719803971187.js";import"./@juggle.7yjBMqoW1719803971187.js";function z(){const t=["send","call","298273NndrZt","hasOwnProperty","error","log","WagnerLoadShaderException","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","bind","message","Vector2",'Shader "',"27FzjReR","string","input","onabort","Vector3","open","get","ShaderMaterial","v3v","trace","function *\\( *\\)","name","constructor","gger","546hMvzLS","test","type","apply","lastIndex","Texture","return (function() ","5228824zhSLwB","while (true) {}","chain","onerror","length","console","\" couldn't be loaded.","isArray","Matrix4","Vector4","Matrix2",'" load was aborted.',"value","table","replace","warn","debu","counter","3984640bxmvNc","init","toString","stateObject","index","3357AzHTir","Matrix3","7gqWiCX","prototype","3067002LrNpml","__proto__","159130ahpmHy","310TfmhAy","exec","42324gvQpaP","info"];return(z=function(){return t})()}function M(t,n){const e=z();return(M=function(t,n){return e[t-=352]})(t,n)}!function(t,n){const e=M,o=z();for(;;)try{if(381265===parseInt(e(392))/1+-parseInt(e(416))/2*(parseInt(e(379))/3)+parseInt(e(388))/4*(parseInt(e(386))/5)+-parseInt(e(383))/6+parseInt(e(381))/7*(parseInt(e(356))/8)+-parseInt(e(402))/9*(parseInt(e(385))/10)+-parseInt(e(374))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[M(352)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){C(this,(function(){const t=M,n=new RegExp(t(412)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=T(t(375));n[t(417)](o+t(358))&&e[t(417)](o+t(404))?T():o("0")}))()}();const F=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[M(352)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();F(void 0,(function(){const t=M,n=function(){const t=M;let n;try{n=Function(t(355)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(361)]=n[t(361)]||{},o=[t(395),t(371),t(389),t(394),"exception",t(369),t(411)];for(let r=0;r<o.length;r++){const n=F.constructor[t(382)][t(398)](F),s=o[r],a=e[s]||n;n[t(384)]=F[t(398)](F),n.toString=a[t(376)][t(398)](a),e[s]=n}}))();function N(t,n,e){const o=M;if("object"!=typeof t||null===t)return t;const r=Array[o(363)](t)?[]:{};for(const s in t)t[o(393)](s)&&(r[s]=N(t[s])),s==n&&(r[n]=e);return r}function T(t){function n(t){const e=M;if(typeof t===e(403))return function(t){}.constructor(e(357))[e(352)](e(373));1!==(""+t/t)[e(360)]||t%20==0?function(){return!0}[e(414)](e(372)+e(415))[e(391)]("action"):function(){return!1}.constructor(e(372)+e(415)).apply(e(377)),n(++t)}try{if(t)return n;n(0)}catch(e){}}function R(){const t=["resolution","RGBFormat","apply","settings",'{}.constructor("return this")( )',"addPass","now","set","3554888pjLbjs","material","quad","useRGBA","passItems","Scene","chain","debu","innerHeight","innerWidth","381451LUVjzs","while (true) {}","params","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","UnsignedByteType","tInput","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","uuid","constructor","console","warn","3455050FoEpXZ","input","startTime","projectionMatrix","back","height","makeOrthographic","scale","push","RGBAFormat","pass","getOfflineTexture","prototype","table","near","counter","LinearFilter","camera","bind","time","renderer","ClampToEdgeWrapping","length","swapBuffers","Reset","gger","2234bracAB","passes","minFilter","render","Stack","front","action","14312628BiKALp","wrapT","scene","toScreen","info","trace","width","setRenderTarget","texture","9ZosiRW","Pass","setSize","function *\\( *\\)","wrapS","shader","CopyPass","loadShadervf","string","42QLxPNj","298179ILLeEQ","magFilter","splice","onWindowResize","test","uniforms","393uyWhYi","copyPass","__proto__","OrthographicCamera","read","toString","stencilBuffer","5jUMbGJ","value","call","type","1008092OgKfYL","write","clone"];return(R=function(){return t})()}const j=V;!function(t,n){const e=V,o=R();for(;;)try{if(322024===-parseInt(e(503))/1+parseInt(e(477))/2*(-parseInt(e(408))/3)+-parseInt(e(419))/4*(parseInt(e(415))/5)+-parseInt(e(502))/6*(parseInt(e(440))/7)+parseInt(e(430))/8+parseInt(e(493))/9*(-parseInt(e(451))/10)+parseInt(e(484))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[V(424)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){G(this,(function(){const t=V,n=new RegExp(t(496)),e=new RegExp(t(446),"i"),o=O("init");n[t(406)](o+t(436))&&e[t(406)](o+t(452))?O():o("0")}))()}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function V(t,n){const e=R();return(V=function(t,n){return e[t-=405]})(t,n)}B(void 0,(function(){const t=V;let n;try{n=Function("return (function() "+t(426)+");")()}catch(r){n=window}const e=n[t(449)]=n[t(449)]||{},o=["log",t(450),t(488),"error","exception",t(464),t(489)];for(let s=0;s<o.length;s++){const n=B[t(448)][t(463)][t(469)](B),r=o[s],a=e[r]||n;n[t(410)]=B[t(469)](B),n[t(413)]=a.toString[t(469)](a),e[r]=n}}))();class H{constructor(t,n){const e=V;this[e(490)]=1,this[e(456)]=1,this[e(425)]=n||{},this[e(433)]=this[e(425)][e(433)]||!1,this[e(471)]=t,this[e(409)]=this[e(499)](this[e(425)]),this[e(486)]=new(s[e(435)]),this.quad=new i(new c(1,1),new l),this[e(486)].add(this[e(432)]),this[e(468)]=new(s[e(411)])(1,1,1,1,-1e4,1e4),this[e(482)]=new u(1,1,{minFilter:void 0!==this[e(425)][e(479)]?this.settings[e(479)]:s[e(467)],magFilter:void 0!==this[e(425)][e(504)]?this[e(425)][e(504)]:s[e(467)],wrapS:void 0!==this.settings[e(497)]?this[e(425)][e(497)]:v,wrapT:void 0!==this[e(425)][e(485)]?this[e(425)][e(485)]:s[e(472)],format:this[e(433)]?s[e(460)]:s[e(423)],type:void 0!==this.settings[e(418)]?this[e(425)][e(418)]:s[e(444)],stencilBuffer:void 0===this.settings[e(414)]||this[e(425)][e(414)]}),this[e(455)]=this[e(482)][e(421)](),this[e(453)]=Date[e(428)](),this[e(478)]={},this.Stack={passItems:[],passes:[]}}[j(427)](t,n,e,o){const r=j;this[r(500)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(498)]};this[r(481)].passItems[r(459)](s)}removePass(t){const n=j;for(let e=this[n(481)][n(434)][n(473)]-1;e>=0;e--)this[n(481)][n(434)][e][n(447)]===parseInt(t)&&this.Stack[n(434)][n(505)](e,1);console.log(this[n(481)][n(434)])}CopyPass(){const t=j;this[t(494)][t(417)](this);return this[t(500)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}loadShadervf(t){const n=j,e=n(443);return this.shader=function(t,n){const e=M,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,i=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,c={sampler2D:{type:"t",value:()=>new(s[M(354)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(s[M(400)])},vec3:{type:"v3",value:()=>new(s[M(406)])},vec4:{type:"v4",value:()=>new a},bvec2:{type:"v2",value:()=>new(s[M(400)])},bvec3:{type:"v3",value:()=>new(s[M(406)])},bvec4:{type:"v4",value:()=>new(s[M(365)])},ivec2:{type:"v2",value:()=>new(s[M(400)])},ivec3:{type:"v3",value:()=>new(s[M(406)])},ivec4:{type:"v4",value:()=>new(s[M(365)])},mat2:{type:"v2",value:()=>new(s[M(366)])},mat3:{type:"v3",value:()=>new(s[M(380)])},mat4:{type:"v4",value:()=>new(s[M(364)])}},l={float:{type:"fv",value:()=>[]},vec3:{type:e(410),value:()=>[]}};let u;const v={resolution:{type:"v2",value:new r(1,1),default:!0},time:{type:"f",value:Date.now(),default:!0},tInput:{type:"t",value:new(s[e(354)]),default:!0}};let f,p;for(;null!==(u=o.exec(n));)u[e(378)]===o.lastIndex&&o[e(353)]++,f=u[1],p=u[2],v[p]={type:c[f][e(418)],value:c[f][e(368)]()};for(;null!==(u=i[e(387)](n));)u[e(378)]===o[e(353)]&&o[e(353)]++,f=u[1],p=u[2],u[3],v[p]={type:l[f][e(418)],value:l[f][e(368)]()};return new(s[e(409)])({uniforms:v,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(498)]}Pass(t){const n=j;this[n(498)]=null,this[n(442)]={}}[j(475)](){const t=j;this[t(412)]=this.front,this.write=this[t(455)]}[j(405)](t,n){const e=j,o=window[e(439)],r=window[e(438)];t.setSize(1*o,1*r),n[e(454)].makePerspective(70,o/r,n[e(465)],n.far),this[e(495)](o,r);return this[e(462)](o,r,!0)}setSize(t,n){const e=j;this[e(490)]=t,this.height=n,this[e(468)][e(454)][e(457)](t/-2,t/2,n/2,n/-2,this.camera[e(465)],this.camera.far),this.quad[e(458)][e(429)](t,n,1),this.front.setSize(t,n),this[e(455)].setSize(t,n)}[j(462)](t,n,e){const o=j;return new u(t,n,{minFilter:s[o(467)],magFilter:s[o(467)],format:e?s[o(460)]:void 0})}render(t,n,e,o){const r=j;this[r(471)][r(491)](this[r(420)]),this[r(471)][r(480)](t,n),o||this[r(474)]()}[j(474)](){const t=j,n=this[t(420)];this.write=this[t(412)],this.read=n}[j(461)](){const t=j;for(let n=0;n<this[t(481)][t(434)][t(473)];n++){const e=this[t(481)][t(434)][n].shader,o=this.Stack[t(434)][n].params;if(this[t(471)][t(491)](this[t(420)]),e instanceof f){this[t(432)][t(431)]=e,this[t(432)].material[t(407)][t(445)][t(416)]=this.read[t(492)],this[t(432)][t(431)][t(407)][t(422)][t(416)][t(429)](this[t(490)],this[t(456)]),this[t(432)][t(431)][t(407)][t(470)][t(416)]=.001*(Date[t(428)]()-this[t(453)]);for(const n in o)this[t(432)][t(431)][t(407)][n].value=o[n];this[t(471)][t(480)](this[t(486)],this[t(468)]),this.swapBuffers()}}}[j(487)](t,n){const e=j;this[e(471)].setRenderTarget(null),this[e(432)][e(431)]=this.copyPass,this.quad[e(431)][e(407)].tInput[e(416)]=this[e(412)].texture,this[e(432)][e(431)].uniforms[e(422)][e(416)][e(429)](this[e(490)],this[e(456)]),this[e(471)].render(this[e(486)],this[e(468)])}}function O(t){function n(t){const e=V;if(typeof t===e(501))return function(t){}[e(448)](e(441))[e(424)](e(466));1!==(""+t/t)[e(473)]||t%20==0?function(){return!0}[e(448)](e(437)+e(476)).call(e(483)):function(){return!1}[e(448)](e(437)+e(476)).apply("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const k="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",W=$;function X(){const t=["test","toString","table","input","length","CIRCULARPass","Vector2","BufferGeometry","title","function *\\( *\\)","2NhieTa","init","22314isGbiS","移除~","addFolder","4285744yskIeZ","TOONPass","plugins/postProcessing/image/1324.jpg","chain","call","684Hvsvrc","DENOISEPass","values","click","addBlade",'{}.constructor("return this")( )',"2097832AidWiJ","1765hXWXpS","string","POISSONPass","DOTPass","random","Reset","prototype","map","value","removePass","251880kMQEyk","apply","bind","VIGNETTE1Pass","console","VIGNETTE2Pass","debu","add","785421QMwNfn","postProcessing","label","push","新增通道","SNOISEPass","FREICHENPass","trace","InvertPass","CGAPass","Mesh","addButton","addPass","translate","868789HPGvCh","info","BOXBLURPass","keys","gger","后处理类型","SEPIAPass","mergeGeometries","__proto__","5628448soKZDM","constructor","return (function() ","target","text","error","pass","stateObject","receiveShadow"];return(X=function(){return t})()}!function(t,n){const e=$,o=X();for(;;)try{if(785227===parseInt(e(492))/1*(parseInt(e(520))/2)+parseInt(e(478))/3+parseInt(e(459))/4+-parseInt(e(460))/5*(-parseInt(e(522))/6)+-parseInt(e(501))/7+parseInt(e(525))/8+-parseInt(e(530))/9*(parseInt(e(470))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[$(471)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){q(this,(function(){const t=$,n=new RegExp(t(519)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=J(t(521));n.test(o+t(528))&&e[t(510)](o+t(513))?J():o("0")}))()}();const Z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[$(471)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function $(t,n){const e=X();return($=function(t,n){return e[t-=455]})(t,n)}Z(void 0,(function(){const t=$;let n;try{n=Function(t(503)+t(458)+");")()}catch(r){n=window}const e=n[t(474)]=n[t(474)]||{},o=["log","warn",t(493),t(506),"exception",t(512),t(485)];for(let s=0;s<o[t(514)];s++){const n=Z[t(502)][t(466)][t(472)](Z),r=o[s],a=e[r]||n;n[t(500)]=Z.bind(Z),n[t(511)]=a[t(511)].bind(a),e[r]=n}}))();function J(t){function n(t){const e=$;if(typeof t===e(461))return function(t){}.constructor("while (true) {}")[e(471)]("counter");1!==(""+t/t).length||t%20==0?function(){return!0}[e(502)]("debu"+e(496))[e(529)]("action"):function(){return!1}[e(502)](e(476)+e(496)).apply(e(508)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const Q=L(x({__name:W(479),async setup(o){const r=W;let a,i;const{camera:c,renderer:l,scene:u,sizes:v}=t();for(var f=new(s[r(517)]),x=[],y=0;y<100;y++){var I=new p(100,100,100);I[r(491)](1500*Math.random(),1500*Math[r(464)](),1500*Math.random()),x[r(481)](I)}f=d[r(499)](x);const b=([a,i]=h((()=>e({map:r(527)}))),a=await a,i(),a),_=([a,i]=h((()=>e({map:"plugins/postProcessing/image/1324-normal.jpg"}))),a=await a,i(),a);var S=new m({map:b[r(467)],normalMap:_[r(467)],normalScale:new(s[r(516)])(.8,-.8),shininess:100}),U=new(s[r(488)])(f,S);U.castShadow=!0,U[r(509)]=!0,u.value[r(477)](U);const w=new H(l[r(468)],{useRGBA:!0}),P=new g;let D=null,E=[{text:r(486),value:{InvertPass:k}},{text:"FXAAPass",value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:r(498),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:r(483),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:r(494),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:r(531),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:r(487),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:_[r(467)]}}},{text:"SOBELPass",value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:"RGBPass",value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:r(463),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:r(515),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:r(462),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:r(473),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:r(475),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:r(484),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:r(526),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],A="InvertPass",L=k,z=null;P.addBlade({view:"list",label:r(497),options:E,value:""}).on("change",(t=>{D=t.value}));const M=P[r(489)]({title:"新增",label:r(482)});let C=0;M.on("click",(t=>{const n=r;A=Object[n(495)](D)[0],L=Object[n(455)](D)[0],z=Object[n(455)](D)[1];let e=C++,o=P[n(524)]({title:A});for(const r in z){let t=z[r];o[n(457)]({view:n(505),label:r,parse:t=>String(t),value:t})}o[n(489)]({title:n(523)+e,label:"关闭通道"}).on(n(456),(t=>{const e=n;let o=t[e(504)][e(518)].split("~")[1];w[e(469)](o)})).on(n(456),(()=>{o.dispose()}));let s=N(z,t.target[n(480)],t.value);w[n(490)](A,L,s,e)})),w.onWindowResize(l.value,c[r(468)]);const{onLoop:F}=n();return F((({delta:t})=>{const n=r;U&&(l.value.autoClearColor=!0,w[n(465)](),U.material=S,w.render(u.value,c[n(468)]),w[n(507)](),w.toScreen(u[n(468)],c[n(468)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),K=nt;!function(t,n){const e=nt,o=st();for(;;)try{if(742782===-parseInt(e(458))/1+parseInt(e(440))/2*(-parseInt(e(457))/3)+-parseInt(e(449))/4*(-parseInt(e(473))/5)+-parseInt(e(441))/6+-parseInt(e(471))/7+-parseInt(e(438))/8*(-parseInt(e(445))/9)+parseInt(e(469))/10*(parseInt(e(436))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Y=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){Y(this,(function(){const t=nt,n=new RegExp(t(439)),e=new RegExp(t(468),"i"),o=it("init");n[t(442)](o+t(472))&&e[t(442)](o+t(443))?it():o("0")}))()}();const tt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function nt(t,n){const e=st();return(nt=function(t,n){return e[t-=435]})(t,n)}tt(void 0,(function(){const t=nt,n=function(){const t=nt;let n;try{n=Function(t(480)+t(467)+");")()}catch(e){n=window}return n}(),e=n.console=n.console||{},o=[t(466),t(459),t(437),t(452),t(460),t(448),"trace"];for(let r=0;r<o.length;r++){const n=tt[t(435)][t(455)][t(447)](tt),s=o[r],a=e[s]||n;n[t(461)]=tt[t(447)](tt),n[t(463)]=a.toString[t(447)](a),e[s]=n}}))();const et={ref:K(454),position:[600,850,-1500],fov:45,near:.1,far:1e5},ot=S(K(446),{color:K(475),intensity:2},null,-1),rt=S(K(464),{position:[100,100,0],intensity:2,color:"#ffffff"},null,-1);function st(){const t=["#ffffff","stateObject","action","postProcessingEditor","#000000","return (function() ","constructor","7605004zSvOMl","info","64sAhIbO","function *\\( *\\)","2IJXVsg","2101218Wzwhni","test","input","debu","252801GdAHJP","TresAmbientLight","bind","table","59216tunEYt","string","while (true) {}","error","counter","perspectiveCameraRef","prototype","apply","4106976QtpUcI","419778BAimpP","warn","exception","__proto__","gger","toString","TresDirectionalLight","TresPerspectiveCamera","log",'{}.constructor("return this")( )',"\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","40TPiKJh","length","3556847rtRzpy","chain","135UCcHDA","TresCanvas"];return(st=function(){return t})()}const at=x({__name:K(478),setup(t){const e=K,r={clearColor:e(479),shadows:!0,alpha:!1,useLegacyLights:!0},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=y(a(474));return I(),b(i,A(r,{"window-size":""}),{default:_((()=>[S(a(465),et,null,512),U(w(o),P(D(s)),null,16),ot,rt,(I(),b(E,null,{default:_((()=>[U(Q)])),_:1}))])),_:1},16)}}});function it(t){function n(t){const e=nt;if(typeof t===e(450))return function(t){}.constructor(e(451)).apply(e(453));1!==(""+t/t)[e(470)]||t%20==0?function(){return!0}.constructor("debugger").call(e(477)):function(){return!1}[e(435)](e(444)+e(462))[e(456)](e(476)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{at as default};
