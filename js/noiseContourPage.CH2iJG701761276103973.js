import{F as e,n,_ as r,K as s}from"./@tresjs.B_KjVy0E1761276103973.js";import{J as o,b1 as a,r as t,d as i,cO as l,cv as u,ct as f,a6 as v}from"./three.Bhn4-0ry1761276103973.js";import{d as m,w as d,a3 as c,G as p,o as h,I as g,u as x,F as D,g as w,b as y,e as S,h as R,ap as C,m as P}from"./@vue.CKlgtJke1761276103973.js";import"./postprocessing.CeTFUAN_1761276103973.js";import"./@vueuse.wtfleElW1761276103973.js";const T=["side","rotation-x"],E=["side"],N="\n    varying vec2 vUv;\n    void main() {\n        vec4 mvPosition = modelViewMatrix * vec4(position, 1.);\n        gl_Position = projectionMatrix * mvPosition;\n        vUv = uv;\n    }\n",M=m({__name:"noiseContour",setup(s){const{camera:m,renderer:w,scene:y,sizes:S}=e(),{state:R}=n("./plugins/shadertoyToThreejs/image/noise.png"),{onRender:C}=r(),P=new o(1,1,{minFilter:t,magFilter:t,format:a,stencilBuffer:!1}),M=new i(window.innerWidth,window.innerHeight);let U=null;const _=new l({uniforms:{tDiffuse:{type:"t",value:null},tShadow:{type:"t",value:null},iResolution:{type:"v2",value:M}},vertexShader:N,fragmentShader:"\n    uniform sampler2D tDiffuse;\n    uniform sampler2D tShadow;\n    uniform vec2 iResolution;\n\n    varying vec2 vUv;\n    #define Sensitivity (vec2(0.3, 1.5) * iResolution.y / 400.0)\n    float checkSame(vec4 center, vec4 samplef)\n    {\n        vec2 centerNormal = center.xy;\n        float centerDepth = center.z;\n        vec2 sampleNormal = samplef.xy;\n        float sampleDepth = samplef.z;\n\n        vec2 diffNormal = abs(centerNormal - sampleNormal) * Sensitivity.x;\n        bool isSameNormal = (diffNormal.x + diffNormal.y) < 0.1;\n        float diffDepth = abs(centerDepth - sampleDepth) * Sensitivity.y;\n        bool isSameDepth = diffDepth < 0.1;\n\n        return (isSameNormal && isSameDepth) ? 1.0 : 0.0;\n    }\n\n    void main( )\n    {\n        vec4 sample0 = texture2D(tDiffuse, vUv);\n        vec4 sample1 = texture2D(tDiffuse, vUv + (vec2(1.0, 1.0) / iResolution.xy));\n        vec4 sample2 = texture2D(tDiffuse, vUv + (vec2(-1.0, -1.0) / iResolution.xy));\n        vec4 sample3 = texture2D(tDiffuse, vUv + (vec2(-1.0, 1.0) / iResolution.xy));\n        vec4 sample4 = texture2D(tDiffuse, vUv + (vec2(1.0, -1.0) / iResolution.xy));\n\n        float edge = checkSame(sample1, sample2) * checkSame(sample3, sample4);\n\n        // gl_FragColor = vec4(edge, sample0.w, 1.0, 1.0);\n        float shadow = texture2D(tShadow, vUv).x;\n        gl_FragColor = vec4(edge, shadow, 1.0, 1.0);\n\n    }\n"});let b={uniforms:{tDiffuse:{type:"t",value:null},iTime:{type:"f",value:0},tNoise:{type:"t",value:null}},vertexShader:N,fragmentShader:"\nuniform sampler2D tDiffuse;\nuniform sampler2D tNoise;\nuniform float iTime;\n\nvarying vec2 vUv;\n\n#define EdgeColor vec4(0.2, 0.2, 0.15, 1.0)\n#define BackgroundColor vec4(1,0.95,0.85,1)\n#define NoiseAmount 0.01\n#define ErrorPeriod 30.0\n#define ErrorRange 0.003\n\n// Reference: https://www.shadertoy.com/view/MsSGD1\nfloat triangle(float x)\n{\n    return abs(1.0 - mod(abs(x), 2.0)) * 2.0 - 1.0;\n}\n\nfloat rand(float x)\n{\n    return fract(sin(x) * 43758.5453);\n}\n\nvoid main()\n{\n    float time = floor(iTime * 16.0) / 16.0;\n    vec2 uv = vUv;\n    uv += vec2(triangle(uv.y * rand(time) * 1.0) * rand(time * 1.9) * 0.005,\n            triangle(uv.x * rand(time * 3.4) * 1.0) * rand(time * 2.1) * 0.005);\n\n    float noise = (texture2D(tNoise, uv * 0.5).r - 0.5) * NoiseAmount;\n    vec2 uvs[3];\n    uvs[0] = uv + vec2(ErrorRange * sin(ErrorPeriod * uv.y + 0.0) + noise, ErrorRange * sin(ErrorPeriod * uv.x + 0.0) + noise);\n    uvs[1] = uv + vec2(ErrorRange * sin(ErrorPeriod * uv.y + 1.047) + noise, ErrorRange * sin(ErrorPeriod * uv.x + 3.142) + noise);\n    uvs[2] = uv + vec2(ErrorRange * sin(ErrorPeriod * uv.y + 2.094) + noise, ErrorRange * sin(ErrorPeriod * uv.x + 1.571) + noise);\n\n    float edge = texture2D(tDiffuse, uvs[0]).r * texture2D(tDiffuse, uvs[1]).r * texture2D(tDiffuse, uvs[2]).r;\n    float diffuse = texture2D(tDiffuse, uv).g;\n\n    float w = fwidth(diffuse) * 2.0;\n    vec4 mCol = mix(BackgroundColor * 0.5, BackgroundColor, mix(0.0, 1.0, smoothstep(-w, w, diffuse - 0.3)));\n    gl_FragColor = mix(EdgeColor, mCol, edge);\n}\n"};d(()=>R.value,e=>{e&&(b.uniforms.tNoise.value=e)});const j=new l(b);return j.renderToScreen=!0,c(()=>{S.width.value&&w&&y.value&&m.value&&(U&&U.dispose(),U=new u(w),U.addPass(new f(y.value,m.value)),U.addPass(_),U.addPass(j))}),C(({elapsed:e})=>{w.render(y.value,m.value,P),_.uniforms.tShadow.value=P.texture,j.uniforms.iTime.value=e,U&&U.render()}),(e,n)=>(h(),p(D,null,[g("TresMesh",{ref:"noiseContourMeshRef2",side:x(v),position:[400,100,0],"rotation-x":2*Math.PI/360*90,"cast-shadow":""},[...n[0]||(n[0]=[g("TresBoxGeometry",{args:[400,400,400]},null,-1),g("TresMeshPhongMaterial",{color:"#ffffff",shininess:0},null,-1)])],8,T),g("TresMesh",{ref:"noiseContourMeshRef1",side:x(v),position:[0,150,0],"cast-shadow":""},[...n[1]||(n[1]=[g("TresSphereGeometry",{args:[50,32,32]},null,-1),g("TresMeshPhongMaterial",{color:"#ffffff",shininess:0},null,-1)])],8,E)],64))}}),U={ref:"perspectiveCameraRef",position:[600,750,-1221],fov:45,near:1,far:1e4},_=m({__name:"noiseContourPage",setup(e){const n={clearColor:"#000000",shadows:!0,alpha:!1,useLegacyLights:!0};return(e,r)=>{const o=w("TresCanvas");return h(),y(o,P(n,{"window-size":""}),{default:S(()=>[g("TresPerspectiveCamera",U,null,512),R(x(s)),r[0]||(r[0]=g("TresAmbientLight",{color:"#ffffff"},null,-1)),r[1]||(r[1]=g("TresDirectionalLight",{position:[400,400,400],intensity:1,color:"red"},null,-1)),(h(),y(C,null,{default:S(()=>[R(M)]),_:1}))]),_:1},16)}}});export{_ as default};
