import{m as t,e as n,b as e,U as o}from"./@tresjs.iUmyNPdW1730886807320.js";import{k as r,Y as s,_ as a,V as i,i as c,W as l,bg as u,n as v,m as f,bX as p}from"./three._P_a_E_Z1730886807320.js";import{P as m}from"./tweakpane.yHWGBmom1730886807320.js";import{d,a6 as g,e as x,o as h,f as y,g as I,J as b,j as _,u as S,aj as U,ak as w,al as P,m as D}from"./@vue.-THQH3GC1730886807320.js";import{_ as E}from"./@fesjs.rCnyFuNL1730886807320.js";import"./@vueuse.Uoe2bW0Q1730886807320.js";import"./vue-router.QnjVwwup1730886807320.js";import"./lodash-es.kYt-_xTG1730886807320.js";import"./@qlin.yHhFDldE1730886807320.js";import"./pinia.ZAQpp9No1730886807320.js";import"./vue-demi.C4xddsk91730886807320.js";import"./@floating-ui.BPbuo5Gx1730886807320.js";import"./@juggle.7yjBMqoW1730886807320.js";!function(t,n){const e=L,o=z();for(;;)try{if(191205===parseInt(e(260))/1*(-parseInt(e(226))/2)+parseInt(e(251))/3+parseInt(e(245))/4+parseInt(e(214))/5*(-parseInt(e(252))/6)+-parseInt(e(243))/7+parseInt(e(238))/8+-parseInt(e(247))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const M=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function L(t,n){const e=z();return(L=function(t,n){return e[t-=206]})(t,n)}!function(){M(this,(function(){const t=L,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(242),"i"),o=F(t(218));n[t(229)](o+t(241))&&e.test(o+t(234))?F():o("0")}))()}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(259)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function z(){const t=["console","WagnerLoadShaderException","input","bind","value","responseText","2286992PEawbD","counter","type","chain","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","1626912AIteVo","exec","870224WUMMlM","\" couldn't be loaded.","647082nLEhqv","Matrix2","error","hasOwnProperty","827145mjTgAz","66wvpYHT","toString","return (function() ","Vector4","exception","Matrix4","name","apply","1MSbani","message","log","trace","lastIndex","index","debu","get","Vector2","Vector3","ShaderMaterial","v3v","call","replace",'{}.constructor("return this")( )',"action","77495nYWPYf","onabort","length","while (true) {}","init","info","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","isArray","stateObject","send","onerror","now","226274cRJBST","constructor","table","test",'Shader "',"onload"];return(z=function(){return t})()}A(void 0,(function(){const t=L,n=function(){const t=L;let n;try{n=Function(t(254)+t(212)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(232)]||{},o=[t(262),"warn",t(219),t(249),t(256),t(228),t(263)];for(let r=0;r<o[t(216)];r++){const n=A[t(227)].prototype.bind(A),s=o[r],a=e[s]||n;n.__proto__=A[t(235)](A),n[t(253)]=a.toString[t(235)](a),e[s]=n}}))();function C(t,n,e){const o=L;if("object"!=typeof t||null===t)return t;const r=Array[o(221)](t)?[]:{};for(const s in t)t[o(250)](s)&&(r[s]=C(t[s])),s==n&&(r[n]=e);return r}function F(t){function n(t){const e=L;if("string"==typeof t)return function(t){}[e(227)](e(217))[e(259)](e(239));1!==(""+t/t)[e(216)]||t%20==0?function(){return!0}[e(227)](e(266)+"gger")[e(210)](e(213)):function(){return!1}[e(227)](e(266)+"gger")[e(259)](e(222)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const T=G;!function(t,n){const e=G,o=B();for(;;)try{if(878990===-parseInt(e(390))/1*(parseInt(e(456))/2)+-parseInt(e(449))/3*(parseInt(e(405))/4)+-parseInt(e(444))/5+parseInt(e(400))/6+-parseInt(e(462))/7*(parseInt(e(421))/8)+-parseInt(e(475))/9+parseInt(e(396))/10*(parseInt(e(384))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const N=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function B(){const t=["type","OrthographicCamera","magFilter","resolution","value","onWindowResize","toScreen","RGBFormat","UnsignedByteType","console","camera","7160675UinXNe","far","toString","Stack","height","1206267poWrqu","apply","swapBuffers","scale","material","back","call","203782KAqRWq","texture","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","loadShadervf","function *\\( *\\)","action","7jYLsbD","copyPass","info","quad","settings","front","Pass","test","add","LinearFilter","read","params","useRGBA","9371115LcgBcI","scene","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","renderer","makeOrthographic","addPass","tInput","Scene","wrapS","stateObject","uuid","near","innerWidth","Reset","11DIZMVn","log","CopyPass","set","passItems","MeshBasicMaterial","11VzKjTm","table","RGBAFormat","makePerspective","input","now","41437380jawnoI","debu","ClampToEdgeWrapping","uniforms","8979486MWQTPK","return (function() ",'{}.constructor("return this")( )',"length","while (true) {}","4hOVwOB","__proto__","startTime","prototype","write","setRenderTarget","getOfflineTexture","exception","projectionMatrix","bind","width","push","shader","constructor","time","init","6120552HlhyLG","minFilter","render","setSize","string","gger","wrapT","removePass","Mesh","counter","PlaneGeometry","stencilBuffer"];return(B=function(){return t})()}!function(){N(this,(function(){const t=G,n=new RegExp(t(460)),e=new RegExp(t(458),"i"),o=V(t(420));n[t(469)](o+"chain")&&e[t(469)](o+t(394))?V():o("0")}))()}();const R=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[G(450)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function G(t,n){const e=B();return(G=function(t,n){return e[t-=384]})(t,n)}R(void 0,(function(){const t=G,n=function(){const t=G;let n;try{n=Function(t(401)+t(402)+");")()}catch(e){n=window}return n}(),e=n[t(442)]=n[t(442)]||{},o=["log","warn",t(464),"error",t(412),t(391),"trace"];for(let r=0;r<o[t(403)];r++){const n=R.constructor[t(408)][t(414)](R),s=o[r],a=e[s]||n;n[t(406)]=R[t(414)](R),n[t(446)]=a.toString[t(414)](a),e[s]=n}}))();class j{constructor(t,n){const e=G;this[e(415)]=1,this[e(448)]=1,this[e(466)]=n||{},this[e(474)]=this[e(466)][e(474)]||!1,this[e(478)]=t,this[e(463)]=this.CopyPass(this[e(466)]),this.scene=new(a[e(482)]),this.quad=new(a[e(429)])(new(a[e(431)])(1,1),new(a[e(389)])),this[e(476)][e(470)](this[e(465)]),this.camera=new(a[e(434)])(1,1,1,1,-1e4,1e4),this.front=new l(1,1,{minFilter:void 0!==this[e(466)][e(422)]?this[e(466)][e(422)]:a[e(471)],magFilter:void 0!==this[e(466)][e(435)]?this.settings[e(435)]:a[e(471)],wrapS:void 0!==this[e(466)][e(483)]?this.settings[e(483)]:u,wrapT:void 0!==this[e(466)][e(427)]?this[e(466)][e(427)]:a[e(398)],format:this[e(474)]?a[e(392)]:a[e(440)],type:void 0!==this[e(466)][e(433)]?this.settings[e(433)]:a[e(441)],stencilBuffer:void 0===this[e(466)][e(432)]||this.settings.stencilBuffer}),this[e(454)]=this[e(467)].clone(),this[e(407)]=Date[e(395)](),this.passes={},this.Stack={passItems:[],passes:[]}}[T(480)](t,n,e,o){const r=T;this[r(459)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(417)]};this.Stack.passItems[r(416)](s)}[T(428)](t){const n=T;for(let e=this[n(447)][n(388)].length-1;e>=0;e--)this[n(447)][n(388)][e][n(485)]===parseInt(t)&&this[n(447)].passItems.splice(e,1);console[n(385)](this[n(447)][n(388)])}[T(386)](){const t=T;this.Pass[t(455)](this);return this[t(459)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[T(459)](t){const n=T,e=n(477);return this[n(417)]=function(t,n){const e=L,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,l=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,u={sampler2D:{type:"t",value:()=>new s},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new r},vec3:{type:"v3",value:()=>new i},vec4:{type:"v4",value:()=>new(a[L(255)])},bvec2:{type:"v2",value:()=>new(a[L(206)])},bvec3:{type:"v3",value:()=>new(a[L(207)])},bvec4:{type:"v4",value:()=>new(a[L(255)])},ivec2:{type:"v2",value:()=>new(a[L(206)])},ivec3:{type:"v3",value:()=>new(a[L(207)])},ivec4:{type:"v4",value:()=>new(a[L(255)])},mat2:{type:"v2",value:()=>new(a[L(248)])},mat3:{type:"v3",value:()=>new c},mat4:{type:"v4",value:()=>new(a[L(257)])}},v={float:{type:"fv",value:()=>[]},vec3:{type:e(209),value:()=>[]}};let f;const p={resolution:{type:"v2",value:new r(1,1),default:!0},time:{type:"f",value:Date[e(225)](),default:!0},tInput:{type:"t",value:new s,default:!0}};let m,d;for(;null!==(f=o.exec(n));)f[e(265)]===o[e(264)]&&o.lastIndex++,m=f[1],d=f[2],p[d]={type:u[m][e(240)],value:u[m][e(236)]()};for(;null!==(f=l[e(244)](n));)f[e(265)]===o[e(264)]&&o[e(264)]++,m=f[1],d=f[2],f[3],p[d]={type:v[m].type,value:v[m].value()};return new(a[e(208)])({uniforms:p,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(417)]}[T(468)](t){const n=T;this[n(417)]=null,this[n(473)]={}}[T(488)](){const t=T;this[t(472)]=this.front,this[t(409)]=this[t(454)]}[T(438)](t,n){const e=T,o=window[e(487)],r=window.innerHeight;t[e(424)](1*o,1*r),n.projectionMatrix[e(393)](70,o/r,n[e(486)],n[e(445)]),this[e(424)](o,r);return this[e(411)](o,r,!0)}[T(424)](t,n){const e=T;this.width=t,this[e(448)]=n,this[e(443)][e(413)][e(479)](t/-2,t/2,n/2,n/-2,this[e(443)][e(486)],this[e(443)][e(445)]),this[e(465)][e(452)][e(387)](t,n,1),this[e(467)][e(424)](t,n),this.back.setSize(t,n)}[T(411)](t,n,e){const o=T;return new l(t,n,{minFilter:a[o(471)],magFilter:v,format:e?a[o(392)]:a[o(440)]})}[T(423)](t,n,e,o){const r=T;this[r(478)].setRenderTarget(this[r(409)]),this[r(478)][r(423)](t,n),o||this[r(451)]()}swapBuffers(){const t=T,n=this[t(409)];this[t(409)]=this[t(472)],this.read=n}pass(){const t=T;for(let n=0;n<this.Stack[t(388)].length;n++){const e=this.Stack[t(388)][n][t(417)],o=this[t(447)][t(388)][n][t(473)];if(this[t(478)][t(410)](this.write),e instanceof f){this[t(465)][t(453)]=e,this.quad[t(453)].uniforms[t(481)].value=this[t(472)][t(457)],this[t(465)].material.uniforms[t(436)][t(437)].set(this[t(415)],this[t(448)]),this[t(465)][t(453)][t(399)][t(419)][t(437)]=.001*(Date[t(395)]()-this[t(407)]);for(const n in o)this[t(465)].material[t(399)][n][t(437)]=o[n];this[t(478)][t(423)](this[t(476)],this[t(443)]),this[t(451)]()}}}[T(439)](t,n){const e=T;this[e(478)].setRenderTarget(null),this.quad[e(453)]=this[e(463)],this[e(465)].material[e(399)].tInput[e(437)]=this[e(472)][e(457)],this[e(465)][e(453)][e(399)][e(436)][e(437)][e(387)](this[e(415)],this[e(448)]),this[e(478)].render(this.scene,this[e(443)])}}function V(t){function n(t){const e=G;if(typeof t===e(425))return function(t){}.constructor(e(404))[e(450)](e(430));1!==(""+t/t)[e(403)]||t%20==0?function(){return!0}[e(418)](e(397)+e(426))[e(455)](e(461)):function(){return!1}.constructor(e(397)+e(426)).apply(e(484)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const k="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",O=X;!function(t,n){const e=X,o=H();for(;;)try{if(946871===parseInt(e(380))/1+-parseInt(e(365))/2*(parseInt(e(398))/3)+-parseInt(e(351))/4+parseInt(e(403))/5*(-parseInt(e(429))/6)+parseInt(e(425))/7*(-parseInt(e(377))/8)+-parseInt(e(386))/9+parseInt(e(375))/10*(parseInt(e(360))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const W=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[X(381)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function H(){const t=["68162974lpktEF","关闭通道","MeshPhongMaterial","FREICHENPass","values","2TbvWex","stateObject","移除~","click","constructor","addFolder","mergeGeometries","addBlade","console","log","10fIXiBF","input","1862720cyQmkG",'{}.constructor("return this")( )',"postProcessing","43608qWdeDc","apply","bind","CIRCULARPass","SNOISEPass","action","10781568jhGoqn","TOONPass","translate","plugins/postProcessing/image/1324-normal.jpg","string","init","label","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","POISSONPass","VIGNETTE2Pass","DENOISEPass","pass","1669371BkkZkL","RGBPass","debu","receiveShadow","gger","1595355pKqLlj","chain","BoxGeometry","dispose","counter","SOBELPass","__proto__","change","removePass","Mesh","function *\\( *\\)","CGAPass","FXAAPass","addButton","InvertPass","prototype","material","onWindowResize","SEPIAPass","toString","BufferGeometry","castShadow","42szsTLK","toScreen","length","test","6WAWtOy","addPass","add","map","target","text","BOXBLURPass","Reset","7291404jrJqWc","warn","table","random","push","value","plugins/postProcessing/image/1324.jpg","render","keys"];return(H=function(){return t})()}!function(){W(this,(function(){const t=X,n=new RegExp(t(413)),e=new RegExp(t(393),"i"),o=Z(t(391));n.test(o+t(404))&&e[t(428)](o+t(376))?Z():o("0")}))()}();const q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[X(381)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function X(t,n){const e=H();return(X=function(t,n){return e[t-=346]})(t,n)}q(void 0,(function(){const t=X;let n;try{n=Function("return (function() "+t(378)+");")()}catch(r){n=window}const e=n[t(373)]=n[t(373)]||{},o=[t(374),t(352),"info","error","exception",t(353),"trace"];for(let s=0;s<o[t(427)];s++){const n=q[t(369)][t(418)][t(382)](q),r=o[s],a=e[r]||n;n[t(409)]=q[t(382)](q),n[t(422)]=a[t(422)][t(382)](a),e[r]=n}}))();function Z(t){function n(t){const e=X;if(typeof t===e(390))return function(t){}.constructor("while (true) {}").apply(e(407));1!==(""+t/t).length||t%20==0?function(){return!0}[e(369)](e(400)+e(402)).call(e(385)):function(){return!1}[e(369)](e(400)+e(402))[e(381)](e(366)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const $=E(d({__name:O(379),async setup(o){const s=O;let i,c;const{camera:l,renderer:u,scene:v,sizes:f}=t();for(var d=new(a[s(423)]),x=[],h=0;h<100;h++){var y=new(a[s(405)])(100,100,100);y[s(388)](1500*Math[s(354)](),1500*Math[s(354)](),1500*Math[s(354)]()),x[s(355)](y)}d=p[s(371)](x);const I=([i,c]=g((()=>e({map:s(357)}))),i=await i,c(),i),b=([i,c]=g((()=>e({map:s(389)}))),i=await i,c(),i);var _=new(a[s(362)])({map:I[s(346)],normalMap:b.map,normalScale:new r(.8,-.8),shininess:100}),S=new(a[s(412)])(d,_);S[s(424)]=!0,S[s(401)]=!0,v[s(356)][s(431)](S);const U=new j(u.value,{useRGBA:!0}),w=new m;let P=null,D=[{text:s(417),value:{InvertPass:k}},{text:s(415),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:s(421),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:s(384),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:s(349),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:s(396),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:s(414),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:b.map}}},{text:s(408),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:s(399),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:"DOTPass",value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(383),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:s(394),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:"VIGNETTE1Pass",value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(395),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:s(363),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:s(387),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],E=s(417),M=k,L=null;w[s(372)]({view:"list",label:"后处理类型",options:D,value:""}).on(s(410),(t=>{P=t.value}));const A=w[s(416)]({title:"新增",label:"新增通道"});let z=0;A.on(s(368),(t=>{const n=s;E=Object[n(359)](P)[0],M=Object[n(364)](P)[0],L=Object.values(P)[1];let e=z++,o=w[n(370)]({title:E});for(const s in L){let t=L[s];o[n(372)]({view:n(348),label:s,parse:t=>String(t),value:t})}o.addButton({title:n(367)+e,label:n(361)}).on(n(368),(t=>{const e=n;let o=t[e(347)].title.split("~")[1];U[e(411)](o)})).on(n(368),(()=>{o[n(406)]()}));let r=C(L,t[n(347)][n(392)],t[n(356)]);U[n(430)](E,M,r,e)})),U[s(420)](u[s(356)],l[s(356)]);const{onLoop:F}=n();return F((({delta:t})=>{const n=s;S&&(u.value.autoClearColor=!0,U[n(350)](),S[n(419)]=_,U[n(358)](v[n(356)],l[n(356)]),U[n(397)](),U[n(426)](v[n(356)],l[n(356)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),Y=tt;!function(t,n){const e=tt,o=Q();for(;;)try{if(636021===parseInt(e(396))/1*(parseInt(e(400))/2)+-parseInt(e(391))/3+-parseInt(e(377))/4*(-parseInt(e(387))/5)+parseInt(e(372))/6*(-parseInt(e(401))/7)+-parseInt(e(380))/8*(-parseInt(e(373))/9)+-parseInt(e(409))/10*(parseInt(e(383))/11)+parseInt(e(389))/12)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const J=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){J(this,(function(){const t=tt,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(411),"i"),o=ot(t(414));n[t(388)](o+t(405))&&e[t(388)](o+t(382))?ot():o("0")}))()}();const K=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[tt(395)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function Q(){const t=["chain","manual","debu","while (true) {}","232260SVQbII","error","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","log","gger","init","perspectiveCameraRef","366XhqVOL","153INuVqp","call","length","prototype","322576MxoeWL","action","TresCanvas","482488yxbuuY","__proto__","input","583dxLVus","console","bind","constructor","15fNcJwo","test","24621672IuXSkX","#ffffff","2568618WZOhCP","counter","TresDirectionalLight","TresPerspectiveCamera","apply","39yxZoJT","table","warn","trace","25562RGzpNd","125573ubZYkM","return (function() ","toString","string"];return(Q=function(){return t})()}function tt(t,n){const e=Q();return(tt=function(t,n){return e[t-=371]})(t,n)}K(void 0,(function(){const t=tt;let n;try{n=Function(t(402)+'{}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(384)]=n[t(384)]||{},o=[t(412),t(398),"info",t(410),"exception",t(397),t(399)];for(let s=0;s<o[t(375)];s++){const n=K.constructor[t(376)][t(385)](K),r=o[s],a=e[r]||n;n[t(381)]=K[t(385)](K),n[t(403)]=a[t(403)][t(385)](a),e[r]=n}}))();const nt={ref:Y(371),position:[600,850,-1500],fov:45,near:.1,far:1e5},et=d({__name:"postProcessingEditor",setup(t){const e=Y,r={clearColor:"#000000",shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(406)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=x(a(379));return h(),y(i,D(r,{"window-size":""}),{default:I((()=>[b(a(394),nt,null,512),_(S(o),U(w(s)),null,16),n[0]||(n[0]=b("TresAmbientLight",{color:a(390),intensity:2},null,-1)),n[1]||(n[1]=b(a(393),{position:[100,100,0],intensity:2,color:a(390)},null,-1)),(h(),y(P,null,{default:I((()=>[_($)])),_:1}))])),_:1},16)}}});function ot(t){function n(t){const e=tt;if(typeof t===e(404))return function(t){}[e(386)](e(408))[e(395)](e(392));1!==(""+t/t).length||t%20==0?function(){return!0}[e(386)](e(407)+e(413))[e(374)](e(378)):function(){return!1}[e(386)](e(407)+e(413)).apply("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{et as default};
