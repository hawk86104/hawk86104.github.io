import{_ as e,y as n}from"./three.sQDbNBks1741583630766.js";import{e as t,o as a,a as o}from"./@tresjs.ZmhvXhx31741583630766.js";import{P as r}from"./tweakpane.yDiyAAkA1741583630766.js";import{d as i,a3 as l,v as s,e as u,o as c,f as p,g as f,N as v,j as m,u as d,m as h,aj as g,ak as x}from"./@vue.NRI7TcgI1741583630766.js";import"./postprocessing.7Yq_IN-m1741583630766.js";import"./@vueuse.Z9_WSajh1741583630766.js";const y=T;function T(e,n){const t=j();return(T=function(e,n){return t[e-=114]})(e,n)}!function(e,n){const t=T,a=j();for(;;)try{if(209629===parseInt(t(172))/1+-parseInt(t(121))/2*(-parseInt(t(138))/3)+-parseInt(t(148))/4*(-parseInt(t(119))/5)+parseInt(t(146))/6+parseInt(t(128))/7+-parseInt(t(157))/8*(-parseInt(t(131))/9)+-parseInt(t(150))/10*(parseInt(t(168))/11))break;a.push(a.shift())}catch(o){a.push(a.shift())}}();const b=function(){let e=!0;return function(n,t){const a=e?function(){if(t){const e=t[T(176)](n,arguments);return t=null,e}}:function(){};return e=!1,a}}();!function(){b(this,(function(){const e=T,n=new RegExp(e(122)),t=new RegExp(e(171),"i"),a=_(e(136));n[e(117)](a+e(118))&&t[e(117)](a+e(173))?_():a("0")}))()}();const w=function(){let e=!0;return function(n,t){const a=e?function(){if(t){const e=t[T(176)](n,arguments);return t=null,e}}:function(){};return e=!1,a}}();w(void 0,(function(){const e=T,n=function(){const e=T;let n;try{n=Function(e(141)+'{}.constructor("return this")( ));')()}catch(t){n=window}return n}(),t=n[e(134)]=n[e(134)]||{},a=[e(114),e(167),e(155),"error","exception",e(137),"trace"];for(let o=0;o<a[e(130)];o++){const n=w[e(152)].prototype.bind(w),r=a[o],i=t[r]||n;n[e(156)]=w[e(175)](w),n[e(166)]=i[e(166)].bind(i),t[r]=n}}))();const S=i({__name:y(163),async setup(i){const T=y;let b,w;const S={color:T(169),pointSize:4},_={clearColor:T(144),shadows:!1,alpha:!1,outputColorSpace:e[T(151)]},j={color:S[T(165)],wireframe:!0,transparent:!0,opacity:.2},z=([b,w]=l((()=>o(["./plugins/earthSample/image/pointsEarth/00_earthmap1k.jpg","./plugins/earthSample/image/pointsEarth/circle.png","./plugins/earthSample/image/pointsEarth/04_rainbow1k.jpg","./plugins/earthSample/image/pointsEarth/01_earthbump1k.jpg","./plugins/earthSample/image/pointsEarth/02_earthspec1k.jpg"]))),b=await b,w(),b),P=z[0],E=z[1],D=z[2],I=z[3],k=z[4],A={uniforms:{size:{type:"f",value:S.pointSize},uTime:{type:"f",value:0},uWaveHeight:{type:"f",value:.075},uWaveSpeed:{type:"f",value:.2},colorTexture:{type:"t",value:D},elevTexture:{type:"t",value:I},alphaTexture:{type:"t",value:k},earthTexture:{type:"t",value:P},starTexture:{type:"t",value:E}},vertexShader:"  uniform float size;\n  uniform sampler2D elevTexture;\n  uniform sampler2D alphaTexture;\n  uniform float uTime;\n  uniform float uWaveHeight;\n  uniform float uWaveSpeed;\n\n  varying vec2 vUv;\n  varying float vVisible;\n  varying float vAlpha;\n  varying float vElevation;\n  // Function to generate fBm with vec3 input\n  float random(vec3 st) {\n    return fract(sin(dot(st.xyz, vec3(12.9898,78.233,45.164))) * 43758.5453123);\n}\n\nfloat noise(vec3 st) {\n    vec3 i = floor(st);\n    vec3 f = fract(st);\n\n    // Eight corners in 3D of a tile\n    float a = random(i);\n    float b = random(i + vec3(1.0, 0.0, 0.0));\n    float c = random(i + vec3(0.0, 1.0, 0.0));\n    float d = random(i + vec3(1.0, 1.0, 0.0));\n    float e = random(i + vec3(0.0, 0.0, 1.0));\n    float f1 = random(i + vec3(1.0, 0.0, 1.0));\n    float g = random(i + vec3(0.0, 1.0, 1.0));\n    float h = random(i + vec3(1.0, 1.0, 1.0));\n\n    vec3 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(mix(mix(a, b, u.x), mix(c, d, u.x), u.y),\n               mix(mix(e, f1, u.x), mix(g, h, u.x), u.y), u.z);\n}\n\nfloat fbm(vec3 st) {\n    float value = 0.0;\n    float amplitude = 0.5;\n\n    for (int i = 0; i < 5; i++) {\n        value += amplitude * noise(st);\n        st *= 2.0;\n        amplitude *= 0.5;\n    }\n    return value;\n}\n\n  void main() {\n    vUv = uv;\n    float alphaLand = 1.0 - texture2D(alphaTexture, vUv).r;\n    vAlpha = alphaLand;\n    vec3 newPosition = position;\n\n    if(alphaLand < 0.5) {\n      // Sea\n      // fBm for wave-like displacement\n      float waveHeight = uWaveHeight; // Adjust wave height as needed\n      float waveSpeed = uWaveSpeed;  // Adjust wave speed as needed\n      float displacement = (fbm(newPosition * 5.0 + uTime * waveSpeed) * 2.0 - 1.0) * waveHeight;\n      vElevation = displacement;\n      newPosition += normal * displacement ;\n    }\n\n    vec4 mvPosition = modelViewMatrix * vec4( newPosition, 1.0 );\n    float elv = texture2D(elevTexture, vUv).r;\n    vec3 vNormal = normalMatrix * normal;\n    vVisible = step(0.0, dot( -normalize(mvPosition.xyz), normalize(vNormal)));\n    mvPosition.z += 0.45 * elv;\n\n    // 求出 mvPosition 距离相机的距离\n    float dist = length(mvPosition.xyz);\n    // 根据距离调整 size\n    float pointSize = size * (1.0 - dist / 10.0);\n    gl_PointSize = max(pointSize, 1.0);\n    gl_PointSize = pointSize;\n    gl_Position = projectionMatrix * mvPosition;\n  }\n",fragmentShader:"  uniform sampler2D colorTexture;\n  // uniform sampler2D alphaTexture;\n  uniform sampler2D earthTexture;\n  uniform sampler2D starTexture;\n\n  varying vec2 vUv;\n  varying float vVisible;\n  varying float vAlpha;\n  varying float vElevation;\n\n  void main() {\n    if (floor(vVisible + 0.1) == 0.0) discard;\n    vec2 coord = gl_PointCoord;\n    float alpha = texture2D(starTexture, coord).a;\n    // 根据 alpha 值来裁剪形状\n    if (alpha < 0.1) discard;\n\n    // float alphaLand = 1.0 - texture2D(alphaTexture, vUv).r;\n    vec3 color = texture2D(colorTexture, vUv).rgb;\n    vec3 earth = texture2D(earthTexture, vUv).rgb;\n    color = mix(color, earth, 0.65);\n    if(\n      vAlpha > 0.5\n    ) {\n      gl_FragColor = vec4(color, vAlpha);\n    }else {\n      // 对于海洋部分，根据 vElevation 调整颜色\n      float elevationEffect = clamp(vElevation*30.0, -1.0, 1.0); // 将 vElevation 限制在 [-1, 1] 范围内\n      vec3 deep_sea_blue = vec3(0.004, 0.227, 0.388);\n      vec3 adjustedColor = mix(deep_sea_blue, earth*1.75, (elevationEffect + 1.0) * 0.5); // 根据 vElevation 调整颜色\n      gl_FragColor = vec4(adjustedColor, 1.0-vAlpha);\n    }\n  }\n",transparent:!0,side:n},C=s(),W=s(),M=(new r)[T(123)]({title:T(147)});M[T(129)](S,"color",{type:T(165)}).on(T(115),(({value:e})=>{const n=T;W[n(162)].color[n(153)](e)})),M[T(129)](A[T(158)][T(145)],T(162),{min:.1,max:10,step:.1,label:T(116)}),M.addBinding(A[T(158)][T(170)],"value",{min:.01,max:.5,step:.01,label:T(160)}),M[T(129)](A[T(158)].uWaveSpeed,"value",{min:.01,max:1,step:.01,label:T(135)});const{onLoop:R}=t();return R((({delta:e})=>{const n=T;C.value&&(C[n(162)][n(132)].y+=.002,A.uniforms[n(159)][n(162)]+=10*e)})),(e,n)=>{const t=T,o=u("TresCanvas");return c(),p(o,h(_,{"window-size":""}),{default:f((()=>[n[2]||(n[2]=v(t(164),{position:[0,0,3.5],fov:45,near:.1,far:20},null,-1)),m(d(a),{autoRotate:!0,autoRotateSpeed:2}),v(t(142),{ref_key:t(140),ref:C},[v(t(143),null,[n[0]||(n[0]=v(t(133),{args:[1,4]},null,-1)),v("TresMeshBasicMaterial",h({ref_key:t(149),ref:W},j),null,16)]),v("TresPoints",null,[n[1]||(n[1]=v("TresIcosahedronGeometry",{args:[1,128]},null,-1)),v(t(125),g(x(A)),null,16)])],512),n[3]||(n[3]=v(t(127),{args:[t(124),t(174),3]},null,-1))])),_:1},16)}}});function _(e){function n(e){const t=T;if(typeof e===t(126))return function(e){}[t(152)]("while (true) {}").apply(t(120));1!==(""+e/e)[t(130)]||e%20==0?function(){return!0}[t(152)](t(139)+"gger")[t(161)]("action"):function(){return!1}[t(152)](t(139)+t(154))[t(176)]("stateObject"),n(++e)}try{if(e)return n;n(0)}catch(t){}}function j(){const e=["debu","groupRef","return (function() ","TresGroup","TresMesh","#122148","size","1552512dFaXPN","Debug","4FbWJXR","wireframeMaterialRef","91490bIAdAd","SRGBColorSpace","constructor","set","gger","info","__proto__","3101336bakJPW","uniforms","uTime","海浪高度","call","value","pointsEarth","TresPerspectiveCamera","color","toString","warn","1221bivraK","#17c5a9","uWaveHeight","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","65899dRnFsV","input","#080820","bind","apply","log","change","粒子大小","test","chain","534740hmujBb","counter","26LJffhM","function *\\( *\\)","addFolder","#ffffff","TresShaderMaterial","string","TresHemisphereLight","1353464xoLiXd","addBinding","length","9cKnmtg","rotation","TresIcosahedronGeometry","console","海浪变化速度","init","table","49050NrSpdQ"];return(j=function(){return e})()}export{S as default};
