import{m as t,e as n,a as e,o}from"./@tresjs.Ea5Oq_-I1741168315107.js";import{_ as r,b as a,ar as s,cT as i,cU as c,A as l,av as u,cB as v,V as f}from"./three.FxqAALWt1741168315107.js";import{P as p}from"./tweakpane.yDiyAAkA1741168315107.js";import{d as m,a3 as d,e as g,o as x,f as h,g as y,N as b,j as I,u as _,aj as S,ak as w,al as U,m as P}from"./@vue.NRI7TcgI1741168315107.js";import{_ as D}from"./@fesjs.vxeGrljA1741168315107.js";import"./postprocessing.hfy6Kqg11741168315107.js";import"./@vueuse.Z8xAfE_A1741168315107.js";import"./vue-router.WwZ4Gmuc1741168315107.js";import"./lodash-es.pklfUAS51741168315107.js";import"./@qlin.yHhFDldE1741168315107.js";import"./pinia.54vgoDms1741168315107.js";import"./@floating-ui.BPbuo5Gx1741168315107.js";import"./@juggle.7yjBMqoW1741168315107.js";function E(){const t=["1765120XfCzAA","lastIndex","length","console","action","message","Matrix4","Vector4","prototype","name","gger","info","trace","function *\\( *\\)","WagnerLoadShaderException","ShaderMaterial","call","Texture","3629838kABess","warn","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","isArray","bind","toString","random","replace","onload","apply","Vector3","counter","now",'{}.constructor("return this")( )',"Matrix3","while (true) {}",'" load was aborted.',"Vector2","object","send","type","constructor","onerror","stateObject","\" couldn't be loaded.","value","input","get","14186790wifvzC","debu","exec","235863YEbBxy","open","hasOwnProperty","onabort","60004lJIWtS","__proto__","555255eiwyzF","8718352KrcXay","7jkezTc","370nyWyRT","v3v","responseText","index",'Shader "'];return(E=function(){return t})()}!function(t,n){const e=L,o=E();for(;;)try{if(979847===parseInt(e(344))/1+-parseInt(e(289))/2+parseInt(e(338))/3+parseInt(e(342))/4*(parseInt(e(284))/5)+-parseInt(e(307))/6*(-parseInt(e(346))/7)+parseInt(e(345))/8+-parseInt(e(335))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(316)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){A(this,(function(){const t=L,n=new RegExp(t(302)),e=new RegExp(t(309),"i"),o=C("init");n.test(o+"chain")&&e.test(o+t(333))?C():o("0")}))()}();const M=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();M(void 0,(function(){const t=L;let n;try{n=Function("return (function() "+t(320)+");")()}catch(r){n=window}const e=n[t(292)]=n[t(292)]||{},o=["log",t(308),t(300),"error","exception","table",t(301)];for(let a=0;a<o.length;a++){const n=M[t(328)][t(297)][t(311)](M),r=o[a],s=e[r]||n;n[t(343)]=M.bind(M),n[t(312)]=s.toString[t(311)](s),e[r]=n}}))();function L(t,n){const e=E();return(L=function(t,n){return e[t-=284]})(t,n)}function z(t,n,e){const o=L;if(typeof t!==o(325)||null===t)return t;const r=Array[o(310)](t)?[]:{};for(const a in t)t[o(340)](a)&&(r[a]=z(t[a])),a==n&&(r[n]=e);return r}function C(t){function n(t){const e=L;if("string"==typeof t)return function(t){}[e(328)](e(322))[e(316)](e(318));1!==(""+t/t)[e(291)]||t%20==0?function(){return!0}[e(328)](e(336)+e(299))[e(305)](e(293)):function(){return!1}[e(328)](e(336)+e(299))[e(316)](e(330)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const F=N;function T(){const t=["shader","add","CopyPass","73463Hmokpp","quad","23752txGYVB","RGBAFormat","height","makePerspective","debu","clone","loadShadervf","console","useRGBA","init","error","stateObject","near","pass","warn","splice","WebGLRenderTarget","MeshBasicMaterial","onWindowResize","toScreen","string","16OjjgjP","passes","175950dgcmqe","Scene","write","9915554hFqULL","type","log","renderer","__proto__","length","time","apply","getOfflineTexture","Mesh","test","Stack","setSize","2284728rxVKFT","table","scale","ShaderMaterial","addPass","settings","ClampToEdgeWrapping","while (true) {}","toString","makeOrthographic","copyPass","innerWidth","540900CimzKv","2043hYHLVW","setRenderTarget","swapBuffers","scene","set","3MWBzWW","prototype","1035902bOThQT","read","wrapS","startTime","constructor","function *\\( *\\)","texture","now","render","uniforms","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }",'{}.constructor("return this")( )',"call","passItems","5xHkqFj","tInput","trace","front","projectionMatrix","uuid","Reset","gger","bind","camera","width","resolution","material","return (function() ","magFilter","innerHeight","wrapT","OrthographicCamera","PlaneGeometry","back","chain","info","push","value","LinearFilter","stencilBuffer","far"];return(T=function(){return t})()}function N(t,n){const e=T();return(N=function(t,n){return e[t-=163]})(t,n)}!function(t,n){const e=N,o=T();for(;;)try{if(475425===-parseInt(e(219))/1*(-parseInt(e(242))/2)+parseInt(e(173))/3*(-parseInt(e(167))/4)+-parseInt(e(189))/5*(-parseInt(e(260))/6)+-parseInt(e(175))/7+-parseInt(e(221))/8*(-parseInt(e(168))/9)+parseInt(e(244))/10+-parseInt(e(247))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const R=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){R(this,(function(){const t=N,n=new RegExp(t(180)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=G(t(230));n[t(257)](o+t(209))&&e[t(257)](o+"input")?G():o("0")}))()}();const j=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[N(254)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();j(void 0,(function(){const t=N,n=function(){const t=N;let n;try{n=Function(t(202)+t(186)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(228)]||{},o=[t(249),t(235),t(210),t(231),"exception",t(261),t(191)];for(let r=0;r<o[t(252)];r++){const n=j[t(179)][t(174)][t(197)](j),a=o[r],s=e[a]||n;n[t(251)]=j[t(197)](j),n[t(163)]=s[t(163)][t(197)](s),e[a]=n}}))();class B{constructor(t,n){const e=N;this.width=1,this[e(223)]=1,this[e(265)]=n||{},this[e(229)]=this[e(265)][e(229)]||!1,this[e(250)]=t,this.copyPass=this[e(218)](this[e(265)]),this.scene=new(r[e(245)]),this[e(220)]=new(r[e(256)])(new(r[e(207)])(1,1),new(r[e(238)])),this[e(171)][e(217)](this[e(220)]),this.camera=new(r[e(206)])(1,1,1,1,-1e4,1e4),this[e(192)]=new(r[e(237)])(1,1,{minFilter:void 0!==this[e(265)].minFilter?this[e(265)].minFilter:r[e(213)],magFilter:void 0!==this[e(265)][e(203)]?this[e(265)].magFilter:r[e(213)],wrapS:void 0!==this[e(265)][e(177)]?this.settings[e(177)]:r[e(266)],wrapT:void 0!==this[e(265)][e(205)]?this[e(265)][e(205)]:r[e(266)],format:this[e(229)]?r[e(222)]:c,type:void 0!==this.settings[e(248)]?this.settings[e(248)]:l,stencilBuffer:void 0===this[e(265)][e(214)]||this[e(265)][e(214)]}),this[e(208)]=this[e(192)][e(226)](),this[e(178)]=Date[e(182)](),this[e(243)]={},this[e(258)]={passItems:[],passes:[]}}[F(264)](t,n,e,o){const r=F;this[r(227)](n);const a={shaderName:t,params:e,uuid:o,shader:this[r(216)]};this.Stack[r(188)][r(211)](a)}removePass(t){const n=F;for(let e=this[n(258)][n(188)].length-1;e>=0;e--)this[n(258)][n(188)][e][n(194)]===parseInt(t)&&this[n(258)].passItems[n(236)](e,1);console.log(this[n(258)][n(188)])}[F(218)](){const t=F;this.Pass[t(187)](this);return this[t(227)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[F(227)](t){const n=F,e=n(185);return this[n(216)]=function(t,n){const e=L,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,c=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,l={sampler2D:{type:"t",value:()=>new(r[L(306)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[L(324)])},vec3:{type:"v3",value:()=>new a},vec4:{type:"v4",value:()=>new s},bvec2:{type:"v2",value:()=>new(r[L(324)])},bvec3:{type:"v3",value:()=>new(r[L(317)])},bvec4:{type:"v4",value:()=>new(r[L(296)])},ivec2:{type:"v2",value:()=>new(r[L(324)])},ivec3:{type:"v3",value:()=>new(r[L(317)])},ivec4:{type:"v4",value:()=>new(r[L(296)])},mat2:{type:"v2",value:()=>new i},mat3:{type:"v3",value:()=>new(r[L(321)])},mat4:{type:"v4",value:()=>new(r[L(295)])}},u={float:{type:"fv",value:()=>[]},vec3:{type:e(285),value:()=>[]}};let v;const f={resolution:{type:"v2",value:new(r[e(324)])(1,1),default:!0},time:{type:"f",value:Date[e(319)](),default:!0},tInput:{type:"t",value:new(r[e(306)]),default:!0}};let p,m;for(;null!==(v=o[e(337)](n));)v[e(287)]===o[e(290)]&&o[e(290)]++,p=v[1],m=v[2],f[m]={type:l[p][e(327)],value:l[p][e(332)]()};for(;null!==(v=c[e(337)](n));)v.index===o[e(290)]&&o[e(290)]++,p=v[1],m=v[2],v[3],f[m]={type:u[p].type,value:u[p][e(332)]()};return new(r[e(304)])({uniforms:f,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(216)]}Pass(t){this[F(216)]=null,this.params={}}[F(195)](){const t=F;this[t(176)]=this.front,this[t(246)]=this[t(208)]}[F(239)](t,n){const e=F,o=window[e(166)],r=window[e(204)];t[e(259)](1*o,1*r),n[e(193)][e(224)](70,o/r,n[e(233)],n[e(215)]),this[e(259)](o,r);return this[e(255)](o,r,!0)}setSize(t,n){const e=F;this[e(199)]=t,this[e(223)]=n,this[e(198)].projectionMatrix[e(164)](t/-2,t/2,n/2,n/-2,this.camera.near,this.camera[e(215)]),this[e(220)][e(262)][e(172)](t,n,1),this[e(192)].setSize(t,n),this[e(208)][e(259)](t,n)}[F(255)](t,n,e){const o=F;return new(r[o(237)])(t,n,{minFilter:r[o(213)],magFilter:r[o(213)],format:e?r[o(222)]:c})}[F(183)](t,n,e,o){const r=F;this[r(250)][r(169)](this[r(246)]),this[r(250)][r(183)](t,n),o||this[r(170)]()}[F(170)](){const t=F,n=this.write;this[t(246)]=this[t(176)],this.read=n}[F(234)](){const t=F;for(let n=0;n<this[t(258)][t(188)].length;n++){const e=this.Stack[t(188)][n][t(216)],o=this[t(258)][t(188)][n].params;if(this[t(250)][t(169)](this[t(246)]),e instanceof r[t(263)]){this[t(220)].material=e,this[t(220)][t(201)][t(184)][t(190)].value=this[t(176)][t(181)],this[t(220)].material[t(184)][t(200)][t(212)][t(172)](this.width,this[t(223)]),this.quad.material.uniforms[t(253)][t(212)]=.001*(Date.now()-this.startTime);for(const n in o)this.quad[t(201)][t(184)][n].value=o[n];this.renderer.render(this[t(171)],this[t(198)]),this[t(170)]()}}}[F(240)](t,n){const e=F;this.renderer.setRenderTarget(null),this[e(220)][e(201)]=this[e(165)],this[e(220)][e(201)][e(184)][e(190)].value=this[e(176)][e(181)],this.quad[e(201)][e(184)].resolution.value[e(172)](this[e(199)],this[e(223)]),this[e(250)][e(183)](this[e(171)],this.camera)}}function G(t){function n(t){const e=N;if(typeof t===e(241))return function(t){}[e(179)](e(267))[e(254)]("counter");1!==(""+t/t)[e(252)]||t%20==0?function(){return!0}[e(179)](e(225)+"gger")[e(187)]("action"):function(){return!1}[e(179)](e(225)+e(196))[e(254)](e(232)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const V="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",k=X;function O(){const t=["2812708uRBoxj","addBlade","apply","74556jkCtbQ","map","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","push","新增通道","table","InvertPass","console","Reset","keys","POISSONPass","__proto__","移除~","plugins/postProcessing/image/1324-normal.jpg","while (true) {}","call","toScreen","stateObject","autoClearColor","constructor","3305217bgnVTg","关闭通道","receiveShadow","warn","removePass","693BqWwdm","action","prototype","DOTPass","CIRCULARPass","label","toString","FREICHENPass","add","length","39krmQhV","title","gger","target","Mesh","click","5619575NTLJui","VIGNETTE1Pass","SNOISEPass","test","36978RPDYhh",'{}.constructor("return this")( )',"error","debu","bind","random","4054050lIvxYD","后处理类型","CGAPass","VIGNETTE2Pass","addPass","pass","chain","dispose","MeshPhongMaterial","RGBPass","postProcessing","6722280NeXNvs","info","addButton","BufferGeometry","split","value","TOONPass","list","return (function() ","string","values","SOBELPass","addFolder"];return(O=function(){return t})()}!function(t,n){const e=X,o=O();for(;;)try{if(836057===-parseInt(e(174))/1*(-parseInt(e(184))/2)+parseInt(e(159))/3+-parseInt(e(214))/4+-parseInt(e(180))/5+parseInt(e(217))/6*(parseInt(e(164))/7)+-parseInt(e(201))/8+parseInt(e(190))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[X(216)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){H(this,(function(){const t=X,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(219),"i"),o=q("init");n[t(183)](o+t(196))&&e[t(183)](o+"input")?q():o("0")}))()}();const W=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[X(216)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function X(t,n){const e=O();return(X=function(t,n){return e[t-=143]})(t,n)}W(void 0,(function(){const t=X,n=function(){const t=X;let n;try{n=Function(t(209)+t(185)+");")()}catch(e){n=window}return n}(),e=n[t(146)]=n[t(146)]||{},o=["log",t(162),t(202),t(186),"exception",t(144),"trace"];for(let r=0;r<o.length;r++){const n=W.constructor[t(166)][t(188)](W),a=o[r],s=e[a]||n;n[t(150)]=W[t(188)](W),n[t(170)]=s[t(170)][t(188)](s),e[a]=n}}))();function q(t){function n(t){const e=X;if(typeof t===e(210))return function(t){}[e(158)](e(153))[e(216)]("counter");1!==(""+t/t)[e(173)]||t%20==0?function(){return!0}[e(158)](e(187)+e(176))[e(154)](e(165)):function(){return!1}[e(158)](e(187)+e(176))[e(216)](e(156)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const Z=D(m({__name:k(200),async setup(o){const a=k;let s,i;const{camera:c,renderer:l,scene:m,sizes:g}=t();for(var x=new(r[a(204)]),h=[],y=0;y<100;y++){var b=new u(100,100,100);b.translate(1500*Math.random(),1500*Math[a(189)](),1500*Math[a(189)]()),h[a(220)](b)}x=v(h);const I=([s,i]=d((()=>e({map:"plugins/postProcessing/image/1324.jpg"}))),s=await s,i(),s),_=([s,i]=d((()=>e({map:a(152)}))),s=await s,i(),s);var S=new(r[a(198)])({map:I[a(218)],normalMap:_.map,normalScale:new f(.8,-.8),shininess:100}),w=new(r[a(178)])(x,S);w.castShadow=!0,w[a(161)]=!0,m[a(206)][a(172)](w);const U=new B(l[a(206)],{useRGBA:!0}),P=new p;let D=null,E=[{text:a(145),value:{InvertPass:V}},{text:"FXAAPass",value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:"SEPIAPass",value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:a(182),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:"BOXBLURPass",value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:"DENOISEPass",value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:a(192),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:_[a(218)]}}},{text:a(212),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:a(199),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:a(167),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:a(168),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:a(149),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:a(181),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:a(193),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:a(171),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:a(207),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],A=a(145),M=V,L=null;P[a(215)]({view:a(208),label:a(191),options:E,value:""}).on("change",(t=>{D=t[a(206)]}));const C=P[a(203)]({title:"新增",label:a(143)});let F=0;C.on(a(179),(t=>{const n=a;A=Object[n(148)](D)[0],M=Object[n(211)](D)[0],L=Object[n(211)](D)[1];let e=F++,o=P[n(213)]({title:A});for(const a in L){let t=L[a];o[n(215)]({view:"text",label:a,parse:t=>String(t),value:t})}o[n(203)]({title:n(151)+e,label:n(160)}).on(n(179),(t=>{const e=n;let o=t[e(177)][e(175)][e(205)]("~")[1];U[e(163)](o)})).on(n(179),(()=>{o[n(197)]()}));let r=z(L,t[n(177)][n(169)],t[n(206)]);U[n(194)](A,M,r,e)})),U.onWindowResize(l[a(206)],c[a(206)]);const{onLoop:T}=n();return T((({delta:t})=>{const n=a;w&&(l[n(206)][n(157)]=!0,U[n(147)](),w.material=S,U.render(m[n(206)],c.value),U[n(195)](),U[n(155)](m.value,c[n(206)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),$=J;!function(t,n){const e=J,o=K();for(;;)try{if(640450===-parseInt(e(157))/1+-parseInt(e(145))/2*(parseInt(e(159))/3)+-parseInt(e(153))/4+-parseInt(e(146))/5+-parseInt(e(131))/6+parseInt(e(116))/7+parseInt(e(119))/8)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Y=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function K(){const t=["trace","function *\\( *\\)","init","test","log","constructor","apply","6Vefwrd","5254105TRMRzS","toString","gger","string","manual",'{}.constructor("return this")( )',"#ffffff","2586628lofipx","while (true) {}","action","debu","667683bvBXkP","call","503598FtaTHF","input","error","#000000","6052179yiwXBN","TresPerspectiveCamera","TresCanvas","21561264PTCjfb","postProcessingEditor","stateObject","counter","exception","TresDirectionalLight","table","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","length","perspectiveCameraRef","console","__proto__","303276RzLEXw","bind","chain","TresAmbientLight","warn","return (function() ","info"];return(K=function(){return t})()}!function(){Y(this,(function(){const t=J,n=new RegExp(t(139)),e=new RegExp(t(126),"i"),o=et(t(140));n[t(141)](o+t(133))&&e[t(141)](o+t(160))?et():o("0")}))()}();const Q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[J(144)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function J(t,n){const e=K();return(J=function(t,n){return e[t-=116]})(t,n)}Q(void 0,(function(){const t=J,n=function(){const t=J;let n;try{n=Function(t(136)+t(151)+");")()}catch(e){n=window}return n}(),e=n[t(129)]=n[t(129)]||{},o=[t(142),t(135),t(137),t(161),t(123),t(125),t(138)];for(let r=0;r<o.length;r++){const n=Q[t(143)].prototype[t(132)](Q),a=o[r],s=e[a]||n;n[t(130)]=Q[t(132)](Q),n.toString=s[t(147)][t(132)](s),e[a]=n}}))();const tt={ref:$(128),position:[600,850,-1500],fov:45,near:.1,far:1e5},nt=m({__name:$(120),setup(t){const e=$,r={clearColor:e(162),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(150)},a={autoRotate:!0,enableDamping:!0},{onLoop:s}=n();return s((({delta:t})=>{})),(t,n)=>{const s=e,i=g(s(118));return x(),h(i,P(r,{"window-size":""}),{default:y((()=>[b(s(117),tt,null,512),I(_(o),S(w(a)),null,16),n[0]||(n[0]=b(s(134),{color:"#ffffff",intensity:2},null,-1)),n[1]||(n[1]=b(s(124),{position:[100,100,0],intensity:2,color:s(152)},null,-1)),(x(),h(U,null,{default:y((()=>[I(Z)])),_:1}))])),_:1},16)}}});function et(t){function n(t){const e=J;if(typeof t===e(149))return function(t){}[e(143)](e(154)).apply(e(122));1!==(""+t/t)[e(127)]||t%20==0?function(){return!0}[e(143)](e(156)+e(148))[e(158)](e(155)):function(){return!1}[e(143)](e(156)+e(148))[e(144)](e(121)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{nt as default};
