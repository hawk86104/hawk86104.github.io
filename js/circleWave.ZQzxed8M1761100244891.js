import{_ as a,K as e}from"./@tresjs.DqJWjmrH1761100244891.js";import{P as n}from"./tweakpane.CqZAnw7f1761100244891.js";import{_ as o}from"./reflectorDUDV.vue_vue_type_script_setup_true_lang.C3soJrEE1761100244891.js";import"./vanilla.esm.5.5.0.CsbunUBT1761100244891.js";import{u as t}from"./utils.pnKaL4Sf1761100244891.js";import{d as s,a as r,ac as i,r as l,a3 as c,G as u,o as m,I as v,a9 as f,aa as p,g as d,b as g,e as k,h as S,u as w,ap as j,m as h}from"./@vue.CKlgtJke1761100244891.js";import{aE as C,k as _,bJ as y,a6 as M}from"./three.DvmzhRS91761100244891.js";import"./postprocessing.CYU4Fj-U1761100244891.js";import"./@vueuse.mZcBai3M1761100244891.js";import"./dither.glsl.tNAdkJUa1761100244891.js";import"./Reflector.C-cnab8L1761100244891.js";import"./OimoPhysicsBuffer.RP9_cA631761100244891.js";import"./oimophysics.CfVKSiAm1761100244891.js";import"./vite-plugin-qiankun.B06WoCqG1761100244891.js";import"./utils.CNife3_q1761100244891.js";import"./object-hash.zo7S6bgL1761100244891.js";import"./@amap.fjyZdsU91761100244891.js";import"./jszip.DTlig5CR1761100244891.js";import"./Resource.mX5inOAT1761100244891.js";const x=["rotation-x","scale"],T=s({__name:"shaderCircleWave",props:{color:{default:"#ffffff"},colorDark:{default:"#000000"},speed:{default:1},scale:{default:2}},async setup(e){let n,o;const s=e,d=r(),{onBeforeRender:g}=a();g(({delta:a})=>{d.value&&(d.value.material.uniforms.uTime.value+=a*s.speed)});const k=([n,o]=i(()=>t("./plugins/floor/image/scan.png")),n=await n,o(),n);k.wrapS=C,k.wrapT=C;const S=l({side:M,transparent:!0,blending:y,flatShading:!0,depthTest:!1,uniforms:{uTime:{type:"f",value:0},uScanTex:{type:"t",value:k},uScanColor:{type:"v3",value:new _(s.color)},uScanColorDark:{type:"v3",value:new _(s.colorDark)}},vertexShader:"\nvarying vec2 vUv;\nvarying vec3 vPosition;\nvoid main(){\n\tvUv=uv;\n\tvPosition=position;\n\tgl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.);\n}\n",fragmentShader:"\n#define uScanOrigin vec3(0.,0.,0.)\n#define uScanWaveRatio1 3.2\n#define uScanWaveRatio2 2.8\n\nuniform float uTime;\nuniform sampler2D uScanTex;\nvarying vec2 vUv;\nvarying vec3 vPosition;\nuniform vec3 uScanColor;\nuniform vec3 uScanColorDark;\n\nfloat circleWave(vec3 p,vec3 origin,float distRatio){\n    float t=uTime;\n    float dist=distance(p,origin)*distRatio;\n    float radialMove=fract(dist-t);\n    float fadeOutMask=1.-smoothstep(1.,3.,dist);\n    radialMove*=fadeOutMask;\n    float cutInitialMask=1.-step(t,dist);\n    radialMove*=cutInitialMask;\n    return radialMove;\n}\n\nvec3 getScanColor(vec3 worldPos,vec2 uv,vec3 col){\n    // mask\n    float scanMask=texture(uScanTex,uv).r;\n    // waves\n    float cw=circleWave(worldPos,uScanOrigin,uScanWaveRatio1);\n    float cw2=circleWave(worldPos,uScanOrigin,uScanWaveRatio2);\n    // scan\n    float mask1=smoothstep(.3,0.,1.-cw);\n    mask1*=(1.+scanMask*.7);\n    \n    float mask2=smoothstep(.07,0.,1.-cw2)*.8;\n    mask1+=mask2;\n    \n    float mask3=smoothstep(.09,0.,1.-cw)*1.5;\n    mask1+=mask3;\n\n    // color\n    vec3 scanCol=mix(uScanColorDark,uScanColor,mask1);\n    col=mix(col,scanCol,mask1);\n    \n    return col;\n\t\t// return vec3(cw);\n\t\t// return vec3(scanMask);\n\t\t// return worldPos;\n\t\t// return vec3(mask1);\n\t\t// return scanCol;\n}\n\nvoid main()\n{\n    vec3 col=vec3(0.);\n    col=getScanColor(vPosition,vUv*10.0,col);\n    gl_FragColor=vec4(col,1.);\n}\n"});return c(()=>{d.value&&(d.value.material.uniforms.uScanColor.value=new _(s.color),d.value.material.uniforms.uScanColorDark.value=new _(s.colorDark))}),(a,e)=>(m(),u("TresMesh",{ref_key:"tmRef",ref:d,"rotation-x":-Math.PI/2,scale:a.scale},[e[0]||(e[0]=v("TresPlaneGeometry",{args:[1,1]},null,-1)),v("TresShaderMaterial",f(p(S)),null,16)],8,x))}}),D=s({__name:"circleWave",setup(a){const t=l({reflectivity:.1,showGridHelper:!1,scale:1}),s=l({color:"#ffffff",colorDark:"#000000",speed:1,scale:2}),r=new n({title:"shaderCircleWave地面",expanded:!0});return r.addBinding(s,"color",{label:"圈颜色"}),r.addBinding(s,"colorDark",{label:"圈渐变色"}),r.addBinding(s,"speed",{label:"速度",min:.1,max:5,step:.1}),r.addBinding(s,"scale",{label:"大小",min:.1,max:10,step:.1}),(a,n)=>{const r=d("TresCanvas");return m(),g(r,{clearColor:"#201919","window-size":""},{default:k(()=>[n[0]||(n[0]=v("TresPerspectiveCamera",{position:[3,3,0],fov:45,near:.1,far:1e4},null,-1)),S(w(e),{enableDamping:""}),n[1]||(n[1]=v("TresAmbientLight",{intensity:6},null,-1)),(m(),g(j,null,{default:k(()=>[S(T,f(p(s)),null,16)]),_:1})),S(o,h({position:[0,-.5,0]},t),null,16)]),_:1})}}});export{D as default};
