import{e,k as n,a as i}from"./@tresjs.DYJWvbJh1744075368226.js";import{n as o,br as a,C as r,p as t,bq as l,a2 as s,ab as u,aI as c,cv as m,cw as f,cx as d,cy as v}from"./three.Cqu7jvck1744075368226.js";import{z as p}from"./three-custom-shader-material.Dnty1Adq1744075368226.js";import{r as g,i as h,s as _}from"./utils.CoKYjmVd1744075368226.js";import{b as y,a as x}from"./buildingsCustomShaderMaterial.DyBo--wu1744075368226.js";import{d as b,a5 as w,b as j,H as S,o as C,e as O,j as k,am as B,f as M,J as z,u as T,F as P,h as N}from"./@vue.DK6ok9LJ1744075368226.js";import{_ as U}from"./roadLight.vue_vue_type_script_setup_true_lang.DU8nhTWi1744075368226.js";import"./postprocessing.BQUpsS8o1744075368226.js";import"./@vueuse.3dpzNfMJ1744075368226.js";import"./@fesjs.DVzkLEh_1744075368226.js";import"./vue-router.CdB5-8IK1744075368226.js";import"./lodash-es.BOsRjQhS1744075368226.js";import"./@qlin.q6OWdsQV1744075368226.js";import"./pinia.BwN9Gs_m1744075368226.js";import"./@babel.BPq7uOAK1744075368226.js";import"./@floating-ui.BFjFSAYt1744075368226.js";import"./@juggle.CcBCnTIR1744075368226.js";import"./three-mesh-bvh.Bnn-Sjcc1744075368226.js";!function(){for(var e=V,n=F();;)try{if(931448===-parseInt(e(496))/1*(parseInt(e(528))/2)+parseInt(e(542))/3+-parseInt(e(530))/4+-parseInt(e(514))/5+parseInt(e(504))/6+-parseInt(e(518))/7*(parseInt(e(522))/8)+-parseInt(e(527))/9*(-parseInt(e(494))/10))break;n.push(n.shift())}catch(i){n.push(n.shift())}}();var W,A=(W=!0,function(e,n){var i=W?function(){if(n){var i=n[V(529)](e,arguments);return n=null,i}}:function(){};return W=!1,i});!function(){A(this,(function(){var e=V,n=new RegExp(e(502)),i=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=L(e(541));n[e(547)](o+"chain")&&i[e(547)](o+e(539))?L():o("0")}))()}();var I,E=(I=!0,function(e,n){var i=I?function(){if(n){var i=n[V(529)](e,arguments);return n=null,i}}:function(){};return I=!1,i});function V(e,n){var i=F();return V=function(e,n){return i[e-=493]},V(e,n)}E(void 0,(function(){for(var e=V,n=function(){var e,n=V;try{e=Function(n(538)+n(501)+");")()}catch(i){e=window}return e}(),i=n[e(544)]=n[e(544)]||{},o=[e(545),e(540),e(499),"error",e(498),"table","trace"],a=0;a<o.length;a++){var r=E[e(509)][e(520)][e(516)](E),t=o[a],l=i[t]||r;r[e(532)]=E[e(516)](E),r[e(524)]=l[e(524)][e(516)](l),i[t]=r}}))();class D extends o{constructor(e={}){var n=V;super(),this[n(534)]=n(543),this.fragmentShader=n(512),this[n(493)]={time:new a(0),fresnelOpacity:new a(void 0!==e[n(497)]?e.fresnelOpacity:1),fresnelAmount:new a(void 0!==e[n(505)]?e[n(505)]:.45),scanlineSize:new a(void 0!==e[n(533)]?e[n(533)]:8),hologramBrightness:new a(void 0!==e[n(537)]?e[n(537)]:1),signalSpeed:new a(void 0!==e[n(510)]?e[n(510)]:1),hologramColor:new a(void 0!==e[n(521)]?new r(e.hologramColor):new r("#00d5ff")),enableBlinking:new a(void 0===e[n(500)]||e.enableBlinking),blinkFresnelOnly:new a(void 0===e[n(531)]||e[n(531)]),hologramOpacity:new a(void 0!==e[n(508)]?e[n(508)]:1)},this[n(513)]=new t,this[n(546)](e),this.depthTest=void 0!==e[n(526)]&&e.depthTest,this[n(495)]=void 0!==e.blendMode?e[n(536)]:l,this[n(511)]=!0,this[n(503)]=void 0!==e[n(503)]?e[n(503)]:s}update(){var e=V;this[e(493)][e(507)].value=this[e(513)][e(523)]()}}function F(){var e=["blending","1VwipMd","fresnelOpacity","exception","info","enableBlinking",'{}.constructor("return this")( )',"function *\\( *\\)","side","9136950HgjbnO","fresnelAmount","length","time","hologramOpacity","constructor","signalSpeed","transparent"," \n      varying vec2 vUv;\n      varying vec3 vPositionW;\n      varying vec4 vPos;\n      varying vec3 vNormalW;\n      \n      uniform float time;\n      uniform float fresnelOpacity;\n      uniform float scanlineSize;\n      uniform float fresnelAmount;\n      uniform float signalSpeed;\n      uniform float hologramBrightness;\n      uniform float hologramOpacity;\n      uniform bool blinkFresnelOnly;\n      uniform bool enableBlinking;\n      uniform vec3 hologramColor;\n\n      float flicker( float amt, float time ) {return clamp( fract( cos( time ) * 43758.5453123 ), amt, 1.0 );}\n      float random(in float a, in float b) { return fract((cos(dot(vec2(a,b) ,vec2(12.9898,78.233))) * 43758.5453)); }\n\n      void main() {\n        vec2 vCoords = vPos.xy;\n        vCoords /= vPos.w;\n        vCoords = vCoords * 0.5 + 0.5;\n        vec2 myUV = fract( vCoords );\n\n        // Defines hologram main color\n        vec4 hologramColor = vec4(hologramColor, mix(hologramBrightness, vUv.y, 0.5));\n\n        // Add scanlines\n        float scanlines = 10.;\n        scanlines += 20. * sin(time *signalSpeed * 20.8 - myUV.y * 60. * scanlineSize);\n        scanlines *= smoothstep(1.3 * cos(time *signalSpeed + myUV.y * scanlineSize), 0.78, 0.9);\n        scanlines *= max(0.25, sin(time *signalSpeed) * 1.0);        \n        \n        // Scanlines offsets\n        float r = random(vUv.x, vUv.y);\n        float g = random(vUv.y * 20.2, \tvUv.y * .2);\n        float b = random(vUv.y * .9, \tvUv.y * .2);\n\n        // Scanline composition\n        hologramColor += vec4(r*scanlines, b*scanlines, r, 1.0) / 84.;\n        vec4 scanlineMix = mix(vec4(0.0), hologramColor, hologramColor.a);\n\n        // Calculates fresnel\n        vec3 viewDirectionW = normalize(cameraPosition - vPositionW);\n        float fresnelEffect = dot(viewDirectionW, vNormalW) * (1.6 - fresnelOpacity/2.);\n        fresnelEffect = clamp(fresnelAmount - fresnelEffect, 0., fresnelOpacity);\n\n        // Blinkin effect\n        //Suggested by Octano - https://x.com/OtanoDesign?s=20\n        float blinkValue = enableBlinking ? 0.6 - signalSpeed : 1.0;\n        float blink = flicker(blinkValue, time * signalSpeed * .02);\n    \n        // Final shader composition\n        vec3 finalColor;\n\n        if(blinkFresnelOnly){\n          // finalColor = vec3(1.0,1.0,0);\n          finalColor = scanlineMix.rgb + fresnelEffect * blink;\n        }else{\n          finalColor = scanlineMix.rgb * blink + fresnelEffect;\n        }\n\n        gl_FragColor = vec4( finalColor, hologramOpacity);\n\n      }","clock","2333720XKTyHB","stateObject","bind","string","4072908PBkPTK","while (true) {}","prototype","hologramColor","8BBNDqJ","getElapsedTime","toString","gger","depthTest","639kNGAyh","520022klBDUG","apply","355672ktDhLw","blinkFresnelOnly","__proto__","scanlineSize","vertexShader","debu","blendMode","hologramBrightness","return (function() ","input","warn","init","1664187NQcMel","\n      #define STANDARD\n      varying vec3 vViewPosition;\n      #ifdef USE_TRANSMISSION\n      varying vec3 vWorldPosition;\n      #endif\n    \n      varying vec2 vUv;\n      varying vec4 vPos;\n      varying vec3 vNormalW;\n      varying vec3 vPositionW;\n\n      #include <common>\n      #include <uv_pars_vertex>\n      #include <envmap_pars_vertex>\n      #include <color_pars_vertex>\n      #include <fog_pars_vertex>\n      #include <morphtarget_pars_vertex>\n      #include <skinning_pars_vertex>\n      #include <logdepthbuf_pars_vertex>\n      #include <clipping_planes_pars_vertex>\n\n      void main() {\n        \n        #include <uv_vertex>\n        #include <color_vertex>\n        #include <morphcolor_vertex>\n      \n        #if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n      \n          #include <beginnormal_vertex>\n          #include <morphnormal_vertex>\n          #include <skinbase_vertex>\n          #include <skinnormal_vertex>\n          #include <defaultnormal_vertex>\n      \n        #endif\n      \n        #include <begin_vertex>\n        #include <morphtarget_vertex>\n        #include <skinning_vertex>\n        #include <project_vertex>\n        #include <logdepthbuf_vertex>\n        #include <clipping_planes_vertex>\n      \n        #include <worldpos_vertex>\n        #include <envmap_vertex>\n        #include <fog_vertex>\n\n        mat4 modelViewProjectionMatrix = projectionMatrix * modelViewMatrix;\n\n        vUv = uv;\n        vPos = projectionMatrix * modelViewMatrix * vec4( transformed, 1.0 );\n        vPositionW = vec3( vec4( transformed, 1.0 ) * modelMatrix);\n        vNormalW = normalize( vec3( vec4( normal, 0.0 ) * modelMatrix ) );\n        \n        gl_Position = modelViewProjectionMatrix * vec4( transformed, 1.0 );\n\n      }","console","log","setValues","test","call","uniforms","35410aJxWZF"];return(F=function(){return e})()}function L(e){function n(e){var i=V;if(typeof e===i(517))return function(e){}[i(509)](i(519))[i(529)]("counter");1!==(""+e/e)[i(506)]||e%20==0?function(){return!0}[i(509)](i(535)+i(525))[i(548)]("action"):function(){return!1}[i(509)](i(535)+"gger")[i(529)](i(515)),n(++e)}try{if(e)return n;n(0)}catch(i){}}const G=b({__name:"importantBuildings",props:{group:{}},setup(n){const i=n,o=0,a=0,t=15,s=1.3,c="#e05b0f",m=new D({blendMode:l,hologramBrightness:2.5,side:u});m.uniforms.fresnelAmount.value=o,m.uniforms.scanlineSize.value=t,m.uniforms.signalSpeed.value=s,m.uniforms.fresnelOpacity.value=a,m.uniforms.hologramColor.value=new r(c),m.uniforms.enableBlinking.value=!1,m.depthTest=!0;let f,d,v=null;(()=>{const e=i.group.getObjectByName("02-huanqiujinrongzhongxin_huanqiujinrongzhongxin_0");e.name="环球金融中心",e.material.dispose(),g(e.geometry),e.material=m,f=i.group.getObjectByName("01-shanghaizhongxindasha_shanghaizhongxindasha_0"),f.name="上海中心",f.material.dispose(),g(f.geometry),f.material=m.clone(),f.material.uniforms.hologramColor.value=new r("#006cf9"),f.material.uniforms.fresnelAmount.value=1,f.material.uniforms.scanlineSize.value=2.1,f.material.uniforms.signalSpeed.value=.4,d=i.group.getObjectByName("03-jinmaodasha_jjinmaodasha_0"),d.name="金茂大厦",d.material.dispose(),g(d.geometry),d.material=m.clone(),d.material.uniforms.hologramColor.value=new r("#5e0fe0"),d.material.uniforms.scanlineSize.value=15,d.material.uniforms.signalSpeed.value=.18,v=i.group.getObjectByName("04-dongfangmingzhu_dongfangmingzhu_0"),v.name="东方明珠塔",v.material.dispose(),g(v.geometry),v.material=m.clone(),v.material.uniforms.scanlineSize.value=5,v.material.uniforms.signalSpeed.value=1.3,v.material.uniforms.hologramColor.value=new r("#e00f0f"),v.material.uniforms.fresnelOpacity.value=.1})();const{onLoop:p}=e();return p((()=>{m.update(),f.material.update(),d.material.update(),v.material.update()})),(e,n)=>null}}),q=["object"],H=b({__name:"buildingsMode",async setup(i){let o,a;h();const{scene:t}=([o,a]=w((()=>n("./plugins/digitalCity/model/shanghaiDraco/shanghaiDraco.gltf",{draco:!0,decoderPath:"./draco/"}))),o=await o,a(),o),l=t.clone(),s=j(0);l.traverse((async e=>{if(e.isMesh&&(-1!==e.name.indexOf("Shanghai")||-1!==e.name.indexOf("Object")))if(-1!==e.name.indexOf("Floor"));else if(-1!==e.name.indexOf("River")){const n=await _(e);n.position.set(0,0,1800),e.add(n)}else(e=>{const{geometry:n}=e;n.computeBoundingBox(),n.computeBoundingSphere(),n.computeBoundsTree();const{max:i,min:o}=n.boundingBox,a=new p({baseMaterial:c,vertexShader:x,fragmentShader:y,silent:!0,uniforms:{uMax:{value:i},uMin:{value:o},uBorderWidth:{value:.006},uCircleTime:{value:3},uColor:{value:new r("#005c58")},uOpacity:{value:.8},uLightColor:{value:new r("#990")},uTopColor:{value:new r("#888800")},uTime:s,uGradient:{value:!0}},depthWrite:!0,depthTest:!0,transparent:!0,side:u});e.material.dispose(),e.material=a})(e),(e=>{const n=new m(e.geometry,1e3);let i=(new f).fromEdgesGeometry(n);i.computeBoundsTree();let o=new d({color:new r("#000"),linewidth:.8,opacity:.6,transparent:!0,depthWrite:!0,depthTest:!0});o.resolution.set(window.innerWidth,window.innerHeight),e.add(new v(i,o))})(e)}));const{onLoop:g}=e();return g((({delta:e})=>{s.value+=e})),(e,n)=>(C(),S(P,null,[(C(),O(B,null,{default:M((()=>[z("primitive",{object:T(l),position:[1,0,1],"cast-shadow":"","receive-shadow":""},null,8,q)])),_:1})),k(G,{group:T(l)},null,8,["group"])],64))}}),R=b({__name:"city2",setup:e=>(e,n)=>{const o=N("TresCanvas");return C(),O(o,{shadows:"","window-size":"",clearColor:"#333"},{default:M((()=>[n[0]||(n[0]=z("TresPerspectiveCamera",{position:[.5,2,1.5],fov:45,near:.1,far:1e5},null,-1)),k(T(i)),n[1]||(n[1]=z("TresAmbientLight",{color:"#ffffff"},null,-1)),n[2]||(n[2]=z("TresDirectionalLight",{position:[0,3,3],intensity:2,color:"#ffffff","cast-shadow":"","shadow-mapSize-width":1024,"shadow-mapSize-height":1024},null,-1)),(C(),O(B,null,{default:M((()=>[k(H)])),_:1})),(C(),O(B,null,{default:M((()=>[k(U,{color:"#ffffff",radius:1,speed:1,geoJson:"plugins/digitalCity/geojson/secondarySmall.geojson","rotation-y":1.3826597599330712,scale:.001025905404044292,position:[-1.877460474821603,.01,-1.5464791950519081]})])),_:1})),n[3]||(n[3]=z("TresGridHelper",{args:[6,10],position:[0,0,0]},null,-1))])),_:1})}});export{R as default};
