import{p as t,$ as n,N as e,d as o}from"./@tresjs.GO-cpSrO1723718122052.js";import{j as r,a6 as a,V as s,i,M as c,O as l,l as u,bf as v,aV as f,aA as p,cs as d,bk as g}from"./three.eXhPIzTa1723718122052.js";import{P as m}from"./tweakpane.yHWGBmom1723718122052.js";import{d as x,a4 as h,e as y,o as b,f as I,g as _,J as S,j as U,u as w,aj as D,ak as P,al as E,m as A}from"./@vue.Q1VpS3901723718122052.js";import{_ as M}from"./@fesjs.KgfPPsKU1723718122052.js";import"./@vueuse.z522fCYR1723718122052.js";import"./vue-router.U0DG8FfS1723718122052.js";import"./lodash-es.nFpJXAf-1723718122052.js";import"./@qlin.yHhFDldE1723718122052.js";import"./pinia.p23gk2AF1723718122052.js";import"./@floating-ui.BPbuo5Gx1723718122052.js";import"./@juggle.7yjBMqoW1723718122052.js";function L(t,n){const e=T();return(L=function(t,n){return e[t-=430]})(t,n)}!function(t,n){const e=L,o=T();for(;;)try{if(928895===-parseInt(e(431))/1*(-parseInt(e(442))/2)+-parseInt(e(484))/3*(parseInt(e(452))/4)+parseInt(e(449))/5+parseInt(e(480))/6+-parseInt(e(475))/7+parseInt(e(433))/8*(-parseInt(e(464))/9)+parseInt(e(447))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(443)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){z(this,(function(){const t=L,n=new RegExp(t(436)),e=new RegExp(t(435),"i"),o=N(t(439));n[t(444)](o+t(462))&&e[t(444)](o+t(482))?N():o("0")}))()}();const F=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(443)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();F(void 0,(function(){const t=L,n=function(){const t=L;let n;try{n=Function("return (function() "+t(437)+");")()}catch(e){n=window}return n}(),e=n.console=n.console||{},o=["log",t(487),t(455),t(468),t(457),t(450),t(486)];for(let r=0;r<o.length;r++){const n=F[t(488)][t(432)][t(478)](F),a=o[r],s=e[a]||n;n[t(461)]=F.bind(F),n[t(470)]=s[t(470)][t(478)](s),e[a]=n}}))();function C(t,n,e){const o=L;if(typeof t!==o(446)||null===t)return t;const r=Array[o(453)](t)?[]:{};for(const a in t)t[o(471)](a)&&(r[a]=C(t[a])),a==n&&(r[n]=e);return r}function T(){const t=['" load was aborted.',"WagnerLoadShaderException","while (true) {}","__proto__","chain","stateObject","811071snmkVh","Texture","index","action","error","name","toString","hasOwnProperty","now","string","counter","6490540KkOnQz","gger","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","bind","ShaderMaterial","2415648DWSWQe","\" couldn't be loaded.","input","lastIndex","24AVSSuR","Vector2","trace","warn","constructor","call","responseText","message","1nyzqfB","prototype","8DAtgSx","Matrix2","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","function *\\( *\\)",'{}.constructor("return this")( )',"send","init","open","onabort","681068nbqWWS","apply","test","Vector3","object","22701630XEDQKl","exec","2871165Wbuwab","table","Vector4","820652iThmOA","isArray",'Shader "',"info","value","exception"];return(T=function(){return t})()}function N(t){function n(t){const e=L;if(typeof t===e(473))return function(t){}.constructor(e(460))[e(443)](e(474));1!==(""+t/t).length||t%20==0?function(){return!0}[e(488)]("debu"+e(476))[e(489)](e(467)):function(){return!1}[e(488)]("debu"+e(476))[e(443)](e(463)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const B=j;!function(t,n){const e=j,o=O();for(;;)try{if(417886===-parseInt(e(469))/1+parseInt(e(420))/2*(-parseInt(e(430))/3)+parseInt(e(447))/4+parseInt(e(480))/5+parseInt(e(456))/6+-parseInt(e(476))/7+parseInt(e(485))/8)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const R=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[j(493)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){R(this,(function(){const t=j,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(495),"i"),o=W(t(489));n[t(425)](o+t(411))&&e[t(425)](o+t(472))?W():o("0")}))()}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[j(493)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function j(t,n){const e=O();return(j=function(t,n){return e[t-=411]})(t,n)}G(void 0,(function(){const t=j,n=function(){const t=j;let n;try{n=Function(t(432)+t(415)+");")()}catch(e){n=window}return n}(),e=n.console=n.console||{},o=[t(473),t(484),t(419),"error",t(443),t(426),t(436)];for(let r=0;r<o[t(457)];r++){const n=G[t(450)].prototype[t(460)](G),a=o[r],s=e[a]||n;n[t(490)]=G[t(460)](G),n[t(416)]=s[t(416)].bind(s),e[a]=n}}))();class V{constructor(t,n){const e=j;this[e(423)]=1,this[e(438)]=1,this[e(475)]=n||{},this[e(459)]=this.settings[e(459)]||!1,this[e(421)]=t,this[e(418)]=this[e(412)](this[e(475)]),this.scene=new(a[e(471)]),this[e(452)]=new(a[e(496)])(new(a[e(451)])(1,1),new(a[e(506)])),this[e(477)][e(497)](this.quad),this.camera=new l(1,1,1,1,-1e4,1e4),this[e(440)]=new(a[e(464)])(1,1,{minFilter:void 0!==this[e(475)][e(500)]?this[e(475)][e(500)]:a[e(437)],magFilter:void 0!==this[e(475)][e(498)]?this[e(475)][e(498)]:u,wrapS:void 0!==this[e(475)][e(474)]?this[e(475)][e(474)]:a[e(462)],wrapT:void 0!==this[e(475)].wrapT?this[e(475)][e(445)]:v,format:this[e(459)]?f:a[e(505)],type:void 0!==this[e(475)][e(479)]?this[e(475)][e(479)]:a[e(429)],stencilBuffer:void 0===this[e(475)].stencilBuffer||this[e(475)][e(512)]}),this[e(454)]=this[e(440)][e(448)](),this[e(507)]=Date[e(427)](),this[e(492)]={},this[e(494)]={passItems:[],passes:[]}}[B(434)](t,n,e,o){const r=B;this.loadShadervf(n);const a={shaderName:t,params:e,uuid:o,shader:this[r(461)]};this[r(494)][r(487)].push(a)}[B(442)](t){const n=B;for(let e=this[n(494)][n(487)].length-1;e>=0;e--)this[n(494)][n(487)][e][n(499)]===parseInt(t)&&this[n(494)][n(487)][n(428)](e,1);console[n(473)](this[n(494)].passItems)}CopyPass(){const t=B;this[t(470)].call(this);return this[t(504)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}loadShadervf(t){return this.shader=function(t,n){const e=L,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,l=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,u={sampler2D:{type:"t",value:()=>new(a[L(465)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new r},vec3:{type:"v3",value:()=>new(a[L(445)])},vec4:{type:"v4",value:()=>new(a[L(451)])},bvec2:{type:"v2",value:()=>new(a[L(485)])},bvec3:{type:"v3",value:()=>new s},bvec4:{type:"v4",value:()=>new(a[L(451)])},ivec2:{type:"v2",value:()=>new(a[L(485)])},ivec3:{type:"v3",value:()=>new(a[L(445)])},ivec4:{type:"v4",value:()=>new(a[L(451)])},mat2:{type:"v2",value:()=>new(a[L(434)])},mat3:{type:"v3",value:()=>new i},mat4:{type:"v4",value:()=>new c}},v={float:{type:"fv",value:()=>[]},vec3:{type:"v3v",value:()=>[]}};let f;const p={resolution:{type:"v2",value:new r(1,1),default:!0},time:{type:"f",value:Date[e(472)](),default:!0},tInput:{type:"t",value:new(a[e(465)]),default:!0}};let d,g;for(;null!==(f=o[e(448)](n));)f.index===o[e(483)]&&o[e(483)]++,d=f[1],g=f[2],p[g]={type:u[d].type,value:u[d][e(456)]()};for(;null!==(f=l[e(448)](n));)f[e(466)]===o[e(483)]&&o[e(483)]++,d=f[1],g=f[2],f[3],p[g]={type:v[d].type,value:v[d][e(456)]()};return new(a[e(479)])({uniforms:p,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}("varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }",t),this.shader}Pass(t){const n=B;this[n(461)]=null,this[n(424)]={}}[B(439)](){const t=B;this[t(491)]=this[t(440)],this.write=this[t(454)]}[B(465)](t,n){const e=B,o=window[e(444)],r=window[e(511)];t.setSize(1*o,1*r),n[e(413)][e(422)](70,o/r,n[e(488)],n[e(431)]),this[e(510)](o,r);return this[e(449)](o,r,!0)}setSize(t,n){const e=B;this[e(423)]=t,this.height=n,this[e(509)].projectionMatrix[e(441)](t/-2,t/2,n/2,n/-2,this.camera[e(488)],this[e(509)][e(431)]),this[e(452)][e(478)][e(482)](t,n,1),this[e(440)][e(510)](t,n),this[e(454)][e(510)](t,n)}[B(449)](t,n,e){const o=B;return new(a[o(464)])(t,n,{minFilter:a[o(437)],magFilter:u,format:e?a[o(435)]:a[o(505)]})}render(t,n,e,o){const r=B;this[r(421)].setRenderTarget(this[r(466)]),this[r(421)][r(468)](t,n),o||this.swapBuffers()}swapBuffers(){const t=B,n=this[t(466)];this[t(466)]=this[t(491)],this.read=n}pass(){const t=B;for(let n=0;n<this[t(494)][t(487)].length;n++){const e=this[t(494)][t(487)][n].shader,o=this[t(494)][t(487)][n][t(424)];if(this.renderer[t(503)](this[t(466)]),e instanceof a[t(481)]){this[t(452)][t(417)]=e,this[t(452)][t(417)][t(446)][t(467)].value=this[t(491)][t(414)],this[t(452)].material[t(446)][t(458)][t(501)][t(482)](this.width,this.height),this.quad.material[t(446)].time[t(501)]=.001*(Date.now()-this[t(507)]);for(const n in o)this[t(452)][t(417)].uniforms[n][t(501)]=o[n];this[t(421)].render(this.scene,this[t(509)]),this[t(433)]()}}}toScreen(t,n){const e=B;this[e(421)].setRenderTarget(null),this[e(452)][e(417)]=this[e(418)],this[e(452)][e(417)][e(446)][e(467)].value=this[e(491)][e(414)],this.quad[e(417)][e(446)][e(458)][e(501)][e(482)](this[e(423)],this[e(438)]),this[e(421)][e(468)](this[e(477)],this[e(509)])}}function O(){const t=["\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","Mesh","add","magFilter","uuid","minFilter","value","while (true) {}","setRenderTarget","loadShadervf","RGBFormat","MeshBasicMaterial","startTime","call","camera","setSize","innerHeight","stencilBuffer","chain","CopyPass","projectionMatrix","texture",'{}.constructor("return this")( )',"toString","material","copyPass","info","357104YctZjj","renderer","makePerspective","width","params","test","table","now","splice","UnsignedByteType","6FKtSTN","far","return (function() ","swapBuffers","addPass","RGBAFormat","trace","LinearFilter","height","Reset","front","makeOrthographic","removePass","exception","innerWidth","wrapT","uniforms","2781556YtphAg","clone","getOfflineTexture","constructor","PlaneGeometry","quad","action","back","string","3544224YCbgNJ","length","resolution","useRGBA","bind","shader","ClampToEdgeWrapping","debu","WebGLRenderTarget","onWindowResize","write","tInput","render","66759kOBKaP","Pass","Scene","input","log","wrapS","settings","4217255aAZKFq","scene","scale","type","248980QXzlcX","ShaderMaterial","set","stateObject","warn","866600zhLENF","gger","passItems","near","init","__proto__","read","passes","apply","Stack"];return(O=function(){return t})()}function W(t){function n(t){const e=j;if(typeof t===e(455))return function(t){}[e(450)](e(502))[e(493)]("counter");1!==(""+t/t)[e(457)]||t%20==0?function(){return!0}[e(450)](e(463)+e(486))[e(508)](e(453)):function(){return!1}[e(450)](e(463)+e(486))[e(493)](e(483)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const H="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",k=K;!function(t,n){const e=K,o=Z();for(;;)try{if(808232===-parseInt(e(201))/1*(-parseInt(e(219))/2)+parseInt(e(227))/3+parseInt(e(170))/4*(parseInt(e(159))/5)+-parseInt(e(177))/6*(parseInt(e(208))/7)+-parseInt(e(231))/8+parseInt(e(213))/9+-parseInt(e(209))/10*(parseInt(e(167))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const X=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){X(this,(function(){const t=K,n=new RegExp(t(204)),e=new RegExp(t(178),"i"),o=$(t(237));n[t(186)](o+t(215))&&e[t(186)](o+"input")?$():o("0")}))()}();const q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[K(225)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function K(t,n){const e=Z();return(K=function(t,n){return e[t-=158]})(t,n)}function Z(){const t=["Mesh","新增通道","plugins/postProcessing/image/1324-normal.jpg","receiveShadow","stateObject","apply","pass","1176690pinKgr","InvertPass","Vector2","POISSONPass","11203696LTWMWX","split","addFolder","关闭通道","text","autoClearColor","init","add","addPass","onWindowResize","material","5gGmJgs","后处理类型","map","__proto__","RGBPass","list","prototype","render","88517SxNrEV","addButton","CGAPass","3891740lVIzve","debu","trace","table","SOBELPass","value","label","11562FXdUFY","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","push","console","error","dispose","constructor","title","FXAAPass","test","VIGNETTE1Pass","mergeGeometries","random","bind","values",'{}.constructor("return this")( )',"plugins/postProcessing/image/1324.jpg","info","DOTPass","SEPIAPass","action","postProcessing","target","toString","1306259EigADE","BufferGeometry","string","function *\\( *\\)","castShadow","VIGNETTE2Pass","warn","658hIEVzW","1880BuqKpU","keys","click","counter","11081196igEXTO","removePass","chain","gger","call","CIRCULARPass","2dtopAD"];return(Z=function(){return t})()}q(void 0,(function(){const t=K,n=function(){const t=K;let n;try{n=Function("return (function() "+t(192)+");")()}catch(e){n=window}return n}(),e=n[t(180)]=n[t(180)]||{},o=["log",t(207),t(194),t(181),"exception",t(173),t(172)];for(let r=0;r<o.length;r++){const n=q[t(183)][t(165)][t(190)](q),a=o[r],s=e[a]||n;n[t(162)]=q[t(190)](q),n.toString=s[t(200)][t(190)](s),e[a]=n}}))();function $(t){function n(t){const e=K;if(typeof t===e(203))return function(t){}.constructor("while (true) {}").apply(e(212));1!==(""+t/t).length||t%20==0?function(){return!0}[e(183)](e(171)+"gger")[e(217)](e(197)):function(){return!1}[e(183)](e(171)+e(216))[e(225)](e(224)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const Q=M(x({__name:k(198),async setup(o){const r=k;let s,i;const{camera:c,renderer:l,scene:u,sizes:v}=t();for(var f=new(a[r(202)]),x=[],y=0;y<100;y++){var b=new p(100,100,100);b.translate(1500*Math[r(189)](),1500*Math[r(189)](),1500*Math[r(189)]()),x[r(179)](b)}f=d[r(188)](x);const I=([s,i]=h((()=>e({map:r(193)}))),s=await s,i(),s),_=([s,i]=h((()=>e({map:r(222)}))),s=await s,i(),s);var S=new g({map:I[r(161)],normalMap:_[r(161)],normalScale:new(a[r(229)])(.8,-.8),shininess:100}),U=new(a[r(220)])(f,S);U[r(205)]=!0,U[r(223)]=!0,u.value[r(238)](U);const w=new V(l.value,{useRGBA:!0}),D=new m;let P=null,E=[{text:r(228),value:{InvertPass:H}},{text:r(185),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:r(196),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:"SNOISEPass",value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:"BOXBLURPass",value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:"DENOISEPass",value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:r(169),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:_[r(161)]}}},{text:r(174),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:r(163),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:r(195),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:r(218),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:r(230),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:r(187),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:r(206),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:"FREICHENPass",value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:"TOONPass",value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],A="InvertPass",M=H,L=null;D.addBlade({view:r(164),label:r(160),options:E,value:""}).on("change",(t=>{P=t.value}));const z=D.addButton({title:"新增",label:r(221)});let F=0;z.on(r(211),(t=>{const n=r;A=Object[n(210)](P)[0],M=Object.values(P)[0],L=Object[n(191)](P)[1];let e=F++,o=D[n(233)]({title:A});for(const r in L){let t=L[r];o.addBlade({view:n(235),label:r,parse:t=>String(t),value:t})}o[n(168)]({title:"移除~"+e,label:n(234)}).on(n(211),(t=>{const e=n;let o=t[e(199)][e(184)][e(232)]("~")[1];w[e(214)](o)})).on(n(211),(()=>{o[n(182)]()}));let a=C(L,t[n(199)][n(176)],t[n(175)]);w[n(239)](A,M,a,e)})),w[r(240)](l.value,c[r(175)]);const{onLoop:T}=n();return T((({delta:t})=>{const n=r;U&&(l[n(175)][n(236)]=!0,w.Reset(),U[n(158)]=S,w[n(166)](u[n(175)],c[n(175)]),w[n(226)](),w.toScreen(u[n(175)],c[n(175)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),Y=st;function J(){const t=["3433350czwlUS","constructor","9XQiPnL","1fqHuzo","gger","166672AKnDWt","info","return (function() ","528472iaaTxG","log","10670470fnUgUM","length","init","exception","#000000","7980224NhKgWz","TresAmbientLight","error","apply","stateObject","TresCanvas","bind","trace","TresDirectionalLight","TresPerspectiveCamera","prototype","string","call","console","chain","2518356iJxQYs","debu","toString","__proto__","action","function *\\( *\\)","input","#ffffff","test","1684374ucBwyb","10KqFFau"];return(J=function(){return t})()}!function(t,n){const e=st,o=J();for(;;)try{if(756153===parseInt(e(290))/1*(parseInt(e(317))/2)+parseInt(e(285))/3+parseInt(e(295))/4+-parseInt(e(286))/5*(parseInt(e(287))/6)+-parseInt(e(302))/7+parseInt(e(292))/8+parseInt(e(289))/9*(parseInt(e(297))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const tt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[st(305)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){tt(this,(function(){const t=st,n=new RegExp(t(281)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=it(t(299));n[t(284)](o+t(316))&&e[t(284)](o+t(282))?it():o("0")}))()}();const nt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();nt(void 0,(function(){const t=st;let n;try{n=Function(t(294)+'{}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(315)]=n[t(315)]||{},o=[t(296),"warn",t(293),t(304),t(300),"table",t(309)];for(let a=0;a<o[t(298)];a++){const n=nt.constructor[t(312)][t(308)](nt),r=o[a],s=e[r]||n;n[t(279)]=nt[t(308)](nt),n[t(319)]=s[t(319)][t(308)](s),e[r]=n}}))();const et={ref:"perspectiveCameraRef",position:[600,850,-1500],fov:45,near:.1,far:1e5},ot=S(Y(303),{color:Y(283),intensity:2},null,-1),rt=S(Y(310),{position:[100,100,0],intensity:2,color:Y(283)},null,-1),at=x({__name:"postProcessingEditor",setup(t){const e=Y,r={clearColor:e(301),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:"manual"},a={autoRotate:!0,enableDamping:!0},{onLoop:s}=n();return s((({delta:t})=>{})),(t,n)=>{const s=e,i=y(s(307));return b(),I(i,A(r,{"window-size":""}),{default:_((()=>[S(s(311),et,null,512),U(w(o),D(P(a)),null,16),ot,rt,(b(),I(E,null,{default:_((()=>[U(Q)])),_:1}))])),_:1},16)}}});function st(t,n){const e=J();return(st=function(t,n){return e[t-=279]})(t,n)}function it(t){function n(t){const e=st;if(typeof t===e(313))return function(t){}[e(288)]("while (true) {}").apply("counter");1!==(""+t/t).length||t%20==0?function(){return!0}[e(288)](e(318)+e(291))[e(314)](e(280)):function(){return!1}.constructor("debu"+e(291))[e(305)](e(306)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{at as default};
