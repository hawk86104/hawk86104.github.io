import{_ as t}from"./earth.vue_vue_type_script_setup_true_lang.GCjCsVU81761276103973.js";import{_ as e,K as a}from"./@tresjs.B_KjVy0E1761276103973.js";import{d as n,w as r,G as s,o,I as i,a9 as u,aa as l,r as p,g as m,b as c,e as v,h as d,u as f,ap as _}from"./@vue.CKlgtJke1761276103973.js";import{k as j,d as g}from"./three.Bhn4-0ry1761276103973.js";import{P as y}from"./tweakpane.CqZAnw7f1761276103973.js";import"./vanilla.esm.5.5.0.CRlEbOMK1761276103973.js";import"./object-hash.1qNYTrnD1761276103973.js";import"./@amap.fjyZdsU91761276103973.js";import"./jszip.y_yjJ09m1761276103973.js";import"./Resource.CSaxGSPI1761276103973.js";import"./useTexture.B3KXI5F11761276103973.js";import"./postprocessing.CeTFUAN_1761276103973.js";import"./@vueuse.wtfleElW1761276103973.js";const h=n({__name:"pointsScan",props:{color:{default:"#FFFFFF"},opacity:{default:1},speed:{default:1}},setup(t){const a=t,n={uniforms:{uTime:{value:0},pointNum:{value:new g(32,16)},uColor:{value:new j(a.color)},uOpacity:{value:a.opacity}},transparent:!0,vertexShader:"\n\t\t\t\t\tvarying vec2 vUv;\n                    void main(){\n\t\t\t\t\t\tvUv=uv;\n\t\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                    }",fragmentShader:"\n\t\t\t\t\tfloat PI = acos(-1.0);\n                    uniform vec3 uColor;\n                    uniform vec2 pointNum;\n                    uniform float uTime;\n                    varying vec2 vUv;\n\t\t\t\t\tuniform float uOpacity;\n                    void main(){\n\t\t\t\t\t\tvec2 uv = vUv+ vec2(0.0, uTime);\n\t\t\t\t\t\tfloat current = abs(sin(uv.y * PI));\n\t\t\t\t\t\tif(current < sin(0.4714*PI)) {\n\t\t\t\t\t\t\tcurrent=current*0.5;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfloat d = distance(fract(uv * pointNum*2.0), vec2(0.5, 0.5));\n\n\t\t\t\t\t\tif(d > current*0.2 ) {\n\t\t\t\t\t\t\tdiscard;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tgl_FragColor =vec4(uColor,current*uOpacity);\n\t\t\t\t\t\t}\n                    }"};r(()=>[a.color,a.opacity],([t,e])=>{n.uniforms.uColor.value=new j(t),n.uniforms.uOpacity.value=e});const{onBeforeRender:p}=e();return p(({delta:t})=>{n.uniforms.uTime.value+=.1*t*a.speed}),(t,e)=>(o(),s("TresMesh",null,[e[0]||(e[0]=i("TresSphereGeometry",{args:[1,32,32]},null,-1)),i("TresShaderMaterial",u(l(n)),null,16)]))}}),T=n({__name:"pointsScan",setup(e){const n=p({color:"#ffffff",opacity:.48,speed:4.8,scale:1.1}),r=new y;return r.addBinding(n,"color",{label:"颜色"}),r.addBinding(n,"opacity",{label:"透明度",min:0,max:1,step:.01}),r.addBinding(n,"speed",{label:"速度",min:.1,max:5,step:.1}),r.addBinding(n,"scale",{label:"大小",min:1.01,max:2,step:.01}),(e,r)=>{const s=m("TresCanvas");return o(),c(s,{clearColor:"#201919","window-size":""},{default:v(()=>[r[0]||(r[0]=i("TresPerspectiveCamera",{position:[3,3,0],fov:45,near:.1,far:1e4},null,-1)),d(f(a),{enableDamping:""}),r[1]||(r[1]=i("TresAmbientLight",{intensity:3},null,-1)),(o(),c(_,null,{default:v(()=>[d(t)]),_:1})),(o(),c(_,null,{default:v(()=>[d(h,u(l(n)),null,16)]),_:1}))]),_:1})}}});export{T as default};
