import{_ as t,b as n,ar as e,T as o,ai as r}from"./three.RUAk_tvU1742436572432.js";import{e as a,a as i,o as s}from"./@tresjs.Uh9iM8du1742436572432.js";import"./index.1dpmY2UU1742436572432.js";import{c}from"./simplex-noise.jB2HxhHB1742436572432.js";import{C as l}from"./index.QfjfPqR61742436572432.js";import{d as u,a3 as f,o as p,H as h,N as m,u as v,r as d,e as g,f as x,g as w,j as y,aj as b,ak as _,al as j}from"./@vue.deO5D3Lf1742436572432.js";import{_ as z}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.ZMOY_VRI1742436572432.js";import"./postprocessing.5QD_59xS1742436572432.js";import"./@vueuse.F4UpVCIS1742436572432.js";import"./lamina.5PrV8eRB1742436572432.js";import"./glsl-tokenizer.w0U3pbtj1742436572432.js";import"./@amap.NCZycnIs1742436572432.js";import"./glsl-token-descope.-gBICg1t1742436572432.js";import"./glsl-token-depth.kvQPqIWP1742436572432.js";import"./glsl-token-scope.llSKssEX1742436572432.js";import"./glsl-token-properties.5nPkBhvm1742436572432.js";import"./glsl-token-assignments.CQ4UgMtR1742436572432.js";import"./glsl-token-string.g53rE_RS1742436572432.js";import"./glsl-token-functions.U36bWi-41742436572432.js";import"./object-hash.oiujBqsB1742436572432.js";import"./jszip.p9pp11zp1742436572432.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.hKGp9bhf1742436572432.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.KPsDqz_E1742436572432.js";import"./three-stdlib.T47etdkJ1742436572432.js";import"./@pmndrs.8bPNhH1E1742436572432.js";import"./utils.4srb9dX11742436572432.js";const M=C;!function(t,n){const e=C,o=T();for(;;)try{if(109893===parseInt(e(343))/1+-parseInt(e(342))/2+parseInt(e(350))/3*(parseInt(e(331))/4)+-parseInt(e(391))/5*(parseInt(e(375))/6)+-parseInt(e(361))/7+-parseInt(e(363))/8+parseInt(e(387))/9*(parseInt(e(366))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(400)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){A(this,(function(){const t=C,n=new RegExp(t(410)),e=new RegExp(t(357),"i"),o=O(t(352));n.test(o+t(358))&&e[t(348)](o+t(381))?O():o("0")}))()}();const I=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function C(t,n){const e=T();return(C=function(t,n){return e[t-=331]})(t,n)}I(void 0,(function(){const t=C;let n;try{n=Function(t(393)+t(401)+");")()}catch(r){n=window}const e=n[t(341)]=n[t(341)]||{},o=["log","warn",t(404),"error",t(369),t(394),t(377)];for(let a=0;a<o[t(371)];a++){const n=I.constructor[t(354)][t(374)](I),r=o[a],i=e[r]||n;n[t(333)]=I[t(374)](I),n[t(372)]=i[t(372)][t(374)](i),e[r]=n}}))();const F=[M(395)],R=[M(382),"attributes-position",M(362),M(340),M(383),M(360),M(378),"attributes-halfRootAngleCos"],k=[M(346)],S=["side"];function T(){const t=["135080awFnJa","102916GcOuOQ","Color","InstancedBufferAttribute","geometry","grass","test","counter","951TVcTsB","position","init","set","prototype","random","needsUpdate","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","chain","translate","attributes-stretch","909104bKQtqs","attributes-uv","1644088FFvoUo","push","width","10drVGiA","array","Vector4","exception","TresGroup","length","toString","TresMeshStandardMaterial","bind","6ZDPGbW","gger","trace","attributes-halfRootAngleSin","attributes","side","input","index","attributes-orientation","sin","while (true) {}","PlaneGeometry","2257461KECQNR","offsetsF32","convertSRGBToLinear","map","149305BRyGrb","Vector3","return (function() ","table","material","joints","instances","constructor","TresMesh","apply",'{}.constructor("return this")( )',"   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","value","info","normalize","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","time","string","uniforms","function *\\( *\\)","halfRootAngleSinF32","alphaMap","2384TZtCDn","computeVertexNormals","__proto__","DoubleSide","debu","call","cos","action","lookAt","attributes-offset","console"];return(T=function(){return t})()}const D=u({__name:M(347),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(r){const s=M;let u,d;const g=([u,d]=f((()=>i({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),u=await u,d(),u),x=r,w=c(Math[s(355)]);function y(t,n){const o=t.x*n.w+t.y*n.z-t.z*n.y+t.w*n.x,r=-t.x*n.z+t.y*n.w+t.z*n.x+t.w*n.y,a=t.x*n.y-t.y*n.x+t.z*n.w+t.w*n.z,i=-t.x*n.x-t.y*n.y-t.z*n.z+t.w*n.w;return new e(o,r,a,i)}function b(t,n){var e=2*w(t/50,n/50);return e+=4*w(t/100,n/100),e+=.2*w(t/10,n/10)}const _=function(n,r){const a=s,i=[],c=[],l=[],u=[],f=[];let p=new(t[a(368)]),h=new e;const m=-.25;for(let e=0;e<n;e++){const o=Math[a(355)]()*r-r/2,s=Math[a(355)]()*r-r/2,v=b(o,s);i[a(364)](o,v,s);let d=Math.PI-Math[a(355)]()*(2*Math.PI);u[a(364)](Math[a(384)](.5*d)),f[a(364)](Math.cos(.5*d));let g=new(t[a(392)])(0,1,0),x=g.x*Math[a(384)](d/2),w=g.y*Math[a(384)](d/2),_=g.z*Math[a(384)](d/2),j=Math[a(337)](d/2);p[a(353)](x,w,_,j).normalize(),d=.5*Math[a(355)]()+m,g=new(t[a(392)])(1,0,0),x=g.x*Math[a(384)](d/2),w=g.y*Math[a(384)](d/2),_=g.z*Math[a(384)](d/2),j=Math[a(337)](d/2),h[a(353)](x,w,_,j)[a(405)](),p=y(p,h),d=.5*Math.random()+m,g=new(t[a(392)])(0,0,1),x=g.x*Math[a(384)](d/2),w=g.y*Math[a(384)](d/2),_=g.z*Math.sin(d/2),j=Math.cos(d/2),h[a(353)](x,w,_,j)[a(405)](),p=y(p,h),c.push(p.x,p.y,p.z,p.w),e<n/3?l[a(364)](1.8*Math[a(355)]()):l[a(364)](Math[a(355)]())}return{offsetsF32:new o(new Float32Array(i),3),orientationsF32:new(t[a(345)])(new Float32Array(c),4),stretchesF32:new(t[a(345)])(new Float32Array(l),1),halfRootAngleCosF32:new(t[a(345)])(new Float32Array(f),1),halfRootAngleSinF32:new o(new Float32Array(u),1)}}(x[s(397)],x[s(365)]),j=new(t[s(386)])(x.bW,x.bH,1,x[s(396)])[s(359)](0,x.bH/2,0),z=new(t[s(386)])(x[s(365)],x[s(365)],32,32);z[s(339)](new n(0,1,0));const A=z[s(379)].position;for(let t=0;t<A[s(367)][s(371)];t+=3)A[s(367)][t+1]=b(A[s(367)][t],A[s(367)][t+2]);z[s(379)][s(351)][s(356)]=!0,z[s(332)]();const I=new(l({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(t[s(344)])(.3,.9,0)[s(389)](),bottomColor:new(t[s(344)])(0,.2,0)[s(389)]()},s(402),s(406),(n=>{const e=s;n[e(380)]=t[e(334)]})));I[s(390)]=g.map,I[s(412)]=g[s(412)],I.toneMapped=!1;const{onLoop:C}=a();return C((({elapsed:t})=>{const n=s;I[n(409)][n(407)][n(403)]=t/4})),(n,e)=>{const o=s;return p(),h(o(370),null,[m("TresMesh",{material:v(I)},[m("TresInstancedBufferGeometry",{index:v(j)[o(382)],"attributes-position":v(j).attributes[o(351)],"attributes-uv":v(j)[o(379)].uv,"attributes-offset":v(_)[o(388)],"attributes-orientation":v(_).orientationsF32,"attributes-stretch":v(_).stretchesF32,"attributes-halfRootAngleSin":v(_)[o(411)],"attributes-halfRootAngleCos":v(_).halfRootAngleCosF32},null,8,R)],8,F),m(o(399),{position:[0,0,0],geometry:v(z)},[m(o(373),{color:"#000f00",side:t[o(334)]},null,8,S)],8,k)])}}});function O(t){function n(t){const e=C;if(typeof t===e(408))return function(t){}.constructor(e(385))[e(400)](e(349));1!==(""+t/t).length||t%20==0?function(){return!0}[e(398)](e(335)+e(376))[e(336)](e(338)):function(){return!1}[e(398)](e(335)+"gger")[e(400)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const E=B;!function(t,n){const e=B,o=G();for(;;)try{if(115290===parseInt(e(101))/1+-parseInt(e(133))/2+-parseInt(e(135))/3+parseInt(e(139))/4*(parseInt(e(115))/5)+-parseInt(e(140))/6*(parseInt(e(103))/7)+parseInt(e(106))/8*(-parseInt(e(125))/9)+parseInt(e(110))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const P=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[B(136)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function B(t,n){const e=G();return(B=function(t,n){return e[t-=100]})(t,n)}!function(){P(this,(function(){const t=B,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(114),"i"),o=N(t(104));n.test(o+t(124))&&e.test(o+"input")?N():o("0")}))()}();const U=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function G(){const t=["8972tfCtEn","6OVgVfq","resource.cos","117479NVmXoX","call","776993ijtImT","init","return (function() ","104QrRJNr","constructor","bind","debu","3938920uUAzxv","console","grass","table","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","315FmRoqA","length","error","exception","trace","https://opensource.cdn.icegl.cn","info","TresCanvas","prototype","chain","125424zllkcU",'{}.constructor("return this")( )',"while (true) {}","gger","action","log","TresPerspectiveCamera","stateObject","305626KWNvOh","warn","277230buUQgJ","apply","/images/skyBox/desert_1k.hdr","__proto__"];return(G=function(){return t})()}U(void 0,(function(){const t=B,n=function(){const t=B;let n;try{n=Function(t(105)+t(126)+");")()}catch(e){n=window}return n}(),e=n[t(111)]=n[t(111)]||{},o=[t(130),t(134),t(121),t(117),t(118),t(113),t(119)];for(let r=0;r<o[t(116)];r++){const n=U[t(107)][t(123)][t(108)](U),a=o[r],i=e[a]||n;n[t(138)]=U.bind(U),n.toString=i.toString[t(108)](i),e[a]=n}}))();const H=u({__name:E(112),setup(t){const n=d({alpha:!0,toneMapping:r,windowSize:!0,clearColor:6710886}),e=d({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=B,a=g(r(122));return p(),x(a,b(_(n)),{default:w((()=>[o[0]||(o[0]=m(r(131),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),y(v(s),b(_(e)),null,16),(p(),x(j,null,{default:w((()=>[y(D)])),_:1})),(p(),x(j,null,{default:w((()=>[y(v(z),{texture:r(120)+r(137)},null,8,["texture"])])),_:1}))])),_:1},16)}}});function N(t){function n(t){const e=B;if("string"==typeof t)return function(t){}[e(107)](e(127))[e(136)]("counter");1!==(""+t/t)[e(116)]||t%20==0?function(){return!0}[e(107)]("debu"+e(128))[e(102)](e(129)):function(){return!1}.constructor(e(109)+"gger")[e(136)](e(132)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{H as default};
