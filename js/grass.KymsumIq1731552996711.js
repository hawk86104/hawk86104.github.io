import{_ as t,t as n,V as e,T as o,ai as r}from"./three.KG0QRRig1731552996711.js";import{e as i,b as a,U as s,c}from"./@tresjs.01P8tiuF1731552996711.js";import"./index.6GIUdpTi1731552996711.js";import{a as l}from"./simplex-noise.Yx8GBgKo1731552996711.js";import{C as u}from"./index.oeIsV-zY1731552996711.js";import{d as f,a6 as p,o as h,D as m,J as v,u as d,r as g,f as x,g as w,j as y,aj as b,ak as _,al as j}from"./@vue.-THQH3GC1731552996711.js";import{_ as z}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.xJe0ByzN1731552996711.js";import"./@vueuse.YduQ9gvc1731552996711.js";import"./lamina.gUR5hR9O1731552996711.js";import"./glsl-tokenizer.dtpE3fAx1731552996711.js";import"./@amap.QHC596bA1731552996711.js";import"./glsl-token-descope.BatYp6Iv1731552996711.js";import"./glsl-token-depth.FfzuAsEO1731552996711.js";import"./glsl-token-scope.z-U0cXkX1731552996711.js";import"./glsl-token-properties.HLkWgMZP1731552996711.js";import"./glsl-token-assignments.POS3Im1m1731552996711.js";import"./glsl-token-string.4MgHPuh21731552996711.js";import"./glsl-token-functions.MGlhWrU41731552996711.js";import"./object-hash.DFvx-EIK1731552996711.js";import"./jszip.k9OTGFad1731552996711.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.Y38Yp_qs1731552996711.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.aeVIVO-d1731552996711.js";import"./three-stdlib.8zsNN-Kc1731552996711.js";import"./@pmndrs.n3UO_zuX1731552996711.js";import"./utils.y7sKiF0E1731552996711.js";const M=C;function I(){const t=["TresMeshStandardMaterial","sin","chain","log","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","geometry","orientationsF32","warn","width","constructor","test","halfRootAngleSinF32","bind","halfRootAngleCosF32","11PiPHtU","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","Color","exception","normalize","Vector3","action","array","2186404HMgtXb","translate","function *\\( *\\)","call","uniforms","material","Vector4","joints","DoubleSide","TresMesh","4qrqTQf","8aQNcVV","1996074LUDtCw","toneMapped","cos","4286795WrZRjB","random","alphaMap","counter","set","push","time","attributes-offset",'{}.constructor("return this")( )',"init","apply","attributes","__proto__","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","34384qgpwOT","stretchesF32","string","offsetsF32","console","debu","length","computeVertexNormals","input","attributes-halfRootAngleCos","PlaneGeometry","attributes-halfRootAngleSin","prototype","convertSRGBToLinear","side","14242710ljSNux","toString","TresInstancedBufferGeometry","attributes-orientation","InstancedBufferAttribute","trace","399888SzRUzW","value","position","803010UMPYJw","gger","map","384YvXXbT","error","stateObject","TresGroup"];return(I=function(){return t})()}!function(t,n){const e=C,o=I();for(;;)try{if(488825===-parseInt(e(483))/1*(parseInt(e(523))/2)+parseInt(e(526))/3+parseInt(e(473))/4+-parseInt(e(488))/5+parseInt(e(529))/6*(-parseInt(e(502))/7)+-parseInt(e(484))/8*(-parseInt(e(485))/9)+parseInt(e(517))/10*(parseInt(e(465))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(498)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function C(t,n){const e=I();return(C=function(t,n){return e[t-=463]})(t,n)}!function(){A(this,(function(){const t=C,n=new RegExp(t(475)),e=new RegExp(t(466),"i"),o=L(t(497));n[t(543)](o+t(535))&&e.test(o+t(510))?L():o("0")}))()}();const S=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(498)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();S(void 0,(function(){const t=C;let n;try{n=Function("return (function() "+t(496)+");")()}catch(r){n=window}const e=n.console=n[t(506)]||{},o=[t(536),t(540),"info",t(530),t(468),"table",t(522)];for(let i=0;i<o.length;i++){const n=S[t(542)][t(514)].bind(S),r=o[i],a=e[r]||n;n[t(500)]=S[t(463)](S),n.toString=a[t(518)][t(463)](a),e[r]=n}}))();const R=[M(478)],k=["index","attributes-position","attributes-uv",M(495),M(520),"attributes-stretch",M(513),M(511)],F=[M(538)],D=[M(516)],T=f({__name:"grass",props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(r){const s=M;let c,f;const g=([c,f]=p((()=>a({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),c=await c,f(),c),x=r,w=l(Math[s(489)]);function y(n,e){const o=s,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,i=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,a=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,c=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(479)])(r,i,a,c)}function b(t,n){var e=2*w(t/50,n/50);return e+=4*w(t/100,n/100),e+=.2*w(t/10,n/10)}const _=function(n,r){const i=s,a=[],c=[],l=[],u=[],f=[];let p=new(t[i(479)]),h=new(t[i(479)]);const m=-.25;for(let o=0;o<n;o++){const s=Math[i(489)]()*r-r/2,v=Math[i(489)]()*r-r/2,d=b(s,v);a[i(493)](s,d,v);let g=Math.PI-Math[i(489)]()*(2*Math.PI);u.push(Math[i(534)](.5*g)),f[i(493)](Math[i(487)](.5*g));let x=new e(0,1,0),w=x.x*Math[i(534)](g/2),_=x.y*Math[i(534)](g/2),j=x.z*Math.sin(g/2),z=Math[i(487)](g/2);p[i(492)](w,_,j,z)[i(469)](),g=.5*Math[i(489)]()+m,x=new(t[i(470)])(1,0,0),w=x.x*Math[i(534)](g/2),_=x.y*Math[i(534)](g/2),j=x.z*Math.sin(g/2),z=Math[i(487)](g/2),h[i(492)](w,_,j,z).normalize(),p=y(p,h),g=.5*Math[i(489)]()+m,x=new e(0,0,1),w=x.x*Math[i(534)](g/2),_=x.y*Math.sin(g/2),j=x.z*Math.sin(g/2),z=Math.cos(g/2),h[i(492)](w,_,j,z).normalize(),p=y(p,h),c[i(493)](p.x,p.y,p.z,p.w),o<n/3?l[i(493)](1.8*Math.random()):l[i(493)](Math.random())}return{offsetsF32:new(t[i(521)])(new Float32Array(a),3),orientationsF32:new(t[i(521)])(new Float32Array(c),4),stretchesF32:new o(new Float32Array(l),1),halfRootAngleCosF32:new o(new Float32Array(f),1),halfRootAngleSinF32:new(t[i(521)])(new Float32Array(u),1)}}(x.instances,x[s(541)]),j=new(t[s(512)])(x.bW,x.bH,1,x[s(480)])[s(474)](0,x.bH/2,0),z=new n(x[s(541)],x.width,32,32);z.lookAt(new(t[s(470)])(0,1,0));const I=z[s(499)].position;for(let t=0;t<I[s(472)].length;t+=3)I.array[t+1]=b(I[s(472)][t],I[s(472)][t+2]);z[s(499)][s(525)].needsUpdate=!0,z[s(509)]();const A=new(u({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(t[s(467)])(.3,.9,0).convertSRGBToLinear(),bottomColor:new(t[s(467)])(0,.2,0)[s(515)]()},s(537),s(501),(n=>{const e=s;n[e(516)]=t[e(481)]})));A[s(528)]=g[s(528)],A[s(490)]=g[s(490)],A[s(486)]=!1;const{onLoop:C}=i();return C((({elapsed:t})=>{const n=s;A[n(477)][n(494)][n(524)]=t/4})),(n,e)=>{const o=s;return h(),m(o(532),null,[v(o(482),{material:d(A)},[v(o(519),{index:d(j).index,"attributes-position":d(j)[o(499)][o(525)],"attributes-uv":d(j)[o(499)].uv,"attributes-offset":d(_)[o(505)],"attributes-orientation":d(_)[o(539)],"attributes-stretch":d(_)[o(503)],"attributes-halfRootAngleSin":d(_)[o(544)],"attributes-halfRootAngleCos":d(_)[o(464)]},null,8,k)],8,R),v(o(482),{position:[0,0,0],geometry:d(z)},[v(o(533),{color:"#000f00",side:t[o(481)]},null,8,D)],8,F)])}}});function L(t){function n(t){const e=C;if(typeof t===e(504))return function(t){}[e(542)]("while (true) {}")[e(498)](e(491));1!==(""+t/t)[e(508)]||t%20==0?function(){return!0}.constructor(e(507)+e(527))[e(476)](e(471)):function(){return!1}.constructor("debu"+e(527))[e(498)](e(531)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const P=q;!function(t,n){const e=q,o=B();for(;;)try{if(590772===-parseInt(e(300))/1*(-parseInt(e(282))/2)+-parseInt(e(302))/3*(-parseInt(e(271))/4)+-parseInt(e(264))/5+parseInt(e(297))/6*(-parseInt(e(268))/7)+parseInt(e(274))/8*(parseInt(e(292))/9)+-parseInt(e(280))/10+parseInt(e(299))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const U=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(273)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){U(this,(function(){const t=q,n=new RegExp(t(269)),e=new RegExp(t(284),"i"),o=O(t(290));n[t(295)](o+t(298))&&e[t(295)](o+t(270))?O():o("0")}))()}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function q(t,n){const e=B();return(q=function(t,n){return e[t-=264]})(t,n)}function B(){const t=["68fuUqtU","while (true) {}","apply","24zXqzLx","call","grass","debu","TresPerspectiveCamera","error","5310120yIgYmb","length","354rFKLHG","exception","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","stateObject","prototype","info","action",'{}.constructor("return this")( )',"init","__proto__","593226kejjjR","gger","toString","test","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","114xjisJY","chain","13268189XXScTN","2061IIfeyo","constructor","104610uYLcPQ","bind","console","counter","return (function() ","1029485fiNbmW","log","table","string","380891intCUX","function *\\( *\\)","input"];return(B=function(){return t})()}H(void 0,(function(){const t=q,n=function(){const t=q;let n;try{n=Function(t(306)+t(289)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(304)]||{},o=[t(265),"warn",t(287),t(279),t(283),t(266),"trace"];for(let r=0;r<o[t(281)];r++){const n=H.constructor[t(286)][t(303)](H),i=o[r],a=e[i]||n;n[t(291)]=H[t(303)](H),n[t(294)]=a[t(294)][t(303)](a),e[i]=n}}))();const E=f({__name:P(276),setup(t){const n=g({alpha:!0,toneMapping:r,windowSize:!0,clearColor:6710886}),e=g({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=q;return h(),x(d(c),b(_(n)),{default:w((()=>[o[0]||(o[0]=v(r(278),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),y(d(s),b(_(e)),null,16),(h(),x(j,null,{default:w((()=>[y(T)])),_:1})),(h(),x(j,null,{default:w((()=>[y(d(z),{texture:r(296)})])),_:1}))])),_:1},16)}}});function O(t){function n(t){const e=q;if(typeof t===e(267))return function(t){}[e(301)](e(272))[e(273)](e(305));1!==(""+t/t)[e(281)]||t%20==0?function(){return!0}[e(301)](e(277)+e(293))[e(275)](e(288)):function(){return!1}.constructor(e(277)+"gger")[e(273)](e(285)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{E as default};
