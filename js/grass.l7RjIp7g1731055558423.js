import{_ as t,C as n,as as e,V as o,ai as r}from"./three.3b9CEYeV1731055558423.js";import{e as i,b as a,U as s,c}from"./@tresjs.KsuCtVXf1731055558423.js";import"./index.vwenvS7N1731055558423.js";import{a as l}from"./simplex-noise.Yx8GBgKo1731055558423.js";import{C as u}from"./index.4qvnjoNo1731055558423.js";import{d as f,a6 as p,o as h,D as m,J as v,u as d,r as g,f as x,g as w,j as y,aj as b,ak as _,al as M}from"./@vue.u2cBPEWn1731055558423.js";import{_ as j}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.e2SXKOkB1731055558423.js";import"./@vueuse.GLWi_e1b1731055558423.js";import"./lamina.5IGgxcO71731055558423.js";import"./glsl-tokenizer.kbttt5971731055558423.js";import"./@amap.Gx_2STAs1731055558423.js";import"./glsl-token-descope._eyOODDl1731055558423.js";import"./glsl-token-depth.QhOqh68h1731055558423.js";import"./glsl-token-scope.p0ezMoAN1731055558423.js";import"./glsl-token-properties.87_Ycucu1731055558423.js";import"./glsl-token-assignments.YO3uGWm_1731055558423.js";import"./glsl-token-string.Z4D4zNmw1731055558423.js";import"./glsl-token-functions.bmAo2JIl1731055558423.js";import"./object-hash.Aye5eUi-1731055558423.js";import"./jszip.rU4UDkEH1731055558423.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.3ScCm7Id1731055558423.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.9IUbNDAE1731055558423.js";import"./three-stdlib.l7tW0NL21731055558423.js";import"./@pmndrs.3lOkADtW1731055558423.js";import"./utils.fOQmSSOH1731055558423.js";const z=T;!function(t,n){const e=T,o=k();for(;;)try{if(126585===-parseInt(e(383))/1*(-parseInt(e(362))/2)+-parseInt(e(364))/3*(-parseInt(e(387))/4)+-parseInt(e(357))/5+parseInt(e(392))/6+parseInt(e(397))/7+parseInt(e(429))/8+-parseInt(e(365))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[T(411)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){A(this,(function(){const t=T,n=new RegExp(t(361)),e=new RegExp(t(410),"i"),o=E(t(412));n[t(409)](o+"chain")&&e[t(409)](o+t(402))?E():o("0")}))()}();const I=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();I(void 0,(function(){const t=T,n=function(){const t=T;let n;try{n=Function(t(359)+t(367)+");")()}catch(e){n=window}return n}(),e=n[t(366)]=n[t(366)]||{},o=["log",t(426),t(401),t(427),t(420),t(432),"trace"];for(let r=0;r<o[t(382)];r++){const n=I[t(436)][t(428)][t(388)](I),i=o[r],a=e[i]||n;n[t(370)]=I[t(388)](I),n[t(430)]=a.toString.bind(a),e[i]=n}}))();const C=[z(386)],S=[z(375),z(418),z(400),z(434),z(394),"attributes-stretch",z(368),z(415)],R=[z(360)],F=[z(374)];function k(){const t=["Vector4","needsUpdate","length","1xTyURh","lookAt","stretchesF32","material","84YkqLds","bind","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","cos","counter","902094XAQYyV","push","attributes-orientation","grass","TresMeshStandardMaterial","902265FrgMTH","halfRootAngleSinF32","attributes","attributes-uv","info","input","orientationsF32","joints","stateObject","call","Color","TresInstancedBufferGeometry","test","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","apply","init","while (true) {}","convertSRGBToLinear","attributes-halfRootAngleCos","offsetsF32","sin","attributes-position","normalize","exception","alphaMap","time","computeVertexNormals","value","debu","warn","error","prototype","1545808VsAVMC","toString","string","table","PlaneGeometry","attributes-offset","set","constructor","width","array","random","Vector3","42165bZUeoi","map","return (function() ","geometry","function *\\( *\\)","304246mZGwsl","toneMapped","11814gwCGEY","5150457hZFPbr","console",'{}.constructor("return this")( )',"attributes-halfRootAngleSin","uniforms","__proto__","InstancedBufferAttribute","action","position","side","index","DoubleSide","instances","translate","TresMesh"];return(k=function(){return t})()}const D=f({__name:z(395),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(r){const s=z;let c,f;const g=([c,f]=p((()=>a({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),c=await c,f(),c),x=r,w=l(Math[s(439)]);function y(t,n){const o=t.x*n.w+t.y*n.z-t.z*n.y+t.w*n.x,r=-t.x*n.z+t.y*n.w+t.z*n.x+t.w*n.y,i=t.x*n.y-t.y*n.x+t.z*n.w+t.w*n.z,a=-t.x*n.x-t.y*n.y-t.z*n.z+t.w*n.w;return new e(o,r,i,a)}function b(t,n){var e=2*w(t/50,n/50);return e+=4*w(t/100,n/100),e+=.2*w(t/10,n/10)}const _=function(n,r){const i=s,a=[],c=[],l=[],u=[],f=[];let p=new e,h=new(t[i(380)]);const m=-.25;for(let e=0;e<n;e++){const s=Math[i(439)]()*r-r/2,v=Math[i(439)]()*r-r/2,d=b(s,v);a[i(393)](s,d,v);let g=Math.PI-Math[i(439)]()*(2*Math.PI);u.push(Math.sin(.5*g)),f[i(393)](Math[i(390)](.5*g));let x=new(t[i(440)])(0,1,0),w=x.x*Math.sin(g/2),_=x.y*Math[i(417)](g/2),M=x.z*Math[i(417)](g/2),j=Math[i(390)](g/2);p[i(435)](w,_,M,j)[i(419)](),g=.5*Math[i(439)]()+m,x=new o(1,0,0),w=x.x*Math.sin(g/2),_=x.y*Math[i(417)](g/2),M=x.z*Math[i(417)](g/2),j=Math.cos(g/2),h[i(435)](w,_,M,j)[i(419)](),p=y(p,h),g=.5*Math[i(439)]()+m,x=new(t[i(440)])(0,0,1),w=x.x*Math.sin(g/2),_=x.y*Math[i(417)](g/2),M=x.z*Math.sin(g/2),j=Math[i(390)](g/2),h[i(435)](w,_,M,j).normalize(),p=y(p,h),c[i(393)](p.x,p.y,p.z,p.w),e<n/3?l.push(1.8*Math[i(439)]()):l[i(393)](Math[i(439)]())}return{offsetsF32:new(t[i(371)])(new Float32Array(a),3),orientationsF32:new(t[i(371)])(new Float32Array(c),4),stretchesF32:new(t[i(371)])(new Float32Array(l),1),halfRootAngleCosF32:new(t[i(371)])(new Float32Array(f),1),halfRootAngleSinF32:new(t[i(371)])(new Float32Array(u),1)}}(x[s(377)],x[s(437)]),M=new(t[s(433)])(x.bW,x.bH,1,x[s(404)])[s(378)](0,x.bH/2,0),j=new(t[s(433)])(x.width,x[s(437)],32,32);j[s(384)](new(t[s(440)])(0,1,0));const A=j.attributes[s(373)];for(let t=0;t<A[s(438)][s(382)];t+=3)A.array[t+1]=b(A[s(438)][t],A[s(438)][t+2]);j[s(399)][s(373)][s(381)]=!0,j[s(423)]();const I=new(u({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(t[s(407)])(.3,.9,0).convertSRGBToLinear(),bottomColor:new n(0,.2,0)[s(414)]()},s(389),"\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }",(n=>{const e=s;n[e(374)]=t[e(376)]})));I[s(358)]=g.map,I[s(421)]=g[s(421)],I[s(363)]=!1;const{onLoop:k}=i();return k((({elapsed:t})=>{const n=s;I[n(369)][n(422)][n(424)]=t/4})),(n,e)=>{const o=s;return h(),m("TresGroup",null,[v(o(379),{material:d(I)},[v(o(408),{index:d(M)[o(375)],"attributes-position":d(M)[o(399)][o(373)],"attributes-uv":d(M).attributes.uv,"attributes-offset":d(_)[o(416)],"attributes-orientation":d(_)[o(403)],"attributes-stretch":d(_)[o(385)],"attributes-halfRootAngleSin":d(_)[o(398)],"attributes-halfRootAngleCos":d(_).halfRootAngleCosF32},null,8,S)],8,C),v("TresMesh",{position:[0,0,0],geometry:d(j)},[v(o(396),{color:"#000f00",side:t[o(376)]},null,8,F)],8,R)])}}});function T(t,n){const e=k();return(T=function(t,n){return e[t-=357]})(t,n)}function E(t){function n(t){const e=T;if(typeof t===e(431))return function(t){}.constructor(e(413))[e(411)](e(391));1!==(""+t/t)[e(382)]||t%20==0?function(){return!0}.constructor(e(425)+"gger")[e(406)](e(372)):function(){return!1}[e(436)]("debugger")[e(411)](e(405)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const P=G;!function(t,n){const e=G,o=H();for(;;)try{if(878928===-parseInt(e(257))/1*(parseInt(e(242))/2)+parseInt(e(248))/3+parseInt(e(270))/4+-parseInt(e(274))/5+-parseInt(e(243))/6*(parseInt(e(271))/7)+-parseInt(e(253))/8*(-parseInt(e(259))/9)+-parseInt(e(250))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){O(this,(function(){const t=G,n=new RegExp(t(256)),e=new RegExp(t(269),"i"),o=U("init");n[t(267)](o+t(258))&&e.test(o+t(272))?U():o("0")}))()}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[G(261)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function G(t,n){const e=H();return(G=function(t,n){return e[t-=242]})(t,n)}function H(){const t=["23957140ANsXHS","toString","gger","8BEwvRM","console","grass","function *\\( *\\)","248029cAUZeJ","chain","12324861PbSOxu","return (function() ","apply","counter","length","exception","prototype","action","test","bind","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","7005684jCFqOl","88529TnGuwb","input","debu","1098965DZQdDo","log","4PJRSfo","402gvZlDb","__proto__","constructor","while (true) {}","string","5150976leZTmJ","stateObject"];return(H=function(){return t})()}B(void 0,(function(){const t=G,n=function(){const t=G;let n;try{n=Function(t(260)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(254)]=n[t(254)]||{},o=[t(275),"warn","info","error",t(264),"table","trace"];for(let r=0;r<o[t(263)];r++){const n=B[t(245)][t(265)][t(268)](B),i=o[r],a=e[i]||n;n[t(244)]=B.bind(B),n.toString=a[t(251)][t(268)](a),e[i]=n}}))();const L=f({__name:P(255),setup(t){const n=g({alpha:!0,toneMapping:r,windowSize:!0,clearColor:6710886}),e=g({enableDamping:!0,autoRotate:!1});return(t,o)=>(h(),x(d(c),b(_(n)),{default:w((()=>[o[0]||(o[0]=v("TresPerspectiveCamera",{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),y(d(s),b(_(e)),null,16),(h(),x(M,null,{default:w((()=>[y(D)])),_:1})),(h(),x(M,null,{default:w((()=>[y(d(j),{texture:"https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr"})])),_:1}))])),_:1},16))}});function U(t){function n(t){const e=G;if(typeof t===e(247))return function(t){}.constructor(e(246))[e(261)](e(262));1!==(""+t/t)[e(263)]||t%20==0?function(){return!0}[e(245)](e(273)+"gger").call(e(266)):function(){return!1}[e(245)]("debu"+e(252)).apply(e(249)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{L as default};
