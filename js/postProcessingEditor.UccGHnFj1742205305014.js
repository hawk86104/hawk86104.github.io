import{m as t,e as n,a as e,o}from"./@tresjs.nk0nhZ9a1742205305014.js";import{_ as r,Y as s,ar as a,V as i,i as c,M as l,O as u,m as v,aV as f,cg as p}from"./three.LxxvsMJG1742205305014.js";import{P as d}from"./tweakpane.yDiyAAkA1742205305014.js";import{d as m,a3 as g,e as x,o as h,f as y,g as b,N as I,j as _,u as S,aj as w,ak as U,al as D,m as P}from"./@vue.NRI7TcgI1742205305014.js";import{_ as E}from"./@fesjs.mYnJ5o7u1742205305014.js";import"./postprocessing.lrLv6HE21742205305014.js";import"./@vueuse.w6JAmAgA1742205305014.js";import"./vue-router.AZQHMbAd1742205305014.js";import"./lodash-es.pklfUAS51742205305014.js";import"./@qlin.yHhFDldE1742205305014.js";import"./pinia.tbzukF_x1742205305014.js";import"./@floating-ui.BPbuo5Gx1742205305014.js";import"./@juggle.7yjBMqoW1742205305014.js";!function(t,n){const e=L,o=z();for(;;)try{if(198316===-parseInt(e(342))/1+parseInt(e(361))/2*(-parseInt(e(306))/3)+-parseInt(e(307))/4+parseInt(e(353))/5+parseInt(e(323))/6*(parseInt(e(309))/7)+parseInt(e(322))/8*(-parseInt(e(341))/9)+-parseInt(e(319))/10*(-parseInt(e(338))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const M=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(329)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){M(this,(function(){const t=L,n=new RegExp(t(340)),e=new RegExp(t(347),"i"),o=F(t(354));n[t(350)](o+t(366))&&e[t(350)](o+"input")?F():o("0")}))()}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function L(t,n){const e=z();return(L=function(t,n){return e[t-=305]})(t,n)}function z(){const t=["273358WKwdxi","now","counter","ShaderMaterial","toString","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","message","lastIndex","test","gger","bind","1254800udGSWr","init","table","get","object","Vector3","exec","return (function() ","14bnWnKY","\" couldn't be loaded.","Matrix2","exception","Vector4","chain","name","index","Vector2","51027CyrSoi","729212gUHFYf","console","507955zVnEOA","v3v","stateObject","onabort","isArray",'{}.constructor("return this")( )',"debu","constructor","type","replace","60XgmzSG","value","prototype","24SYpZqV","12usNXXp","Texture",'" load was aborted.',"action","open","while (true) {}","apply","log","WagnerLoadShaderException","call",'Shader "',"trace","onerror","send","random","1346323vbJOww","error","function *\\( *\\)","1072224NBexMG"];return(z=function(){return t})()}A(void 0,(function(){const t=L,n=function(){const t=L;let n;try{n=Function(t(360)+t(314)+");")()}catch(e){n=window}return n}(),e=n[t(308)]=n[t(308)]||{},o=[t(330),"warn","info",t(339),t(364),t(355),t(334)];for(let r=0;r<o.length;r++){const n=A[t(316)][t(321)][t(352)](A),s=o[r],a=e[s]||n;n.__proto__=A[t(352)](A),n[t(346)]=a[t(346)].bind(a),e[s]=n}}))();function C(t,n,e){const o=L;if(typeof t!==o(357)||null===t)return t;const r=Array[o(313)](t)?[]:{};for(const s in t)t.hasOwnProperty(s)&&(r[s]=C(t[s])),s==n&&(r[n]=e);return r}function F(t){function n(t){const e=L;if("string"==typeof t)return function(t){}.constructor(e(328)).apply(e(344));1!==(""+t/t).length||t%20==0?function(){return!0}.constructor("debu"+e(351))[e(332)](e(326)):function(){return!1}[e(316)](e(315)+e(351))[e(329)](e(311)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const N=T;!function(t,n){const e=T,o=j();for(;;)try{if(502389===-parseInt(e(565))/1*(parseInt(e(581))/2)+-parseInt(e(540))/3*(parseInt(e(588))/4)+-parseInt(e(532))/5+parseInt(e(498))/6*(parseInt(e(545))/7)+-parseInt(e(522))/8+parseInt(e(567))/9+parseInt(e(499))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function T(t,n){const e=j();return(T=function(t,n){return e[t-=497]})(t,n)}!function(){G(this,(function(){const t=T,n=new RegExp(t(503)),e=new RegExp(t(563),"i"),o=k("init");n[t(546)](o+t(561))&&e[t(546)](o+t(501))?k():o("0")}))()}();const R=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[T(523)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();R(void 0,(function(){const t=T,n=function(){const t=T;let n;try{n=Function(t(576)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(516)]=n[t(516)]||{},o=["log","warn",t(525),"error",t(553),t(497),t(587)];for(let r=0;r<o[t(586)];r++){const n=R[t(539)].prototype[t(578)](R),s=o[r],a=e[s]||n;n[t(583)]=R.bind(R),n[t(505)]=a.toString.bind(a),e[s]=n}}))();class B{constructor(t,n){const e=T;this.width=1,this[e(513)]=1,this[e(585)]=n||{},this[e(558)]=this[e(585)][e(558)]||!1,this[e(515)]=t,this[e(590)]=this[e(537)](this[e(585)]),this[e(566)]=new(r[e(593)]),this[e(541)]=new(r[e(506)])(new(r[e(574)])(1,1),new(r[e(518)])),this[e(566)][e(552)](this[e(541)]),this[e(509)]=new u(1,1,1,1,-1e4,1e4),this[e(524)]=new(r[e(547)])(1,1,{minFilter:void 0!==this[e(585)].minFilter?this[e(585)][e(571)]:v,magFilter:void 0!==this[e(585)][e(551)]?this[e(585)][e(551)]:v,wrapS:void 0!==this.settings[e(507)]?this[e(585)][e(507)]:f,wrapT:void 0!==this[e(585)][e(560)]?this[e(585)][e(560)]:f,format:this[e(558)]?r[e(502)]:r[e(536)],type:void 0!==this.settings[e(568)]?this[e(585)][e(568)]:r[e(520)],stencilBuffer:void 0===this[e(585)][e(580)]||this[e(585)][e(580)]}),this[e(531)]=this[e(524)].clone(),this[e(550)]=Date[e(591)](),this[e(577)]={},this[e(517)]={passItems:[],passes:[]}}[N(572)](t,n,e,o){const r=N;this[r(579)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(557)]};this[r(517)][r(584)][r(512)](s)}removePass(t){const n=N;for(let e=this[n(517)][n(584)][n(586)]-1;e>=0;e--)this[n(517)][n(584)][e].uuid===parseInt(t)&&this[n(517)][n(584)][n(510)](e,1);console[n(533)](this[n(517)].passItems)}[N(537)](){const t=N;this.Pass[t(569)](this);return this[t(579)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[N(579)](t){return this.shader=function(t,n){const e=L,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,u=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,v={sampler2D:{type:"t",value:()=>new s},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[L(305)])},vec3:{type:"v3",value:()=>new(r[L(358)])},vec4:{type:"v4",value:()=>new a},bvec2:{type:"v2",value:()=>new i},bvec3:{type:"v3",value:()=>new(r[L(358)])},bvec4:{type:"v4",value:()=>new(r[L(365)])},ivec2:{type:"v2",value:()=>new i},ivec3:{type:"v3",value:()=>new(r[L(358)])},ivec4:{type:"v4",value:()=>new(r[L(365)])},mat2:{type:"v2",value:()=>new(r[L(363)])},mat3:{type:"v3",value:()=>new c},mat4:{type:"v4",value:()=>new l}},f={float:{type:"fv",value:()=>[]},vec3:{type:e(310),value:()=>[]}};let p;const d={resolution:{type:"v2",value:new(r[e(305)])(1,1),default:!0},time:{type:"f",value:Date[e(343)](),default:!0},tInput:{type:"t",value:new(r[e(324)]),default:!0}};let m,g;for(;null!==(p=o[e(359)](n));)p[e(368)]===o[e(349)]&&o[e(349)]++,m=p[1],g=p[2],d[g]={type:v[m][e(317)],value:v[m].value()};for(;null!==(p=u[e(359)](n));)p.index===o[e(349)]&&o[e(349)]++,m=p[1],g=p[2],p[3],d[g]={type:f[m].type,value:f[m][e(320)]()};return new(r[e(345)])({uniforms:d,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}("varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }",t),this.shader}[N(575)](t){const n=N;this[n(557)]=null,this[n(508)]={}}Reset(){const t=N;this.read=this[t(524)],this[t(534)]=this.back}[N(538)](t,n){const e=N,o=window[e(530)],r=window.innerHeight;t.setSize(1*o,1*r),n[e(555)].makePerspective(70,o/r,n[e(549)],n[e(529)]),this[e(554)](o,r);return this.getOfflineTexture(o,r,!0)}setSize(t,n){const e=N;this[e(589)]=t,this[e(513)]=n,this[e(509)][e(555)].makeOrthographic(t/-2,t/2,n/2,n/-2,this.camera[e(549)],this.camera[e(529)]),this[e(541)][e(526)][e(511)](t,n,1),this[e(524)].setSize(t,n),this[e(531)][e(554)](t,n)}getOfflineTexture(t,n,e){const o=N;return new(r[o(547)])(t,n,{minFilter:v,magFilter:r[o(559)],format:e?r[o(502)]:r[o(536)]})}[N(535)](t,n,e,o){const r=N;this[r(515)].setRenderTarget(this[r(534)]),this[r(515)][r(535)](t,n),o||this[r(528)]()}[N(528)](){const t=N,n=this[t(534)];this.write=this.read,this[t(542)]=n}[N(519)](){const t=N;for(let n=0;n<this[t(517)][t(584)][t(586)];n++){const e=this.Stack[t(584)][n][t(557)],o=this.Stack[t(584)][n][t(508)];if(this[t(515)][t(573)](this[t(534)]),e instanceof r[t(514)]){this[t(541)][t(527)]=e,this[t(541)][t(527)].uniforms[t(521)][t(544)]=this[t(542)][t(500)],this[t(541)][t(527)][t(504)][t(592)][t(544)][t(511)](this[t(589)],this[t(513)]),this[t(541)][t(527)][t(504)][t(582)][t(544)]=.001*(Date.now()-this[t(550)]);for(const n in o)this[t(541)][t(527)][t(504)][n][t(544)]=o[n];this[t(515)].render(this.scene,this[t(509)]),this[t(528)]()}}}[N(548)](t,n){const e=N;this[e(515)][e(573)](null),this[e(541)][e(527)]=this[e(590)],this.quad.material[e(504)][e(521)][e(544)]=this[e(542)][e(500)],this.quad[e(527)][e(504)][e(592)].value[e(511)](this.width,this[e(513)]),this.renderer[e(535)](this[e(566)],this.camera)}}function j(){const t=["scale","material","swapBuffers","far","innerWidth","back","132840EvxyNr","log","write","render","RGBFormat","CopyPass","onWindowResize","constructor","15cZcCei","quad","read","action","value","49882aRcSxJ","test","WebGLRenderTarget","toScreen","near","startTime","magFilter","add","exception","setSize","projectionMatrix","debu","shader","useRGBA","LinearFilter","wrapT","chain","counter","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","stateObject","1241UXZimJ","scene","4605930zotwND","type","call","while (true) {}","minFilter","addPass","setRenderTarget","PlaneGeometry","Pass","return (function() ","passes","bind","loadShadervf","stencilBuffer","570qwwNkh","time","__proto__","passItems","settings","length","trace","505340pTEYkq","width","copyPass","now","resolution","Scene","table","690bMukro","6190710pocnCe","texture","input","RGBAFormat","function *\\( *\\)","uniforms","toString","Mesh","wrapS","params","camera","splice","set","push","height","ShaderMaterial","renderer","console","Stack","MeshBasicMaterial","pass","UnsignedByteType","tInput","3488112dwsyLB","apply","front","info"];return(j=function(){return t})()}function k(t){function n(t){const e=T;if("string"==typeof t)return function(t){}[e(539)](e(570)).apply(e(562));1!==(""+t/t).length||t%20==0?function(){return!0}[e(539)](e(556)+"gger")[e(569)](e(543)):function(){return!1}[e(539)](e(556)+"gger")[e(523)](e(564)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const V="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",O=X;!function(t,n){const e=X,o=q();for(;;)try{if(882501===-parseInt(e(231))/1+parseInt(e(240))/2*(-parseInt(e(227))/3)+-parseInt(e(197))/4*(-parseInt(e(206))/5)+-parseInt(e(247))/6+-parseInt(e(249))/7*(-parseInt(e(191))/8)+parseInt(e(226))/9*(-parseInt(e(209))/10)+parseInt(e(272))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){H(this,(function(){const t=X,n=new RegExp(t(213)),e=new RegExp(t(246),"i"),o=Z(t(216));n[t(195)](o+t(228))&&e[t(195)](o+t(253))?Z():o("0")}))()}();const W=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[X(214)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function X(t,n){const e=q();return(X=function(t,n){return e[t-=187]})(t,n)}function q(){const t=["call","title","removePass","DOTPass","plugins/postProcessing/image/1324.jpg","205GMsnrc","receiveShadow","SOBELPass","320WktNss","toString","random","value","function *\\( *\\)","apply","table","init","addPass","__proto__","info","toScreen","SNOISEPass","render","Mesh","bind","values","50130DyKbGk","2443803QAiBEh","chain","TOONPass","mergeGeometries","1209188SrjKID","stateObject",'{}.constructor("return this")( )',"map","castShadow","action","DENOISEPass","新增通道","constructor","2KQbUQZ","后处理类型","log","list","translate","MeshPhongMaterial","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","4247112koFLTN","length","28777Mogrdc","pass","InvertPass","push","input","split","gger","CIRCULARPass","trace","while (true) {}","debu","plugins/postProcessing/image/1324-normal.jpg","console","RGBPass","BoxGeometry","CGAPass","关闭通道","keys","target","POISSONPass","material","Vector2","warn","27207928XDjppz","BufferGeometry","click","postProcessing","exception","addButton","prototype","onWindowResize","BOXBLURPass","600MoGCRP","add","VIGNETTE2Pass","counter","test","error","98596suAuPX","FXAAPass","return (function() ","VIGNETTE1Pass"];return(q=function(){return t})()}W(void 0,(function(){const t=X;let n;try{n=Function(t(199)+t(233)+");")()}catch(r){n=window}const e=n[t(261)]=n[t(261)]||{},o=[t(242),t(271),t(219),t(196),t(276),t(215),t(257)];for(let s=0;s<o.length;s++){const n=W[t(239)][t(188)][t(224)](W),r=o[s],a=e[r]||n;n[t(218)]=W[t(224)](W),n[t(210)]=a.toString[t(224)](a),e[r]=n}}))();function Z(t){function n(t){const e=X;if("string"==typeof t)return function(t){}[e(239)](e(258)).apply(e(194));1!==(""+t/t)[e(248)]||t%20==0?function(){return!0}[e(239)](e(259)+e(255))[e(201)](e(236)):function(){return!1}[e(239)](e(259)+e(255)).apply(e(232)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const $=E(m({__name:O(275),async setup(o){const s=O;let a,i;const{camera:c,renderer:l,scene:u,sizes:v}=t();for(var f=new(r[s(273)]),m=[],x=0;x<100;x++){var h=new(r[s(263)])(100,100,100);h[s(244)](1500*Math[s(211)](),1500*Math[s(211)](),1500*Math[s(211)]()),m[s(252)](h)}f=p[s(230)](m);const y=([a,i]=g((()=>e({map:s(205)}))),a=await a,i(),a),b=([a,i]=g((()=>e({map:s(260)}))),a=await a,i(),a);var I=new(r[s(245)])({map:y[s(234)],normalMap:b[s(234)],normalScale:new(r[s(270)])(.8,-.8),shininess:100}),_=new(r[s(223)])(f,I);_[s(235)]=!0,_[s(207)]=!0,u[s(212)][s(192)](_);const S=new B(l[s(212)],{useRGBA:!0}),w=new d;let U=null,D=[{text:s(251),value:{InvertPass:V}},{text:s(198),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:"SEPIAPass",value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:s(221),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:s(190),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:s(237),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:s(264),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:b.map}}},{text:s(208),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:s(262),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:s(204),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(256),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:s(268),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:s(200),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(193),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:"FREICHENPass",value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:s(229),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],P=s(251),E=V,M=null;w.addBlade({view:s(243),label:s(241),options:D,value:""}).on("change",(t=>{U=t[s(212)]}));const A=w[s(187)]({title:"新增",label:s(238)});let L=0;A.on(s(274),(t=>{const n=s;P=Object[n(266)](U)[0],E=Object[n(225)](U)[0],M=Object[n(225)](U)[1];let e=L++,o=w.addFolder({title:P});for(const s in M){let t=M[s];o.addBlade({view:"text",label:s,parse:t=>String(t),value:t})}o[n(187)]({title:"移除~"+e,label:n(265)}).on(n(274),(t=>{const e=n;let o=t[e(267)][e(202)][e(254)]("~")[1];S[e(203)](o)})).on("click",(()=>{o.dispose()}));let r=C(M,t[n(267)].label,t[n(212)]);S[n(217)](P,E,r,e)})),S[s(189)](l[s(212)],c[s(212)]);const{onLoop:z}=n();return z((({delta:t})=>{const n=s;_&&(l[n(212)].autoClearColor=!0,S.Reset(),_[n(269)]=I,S[n(222)](u[n(212)],c[n(212)]),S[n(250)](),S[n(220)](u[n(212)],c[n(212)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),Y=J;!function(t,n){const e=J,o=nt();for(;;)try{if(303863===parseInt(e(391))/1+parseInt(e(377))/2*(parseInt(e(404))/3)+parseInt(e(386))/4+parseInt(e(397))/5+parseInt(e(395))/6+parseInt(e(379))/7*(parseInt(e(418))/8)+parseInt(e(417))/9*(-parseInt(e(416))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const K=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){K(this,(function(){const t=J,n=new RegExp(t(414)),e=new RegExp(t(383),"i"),o=ot("init");n.test(o+t(407))&&e[t(409)](o+t(388))?ot():o("0")}))()}();const Q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[J(393)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function J(t,n){const e=nt();return(J=function(t,n){return e[t-=375]})(t,n)}Q(void 0,(function(){const t=J;let n;try{n=Function(t(375)+t(400)+");")()}catch(r){n=window}const e=n[t(389)]=n[t(389)]||{},o=[t(415),t(413),t(392),"error",t(411),t(401),t(399)];for(let s=0;s<o[t(390)];s++){const n=Q.constructor[t(384)][t(408)](Q),r=o[s],a=e[r]||n;n[t(412)]=Q[t(408)](Q),n.toString=a[t(410)].bind(a),e[r]=n}}))();const tt={ref:"perspectiveCameraRef",position:[600,850,-1500],fov:45,near:.1,far:1e5};function nt(){const t=["console","length","473038bQAGHa","info","apply","#000000","678936OmDMgW","constructor","1525300WQvmkD","while (true) {}","trace",'{}.constructor("return this")( )',"table","gger","TresCanvas","3JeqSHF","call","TresDirectionalLight","chain","bind","test","toString","exception","__proto__","warn","function *\\( *\\)","log","21110MaFmpf","7065nzCBMR","1552GnYbcU","return (function() ","counter","401018Zapkns","#ffffff","16107Syaplo","manual","TresAmbientLight","postProcessingEditor","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","prototype","debu","1691364iGqYxp","TresPerspectiveCamera","input"];return(nt=function(){return t})()}const et=m({__name:Y(382),setup(t){const e=Y,r={clearColor:e(394),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(380)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=x(a(403));return h(),y(i,P(r,{"window-size":""}),{default:b((()=>[I(a(387),tt,null,512),_(S(o),w(U(s)),null,16),n[0]||(n[0]=I(a(381),{color:"#ffffff",intensity:2},null,-1)),n[1]||(n[1]=I(a(406),{position:[100,100,0],intensity:2,color:a(378)},null,-1)),(h(),y(D,null,{default:b((()=>[_($)])),_:1}))])),_:1},16)}}});function ot(t){function n(t){const e=J;if("string"==typeof t)return function(t){}.constructor(e(398))[e(393)](e(376));1!==(""+t/t)[e(390)]||t%20==0?function(){return!0}[e(396)](e(385)+e(402))[e(405)]("action"):function(){return!1}.constructor("debugger").apply("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{et as default};
