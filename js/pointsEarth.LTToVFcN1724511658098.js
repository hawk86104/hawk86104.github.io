import{a6 as e}from"./three.6cxCQsIj1724511658098.js";import{$ as n,d as t,N as a}from"./@tresjs.6SjGVF2a1724511658098.js";import{P as o}from"./tweakpane.yHWGBmom1724511658098.js";import{d as r,a4 as i,X as l,e as s,o as u,f as c,g as f,j as p,u as v,J as m,m as d,aj as h,ak as g}from"./@vue.Q1VpS3901724511658098.js";import"./@vueuse.rsVLbIR91724511658098.js";function x(e,n){const t=P();return(x=function(e,n){return t[e-=341]})(e,n)}const y=x;!function(e,n){const t=x,a=P();for(;;)try{if(511397===parseInt(t(369))/1+parseInt(t(365))/2+parseInt(t(375))/3*(-parseInt(t(344))/4)+parseInt(t(348))/5*(-parseInt(t(373))/6)+-parseInt(t(362))/7+-parseInt(t(394))/8*(-parseInt(t(399))/9)+parseInt(t(381))/10)break;a.push(a.shift())}catch(o){a.push(a.shift())}}();const S=function(){let e=!0;return function(n,t){const a=e?function(){if(t){const e=t[x(383)](n,arguments);return t=null,e}}:function(){};return e=!1,a}}();!function(){S(this,(function(){const e=x,n=new RegExp("function *\\( *\\)"),t=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),a=E(e(353));n[e(387)](a+e(371))&&t[e(387)](a+"input")?E():a("0")}))()}();const T=function(){let e=!0;return function(n,t){const a=e?function(){if(t){const e=t[x(383)](n,arguments);return t=null,e}}:function(){};return e=!1,a}}();T(void 0,(function(){const e=x,n=function(){const e=x;let n;try{n=Function(e(352)+e(346)+");")()}catch(t){n=window}return n}(),t=n[e(347)]=n.console||{},a=[e(398),e(377),e(379),e(343),e(396),e(388),e(400)];for(let o=0;o<a[e(378)];o++){const n=T.constructor[e(370)][e(341)](T),r=a[o],i=t[r]||n;n[e(382)]=T[e(341)](T),n.toString=i[e(357)][e(341)](i),t[r]=n}}))();const w=m("TresPerspectiveCamera",{position:[0,0,3.5],fov:45,near:.1,far:20},null,-1),b=m(y(372),{args:[1,4]},null,-1),_=m(y(372),{args:[1,128]},null,-1),z=m(y(364),{args:[y(368),y(395),3]},null,-1),j=r({__name:y(390),async setup(r){const x=y;let S,T;const j={color:x(363),pointSize:4},E={clearColor:"#122148",shadows:!1,alpha:!1,outputColorSpace:e[x(356)]},P={color:j[x(392)],wireframe:!0,transparent:!0,opacity:.2},D=([S,T]=i((()=>a(["./plugins/earthSample/image/pointsEarth/00_earthmap1k.jpg","./plugins/earthSample/image/pointsEarth/circle.png","./plugins/earthSample/image/pointsEarth/04_rainbow1k.jpg","./plugins/earthSample/image/pointsEarth/01_earthbump1k.jpg","./plugins/earthSample/image/pointsEarth/02_earthspec1k.jpg"]))),S=await S,T(),S),I=D[0],k=D[1],A=D[2],C=D[3],H=D[4],R={uniforms:{size:{type:"f",value:j.pointSize},uTime:{type:"f",value:0},uWaveHeight:{type:"f",value:.075},uWaveSpeed:{type:"f",value:.2},colorTexture:{type:"t",value:A},elevTexture:{type:"t",value:C},alphaTexture:{type:"t",value:H},earthTexture:{type:"t",value:I},starTexture:{type:"t",value:k}},vertexShader:"  uniform float size;\n  uniform sampler2D elevTexture;\n  uniform sampler2D alphaTexture;\n  uniform float uTime;\n  uniform float uWaveHeight;\n  uniform float uWaveSpeed;\n\n  varying vec2 vUv;\n  varying float vVisible;\n  varying float vAlpha;\n  varying float vElevation;\n  // Function to generate fBm with vec3 input\n  float random(vec3 st) {\n    return fract(sin(dot(st.xyz, vec3(12.9898,78.233,45.164))) * 43758.5453123);\n}\n\nfloat noise(vec3 st) {\n    vec3 i = floor(st);\n    vec3 f = fract(st);\n\n    // Eight corners in 3D of a tile\n    float a = random(i);\n    float b = random(i + vec3(1.0, 0.0, 0.0));\n    float c = random(i + vec3(0.0, 1.0, 0.0));\n    float d = random(i + vec3(1.0, 1.0, 0.0));\n    float e = random(i + vec3(0.0, 0.0, 1.0));\n    float f1 = random(i + vec3(1.0, 0.0, 1.0));\n    float g = random(i + vec3(0.0, 1.0, 1.0));\n    float h = random(i + vec3(1.0, 1.0, 1.0));\n\n    vec3 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(mix(mix(a, b, u.x), mix(c, d, u.x), u.y),\n               mix(mix(e, f1, u.x), mix(g, h, u.x), u.y), u.z);\n}\n\nfloat fbm(vec3 st) {\n    float value = 0.0;\n    float amplitude = 0.5;\n\n    for (int i = 0; i < 5; i++) {\n        value += amplitude * noise(st);\n        st *= 2.0;\n        amplitude *= 0.5;\n    }\n    return value;\n}\n\n  void main() {\n    vUv = uv;\n    float alphaLand = 1.0 - texture2D(alphaTexture, vUv).r;\n    vAlpha = alphaLand;\n    vec3 newPosition = position;\n\n    if(alphaLand < 0.5) {\n      // Sea\n      // fBm for wave-like displacement\n      float waveHeight = uWaveHeight; // Adjust wave height as needed\n      float waveSpeed = uWaveSpeed;  // Adjust wave speed as needed\n      float displacement = (fbm(newPosition * 5.0 + uTime * waveSpeed) * 2.0 - 1.0) * waveHeight;\n      vElevation = displacement;\n      newPosition += normal * displacement ;\n    }\n\n    vec4 mvPosition = modelViewMatrix * vec4( newPosition, 1.0 );\n    float elv = texture2D(elevTexture, vUv).r;\n    vec3 vNormal = normalMatrix * normal;\n    vVisible = step(0.0, dot( -normalize(mvPosition.xyz), normalize(vNormal)));\n    mvPosition.z += 0.45 * elv;\n\n    // 求出 mvPosition 距离相机的距离\n    float dist = length(mvPosition.xyz);\n    // 根据距离调整 size\n    float pointSize = size * (1.0 - dist / 10.0);\n    gl_PointSize = max(pointSize, 1.0);\n    gl_PointSize = pointSize;\n    gl_Position = projectionMatrix * mvPosition;\n  }\n",fragmentShader:"  uniform sampler2D colorTexture;\n  // uniform sampler2D alphaTexture;\n  uniform sampler2D earthTexture;\n  uniform sampler2D starTexture;\n\n  varying vec2 vUv;\n  varying float vVisible;\n  varying float vAlpha;\n  varying float vElevation;\n\n  void main() {\n    if (floor(vVisible + 0.1) == 0.0) discard;\n    vec2 coord = gl_PointCoord;\n    float alpha = texture2D(starTexture, coord).a;\n    // 根据 alpha 值来裁剪形状\n    if (alpha < 0.1) discard;\n\n    // float alphaLand = 1.0 - texture2D(alphaTexture, vUv).r;\n    vec3 color = texture2D(colorTexture, vUv).rgb;\n    vec3 earth = texture2D(earthTexture, vUv).rgb;\n    color = mix(color, earth, 0.65);\n    if(\n      vAlpha > 0.5\n    ) {\n      gl_FragColor = vec4(color, vAlpha);\n    }else {\n      // 对于海洋部分，根据 vElevation 调整颜色\n      float elevationEffect = clamp(vElevation*30.0, -1.0, 1.0); // 将 vElevation 限制在 [-1, 1] 范围内\n      vec3 deep_sea_blue = vec3(0.004, 0.227, 0.388);\n      vec3 adjustedColor = mix(deep_sea_blue, earth*1.75, (elevationEffect + 1.0) * 0.5); // 根据 vElevation 调整颜色\n      gl_FragColor = vec4(adjustedColor, 1.0-vAlpha);\n    }\n  }\n",transparent:!0,side:e[x(389)]},W=l(),F=l(),M=(new o)[x(380)]({title:x(391)});M[x(349)](j,x(392),{type:x(392)}).on(x(359),(({value:e})=>{const n=x;F[n(384)][n(392)][n(393)](e)})),M[x(349)](R[x(402)][x(350)],x(384),{min:.1,max:10,step:.1,label:x(345)}),M[x(349)](R[x(402)][x(358)],x(384),{min:.01,max:.5,step:.01,label:x(367)}),M[x(349)](R.uniforms.uWaveSpeed,x(384),{min:.01,max:1,step:.01,label:x(351)});const{onLoop:U}=n();return U((({delta:e})=>{const n=x;W[n(384)]&&(W[n(384)][n(342)].y+=.002,R.uniforms[n(354)].value+=10*e)})),(e,n)=>{const a=x,o=s("TresCanvas");return u(),c(o,d(E,{"window-size":""}),{default:f((()=>[w,p(v(t),{autoRotate:!0,autoRotateSpeed:2}),m(a(355),{ref_key:a(386),ref:W},[m(a(360),null,[b,m("TresMeshBasicMaterial",d({ref_key:a(385),ref:F},P),null,16)]),m("TresPoints",null,[_,m(a(361),h(g(R)),null,16)])],512),z])),_:1},16)}}});function E(e){function n(e){const t=x;if("string"==typeof e)return function(e){}.constructor("while (true) {}").apply("counter");1!==(""+e/e)[t(378)]||e%20==0?function(){return!0}[t(401)]("debu"+t(366)).call(t(374)):function(){return!1}[t(401)](t(376)+t(366))[t(383)](t(397)),n(++e)}try{if(e)return n;n(0)}catch(t){}}function P(){const e=["change","TresMesh","TresShaderMaterial","5781909mdSiDp","#17c5a9","TresHemisphereLight","278414KQHIsA","gger","海浪高度","#ffffff","790541mZXHfj","prototype","chain","TresIcosahedronGeometry","2454FRCKam","action","249lYzQGm","debu","warn","length","info","addFolder","16616870BuQoIS","__proto__","apply","value","wireframeMaterialRef","groupRef","test","table","FrontSide","pointsEarth","Debug","color","set","3640hNykWR","#080820","exception","stateObject","log","5031HrinHx","trace","constructor","uniforms","bind","rotation","error","38732twGBci","粒子大小",'{}.constructor("return this")( )',"console","8615zextdF","addBinding","size","海浪变化速度","return (function() ","init","uTime","TresGroup","SRGBColorSpace","toString","uWaveHeight"];return(P=function(){return e})()}export{j as default};
