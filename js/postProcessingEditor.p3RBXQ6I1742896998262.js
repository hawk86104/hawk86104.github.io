import{m as t,e as n,a as e,o}from"./@tresjs.KzbsBNvc1742896998262.js";import{V as r,_ as s,b as a,s as i,i as c,M as l,m as u,A as v,aZ as f,u as p,r as m,n as g,cG as d}from"./three.0CcRceKb1742896998262.js";import{P as x}from"./tweakpane.ivGeiIdz1742896998262.js";import{d as h,a3 as y,e as I,o as b,f as _,g as S,N as U,j as w,u as P,aj as D,ak as E,al as A,m as L}from"./@vue.L-brCdZe1742896998262.js";import{_ as z}from"./@fesjs.ATKJ6WD31742896998262.js";import"./postprocessing.JNDZZkh81742896998262.js";import"./@vueuse.AtktgvWs1742896998262.js";import"./vue-router.Nr9hetwf1742896998262.js";import"./lodash-es.pklfUAS51742896998262.js";import"./@qlin.o0hjOMCg1742896998262.js";import"./pinia.c7Udjcar1742896998262.js";import"./@floating-ui.HzHndBae1742896998262.js";import"./@juggle.4EyLec-41742896998262.js";!function(t,n){const e=T,o=F();for(;;)try{if(215022===-parseInt(e(282))/1+parseInt(e(251))/2+-parseInt(e(271))/3+parseInt(e(287))/4*(-parseInt(e(289))/5)+parseInt(e(286))/6+-parseInt(e(281))/7*(parseInt(e(284))/8)+-parseInt(e(263))/9*(-parseInt(e(250))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const M=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){M(this,(function(){const t=T,n=new RegExp(t(275)),e=new RegExp(t(299),"i"),o=G(t(291));n[t(295)](o+t(308))&&e[t(295)](o+"input")?G():o("0")}))()}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[T(252)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function F(){const t=["log","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","name","stateObject","table","string","return (function() ","open","onload","lastIndex","chain","prototype","console","772050ElGFCX","87062wgjRte","apply","constructor","Vector3","Vector4","ShaderMaterial","send","index","WagnerLoadShaderException","object","info","Vector2","99LNsJBX","call","replace","type","length",'" load was aborted.','{}.constructor("return this")( )',"trace","1092588HzZoJl","error","message","bind","function *\\( *\\)","value","get","Texture","gger","onerror","98gSsvUa","290455jsnPyT","__proto__","26768YzCjkR","hasOwnProperty","1348530blSzrC","44672vKQDHY","responseText","90RTugyn","warn","init","exec","isArray","exception","test","while (true) {}","counter"];return(F=function(){return t})()}C(void 0,(function(){const t=T,n=function(){const t=T;let n;try{n=Function(t(304)+t(269)+");")()}catch(e){n=window}return n}(),e=n[t(249)]=n[t(249)]||{},o=[t(298),t(290),t(261),t(272),t(294),t(302),t(270)];for(let r=0;r<o[t(267)];r++){const n=C[t(253)][t(309)][t(274)](C),s=o[r],a=e[s]||n;n[t(283)]=C[t(274)](C),n.toString=a.toString[t(274)](a),e[s]=n}}))();function N(t,n,e){const o=T;if(typeof t!==o(260)||null===t)return t;const r=Array[o(293)](t)?[]:{};for(const s in t)t[o(285)](s)&&(r[s]=N(t[s])),s==n&&(r[n]=e);return r}function T(t,n){const e=F();return T=function(t,n){return e[t-=249]},T(t,n)}function G(t){function n(t){const e=T;if(typeof t===e(303))return function(t){}[e(253)](e(296))[e(252)](e(297));1!==(""+t/t)[e(267)]||t%20==0?function(){return!0}[e(253)]("debu"+e(279))[e(264)]("action"):function(){return!1}[e(253)]("debu"+e(279))[e(252)](e(301)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const R=j;function j(t,n){const e=O();return j=function(t,n){return e[t-=391]},j(t,n)}!function(t,n){const e=j,o=O();for(;;)try{if(337748===parseInt(e(473))/1+-parseInt(e(422))/2*(parseInt(e(478))/3)+parseInt(e(476))/4*(-parseInt(e(460))/5)+parseInt(e(440))/6*(-parseInt(e(416))/7)+parseInt(e(407))/8*(-parseInt(e(431))/9)+-parseInt(e(454))/10+parseInt(e(400))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[j(406)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){B(this,(function(){const t=j,n=new RegExp(t(403)),e=new RegExp(t(409),"i"),o=k(t(415));n[t(412)](o+t(490))&&e[t(412)](o+"input")?k():o("0")}))()}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[j(406)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function O(){const t=["apply","9888ixwEZP","makeOrthographic","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","call","Mesh","test","stencilBuffer","minFilter","init","427PhePKI","warn","debu","addPass","add","type","194268LjFoUT","wrapS","uuid","RGBFormat","copyPass","setRenderTarget","wrapT","loadShadervf","constructor","2376AAKXqN","Scene","far","getOfflineTexture","camera","innerWidth","LinearFilter","width","WebGLRenderTarget","38646LhfUqf","toScreen","Stack","resolution","exception","setSize","projectionMatrix","Pass","passItems","material","startTime","useRGBA","console","push","6591640zzGhAj","return (function() ","scale","ClampToEdgeWrapping","makePerspective","back","25mGFMhF","bind","toString","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","read","texture","height","trace","Reset","log","params","quad","swapBuffers","555912GDDfYz","settings","render","390552UBzxLD","OrthographicCamera","6WVptvU","value","shader","write","table","uniforms","tInput","near","front","gger","RGBAFormat","splice","chain","scene","CopyPass","while (true) {}","innerHeight","set","onWindowResize","removePass","__proto__","renderer","20269293ktEDlx","length","passes","function *\\( *\\)","UnsignedByteType","now"];return(O=function(){return t})()}H(void 0,(function(){const t=j,n=function(){const t=j;let n;try{n=Function(t(455)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(452)]=n[t(452)]||{},o=[t(469),t(417),"info","error",t(444),t(482),t(467)];for(let r=0;r<o[t(401)];r++){const n=H[t(430)].prototype[t(461)](H),s=o[r],a=e[s]||n;n[t(398)]=H[t(461)](H),n[t(462)]=a[t(462)].bind(a),e[s]=n}}))();class V{constructor(t,n){const e=j;this.width=1,this[e(466)]=1,this[e(474)]=n||{},this[e(451)]=this.settings[e(451)]||!1,this[e(399)]=t,this[e(426)]=this[e(392)](this.settings),this.scene=new(s[e(432)]),this[e(471)]=new(s[e(411)])(new u(1,1),new v),this.scene[e(420)](this.quad),this[e(435)]=new(s[e(477)])(1,1,1,1,-1e4,1e4),this[e(486)]=new(s[e(439)])(1,1,{minFilter:void 0!==this[e(474)][e(414)]?this[e(474)].minFilter:s[e(437)],magFilter:void 0!==this[e(474)].magFilter?this[e(474)].magFilter:s[e(437)],wrapS:void 0!==this[e(474)].wrapS?this[e(474)][e(423)]:f,wrapT:void 0!==this[e(474)].wrapT?this.settings[e(428)]:s[e(457)],format:this.useRGBA?s[e(488)]:s[e(425)],type:void 0!==this[e(474)][e(421)]?this[e(474)][e(421)]:s[e(404)],stencilBuffer:void 0===this[e(474)][e(413)]||this.settings[e(413)]}),this[e(459)]=this[e(486)].clone(),this[e(450)]=Date.now(),this[e(402)]={},this.Stack={passItems:[],passes:[]}}[R(419)](t,n,e,o){const r=R;this[r(429)](n);const s={shaderName:t,params:e,uuid:o,shader:this.shader};this.Stack[r(448)][r(453)](s)}[R(397)](t){const n=R;for(let e=this[n(442)][n(448)][n(401)]-1;e>=0;e--)this[n(442)][n(448)][e][n(424)]===parseInt(t)&&this[n(442)][n(448)][n(489)](e,1);console[n(469)](this[n(442)].passItems)}CopyPass(){const t=R;this[t(447)][t(410)](this);return this[t(429)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[R(429)](t){const n=R,e=n(463);return this[n(480)]=function(t,n){const e=T,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,u=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,v={sampler2D:{type:"t",value:()=>new(s[T(278)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(s[T(262)])},vec3:{type:"v3",value:()=>new a},vec4:{type:"v4",value:()=>new(s[T(255)])},bvec2:{type:"v2",value:()=>new(s[T(262)])},bvec3:{type:"v3",value:()=>new a},bvec4:{type:"v4",value:()=>new(s[T(255)])},ivec2:{type:"v2",value:()=>new(s[T(262)])},ivec3:{type:"v3",value:()=>new(s[T(254)])},ivec4:{type:"v4",value:()=>new(s[T(255)])},mat2:{type:"v2",value:()=>new i},mat3:{type:"v3",value:()=>new c},mat4:{type:"v4",value:()=>new l}},f={float:{type:"fv",value:()=>[]},vec3:{type:"v3v",value:()=>[]}};let p;const m={resolution:{type:"v2",value:new r(1,1),default:!0},time:{type:"f",value:Date.now(),default:!0},tInput:{type:"t",value:new(s[e(278)]),default:!0}};let g,d;for(;null!==(p=o[e(292)](n));)p[e(258)]===o[e(307)]&&o[e(307)]++,g=p[1],d=p[2],m[d]={type:v[g][e(266)],value:v[g][e(276)]()};for(;null!==(p=u[e(292)](n));)p.index===o[e(307)]&&o[e(307)]++,g=p[1],d=p[2],p[3],m[d]={type:f[g][e(266)],value:f[g][e(276)]()};return new(s[e(256)])({uniforms:m,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this.shader}[R(447)](t){const n=R;this[n(480)]=null,this[n(470)]={}}[R(468)](){const t=R;this[t(464)]=this[t(486)],this.write=this[t(459)]}[R(396)](t,n){const e=R,o=window[e(436)],r=window[e(394)];t[e(445)](1*o,1*r),n[e(446)][e(458)](70,o/r,n[e(485)],n[e(433)]),this.setSize(o,r);return this.getOfflineTexture(o,r,!0)}[R(445)](t,n){const e=R;this[e(438)]=t,this[e(466)]=n,this.camera[e(446)][e(408)](t/-2,t/2,n/2,n/-2,this[e(435)][e(485)],this.camera[e(433)]),this[e(471)][e(456)][e(395)](t,n,1),this.front.setSize(t,n),this[e(459)].setSize(t,n)}[R(434)](t,n,e){const o=R;return new p(t,n,{minFilter:m,magFilter:s[o(437)],format:e?s[o(488)]:s[o(425)]})}[R(475)](t,n,e,o){const r=R;this.renderer[r(427)](this[r(481)]),this[r(399)].render(t,n),o||this[r(472)]()}[R(472)](){const t=R,n=this[t(481)];this[t(481)]=this.read,this[t(464)]=n}pass(){const t=R;for(let n=0;n<this[t(442)].passItems.length;n++){const e=this.Stack.passItems[n][t(480)],o=this[t(442)].passItems[n][t(470)];if(this.renderer[t(427)](this[t(481)]),e instanceof g){this[t(471)][t(449)]=e,this[t(471)][t(449)].uniforms[t(484)][t(479)]=this[t(464)][t(465)],this.quad[t(449)][t(483)][t(443)][t(479)].set(this[t(438)],this[t(466)]),this[t(471)][t(449)][t(483)].time.value=.001*(Date[t(405)]()-this[t(450)]);for(const n in o)this[t(471)][t(449)][t(483)][n].value=o[n];this[t(399)][t(475)](this[t(391)],this[t(435)]),this.swapBuffers()}}}[R(441)](t,n){const e=R;this[e(399)][e(427)](null),this[e(471)][e(449)]=this.copyPass,this[e(471)][e(449)][e(483)][e(484)][e(479)]=this[e(464)][e(465)],this[e(471)][e(449)][e(483)].resolution[e(479)].set(this[e(438)],this[e(466)]),this[e(399)][e(475)](this[e(391)],this[e(435)])}}function k(t){function n(t){const e=j;if("string"==typeof t)return function(t){}[e(430)](e(393)).apply("counter");1!==(""+t/t)[e(401)]||t%20==0?function(){return!0}.constructor(e(418)+"gger").call("action"):function(){return!1}[e(430)](e(418)+e(487))[e(406)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const W="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}";function X(){const t=["toString","2965092GxCAgp","keys","stateObject","2181EpgPnP","125081YLfgZP","call","autoClearColor","834WIsibn","constructor","11605favCZy","MeshPhongMaterial","text","InvertPass","chain","translate","addPass","RGBPass","6SOFhbw","trace","list","console","table","dispose","Mesh","title","新增通道","CGAPass","castShadow","push","log","Vector2","value","addBlade","receiveShadow","string","target","SOBELPass","test","debu","gger","bind","plugins/postProcessing/image/1324-normal.jpg","18pPuOxs","material","CIRCULARPass","random","592FNRhwz","exception","POISSONPass","122596ZAjTMJ","FXAAPass","addButton","map","BufferGeometry","VIGNETTE2Pass","DOTPass","后处理类型","17164PqxHMz","warn","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","VIGNETTE1Pass","BOXBLURPass","add","click","split","label","776yIvhVN","SEPIAPass","FREICHENPass","input","1340350knJvHu","BoxGeometry","render","change","values","length","SNOISEPass","error","while (true) {}"];return(X=function(){return t})()}!function(t,n){const e=$,o=X();for(;;)try{if(207767===-parseInt(e(516))/1*(-parseInt(e(468))/2)+parseInt(e(502))/3*(-parseInt(e(465))/4)+parseInt(e(508))/5*(-parseInt(e(506))/6)+parseInt(e(476))/7*(parseInt(e(485))/8)+-parseInt(e(541))/9*(-parseInt(e(489))/10)+parseInt(e(503))/11+-parseInt(e(499))/12)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){q(this,(function(){const t=$,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(478),"i"),o=J("init");n[t(536)](o+t(512))&&e[t(536)](o+t(488))?J():o("0")}))()}();const Z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function $(t,n){const e=X();return $=function(t,n){return e[t-=465]},$(t,n)}Z(void 0,(function(){const t=$,n=function(){let t;try{t=Function('return (function() {}.constructor("return this")( ));')()}catch(n){t=window}return t}(),e=n[t(519)]=n[t(519)]||{},o=[t(528),t(477),"info",t(496),t(466),t(520),t(517)];for(let r=0;r<o[t(494)];r++){const n=Z[t(507)].prototype.bind(Z),s=o[r],a=e[s]||n;n.__proto__=Z[t(539)](Z),n[t(498)]=a[t(498)][t(539)](a),e[s]=n}}))();function J(t){function n(t){const e=$;if(typeof t===e(533))return function(t){}[e(507)](e(497)).apply("counter");1!==(""+t/t)[e(494)]||t%20==0?function(){return!0}[e(507)](e(537)+"gger")[e(504)]("action"):function(){return!1}.constructor(e(537)+e(538)).apply(e(501)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const K=z(h({__name:"postProcessing",async setup(o){const r=$;let a,i;const{camera:c,renderer:l,scene:u,sizes:v}=t();for(var f=new(s[r(472)]),p=[],m=0;m<100;m++){var g=new(s[r(490)])(100,100,100);g[r(513)](1500*Math.random(),1500*Math[r(544)](),1500*Math.random()),p[r(527)](g)}f=d(p);const h=([a,i]=y((()=>e({map:"plugins/postProcessing/image/1324.jpg"}))),a=await a,i(),a),I=([a,i]=y((()=>e({map:r(540)}))),a=await a,i(),a);var b=new(s[r(509)])({map:h[r(471)],normalMap:I[r(471)],normalScale:new(s[r(529)])(.8,-.8),shininess:100}),_=new(s[r(522)])(f,b);_[r(526)]=!0,_[r(532)]=!0,u[r(530)][r(481)](_);const S=new V(l[r(530)],{useRGBA:!0}),U=new x;let w=null,P=[{text:r(511),value:{InvertPass:W}},{text:r(469),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:r(486),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:r(495),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:r(480),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:"DENOISEPass",value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:r(525),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:I[r(471)]}}},{text:r(535),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:r(515),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:r(474),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:r(543),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:r(467),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:r(479),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:r(473),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:r(487),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:"TOONPass",value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],D=r(511),E=W,A=null;U[r(531)]({view:r(518),label:r(475),options:P,value:""}).on(r(492),(t=>{w=t[r(530)]}));const L=U[r(470)]({title:"新增",label:r(524)});let z=0;L.on("click",(t=>{const n=r;D=Object[n(500)](w)[0],E=Object[n(493)](w)[0],A=Object[n(493)](w)[1];let e=z++,o=U.addFolder({title:D});for(const r in A){let t=A[r];o.addBlade({view:n(510),label:r,parse:t=>String(t),value:t})}o[n(470)]({title:"移除~"+e,label:"关闭通道"}).on(n(482),(t=>{const e=n;let o=t[e(534)][e(523)][e(483)]("~")[1];S.removePass(o)})).on(n(482),(()=>{o[n(521)]()}));let s=N(A,t[n(534)][n(484)],t[n(530)]);S[n(514)](D,E,s,e)})),S.onWindowResize(l[r(530)],c[r(530)]);const{onLoop:M}=n();return M((({delta:t})=>{const n=r;_&&(l.value[n(505)]=!0,S.Reset(),_[n(542)]=b,S[n(491)](u[n(530)],c.value),S.pass(),S.toScreen(u.value,c[n(530)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]);function Y(t,n){const e=rt();return Y=function(t,n){return e[t-=264]},Y(t,n)}const Q=Y;!function(t,n){const e=Y,o=rt();for(;;)try{if(968202===-parseInt(e(280))/1*(-parseInt(e(272))/2)+parseInt(e(291))/3+parseInt(e(285))/4+parseInt(e(302))/5*(-parseInt(e(290))/6)+-parseInt(e(303))/7+parseInt(e(284))/8*(parseInt(e(289))/9)+-parseInt(e(292))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const tt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){tt(this,(function(){const t=Y,n=new RegExp(t(264)),e=new RegExp(t(297),"i"),o=st(t(278));n.test(o+t(306))&&e.test(o+t(300))?st():o("0")}))()}();const nt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Y(276)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();nt(void 0,(function(){const t=Y;let n;try{n=Function(t(301)+t(277)+");")()}catch(r){n=window}const e=n[t(271)]=n[t(271)]||{},o=[t(282),"warn",t(268),"error",t(274),t(287),t(304)];for(let s=0;s<o[t(298)];s++){const n=nt[t(296)][t(294)][t(286)](nt),r=o[s],a=e[r]||n;n[t(270)]=nt[t(286)](nt),n[t(275)]=a.toString[t(286)](a),e[r]=n}}))();const et={ref:"perspectiveCameraRef",position:[600,850,-1500],fov:45,near:.1,far:1e5},ot=h({__name:Q(295),setup(t){const e=Q,r={clearColor:e(265),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:"manual"},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=I(a(273));return b(),_(i,L(r,{"window-size":""}),{default:S((()=>[U(a(266),et,null,512),w(P(o),D(E(s)),null,16),n[0]||(n[0]=U("TresAmbientLight",{color:a(281),intensity:2},null,-1)),n[1]||(n[1]=U(a(288),{position:[100,100,0],intensity:2,color:a(281)},null,-1)),(b(),_(A,null,{default:S((()=>[w(K)])),_:1}))])),_:1},16)}}});function rt(){const t=["TresDirectionalLight","2286nhLeLn","1815528xjpXfU","4152519hcUnCG","16356920GRaYlO","while (true) {}","prototype","postProcessingEditor","constructor","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","length","counter","input","return (function() ","15KJqHFN","5338704wnSAsa","trace","call","chain","function *\\( *\\)","#000000","TresPerspectiveCamera","string","info","debu","__proto__","console","1083128zqEggP","TresCanvas","exception","toString","apply",'{}.constructor("return this")( )',"init","gger","1bAKoHA","#ffffff","log","action","22336ldusxS","6557700eWREHE","bind","table"];return(rt=function(){return t})()}function st(t){function n(t){const e=Y;if(typeof t===e(267))return function(t){}[e(296)](e(293)).apply(e(299));1!==(""+t/t).length||t%20==0?function(){return!0}.constructor(e(269)+e(279))[e(305)](e(283)):function(){return!1}[e(296)](e(269)+e(279))[e(276)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{ot as default};
