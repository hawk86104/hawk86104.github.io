import{p as t,$ as n,N as e,d as o}from"./@tresjs.6SjGVF2a1724511658098.js";import{a6 as r,V as a,al as s,y as i,aA as c,bW as l}from"./three.6cxCQsIj1724511658098.js";import{P as u}from"./tweakpane.yHWGBmom1724511658098.js";import{d as v,a4 as f,e as p,o as d,f as m,g,J as x,j as h,u as y,aj as b,ak as I,al as _,m as S}from"./@vue.Q1VpS3901724511658098.js";import{_ as w}from"./@fesjs.OLRUJJVs1724511658098.js";import"./@vueuse.rsVLbIR91724511658098.js";import"./vue-router.LcUeGvdC1724511658098.js";import"./lodash-es.nFpJXAf-1724511658098.js";import"./@qlin.yHhFDldE1724511658098.js";import"./pinia.NmL3PGxA1724511658098.js";import"./@floating-ui.BPbuo5Gx1724511658098.js";import"./@juggle.7yjBMqoW1724511658098.js";!function(t,n){const e=D,o=P();for(;;)try{if(992934===-parseInt(e(317))/1+-parseInt(e(356))/2+parseInt(e(323))/3+-parseInt(e(306))/4*(parseInt(e(354))/5)+-parseInt(e(351))/6*(parseInt(e(343))/7)+-parseInt(e(361))/8*(parseInt(e(327))/9)+parseInt(e(335))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const U=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[D(345)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){U(this,(function(){const t=D,n=new RegExp(t(344)),e=new RegExp(t(333),"i"),o=M("init");n.test(o+t(332))&&e[t(304)](o+t(328))?M():o("0")}))()}();const E=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[D(345)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function P(){const t=["get","error","12ONPnKx","info","type","1090xygQtZ","Vector4","2361752EukwnG","log","onerror","while (true) {}","counter","32aiKDrC","Vector3","length","send","value",'" load was aborted.','{}.constructor("return this")( )',"test","\" couldn't be loaded.","30172hrRETu","message","v3v","lastIndex","constructor","isArray","console","random","hasOwnProperty","replace","responseText","340724fYtqlX","WagnerLoadShaderException","object","Matrix3","toString","Matrix4","1980096EOUqJw","ShaderMaterial","Texture","stateObject","3012354EzHBRJ","input","exec","action","return (function() ","chain","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","warn","58315960TLxYNK","index","exception","onabort","bind","gger",'Shader "',"name","3478636hcGAuq","function *\\( *\\)","apply","prototype","onload","Vector2"];return(P=function(){return t})()}function D(t,n){const e=P();return(D=function(t,n){return e[t-=299]})(t,n)}E(void 0,(function(){const t=D,n=function(){const t=D;let n;try{n=Function(t(331)+t(303)+");")()}catch(e){n=window}return n}(),e=n[t(312)]=n[t(312)]||{},o=[t(357),t(334),t(352),t(350),t(337),"table","trace"];for(let r=0;r<o[t(299)];r++){const n=E[t(310)][t(346)][t(339)](E),a=o[r],s=e[a]||n;n.__proto__=E[t(339)](E),n[t(321)]=s[t(321)].bind(s),e[a]=n}}))();function A(t,n,e){const o=D;if(typeof t!==o(319)||null===t)return t;const r=Array[o(311)](t)?[]:{};for(const a in t)t[o(314)](a)&&(r[a]=A(t[a])),a==n&&(r[n]=e);return r}function M(t){function n(t){const e=D;if("string"==typeof t)return function(t){}[e(310)](e(359)).apply(e(360));1!==(""+t/t)[e(299)]||t%20==0?function(){return!0}.constructor("debu"+e(340)).call(e(330)):function(){return!1}[e(310)]("debugger")[e(345)](e(326)),n(++t)}try{if(t)return n;n(0)}catch(e){}}function L(){const t=["LinearFilter","info","texture",'{}.constructor("return this")( )',"useRGBA","apply","params","string","quad","WebGLRenderTarget","removePass","width","tInput","far","material","PlaneGeometry","height","uniforms","camera","stateObject","error","Scene","minFilter","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","RGBFormat","value","call","Mesh","ClampToEdgeWrapping","now","trace","setRenderTarget","startTime","gger","table","2086460xdcwzO","scene","exception","4816200SsqwOM","render","ShaderMaterial","projectionMatrix","scale","console","while (true) {}","loadShadervf","add","__proto__","stencilBuffer","copyPass","log","setSize","wrapT","innerWidth","debu","read","renderer","addPass","settings","OrthographicCamera","input","type","back","MeshBasicMaterial","wrapS","getOfflineTexture","90660mYsJdV","toString","swapBuffers","1951384vwLGEZ","Pass","passItems","chain","function *\\( *\\)","clone","Reset","1062dErGxG","61297utwDHS","length","pass","makePerspective","bind","RGBAFormat","uuid","912084zuaSXD","set","shader","near","test","makeOrthographic","write","prototype","action","344166vCYWRF","constructor","Stack","front","magFilter","resolution","init","2VCJrBT","28rmUuPy","return (function() "];return(L=function(){return t})()}const C=z;function z(t,n){const e=L();return(z=function(t,n){return e[t-=459]})(t,n)}!function(t,n){const e=z,o=L();for(;;)try{if(633876===parseInt(e(510))/1*(parseInt(e(533))/2)+parseInt(e(517))/3+-parseInt(e(471))/4+parseInt(e(468))/5+parseInt(e(526))/6*(parseInt(e(534))/7)+-parseInt(e(502))/8+parseInt(e(509))/9*(parseInt(e(499))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const F=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){F(this,(function(){const t=z,n=new RegExp(t(506)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=G(t(532));n[t(521)](o+t(505))&&e[t(521)](o+t(493))?G():o("0")}))()}();const N=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[z(541)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();N(void 0,(function(){const t=z;let n;try{n=Function(t(535)+t(539)+");")()}catch(r){n=window}const e=n[t(476)]=n[t(476)]||{},o=[t(483),"warn",t(537),t(556),t(470),t(467),t(463)];for(let a=0;a<o[t(511)];a++){const n=N[t(527)][t(524)][t(514)](N),r=o[a],s=e[r]||n;n[t(480)]=N.bind(N),n[t(500)]=s.toString.bind(s),e[r]=n}}))();class T{constructor(t,n){const e=z;this[e(547)]=1,this.height=1,this.settings=n||{},this[e(540)]=this[e(491)].useRGBA||!1,this[e(489)]=t,this[e(482)]=this.CopyPass(this[e(491)]),this[e(469)]=new(r[e(557)]),this.quad=new(r[e(460)])(new(r[e(551)])(1,1),new(r[e(496)])),this[e(469)][e(479)](this[e(544)]),this[e(554)]=new(r[e(492)])(1,1,1,1,-1e4,1e4),this[e(529)]=new(r[e(545)])(1,1,{minFilter:void 0!==this[e(491)][e(558)]?this[e(491)][e(558)]:r[e(536)],magFilter:void 0!==this.settings[e(530)]?this[e(491)].magFilter:r[e(536)],wrapS:void 0!==this[e(491)][e(497)]?this[e(491)][e(497)]:r[e(461)],wrapT:void 0!==this[e(491)][e(485)]?this.settings[e(485)]:r[e(461)],format:this[e(540)]?r[e(515)]:r[e(560)],type:void 0!==this[e(491)][e(494)]?this[e(491)][e(494)]:i,stencilBuffer:void 0===this[e(491)][e(481)]||this[e(491)][e(481)]}),this[e(495)]=this[e(529)][e(507)](),this.startTime=Date[e(462)](),this.passes={},this[e(528)]={passItems:[],passes:[]}}[C(490)](t,n,e,o){const r=C;this[r(478)](n);const a={shaderName:t,params:e,uuid:o,shader:this[r(519)]};this[r(528)][r(504)].push(a)}[C(546)](t){const n=C;for(let e=this.Stack.passItems[n(511)]-1;e>=0;e--)this.Stack[n(504)][e][n(516)]===parseInt(t)&&this[n(528)][n(504)].splice(e,1);console.log(this.Stack[n(504)])}CopyPass(){const t=C;this[t(503)].call(this);return this[t(478)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[C(478)](t){const n=C,e=n(559);return this[n(519)]=function(t,n){const e=D,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,i=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,c={sampler2D:{type:"t",value:()=>new(r[D(325)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[D(348)])},vec3:{type:"v3",value:()=>new(r[D(362)])},vec4:{type:"v4",value:()=>new(r[D(355)])},bvec2:{type:"v2",value:()=>new(r[D(348)])},bvec3:{type:"v3",value:()=>new a},bvec4:{type:"v4",value:()=>new(r[D(355)])},ivec2:{type:"v2",value:()=>new(r[D(348)])},ivec3:{type:"v3",value:()=>new(r[D(362)])},ivec4:{type:"v4",value:()=>new s},mat2:{type:"v2",value:()=>new(void 0)},mat3:{type:"v3",value:()=>new(r[D(320)])},mat4:{type:"v4",value:()=>new(r[D(322)])}},l={float:{type:"fv",value:()=>[]},vec3:{type:e(308),value:()=>[]}};let u;const v={resolution:{type:"v2",value:new(r[e(348)])(1,1),default:!0},time:{type:"f",value:Date.now(),default:!0},tInput:{type:"t",value:new(r[e(325)]),default:!0}};let f,p;for(;null!==(u=o[e(329)](n));)u.index===o[e(309)]&&o[e(309)]++,f=u[1],p=u[2],v[p]={type:c[f].type,value:c[f][e(301)]()};for(;null!==(u=i[e(329)](n));)u[e(336)]===o[e(309)]&&o[e(309)]++,f=u[1],p=u[2],u[3],v[p]={type:l[f][e(353)],value:l[f][e(301)]()};return new(r[e(324)])({uniforms:v,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(519)]}Pass(t){const n=C;this.shader=null,this[n(542)]={}}[C(508)](){const t=C;this[t(488)]=this[t(529)],this[t(523)]=this[t(495)]}onWindowResize(t,n){const e=C,o=window[e(486)],r=window.innerHeight;t.setSize(1*o,1*r),n[e(474)][e(513)](70,o/r,n[e(520)],n.far),this[e(484)](o,r);return this[e(498)](o,r,!0)}[C(484)](t,n){const e=C;this[e(547)]=t,this[e(552)]=n,this[e(554)][e(474)][e(522)](t/-2,t/2,n/2,n/-2,this[e(554)][e(520)],this.camera[e(549)]),this[e(544)][e(475)][e(518)](t,n,1),this[e(529)][e(484)](t,n),this[e(495)][e(484)](t,n)}[C(498)](t,n,e){const o=C;return new(r[o(545)])(t,n,{minFilter:r[o(536)],magFilter:r[o(536)],format:e?r[o(515)]:r[o(560)]})}render(t,n,e,o){const r=C;this[r(489)][r(464)](this[r(523)]),this[r(489)][r(472)](t,n),o||this.swapBuffers()}swapBuffers(){const t=C,n=this[t(523)];this[t(523)]=this[t(488)],this[t(488)]=n}[C(512)](){const t=C;for(let n=0;n<this[t(528)][t(504)].length;n++){const e=this[t(528)][t(504)][n][t(519)],o=this.Stack[t(504)][n][t(542)];if(this[t(489)][t(464)](this[t(523)]),e instanceof r[t(473)]){this.quad.material=e,this[t(544)][t(550)][t(553)][t(548)][t(561)]=this[t(488)][t(538)],this.quad[t(550)].uniforms[t(531)][t(561)][t(518)](this.width,this[t(552)]),this[t(544)].material[t(553)].time[t(561)]=.001*(Date.now()-this[t(465)]);for(const n in o)this.quad.material[t(553)][n].value=o[n];this[t(489)][t(472)](this.scene,this[t(554)]),this[t(501)]()}}}toScreen(t,n){const e=C;this[e(489)][e(464)](null),this.quad.material=this[e(482)],this[e(544)][e(550)][e(553)][e(548)][e(561)]=this[e(488)].texture,this[e(544)][e(550)][e(553)][e(531)][e(561)].set(this.width,this.height),this.renderer[e(472)](this.scene,this[e(554)])}}function G(t){function n(t){const e=z;if(typeof t===e(543))return function(t){}[e(527)](e(477))[e(541)]("counter");1!==(""+t/t)[e(511)]||t%20==0?function(){return!0}[e(527)](e(487)+e(466))[e(459)](e(525)):function(){return!1}[e(527)](e(487)+e(466)).apply(e(555)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const R="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",B=H;!function(t,n){const e=H,o=j();for(;;)try{if(113644===-parseInt(e(489))/1+parseInt(e(515))/2+parseInt(e(480))/3+parseInt(e(493))/4*(parseInt(e(553))/5)+parseInt(e(487))/6*(parseInt(e(481))/7)+-parseInt(e(517))/8*(-parseInt(e(529))/9)+-parseInt(e(490))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[H(548)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){O(this,(function(){const t=H,n=new RegExp(t(554)),e=new RegExp(t(494),"i"),o=k(t(500));n.test(o+t(534))&&e[t(542)](o+t(523))?k():o("0")}))()}();const V=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function j(){const t=["chain","console","autoClearColor","SEPIAPass","dispose","call","toString","prototype","test","push","FREICHENPass","material","gger","__proto__","apply","Mesh","BufferGeometry","stateObject","value","41665CVjzYc","function *\\( *\\)","InvertPass","SOBELPass","length","target","关闭通道","removePass","title","log","348372toSSKa","1381093vArXqi","VIGNETTE2Pass","toScreen","onWindowResize","constructor","plugins/postProcessing/image/1324-normal.jpg","6vLzbFT","mergeGeometries","203833wGrOwn","5063230Ilpubq","移除~","add","104OsunBq","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","addFolder","counter","castShadow","DOTPass","DENOISEPass","init","bind","while (true) {}","action","random","Reset","CIRCULARPass","exception","info","BOXBLURPass","return (function() ","CGAPass","plugins/postProcessing/image/1324.jpg","translate","map","368810bCGKwy","list","16JqYcYQ","postProcessing","values","MeshPhongMaterial","string","warn","input","split","receiveShadow","FXAAPass","debu","RGBPass","491913HeytLL","trace","Vector2","addButton","click"];return(j=function(){return t})()}function H(t,n){const e=j();return(H=function(t,n){return e[t-=475]})(t,n)}V(void 0,(function(){const t=H;let n;try{n=Function(t(510)+'{}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(535)]=n[t(535)]||{},o=[t(479),t(522),t(508),"error",t(507),"table",t(530)];for(let a=0;a<o[t(557)];a++){const n=V[t(485)][t(541)].bind(V),r=o[a],s=e[r]||n;n[t(547)]=V[t(501)](V),n[t(540)]=s[t(540)].bind(s),e[r]=n}}))();function k(t){function n(t){const e=H;if(typeof t===e(521))return function(t){}[e(485)](e(502)).apply(e(496));1!==(""+t/t)[e(557)]||t%20==0?function(){return!0}[e(485)](e(527)+"gger")[e(539)](e(503)):function(){return!1}[e(485)](e(527)+e(546))[e(548)](e(551)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const W=w(v({__name:B(518),async setup(o){const a=B;let s,i;const{camera:v,renderer:p,scene:d,sizes:m}=t();for(var g=new(r[a(550)]),x=[],h=0;h<100;h++){var y=new c(100,100,100);y[a(513)](1500*Math[a(504)](),1500*Math[a(504)](),1500*Math[a(504)]()),x[a(543)](y)}g=l[a(488)](x);const b=([s,i]=f((()=>e({map:a(512)}))),s=await s,i(),s),I=([s,i]=f((()=>e({map:a(486)}))),s=await s,i(),s);var _=new(r[a(520)])({map:b[a(514)],normalMap:I[a(514)],normalScale:new(r[a(531)])(.8,-.8),shininess:100}),S=new(r[a(549)])(g,_);S[a(497)]=!0,S[a(525)]=!0,d[a(552)][a(492)](S);const w=new T(p[a(552)],{useRGBA:!0}),U=new u;let E=null,P=[{text:a(555),value:{InvertPass:R}},{text:a(526),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:a(537),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:"SNOISEPass",value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:a(509),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:a(499),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:a(511),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:I.map}}},{text:a(556),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:a(528),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:a(498),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:a(506),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:"POISSONPass",value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:"VIGNETTE1Pass",value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:a(482),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:a(544),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:"TOONPass",value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],D=a(555),M=R,L=null;U.addBlade({view:a(516),label:"后处理类型",options:P,value:""}).on("change",(t=>{E=t[a(552)]}));const C=U[a(532)]({title:"新增",label:"新增通道"});let z=0;C.on(a(533),(t=>{const n=a;D=Object.keys(E)[0],M=Object[n(519)](E)[0],L=Object.values(E)[1];let e=z++,o=U[n(495)]({title:D});for(const a in L){let t=L[a];o.addBlade({view:"text",label:a,parse:t=>String(t),value:t})}o[n(532)]({title:n(491)+e,label:n(476)}).on(n(533),(t=>{const e=n;let o=t[e(475)][e(478)][e(524)]("~")[1];w[e(477)](o)})).on(n(533),(()=>{o[n(538)]()}));let r=A(L,t[n(475)].label,t[n(552)]);w.addPass(D,M,r,e)})),w[a(484)](p.value,v.value);const{onLoop:F}=n();return F((({delta:t})=>{const n=a;S&&(p[n(552)][n(536)]=!0,w[n(505)](),S[n(545)]=_,w.render(d[n(552)],v.value),w.pass(),w[n(483)](d[n(552)],v.value))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]);function q(t,n){const e=Q();return(q=function(t,n){return e[t-=228]})(t,n)}const X=q;!function(t,n){const e=q,o=Q();for(;;)try{if(583193===-parseInt(e(236))/1+parseInt(e(231))/2*(-parseInt(e(233))/3)+-parseInt(e(259))/4+parseInt(e(254))/5+-parseInt(e(234))/6+-parseInt(e(263))/7*(parseInt(e(244))/8)+parseInt(e(235))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(257)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){Z(this,(function(){const t=q,n=new RegExp(t(243)),e=new RegExp(t(248),"i"),o=nt("init");n[t(262)](o+t(260))&&e[t(262)](o+t(241))?nt():o("0")}))()}();const $=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();$(void 0,(function(){const t=q,n=function(){const t=q;let n;try{n=Function(t(251)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(255)]=n[t(255)]||{},o=[t(249),t(237),"info",t(261),t(256),t(242),"trace"];for(let r=0;r<o[t(250)];r++){const n=$[t(247)][t(245)].bind($),a=o[r],s=e[a]||n;n.__proto__=$[t(240)]($),n[t(228)]=s[t(228)].bind(s),e[a]=n}}))();const J={ref:"perspectiveCameraRef",position:[600,850,-1500],fov:45,near:.1,far:1e5},Y=x(X(229),{color:X(232),intensity:2},null,-1),K=x("TresDirectionalLight",{position:[100,100,0],intensity:2,color:X(232)},null,-1);function Q(){const t=["30183264SAyqpc","731685EOXUEe","warn","#000000","gger","bind","input","table","function *\\( *\\)","8UvJlEs","prototype","stateObject","constructor","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","log","length","return (function() ","TresCanvas","call","1907550uMuMUZ","console","exception","apply","counter","4353540XrBaFV","chain","error","test","2221653dlEbxs","toString","TresAmbientLight","debu","31276OOphSa","#ffffff","42DrrWmy","4773792viykDF"];return(Q=function(){return t})()}const tt=v({__name:"postProcessingEditor",setup(t){const e=X,r={clearColor:e(238),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:"manual"},a={autoRotate:!0,enableDamping:!0},{onLoop:s}=n();return s((({delta:t})=>{})),(t,n)=>{const s=p(e(252));return d(),m(s,S(r,{"window-size":""}),{default:g((()=>[x("TresPerspectiveCamera",J,null,512),h(y(o),b(I(a)),null,16),Y,K,(d(),m(_,null,{default:g((()=>[h(W)])),_:1}))])),_:1},16)}}});function nt(t){function n(t){const e=q;if("string"==typeof t)return function(t){}.constructor("while (true) {}")[e(257)](e(258));1!==(""+t/t)[e(250)]||t%20==0?function(){return!0}[e(247)](e(230)+e(239))[e(253)]("action"):function(){return!1}[e(247)](e(230)+e(239))[e(257)](e(246)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{tt as default};
