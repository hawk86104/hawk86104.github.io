import{m as e,e as n,b as r,a as o}from"./@tresjs.CForfKR51755506146924.js";import{u as s,be as a,r as i,a as t,cw as l,cj as u,ch as f,a3 as v}from"./three.QlBabAUP1755506146924.js";import{d as m,aa as d,a2 as c,G as p,o as h,I as g,u as x,F as D,h as w,e as y,f as S,j as C,a5 as P,m as R}from"./@vue.BzMISRrV1755506146924.js";import"./postprocessing.DgRA9vy91755506146924.js";import"./@vueuse.5rvnEVOS1755506146924.js";const T=["side","rotation-x"],E=["side"],N="\n    varying vec2 vUv;\n    void main() {\n        vec4 mvPosition = modelViewMatrix * vec4(position, 1.);\n        gl_Position = projectionMatrix * mvPosition;\n        vUv = uv;\n    }\n",M=m({__name:"noiseContour",async setup(o){let m,w;const{camera:y,renderer:S,scene:C,sizes:P}=e(),R=([m,w]=d((()=>r({map:"./plugins/shadertoyToThreejs/image/noise.png"}))),m=await m,w(),m),{onLoop:M,onAfterLoop:U}=n(),j=new s(1,1,{minFilter:i,magFilter:i,format:a,stencilBuffer:!1}),_=new t(window.innerWidth,window.innerHeight);let b=null;const k=new l({uniforms:{tDiffuse:{type:"t",value:null},tShadow:{type:"t",value:null},iResolution:{type:"v2",value:_}},vertexShader:N,fragmentShader:"\n    uniform sampler2D tDiffuse;\n    uniform sampler2D tShadow;\n    uniform vec2 iResolution;\n\n    varying vec2 vUv;\n    #define Sensitivity (vec2(0.3, 1.5) * iResolution.y / 400.0)\n    float checkSame(vec4 center, vec4 samplef)\n    {\n        vec2 centerNormal = center.xy;\n        float centerDepth = center.z;\n        vec2 sampleNormal = samplef.xy;\n        float sampleDepth = samplef.z;\n\n        vec2 diffNormal = abs(centerNormal - sampleNormal) * Sensitivity.x;\n        bool isSameNormal = (diffNormal.x + diffNormal.y) < 0.1;\n        float diffDepth = abs(centerDepth - sampleDepth) * Sensitivity.y;\n        bool isSameDepth = diffDepth < 0.1;\n\n        return (isSameNormal && isSameDepth) ? 1.0 : 0.0;\n    }\n\n    void main( )\n    {\n        vec4 sample0 = texture2D(tDiffuse, vUv);\n        vec4 sample1 = texture2D(tDiffuse, vUv + (vec2(1.0, 1.0) / iResolution.xy));\n        vec4 sample2 = texture2D(tDiffuse, vUv + (vec2(-1.0, -1.0) / iResolution.xy));\n        vec4 sample3 = texture2D(tDiffuse, vUv + (vec2(-1.0, 1.0) / iResolution.xy));\n        vec4 sample4 = texture2D(tDiffuse, vUv + (vec2(1.0, -1.0) / iResolution.xy));\n\n        float edge = checkSame(sample1, sample2) * checkSame(sample3, sample4);\n\n        // gl_FragColor = vec4(edge, sample0.w, 1.0, 1.0);\n        float shadow = texture2D(tShadow, vUv).x;\n        gl_FragColor = vec4(edge, shadow, 1.0, 1.0);\n\n    }\n"}),F=new l({uniforms:{tDiffuse:{type:"t",value:null},iTime:{type:"f",value:0},tNoise:{type:"t",value:R}},vertexShader:N,fragmentShader:"\nuniform sampler2D tDiffuse;\nuniform sampler2D tNoise;\nuniform float iTime;\n\nvarying vec2 vUv;\n\n#define EdgeColor vec4(0.2, 0.2, 0.15, 1.0)\n#define BackgroundColor vec4(1,0.95,0.85,1)\n#define NoiseAmount 0.01\n#define ErrorPeriod 30.0\n#define ErrorRange 0.003\n\n// Reference: https://www.shadertoy.com/view/MsSGD1\nfloat triangle(float x)\n{\n    return abs(1.0 - mod(abs(x), 2.0)) * 2.0 - 1.0;\n}\n\nfloat rand(float x)\n{\n    return fract(sin(x) * 43758.5453);\n}\n\nvoid main()\n{\n    float time = floor(iTime * 16.0) / 16.0;\n    vec2 uv = vUv;\n    uv += vec2(triangle(uv.y * rand(time) * 1.0) * rand(time * 1.9) * 0.005,\n            triangle(uv.x * rand(time * 3.4) * 1.0) * rand(time * 2.1) * 0.005);\n\n    float noise = (texture2D(tNoise, uv * 0.5).r - 0.5) * NoiseAmount;\n    vec2 uvs[3];\n    uvs[0] = uv + vec2(ErrorRange * sin(ErrorPeriod * uv.y + 0.0) + noise, ErrorRange * sin(ErrorPeriod * uv.x + 0.0) + noise);\n    uvs[1] = uv + vec2(ErrorRange * sin(ErrorPeriod * uv.y + 1.047) + noise, ErrorRange * sin(ErrorPeriod * uv.x + 3.142) + noise);\n    uvs[2] = uv + vec2(ErrorRange * sin(ErrorPeriod * uv.y + 2.094) + noise, ErrorRange * sin(ErrorPeriod * uv.x + 1.571) + noise);\n\n    float edge = texture2D(tDiffuse, uvs[0]).r * texture2D(tDiffuse, uvs[1]).r * texture2D(tDiffuse, uvs[2]).r;\n    float diffuse = texture2D(tDiffuse, uv).g;\n\n    float w = fwidth(diffuse) * 2.0;\n    vec4 mCol = mix(BackgroundColor * 0.5, BackgroundColor, mix(0.0, 1.0, smoothstep(-w, w, diffuse - 0.3)));\n    gl_FragColor = mix(EdgeColor, mCol, edge);\n}\n"});return F.renderToScreen=!0,F.material.extensions.derivatives=!0,c((()=>{P.width.value&&(b=new u(S.value),b.addPass(new f(C.value,y.value)),b.addPass(k),b.addPass(F))})),M((({elapsed:e})=>{S.value.render(C.value,y.value,j),k.uniforms.tShadow.value=j.texture,F.uniforms.iTime.value=e})),U((()=>{b&&b.render()})),(e,n)=>(h(),p(D,null,[g("TresMesh",{ref:"noiseContourMeshRef2",side:x(v),position:[400,100,0],"rotation-x":2*Math.PI/360*90,"cast-shadow":""},n[0]||(n[0]=[g("TresBoxGeometry",{args:[400,400,400]},null,-1),g("TresMeshPhongMaterial",{color:"#ffffff",shininess:0},null,-1)]),8,T),g("TresMesh",{ref:"noiseContourMeshRef1",side:x(v),position:[0,150,0],"cast-shadow":""},n[1]||(n[1]=[g("TresSphereGeometry",{args:[50,32,32]},null,-1),g("TresMeshPhongMaterial",{color:"#ffffff",shininess:0},null,-1)]),8,E)],64))}}),U={ref:"perspectiveCameraRef",position:[600,750,-1221],fov:45,near:1,far:1e4},j=m({__name:"noiseContourPage",setup(e){const n={clearColor:"#000000",shadows:!0,alpha:!1,useLegacyLights:!0};return(e,r)=>{const s=w("TresCanvas");return h(),y(s,R(n,{"window-size":""}),{default:S((()=>[g("TresPerspectiveCamera",U,null,512),C(x(o)),r[0]||(r[0]=g("TresAmbientLight",{color:"#ffffff"},null,-1)),r[1]||(r[1]=g("TresDirectionalLight",{position:[400,400,400],intensity:1,color:"red"},null,-1)),(h(),y(P,null,{default:S((()=>[C(M)])),_:1}))])),_:1},16)}}});export{j as default};
