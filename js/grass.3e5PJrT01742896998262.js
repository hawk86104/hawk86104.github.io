import{_ as t,b as n,C as e,a7 as o,ap as r}from"./three.0CcRceKb1742896998262.js";import{e as a,a as i,o as s}from"./@tresjs.KzbsBNvc1742896998262.js";import"./index.4F0ydYuW1742896998262.js";import{c}from"./simplex-noise.jB2HxhHB1742896998262.js";import{C as l}from"./index.ndVDlath1742896998262.js";import{d as u,a3 as f,o as p,H as h,N as m,u as v,r as d,e as g,f as x,g as w,j as y,aj as b,ak as _,al as M}from"./@vue.L-brCdZe1742896998262.js";import{_ as j}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.Qb-c22Cw1742896998262.js";import"./postprocessing.JNDZZkh81742896998262.js";import"./@vueuse.AtktgvWs1742896998262.js";import"./lamina.EAlry9K61742896998262.js";import"./glsl-tokenizer.yT9HH1eV1742896998262.js";import"./@amap.tIvpdqPe1742896998262.js";import"./glsl-token-descope.SJMqrP-R1742896998262.js";import"./glsl-token-depth.dgOye0Dq1742896998262.js";import"./glsl-token-scope.7VzuXy0Q1742896998262.js";import"./glsl-token-properties.HvvLzcdZ1742896998262.js";import"./glsl-token-assignments.u1EP4ghm1742896998262.js";import"./glsl-token-string.hGQg24BQ1742896998262.js";import"./glsl-token-functions.gjzk9xqI1742896998262.js";import"./object-hash.9aQcBM141742896998262.js";import"./jszip.jzMwTE8j1742896998262.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.GdwJf1dZ1742896998262.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.JNkZ7Lhb1742896998262.js";import"./three-stdlib.89waAD8o1742896998262.js";import"./@pmndrs.o17bi-dk1742896998262.js";import"./utils.u2SyvGwT1742896998262.js";const z=C;function A(){const t=["instances","attributes-orientation","21066DeuEvB","stretchesF32","map","TresGroup","counter","joints","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","263347idrfrb","260500lSYcHA","constructor","console","attributes-halfRootAngleSin","grass","set","test","array","exception","bind","gger","Vector3","debu","halfRootAngleCosF32","uniforms","PlaneGeometry","function *\\( *\\)","attributes-offset","return (function() ","438290JfDoxG","call","attributes-position","chain","toneMapped","prototype","needsUpdate","time","cos","TresMesh","error","random","92570ZakAbq","stateObject","14113fRCSwv","action","sin","input","1752fVEILu","index","attributes","52146maYHUE","12DylnbX","alphaMap","apply","Color","convertSRGBToLinear","trace","toString","info","Vector4","halfRootAngleSinF32","material","side","push","warn","position","normalize","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","lookAt","attributes-uv","39HCDMco","width","InstancedBufferAttribute","length","translate","offsetsF32","DoubleSide","8sbhPPq","230vBRqya"];return(A=function(){return t})()}!function(t,n){const e=C,o=A();for(;;)try{if(102619===-parseInt(e(341))/1+-parseInt(e(381))/2*(parseInt(e(370))/3)+parseInt(e(310))/4+-parseInt(e(329))/5*(-parseInt(e(351))/6)+-parseInt(e(309))/7*(-parseInt(e(377))/8)+parseInt(e(350))/9*(-parseInt(e(378))/10)+-parseInt(e(343))/11*(-parseInt(e(347))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const I=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(353)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function C(t,n){const e=A();return C=function(t,n){return e[t-=305]},C(t,n)}!function(){I(this,(function(){const t=C,n=new RegExp(t(326)),e=new RegExp(t(367),"i"),o=T("init");n[t(316)](o+t(332))&&e[t(316)](o+t(346))?T():o("0")}))()}();const S=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();S(void 0,(function(){const t=C,n=function(){const t=C;let n;try{n=Function(t(328)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(312)]=n[t(312)]||{},o=["log",t(364),t(358),t(339),t(318),"table",t(356)];for(let r=0;r<o[t(373)];r++){const n=S[t(311)][t(334)][t(319)](S),a=o[r],i=e[a]||n;n.__proto__=S.bind(S),n[t(357)]=i.toString.bind(i),e[a]=n}}))();const D=[z(361)],k=[z(348),z(331),z(369),z(327),z(380),"attributes-stretch",z(313),"attributes-halfRootAngleCos"],R=["geometry"],F=[z(362)],E=u({__name:z(314),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(r){const s=z;let u,d;const g=([u,d]=f((()=>i({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),u=await u,d(),u),x=r,w=c(Math[s(340)]);function y(n,e){const o=s,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,a=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,i=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,c=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(359)])(r,a,i,c)}function b(t,n){var e=2*w(t/50,n/50);return e+=4*w(t/100,n/100),e+=.2*w(t/10,n/10)}const _=function(n,e){const r=s,a=[],i=[],c=[],l=[],u=[];let f=new(t[r(359)]),p=new(t[r(359)]);const h=-.25;for(let o=0;o<n;o++){const s=Math.random()*e-e/2,m=Math[r(340)]()*e-e/2,v=b(s,m);a[r(363)](s,v,m);let d=Math.PI-Math[r(340)]()*(2*Math.PI);l[r(363)](Math.sin(.5*d)),u[r(363)](Math[r(337)](.5*d));let g=new(t[r(321)])(0,1,0),x=g.x*Math.sin(d/2),w=g.y*Math.sin(d/2),_=g.z*Math[r(345)](d/2),M=Math[r(337)](d/2);f[r(315)](x,w,_,M)[r(366)](),d=.5*Math[r(340)]()+h,g=new(t[r(321)])(1,0,0),x=g.x*Math.sin(d/2),w=g.y*Math.sin(d/2),_=g.z*Math[r(345)](d/2),M=Math[r(337)](d/2),p[r(315)](x,w,_,M)[r(366)](),f=y(f,p),d=.5*Math[r(340)]()+h,g=new(t[r(321)])(0,0,1),x=g.x*Math.sin(d/2),w=g.y*Math.sin(d/2),_=g.z*Math.sin(d/2),M=Math[r(337)](d/2),p[r(315)](x,w,_,M)[r(366)](),f=y(f,p),i.push(f.x,f.y,f.z,f.w),o<n/3?c[r(363)](1.8*Math.random()):c[r(363)](Math[r(340)]())}return{offsetsF32:new(t[r(372)])(new Float32Array(a),3),orientationsF32:new(t[r(372)])(new Float32Array(i),4),stretchesF32:new o(new Float32Array(c),1),halfRootAngleCosF32:new(t[r(372)])(new Float32Array(u),1),halfRootAngleSinF32:new(t[r(372)])(new Float32Array(l),1)}}(x[s(379)],x[s(371)]),M=new(t[s(325)])(x.bW,x.bH,1,x[s(307)])[s(374)](0,x.bH/2,0),j=new(t[s(325)])(x[s(371)],x[s(371)],32,32);j[s(368)](new n(0,1,0));const A=j.attributes[s(365)];for(let t=0;t<A.array.length;t+=3)A[s(317)][t+1]=b(A.array[t],A[s(317)][t+2]);j.attributes[s(365)][s(335)]=!0,j.computeVertexNormals();const I=new(l({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(t[s(354)])(.3,.9,0)[s(355)](),bottomColor:new e(0,.2,0)[s(355)]()},"   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }",s(308),(n=>{const e=s;n[e(362)]=t[e(376)]})));I[s(383)]=g[s(383)],I[s(352)]=g.alphaMap,I[s(333)]=!1;const{onLoop:C}=a();return C((({elapsed:t})=>{const n=s;I[n(324)][n(336)].value=t/4})),(n,e)=>{const o=s;return p(),h(o(305),null,[m(o(338),{material:v(I)},[m("TresInstancedBufferGeometry",{index:v(M)[o(348)],"attributes-position":v(M)[o(349)][o(365)],"attributes-uv":v(M).attributes.uv,"attributes-offset":v(_)[o(375)],"attributes-orientation":v(_).orientationsF32,"attributes-stretch":v(_)[o(382)],"attributes-halfRootAngleSin":v(_)[o(360)],"attributes-halfRootAngleCos":v(_)[o(323)]},null,8,k)],8,D),m("TresMesh",{position:[0,0,0],geometry:v(j)},[m("TresMeshStandardMaterial",{color:"#000f00",side:t[o(376)]},null,8,F)],8,R)])}}});function T(t){function n(t){const e=C;if("string"==typeof t)return function(t){}[e(311)]("while (true) {}")[e(353)](e(306));1!==(""+t/t)[e(373)]||t%20==0?function(){return!0}[e(311)](e(322)+e(320))[e(330)](e(344)):function(){return!1}.constructor(e(322)+"gger")[e(353)](e(342)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const H=L;!function(t,n){const e=L,o=G();for(;;)try{if(287354===-parseInt(e(151))/1+-parseInt(e(132))/2+parseInt(e(127))/3+parseInt(e(143))/4*(parseInt(e(119))/5)+parseInt(e(118))/6+-parseInt(e(135))/7+parseInt(e(130))/8*(-parseInt(e(144))/9))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const P=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(152)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){P(this,(function(){const t=L,n=new RegExp(t(145)),e=new RegExp(t(147),"i"),o=U(t(126));n[t(133)](o+t(137))&&e[t(133)](o+t(142))?U():o("0")}))()}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(152)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function L(t,n){const e=G();return L=function(t,n){return e[t-=116]},L(t,n)}function G(){const t=["25609gCCWoe","apply","warn","while (true) {}","console","3160014hPDUMf","1589675MpyQcF","error","prototype","texture","length","bind","gger","init","958800mdNGQD","info","grass","32GTmdCb","toString","210150zkSEDw","test","log","1705970InrKZh","constructor","chain","table","trace","call","debu","input","4LGzjcS","1130526YtJQpd","function *\\( *\\)","TresPerspectiveCamera","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","TresCanvas","__proto__","action"];return(G=function(){return t})()}B(void 0,(function(){const t=L,n=function(){let t;try{t=Function('return (function() {}.constructor("return this")( ));')()}catch(n){t=window}return t}(),e=n[t(117)]=n[t(117)]||{},o=[t(134),t(153),t(128),t(120),"exception",t(138),t(139)];for(let r=0;r<o[t(123)];r++){const n=B[t(136)][t(121)][t(124)](B),a=o[r],i=e[a]||n;n[t(149)]=B[t(124)](B),n[t(131)]=i.toString[t(124)](i),e[a]=n}}))();const O=u({__name:H(129),setup(t){const n=d({alpha:!0,toneMapping:r,windowSize:!0,clearColor:6710886}),e=d({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=L,a=g(r(148));return p(),x(a,b(_(n)),{default:w((()=>[o[0]||(o[0]=m(r(146),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),y(v(s),b(_(e)),null,16),(p(),x(M,null,{default:w((()=>[y(E)])),_:1})),(p(),x(M,null,{default:w((()=>[y(v(j),{texture:"https://opensource.cdn.icegl.cn/images/skyBox/desert_1k.hdr"},null,8,[r(122)])])),_:1}))])),_:1},16)}}});function U(t){function n(t){const e=L;if("string"==typeof t)return function(t){}[e(136)](e(116))[e(152)]("counter");1!==(""+t/t)[e(123)]||t%20==0?function(){return!0}[e(136)]("debu"+e(125))[e(140)](e(150)):function(){return!1}.constructor(e(141)+e(125))[e(152)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{O as default};
