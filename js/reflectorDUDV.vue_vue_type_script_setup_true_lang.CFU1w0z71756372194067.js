import{bK as e,M as o,i as r,af as n,cp as t,co as i,aL as a,l,m as s}from"./three.QlBabAUP1756372194067.js";import{b as v}from"./@tresjs.Df2Jc2df1756372194067.js";import{d as u}from"./dither.glsl.tNAdkJUa1756372194067.js";import{R as c}from"./Reflector.Cru6rol41756372194067.js";import"./OimoPhysicsBuffer.DTTXKZYU1756372194067.js";import{q as m}from"./vite-plugin-qiankun.B06WoCqG1756372194067.js";import{d as f,aa as p,a2 as d,w as _,G as x,o as g,I as M,u as b}from"./@vue.BzMISRrV1756372194067.js";const y=`\nprecision highp float;\n\nuniform sampler2D tMap;\nuniform sampler2D tReflect;\nuniform sampler2D tReflectBlur;\nuniform float uReflectivity;\n\nin vec2 vUv;\nin vec4 vCoord;\nin vec3 vNormal;\nin vec3 vToEye;\n\nout vec4 FragColor;\n\n${u}\n\nvoid main() {\n    vec2 reflectionUv = vCoord.xy / vCoord.w;\n\n    vec4 dudv = texture(tMap, vUv);\n    vec4 color = texture(tReflect, reflectionUv);\n\n    vec4 blur;\n\n    blur = texture(tReflectBlur, reflectionUv + dudv.rg / 256.0);\n    color = mix(color, blur, smoothstep(1.0, 0.1, dudv.g));\n\n    blur = texture(tReflectBlur, reflectionUv);\n    color = mix(color, blur, smoothstep(0.5, 1.0, dudv.r));\n\n    FragColor = color * mix(0.6, 0.75, dudv.g);\n\n    // Fresnel term\n    vec3 toEye = normalize(vToEye);\n    float theta = max(dot(toEye, vNormal), 0.0);\n    float reflectance = uReflectivity + (1.0 - uReflectivity) * pow((1.0 - theta), 5.0);\n\n    FragColor = mix(vec4(0), FragColor, reflectance);\n\n    #ifdef DITHERING\n        FragColor.rgb = dither(FragColor.rgb);\n    #endif\n\n    FragColor.a = 1.0;\n}\n`;class h extends e{constructor({map:e=null,reflectivity:i=0,dithering:a=!1}={}){const l={glslVersion:t,defines:{DITHERING:a},uniforms:{tMap:{value:null},tReflect:{value:null},tReflectBlur:{value:null},uMapTransform:{value:new r},uMatrix:{value:new o},uReflectivity:{value:i}},vertexShader:"\nin vec3 position;\nin vec3 normal;\nin vec2 uv;\n\nuniform mat4 modelMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\n\nuniform mat3 uMapTransform;\nuniform mat4 uMatrix;\n\nout vec2 vUv;\nout vec4 vCoord;\nout vec3 vNormal;\nout vec3 vToEye;\n\nvoid main() {\n    vUv = (uMapTransform * vec3(uv, 1.0)).xy;\n    vCoord = uMatrix * vec4(position, 1.0);\n    vNormal = normalMatrix * normal;\n\n    vec4 worldPosition = modelMatrix * vec4(position, 1.0);\n    vToEye = cameraPosition - worldPosition.xyz;\n\n    vec4 mvPosition = viewMatrix * worldPosition;\n    gl_Position = projectionMatrix * mvPosition;\n}\n",fragmentShader:y,blending:n};e&&(e.updateMatrix(),l.uniforms=Object.assign(l.uniforms,{tMap:{value:e},uMapTransform:{value:e.matrix}})),super(l)}}const w=["scale"],R=["object"],U=["object"],T=f({__name:"reflectorDUDV",props:{reflectivity:{default:.8},showGridHelper:{type:Boolean,default:!0},scale:{default:1},ignoreObjects:{default:()=>[]},size:{default:()=>[10,10]},mapUrl:{default:"./plugins/floor/image/waterdudv.jpg"}},async setup(e,{expose:o}){let r,n;const t=e,u=new c,f=new i(t.size[0]-.5,t.size[1]);f.visible=t.showGridHelper;let y=t.mapUrl;m.__POWERED_BY_QIANKUN__&&(y=m.__INJECTED_PUBLIC_PATH_BY_QIANKUN__+y,console.log("qiankunWindow.__INJECTED_PUBLIC_PATH_BY_QIANKUN__",m.__INJECTED_PUBLIC_PATH_BY_QIANKUN__),console.log("process.env.BASE_URL","./"));const{map:T}=([r,n]=p((()=>v({map:y}))),r=await r,n(),r);T.wrapS=a,T.wrapT=a,T.repeat.set(6,3);const j=new h({map:T,reflectivity:t.reflectivity});j.uniforms.tReflect={value:u.renderTarget.texture},j.uniforms.tReflectBlur=u.renderTargetUniform,j.uniforms.uMatrix=u.textureMatrixUniform;const E=new l(new s(t.size[0],t.size[1]),j);return E.rotation.x=-Math.PI/2,E.add(u),E.onBeforeRender=(e,o,r)=>{E.visible=!1,t.ignoreObjects.forEach((e=>{e.isMesh&&(e.visible=!1),e.value&&e.value.isMesh&&(e.value.visible=!1)})),u.update(e,o,r),t.ignoreObjects.forEach((e=>{e.isMesh&&(e.visible=!0),e.value&&e.value.isMesh&&(e.value.visible=!0)})),E.visible=!0},d((()=>{t.reflectivity&&(j.uniforms.uReflectivity.value=t.reflectivity)})),_((()=>t.showGridHelper),(e=>{f.visible=e})),o({reflector:u}),(e,o)=>(g(),x("TresGroup",{scale:[e.scale,1,e.scale]},[M("primitive",{object:b(E),"position-y":-.01},null,8,R),M("primitive",{object:b(f)},null,8,U)],8,w))}});export{T as _};
