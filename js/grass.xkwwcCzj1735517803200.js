import{_ as t,C as n,T as e,as as o,ai as r}from"./three.-uH5I3Xp1735517803200.js";import{e as i,b as a,U as s,c}from"./@tresjs.0qL_P2CE1735517803200.js";import"./index.x2ANZ4X51735517803200.js";import{a as l}from"./simplex-noise.Yx8GBgKo1735517803200.js";import{C as u}from"./index.XYCai4YK1735517803200.js";import{d as f,a6 as p,o as h,D as m,J as v,u as d,r as g,f as x,g as w,j as y,aj as b,ak as _,al as j}from"./@vue.-THQH3GC1735517803200.js";import{_ as M}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.-BOLWnkt1735517803200.js";import"./@vueuse.oT9wchAS1735517803200.js";import"./lamina.aTzHuybb1735517803200.js";import"./glsl-tokenizer.SOp3BA5E1735517803200.js";import"./@amap.BJG0QnpR1735517803200.js";import"./glsl-token-descope.xifjKFdI1735517803200.js";import"./glsl-token-depth.SwqLggyH1735517803200.js";import"./glsl-token-scope.CPxVadW41735517803200.js";import"./glsl-token-properties.yc5ja4nd1735517803200.js";import"./glsl-token-assignments.p8sWqQEx1735517803200.js";import"./glsl-token-string._s91M6Ci1735517803200.js";import"./glsl-token-functions.7ohESl4x1735517803200.js";import"./object-hash.GI3HeqU11735517803200.js";import"./jszip.zDIA5__a1735517803200.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.85kf2Yo-1735517803200.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.YkjxZLdy1735517803200.js";import"./three-stdlib.FziVs0a41735517803200.js";import"./@pmndrs.BOd_k6sG1735517803200.js";import"./utils.Exs76rzv1735517803200.js";const z=F;!function(t,n){const e=F,o=I();for(;;)try{if(935531===parseInt(e(148))/1+parseInt(e(115))/2*(-parseInt(e(162))/3)+-parseInt(e(168))/4+-parseInt(e(128))/5+parseInt(e(122))/6*(-parseInt(e(144))/7)+-parseInt(e(143))/8*(parseInt(e(139))/9)+parseInt(e(135))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[F(133)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function I(){const t=["TresGroup","attributes-orientation","TresMeshStandardMaterial","console","9kcSxxj","array","attributes-position","action","trace","prototype","2962468upTLso","instances","bind","Vector3","PlaneGeometry","debu","normalize","random","chain","Vector4","convertSRGBToLinear","length","test","time","TresInstancedBufferGeometry","material","gger","set","counter","joints","sin","uniforms","side","info","call","translate","236518xmToPz","attributes-offset","geometry","error","Color","index","while (true) {}","10106634VRDdJG","return (function() ","log","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","DoubleSide","stretchesF32","1754945qUQJVT","toneMapped","alphaMap","map","#000f00","apply","attributes-halfRootAngleSin","47738210vUzDii","InstancedBufferAttribute","orientationsF32","computeVertexNormals","5173173shrQLt","exception","push","value","16cYReEg","7UrOvdn","cos","attributes","lookAt","442126VMSsGj","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","needsUpdate","constructor","grass","warn","width","attributes-uv","offsetsF32","halfRootAngleSinF32"];return(I=function(){return t})()}!function(){A(this,(function(){const t=F,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(125),"i"),o=E("init");n[t(180)](o+t(176))&&e[t(180)](o+"input")?E():o("0")}))()}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[F(133)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();C(void 0,(function(){const t=F,n=function(){const t=F;let n;try{n=Function(t(123)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(161)]=n[t(161)]||{},o=[t(124),t(153),t(112),t(118),t(140),"table",t(166)];for(let r=0;r<o[t(179)];r++){const n=C[t(151)][t(167)][t(170)](C),i=o[r],a=e[i]||n;n.__proto__=C[t(170)](C),n.toString=a.toString[t(170)](a),e[i]=n}}))();const S=[z(104)],D=[z(120),z(164),z(155),z(116),z(159),"attributes-stretch",z(134),"attributes-halfRootAngleCos"],k=[z(117)],R=[z(111)];function F(t,n){const e=I();return(F=function(t,n){return e[t-=102]})(t,n)}const T=f({__name:z(152),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(r){const s=z;let c,f;const g=([c,f]=p((()=>a({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),c=await c,f(),c),x=r,w=l(Math[s(175)]);function y(t,n){const e=t.x*n.w+t.y*n.z-t.z*n.y+t.w*n.x,r=-t.x*n.z+t.y*n.w+t.z*n.x+t.w*n.y,i=t.x*n.y-t.y*n.x+t.z*n.w+t.w*n.z,a=-t.x*n.x-t.y*n.y-t.z*n.z+t.w*n.w;return new o(e,r,i,a)}function b(t,n){var e=2*w(t/50,n/50);return e+=4*w(t/100,n/100),e+=.2*w(t/10,n/10)}const _=function(n,o){const r=s,i=[],a=[],c=[],l=[],u=[];let f=new(t[r(177)]),p=new(t[r(177)]);const h=-.25;for(let e=0;e<n;e++){const s=Math[r(175)]()*o-o/2,m=Math[r(175)]()*o-o/2,v=b(s,m);i[r(141)](s,v,m);let d=Math.PI-Math.random()*(2*Math.PI);l[r(141)](Math[r(109)](.5*d)),u.push(Math[r(145)](.5*d));let g=new(t[r(171)])(0,1,0),x=g.x*Math[r(109)](d/2),w=g.y*Math[r(109)](d/2),_=g.z*Math[r(109)](d/2),j=Math[r(145)](d/2);f[r(106)](x,w,_,j)[r(174)](),d=.5*Math[r(175)]()+h,g=new(t[r(171)])(1,0,0),x=g.x*Math[r(109)](d/2),w=g.y*Math[r(109)](d/2),_=g.z*Math.sin(d/2),j=Math.cos(d/2),p[r(106)](x,w,_,j)[r(174)](),f=y(f,p),d=.5*Math[r(175)]()+h,g=new(t[r(171)])(0,0,1),x=g.x*Math[r(109)](d/2),w=g.y*Math.sin(d/2),_=g.z*Math[r(109)](d/2),j=Math.cos(d/2),p[r(106)](x,w,_,j)[r(174)](),f=y(f,p),a.push(f.x,f.y,f.z,f.w),e<n/3?c[r(141)](1.8*Math.random()):c[r(141)](Math[r(175)]())}return{offsetsF32:new(t[r(136)])(new Float32Array(i),3),orientationsF32:new(t[r(136)])(new Float32Array(a),4),stretchesF32:new e(new Float32Array(c),1),halfRootAngleCosF32:new(t[r(136)])(new Float32Array(u),1),halfRootAngleSinF32:new e(new Float32Array(l),1)}}(x[s(169)],x[s(154)]),j=new(t[s(172)])(x.bW,x.bH,1,x[s(108)])[s(114)](0,x.bH/2,0),M=new(t[s(172)])(x[s(154)],x[s(154)],32,32);M[s(147)](new(t[s(171)])(0,1,0));const A=M[s(146)].position;for(let t=0;t<A[s(163)].length;t+=3)A[s(163)][t+1]=b(A[s(163)][t],A[s(163)][t+2]);M[s(146)].position[s(150)]=!0,M[s(138)]();const I=new(u({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(t[s(119)])(.3,.9,0)[s(178)](),bottomColor:new n(0,.2,0)[s(178)]()},s(149),"\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }",(n=>{const e=s;n[e(111)]=t[e(126)]})));I[s(131)]=g[s(131)],I[s(130)]=g[s(130)],I[s(129)]=!1;const{onLoop:C}=i();return C((({elapsed:t})=>{const n=s;I[n(110)][n(102)][n(142)]=t/4})),(n,e)=>{const o=s;return h(),m(o(158),null,[v("TresMesh",{material:d(I)},[v(o(103),{index:d(j)[o(120)],"attributes-position":d(j)[o(146)].position,"attributes-uv":d(j).attributes.uv,"attributes-offset":d(_)[o(156)],"attributes-orientation":d(_)[o(137)],"attributes-stretch":d(_)[o(127)],"attributes-halfRootAngleSin":d(_)[o(157)],"attributes-halfRootAngleCos":d(_).halfRootAngleCosF32},null,8,D)],8,S),v("TresMesh",{position:[0,0,0],geometry:d(M)},[v(o(160),{color:o(132),side:t[o(126)]},null,8,R)],8,k)])}}});function E(t){function n(t){const e=F;if("string"==typeof t)return function(t){}[e(151)](e(121))[e(133)](e(107));1!==(""+t/t)[e(179)]||t%20==0?function(){return!0}[e(151)](e(173)+"gger")[e(113)](e(165)):function(){return!1}[e(151)](e(173)+e(105))[e(133)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const H=L;!function(t,n){const e=L,o=G();for(;;)try{if(378505===-parseInt(e(290))/1*(parseInt(e(295))/2)+parseInt(e(314))/3+-parseInt(e(299))/4+-parseInt(e(303))/5+-parseInt(e(306))/6+parseInt(e(316))/7+parseInt(e(297))/8)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[L(315)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){O(this,(function(){const t=L,n=new RegExp(t(319)),e=new RegExp(t(318),"i"),o=U(t(288));n[t(294)](o+"chain")&&e[t(294)](o+t(317))?U():o("0")}))()}();const P=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function G(){const t=["3832619iGmYBj","input","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","function *\\( *\\)","prototype","length","debu","bind","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","init","counter","2ToDvNb","console","table","return (function() ","test","428734rCGjup","while (true) {}","9222400mPGydA","gger","2712028tHNfHi","trace","TresPerspectiveCamera","action","1714690XmFxtO","exception",'{}.constructor("return this")( )',"1246794eHEpgq","constructor","log","stateObject","call","info","toString","grass","1006998Dbeewg","apply"];return(G=function(){return t})()}function L(t,n){const e=G();return(L=function(t,n){return e[t-=288]})(t,n)}P(void 0,(function(){const t=L;let n;try{n=Function(t(293)+t(305)+");")()}catch(r){n=window}const e=n[t(291)]=n[t(291)]||{},o=[t(308),"warn",t(311),"error",t(304),t(292),t(300)];for(let i=0;i<o[t(321)];i++){const n=P.constructor[t(320)][t(323)](P),r=o[i],a=e[r]||n;n.__proto__=P[t(323)](P),n[t(312)]=a.toString.bind(a),e[r]=n}}))();const B=f({__name:H(313),setup(t){const n=g({alpha:!0,toneMapping:r,windowSize:!0,clearColor:6710886}),e=g({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=L;return h(),x(d(c),b(_(n)),{default:w((()=>[o[0]||(o[0]=v(r(301),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),y(d(s),b(_(e)),null,16),(h(),x(j,null,{default:w((()=>[y(T)])),_:1})),(h(),x(j,null,{default:w((()=>[y(d(M),{texture:r(324)})])),_:1}))])),_:1},16)}}});function U(t){function n(t){const e=L;if("string"==typeof t)return function(t){}[e(307)](e(296))[e(315)](e(289));1!==(""+t/t)[e(321)]||t%20==0?function(){return!0}.constructor("debu"+e(298))[e(310)](e(302)):function(){return!1}[e(307)](e(322)+"gger")[e(315)](e(309)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{B as default};
