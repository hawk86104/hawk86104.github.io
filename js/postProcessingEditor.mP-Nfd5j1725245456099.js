import{p as t,$ as n,N as e,d as o}from"./@tresjs.j5vdYITq1725245456099.js";import{a6 as r,al as s,Y as a,y as i,W as c,l,aV as u,cH as v,bV as f}from"./three.KG2-8r0_1725245456099.js";import{P as p}from"./tweakpane.yHWGBmom1725245456099.js";import{d as m,a4 as d,e as g,o as x,f as h,g as y,J as I,j as b,u as _,aj as S,ak as U,al as w,m as P}from"./@vue.Q1VpS3901725245456099.js";import{_ as D}from"./@fesjs.Ns9rHvZ61725245456099.js";import"./@vueuse.whMtq_7M1725245456099.js";import"./vue-router.tVftT0SA1725245456099.js";import"./lodash-es.nFpJXAf-1725245456099.js";import"./@qlin.yHhFDldE1725245456099.js";import"./pinia.-1zGxVQz1725245456099.js";import"./@floating-ui.BPbuo5Gx1725245456099.js";import"./@juggle.7yjBMqoW1725245456099.js";!function(t,n){const e=C,o=A();for(;;)try{if(798947===-parseInt(e(403))/1+parseInt(e(396))/2+-parseInt(e(400))/3+parseInt(e(352))/4+parseInt(e(382))/5*(parseInt(e(367))/6)+parseInt(e(411))/7*(-parseInt(e(387))/8)+parseInt(e(398))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const E=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(386)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){E(this,(function(){const t=C,n=new RegExp(t(372)),e=new RegExp(t(366),"i"),o=F(t(373));n[t(359)](o+"chain")&&e[t(359)](o+t(401))?F():o("0")}))()}();const M=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function A(){const t=["constructor","lastIndex","1529094INtVlY","console","3965652HRTWYi","length","149466ScfUGC","input","onload","657726uaxjKa","Matrix4","responseText","v3v","value","bind","warn","exec","14cQlkjO","object","debu","Vector4","4710556hRZNjH","table","isArray","trace","gger","type","return (function() ","test","onerror","log","Matrix3","string","__proto__","index","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","30ONYZom","error","hasOwnProperty","name","Vector3","function *\\( *\\)","init","prototype","\" couldn't be loaded.","message","action","Texture","counter","toString","while (true) {}","85925gwzjNt","stateObject","ShaderMaterial","onabort","apply","3848976saTsUf","send","call","Matrix2","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","Vector2",'{}.constructor("return this")( )'];return(A=function(){return t})()}M(void 0,(function(){const t=C;let n;try{n=Function(t(358)+t(393)+");")()}catch(r){n=window}const e=n[t(397)]=n[t(397)]||{},o=[t(361),t(409),"info",t(368),"exception",t(353),t(355)];for(let s=0;s<o[t(399)];s++){const n=M.constructor[t(374)].bind(M),r=o[s],a=e[r]||n;n[t(364)]=M[t(408)](M),n[t(380)]=a.toString[t(408)](a),e[r]=n}}))();function L(t,n,e){const o=C;if(typeof t!==o(412)||null===t)return t;const r=Array[o(354)](t)?[]:{};for(const s in t)t[o(369)](s)&&(r[s]=L(t[s])),s==n&&(r[n]=e);return r}function C(t,n){const e=A();return(C=function(t,n){return e[t-=351]})(t,n)}function F(t){function n(t){const e=C;if(typeof t===e(363))return function(t){}[e(394)](e(381))[e(386)](e(379));1!==(""+t/t)[e(399)]||t%20==0?function(){return!0}.constructor("debu"+e(356))[e(389)](e(377)):function(){return!1}.constructor(e(413)+e(356))[e(386)](e(383)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const z=R;!function(t,n){const e=R,o=G();for(;;)try{if(408721===-parseInt(e(175))/1+-parseInt(e(192))/2*(parseInt(e(198))/3)+parseInt(e(163))/4+-parseInt(e(208))/5*(-parseInt(e(155))/6)+parseInt(e(150))/7+parseInt(e(132))/8*(parseInt(e(183))/9)+-parseInt(e(159))/10*(-parseInt(e(172))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const N=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(199)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){N(this,(function(){const t=R,n=new RegExp(t(207)),e=new RegExp(t(133),"i"),o=B(t(219));n.test(o+"chain")&&e[t(180)](o+"input")?B():o("0")}))()}();const T=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(199)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function G(){const t=["2484377SIZAuf","swapBuffers","setRenderTarget","params","constructor","996AMNXAS","Stack","quad","toString","80yHulIx","while (true) {}","stencilBuffer","set","2574232VGMnvk","read","wrapT","far","makePerspective","push","loadShadervf","tInput","near","106612COUonD","wrapS","CopyPass","536642OcilRQ","PlaneGeometry","Pass","useRGBA","shader","test","splice","getOfflineTexture","18VVvLoE","exception","onWindowResize","Scene","now","projectionMatrix","material","removePass","bind","7732PqgLSy","passes","resolution","ShaderMaterial","startTime","Mesh","363yHedjo","apply","setSize","texture",'{}.constructor("return this")( )',"scene","uuid","copyPass","LinearFilter","function *\\( *\\)","8065AQoqYe","ClampToEdgeWrapping","camera","add","WebGLRenderTarget","write","value","render","uniforms","gger","type","init","OrthographicCamera","RGBAFormat","minFilter","width","counter","call","log","magFilter","passItems","length","renderer","action","toScreen","innerHeight","height","table","277544ibKIYj","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","front","Reset","makeOrthographic","addPass","settings","info","console","debu","__proto__","back","pass","RGBFormat","stateObject","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","trace","innerWidth"];return(G=function(){return t})()}function R(t,n){const e=G();return(R=function(t,n){return e[t-=124]})(t,n)}T(void 0,(function(){const t=R;let n;try{n=Function("return (function() "+t(202)+");")()}catch(r){n=window}const e=n[t(140)]=n[t(140)]||{},o=[t(226),"warn",t(139),"error",t(184),t(131),t(148)];for(let s=0;s<o.length;s++){const n=T.constructor.prototype[t(191)](T),r=o[s],a=e[r]||n;n[t(142)]=T[t(191)](T),n[t(158)]=a[t(158)][t(191)](a),e[r]=n}}))();class j{constructor(t,n){const e=R;this[e(223)]=1,this[e(130)]=1,this[e(138)]=n||{},this[e(178)]=this[e(138)][e(178)]||!1,this[e(126)]=t,this[e(205)]=this[e(174)](this.settings),this.scene=new(r[e(186)]),this[e(157)]=new(r[e(197)])(new(r[e(176)])(1,1),new a),this[e(203)][e(211)](this[e(157)]),this[e(210)]=new(r[e(220)])(1,1,1,1,-1e4,1e4),this[e(134)]=new(r[e(212)])(1,1,{minFilter:void 0!==this.settings[e(222)]?this[e(138)].minFilter:r[e(206)],magFilter:void 0!==this.settings[e(227)]?this[e(138)][e(227)]:r[e(206)],wrapS:void 0!==this[e(138)].wrapS?this[e(138)][e(173)]:r[e(209)],wrapT:void 0!==this[e(138)].wrapT?this.settings[e(165)]:r[e(209)],format:this[e(178)]?r[e(221)]:r[e(145)],type:void 0!==this.settings[e(218)]?this[e(138)][e(218)]:i,stencilBuffer:void 0===this[e(138)].stencilBuffer||this.settings[e(161)]}),this[e(143)]=this[e(134)].clone(),this.startTime=Date.now(),this[e(193)]={},this[e(156)]={passItems:[],passes:[]}}[z(137)](t,n,e,o){const r=z;this[r(169)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(179)]};this[r(156)][r(124)][r(168)](s)}[z(190)](t){const n=z;for(let e=this[n(156)][n(124)][n(125)]-1;e>=0;e--)this[n(156)][n(124)][e][n(204)]===parseInt(t)&&this[n(156)].passItems[n(181)](e,1);console[n(226)](this[n(156)][n(124)])}[z(174)](){const t=z;this.Pass[t(225)](this);return this[t(169)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}loadShadervf(t){const n=z,e=n(147);return this[n(179)]=function(t,n){const e=C,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,a=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,i={sampler2D:{type:"t",value:()=>new(r[C(378)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[C(392)])},vec3:{type:"v3",value:()=>new(r[C(371)])},vec4:{type:"v4",value:()=>new(r[C(351)])},bvec2:{type:"v2",value:()=>new(r[C(392)])},bvec3:{type:"v3",value:()=>new(r[C(371)])},bvec4:{type:"v4",value:()=>new s},ivec2:{type:"v2",value:()=>new(r[C(392)])},ivec3:{type:"v3",value:()=>new(r[C(371)])},ivec4:{type:"v4",value:()=>new(r[C(351)])},mat2:{type:"v2",value:()=>new(r[C(390)])},mat3:{type:"v3",value:()=>new(r[C(362)])},mat4:{type:"v4",value:()=>new(r[C(404)])}},c={float:{type:"fv",value:()=>[]},vec3:{type:e(406),value:()=>[]}};let l;const u={resolution:{type:"v2",value:new(r[e(392)])(1,1),default:!0},time:{type:"f",value:Date.now(),default:!0},tInput:{type:"t",value:new(r[e(378)]),default:!0}};let v,f;for(;null!==(l=o[e(410)](n));)l[e(365)]===o[e(395)]&&o[e(395)]++,v=l[1],f=l[2],u[f]={type:i[v].type,value:i[v][e(407)]()};for(;null!==(l=a[e(410)](n));)l[e(365)]===o[e(395)]&&o.lastIndex++,v=l[1],f=l[2],l[3],u[f]={type:c[v][e(357)],value:c[v][e(407)]()};return new(r[e(384)])({uniforms:u,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(179)]}[z(177)](t){const n=z;this[n(179)]=null,this[n(153)]={}}[z(135)](){const t=z;this[t(164)]=this.front,this.write=this[t(143)]}[z(185)](t,n){const e=z,o=window[e(149)],r=window[e(129)];t[e(200)](1*o,1*r),n.projectionMatrix[e(167)](70,o/r,n[e(171)],n.far),this[e(200)](o,r);return this[e(182)](o,r,!0)}[z(200)](t,n){const e=z;this[e(223)]=t,this[e(130)]=n,this.camera[e(188)][e(136)](t/-2,t/2,n/2,n/-2,this[e(210)][e(171)],this.camera[e(166)]),this[e(157)].scale.set(t,n,1),this.front[e(200)](t,n),this.back[e(200)](t,n)}[z(182)](t,n,e){return new c(t,n,{minFilter:r[z(206)],magFilter:l,format:e?u:v})}[z(215)](t,n,e,o){const r=z;this[r(126)].setRenderTarget(this[r(213)]),this[r(126)].render(t,n),o||this[r(151)]()}[z(151)](){const t=z,n=this[t(213)];this[t(213)]=this[t(164)],this[t(164)]=n}[z(144)](){const t=z;for(let n=0;n<this[t(156)][t(124)][t(125)];n++){const e=this.Stack[t(124)][n].shader,o=this[t(156)].passItems[n].params;if(this[t(126)][t(152)](this[t(213)]),e instanceof r[t(195)]){this[t(157)][t(189)]=e,this[t(157)].material.uniforms.tInput[t(214)]=this.read.texture,this.quad[t(189)][t(216)][t(194)][t(214)][t(162)](this[t(223)],this[t(130)]),this[t(157)][t(189)][t(216)].time.value=.001*(Date[t(187)]()-this[t(196)]);for(const n in o)this[t(157)].material[t(216)][n][t(214)]=o[n];this[t(126)].render(this.scene,this[t(210)]),this[t(151)]()}}}[z(128)](t,n){const e=z;this[e(126)][e(152)](null),this[e(157)].material=this.copyPass,this[e(157)][e(189)][e(216)][e(170)][e(214)]=this[e(164)][e(201)],this[e(157)].material[e(216)].resolution[e(214)].set(this[e(223)],this.height),this[e(126)][e(215)](this[e(203)],this[e(210)])}}function B(t){function n(t){const e=R;if("string"==typeof t)return function(t){}.constructor(e(160)).apply(e(224));1!==(""+t/t)[e(125)]||t%20==0?function(){return!0}[e(154)](e(141)+e(217))[e(225)](e(127)):function(){return!1}[e(154)]("debugger")[e(199)](e(146)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const V="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}";!function(t,n){const e=W,o=k();for(;;)try{if(460073===parseInt(e(352))/1*(-parseInt(e(333))/2)+-parseInt(e(338))/3+parseInt(e(315))/4*(parseInt(e(286))/5)+parseInt(e(351))/6+-parseInt(e(321))/7*(parseInt(e(311))/8)+-parseInt(e(303))/9+parseInt(e(295))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[W(328)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){O(this,(function(){const t=W,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(316),"i"),o=X(t(300));n[t(301)](o+t(312))&&e[t(301)](o+t(287))?X():o("0")}))()}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function k(){const t=["counter","material","FXAAPass","values",'{}.constructor("return this")( )',"translate","Vector2","245MguKiy","input","removePass","change","constructor","dispose","onWindowResize","autoClearColor","info","19101410LoMaHA","length","call","error","BoxGeometry","init","test","push","2314314xOduGr","pass","table","RGBPass","CIRCULARPass","VIGNETTE1Pass","plugins/postProcessing/image/1324-normal.jpg","log","816832UGidsy","chain","label","value","15224GIzhpC","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","addBlade","mergeGeometries","bind","map","56FtDnpP","console","SNOISEPass","add","plugins/postProcessing/image/1324.jpg","return (function() ","castShadow","apply","toString","text","list","debu","179356IWPEKE","POISSONPass","warn","addPass","addButton","1252884ykPaGf","MeshPhongMaterial","exception","Mesh","后处理类型","__proto__","stateObject","random","FREICHENPass","toScreen","新增通道","移除~","InvertPass","1282536FWEkKv","4mJWZwq","SEPIAPass","click","title","BOXBLURPass","target","gger","split","BufferGeometry","关闭通道","trace","TOONPass"];return(k=function(){return t})()}function W(t,n){const e=k();return(W=function(t,n){return e[t-=274]})(t,n)}H(void 0,(function(){const t=W,n=function(){const t=W;let n;try{n=Function(t(326)+t(283)+");")()}catch(e){n=window}return n}(),e=n[t(322)]=n[t(322)]||{},o=[t(310),t(335),t(294),t(298),t(340),t(305),t(277)];for(let r=0;r<o[t(296)];r++){const n=H[t(290)].prototype[t(319)](H),s=o[r],a=e[s]||n;n[t(343)]=H[t(319)](H),n[t(329)]=a[t(329)].bind(a),e[s]=n}}))();function X(t){function n(t){const e=W;if("string"==typeof t)return function(t){}[e(290)]("while (true) {}")[e(328)](e(279));1!==(""+t/t)[e(296)]||t%20==0?function(){return!0}[e(290)]("debu"+e(358))[e(297)]("action"):function(){return!1}.constructor(e(332)+e(358))[e(328)](e(344)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const q=D(m({__name:"postProcessing",async setup(o){const s=W;let a,i;const{camera:c,renderer:l,scene:u,sizes:v}=t();for(var m=new(r[s(275)]),g=[],x=0;x<100;x++){var h=new(r[s(299)])(100,100,100);h[s(284)](1500*Math[s(345)](),1500*Math[s(345)](),1500*Math.random()),g[s(302)](h)}m=f[s(318)](g);const y=([a,i]=d((()=>e({map:s(325)}))),a=await a,i(),a),I=([a,i]=d((()=>e({map:s(309)}))),a=await a,i(),a);var b=new(r[s(339)])({map:y[s(320)],normalMap:I[s(320)],normalScale:new(r[s(285)])(.8,-.8),shininess:100}),_=new(r[s(341)])(m,b);_[s(327)]=!0,_.receiveShadow=!0,u[s(314)][s(324)](_);const S=new j(l.value,{useRGBA:!0}),U=new p;let w=null,P=[{text:s(350),value:{InvertPass:V}},{text:s(281),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:s(353),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:s(323),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:s(356),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:"DENOISEPass",value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:"CGAPass",value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:I[s(320)]}}},{text:"SOBELPass",value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:s(306),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:"DOTPass",value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(307),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:s(334),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:s(308),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:"VIGNETTE2Pass",value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:s(346),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:s(278),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],D=s(350),E=V,M=null;U.addBlade({view:s(331),label:s(342),options:P,value:""}).on(s(289),(t=>{w=t.value}));const A=U[s(337)]({title:"新增",label:s(348)});let C=0;A.on(s(354),(t=>{const n=s;D=Object.keys(w)[0],E=Object[n(282)](w)[0],M=Object[n(282)](w)[1];let e=C++,o=U.addFolder({title:D});for(const s in M){let t=M[s];o[n(317)]({view:n(330),label:s,parse:t=>String(t),value:t})}o[n(337)]({title:n(349)+e,label:n(276)}).on(n(354),(t=>{const e=n;let o=t[e(357)][e(355)][e(274)]("~")[1];S[e(288)](o)})).on("click",(()=>{o[n(291)]()}));let r=L(M,t.target[n(313)],t.value);S[n(336)](D,E,r,e)})),S[s(292)](l[s(314)],c[s(314)]);const{onLoop:F}=n();return F((({delta:t})=>{const n=s;_&&(l[n(314)][n(293)]=!0,S.Reset(),_[n(280)]=b,S.render(u.value,c[n(314)]),S[n(304)](),S[n(347)](u[n(314)],c[n(314)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),Z=nt;!function(t,n){const e=nt,o=tt();for(;;)try{if(117850===-parseInt(e(308))/1+-parseInt(e(301))/2*(parseInt(e(296))/3)+-parseInt(e(277))/4*(-parseInt(e(287))/5)+-parseInt(e(279))/6+parseInt(e(302))/7*(-parseInt(e(291))/8)+parseInt(e(310))/9+-parseInt(e(286))/10*(-parseInt(e(285))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const $=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){$(this,(function(){const t=nt,n=new RegExp(t(283)),e=new RegExp(t(293),"i"),o=ot(t(273));n[t(290)](o+"chain")&&e[t(290)](o+t(280))?ot():o("0")}))()}();const Y=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[nt(299)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();Y(void 0,(function(){const t=nt,n=function(){const t=nt;let n;try{n=Function("return (function() "+t(282)+");")()}catch(e){n=window}return n}(),e=n[t(278)]=n[t(278)]||{},o=["log",t(297),t(303),t(307),t(284),"table","trace"];for(let r=0;r<o[t(294)];r++){const n=Y[t(275)][t(288)][t(271)](Y),s=o[r],a=e[s]||n;n.__proto__=Y[t(271)](Y),n[t(276)]=a.toString[t(271)](a),e[s]=n}}))();const K={ref:Z(304),position:[600,850,-1500],fov:45,near:.1,far:1e5},J=I(Z(270),{color:Z(305),intensity:2},null,-1),Q=I(Z(295),{position:[100,100,0],intensity:2,color:"#ffffff"},null,-1);function tt(){const t=["constructor","toString","6692eqMYUx","console","375012nXgUXD","input","TresPerspectiveCamera",'{}.constructor("return this")( )',"function *\\( *\\)","exception","873235JMNeeu","40DBeNcG","85IbgHaB","prototype","gger","test","625096FhCdAX","stateObject","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","length","TresDirectionalLight","36Fokijl","warn","postProcessingEditor","apply","call","18682MFCpBn","14asgsSv","info","perspectiveCameraRef","#ffffff","while (true) {}","error","28522PsICtW","#000000","1181331nqfxSs","debu","TresAmbientLight","bind","counter","init","string"];return(tt=function(){return t})()}function nt(t,n){const e=tt();return(nt=function(t,n){return e[t-=270]})(t,n)}const et=m({__name:Z(298),setup(t){const e=Z,r={clearColor:e(309),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:"manual"},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=g("TresCanvas");return x(),h(i,P(r,{"window-size":""}),{default:y((()=>[I(a(281),K,null,512),b(_(o),S(U(s)),null,16),J,Q,(x(),h(w,null,{default:y((()=>[b(q)])),_:1}))])),_:1},16)}}});function ot(t){function n(t){const e=nt;if(typeof t===e(274))return function(t){}[e(275)](e(306))[e(299)](e(272));1!==(""+t/t)[e(294)]||t%20==0?function(){return!0}[e(275)](e(311)+e(289))[e(300)]("action"):function(){return!1}.constructor(e(311)+"gger")[e(299)](e(292)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{et as default};
