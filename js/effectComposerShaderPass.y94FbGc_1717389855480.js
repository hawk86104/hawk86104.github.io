import{a5 as p,q as m,ao as S,aa as x,o as T,c as M,a1 as e,K as k,ad as U,aL as D,aB as E,r as R,C as L,J as N,a as _,T as V,ag as $}from"./vendor.FqxLcdZR1717389855480.js";import{R as F,E as h,S as G}from"./EffectComposer.YhAxTGeM1717389855480.js";import{U as z}from"./UnrealBloomPass.Zjm-WA191717389855480.js";import"./Pass.Dgkf1dNW1717389855480.js";const j=e("TresBoxGeometry",{args:[1,1,1]},null,-1),q=e("TresMeshNormalMaterial",null,null,-1),A=[j,q],H=e("TresBoxGeometry",{args:[1,1,1]},null,-1),J=e("TresMeshNormalMaterial",null,null,-1),K=[H,J],I=p({__name:"ecLayerShaderPass",setup(g){const a=m(),r=m(),{camera:t,renderer:o,scene:f,sizes:u}=S(),d={strength:.572,radius:.51,threshold:0};let v=null,s=null,n=null;const w=(l,i,c,y,B)=>{v=new F(l,i);const b=new z(new D(y,B),d.strength,d.radius,d.threshold);s=new h(c),s.renderToScreen=!1,s.addPass(v),s.addPass(b)},C=l=>{n=new h(l);const i=new E({uniforms:{baseTexture:{value:null},bloomTexture:{value:s.renderTarget2.texture}},vertexShader:"\n            varying vec2 vUv;\n            void main() {\n                vUv = uv;\n                gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n            }\n        ",fragmentShader:"\n            uniform sampler2D baseTexture;\n            uniform sampler2D bloomTexture;\n            varying vec2 vUv;\n            void main() {\n                gl_FragColor = ( vec4( 1.0 ) *texture2D( baseTexture, vUv ) + vec4( 1.0 ) * texture2D( bloomTexture, vUv ) );\n            }\n        ",defines:{}}),c=new G(i,"baseTexture");c.needsSwap=!0,n.addPass(v),n.addPass(c)};x(()=>{a.value&&a.value.layers.set(0),r.value&&r.value.layers.set(1),u.width.value&&(w(f.value,t.value,o.value,u.width.value,u.height.value),C(o.value))});const{onLoop:P}=U();return P(()=>{s&&n&&t.value&&(o.value.clear(),t.value.layers.set(1),s.render(),o.value.clearDepth(),t.value.layers.set(0),n.render(f.value,t.value))}),(l,i)=>(T(),M(k,null,[e("TresMesh",{ref_key:"normalBox",ref:a,position:[3,2,1]},A,512),e("TresMesh",{ref_key:"shineBox",ref:r,position:[0,2,-4]},K,512)],64))}}),O=e("TresPerspectiveCamera",{position:[10,10,10]},null,-1),Q=e("TresAmbientLight",{intensity:1},null,-1),W=e("TresGridHelper",{args:[10,10]},null,-1),ae=p({__name:"effectComposerShaderPass",setup(g){const a=m();return x(()=>{if(a.value){let r=a.value.context.renderer.value;r.autoClear=!1}}),(r,t)=>{const o=R("TresCanvas");return T(),L(o,{disableRender:"","window-size":"",ref_key:"tcRef",ref:a},{default:N(()=>[O,Q,_(V($)),W,_(I)]),_:1},512)}}});export{ae as default};
