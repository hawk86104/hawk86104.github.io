import{t,_ as n,V as e,ai as o}from"./three.VoknrmS61728703368826.js";import{U as r,z as i,Y as a,L as s}from"./@tresjs.JhHPALEY1728703368826.js";import"./index.KhRfEMrl1728703368826.js";import{a as c}from"./simplex-noise.P9JMzoHY1728703368826.js";import{C as l}from"./index.lYn9o6Dz1728703368826.js";import{d as u,a4 as f,o as p,E as h,L as m,u as d,r as v,f as g,g as x,j as w,aj as y,ak as b,al as _}from"./@vue.JNsx1iN61728703368826.js";import{_ as M}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.fTc_zz4f1728703368826.js";import"./@vueuse.yeA714RM1728703368826.js";import"./lamina.H9nymOxx1728703368826.js";import"./glsl-tokenizer.N1Ao8h3g1728703368826.js";import"./@amap.LlG4vVLC1728703368826.js";import"./glsl-token-descope.bHra4-9v1728703368826.js";import"./glsl-token-depth.jTSsh84Q1728703368826.js";import"./glsl-token-scope.I-Ds6UrQ1728703368826.js";import"./glsl-token-properties.U2TagJIx1728703368826.js";import"./glsl-token-assignments.N-QZbTmU1728703368826.js";import"./glsl-token-string.bxQbWgRM1728703368826.js";import"./glsl-token-functions.5GJf-mGG1728703368826.js";import"./object-hash.gPx1SZYa1728703368826.js";import"./jszip.VrfDZcNx1728703368826.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.5tpp9dbi1728703368826.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.K8C0Iht71728703368826.js";import"./three-stdlib.TAHhyoy71728703368826.js";import"./@pmndrs.Q7GR9FLZ1728703368826.js";import"./utils.M1mhnMjA1728703368826.js";const j=I;function z(){const t=["normalize","init","TresInstancedBufferGeometry","call","sin","TresGroup","Vector3","toString","computeVertexNormals","error","array","halfRootAngleSinF32","197582iGBFXj","material","debu","joints","Vector4","360675CnqBCU","info","length","prototype","TresMesh","apply","while (true) {}","attributes-offset","random","DoubleSide","cos","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","warn","__proto__","time","lookAt","index","chain","test","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","constructor","alphaMap","attributes-uv","902226MhsATi","430410ssrwpe","attributes-stretch","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","log","attributes-halfRootAngleSin","function *\\( *\\)","push","172100IvfbzJ","width","side","return (function() ","1581504sMIRLr","halfRootAngleCosF32","trace","uniforms","bind","exception","set","console","grass","Color","attributes-position","counter","attributes","gger","PlaneGeometry","instances","attributes-orientation","stateObject","4357056PyTBiF","position","12fbYYcr","map","InstancedBufferAttribute","orientationsF32"];return(z=function(){return t})()}!function(t,n){const e=I,o=z();for(;;)try{if(198816===-parseInt(e(448))/1+parseInt(e(412))/2+parseInt(e(440))/3+parseInt(e(452))/4+parseInt(e(441))/5*(parseInt(e(396))/6)+-parseInt(e(417))/7+-parseInt(e(394))/8)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function I(t,n){const e=z();return(I=function(t,n){return e[t-=383]})(t,n)}!function(){A(this,(function(){const t=I,n=new RegExp(t(446)),e=new RegExp(t(428),"i"),o=T(t(401));n[t(435)](o+t(434))&&e[t(435)](o+"input")?T():o("0")}))()}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[I(422)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();C(void 0,(function(){const t=I,n=function(){const t=I;let n;try{n=Function(t(451)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(383)]=n.console||{},o=[t(444),t(429),t(418),t(409),t(457),"table",t(454)];for(let r=0;r<o[t(419)];r++){const n=C[t(437)][t(420)].bind(C),i=o[r],a=e[i]||n;n[t(430)]=C[t(456)](C),n[t(407)]=a.toString[t(456)](a),e[i]=n}}))();const S=[j(413)],R=["index",j(386),j(439),j(424),j(392),j(442),j(445),"attributes-halfRootAngleCos"],F=["geometry"],k=[j(450)],D=u({__name:j(384),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(o){const a=j;let s,u;const v=([s,u]=f((()=>i({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),s=await s,u(),s),g=o,x=c(Math.random);function w(t,e){const o=I,r=t.x*e.w+t.y*e.z-t.z*e.y+t.w*e.x,i=-t.x*e.z+t.y*e.w+t.z*e.x+t.w*e.y,a=t.x*e.y-t.y*e.x+t.z*e.w+t.w*e.z,s=-t.x*e.x-t.y*e.y-t.z*e.z+t.w*e.w;return new(n[o(416)])(r,i,a,s)}function y(t,n){var e=2*x(t/50,n/50);return e+=4*x(t/100,n/100),e+=.2*x(t/10,n/10)}const b=function(t,o){const r=I,i=[],a=[],s=[],c=[],l=[];let u=new(n[r(416)]),f=new(n[r(416)]);const p=-.25;for(let h=0;h<t;h++){const m=Math[r(425)]()*o-o/2,d=Math[r(425)]()*o-o/2,v=y(m,d);i[r(447)](m,v,d);let g=Math.PI-Math[r(425)]()*(2*Math.PI);c[r(447)](Math[r(404)](.5*g)),l[r(447)](Math[r(427)](.5*g));let x=new e(0,1,0),b=x.x*Math[r(404)](g/2),_=x.y*Math[r(404)](g/2),M=x.z*Math.sin(g/2),j=Math[r(427)](g/2);u[r(458)](b,_,M,j)[r(400)](),g=.5*Math[r(425)]()+p,x=new(n[r(406)])(1,0,0),b=x.x*Math.sin(g/2),_=x.y*Math[r(404)](g/2),M=x.z*Math[r(404)](g/2),j=Math[r(427)](g/2),f[r(458)](b,_,M,j)[r(400)](),u=w(u,f),g=.5*Math.random()+p,x=new(n[r(406)])(0,0,1),b=x.x*Math[r(404)](g/2),_=x.y*Math[r(404)](g/2),M=x.z*Math[r(404)](g/2),j=Math.cos(g/2),f[r(458)](b,_,M,j)[r(400)](),u=w(u,f),a[r(447)](u.x,u.y,u.z,u.w),h<t/3?s[r(447)](1.8*Math.random()):s[r(447)](Math.random())}return{offsetsF32:new(n[r(398)])(new Float32Array(i),3),orientationsF32:new(n[r(398)])(new Float32Array(a),4),stretchesF32:new(n[r(398)])(new Float32Array(s),1),halfRootAngleCosF32:new(n[r(398)])(new Float32Array(l),1),halfRootAngleSinF32:new(n[r(398)])(new Float32Array(c),1)}}(g[a(391)],g[a(449)]),_=new t(g.bW,g.bH,1,g[a(415)]).translate(0,g.bH/2,0),M=new(n[a(390)])(g.width,g[a(449)],32,32);M[a(432)](new e(0,1,0));const z=M.attributes.position;for(let t=0;t<z[a(410)][a(419)];t+=3)z[a(410)][t+1]=y(z.array[t],z[a(410)][t+2]);M[a(388)][a(395)].needsUpdate=!0,M[a(408)]();const A=new(l({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(n[a(385)])(.3,.9,0).convertSRGBToLinear(),bottomColor:new(n[a(385)])(0,.2,0).convertSRGBToLinear()},a(443),a(436),(t=>{const e=a;t[e(450)]=n[e(426)]})));A[a(397)]=v[a(397)],A[a(438)]=v[a(438)],A.toneMapped=!1;const{onLoop:C}=r();return C((({elapsed:t})=>{const n=a;A[n(455)][n(431)].value=t/4})),(t,e)=>{const o=a;return p(),h(o(405),null,[m(o(421),{material:d(A)},[m(o(402),{index:d(_)[o(433)],"attributes-position":d(_)[o(388)][o(395)],"attributes-uv":d(_)[o(388)].uv,"attributes-offset":d(b).offsetsF32,"attributes-orientation":d(b)[o(399)],"attributes-stretch":d(b).stretchesF32,"attributes-halfRootAngleSin":d(b)[o(411)],"attributes-halfRootAngleCos":d(b)[o(453)]},null,8,R)],8,S),m("TresMesh",{position:[0,0,0],geometry:d(M)},[m("TresMeshStandardMaterial",{color:"#000f00",side:n[o(426)]},null,8,k)],8,F)])}}});function T(t){function n(t){const e=I;if("string"==typeof t)return function(t){}.constructor(e(423))[e(422)](e(387));1!==(""+t/t)[e(419)]||t%20==0?function(){return!0}.constructor(e(414)+e(389))[e(403)]("action"):function(){return!1}[e(437)]("debu"+e(389))[e(422)](e(393)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const B=O;!function(t,n){const e=O,o=L();for(;;)try{if(443574===-parseInt(e(469))/1*(parseInt(e(478))/2)+-parseInt(e(497))/3*(-parseInt(e(486))/4)+-parseInt(e(495))/5+parseInt(e(481))/6+parseInt(e(499))/7*(parseInt(e(496))/8)+-parseInt(e(484))/9*(parseInt(e(475))/10)+parseInt(e(501))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const E=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[O(489)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function L(){const t=["https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","table","1GGQaGR","TresPerspectiveCamera","call","debu","action","console","1690KbMTsP","length","constructor","1449758xNjeNs","test","bind","3734772zgfSUQ","chain","function *\\( *\\)","18774xsTppD","__proto__","172Dsdlzl","warn","error","apply",'{}.constructor("return this")( )',"grass","info","counter","while (true) {}","1744460mnodjr","12296EfzvRT","13071SdIwEm","gger","868ZeOfal","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","9564258VCpKsn","input","return (function() ","toString","trace","stateObject"];return(L=function(){return t})()}!function(){E(this,(function(){const t=O,n=new RegExp(t(483)),e=new RegExp(t(500),"i"),o=U("init");n[t(479)](o+t(482))&&e[t(479)](o+t(502))?U():o("0")}))()}();const P=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[O(489)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();P(void 0,(function(){const t=O;let n;try{n=Function(t(463)+t(490)+");")()}catch(r){n=window}const e=n[t(474)]=n[t(474)]||{},o=["log",t(487),t(492),t(488),"exception",t(468),t(465)];for(let i=0;i<o[t(476)];i++){const n=P.constructor.prototype[t(480)](P),r=o[i],a=e[r]||n;n[t(485)]=P.bind(P),n[t(464)]=a.toString[t(480)](a),e[r]=n}}))();const G=m(B(470),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1);function O(t,n){const e=L();return(O=function(t,n){return e[t-=463]})(t,n)}const H=u({__name:B(491),setup(t){const n=v({alpha:!0,toneMapping:o,windowSize:!0,clearColor:6710886}),e=v({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=O;return p(),g(d(s),y(b(n)),{default:x((()=>[G,w(d(a),y(b(e)),null,16),(p(),g(_,null,{default:x((()=>[w(D)])),_:1})),(p(),g(_,null,{default:x((()=>[w(d(M),{texture:r(467)})])),_:1}))])),_:1},16)}}});function U(t){function n(t){const e=O;if("string"==typeof t)return function(t){}[e(477)](e(494))[e(489)](e(493));1!==(""+t/t)[e(476)]||t%20==0?function(){return!0}.constructor(e(472)+e(498))[e(471)](e(473)):function(){return!1}[e(477)](e(472)+e(498)).apply(e(466)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{H as default};
