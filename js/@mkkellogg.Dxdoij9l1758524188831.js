import{f as e,b8 as t,A as s,l as n,V as r,a as i,K as o,q as a,O as l,W as c,C as h,M as d,Q as p,b as u,t as m,B as A,g as f,J as g,b9 as S,a7 as C,ba as y,ad as x,U as v,ak as I,bb as B,bc as w,u as b,a4 as E,bd as T,n as D,be as M,bf as F,x as R,m as P,bg as H,$ as k,a3 as L,ax as O,aa as U,k as z,av as _,aw as Q,e as N,c as V,bh as G,aI as K,bi as q,bj as W,bk as j,R as Y,h as X,i as J,bl as Z}from"./three.CC50Wz7a1758524188831.js";class ${static idGen=0;constructor(e,t){let s,n;this.promise=new Promise(((e,t)=>{s=e,n=t}));const r=s.bind(this),i=n.bind(this);e(((...e)=>{r(...e)}).bind(this),(e=>{i(e)}).bind(this)),this.abortHandler=t,this.id=$.idGen++}then(e){return new $(((t,s)=>{this.promise=this.promise.then(((...s)=>{const n=e(...s);n instanceof Promise||n instanceof $?n.then(((...e)=>{t(...e)})):t(n)})).catch((e=>{s(e)}))}),this.abortHandler)}catch(e){return new $((t=>{this.promise=this.promise.then(((...e)=>{t(...e)})).catch(e)}),this.abortHandler)}abort(e){this.abortHandler&&this.abortHandler(e)}}class ee extends Error{constructor(e){super(e)}}!function(){const e=new Float32Array(1),t=new Int32Array(e.buffer)}();const te=function(){const e=new Float32Array(1),t=new Int32Array(e.buffer);return function(s){return e[0]=s,t[0]}}(),se=function(e,t,s=!0,n){const r=new AbortController,i=r.signal;let o=!1;let a=!1;const l=(e,s,n,r)=>{t&&!a&&(t(e,s,n,r),100===e&&(a=!0))};return new $(((t,r)=>{const a={signal:i};n&&(a.headers=n),fetch(e,a).then((async e=>{if(!e.ok){const t=await e.text();return void r(new Error(`Fetch failed: ${e.status} ${e.statusText} ${t}`))}const n=e.body.getReader();let i=0,a=e.headers.get("Content-Length"),c=a?parseInt(a):void 0;const h=[];for(;!o;)try{const{value:e,done:r}=await n.read();if(r){if(l(100,"100%",e,c),s){const e=new Blob(h).arrayBuffer();t(e)}else t();break}let o,a;i+=e.length,void 0!==c&&(o=i/c*100,a=`${o.toFixed(2)}%`),s&&h.push(e),l(o,a,e,c)}catch(d){return void r(d)}})).catch((e=>{r(new ee(e))}))}),(e=>{r.abort(e),o=!0}))},ne=function(e,t,s){return Math.max(Math.min(e,s),t)},re=function(){return performance.now()/1e3},ie=e=>{if(e.geometry&&(e.geometry.dispose(),e.geometry=null),e.material&&(e.material.dispose(),e.material=null),e.children)for(let t of e.children)ie(t)},oe=(e,t)=>new Promise((s=>{window.setTimeout((()=>{s(e?e():void 0)}),t?1:50)})),ae=(e=0)=>{let t=0;if(1===e)t=9;else if(2===e)t=24;else if(3===e)t=45;else if(e>3)throw new Error("getSphericalHarmonicsComponentCountForDegree() -> Invalid spherical harmonics degree");return t},le=()=>{let e,t;return{promise:new Promise(((s,n)=>{e=s,t=n})),resolve:e,reject:t}},ce=e=>{let t,s;e||(e=()=>{});return{promise:new $(((e,n)=>{t=e,s=n}),e),resolve:t,reject:s}};class he{constructor(e,t,s){this.major=e,this.minor=t,this.patch=s}toString(){return`${this.major}_${this.minor}_${this.patch}`}}function de(){const e=navigator.userAgent;return e.indexOf("iPhone")>0||e.indexOf("iPad")>0}function pe(){if(de()){const e=navigator.userAgent.match(/OS (\d+)_(\d+)_?(\d+)?/);return new he(parseInt(e[1]||0,10),parseInt(e[2]||0,10),parseInt(e[3]||0,10))}return null}class ue{static OFFSET={X:0,Y:1,Z:2,SCALE0:3,SCALE1:4,SCALE2:5,ROTATION0:6,ROTATION1:7,ROTATION2:8,ROTATION3:9,FDC0:10,FDC1:11,FDC2:12,OPACITY:13,FRC0:14,FRC1:15,FRC2:16,FRC3:17,FRC4:18,FRC5:19,FRC6:20,FRC7:21,FRC8:22,FRC9:23,FRC10:24,FRC11:25,FRC12:26,FRC13:27,FRC14:28,FRC15:29,FRC16:30,FRC17:31,FRC18:32,FRC19:33,FRC20:34,FRC21:35,FRC22:36,FRC23:37};constructor(e=0){this.sphericalHarmonicsDegree=e,this.sphericalHarmonicsCount=ae(this.sphericalHarmonicsDegree),this.componentCount=this.sphericalHarmonicsCount+14,this.defaultSphericalHarmonics=new Array(this.sphericalHarmonicsCount).fill(0),this.splats=[],this.splatCount=0}static createSplat(e=0){const t=[0,0,0,1,1,1,1,0,0,0,0,0,0,0];let s=ae(e);for(let n=0;n<s;n++)t.push(0);return t}addSplat(e){this.splats.push(e),this.splatCount++}getSplat(e){return this.splats[e]}addDefaultSplat(){const e=ue.createSplat(this.sphericalHarmonicsDegree);return this.addSplat(e),e}addSplatFromComonents(e,t,s,n,r,i,o,a,l,c,h,d,p,u,...m){const A=[e,t,s,n,r,i,o,a,l,c,h,d,p,u,...this.defaultSphericalHarmonics];for(let f=0;f<m.length&&f<this.sphericalHarmonicsCount;f++)A[f]=m[f];return this.addSplat(A),A}addSplatFromArray(e,t){const s=e.splats[t],n=ue.createSplat(this.sphericalHarmonicsDegree);for(let r=0;r<this.componentCount&&r<s.length;r++)n[r]=s[r];this.addSplat(n)}}class me{static DefaultSplatSortDistanceMapPrecision=16;static MemoryPageSize=65536;static BytesPerFloat=4;static BytesPerInt=4;static MaxScenes=32;static ProgressiveLoadSectionSize=262144;static ProgressiveLoadSectionDelayDuration=15;static SphericalHarmonics8BitCompressionRange=3}const Ae=me.SphericalHarmonics8BitCompressionRange/2,fe=Z.toHalfFloat.bind(Z),ge=Z.fromHalfFloat.bind(Z),Se=(e,t,s=!1,n,r)=>0===t?e:1===t||2===t&&!s?Z.fromHalfFloat(e):2===t?ye(e,n,r):void 0,Ce=(e,t,s)=>{e=ne(e,t,s);const n=s-t;return ne(Math.floor((e-t)/n*255),0,255)},ye=(e,t,s)=>e/255*(s-t)+t,xe=(e,t,s)=>Ce(ge(e,t,s)),ve=(e,t,s)=>fe(ye(e,t,s)),Ie=(e,t,s,n=!1)=>0===s?e.getFloat32(4*t,!0):1===s||2===s&&!n?e.getUint16(2*t,!0):e.getUint8(t,!0),Be=function(){const e=e=>e;return function(t,s,n,r=!1){if(s===n)return t;let i=e;return 2===s&&r?1===n?i=ve:0==n&&(i=ye):2===s||1===s?0===n?i=ge:2==n&&(i=r?xe:e):0===s&&(1===n?i=fe:2==n&&(i=r?Ce:fe)),i(t)}}(),we=(e,t,s,n,r=0)=>{const i=new Uint8Array(e,t),o=new Uint8Array(s,n);for(let a=0;a<r;a++)o[a]=i[a]};class be{static CurrentMajorVersion=0;static CurrentMinorVersion=1;static CenterComponentCount=3;static ScaleComponentCount=3;static RotationComponentCount=4;static ColorComponentCount=4;static CovarianceComponentCount=6;static SplatScaleOffsetFloat=3;static SplatRotationOffsetFloat=6;static CompressionLevels={0:{BytesPerCenter:12,BytesPerScale:12,BytesPerRotation:16,BytesPerColor:4,ScaleOffsetBytes:12,RotationffsetBytes:24,ColorOffsetBytes:40,SphericalHarmonicsOffsetBytes:44,ScaleRange:1,BytesPerSphericalHarmonicsComponent:4,SphericalHarmonicsOffsetFloat:11,SphericalHarmonicsDegrees:{0:{BytesPerSplat:44},1:{BytesPerSplat:80},2:{BytesPerSplat:140}}},1:{BytesPerCenter:6,BytesPerScale:6,BytesPerRotation:8,BytesPerColor:4,ScaleOffsetBytes:6,RotationffsetBytes:12,ColorOffsetBytes:20,SphericalHarmonicsOffsetBytes:24,ScaleRange:32767,BytesPerSphericalHarmonicsComponent:2,SphericalHarmonicsOffsetFloat:12,SphericalHarmonicsDegrees:{0:{BytesPerSplat:24},1:{BytesPerSplat:42},2:{BytesPerSplat:72}}},2:{BytesPerCenter:6,BytesPerScale:6,BytesPerRotation:8,BytesPerColor:4,ScaleOffsetBytes:6,RotationffsetBytes:12,ColorOffsetBytes:20,SphericalHarmonicsOffsetBytes:24,ScaleRange:32767,BytesPerSphericalHarmonicsComponent:1,SphericalHarmonicsOffsetFloat:12,SphericalHarmonicsDegrees:{0:{BytesPerSplat:24},1:{BytesPerSplat:33},2:{BytesPerSplat:48}}}};static CovarianceSizeFloats=6;static HeaderSizeBytes=4096;static SectionHeaderSizeBytes=1024;static BucketStorageSizeBytes=12;static BucketStorageSizeFloats=3;static BucketBlockSize=5;static BucketSize=256;constructor(e,t=!0){this.constructFromBuffer(e,t)}getSplatCount(){return this.splatCount}getMaxSplatCount(){return this.maxSplatCount}getMinSphericalHarmonicsDegree(){let e=0;for(let t=0;t<this.sections.length;t++){const s=this.sections[t];(0===t||s.sphericalHarmonicsDegree<e)&&(e=s.sphericalHarmonicsDegree)}return e}getBucketIndex(e,t){let s;const n=e.fullBucketCount*e.bucketSize;if(t<n)s=Math.floor(t/e.bucketSize);else{let r=n;s=e.fullBucketCount;let i=0;for(;r<e.splatCount;){let n=e.partiallyFilledBucketLengths[i];if(t>=r&&t<r+n)break;r+=n,s++,i++}}return s}getSplatCenter(e,t,s){const n=this.globalSplatIndexToSectionMap[e],r=this.sections[n],i=e-r.splatCountOffset,o=r.bytesPerSplat*i,a=new DataView(this.bufferData,r.dataBase+o),l=Ie(a,0,this.compressionLevel),c=Ie(a,1,this.compressionLevel),h=Ie(a,2,this.compressionLevel);if(this.compressionLevel>=1){const e=this.getBucketIndex(r,i)*be.BucketStorageSizeFloats,s=r.compressionScaleFactor,n=r.compressionScaleRange;t.x=(l-n)*s+r.bucketArray[e],t.y=(c-n)*s+r.bucketArray[e+1],t.z=(h-n)*s+r.bucketArray[e+2]}else t.x=l,t.y=c,t.z=h;s&&t.applyMatrix4(s)}getSplatScaleAndRotation=function(){const e=new d,t=new d,s=new d,n=new r,i=new r,o=new p;return function(r,a,l,c,h){const d=this.globalSplatIndexToSectionMap[r],p=this.sections[d],u=r-p.splatCountOffset,m=p.bytesPerSplat*u+be.CompressionLevels[this.compressionLevel].ScaleOffsetBytes,A=new DataView(this.bufferData,p.dataBase+m);i.set(Se(Ie(A,0,this.compressionLevel),this.compressionLevel),Se(Ie(A,1,this.compressionLevel),this.compressionLevel),Se(Ie(A,2,this.compressionLevel),this.compressionLevel)),h&&(void 0!==h.x&&(i.x=h.x),void 0!==h.y&&(i.y=h.y),void 0!==h.z&&(i.z=h.z)),o.set(Se(Ie(A,4,this.compressionLevel),this.compressionLevel),Se(Ie(A,5,this.compressionLevel),this.compressionLevel),Se(Ie(A,6,this.compressionLevel),this.compressionLevel),Se(Ie(A,3,this.compressionLevel),this.compressionLevel)),c?(e.makeScale(i.x,i.y,i.z),t.makeRotationFromQuaternion(o),s.copy(e).multiply(t).multiply(c),s.decompose(n,l,a)):(a.copy(i),l.copy(o))}}();getSplatColor(e,t){const s=this.globalSplatIndexToSectionMap[e],n=this.sections[s],r=e-n.splatCountOffset,i=n.bytesPerSplat*r+be.CompressionLevels[this.compressionLevel].ColorOffsetBytes,o=new Uint8Array(this.bufferData,n.dataBase+i,4);t.set(o[0],o[1],o[2],o[3])}fillSplatCenterArray(e,t,s,n,i){const o=this.splatCount;s=s||0,n=n||o-1,void 0===i&&(i=s);const a=new r;for(let r=s;r<=n;r++){const n=this.globalSplatIndexToSectionMap[r],o=this.sections[n],l=r-o.splatCountOffset,c=(r-s+i)*be.CenterComponentCount,h=o.bytesPerSplat*l,d=new DataView(this.bufferData,o.dataBase+h),p=Ie(d,0,this.compressionLevel),u=Ie(d,1,this.compressionLevel),m=Ie(d,2,this.compressionLevel);if(this.compressionLevel>=1){const e=this.getBucketIndex(o,l)*be.BucketStorageSizeFloats,t=o.compressionScaleFactor,s=o.compressionScaleRange;a.x=(p-s)*t+o.bucketArray[e],a.y=(u-s)*t+o.bucketArray[e+1],a.z=(m-s)*t+o.bucketArray[e+2]}else a.x=p,a.y=u,a.z=m;t&&a.applyMatrix4(t),e[c]=a.x,e[c+1]=a.y,e[c+2]=a.z}}fillSplatScaleRotationArray=function(){const e=new d,t=new d,s=new d,n=new r,i=new p,o=new r,a=e=>{const t=e.w<0?-1:1;e.x*=t,e.y*=t,e.z*=t,e.w*=t};return function(r,l,c,h,d,p,u,m){const A=this.splatCount;h=h||0,d=d||A-1,void 0===p&&(p=h);const f=(e,t)=>Be(e,t,u);for(let g=h;g<=d;g++){const d=this.globalSplatIndexToSectionMap[g],u=this.sections[d],A=g-u.splatCountOffset,S=u.bytesPerSplat*A+be.CompressionLevels[this.compressionLevel].ScaleOffsetBytes,C=(g-h+p)*be.ScaleComponentCount,y=(g-h+p)*be.RotationComponentCount,x=new DataView(this.bufferData,u.dataBase+S),v=m&&void 0!==m.x?m.x:Ie(x,0,this.compressionLevel),I=m&&void 0!==m.y?m.y:Ie(x,1,this.compressionLevel),B=m&&void 0!==m.z?m.z:Ie(x,2,this.compressionLevel),w=Ie(x,3,this.compressionLevel),b=Ie(x,4,this.compressionLevel),E=Ie(x,5,this.compressionLevel),T=Ie(x,6,this.compressionLevel);n.set(Se(v,this.compressionLevel),Se(I,this.compressionLevel),Se(B,this.compressionLevel)),i.set(Se(b,this.compressionLevel),Se(E,this.compressionLevel),Se(T,this.compressionLevel),Se(w,this.compressionLevel)).normalize(),c&&(o.set(0,0,0),e.makeScale(n.x,n.y,n.z),t.makeRotationFromQuaternion(i),s.identity().premultiply(e).premultiply(t),s.premultiply(c),s.decompose(o,i,n),i.normalize()),a(i),r&&(r[C]=f(n.x,0),r[C+1]=f(n.y,0),r[C+2]=f(n.z,0)),l&&(l[y]=f(i.x,0),l[y+1]=f(i.y,0),l[y+2]=f(i.z,0),l[y+3]=f(i.w,0))}}}();static computeCovariance=function(){const e=new d,t=new J,s=new J,n=new J,r=new J,i=new J,o=new J;return function(a,l,c,h,d=0,p){e.makeScale(a.x,a.y,a.z),t.setFromMatrix4(e),e.makeRotationFromQuaternion(l),s.setFromMatrix4(e),n.copy(s).multiply(t),r.copy(n).transpose().premultiply(n),c&&(i.setFromMatrix4(c),o.copy(i).transpose(),r.multiply(o),r.premultiply(i)),p>=1?(h[d]=fe(r.elements[0]),h[d+1]=fe(r.elements[3]),h[d+2]=fe(r.elements[6]),h[d+3]=fe(r.elements[4]),h[d+4]=fe(r.elements[7]),h[d+5]=fe(r.elements[8])):(h[d]=r.elements[0],h[d+1]=r.elements[3],h[d+2]=r.elements[6],h[d+3]=r.elements[4],h[d+4]=r.elements[7],h[d+5]=r.elements[8])}}();fillSplatCovarianceArray(e,t,s,n,i,o){const a=this.splatCount,l=new r,c=new p;s=s||0,n=n||a-1,void 0===i&&(i=s);for(let r=s;r<=n;r++){const n=this.globalSplatIndexToSectionMap[r],a=this.sections[n],h=r-a.splatCountOffset,d=(r-s+i)*be.CovarianceComponentCount,p=a.bytesPerSplat*h+be.CompressionLevels[this.compressionLevel].ScaleOffsetBytes,u=new DataView(this.bufferData,a.dataBase+p);l.set(Se(Ie(u,0,this.compressionLevel),this.compressionLevel),Se(Ie(u,1,this.compressionLevel),this.compressionLevel),Se(Ie(u,2,this.compressionLevel),this.compressionLevel)),c.set(Se(Ie(u,4,this.compressionLevel),this.compressionLevel),Se(Ie(u,5,this.compressionLevel),this.compressionLevel),Se(Ie(u,6,this.compressionLevel),this.compressionLevel),Se(Ie(u,3,this.compressionLevel),this.compressionLevel)),be.computeCovariance(l,c,t,e,d,o)}}fillSplatColorArray(e,t,s,n,r){const i=this.splatCount;s=s||0,n=n||i-1,void 0===r&&(r=s);for(let o=s;o<=n;o++){const n=this.globalSplatIndexToSectionMap[o],i=this.sections[n],a=o-i.splatCountOffset,l=(o-s+r)*be.ColorComponentCount,c=i.bytesPerSplat*a+be.CompressionLevels[this.compressionLevel].ColorOffsetBytes,h=new Uint8Array(this.bufferData,i.dataBase+c);let d=h[3];d=d>=t?d:0,e[l]=h[0],e[l+1]=h[1],e[l+2]=h[2],e[l+3]=d}}fillSphericalHarmonicsArray=function(){for(let d=0;d<15;d++)new r;const e=new J,t=new d,s=new r,n=new r,i=new p,o=[],a=[],l=[],c=[],h=[],u=[],m=[],A=[],f=[],g=[],S=[],C=[],y=[],x=[],v=[],I=[],B=[],w=[],b=e=>e,E=(e,t,s,n)=>{e[0]=t,e[1]=s,e[2]=n},T=(e,t,s,n,r)=>{e[0]=Ie(t,n,r,!0),e[1]=Ie(t,n+s,r,!0),e[2]=Ie(t,n+s+s,r,!0)},D=(e,t)=>{t[0]=e[0],t[1]=e[1],t[2]=e[2]},M=(e,t,s,n)=>{t[s]=n(e[0]),t[s+1]=n(e[1]),t[s+2]=n(e[2])},F=(e,t,s,n,r)=>(t[0]=Se(e[0],s,!0,n,r),t[1]=Se(e[1],s,!0,n,r),t[2]=Se(e[2],s,!0,n,r),t);return function(r,d,p,R,P,H,k){const L=this.splatCount;R=R||0,P=P||L-1,void 0===H&&(H=R),p&&d>=1&&(t.copy(p),t.decompose(s,i,n),i.normalize(),t.makeRotationFromQuaternion(i),e.setFromMatrix4(t),E(o,e.elements[4],-e.elements[7],e.elements[1]),E(a,-e.elements[5],e.elements[8],-e.elements[2]),E(l,e.elements[3],-e.elements[6],e.elements[0]));const O=e=>xe(e,this.minSphericalHarmonicsCoeff,this.maxSphericalHarmonicsCoeff),U=e=>Ce(e,this.minSphericalHarmonicsCoeff,this.maxSphericalHarmonicsCoeff);for(let e=R;e<=P;e++){const t=this.globalSplatIndexToSectionMap[e],s=this.sections[t];d=Math.min(d,s.sphericalHarmonicsDegree);const n=ae(d),i=e-s.splatCountOffset,E=s.bytesPerSplat*i+be.CompressionLevels[this.compressionLevel].SphericalHarmonicsOffsetBytes,P=new DataView(this.bufferData,s.dataBase+E),L=(e-R+H)*n;let z=p?0:this.compressionLevel,_=b;z!==k&&(1===z?0===k?_=ge:2==k&&(_=O):0===z&&(1===k?_=fe:2==k&&(_=U)));const Q=this.minSphericalHarmonicsCoeff,N=this.maxSphericalHarmonicsCoeff;d>=1&&(T(f,P,3,0,this.compressionLevel),T(g,P,3,1,this.compressionLevel),T(S,P,3,2,this.compressionLevel),p?(F(f,f,this.compressionLevel,Q,N),F(g,g,this.compressionLevel,Q,N),F(S,S,this.compressionLevel,Q,N),be.rotateSphericalHarmonics3(f,g,S,o,a,l,x,v,I)):(D(f,x),D(g,v),D(S,I)),M(x,r,L,_),M(v,r,L+3,_),M(I,r,L+6,_),d>=2&&(T(f,P,5,9,this.compressionLevel),T(g,P,5,10,this.compressionLevel),T(S,P,5,11,this.compressionLevel),T(C,P,5,12,this.compressionLevel),T(y,P,5,13,this.compressionLevel),p?(F(f,f,this.compressionLevel,Q,N),F(g,g,this.compressionLevel,Q,N),F(S,S,this.compressionLevel,Q,N),F(C,C,this.compressionLevel,Q,N),F(y,y,this.compressionLevel,Q,N),be.rotateSphericalHarmonics5(f,g,S,C,y,o,a,l,c,h,u,m,A,x,v,I,B,w)):(D(f,x),D(g,v),D(S,I),D(C,B),D(y,w)),M(x,r,L+9,_),M(v,r,L+12,_),M(I,r,L+15,_),M(B,r,L+18,_),M(w,r,L+21,_)))}}}();static dot3=(e,t,s,n,r)=>{r[0]=r[1]=r[2]=0;const i=n[0],o=n[1],a=n[2];be.addInto3(e[0]*i,e[1]*i,e[2]*i,r),be.addInto3(t[0]*o,t[1]*o,t[2]*o,r),be.addInto3(s[0]*a,s[1]*a,s[2]*a,r)};static addInto3=(e,t,s,n)=>{n[0]=n[0]+e,n[1]=n[1]+t,n[2]=n[2]+s};static dot5=(e,t,s,n,r,i,o)=>{o[0]=o[1]=o[2]=0;const a=i[0],l=i[1],c=i[2],h=i[3],d=i[4];be.addInto3(e[0]*a,e[1]*a,e[2]*a,o),be.addInto3(t[0]*l,t[1]*l,t[2]*l,o),be.addInto3(s[0]*c,s[1]*c,s[2]*c,o),be.addInto3(n[0]*h,n[1]*h,n[2]*h,o),be.addInto3(r[0]*d,r[1]*d,r[2]*d,o)};static rotateSphericalHarmonics3=(e,t,s,n,r,i,o,a,l)=>{be.dot3(e,t,s,n,o),be.dot3(e,t,s,r,a),be.dot3(e,t,s,i,l)};static rotateSphericalHarmonics5=(e,t,s,n,r,i,o,a,l,c,h,d,p,u,m,A,f,g)=>{const S=Math.sqrt(1/4),C=Math.sqrt(3/4),y=Math.sqrt(1/3),x=Math.sqrt(4/3),v=Math.sqrt(1/12);l[0]=S*(a[2]*i[0]+a[0]*i[2]+(i[2]*a[0]+i[0]*a[2])),l[1]=a[1]*i[0]+i[1]*a[0],l[2]=C*(a[1]*i[1]+i[1]*a[1]),l[3]=a[1]*i[2]+i[1]*a[2],l[4]=S*(a[2]*i[2]-a[0]*i[0]+(i[2]*a[2]-i[0]*a[0])),be.dot5(e,t,s,n,r,l,u),c[0]=S*(o[2]*i[0]+o[0]*i[2]+(i[2]*o[0]+i[0]*o[2])),c[1]=o[1]*i[0]+i[1]*o[0],c[2]=C*(o[1]*i[1]+i[1]*o[1]),c[3]=o[1]*i[2]+i[1]*o[2],c[4]=S*(o[2]*i[2]-o[0]*i[0]+(i[2]*o[2]-i[0]*o[0])),be.dot5(e,t,s,n,r,c,m),h[0]=y*(o[2]*o[0]+o[0]*o[2])+-v*(a[2]*a[0]+a[0]*a[2]+(i[2]*i[0]+i[0]*i[2])),h[1]=x*o[1]*o[0]+-y*(a[1]*a[0]+i[1]*i[0]),h[2]=o[1]*o[1]+-S*(a[1]*a[1]+i[1]*i[1]),h[3]=x*o[1]*o[2]+-y*(a[1]*a[2]+i[1]*i[2]),h[4]=y*(o[2]*o[2]-o[0]*o[0])+-v*(a[2]*a[2]-a[0]*a[0]+(i[2]*i[2]-i[0]*i[0])),be.dot5(e,t,s,n,r,h,A),d[0]=S*(o[2]*a[0]+o[0]*a[2]+(a[2]*o[0]+a[0]*o[2])),d[1]=o[1]*a[0]+a[1]*o[0],d[2]=C*(o[1]*a[1]+a[1]*o[1]),d[3]=o[1]*a[2]+a[1]*o[2],d[4]=S*(o[2]*a[2]-o[0]*a[0]+(a[2]*o[2]-a[0]*o[0])),be.dot5(e,t,s,n,r,d,f),p[0]=S*(a[2]*a[0]+a[0]*a[2]-(i[2]*i[0]+i[0]*i[2])),p[1]=a[1]*a[0]-i[1]*i[0],p[2]=C*(a[1]*a[1]-i[1]*i[1]),p[3]=a[1]*a[2]-i[1]*i[2],p[4]=S*(a[2]*a[2]-a[0]*a[0]-(i[2]*i[2]-i[0]*i[0])),be.dot5(e,t,s,n,r,p,g)};static parseHeader(e){const t=new Uint8Array(e,0,be.HeaderSizeBytes),s=new Uint16Array(e,0,be.HeaderSizeBytes/2),n=new Uint32Array(e,0,be.HeaderSizeBytes/4),i=new Float32Array(e,0,be.HeaderSizeBytes/4);return{versionMajor:t[0],versionMinor:t[1],maxSectionCount:n[1],sectionCount:n[2],maxSplatCount:n[3],splatCount:n[4],compressionLevel:s[10],sceneCenter:new r(i[6],i[7],i[8]),minSphericalHarmonicsCoeff:i[9]||-1.5,maxSphericalHarmonicsCoeff:i[10]||Ae}}static writeHeaderCountsToBuffer(e,t,s){const n=new Uint32Array(s,0,be.HeaderSizeBytes/4);n[2]=e,n[4]=t}static writeHeaderToBuffer(e,t){const s=new Uint8Array(t,0,be.HeaderSizeBytes),n=new Uint16Array(t,0,be.HeaderSizeBytes/2),r=new Uint32Array(t,0,be.HeaderSizeBytes/4),i=new Float32Array(t,0,be.HeaderSizeBytes/4);s[0]=e.versionMajor,s[1]=e.versionMinor,s[2]=0,s[3]=0,r[1]=e.maxSectionCount,r[2]=e.sectionCount,r[3]=e.maxSplatCount,r[4]=e.splatCount,n[10]=e.compressionLevel,i[6]=e.sceneCenter.x,i[7]=e.sceneCenter.y,i[8]=e.sceneCenter.z,i[9]=e.minSphericalHarmonicsCoeff||-1.5,i[10]=e.maxSphericalHarmonicsCoeff||Ae}static parseSectionHeaders(e,t,s=0,n){const r=e.compressionLevel,i=e.maxSectionCount,o=new Uint16Array(t,s,i*be.SectionHeaderSizeBytes/2),a=new Uint32Array(t,s,i*be.SectionHeaderSizeBytes/4),l=new Float32Array(t,s,i*be.SectionHeaderSizeBytes/4),c=[];let h=0,d=h/2,p=h/4,u=be.HeaderSizeBytes+e.maxSectionCount*be.SectionHeaderSizeBytes,m=0;for(let A=0;A<i;A++){const e=a[p+1],t=a[p+2],s=a[p+3],i=l[p+4],f=i/2,g=o[d+10],S=a[p+6]||be.CompressionLevels[r].ScaleRange,C=a[p+8],y=a[p+9],x=4*y,v=g*s+x,I=o[d+20],{bytesPerSplat:B}=be.calculateComponentStorage(r,I),w=B*e,b=w+v,E={bytesPerSplat:B,splatCountOffset:m,splatCount:n?e:0,maxSplatCount:e,bucketSize:t,bucketCount:s,bucketBlockSize:i,halfBucketBlockSize:f,bucketStorageSizeBytes:g,bucketsStorageSizeBytes:v,splatDataStorageSizeBytes:w,storageSizeBytes:b,compressionScaleRange:S,compressionScaleFactor:f/S,base:u,bucketsBase:u+x,dataBase:u+v,fullBucketCount:C,partiallyFilledBucketCount:y,sphericalHarmonicsDegree:I};c[A]=E,u+=b,h+=be.SectionHeaderSizeBytes,d=h/2,p=h/4,m+=e}return c}static writeSectionHeaderToBuffer(e,t,s,n=0){const r=new Uint16Array(s,n,be.SectionHeaderSizeBytes/2),i=new Uint32Array(s,n,be.SectionHeaderSizeBytes/4),o=new Float32Array(s,n,be.SectionHeaderSizeBytes/4);i[0]=e.splatCount,i[1]=e.maxSplatCount,i[2]=t>=1?e.bucketSize:0,i[3]=t>=1?e.bucketCount:0,o[4]=t>=1?e.bucketBlockSize:0,r[10]=t>=1?be.BucketStorageSizeBytes:0,i[6]=t>=1?e.compressionScaleRange:0,i[7]=e.storageSizeBytes,i[8]=t>=1?e.fullBucketCount:0,i[9]=t>=1?e.partiallyFilledBucketCount:0,r[20]=e.sphericalHarmonicsDegree}static writeSectionHeaderSplatCountToBuffer(e,t,s=0){new Uint32Array(t,s,be.SectionHeaderSizeBytes/4)[0]=e}constructFromBuffer(e,t){this.bufferData=e,this.globalSplatIndexToLocalSplatIndexMap=[],this.globalSplatIndexToSectionMap=[];const s=be.parseHeader(this.bufferData);this.versionMajor=s.versionMajor,this.versionMinor=s.versionMinor,this.maxSectionCount=s.maxSectionCount,this.sectionCount=t?s.maxSectionCount:0,this.maxSplatCount=s.maxSplatCount,this.splatCount=t?s.maxSplatCount:0,this.compressionLevel=s.compressionLevel,this.sceneCenter=(new r).copy(s.sceneCenter),this.minSphericalHarmonicsCoeff=s.minSphericalHarmonicsCoeff,this.maxSphericalHarmonicsCoeff=s.maxSphericalHarmonicsCoeff,this.sections=be.parseSectionHeaders(s,this.bufferData,be.HeaderSizeBytes,t),this.linkBufferArrays(),this.buildMaps()}static calculateComponentStorage(e,t){const s=be.CompressionLevels[e].BytesPerCenter,n=be.CompressionLevels[e].BytesPerScale,r=be.CompressionLevels[e].BytesPerRotation,i=be.CompressionLevels[e].BytesPerColor,o=ae(t),a=be.CompressionLevels[e].BytesPerSphericalHarmonicsComponent*o;return{bytesPerCenter:s,bytesPerScale:n,bytesPerRotation:r,bytesPerColor:i,sphericalHarmonicsComponentsPerSplat:o,sphericalHarmonicsBytesPerSplat:a,bytesPerSplat:s+n+r+i+a}}linkBufferArrays(){for(let e=0;e<this.maxSectionCount;e++){const t=this.sections[e];t.bucketArray=new Float32Array(this.bufferData,t.bucketsBase,t.bucketCount*be.BucketStorageSizeFloats),t.partiallyFilledBucketCount>0&&(t.partiallyFilledBucketLengths=new Uint32Array(this.bufferData,t.base,t.partiallyFilledBucketCount))}}buildMaps(){let e=0;for(let t=0;t<this.maxSectionCount;t++){const s=this.sections[t];for(let n=0;n<s.maxSplatCount;n++){const s=e+n;this.globalSplatIndexToLocalSplatIndexMap[s]=n,this.globalSplatIndexToSectionMap[s]=t}e+=s.maxSplatCount}}updateLoadedCounts(e,t){be.writeHeaderCountsToBuffer(e,t,this.bufferData),this.sectionCount=e,this.splatCount=t}updateSectionLoadedCounts(e,t){const s=be.HeaderSizeBytes+be.SectionHeaderSizeBytes*e;be.writeSectionHeaderSplatCountToBuffer(t,this.bufferData,s),this.sections[e].splatCount=t}static writeSplatDataToSectionBuffer=function(){const e=new ArrayBuffer(12),t=new ArrayBuffer(12),s=new ArrayBuffer(16),n=new ArrayBuffer(4),i=new ArrayBuffer(256),o=new p,a=new r,l=new r,{X:c,Y:h,Z:d,SCALE0:u,SCALE1:m,SCALE2:A,ROTATION0:f,ROTATION1:g,ROTATION2:S,ROTATION3:C,FDC0:y,FDC1:x,FDC2:v,OPACITY:I,FRC0:B,FRC9:w}=ue.OFFSET,b=(e,t,s)=>{const n=2*s+1;return e=Math.round(e*t)+s,ne(e,0,n)};return function(r,p,E,T,D,M,F,R,P=-1.5,H=Ae){const k=ae(D),L=E,O=L+be.CompressionLevels[T].BytesPerCenter,U=O+be.CompressionLevels[T].BytesPerScale,z=U+be.CompressionLevels[T].BytesPerRotation,_=z+be.CompressionLevels[T].BytesPerColor;if(void 0!==r[f]?(o.set(r[f],r[g],r[S],r[C]),o.normalize()):o.set(1,0,0,0),void 0!==r[u]?a.set(r[u]||0,r[m]||0,r[A]||0):a.set(0,0,0),0===T){const e=new Float32Array(p,L,be.CenterComponentCount),t=new Float32Array(p,U,be.RotationComponentCount),s=new Float32Array(p,O,be.ScaleComponentCount);if(t.set([o.x,o.y,o.z,o.w]),s.set([a.x,a.y,a.z]),e.set([r[c],r[h],r[d]]),D>0){const e=new Float32Array(p,_,k);if(D>=1){for(let t=0;t<9;t++)e[t]=r[B+t]||0;if(D>=2)for(let t=0;t<15;t++)e[t+9]=r[w+t]||0}}}else{const n=new Uint16Array(e,0,be.CenterComponentCount),u=new Uint16Array(s,0,be.RotationComponentCount),m=new Uint16Array(t,0,be.ScaleComponentCount);if(u.set([fe(o.x),fe(o.y),fe(o.z),fe(o.w)]),m.set([fe(a.x),fe(a.y),fe(a.z)]),l.set(r[c],r[h],r[d]).sub(M),l.x=b(l.x,F,R),l.y=b(l.y,F,R),l.z=b(l.z,F,R),n.set([l.x,l.y,l.z]),D>0){const e=1===T?2:1,t=new(1===T?Uint16Array:Uint8Array)(i,0,k);if(D>=1){for(let e=0;e<9;e++){const s=r[B+e]||0;t[e]=1===T?fe(s):Ce(s,P,H)}const s=9*e;if(we(t.buffer,0,p,_,s),D>=2){for(let e=0;e<15;e++){const s=r[w+e]||0;t[e+9]=1===T?fe(s):Ce(s,P,H)}we(t.buffer,s,p,_+s,15*e)}}}we(n.buffer,0,p,L,6),we(m.buffer,0,p,O,6),we(u.buffer,0,p,U,8)}const Q=new Uint8ClampedArray(n,0,4);Q.set([r[y]||0,r[x]||0,r[v]||0]),Q[3]=r[I]||0,we(Q.buffer,0,p,z,4)}}();static generateFromUncompressedSplatArrays(e,t,s,n,i,o,a=[]){let l,c,h=0;for(let r=0;r<e.length;r++){const t=e[r];h=Math.max(t.sphericalHarmonicsDegree,h)}for(let r=0;r<e.length;r++){const t=e[r];for(let e=0;e<t.splats.length;e++){const s=t.splats[e];for(let e=ue.OFFSET.FRC0;e<ue.OFFSET.FRC23&&e<s.length;e++)(!l||s[e]<l)&&(l=s[e]),(!c||s[e]>c)&&(c=s[e])}}l=l||-1.5,c=c||Ae;const{bytesPerSplat:d}=be.calculateComponentStorage(s,h),p=be.CompressionLevels[s].ScaleRange,u=[],m=[];let A=0;for(let y=0;y<e.length;y++){const n=e[y],f=new ue(h);for(let e=0;e<n.splatCount;e++){const s=n.splats[e];(s[ue.OFFSET.OPACITY]||0)>=t&&f.addSplat(s)}const g=a[y]||{},S=(g.blockSizeFactor||1)*(i||be.BucketBlockSize),C=Math.ceil((g.bucketSizeFactor||1)*(o||be.BucketSize)),x=be.computeBucketsForUncompressedSplatArray(f,S,C),v=x.fullBuckets.length,I=x.partiallyFullBuckets.map((e=>e.splats.length)),B=I.length,w=[...x.fullBuckets,...x.partiallyFullBuckets],b=f.splats.length*d,E=4*B,T=s>=1?w.length*be.BucketStorageSizeBytes+E:0,D=b+T,M=new ArrayBuffer(D),F=p/(.5*S),R=new r;let P=0;for(let e=0;e<w.length;e++){const t=w[e];R.fromArray(t.center);for(let e=0;e<t.splats.length;e++){let n=t.splats[e];const r=f.splats[n],i=T+P*d;be.writeSplatDataToSectionBuffer(r,M,i,s,h,R,F,p,l,c),P++}}if(A+=P,s>=1){const e=new Uint32Array(M,0,4*I.length);for(let s=0;s<I.length;s++)e[s]=I[s];const t=new Float32Array(M,E,w.length*be.BucketStorageSizeFloats);for(let s=0;s<w.length;s++){const e=w[s],n=3*s;t[n]=e.center[0],t[n+1]=e.center[1],t[n+2]=e.center[2]}}u.push(M);const H=new ArrayBuffer(be.SectionHeaderSizeBytes);be.writeSectionHeaderToBuffer({maxSplatCount:P,splatCount:P,bucketSize:C,bucketCount:w.length,bucketBlockSize:S,compressionScaleRange:p,storageSizeBytes:D,fullBucketCount:v,partiallyFilledBucketCount:B,sphericalHarmonicsDegree:h},s,H,0),m.push(H)}let f=0;for(let r of u)f+=r.byteLength;const g=be.HeaderSizeBytes+be.SectionHeaderSizeBytes*u.length+f,S=new ArrayBuffer(g);be.writeHeaderToBuffer({versionMajor:0,versionMinor:1,maxSectionCount:u.length,sectionCount:u.length,maxSplatCount:A,splatCount:A,compressionLevel:s,sceneCenter:n,minSphericalHarmonicsCoeff:l,maxSphericalHarmonicsCoeff:c},S);let C=be.HeaderSizeBytes;for(let r of m)new Uint8Array(S,C,be.SectionHeaderSizeBytes).set(new Uint8Array(r)),C+=be.SectionHeaderSizeBytes;for(let r of u)new Uint8Array(S,C,r.byteLength).set(new Uint8Array(r)),C+=r.byteLength;return new be(S)}static computeBucketsForUncompressedSplatArray(e,t,s){let n=e.splatCount;const i=t/2,o=new r,a=new r;for(let r=0;r<n;r++){const t=e.splats[r],s=[t[ue.OFFSET.X],t[ue.OFFSET.Y],t[ue.OFFSET.Z]];(0===r||s[0]<o.x)&&(o.x=s[0]),(0===r||s[0]>a.x)&&(a.x=s[0]),(0===r||s[1]<o.y)&&(o.y=s[1]),(0===r||s[1]>a.y)&&(a.y=s[1]),(0===r||s[2]<o.z)&&(o.z=s[2]),(0===r||s[2]>a.z)&&(a.z=s[2])}const l=(new r).copy(a).sub(o),c=Math.ceil(l.y/t),h=Math.ceil(l.z/t),d=new r,p=[],u={};for(let r=0;r<n;r++){const n=e.splats[r],a=[n[ue.OFFSET.X],n[ue.OFFSET.Y],n[ue.OFFSET.Z]],l=Math.floor((a[0]-o.x)/t),m=Math.floor((a[1]-o.y)/t),A=Math.floor((a[2]-o.z)/t);d.x=l*t+o.x+i,d.y=m*t+o.y+i,d.z=A*t+o.z+i;const f=l*(c*h)+m*h+A;let g=u[f];g||(u[f]=g={splats:[],center:d.toArray()}),g.splats.push(r),g.splats.length>=s&&(p.push(g),u[f]=null)}const m=[];for(let r in u)if(u.hasOwnProperty(r)){const e=u[r];e&&m.push(e)}return{fullBuckets:p,partiallyFullBuckets:m}}static preallocateUncompressed(e,t){const s=be.CompressionLevels[0].SphericalHarmonicsDegrees[t],n=be.HeaderSizeBytes+be.SectionHeaderSizeBytes,i=n+s.BytesPerSplat*e,o=new ArrayBuffer(i);return be.writeHeaderToBuffer({versionMajor:be.CurrentMajorVersion,versionMinor:be.CurrentMinorVersion,maxSectionCount:1,sectionCount:1,maxSplatCount:e,splatCount:e,compressionLevel:0,sceneCenter:new r},o),be.writeSectionHeaderToBuffer({maxSplatCount:e,splatCount:e,bucketSize:0,bucketCount:0,bucketBlockSize:0,compressionScaleRange:0,storageSizeBytes:0,fullBucketCount:0,partiallyFilledBucketCount:0,sphericalHarmonicsDegree:t},0,o,be.HeaderSizeBytes),{splatBuffer:new be(o,!0),splatBufferDataOffsetBytes:n}}}const Ee=new Uint8Array([112,108,121,10]),Te=new Uint8Array([10,101,110,100,95,104,101,97,100,101,114,10]),De="end_header",Me=new Map([["char",Int8Array],["uchar",Uint8Array],["short",Int16Array],["ushort",Uint16Array],["int",Int32Array],["uint",Uint32Array],["float",Float32Array],["double",Float64Array]]),Fe=(e,t)=>{const s=(1<<t)-1;return(e&s)/s},Re=(e,t)=>{e.x=Fe(t>>>21,11),e.y=Fe(t>>>11,10),e.z=Fe(t,11)},Pe=(e,t,s)=>e*(1-s)+t*s,He=(e,t)=>e.properties.find((e=>e.name===t&&e.storage))?.storage;class ke{static decodeHeaderText(e){let t,s,n,r;const i=e.split("\n").filter((e=>!e.startsWith("comment ")));let o=0,a=!1;for(let h=1;h<i.length;++h){const e=i[h].split(" ");switch(e[0]){case"format":if("binary_little_endian"!==e[1])throw new Error("Unsupported ply format");break;case"element":t={name:e[1],count:parseInt(e[2],10),properties:[],storageSizeBytes:0},"chunk"===t.name?s=t:"vertex"===t.name?n=t:"sh"===t.name&&(r=t);break;case"property":{if(!Me.has(e[1]))throw new Error(`Unrecognized property data type '${e[1]}' in ply header`);const s=Me.get(e[1]),n=s.BYTES_PER_ELEMENT*t.count;"vertex"===t.name&&(o+=s.BYTES_PER_ELEMENT),t.properties.push({type:e[1],name:e[2],storage:null,byteSize:s.BYTES_PER_ELEMENT,storageSizeByes:n}),t.storageSizeBytes+=n;break}case De:a=!0;break;default:throw new Error(`Unrecognized header value '${e[0]}' in ply header`)}if(a)break}let l=0,c=0;return r&&(c=r.properties.length,r.properties.length>=45?l=3:r.properties.length>=24?l=2:r.properties.length>=9&&(l=1)),{chunkElement:s,vertexElement:n,shElement:r,bytesPerSplat:o,headerSizeBytes:e.indexOf(De)+10+1,sphericalHarmonicsDegree:l,sphericalHarmonicsPerSplat:c}}static decodeHeader(e){let t,s=new Uint8Array(e);if(s.length>=Ee.length&&!((e,t)=>{if(e.length<t.length)return!1;for(let s=0;s<t.length;++s)if(e[s]!==t[s])return!1;return!0})(s,Ee))throw new Error("Invalid PLY header");if(t=((e,t)=>{const s=e.length-t.length;let n,r;for(n=0;n<=s;++n){for(r=0;r<t.length&&e[n+r]===t[r];++r);if(r===t.length)return n}return-1})(s,Te),-1===t)throw new Error("End of PLY header not found");const n=new TextDecoder("ascii").decode(s.slice(0,t)),{chunkElement:r,vertexElement:i,shElement:o,sphericalHarmonicsDegree:a,sphericalHarmonicsPerSplat:l,bytesPerSplat:c}=ke.decodeHeaderText(n);return{headerSizeBytes:t+Te.length,bytesPerSplat:c,chunkElement:r,vertexElement:i,shElement:o,sphericalHarmonicsDegree:a,sphericalHarmonicsPerSplat:l}}static readElementData(e,t,s,n,r,i=null){let o=t instanceof DataView?t:new DataView(t);n=n||0,r=r||e.count-1;for(let a=n;a<=r;++a)for(let t=0;t<e.properties.length;++t){const n=e.properties[t],r=Me.get(n.type),l=r.BYTES_PER_ELEMENT*e.count;if(n.storage&&!(n.storage.byteLength<l)||i&&!i(n.name)||(n.storage=new r(e.count)),n.storage)switch(n.type){case"char":n.storage[a]=o.getInt8(s);break;case"uchar":n.storage[a]=o.getUint8(s);break;case"short":n.storage[a]=o.getInt16(s,!0);break;case"ushort":n.storage[a]=o.getUint16(s,!0);break;case"int":n.storage[a]=o.getInt32(s,!0);break;case"uint":n.storage[a]=o.getUint32(s,!0);break;case"float":n.storage[a]=o.getFloat32(s,!0);break;case"double":n.storage[a]=o.getFloat64(s,!0)}s+=n.byteSize}return s}static readPly(e,t=null){const s=ke.decodeHeader(e);let n=ke.readElementData(s.chunkElement,e,s.headerSizeBytes,null,null,t);return n=ke.readElementData(s.vertexElement,e,n,null,null,t),ke.readElementData(s.shElement,e,n,null,null,t),{chunkElement:s.chunkElement,vertexElement:s.vertexElement,shElement:s.shElement,sphericalHarmonicsDegree:s.sphericalHarmonicsDegree,sphericalHarmonicsPerSplat:s.sphericalHarmonicsPerSplat}}static getElementStorageArrays(e,t,s){const n={};if(t){const s=He(e,"min_r"),r=He(e,"min_g"),i=He(e,"min_b"),o=He(e,"max_r"),a=He(e,"max_g"),l=He(e,"max_b"),c=He(e,"min_x"),h=He(e,"min_y"),d=He(e,"min_z"),p=He(e,"max_x"),u=He(e,"max_y"),m=He(e,"max_z"),A=He(e,"min_scale_x"),f=He(e,"min_scale_y"),g=He(e,"min_scale_z"),S=He(e,"max_scale_x"),C=He(e,"max_scale_y"),y=He(e,"max_scale_z"),x=He(t,"packed_position"),v=He(t,"packed_rotation"),I=He(t,"packed_scale"),B=He(t,"packed_color");n.colorExtremes={minR:s,maxR:o,minG:r,maxG:a,minB:i,maxB:l},n.positionExtremes={minX:c,maxX:p,minY:h,maxY:u,minZ:d,maxZ:m},n.scaleExtremes={minScaleX:A,maxScaleX:S,minScaleY:f,maxScaleY:C,minScaleZ:g,maxScaleZ:y},n.position=x,n.rotation=v,n.scale=I,n.color=B}if(s){const e={};for(let t=0;t<45;t++){const n=`f_rest_${t}`,r=He(s,n);if(!r)break;e[n]=r}n.sh=e}return n}static decompressBaseSplat=function(){const e=new r,t=new p,s=new r,n=new m,i=ue.OFFSET;return function(r,o,a,l,c,h,d,p,u,m){m=m||ue.createSplat();const A=Math.floor((o+r)/256);var f,g;return Re(e,a[r]),((e,t)=>{const s=1/(.5*Math.sqrt(2)),n=(Fe(t>>>20,10)-.5)*s,r=(Fe(t>>>10,10)-.5)*s,i=(Fe(t,10)-.5)*s,o=Math.sqrt(1-(n*n+r*r+i*i));switch(t>>>30){case 0:e.set(o,n,r,i);break;case 1:e.set(n,o,r,i);break;case 2:e.set(n,r,o,i);break;case 3:e.set(n,r,i,o)}})(t,d[r]),Re(s,c[r]),f=n,g=u[r],f.x=Fe(g>>>24,8),f.y=Fe(g>>>16,8),f.z=Fe(g>>>8,8),f.w=Fe(g,8),m[i.X]=Pe(l.minX[A],l.maxX[A],e.x),m[i.Y]=Pe(l.minY[A],l.maxY[A],e.y),m[i.Z]=Pe(l.minZ[A],l.maxZ[A],e.z),m[i.ROTATION0]=t.x,m[i.ROTATION1]=t.y,m[i.ROTATION2]=t.z,m[i.ROTATION3]=t.w,m[i.SCALE0]=Math.exp(Pe(h.minScaleX[A],h.maxScaleX[A],s.x)),m[i.SCALE1]=Math.exp(Pe(h.minScaleY[A],h.maxScaleY[A],s.y)),m[i.SCALE2]=Math.exp(Pe(h.minScaleZ[A],h.maxScaleZ[A],s.z)),p.minR&&p.maxR?m[i.FDC0]=ne(Math.round(255*Pe(p.minR[A],p.maxR[A],n.x)),0,255):m[i.FDC0]=ne(Math.floor(255*n.x),0,255),p.minG&&p.maxG?m[i.FDC1]=ne(Math.round(255*Pe(p.minG[A],p.maxG[A],n.y)),0,255):m[i.FDC1]=ne(Math.floor(255*n.y),0,255),p.minB&&p.maxB?m[i.FDC2]=ne(Math.round(255*Pe(p.minB[A],p.maxB[A],n.z)),0,255):m[i.FDC2]=ne(Math.floor(255*n.z),0,255),m[i.OPACITY]=ne(Math.floor(255*n.w),0,255),m}}();static decompressSphericalHarmonics=function(){const e=[0,3,8,15],t=[0,1,2,9,10,11,12,13,24,25,26,27,28,29,30,3,4,5,14,15,16,17,18,31,32,33,34,35,36,37,6,7,8,19,20,21,22,23,38,39,40,41,42,43,44];return function(s,n,r,i,o){o=o||ue.createSplat();let a=e[r],l=e[i];for(let e=0;e<3;++e)for(let r=0;r<15;++r){const i=t[15*e+r];r<a&&r<l&&(o[ue.OFFSET.FRC0+i]=n[e*l+r][s]*(8/255)-4)}return o}}();static parseToUncompressedSplatBufferSection(e,t,s,n,r,i,o,a,l=null){ke.readElementData(t,i,0,s,n,l);const c=be.CompressionLevels[0].SphericalHarmonicsDegrees[0].BytesPerSplat,{positionExtremes:h,scaleExtremes:d,colorExtremes:p,position:u,rotation:m,scale:A,color:f}=ke.getElementStorageArrays(e,t),g=ue.createSplat();for(let S=s;S<=n;++S){ke.decompressBaseSplat(S,r,u,h,A,d,m,p,f,g);const e=S*c+a;be.writeSplatDataToSectionBuffer(g,o,e,0,0)}}static parseToUncompressedSplatArraySection(e,t,s,n,r,i,o,a=null){ke.readElementData(t,i,0,s,n,a);const{positionExtremes:l,scaleExtremes:c,colorExtremes:h,position:d,rotation:p,scale:u,color:m}=ke.getElementStorageArrays(e,t);for(let A=s;A<=n;++A){const e=ue.createSplat();ke.decompressBaseSplat(A,r,d,l,u,c,p,h,m,e),o.addSplat(e)}}static parseSphericalHarmonicsToUncompressedSplatArraySection(e,t,s,n,r,i,o,a,l,c=null){ke.readElementData(t,r,i,s,n,c);const{sh:h}=ke.getElementStorageArrays(e,void 0,t),d=Object.values(h);for(let p=s;p<=n;++p)ke.decompressSphericalHarmonics(p,d,o,a,l.splats[p])}static parseToUncompressedSplatArray(e,t){const{chunkElement:s,vertexElement:n,shElement:r,sphericalHarmonicsDegree:i}=ke.readPly(e);t=Math.min(t,i);const o=new ue(t),{positionExtremes:a,scaleExtremes:l,colorExtremes:c,position:h,rotation:d,scale:p,color:u}=ke.getElementStorageArrays(s,n);let m;if(t>0){const{sh:e}=ke.getElementStorageArrays(s,void 0,r);m=Object.values(e)}for(let A=0;A<n.count;++A){o.addDefaultSplat();const e=o.getSplat(o.splatCount-1);ke.decompressBaseSplat(A,0,h,a,p,l,d,c,u,e),t>0&&ke.decompressSphericalHarmonics(A,m,t,i,e)}return o}static parseToUncompressedSplatBuffer(e,t){const{chunkElement:s,vertexElement:n,shElement:r,sphericalHarmonicsDegree:i}=ke.readPly(e);t=Math.min(t,i);const{splatBuffer:o,splatBufferDataOffsetBytes:a}=be.preallocateUncompressed(n.count,t),{positionExtremes:l,scaleExtremes:c,colorExtremes:h,position:d,rotation:p,scale:u,color:m}=ke.getElementStorageArrays(s,n);let A;if(t>0){const{sh:e}=ke.getElementStorageArrays(s,void 0,r);A=Object.values(e)}const f=be.CompressionLevels[0].SphericalHarmonicsDegrees[t].BytesPerSplat,g=ue.createSplat(t);for(let S=0;S<n.count;++S){ke.decompressBaseSplat(S,0,d,l,u,c,p,h,m,g),t>0&&ke.decompressSphericalHarmonics(S,A,t,i,g);const e=S*f+a;be.writeSplatDataToSectionBuffer(g,o.bufferData,e,0,t)}return o}}const Le=0,Oe=1,Ue=2,[ze,_e,Qe,Ne,Ve,Ge,Ke]=[0,1,2,3,4,5,6],qe={double:ze,int:_e,uint:Qe,float:Ne,short:Ve,ushort:Ge,uchar:Ke},We={[ze]:8,[_e]:4,[Qe]:4,[Ne]:4,[Ve]:2,[Ge]:2,[Ke]:1};class je{static HeaderEndToken="end_header";static decodeSectionHeader(e,t,s=0){const n=[];let r=!1,i=-1,o=0,a=!1,l=null;const c=[],h=[],d=[],p={};for(let f=s;f<e.length;f++){const u=e[f].trim();if(u.startsWith("element")){if(r){i--;break}{r=!0,s=f,i=f;const e=u.split(" ");let t=0;for(let s of e){const e=s.trim();e.length>0&&(t++,2===t?l=e:3===t&&(o=parseInt(e)))}}}else if(u.startsWith("property")){const e=u.match(/(\w+)\s+(\w+)\s+(\w+)/);if(e){const s=e[2],n=e[3];d.push(n);const r=t[n];p[n]=s;const i=qe[s];void 0!==r&&(c.push(r),h[r]=i)}}if(u===je.HeaderEndToken){a=!0;break}r&&(n.push(u),i++)}const u=[];let m=0;for(let f of d){const e=p[f];if(p.hasOwnProperty(f)){const e=t[f];void 0!==e&&(u[e]=m)}m+=We[qe[e]]}const A=je.decodeSphericalHarmonicsFromSectionHeader(d,t);return{headerLines:n,headerStartLine:s,headerEndLine:i,fieldTypes:h,fieldIds:c,fieldOffsets:u,bytesPerVertex:m,vertexCount:o,dataSizeBytes:m*o,endOfHeader:a,sectionName:l,sphericalHarmonicsDegree:A.degree,sphericalHarmonicsCoefficientsPerChannel:A.coefficientsPerChannel,sphericalHarmonicsDegree1Fields:A.degree1Fields,sphericalHarmonicsDegree2Fields:A.degree2Fields}}static decodeSphericalHarmonicsFromSectionHeader(e,t){let s=0,n=0;for(let a of e)a.startsWith("f_rest")&&s++;n=s/3;let r=0;n>=3&&(r=1),n>=8&&(r=2);let i=[],o=[];for(let a=0;a<3;a++){if(r>=1)for(let e=0;e<3;e++)i.push(t["f_rest_"+(e+n*a)]);if(r>=2)for(let e=0;e<5;e++)o.push(t["f_rest_"+(e+n*a+3)])}return{degree:r,coefficientsPerChannel:n,degree1Fields:i,degree2Fields:o}}static getHeaderSectionNames(e){const t=[];for(let s of e)if(s.startsWith("element")){const e=s.split(" ");let n=0;for(let s of e){const e=s.trim();e.length>0&&(n++,2===n&&t.push(e))}}return t}static checkTextForEndHeader(e){return!!e.includes(je.HeaderEndToken)}static checkBufferForEndHeader(e,t,s,n){const r=new Uint8Array(e,Math.max(0,t-s),s),i=n.decode(r);return je.checkTextForEndHeader(i)}static extractHeaderFromBufferToText(e){const t=new TextDecoder;let s=0,n="";const r=100;for(;;){if(s+r>=e.byteLength)throw new Error("End of file reached while searching for end of header");const i=new Uint8Array(e,s,r);if(n+=t.decode(i),s+=r,je.checkBufferForEndHeader(e,s,200,t))break}return n}static readHeaderFromBuffer(e){const t=new TextDecoder;let s=0,n="";const r=100;for(;;){if(s+r>=e.byteLength)throw new Error("End of file reached while searching for end of header");const i=new Uint8Array(e,s,r);if(n+=t.decode(i),s+=r,je.checkBufferForEndHeader(e,s,200,t))break}return n}static convertHeaderTextToLines(e){const t=e.split("\n"),s=[];for(let n=0;n<t.length;n++){const e=t[n].trim();if(s.push(e),e===je.HeaderEndToken)break}return s}static determineHeaderFormatFromHeaderText(e){const t=je.convertHeaderTextToLines(e);let s=Le;for(let n=0;n<t.length;n++){const e=t[n].trim();if(e.startsWith("element chunk")||e.match(/[A-Za-z]*packed_[A-Za-z]*/))s=Ue;else if(e.startsWith("element codebook_centers"))s=Oe;else if(e===je.HeaderEndToken)break}return s}static determineHeaderFormatFromPlyBuffer(e){const t=je.extractHeaderFromBufferToText(e);return je.determineHeaderFormatFromHeaderText(t)}static readVertex(e,t,s,n,r,i,o=!0){const a=s*t.bytesPerVertex+n,l=t.fieldOffsets,c=t.fieldTypes;for(let h of r){const t=c[h];t===Ne?i[h]=e.getFloat32(a+l[h],!0):t===Ve?i[h]=e.getInt16(a+l[h],!0):t===Ge?i[h]=e.getUint16(a+l[h],!0):t===_e?i[h]=e.getInt32(a+l[h],!0):t===Qe?i[h]=e.getUint32(a+l[h],!0):t===Ke&&(i[h]=o?e.getUint8(a+l[h])/255:e.getUint8(a+l[h]))}}}const Ye=["scale_0","scale_1","scale_2","rot_0","rot_1","rot_2","rot_3","x","y","z","f_dc_0","f_dc_1","f_dc_2","opacity","red","green","blue","f_rest_0"],Xe=Ye.map(((e,t)=>t)),[Je,Ze,$e,et,tt,st,nt,rt,it,ot,at,lt,ct,ht,dt,pt,ut,mt]=Xe;class At{static decodeHeaderLines(e){let t=0;e.forEach((e=>{e.includes("f_rest_")&&t++}));let s=0;t>=45?s=45:t>=24?s=24:t>=9&&(s=9);let n=Array.from(Array(Math.max(s-1,0))).map(((e,t)=>`f_rest_${t+1}`));const r=[...Ye,...n],i=r.map(((e,t)=>t)),o=i.reduce(((e,t)=>(e[r[t]]=t,e)),{}),a=je.decodeSectionHeader(e,o,0);return a.splatCount=a.vertexCount,a.bytesPerSplat=a.bytesPerVertex,a.fieldsToReadIndexes=i,a}static decodeHeaderText(e){const t=je.convertHeaderTextToLines(e),s=At.decodeHeaderLines(t);return s.headerText=e,s.headerSizeBytes=e.indexOf(je.HeaderEndToken)+je.HeaderEndToken.length+1,s}static decodeHeaderFromBuffer(e){const t=je.readHeaderFromBuffer(e);return At.decodeHeaderText(t)}static findSplatData(e,t){return new DataView(e,t.headerSizeBytes)}static parseToUncompressedSplatBufferSection(e,t,s,n,r,i,o,a=0){a=Math.min(a,e.sphericalHarmonicsDegree);const l=be.CompressionLevels[0].SphericalHarmonicsDegrees[a].BytesPerSplat;for(let c=t;c<=s;c++){const t=At.parseToUncompressedSplat(n,c,e,r,a),s=c*l+o;be.writeSplatDataToSectionBuffer(t,i,s,0,a)}}static parseToUncompressedSplatArraySection(e,t,s,n,r,i,o=0){o=Math.min(o,e.sphericalHarmonicsDegree);for(let a=t;a<=s;a++){const t=At.parseToUncompressedSplat(n,a,e,r,o);i.addSplat(t)}}static decodeSectionSplatData(e,t,s,n,r=!0){if(n=Math.min(n,s.sphericalHarmonicsDegree),r){const r=new ue(n);for(let i=0;i<t;i++){const t=At.parseToUncompressedSplat(e,i,s,0,n);r.addSplat(t)}return r}{const{splatBuffer:r,splatBufferDataOffsetBytes:i}=be.preallocateUncompressed(t,n);return At.parseToUncompressedSplatBufferSection(s,0,t-1,e,0,r.bufferData,i,n),r}}static parseToUncompressedSplat=function(){let e=[];const t=new p,s=ue.OFFSET.X,n=ue.OFFSET.Y,r=ue.OFFSET.Z,i=ue.OFFSET.SCALE0,o=ue.OFFSET.SCALE1,a=ue.OFFSET.SCALE2,l=ue.OFFSET.ROTATION0,c=ue.OFFSET.ROTATION1,h=ue.OFFSET.ROTATION2,d=ue.OFFSET.ROTATION3,u=ue.OFFSET.FDC0,m=ue.OFFSET.FDC1,A=ue.OFFSET.FDC2,f=ue.OFFSET.OPACITY,g=[];for(let p=0;p<45;p++)g[p]=ue.OFFSET.FRC0+p;return function(p,S,C,y=0,x=0){x=Math.min(x,C.sphericalHarmonicsDegree),At.readSplat(p,C,S,y,e);const v=ue.createSplat(x);if(void 0!==e[Je]?(v[i]=Math.exp(e[Je]),v[o]=Math.exp(e[Ze]),v[a]=Math.exp(e[$e])):(v[i]=.01,v[o]=.01,v[a]=.01),void 0!==e[at]){const t=.28209479177387814;v[u]=255*(.5+t*e[at]),v[m]=255*(.5+t*e[lt]),v[A]=255*(.5+t*e[ct])}else void 0!==e[dt]?(v[u]=255*e[dt],v[m]=255*e[pt],v[A]=255*e[ut]):(v[u]=0,v[m]=0,v[A]=0);if(void 0!==e[ht]&&(v[f]=1/(1+Math.exp(-e[ht]))*255),v[u]=ne(Math.floor(v[u]),0,255),v[m]=ne(Math.floor(v[m]),0,255),v[A]=ne(Math.floor(v[A]),0,255),v[f]=ne(Math.floor(v[f]),0,255),x>=1&&void 0!==e[mt]){for(let t=0;t<9;t++)v[g[t]]=e[C.sphericalHarmonicsDegree1Fields[t]];if(x>=2)for(let t=0;t<15;t++)v[g[9+t]]=e[C.sphericalHarmonicsDegree2Fields[t]]}return t.set(e[et],e[tt],e[st],e[nt]),t.normalize(),v[l]=t.x,v[c]=t.y,v[h]=t.z,v[d]=t.w,v[s]=e[rt],v[n]=e[it],v[r]=e[ot],v}}();static readSplat(e,t,s,n,r){return je.readVertex(e,t,s,n,t.fieldsToReadIndexes,r,!0)}static parseToUncompressedSplatArray(e,t=0){const{header:s,splatCount:n,splatData:r}=ft(e);return At.decodeSectionSplatData(r,n,s,t,!0)}static parseToUncompressedSplatBuffer(e,t=0){const{header:s,splatCount:n,splatData:r}=ft(e);return At.decodeSectionSplatData(r,n,s,t,!1)}}function ft(e){const t=At.decodeHeaderFromBuffer(e);return{header:t,splatCount:t.splatCount,splatData:At.findSplatData(e,t)}}const gt=["features_dc","features_rest_0","features_rest_1","features_rest_2","features_rest_3","features_rest_4","features_rest_5","features_rest_6","features_rest_7","features_rest_8","features_rest_9","features_rest_10","features_rest_11","features_rest_12","features_rest_13","features_rest_14","opacity","scaling","rotation_re","rotation_im"],St=gt.map(((e,t)=>t)),[Ct,yt,xt,vt,It,Bt,wt]=[0,1,4,16,17,18,19],bt=["scale_0","scale_1","scale_2","rot_0","rot_1","rot_2","rot_3","x","y","z","f_dc_0","f_dc_1","f_dc_2","opacity","red","green","blue","f_rest_0","f_rest_1","f_rest_2","f_rest_3","f_rest_4","f_rest_5","f_rest_6","f_rest_7","f_rest_8","f_rest_9","f_rest_10","f_rest_11","f_rest_12","f_rest_13","f_rest_14","f_rest_15","f_rest_16","f_rest_17","f_rest_18","f_rest_19","f_rest_20","f_rest_21","f_rest_22","f_rest_23","f_rest_24","f_rest_25","f_rest_26","f_rest_27","f_rest_28","f_rest_29","f_rest_30","f_rest_31","f_rest_32","f_rest_33","f_rest_34","f_rest_35","f_rest_36","f_rest_37","f_rest_38","f_rest_39","f_rest_40","f_rest_41","f_rest_42","f_rest_43","f_rest_44","f_rest_45"],Et=bt.map(((e,t)=>t)),[Tt,Dt,Mt,Ft,Rt,Pt,Ht,kt,Lt,Ot,Ut,zt,_t,Qt]=Et,Nt=Ut,Vt=zt,Gt=_t,Kt=e=>{const t=(31744&e)>>10,s=1023&e;return(e>>15?-1:1)*(t?31===t?s?NaN:1/0:Math.pow(2,t-15)*(1+s/1024):s/1024*6103515625e-14)};class qt{static decodeSectionHeadersFromHeaderLines(e){const t=Et.reduce(((e,t)=>(e[bt[t]]=t,e)),{}),s=St.reduce(((e,t)=>(e[gt[t]]=t,e)),{}),n=je.getHeaderSectionNames(e);let r;for(let c=0;c<n.length;c++){"codebook_centers"===n[c]&&(r=c)}let i=0,o=!1;const a=[];let l=0;for(;!o;){let n;n=l===r?je.decodeSectionHeader(e,s,i):je.decodeSectionHeader(e,t,i),o=n.endOfHeader,i=n.headerEndLine+1,o||(n.splatCount=n.vertexCount,n.bytesPerSplat=n.bytesPerVertex),a.push(n),l++}return a}static decodeSectionHeadersFromHeaderText(e){const t=je.convertHeaderTextToLines(e);return qt.decodeSectionHeadersFromHeaderLines(t)}static getSplatCountFromSectionHeaders(e){let t=0;for(let s of e)"codebook_centers"!==s.sectionName&&(t+=s.vertexCount);return t}static decodeHeaderFromHeaderText(e){const t=e.indexOf(je.HeaderEndToken)+je.HeaderEndToken.length+1,s=qt.decodeSectionHeadersFromHeaderText(e);return{headerSizeBytes:t,sectionHeaders:s,splatCount:qt.getSplatCountFromSectionHeaders(s)}}static decodeHeaderFromBuffer(e){const t=je.readHeaderFromBuffer(e);return qt.decodeHeaderFromHeaderText(t)}static findVertexData(e,t,s){let n=t.headerSizeBytes;for(let r=0;r<s&&r<t.sectionHeaders.length;r++){n+=t.sectionHeaders[r].dataSizeBytes}return new DataView(e,n,t.sectionHeaders[s].dataSizeBytes)}static decodeCodeBook(e,t){const s=[],n=[];for(let r=0;r<t.vertexCount;r++){je.readVertex(e,t,r,0,St,s);for(let e of St){const t=St[e];let r=n[t];r||(n[t]=r=[]),r.push(s[e])}}for(let r=0;r<n.length;r++){const e=n[r],t=.28209479177387814;for(let s=0;s<e.length;s++){const n=Kt(e[s]);e[s]=r===vt?Math.round(1/(1+Math.exp(-n))*255):r===Ct?Math.round(255*(.5+t*n)):r===It?Math.exp(n):n}}return n}static decodeSectionSplatData(e,t,s,n,r){r=Math.min(r,s.sphericalHarmonicsDegree);const i=new ue(r);for(let o=0;o<t;o++){const t=qt.parseToUncompressedSplat(e,o,s,n,0,r);i.addSplat(t)}return i}static parseToUncompressedSplat=function(){let e=[];const t=new p,s=ue.OFFSET.X,n=ue.OFFSET.Y,r=ue.OFFSET.Z,i=ue.OFFSET.SCALE0,o=ue.OFFSET.SCALE1,a=ue.OFFSET.SCALE2,l=ue.OFFSET.ROTATION0,c=ue.OFFSET.ROTATION1,h=ue.OFFSET.ROTATION2,d=ue.OFFSET.ROTATION3,u=ue.OFFSET.FDC0,m=ue.OFFSET.FDC1,A=ue.OFFSET.FDC2,f=ue.OFFSET.OPACITY,g=[];for(let p=0;p<45;p++)g[p]=ue.OFFSET.FRC0+p;return function(p,S,C,y,x=0,v=0){v=Math.min(v,C.sphericalHarmonicsDegree),qt.readSplat(p,C,S,x,e);const I=ue.createSplat(v);if(void 0!==e[Tt]?(I[i]=y[It][e[Tt]],I[o]=y[It][e[Dt]],I[a]=y[It][e[Mt]]):(I[i]=.01,I[o]=.01,I[a]=.01),void 0!==e[Ut]?(I[u]=y[Ct][e[Ut]],I[m]=y[Ct][e[zt]],I[A]=y[Ct][e[_t]]):void 0!==e[Nt]?(I[u]=255*e[Nt],I[m]=255*e[Vt],I[A]=255*e[Gt]):(I[u]=0,I[m]=0,I[A]=0),void 0!==e[Qt]&&(I[f]=y[vt][e[Qt]]),I[u]=ne(Math.floor(I[u]),0,255),I[m]=ne(Math.floor(I[m]),0,255),I[A]=ne(Math.floor(I[A]),0,255),I[f]=ne(Math.floor(I[f]),0,255),v>=1&&C.sphericalHarmonicsDegree>=1){for(let t=0;t<9;t++){const s=y[yt+t%3];I[g[t]]=s[e[C.sphericalHarmonicsDegree1Fields[t]]]}if(v>=2&&C.sphericalHarmonicsDegree>=2)for(let t=0;t<15;t++){const s=y[xt+t%5];I[g[9+t]]=s[e[C.sphericalHarmonicsDegree2Fields[t]]]}}const B=y[Bt][e[Ft]],w=y[wt][e[Rt]],b=y[wt][e[Pt]],E=y[wt][e[Ht]];return t.set(B,w,b,E),t.normalize(),I[l]=t.x,I[c]=t.y,I[h]=t.z,I[d]=t.w,I[s]=Kt(e[kt]),I[n]=Kt(e[Lt]),I[r]=Kt(e[Ot]),I}}();static readSplat(e,t,s,n,r){return je.readVertex(e,t,s,n,Et,r,!1)}static parseToUncompressedSplatArray(e,t=0){const s=[],n=qt.decodeHeaderFromBuffer(e,t);let r;for(let o=0;o<n.sectionHeaders.length;o++){const t=n.sectionHeaders[o];if("codebook_centers"===t.sectionName){const s=qt.findVertexData(e,n,o);r=qt.decodeCodeBook(s,t)}}for(let o=0;o<n.sectionHeaders.length;o++){const i=n.sectionHeaders[o];if("codebook_centers"!==i.sectionName){const a=i.vertexCount,l=qt.findVertexData(e,n,o),c=qt.decodeSectionSplatData(l,a,i,r,t);s.push(c)}}const i=new ue(t);for(let o of s)for(let e of o.splats)i.addSplat(e);return i}}class Wt{static parseToUncompressedSplatArray(e,t=0){const s=je.determineHeaderFormatFromPlyBuffer(e);return s===Ue?ke.parseToUncompressedSplatArray(e,t):s===Le?At.parseToUncompressedSplatArray(e,t):s===Oe?qt.parseToUncompressedSplatArray(e,t):void 0}static parseToUncompressedSplatBuffer(e,t=0){const s=je.determineHeaderFormatFromPlyBuffer(e);if(s===Ue)return ke.parseToUncompressedSplatBuffer(e,t);if(s===Le)return At.parseToUncompressedSplatBuffer(e,t);if(s===Oe)throw new Error("parseToUncompressedSplatBuffer() is not implemented for INRIA V2 PLY files")}}class jt{constructor(e,t,s,n){this.sectionCount=e,this.sectionFilters=t,this.groupingParameters=s,this.partitionGenerator=n}partitionUncompressedSplatArray(e){let t,s,n;if(this.partitionGenerator){const r=this.partitionGenerator(e);t=r.groupingParameters,s=r.sectionCount,n=r.sectionFilters}else t=this.groupingParameters,s=this.sectionCount,n=this.sectionFilters;const r=[];for(let i=0;i<s;i++){const t=new ue(e.sphericalHarmonicsDegree),s=n[i];for(let n=0;n<e.splatCount;n++)s(n)&&t.addSplat(e.splats[n]);r.push(t)}return{splatArrays:r,parameters:t}}static getStandardPartitioner(e=0,t=new r,s=be.BucketBlockSize,n=be.BucketSize){return new jt(void 0,void 0,void 0,(i=>{const o=ue.OFFSET.X,a=ue.OFFSET.Y,l=ue.OFFSET.Z;e<=0&&(e=i.splatCount);const c=new r,h=.5;i.splats.forEach((e=>{var s;c.set(e[o],e[a],e[l]).sub(t),(s=c).x=Math.floor(s.x/h)*h,s.y=Math.floor(s.y/h)*h,s.z=Math.floor(s.z/h)*h,e.centerDist=c.lengthSq()})),i.splats.sort(((e,t)=>e.centerDist>t.centerDist?1:-1));const d=[],p=[];e=Math.min(i.splatCount,e);const u=Math.ceil(i.splatCount/e);let m=0;for(let t=0;t<u;t++){let t=m;d.push((s=>s>=t&&s<t+e)),p.push({blocksSize:s,bucketSize:n}),m+=e}return{sectionCount:d.length,sectionFilters:d,groupingParameters:p}}))}}class Yt{constructor(e,t,s,n,i,o,a){this.splatPartitioner=e,this.alphaRemovalThreshold=t,this.compressionLevel=s,this.sectionSize=n,this.sceneCenter=i?(new r).copy(i):void 0,this.blockSize=o,this.bucketSize=a}generateFromUncompressedSplatArray(e){const t=this.splatPartitioner.partitionUncompressedSplatArray(e);return be.generateFromUncompressedSplatArrays(t.splatArrays,this.alphaRemovalThreshold,this.compressionLevel,this.sceneCenter,this.blockSize,this.bucketSize,t.parameters)}static getStandardGenerator(e=1,t=1,s=0,n=new r,i=be.BucketBlockSize,o=be.BucketSize){const a=jt.getStandardPartitioner(s,n,i,o);return new Yt(a,e,t,s,n,i,o)}}const Xt=0,Jt=1,Zt=2;class $t extends Error{constructor(e){super(e)}}const es=0,ts=1,ss=2;function ns(e,t){let s=0;for(let r of e)s+=r.sizeBytes;(!t||t.byteLength<s)&&(t=new ArrayBuffer(s));let n=0;for(let r of e)new Uint8Array(t,n,r.sizeBytes).set(r.data),n+=r.sizeBytes;return t}function rs(e,t,s,n,i,o,a,l){if(t){return Yt.getStandardGenerator(s,n,i,o,a,l).generateFromUncompressedSplatArray(e)}return be.generateFromUncompressedSplatArrays([e],s,0,new r)}class is{static loadFromURL(e,t,s,n,i,o,a=!0,l=0,c,h,d,p,u){let m;m=s||a?a?ts:es:ss;const A=me.ProgressiveLoadSectionSize,f=be.HeaderSizeBytes+be.SectionHeaderSizeBytes;let g,S,C,y,x,v=0,I=0,B=0,w=!1,b=!1,E=!1;const T=le();let D,M=0,F=0,R=0,P=0,H="",k=null,L=[];const O=new TextDecoder;return t&&t(0,"0%",Xt),se(e,((e,s,i)=>{const o=e>=100;if(i&&(L.push({data:i,sizeBytes:i.byteLength,startBytes:R,endBytes:R+i.byteLength}),R+=i.byteLength),m===ss)o&&T.resolve(L);else{if(w){if(g===Ue&&!b){const e=k.headerSizeBytes+k.chunkElement.storageSizeBytes;x=ns(L,x),x.byteLength>=e&&(ke.readElementData(k.chunkElement,x,k.headerSizeBytes),M=e,F=e,b=!0)}}else if(H+=O.decode(i),je.checkTextForEndHeader(H)){if(g=je.determineHeaderFormatFromHeaderText(H),g===Le)k=At.decodeHeaderText(H),l=Math.min(l,k.sphericalHarmonicsDegree),v=k.splatCount,b=!0,P=k.headerSizeBytes+k.bytesPerSplat*v;else{if(g!==Ue){if(m===es)throw new $t("PlyLoader.loadFromURL() -> Selected PLY format cannot be progressively loaded.");return void(m=ss)}if(k=ke.decodeHeaderText(H),l=Math.min(l,k.sphericalHarmonicsDegree),m===es&&l>0)throw new $t("PlyLoader.loadFromURL() -> Selected PLY format has spherical harmonics data that cannot be progressively loaded.");v=k.vertexElement.count,P=k.headerSizeBytes+k.bytesPerSplat*v+k.chunkElement.storageSizeBytes}if(m===es){const e=be.CompressionLevels[0].SphericalHarmonicsDegrees[l],t=f+e.BytesPerSplat*v;C=new ArrayBuffer(t),be.writeHeaderToBuffer({versionMajor:be.CurrentMajorVersion,versionMinor:be.CurrentMinorVersion,maxSectionCount:1,sectionCount:1,maxSplatCount:v,splatCount:0,compressionLevel:0,sceneCenter:new r},C)}else D=new ue(l);M=k.headerSizeBytes,F=k.headerSizeBytes,w=!0}if(w&&b&&L.length>0){S=ns(L,S);if(R-M>A||R>=P&&!E||o){const e=E?k.sphericalHarmonicsPerSplat:k.bytesPerSplat,t=(E?R:Math.min(P,R))-F,s=Math.floor(t/e),n=s*e,r=R-F-n,i=F-L[0].startBytes,o=new DataView(S,i,n);if(E)g===Ue&&m===ts&&(ke.parseSphericalHarmonicsToUncompressedSplatArraySection(k.chunkElement,k.shElement,B,B+s-1,o,0,l,k.sphericalHarmonicsDegree,D),B+=s);else{if(m===es){const e=be.CompressionLevels[0].SphericalHarmonicsDegrees[l],t=I*e.BytesPerSplat+f;g===Ue?ke.parseToUncompressedSplatBufferSection(k.chunkElement,k.vertexElement,0,s-1,I,o,C,t):At.parseToUncompressedSplatBufferSection(k,0,s-1,o,0,C,t,l)}else g===Ue?ke.parseToUncompressedSplatArraySection(k.chunkElement,k.vertexElement,0,s-1,I,o,D):At.parseToUncompressedSplatArraySection(k,0,s-1,o,0,D,l);I+=s,m===es&&(y||(be.writeSectionHeaderToBuffer({maxSplatCount:v,splatCount:I,bucketSize:0,bucketCount:0,bucketBlockSize:0,compressionScaleRange:0,storageSizeBytes:0,fullBucketCount:0,partiallyFilledBucketCount:0,sphericalHarmonicsDegree:l},0,C,be.HeaderSizeBytes),y=new be(C,!1)),y.updateLoadedCounts(1,I)),R>=P&&(E=!0)}if(0===r)L=[];else{let e=[],t=0;for(let s=L.length-1;s>=0;s--){const n=L[s];if(t+=n.sizeBytes,e.unshift(n),t>=r)break}L=e}M+=A,F+=n}}n&&y&&n(y,o),o&&(m===es?T.resolve(y):T.resolve(D))}t&&t(e,s,Xt)}),!1,c).then((()=>(t&&t(0,"0%",Jt),T.promise.then((e=>{if(t&&t(100,"100%",Zt),m===ss){const e=L.map((e=>e.data));return new Blob(e).arrayBuffer().then((e=>is.loadFromFileData(e,i,o,a,l,h,d,p,u)))}return m===es?e:oe((()=>rs(e,a,i,o,h,d,p,u)))})))))}static loadFromFileData(e,t,s,n,r=0,i,o,a,l){return n?oe((()=>Wt.parseToUncompressedSplatArray(e,r))).then((e=>rs(e,n,t,s,i,o,a,l))):oe((()=>Wt.parseToUncompressedSplatBuffer(e,r)))}}async function os(e){try{const t=(e=>new ReadableStream({async start(t){t.enqueue(e),t.close()}}))(e);if(!t)throw new Error("Failed to create stream from data");return await async function(e){const t=e.pipeThrough(new DecompressionStream("gzip")),s=new Response(t),n=await s.arrayBuffer();return new Uint8Array(n)}(t)}catch(t){throw console.error("Error decompressing gzipped data:",t),t}}function as(e){const t=e>>10&31,s=1023&e,n=1===(e>>15&1)?-1:1;return 0===t?n*Math.pow(2,-14)*s/1024:31===t?0!==s?NaN:n*(1/0):n*Math.pow(2,t-15)*(1+s/1024)}function ls(e){switch(e){case 0:return 0;case 1:return 3;case 2:return 8;case 3:return 15;default:return console.error(`[SPZ: ERROR] Unsupported SH degree: ${e}`),0}}const cs=function(){let e=[];const t=new p,s=ue.OFFSET.X,n=ue.OFFSET.Y,r=ue.OFFSET.Z,i=ue.OFFSET.SCALE0,o=ue.OFFSET.SCALE1,a=ue.OFFSET.SCALE2,l=ue.OFFSET.ROTATION0,c=ue.OFFSET.ROTATION1,h=ue.OFFSET.ROTATION2,d=ue.OFFSET.ROTATION3,u=ue.OFFSET.FDC0,m=ue.OFFSET.FDC1,A=ue.OFFSET.FDC2,f=ue.OFFSET.OPACITY,g=[ls(0),ls(1),ls(2),ls(3)],S=[0,1,2,9,10,11,12,13,24,25,26,27,28,29,30,3,4,5,14,15,16,17,18,31,32,33,34,35,36,37,6,7,8,19,20,21,22,23,38,39,40,41,42,43,44];return function(p,C,y){y=Math.min(C,y);const x=ue.createSplat(y);void 0!==p.scale[0]?(x[i]=p.scale[0],x[o]=p.scale[1],x[a]=p.scale[2]):(x[i]=.01,x[o]=.01,x[a]=.01),void 0!==p.color[0]?(x[u]=p.color[0],x[m]=p.color[1],x[A]=p.color[2]):void 0!==e[RED]?(x[u]=255*e[RED],x[m]=255*e[GREEN],x[A]=255*e[BLUE]):(x[u]=0,x[m]=0,x[A]=0),void 0!==p.alpha&&(x[f]=p.alpha),x[u]=ne(Math.floor(x[u]),0,255),x[m]=ne(Math.floor(x[m]),0,255),x[A]=ne(Math.floor(x[A]),0,255),x[f]=ne(Math.floor(x[f]),0,255);let v=g[y],I=g[C];for(let e=0;e<3;++e)for(let t=0;t<15;++t){const s=S[15*e+t];t<v&&t<I&&(x[ue.OFFSET.FRC0+s]=p.sh[e*I+t])}return t.set(p.rotation[3],p.rotation[0],p.rotation[1],p.rotation[2]),t.normalize(),x[l]=t.x,x[c]=t.y,x[h]=t.z,x[d]=t.w,x[s]=p.position[0],x[n]=p.position[1],x[r]=p.position[2],x}}();function hs(e,t,s,n,r){t=Math.min(t,e.shDegree);const i=e.numPoints,o=ls(e.shDegree),a=e.positions.length===3*i*2;if(!function(e,t,s,n){return e.positions.length===3*t*(n?2:3)&&e.scales.length===3*t&&e.rotations.length===3*t&&e.alphas.length===t&&e.colors.length===3*t&&e.sh.length===t*s*3}(e,i,o,a))return null;const l={position:[],scale:[],rotation:[],alpha:void 0,color:[],sh:[]};let c;a&&(c=new Uint16Array(e.positions.buffer,e.positions.byteOffset,3*i));const h=1/(1<<e.fractionalBits),d=ls(e.shDegree);for(let p=0;p<i;p++){if(a)for(let e=0;e<3;e++)l.position[e]=as(c[3*p+e]);else for(let t=0;t<3;t++){const s=9*p+3*t;let n=e.positions[s];n|=e.positions[s+1]<<8,n|=e.positions[s+2]<<16,n|=8388608&n?4278190080:0,l.position[t]=n*h}for(let t=0;t<3;t++)l.scale[t]=Math.exp(e.scales[3*p+t]/16-10);const i=e.rotations.subarray(3*p,3*p+3),o=[i[0]/127.5-1,i[1]/127.5-1,i[2]/127.5-1];l.rotation[0]=o[0],l.rotation[1]=o[1],l.rotation[2]=o[2];const u=o[0]*o[0]+o[1]*o[1]+o[2]*o[2];l.rotation[3]=Math.sqrt(Math.max(0,1-u)),l.alpha=Math.floor(e.alphas[p]);for(let t=0;t<3;t++)l.color[t]=Math.floor(255*((e.colors[3*p+t]/255-.5)/.15*.28209479177387814+.5));for(let t=0;t<3;t++)for(let s=0;s<d;s++)l.sh[t*d+s]=(e.sh[3*d*p+3*s+t]-128)/128;const m=cs(l,e.shDegree,t);if(s){const e=p*be.CompressionLevels[0].SphericalHarmonicsDegrees[t].BytesPerSplat+r;be.writeSplatDataToSectionBuffer(m,n,e,0,t)}else n.addSplat(m)}}async function ds(e){try{return function(e){const t=new DataView(e);let s=0;const n={magic:t.getUint32(s,!0),version:t.getUint32(s+4,!0),numPoints:t.getUint32(s+8,!0),shDegree:t.getUint8(s+12),fractionalBits:t.getUint8(s+13),flags:t.getUint8(s+14),reserved:t.getUint8(s+15)};if(s+=16,1347635022!==n.magic)return console.error("[SPZ ERROR] deserializePackedGaussians: header not found"),null;if(n.version<1||n.version>2)return console.error(`[SPZ ERROR] deserializePackedGaussians: version not supported: ${n.version}`),null;if(n.numPoints>1e7)return console.error(`[SPZ ERROR] deserializePackedGaussians: Too many points: ${n.numPoints}`),null;if(n.shDegree>3)return console.error(`[SPZ ERROR] deserializePackedGaussians: Unsupported SH degree: ${n.shDegree}`),null;const r=n.numPoints,i=ls(n.shDegree),o={numPoints:r,shDegree:n.shDegree,fractionalBits:n.fractionalBits,antialiased:!!(1&n.flags),positions:new Uint8Array(3*r*(1===n.version?2:3)),scales:new Uint8Array(3*r),rotations:new Uint8Array(3*r),alphas:new Uint8Array(r),colors:new Uint8Array(3*r),sh:new Uint8Array(r*i*3)};try{const t=new Uint8Array(e);let n=o.positions.length,r=s;if(o.positions.set(t.slice(r,r+n)),r+=n,o.alphas.set(t.slice(r,r+o.alphas.length)),r+=o.alphas.length,o.colors.set(t.slice(r,r+o.colors.length)),r+=o.colors.length,o.scales.set(t.slice(r,r+o.scales.length)),r+=o.scales.length,o.rotations.set(t.slice(r,r+o.rotations.length)),r+=o.rotations.length,o.sh.set(t.slice(r,r+o.sh.length)),r+o.sh.length!==e.byteLength)return console.error("[SPZ ERROR] deserializePackedGaussians: incorrect buffer size"),null}catch(a){return console.error("[SPZ ERROR] deserializePackedGaussians: read error",a),null}return o}((await os(e)).buffer)}catch(t){return console.error("[SPZ ERROR] loadSpzPacked: decompression error",t),null}}class ps{static loadFromURL(e,t,s,n,r=!0,i=0,o,a,l,c,h){return t&&t(0,"0%",Xt),se(e,t,!0,o).then((e=>(t&&t(0,"0%",Jt),ps.loadFromFileData(e,s,n,r,i,a,l,c,h))))}static async loadFromFileData(e,t,s,n,r=0,i,o,a,l){await oe();const c=await ds(e);r=Math.min(c.shDegree,r);const h=new ue(r);if(n){hs(c,r,!1,h,0);return Yt.getStandardGenerator(t,s,i,o,a,l).generateFromUncompressedSplatArray(h)}{const{splatBuffer:e,splatBufferDataOffsetBytes:t}=be.preallocateUncompressed(c.numPoints,r);return hs(c,r,!0,e.bufferData,t),e}}}class us{static RowSizeBytes=32;static CenterSizeBytes=12;static ScaleSizeBytes=12;static RotationSizeBytes=4;static ColorSizeBytes=4;static parseToUncompressedSplatBufferSection(e,t,s,n,r,i){const o=be.CompressionLevels[0].BytesPerCenter,a=be.CompressionLevels[0].BytesPerScale,l=be.CompressionLevels[0].BytesPerRotation,c=be.CompressionLevels[0].SphericalHarmonicsDegrees[0].BytesPerSplat;for(let h=e;h<=t;h++){const e=h*us.RowSizeBytes+n,t=new Float32Array(s,e,3),d=new Float32Array(s,e+us.CenterSizeBytes,3),u=new Uint8Array(s,e+us.CenterSizeBytes+us.ScaleSizeBytes,4),m=new Uint8Array(s,e+us.CenterSizeBytes+us.ScaleSizeBytes+us.RotationSizeBytes,4),A=new p((m[1]-128)/128,(m[2]-128)/128,(m[3]-128)/128,(m[0]-128)/128);A.normalize();const f=h*c+i,g=new Float32Array(r,f,3),S=new Float32Array(r,f+o,3),C=new Float32Array(r,f+o+a,4),y=new Uint8Array(r,f+o+a+l,4);g[0]=t[0],g[1]=t[1],g[2]=t[2],S[0]=d[0],S[1]=d[1],S[2]=d[2],C[0]=A.w,C[1]=A.x,C[2]=A.y,C[3]=A.z,y[0]=u[0],y[1]=u[1],y[2]=u[2],y[3]=u[3]}}static parseToUncompressedSplatArraySection(e,t,s,n,r){for(let i=e;i<=t;i++){const e=i*us.RowSizeBytes+n,t=new Float32Array(s,e,3),o=new Float32Array(s,e+us.CenterSizeBytes,3),a=new Uint8Array(s,e+us.CenterSizeBytes+us.ScaleSizeBytes,4),l=new Uint8Array(s,e+us.CenterSizeBytes+us.ScaleSizeBytes+us.RotationSizeBytes,4),c=new p((l[1]-128)/128,(l[2]-128)/128,(l[3]-128)/128,(l[0]-128)/128);c.normalize(),r.addSplatFromComonents(t[0],t[1],t[2],o[0],o[1],o[2],c.w,c.x,c.y,c.z,a[0],a[1],a[2],a[3])}}static parseStandardSplatToUncompressedSplatArray(e){const t=e.byteLength/us.RowSizeBytes,s=new ue;for(let n=0;n<t;n++){const t=n*us.RowSizeBytes,r=new Float32Array(e,t,3),i=new Float32Array(e,t+us.CenterSizeBytes,3),o=new Uint8Array(e,t+us.CenterSizeBytes+us.ScaleSizeBytes,4),a=new Uint8Array(e,t+us.CenterSizeBytes+us.ScaleSizeBytes+us.ColorSizeBytes,4),l=new p((a[1]-128)/128,(a[2]-128)/128,(a[3]-128)/128,(a[0]-128)/128);l.normalize(),s.addSplatFromComonents(r[0],r[1],r[2],i[0],i[1],i[2],l.w,l.x,l.y,l.z,o[0],o[1],o[2],o[3])}return s}}function ms(e,t,s,n,i,o,a,l){if(t){return Yt.getStandardGenerator(s,n,i,o,a,l).generateFromUncompressedSplatArray(e)}return be.generateFromUncompressedSplatArrays([e],s,0,new r)}class As{static loadFromURL(e,t,s,n,i,o,a=!0,l,c,h,d,p){let u=s?es:ts;a&&(u=ts);const m=be.HeaderSizeBytes+be.SectionHeaderSizeBytes,A=me.ProgressiveLoadSectionSize;let f,g,S,C,y=0,x=0;const v=le();let I=0,B=0,w=[];return t&&t(0,"0%",Xt),se(e,((e,i,o,a)=>{const l=e>=100;if(o&&w.push(o),u!==ss)if(a){if(!f){y=a/us.RowSizeBytes,f=new ArrayBuffer(a);const e=be.CompressionLevels[0].SphericalHarmonicsDegrees[0].BytesPerSplat;u===es?(g=new ArrayBuffer(m+e*y),be.writeHeaderToBuffer({versionMajor:be.CurrentMajorVersion,versionMinor:be.CurrentMinorVersion,maxSectionCount:1,sectionCount:1,maxSplatCount:y,splatCount:x,compressionLevel:0,sceneCenter:new r},g)):C=new ue(0)}if(o){new Uint8Array(f,B,o.byteLength).set(new Uint8Array(o)),B+=o.byteLength;const e=B-I;if(e>A||l){const t=(l?e:A)/us.RowSizeBytes,s=x+t;u===es?us.parseToUncompressedSplatBufferSection(x,s-1,f,0,g,m):us.parseToUncompressedSplatArraySection(x,s-1,f,0,C),x=s,u===es&&(S||(be.writeSectionHeaderToBuffer({maxSplatCount:y,splatCount:x,bucketSize:0,bucketCount:0,bucketBlockSize:0,compressionScaleRange:0,storageSizeBytes:0,fullBucketCount:0,partiallyFilledBucketCount:0},0,g,be.HeaderSizeBytes),S=new be(g,!1)),S.updateLoadedCounts(1,x),n&&n(S,l)),I+=A}}l&&(u===es?v.resolve(S):v.resolve(C)),t&&t(e,i,Xt)}else{if(s)throw new $t("Cannon directly load .splat because no file size info is available.");u=ss}else l&&v.resolve(w)}),!1,l).then((()=>(t&&t(0,"0%",Jt),v.promise.then((e=>(t&&t(100,"100%",Zt),u===ss?new Blob(w).arrayBuffer().then((e=>As.loadFromFileData(e,i,o,a,c,h,d,p))):u===es?e:oe((()=>ms(e,a,i,o,c,h,d,p)))))))))}static loadFromFileData(e,t,s,n,r,i,o,a){return oe((()=>ms(us.parseStandardSplatToUncompressedSplatArray(e),n,t,s,r,i,o,a)))}}class fs{static checkVersion(e){const t=be.CurrentMajorVersion,s=be.CurrentMinorVersion,n=be.parseHeader(e);if(n.versionMajor===t&&n.versionMinor>=s||n.versionMajor>t)return!0;throw new Error(`KSplat version not supported: v${n.versionMajor}.${n.versionMinor}. Minimum required: v${t}.${s}`)}static loadFromURL(e,t,s,n,r){let i,o,a,l,c,h=!1,d=!1,p=[],u=!1,m=!1,A=0,f=0,g=0,S=!1,C=!1,y=!1,x=[];const v=le();let I=0;const B=()=>{const e=()=>{m=!0;new Blob(x).arrayBuffer().then((e=>{m=!1,u=!0,c=new ArrayBuffer(l.maxSectionCount*be.SectionHeaderSizeBytes),new Uint8Array(c).set(new Uint8Array(e,be.HeaderSizeBytes,l.maxSectionCount*be.SectionHeaderSizeBytes)),p=be.parseSectionHeaders(l,c,0,!1);let t=0;for(let n=0;n<l.maxSectionCount;n++)t+=p[n].storageSizeBytes;const s=be.HeaderSizeBytes+l.maxSectionCount*be.SectionHeaderSizeBytes+t;if(!i){i=new ArrayBuffer(s);let e=0;for(let t=0;t<x.length;t++){const s=x[t];new Uint8Array(i,e,s.byteLength).set(new Uint8Array(s)),e+=s.byteLength}}g=be.HeaderSizeBytes+be.SectionHeaderSizeBytes*l.maxSectionCount;for(let n=0;n<=p.length&&n<l.maxSectionCount;n++)g+=p[n].storageSizeBytes;0===I&&(I++,window.setTimeout((()=>{I--,w()}),1))}))};!m&&!u&&h&&A>=be.HeaderSizeBytes+be.SectionHeaderSizeBytes*l.maxSectionCount&&e()},w=()=>{if(y)return;y=!0;window.setTimeout((()=>{if(y=!1,u){if(C)return;if(S=A>=g,A-f>me.ProgressiveLoadSectionSize||S){f+=me.ProgressiveLoadSectionSize,C=f>=g,o||(o=new be(i,!1));const e=be.HeaderSizeBytes+be.SectionHeaderSizeBytes*l.maxSectionCount;let s=0,r=0,a=0;for(let t=0;t<l.maxSectionCount;t++){const n=p[t],i=e+(s+4*n.partiallyFilledBucketCount+n.bucketStorageSizeBytes*n.bucketCount);if(!(f>=i))break;{r++;const e=f-i,s=be.CompressionLevels[l.compressionLevel].SphericalHarmonicsDegrees[n.sphericalHarmonicsDegree].BytesPerSplat;let c=Math.floor(e/s);c=Math.min(c,n.maxSplatCount),a+=c,o.updateLoadedCounts(r,a),o.updateSectionLoadedCounts(t,c)}s+=n.storageSizeBytes}n(o,C);const c=f/g*100,h=c.toFixed(2)+"%";t&&t(c,h,Xt),C?v.resolve(o):w()}}}),me.ProgressiveLoadSectionDelayDuration)};return se(e,((e,n,r)=>{r&&(x.push(r),i&&new Uint8Array(i,A,r.byteLength).set(new Uint8Array(r)),A+=r.byteLength),s?(!h&&!d&&A>=be.HeaderSizeBytes&&(d=!0,new Blob(x).arrayBuffer().then((e=>{a=new ArrayBuffer(be.HeaderSizeBytes),new Uint8Array(a).set(new Uint8Array(e,0,be.HeaderSizeBytes)),fs.checkVersion(a),d=!1,h=!0,l=be.parseHeader(a),window.setTimeout((()=>{B()}),1)}))),B(),w()):t&&t(e,n,Xt)}),!s,r).then((e=>{t&&t(0,"0%",Jt);return(s?v.promise:fs.loadFromFileData(e)).then((e=>(t&&t(100,"100%",Zt),e)))}))}static loadFromFileData(e){return oe((()=>(fs.checkVersion(e),new be(e))))}static downloadFile=function(){let e;return function(t,s){const n=new Blob([t.bufferData],{type:"application/octet-stream"});e||(e=document.createElement("a"),document.body.appendChild(e)),e.download=s,e.href=URL.createObjectURL(n),e.click()}}()}const gs=0,Ss=1,Cs=2,ys=3,xs=e=>e.endsWith(".ply")?Cs:e.endsWith(".splat")?gs:e.endsWith(".ksplat")?Ss:e.endsWith(".spz")?ys:null,vs={type:"change"},Is={type:"start"},Bs={type:"end"},ws=new Y,bs=new X,Es=Math.cos(70*u.DEG2RAD);class Ts extends z{constructor(e,t){super(),this.object=e,this.domElement=t,this.domElement.style.touchAction="none",this.enabled=!0,this.target=new r,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.zoomToCursor=!1,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"KeyA",UP:"KeyW",RIGHT:"KeyD",BOTTOM:"KeyS"},this.mouseButtons={LEFT:_.ROTATE,MIDDLE:_.DOLLY,RIGHT:_.PAN},this.touches={ONE:Q.ROTATE,TWO:Q.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this.getPolarAngle=function(){return l.phi},this.getAzimuthalAngle=function(){return l.theta},this.getDistance=function(){return this.object.position.distanceTo(this.target)},this.listenToKeyEvents=function(e){e.addEventListener("keydown",Z),this._domElementKeyEvents=e},this.stopListenToKeyEvents=function(){this._domElementKeyEvents.removeEventListener("keydown",Z),this._domElementKeyEvents=null},this.saveState=function(){s.target0.copy(s.target),s.position0.copy(s.object.position),s.zoom0=s.object.zoom},this.reset=function(){s.target.copy(s.target0),s.object.position.copy(s.position0),s.object.zoom=s.zoom0,this.clearDampedRotation(),this.clearDampedPan(),s.object.updateProjectionMatrix(),s.dispatchEvent(vs),s.update(),o=n.NONE},this.clearDampedRotation=function(){c.theta=0,c.phi=0},this.clearDampedPan=function(){d.set(0,0,0)},this.update=function(){const t=new r,i=(new p).setFromUnitVectors(e.up,new r(0,1,0)),u=i.clone().invert(),m=new r,A=new p,f=new r,g=2*Math.PI;return function(){i.setFromUnitVectors(e.up,new r(0,1,0)),u.copy(i).invert();const p=s.object.position;t.copy(p).sub(s.target),t.applyQuaternion(i),l.setFromVector3(t),s.autoRotate&&o===n.NONE&&T(2*Math.PI/60/60*s.autoRotateSpeed),s.enableDamping?(l.theta+=c.theta*s.dampingFactor,l.phi+=c.phi*s.dampingFactor):(l.theta+=c.theta,l.phi+=c.phi);let S=s.minAzimuthAngle,C=s.maxAzimuthAngle;isFinite(S)&&isFinite(C)&&(S<-Math.PI?S+=g:S>Math.PI&&(S-=g),C<-Math.PI?C+=g:C>Math.PI&&(C-=g),l.theta=S<=C?Math.max(S,Math.min(C,l.theta)):l.theta>(S+C)/2?Math.max(S,l.theta):Math.min(C,l.theta)),l.phi=Math.max(s.minPolarAngle,Math.min(s.maxPolarAngle,l.phi)),l.makeSafe(),!0===s.enableDamping?s.target.addScaledVector(d,s.dampingFactor):s.target.add(d),s.zoomToCursor&&B||s.object.isOrthographicCamera?l.radius=L(l.radius):l.radius=L(l.radius*h),t.setFromSpherical(l),t.applyQuaternion(u),p.copy(s.target).add(t),s.object.lookAt(s.target),!0===s.enableDamping?(c.theta*=1-s.dampingFactor,c.phi*=1-s.dampingFactor,d.multiplyScalar(1-s.dampingFactor)):(c.set(0,0,0),d.set(0,0,0));let y=!1;if(s.zoomToCursor&&B){let n=null;if(s.object.isPerspectiveCamera){const e=t.length();n=L(e*h);const r=e-n;s.object.position.addScaledVector(v,r),s.object.updateMatrixWorld()}else if(s.object.isOrthographicCamera){const e=new r(I.x,I.y,0);e.unproject(s.object),s.object.zoom=Math.max(s.minZoom,Math.min(s.maxZoom,s.object.zoom/h)),s.object.updateProjectionMatrix(),y=!0;const i=new r(I.x,I.y,0);i.unproject(s.object),s.object.position.sub(i).add(e),s.object.updateMatrixWorld(),n=t.length()}else console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled."),s.zoomToCursor=!1;null!==n&&(this.screenSpacePanning?s.target.set(0,0,-1).transformDirection(s.object.matrix).multiplyScalar(n).add(s.object.position):(ws.origin.copy(s.object.position),ws.direction.set(0,0,-1).transformDirection(s.object.matrix),Math.abs(s.object.up.dot(ws.direction))<Es?e.lookAt(s.target):(bs.setFromNormalAndCoplanarPoint(s.object.up,s.target),ws.intersectPlane(bs,s.target))))}else s.object.isOrthographicCamera&&(s.object.zoom=Math.max(s.minZoom,Math.min(s.maxZoom,s.object.zoom/h)),s.object.updateProjectionMatrix(),y=!0);return h=1,B=!1,!!(y||m.distanceToSquared(s.object.position)>a||8*(1-A.dot(s.object.quaternion))>a||f.distanceToSquared(s.target)>0)&&(s.dispatchEvent(vs),m.copy(s.object.position),A.copy(s.object.quaternion),f.copy(s.target),y=!1,!0)}}(),this.dispose=function(){s.domElement.removeEventListener("contextmenu",$),s.domElement.removeEventListener("pointerdown",j),s.domElement.removeEventListener("pointercancel",X),s.domElement.removeEventListener("wheel",J),s.domElement.removeEventListener("pointermove",Y),s.domElement.removeEventListener("pointerup",X),null!==s._domElementKeyEvents&&(s._domElementKeyEvents.removeEventListener("keydown",Z),s._domElementKeyEvents=null)};const s=this,n={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6};let o=n.NONE;const a=1e-6,l=new N,c=new N;let h=1;const d=new r,u=new i,m=new i,A=new i,f=new i,g=new i,S=new i,C=new i,y=new i,x=new i,v=new r,I=new i;let B=!1;const w=[],b={};function E(){return Math.pow(.95,s.zoomSpeed)}function T(e){c.theta-=e}function D(e){c.phi-=e}const M=function(){const e=new r;return function(t,s){e.setFromMatrixColumn(s,0),e.multiplyScalar(-t),d.add(e)}}(),F=function(){const e=new r;return function(t,n){!0===s.screenSpacePanning?e.setFromMatrixColumn(n,1):(e.setFromMatrixColumn(n,0),e.crossVectors(s.object.up,e)),e.multiplyScalar(t),d.add(e)}}(),R=function(){const e=new r;return function(t,n){const r=s.domElement;if(s.object.isPerspectiveCamera){const i=s.object.position;e.copy(i).sub(s.target);let o=e.length();o*=Math.tan(s.object.fov/2*Math.PI/180),M(2*t*o/r.clientHeight,s.object.matrix),F(2*n*o/r.clientHeight,s.object.matrix)}else s.object.isOrthographicCamera?(M(t*(s.object.right-s.object.left)/s.object.zoom/r.clientWidth,s.object.matrix),F(n*(s.object.top-s.object.bottom)/s.object.zoom/r.clientHeight,s.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),s.enablePan=!1)}}();function P(e){s.object.isPerspectiveCamera||s.object.isOrthographicCamera?h/=e:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),s.enableZoom=!1)}function H(e){s.object.isPerspectiveCamera||s.object.isOrthographicCamera?h*=e:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),s.enableZoom=!1)}function k(t){if(!s.zoomToCursor)return;B=!0;const n=s.domElement.getBoundingClientRect(),r=t.clientX-n.left,i=t.clientY-n.top,o=n.width,a=n.height;I.x=r/o*2-1,I.y=-i/a*2+1,v.set(I.x,I.y,1).unproject(e).sub(e.position).normalize()}function L(e){return Math.max(s.minDistance,Math.min(s.maxDistance,e))}function O(e){u.set(e.clientX,e.clientY)}function U(e){f.set(e.clientX,e.clientY)}function z(){if(1===w.length)u.set(w[0].pageX,w[0].pageY);else{const e=.5*(w[0].pageX+w[1].pageX),t=.5*(w[0].pageY+w[1].pageY);u.set(e,t)}}function V(){if(1===w.length)f.set(w[0].pageX,w[0].pageY);else{const e=.5*(w[0].pageX+w[1].pageX),t=.5*(w[0].pageY+w[1].pageY);f.set(e,t)}}function G(){const e=w[0].pageX-w[1].pageX,t=w[0].pageY-w[1].pageY,s=Math.sqrt(e*e+t*t);C.set(0,s)}function K(e){if(1==w.length)m.set(e.pageX,e.pageY);else{const t=te(e),s=.5*(e.pageX+t.x),n=.5*(e.pageY+t.y);m.set(s,n)}A.subVectors(m,u).multiplyScalar(s.rotateSpeed);const t=s.domElement;T(2*Math.PI*A.x/t.clientHeight),D(2*Math.PI*A.y/t.clientHeight),u.copy(m)}function q(e){if(1===w.length)g.set(e.pageX,e.pageY);else{const t=te(e),s=.5*(e.pageX+t.x),n=.5*(e.pageY+t.y);g.set(s,n)}S.subVectors(g,f).multiplyScalar(s.panSpeed),R(S.x,S.y),f.copy(g)}function W(e){const t=te(e),n=e.pageX-t.x,r=e.pageY-t.y,i=Math.sqrt(n*n+r*r);y.set(0,i),x.set(0,Math.pow(y.y/C.y,s.zoomSpeed)),P(x.y),C.copy(y)}function j(e){!1!==s.enabled&&(0===w.length&&(s.domElement.setPointerCapture(e.pointerId),s.domElement.addEventListener("pointermove",Y),s.domElement.addEventListener("pointerup",X)),function(e){w.push(e)}(e),"touch"===e.pointerType?function(e){switch(ee(e),w.length){case 1:switch(s.touches.ONE){case Q.ROTATE:if(!1===s.enableRotate)return;z(),o=n.TOUCH_ROTATE;break;case Q.PAN:if(!1===s.enablePan)return;V(),o=n.TOUCH_PAN;break;default:o=n.NONE}break;case 2:switch(s.touches.TWO){case Q.DOLLY_PAN:if(!1===s.enableZoom&&!1===s.enablePan)return;s.enableZoom&&G(),s.enablePan&&V(),o=n.TOUCH_DOLLY_PAN;break;case Q.DOLLY_ROTATE:if(!1===s.enableZoom&&!1===s.enableRotate)return;s.enableZoom&&G(),s.enableRotate&&z(),o=n.TOUCH_DOLLY_ROTATE;break;default:o=n.NONE}break;default:o=n.NONE}o!==n.NONE&&s.dispatchEvent(Is)}(e):function(e){let t;switch(e.button){case 0:t=s.mouseButtons.LEFT;break;case 1:t=s.mouseButtons.MIDDLE;break;case 2:t=s.mouseButtons.RIGHT;break;default:t=-1}switch(t){case _.DOLLY:if(!1===s.enableZoom)return;!function(e){k(e),C.set(e.clientX,e.clientY)}(e),o=n.DOLLY;break;case _.ROTATE:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===s.enablePan)return;U(e),o=n.PAN}else{if(!1===s.enableRotate)return;O(e),o=n.ROTATE}break;case _.PAN:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===s.enableRotate)return;O(e),o=n.ROTATE}else{if(!1===s.enablePan)return;U(e),o=n.PAN}break;default:o=n.NONE}o!==n.NONE&&s.dispatchEvent(Is)}(e))}function Y(e){!1!==s.enabled&&("touch"===e.pointerType?function(e){switch(ee(e),o){case n.TOUCH_ROTATE:if(!1===s.enableRotate)return;K(e),s.update();break;case n.TOUCH_PAN:if(!1===s.enablePan)return;q(e),s.update();break;case n.TOUCH_DOLLY_PAN:if(!1===s.enableZoom&&!1===s.enablePan)return;!function(e){s.enableZoom&&W(e),s.enablePan&&q(e)}(e),s.update();break;case n.TOUCH_DOLLY_ROTATE:if(!1===s.enableZoom&&!1===s.enableRotate)return;!function(e){s.enableZoom&&W(e),s.enableRotate&&K(e)}(e),s.update();break;default:o=n.NONE}}(e):function(e){switch(o){case n.ROTATE:if(!1===s.enableRotate)return;!function(e){m.set(e.clientX,e.clientY),A.subVectors(m,u).multiplyScalar(s.rotateSpeed);const t=s.domElement;T(2*Math.PI*A.x/t.clientHeight),D(2*Math.PI*A.y/t.clientHeight),u.copy(m),s.update()}(e);break;case n.DOLLY:if(!1===s.enableZoom)return;!function(e){y.set(e.clientX,e.clientY),x.subVectors(y,C),x.y>0?P(E()):x.y<0&&H(E()),C.copy(y),s.update()}(e);break;case n.PAN:if(!1===s.enablePan)return;!function(e){g.set(e.clientX,e.clientY),S.subVectors(g,f).multiplyScalar(s.panSpeed),R(S.x,S.y),f.copy(g),s.update()}(e)}}(e))}function X(e){!function(e){delete b[e.pointerId];for(let t=0;t<w.length;t++)if(w[t].pointerId==e.pointerId)return void w.splice(t,1)}(e),0===w.length&&(s.domElement.releasePointerCapture(e.pointerId),s.domElement.removeEventListener("pointermove",Y),s.domElement.removeEventListener("pointerup",X)),s.dispatchEvent(Bs),o=n.NONE}function J(e){!1!==s.enabled&&!1!==s.enableZoom&&o===n.NONE&&(e.preventDefault(),s.dispatchEvent(Is),function(e){k(e),e.deltaY<0?H(E()):e.deltaY>0&&P(E()),s.update()}(e),s.dispatchEvent(Bs))}function Z(e){!1!==s.enabled&&!1!==s.enablePan&&function(e){let t=!1;switch(e.code){case s.keys.UP:e.ctrlKey||e.metaKey||e.shiftKey?D(2*Math.PI*s.rotateSpeed/s.domElement.clientHeight):R(0,s.keyPanSpeed),t=!0;break;case s.keys.BOTTOM:e.ctrlKey||e.metaKey||e.shiftKey?D(-2*Math.PI*s.rotateSpeed/s.domElement.clientHeight):R(0,-s.keyPanSpeed),t=!0;break;case s.keys.LEFT:e.ctrlKey||e.metaKey||e.shiftKey?T(2*Math.PI*s.rotateSpeed/s.domElement.clientHeight):R(s.keyPanSpeed,0),t=!0;break;case s.keys.RIGHT:e.ctrlKey||e.metaKey||e.shiftKey?T(-2*Math.PI*s.rotateSpeed/s.domElement.clientHeight):R(-s.keyPanSpeed,0),t=!0}t&&(e.preventDefault(),s.update())}(e)}function $(e){!1!==s.enabled&&e.preventDefault()}function ee(e){let t=b[e.pointerId];void 0===t&&(t=new i,b[e.pointerId]=t),t.set(e.pageX,e.pageY)}function te(e){const t=e.pointerId===w[0].pointerId?w[1]:w[0];return b[t.pointerId]}s.domElement.addEventListener("contextmenu",$),s.domElement.addEventListener("pointerdown",j),s.domElement.addEventListener("pointercancel",X),s.domElement.addEventListener("wheel",J,{passive:!1}),this.update()}}class Ds{static elementIDGen=0;constructor(e,t){this.taskIDGen=0,this.elementID=Ds.elementIDGen++,this.tasks=[],this.message=e||"Loading...",this.container=t||document.body,this.spinnerContainerOuter=document.createElement("div"),this.spinnerContainerOuter.className=`spinnerOuterContainer${this.elementID}`,this.spinnerContainerOuter.style.display="none",this.spinnerContainerPrimary=document.createElement("div"),this.spinnerContainerPrimary.className=`spinnerContainerPrimary${this.elementID}`,this.spinnerPrimary=document.createElement("div"),this.spinnerPrimary.classList.add(`spinner${this.elementID}`,`spinnerPrimary${this.elementID}`),this.messageContainerPrimary=document.createElement("div"),this.messageContainerPrimary.classList.add(`messageContainer${this.elementID}`,`messageContainerPrimary${this.elementID}`),this.messageContainerPrimary.innerHTML=this.message,this.spinnerContainerMin=document.createElement("div"),this.spinnerContainerMin.className=`spinnerContainerMin${this.elementID}`,this.spinnerMin=document.createElement("div"),this.spinnerMin.classList.add(`spinner${this.elementID}`,`spinnerMin${this.elementID}`),this.messageContainerMin=document.createElement("div"),this.messageContainerMin.classList.add(`messageContainer${this.elementID}`,`messageContainerMin${this.elementID}`),this.messageContainerMin.innerHTML=this.message,this.spinnerContainerPrimary.appendChild(this.spinnerPrimary),this.spinnerContainerPrimary.appendChild(this.messageContainerPrimary),this.spinnerContainerOuter.appendChild(this.spinnerContainerPrimary),this.spinnerContainerMin.appendChild(this.spinnerMin),this.spinnerContainerMin.appendChild(this.messageContainerMin),this.spinnerContainerOuter.appendChild(this.spinnerContainerMin);const s=document.createElement("style");s.innerHTML=`\n\n            .spinnerOuterContainer${this.elementID} {\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                top: 0;\n                left: 0;\n                position: absolute;\n                pointer-events: none;\n            }\n\n            .messageContainer${this.elementID} {\n                height: 20px;\n                font-family: arial;\n                font-size: 12pt;\n                color: #ffffff;\n                text-align: center;\n                vertical-align: middle;\n            }\n\n            .spinner${this.elementID} {\n                padding: 15px;\n                background: #07e8d6;\n                z-index:99999;\n            \n                aspect-ratio: 1;\n                border-radius: 50%;\n                --_m: \n                    conic-gradient(#0000,#000),\n                    linear-gradient(#000 0 0) content-box;\n                -webkit-mask: var(--_m);\n                    mask: var(--_m);\n                -webkit-mask-composite: source-out;\n                    mask-composite: subtract;\n                box-sizing: border-box;\n                animation: load 1s linear infinite;\n            }\n\n            .spinnerContainerPrimary${this.elementID} {\n                z-index:99999;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #666666 1px solid;\n                border-radius: 5px;\n                padding-top: 20px;\n                padding-bottom: 10px;\n                margin: 0;\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-80px, -80px);\n                width: 180px;\n                pointer-events: auto;\n            }\n\n            .spinnerPrimary${this.elementID} {\n                width: 120px;\n                margin-left: 30px;\n            }\n\n            .messageContainerPrimary${this.elementID} {\n                padding-top: 15px;\n            }\n\n            .spinnerContainerMin${this.elementID} {\n                z-index:99999;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #666666 1px solid;\n                border-radius: 5px;\n                padding-top: 20px;\n                padding-bottom: 15px;\n                margin: 0;\n                position: absolute;\n                bottom: 50px;\n                left: 50%;\n                transform: translate(-50%, 0);\n                display: flex;\n                flex-direction: left;\n                pointer-events: auto;\n                min-width: 250px;\n            }\n\n            .messageContainerMin${this.elementID} {\n                margin-right: 15px;\n            }\n\n            .spinnerMin${this.elementID} {\n                width: 50px;\n                height: 50px;\n                margin-left: 15px;\n                margin-right: 25px;\n            }\n\n            .messageContainerMin${this.elementID} {\n                padding-top: 15px;\n            }\n            \n            @keyframes load {\n                to{transform: rotate(1turn)}\n            }\n\n        `,this.spinnerContainerOuter.appendChild(s),this.container.appendChild(this.spinnerContainerOuter),this.setMinimized(!1,!0),this.fadeTransitions=[]}addTask(e){const t={message:e,id:this.taskIDGen++};return this.tasks.push(t),this.update(),t.id}removeTask(e){let t=0;for(let s of this.tasks){if(s.id===e){this.tasks.splice(t,1);break}t++}this.update()}removeAllTasks(){this.tasks=[],this.update()}setMessageForTask(e,t){for(let s of this.tasks)if(s.id===e){s.message=t;break}this.update()}update(){this.tasks.length>0?(this.show(),this.setMessage(this.tasks[this.tasks.length-1].message)):this.hide()}show(){this.spinnerContainerOuter.style.display="block",this.visible=!0}hide(){this.spinnerContainerOuter.style.display="none",this.visible=!1}setContainer(e){this.container&&this.spinnerContainerOuter.parentElement===this.container&&this.container.removeChild(this.spinnerContainerOuter),e&&(this.container=e,this.container.appendChild(this.spinnerContainerOuter),this.spinnerContainerOuter.style.zIndex=this.container.style.zIndex+1)}setMinimized(e,t){const s=(e,t,s,n,r)=>{s?e.style.display=t?n:"none":this.fadeTransitions[r]=((e,t,s,n,r)=>{const i=performance.now();let o="none"===e.style.display?0:parseFloat(e.style.opacity);isNaN(o)&&(o=1);const a=window.setInterval((()=>{const l=performance.now()-i;let c,h=Math.min(l/n,1);h>.999&&(h=1),t?(c=(1-h)*o,c<1e-4&&(c=0)):c=(1-o)*h+o,c>0?(e.style.display=s,e.style.opacity=c):e.style.display="none",h>=1&&(r&&r(),window.clearInterval(a))}),16);return a})(e,!t,n,500,(()=>{this.fadeTransitions[r]=null}))};s(this.spinnerContainerPrimary,!e,t,"block",0),s(this.spinnerContainerMin,e,t,"flex",1),this.minimized=e}setMessage(e){this.messageContainerPrimary.innerHTML=e,this.messageContainerMin.innerHTML=e}}class Ms{constructor(e){this.idGen=0,this.tasks=[],this.container=e||document.body,this.progressBarContainerOuter=document.createElement("div"),this.progressBarContainerOuter.className="progressBarOuterContainer",this.progressBarContainerOuter.style.display="none",this.progressBarBox=document.createElement("div"),this.progressBarBox.className="progressBarBox",this.progressBarBackground=document.createElement("div"),this.progressBarBackground.className="progressBarBackground",this.progressBar=document.createElement("div"),this.progressBar.className="progressBar",this.progressBarBackground.appendChild(this.progressBar),this.progressBarBox.appendChild(this.progressBarBackground),this.progressBarContainerOuter.appendChild(this.progressBarBox);const t=document.createElement("style");t.innerHTML="\n\n            .progressBarOuterContainer {\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                top: 0;\n                left: 0;\n                position: absolute;\n                pointer-events: none;\n            }\n\n            .progressBarBox {\n                z-index:99999;\n                padding: 7px 9px 5px 7px;\n                background-color: rgba(190, 190, 190, 0.75);\n                border: #555555 1px solid;\n                border-radius: 15px;\n                margin: 0;\n                position: absolute;\n                bottom: 50px;\n                left: 50%;\n                transform: translate(-50%, 0);\n                width: 180px;\n                height: 30px;\n                pointer-events: auto;\n            }\n\n            .progressBarBackground {\n                width: 100%;\n                height: 25px;\n                border-radius:10px;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #444444 1px solid;\n                box-shadow: inset 0 0 10px #333333;\n            }\n\n            .progressBar {\n                height: 25px;\n                width: 0px;\n                border-radius:10px;\n                background-color: rgba(0, 200, 0, 0.75);\n                box-shadow: inset 0 0 10px #003300;\n            }\n\n        ",this.progressBarContainerOuter.appendChild(t),this.container.appendChild(this.progressBarContainerOuter)}show(){this.progressBarContainerOuter.style.display="block"}hide(){this.progressBarContainerOuter.style.display="none"}setProgress(e){this.progressBar.style.width=e+"%"}setContainer(e){this.container&&this.progressBarContainerOuter.parentElement===this.container&&this.container.removeChild(this.progressBarContainerOuter),e&&(this.container=e,this.container.appendChild(this.progressBarContainerOuter),this.progressBarContainerOuter.style.zIndex=this.container.style.zIndex+1)}}class Fs{constructor(e){this.container=e||document.body,this.infoCells={};const t=[["Camera position","cameraPosition"],["Camera look-at","cameraLookAt"],["Camera up","cameraUp"],["Camera mode","orthographicCamera"],["Cursor position","cursorPosition"],["FPS","fps"],["Rendering:","renderSplatCount"],["Sort time","sortTime"],["Render window","renderWindow"],["Focal adjustment","focalAdjustment"],["Splat scale","splatScale"],["Point cloud mode","pointCloudMode"]];this.infoPanelContainer=document.createElement("div");const s=document.createElement("style");s.innerHTML="\n\n            .infoPanel {\n                width: 430px;\n                padding: 10px;\n                background-color: rgba(50, 50, 50, 0.85);\n                border: #555555 2px solid;\n                color: #dddddd;\n                border-radius: 10px;\n                z-index: 9999;\n                font-family: arial;\n                font-size: 11pt;\n                text-align: left;\n                margin: 0;\n                top: 10px;\n                left:10px;\n                position: absolute;\n                pointer-events: auto;\n            }\n\n            .info-panel-cell {\n                margin-bottom: 5px;\n                padding-bottom: 2px;\n            }\n\n            .label-cell {\n                font-weight: bold;\n                font-size: 12pt;\n                width: 140px;\n            }\n\n        ",this.infoPanelContainer.append(s),this.infoPanel=document.createElement("div"),this.infoPanel.className="infoPanel";const n=document.createElement("div");n.style.display="table";for(let r of t){const e=document.createElement("div");e.style.display="table-row",e.className="info-panel-row";const t=document.createElement("div");t.style.display="table-cell",t.innerHTML=`${r[0]}: `,t.classList.add("info-panel-cell","label-cell");const s=document.createElement("div");s.style.display="table-cell",s.style.width="10px",s.innerHTML=" ",s.className="info-panel-cell";const i=document.createElement("div");i.style.display="table-cell",i.innerHTML="",i.className="info-panel-cell",this.infoCells[r[1]]=i,e.appendChild(t),e.appendChild(s),e.appendChild(i),n.appendChild(e)}this.infoPanel.appendChild(n),this.infoPanelContainer.append(this.infoPanel),this.infoPanelContainer.style.display="none",this.container.appendChild(this.infoPanelContainer),this.visible=!1}update=function(e,t,s,n,r,i,o,a,l,c,h,d,p,u){const m=`${t.x.toFixed(5)}, ${t.y.toFixed(5)}, ${t.z.toFixed(5)}`;if(this.infoCells.cameraPosition.innerHTML!==m&&(this.infoCells.cameraPosition.innerHTML=m),s){const e=s,t=`${e.x.toFixed(5)}, ${e.y.toFixed(5)}, ${e.z.toFixed(5)}`;this.infoCells.cameraLookAt.innerHTML!==t&&(this.infoCells.cameraLookAt.innerHTML=t)}const A=`${n.x.toFixed(5)}, ${n.y.toFixed(5)}, ${n.z.toFixed(5)}`;if(this.infoCells.cameraUp.innerHTML!==A&&(this.infoCells.cameraUp.innerHTML=A),this.infoCells.orthographicCamera.innerHTML=r?"Orthographic":"Perspective",i){const e=i,t=`${e.x.toFixed(5)}, ${e.y.toFixed(5)}, ${e.z.toFixed(5)}`;this.infoCells.cursorPosition.innerHTML=t}else this.infoCells.cursorPosition.innerHTML="N/A";this.infoCells.fps.innerHTML=o,this.infoCells.renderWindow.innerHTML=`${e.x} x ${e.y}`,this.infoCells.renderSplatCount.innerHTML=`${l} splats out of ${a} (${c.toFixed(2)}%)`,this.infoCells.sortTime.innerHTML=`${h.toFixed(3)} ms`,this.infoCells.focalAdjustment.innerHTML=`${d.toFixed(3)}`,this.infoCells.splatScale.innerHTML=`${p.toFixed(3)}`,this.infoCells.pointCloudMode.innerHTML=`${u}`};setContainer(e){this.container&&this.infoPanelContainer.parentElement===this.container&&this.container.removeChild(this.infoPanelContainer),e&&(this.container=e,this.container.appendChild(this.infoPanelContainer),this.infoPanelContainer.style.zIndex=this.container.style.zIndex+1)}show(){this.infoPanelContainer.style.display="block",this.visible=!0}hide(){this.infoPanelContainer.style.display="none",this.visible=!1}}const Rs=new r;class Ps extends k{constructor(e=new r(0,0,1),t=new r(0,0,0),i=1,o=.1,a=16776960,l=.2*i,c=.2*l){super(),this.type="ArrowHelper";const h=new j(o,o,i,32);h.translate(0,i/2,0);const d=new j(0,c,l,32);d.translate(0,i,0),this.position.copy(t),this.line=new n(h,new s({color:a,toneMapped:!1})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new n(d,new s({color:a,toneMapped:!1})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(e)}setDirection(e){if(e.y>.99999)this.quaternion.set(0,0,0,1);else if(e.y<-.99999)this.quaternion.set(1,0,0,0);else{Rs.set(e.z,0,-e.x).normalize();const t=Math.acos(e.y);this.quaternion.setFromAxisAngle(Rs,t)}}setColor(e){this.line.material.color.set(e),this.cone.material.color.set(e)}copy(e){return super.copy(e,!1),this.line.copy(e.line),this.cone.copy(e.cone),this}dispose(){this.line.geometry.dispose(),this.line.material.dispose(),this.cone.geometry.dispose(),this.cone.material.dispose()}}class Hs{constructor(e){this.threeScene=e,this.splatRenderTarget=null,this.renderTargetCopyQuad=null,this.renderTargetCopyCamera=null,this.meshCursor=null,this.focusMarker=null,this.controlPlane=null,this.debugRoot=null,this.secondaryDebugRoot=null}updateSplatRenderTargetForRenderDimensions(e,t){this.destroySplatRendertarget(),this.splatRenderTarget=new b(e,t,{format:y,stencilBuffer:!1,depthBuffer:!0}),this.splatRenderTarget.depthTexture=new E(e,t),this.splatRenderTarget.depthTexture.format=T,this.splatRenderTarget.depthTexture.type=C}destroySplatRendertarget(){this.splatRenderTarget&&(this.splatRenderTarget=null)}setupRenderTargetCopyObjects(){const e=new D({vertexShader:"\n                varying vec2 vUv;\n                void main() {\n                    vUv = uv;\n                    gl_Position = vec4( position.xy, 0.0, 1.0 );    \n                }\n            ",fragmentShader:"\n                #include <common>\n                #include <packing>\n                varying vec2 vUv;\n                uniform sampler2D sourceColorTexture;\n                uniform sampler2D sourceDepthTexture;\n                void main() {\n                    vec4 color = texture2D(sourceColorTexture, vUv);\n                    float fragDepth = texture2D(sourceDepthTexture, vUv).x;\n                    gl_FragDepth = fragDepth;\n                    gl_FragColor = vec4(color.rgb, color.a * 2.0);\n              }\n            ",uniforms:{sourceColorTexture:{type:"t",value:null},sourceDepthTexture:{type:"t",value:null}},depthWrite:!1,depthTest:!1,transparent:!0,blending:R,blendSrc:F,blendSrcAlpha:F,blendDst:M,blendDstAlpha:M});e.extensions.fragDepth=!0,this.renderTargetCopyQuad=new n(new P(2,2),e),this.renderTargetCopyCamera=new l(-1,1,1,-1,0,1)}destroyRenderTargetCopyObjects(){this.renderTargetCopyQuad&&(ie(this.renderTargetCopyQuad),this.renderTargetCopyQuad=null)}setupMeshCursor(){if(!this.meshCursor){const e=new H(.5,1.5,32),t=new s({color:16777215}),r=new n(e,t);r.rotation.set(0,0,Math.PI),r.position.set(0,1,0);const i=new n(e,t);i.position.set(0,-1,0);const o=new n(e,t);o.rotation.set(0,0,Math.PI/2),o.position.set(1,0,0);const a=new n(e,t);a.rotation.set(0,0,-Math.PI/2),a.position.set(-1,0,0),this.meshCursor=new k,this.meshCursor.add(r),this.meshCursor.add(i),this.meshCursor.add(o),this.meshCursor.add(a),this.meshCursor.scale.set(.1,.1,.1),this.threeScene.add(this.meshCursor),this.meshCursor.visible=!1}}destroyMeshCursor(){this.meshCursor&&(ie(this.meshCursor),this.threeScene.remove(this.meshCursor),this.meshCursor=null)}setMeshCursorVisibility(e){this.meshCursor.visible=e}getMeschCursorVisibility(){return this.meshCursor.visible}setMeshCursorPosition(e){this.meshCursor.position.copy(e)}positionAndOrientMeshCursor(e,t){this.meshCursor.position.copy(e),this.meshCursor.up.copy(t.up),this.meshCursor.lookAt(t.position)}setupFocusMarker(){if(!this.focusMarker){const e=new t(.5,32,32),s=Hs.buildFocusMarkerMaterial();s.depthTest=!1,s.depthWrite=!1,s.transparent=!0,this.focusMarker=new n(e,s)}}destroyFocusMarker(){this.focusMarker&&(ie(this.focusMarker),this.focusMarker=null)}updateFocusMarker=function(){const e=new r,t=new d,s=new r;return function(n,r,i){t.copy(r.matrixWorld).invert(),e.copy(n).applyMatrix4(t),e.normalize().multiplyScalar(10),e.applyMatrix4(r.matrixWorld),s.copy(r.position).sub(n);const o=s.length();this.focusMarker.position.copy(n),this.focusMarker.scale.set(o,o,o),this.focusMarker.material.uniforms.realFocusPosition.value.copy(n),this.focusMarker.material.uniforms.viewport.value.copy(i),this.focusMarker.material.uniformsNeedUpdate=!0}}();setFocusMarkerVisibility(e){this.focusMarker.visible=e}setFocusMarkerOpacity(e){this.focusMarker.material.uniforms.opacity.value=e,this.focusMarker.material.uniformsNeedUpdate=!0}getFocusMarkerOpacity(){return this.focusMarker.material.uniforms.opacity.value}setupControlPlane(){if(!this.controlPlane){const e=new P(1,1);e.rotateX(-Math.PI/2);const t=new s({color:16777215});t.transparent=!0,t.opacity=.6,t.depthTest=!1,t.depthWrite=!1,t.side=L;const i=new n(e,t),o=new r(0,1,0);o.normalize();const a=new r(0,0,0),l=new Ps(o,a,.5,.01,56576,.1,.03);this.controlPlane=new k,this.controlPlane.add(i),this.controlPlane.add(l)}}destroyControlPlane(){this.controlPlane&&(ie(this.controlPlane),this.controlPlane=null)}setControlPlaneVisibility(e){this.controlPlane.visible=e}positionAndOrientControlPlane=function(){const e=new p,t=new r(0,1,0);return function(s,n){e.setFromUnitVectors(t,n),this.controlPlane.position.copy(s),this.controlPlane.quaternion.copy(e)}}();addDebugMeshes(){this.debugRoot=this.createDebugMeshes(),this.secondaryDebugRoot=this.createSecondaryDebugMeshes(),this.threeScene.add(this.debugRoot),this.threeScene.add(this.secondaryDebugRoot)}destroyDebugMeshes(){for(let e of[this.debugRoot,this.secondaryDebugRoot])e&&(ie(e),this.threeScene.remove(e));this.debugRoot=null,this.secondaryDebugRoot=null}createDebugMeshes(e){const s=new t(1,32,32),r=new k,i=(t,i)=>{let o=new n(s,Hs.buildDebugMaterial(t));o.renderOrder=e,r.add(o),o.position.fromArray(i)};return i(16711680,[-50,0,0]),i(16711680,[50,0,0]),i(65280,[0,0,-50]),i(65280,[0,0,50]),i(16755200,[5,0,5]),r}createSecondaryDebugMeshes(e){const t=new O(3,3,3),s=new k;const r=r=>{let i=new n(t,Hs.buildDebugMaterial(12303291));i.renderOrder=e,s.add(i),i.position.fromArray(r)};return r([-10,0,-10]),r([-10,0,10]),r([10,0,-10]),r([10,0,10]),s}static buildDebugMaterial(e){const t={color:{type:"v3",value:new h(e)}},s=new D({uniforms:t,vertexShader:"\n            #include <common>\n            varying float ndcDepth;\n\n            void main() {\n                gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position.xyz, 1.0);\n                ndcDepth = gl_Position.z / gl_Position.w;\n                gl_Position.x = gl_Position.x / gl_Position.w;\n                gl_Position.y = gl_Position.y / gl_Position.w;\n                gl_Position.z = 0.0;\n                gl_Position.w = 1.0;\n    \n            }\n        ",fragmentShader:"\n            #include <common>\n            uniform vec3 color;\n            varying float ndcDepth;\n            void main() {\n                gl_FragDepth = (ndcDepth + 1.0) / 2.0;\n                gl_FragColor = vec4(color.rgb, 0.0);\n            }\n        ",transparent:!1,depthTest:!0,depthWrite:!0,side:U});return s.extensions.fragDepth=!0,s}static buildFocusMarkerMaterial(e){const t={color:{type:"v3",value:new h(e)},realFocusPosition:{type:"v3",value:new r},viewport:{type:"v2",value:new i},opacity:{value:0}};return new D({uniforms:t,vertexShader:"\n            #include <common>\n\n            uniform vec2 viewport;\n            uniform vec3 realFocusPosition;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                float radius = 0.01;\n\n                vec4 viewPosition = modelViewMatrix * vec4(position.xyz, 1.0);\n                vec4 viewCenter = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);\n\n                vec4 viewFocusPosition = modelViewMatrix * vec4(realFocusPosition, 1.0);\n\n                ndcPosition = projectionMatrix * viewPosition;\n                ndcPosition = ndcPosition * vec4(1.0 / ndcPosition.w);\n                ndcCenter = projectionMatrix * viewCenter;\n                ndcCenter = ndcCenter * vec4(1.0 / ndcCenter.w);\n\n                ndcFocusPosition = projectionMatrix * viewFocusPosition;\n                ndcFocusPosition = ndcFocusPosition * vec4(1.0 / ndcFocusPosition.w);\n\n                gl_Position = projectionMatrix * viewPosition;\n\n            }\n        ",fragmentShader:"\n            #include <common>\n            uniform vec3 color;\n            uniform vec2 viewport;\n            uniform float opacity;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                vec2 screenPosition = vec2(ndcPosition) * viewport;\n                vec2 screenCenter = vec2(ndcCenter) * viewport;\n\n                vec2 screenVec = screenPosition - screenCenter;\n\n                float projectedRadius = length(screenVec);\n\n                float lineWidth = 0.0005 * viewport.y;\n                float aaRange = 0.0025 * viewport.y;\n                float radius = 0.06 * viewport.y;\n                float radDiff = abs(projectedRadius - radius) - lineWidth;\n                float alpha = 1.0 - clamp(radDiff / 5.0, 0.0, 1.0); \n\n                gl_FragColor = vec4(color.rgb, alpha * opacity);\n            }\n        ",transparent:!0,depthTest:!1,depthWrite:!1,side:U})}dispose(){this.destroyMeshCursor(),this.destroyFocusMarker(),this.destroyDebugMeshes(),this.destroyControlPlane(),this.destroyRenderTargetCopyObjects(),this.destroySplatRendertarget()}}const ks=new r(1,0,0),Ls=new r(0,1,0),Os=new r(0,0,1);class Us{constructor(e=new r,t=new r){this.origin=new r,this.direction=new r,this.setParameters(e,t)}setParameters(e,t){this.origin.copy(e),this.direction.copy(t).normalize()}boxContainsPoint(e,t,s){return!(t.x<e.min.x-s||t.x>e.max.x+s||t.y<e.min.y-s||t.y>e.max.y+s||t.z<e.min.z-s||t.z>e.max.z+s)}intersectBox=function(){const e=new r,t=[],s=[],n=[];return function(r,i){if(s[0]=this.origin.x,s[1]=this.origin.y,s[2]=this.origin.z,n[0]=this.direction.x,n[1]=this.direction.y,n[2]=this.direction.z,this.boxContainsPoint(r,this.origin,1e-4))return i&&(i.origin.copy(this.origin),i.normal.set(0,0,0),i.distance=-1),!0;for(let o=0;o<3;o++){if(0==n[o])continue;const a=0==o?ks:1==o?Ls:Os,l=n[o]<0?r.max:r.min;let c=-Math.sign(n[o]);t[0]=0==o?l.x:1==o?l.y:l.z;let h=t[0]-s[o];if(h*c<0){const l=(o+1)%3,d=(o+2)%3;if(t[2]=n[l]/n[o]*h+s[l],t[1]=n[d]/n[o]*h+s[d],e.set(t[o],t[d],t[l]),this.boxContainsPoint(r,e,1e-4))return i&&(i.origin.copy(e),i.normal.copy(a).multiplyScalar(c),i.distance=e.sub(this.origin).length()),!0}}return!1}}();intersectSphere=function(){const e=new r;return function(t,s,n){e.copy(t).sub(this.origin);const r=e.dot(this.direction),i=r*r,o=e.dot(e)-i,a=s*s;if(o>a)return!1;const l=Math.sqrt(a-o),c=r-l,h=r+l;if(h<0)return!1;let d=c<0?h:c;return n&&(n.origin.copy(this.origin).addScaledVector(this.direction,d),n.normal.copy(n.origin).sub(t).normalize(),n.distance=d),!0}}()}class zs{constructor(){this.origin=new r,this.normal=new r,this.distance=0,this.splatIndex=0}set(e,t,s,n){this.origin.copy(e),this.normal.copy(t),this.distance=s,this.splatIndex=n}clone(){const e=new zs;return e.origin.copy(this.origin),e.normal.copy(this.normal),e.distance=this.distance,e.splatIndex=this.splatIndex,e}}const _s=0,Qs=1;class Ns{constructor(e,t,s=!1){this.ray=new Us(e,t),this.raycastAgainstTrueSplatEllipsoid=s}setFromCameraAndScreenPosition=function(){const e=new i;return function(t,s,n){if(e.x=s.x/n.x*2-1,e.y=(n.y-s.y)/n.y*2-1,t.isPerspectiveCamera)this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(e.x,e.y,.5).unproject(t).sub(this.ray.origin).normalize(),this.camera=t;else{if(!t.isOrthographicCamera)throw new Error("Raycaster::setFromCameraAndScreenPosition() -> Unsupported camera type");this.ray.origin.set(e.x,e.y,(t.near+t.far)/(t.near-t.far)).unproject(t),this.ray.direction.set(0,0,-1).transformDirection(t.matrixWorld),this.camera=t}}}();intersectSplatMesh=function(){const e=new d,t=new d,s=new d,n=new Us,i=new r;return function(r,o=[]){const a=r.getSplatTree();if(a){for(let l=0;l<a.subTrees.length;l++){const c=a.subTrees[l];t.copy(r.matrixWorld),r.dynamicMode&&(r.getSceneTransform(l,s),t.multiply(s)),e.copy(t).invert(),n.origin.copy(this.ray.origin).applyMatrix4(e),n.direction.copy(this.ray.origin).add(this.ray.direction),n.direction.applyMatrix4(e).sub(n.origin).normalize();const h=[];c.rootNode&&this.castRayAtSplatTreeNode(n,a,c.rootNode,h),h.forEach((e=>{e.origin.applyMatrix4(t),e.normal.applyMatrix4(t).normalize(),e.distance=i.copy(e.origin).sub(this.ray.origin).length()})),o.push(...h)}return o.sort(((e,t)=>e.distance>t.distance?1:-1)),o}}}();castRayAtSplatTreeNode=function(){const e=new m,t=new r,s=new r,n=new p,i=new zs,o=1e-7,a=new r(0,0,0),l=new d,c=new d,h=new d,u=new d,A=new d,f=new Us;return function(r,d,p,m=[]){if(r.intersectBox(p.boundingBox)){if(p.data&&p.data.indexes&&p.data.indexes.length>0)for(let g=0;g<p.data.indexes.length;g++){const S=p.data.indexes[g],C=d.splatMesh.getSceneIndexForSplat(S);if(d.splatMesh.getScene(C).visible&&(d.splatMesh.getSplatColor(S,e),d.splatMesh.getSplatCenter(S,t),d.splatMesh.getSplatScaleAndRotation(S,s,n),!(s.x<=o||s.y<=o||d.splatMesh.splatRenderMode===_s&&s.z<=o)))if(this.raycastAgainstTrueSplatEllipsoid){c.makeScale(s.x,s.y,s.z),h.makeRotationFromQuaternion(n);const o=2*Math.log10(e.w);if(l.makeScale(o,o,o),A.copy(l).multiply(h).multiply(c),u.copy(A).invert(),f.origin.copy(r.origin).sub(t).applyMatrix4(u),f.direction.copy(r.origin).add(r.direction).sub(t),f.direction.applyMatrix4(u).sub(f.origin).normalize(),f.intersectSphere(a,1,i)){const e=i.clone();e.splatIndex=S,e.origin.applyMatrix4(A).add(t),m.push(e)}}else{let e=s.x+s.y,n=2;if(d.splatMesh.splatRenderMode===_s&&(e+=s.z,n=3),e/=n,r.intersectSphere(t,e,i)){const e=i.clone();e.splatIndex=S,m.push(e)}}}if(p.children&&p.children.length>0)for(let e of p.children)this.castRayAtSplatTreeNode(r,d,e,m);return m}}}()}class Vs{static buildVertexShaderBase(e=!1,t=!1,s=0,n=""){let r="\n        precision highp float;\n        #include <common>\n\n        attribute uint splatIndex;\n        uniform highp usampler2D centersColorsTexture;\n        uniform highp sampler2D sphericalHarmonicsTexture;\n        uniform highp sampler2D sphericalHarmonicsTextureR;\n        uniform highp sampler2D sphericalHarmonicsTextureG;\n        uniform highp sampler2D sphericalHarmonicsTextureB;\n\n        uniform highp usampler2D sceneIndexesTexture;\n        uniform vec2 sceneIndexesTextureSize;\n        uniform int sceneCount;\n    ";return t&&(r+=`\n            uniform float sceneOpacity[${me.MaxScenes}];\n            uniform int sceneVisibility[${me.MaxScenes}];\n        `),e&&(r+=`\n            uniform highp mat4 transforms[${me.MaxScenes}];\n        `),r+=`\n        ${n}\n        uniform vec2 focal;\n        uniform float orthoZoom;\n        uniform int orthographicMode;\n        uniform int pointCloudModeEnabled;\n        uniform float inverseFocalAdjustment;\n        uniform vec2 viewport;\n        uniform vec2 basisViewport;\n        uniform vec2 centersColorsTextureSize;\n        uniform int sphericalHarmonicsDegree;\n        uniform vec2 sphericalHarmonicsTextureSize;\n        uniform int sphericalHarmonics8BitMode;\n        uniform int sphericalHarmonicsMultiTextureMode;\n        uniform float visibleRegionRadius;\n        uniform float visibleRegionFadeStartRadius;\n        uniform float firstRenderTime;\n        uniform float currentTime;\n        uniform int fadeInComplete;\n        uniform vec3 sceneCenter;\n        uniform float splatScale;\n        uniform float sphericalHarmonics8BitCompressionRangeMin[${me.MaxScenes}];\n        uniform float sphericalHarmonics8BitCompressionRangeMax[${me.MaxScenes}];\n\n        varying vec4 vColor;\n        varying vec2 vUv;\n        varying vec2 vPosition;\n\n        mat3 quaternionToRotationMatrix(float x, float y, float z, float w) {\n            float s = 1.0 / sqrt(w * w + x * x + y * y + z * z);\n        \n            return mat3(\n                1. - 2. * (y * y + z * z),\n                2. * (x * y + w * z),\n                2. * (x * z - w * y),\n                2. * (x * y - w * z),\n                1. - 2. * (x * x + z * z),\n                2. * (y * z + w * x),\n                2. * (x * z + w * y),\n                2. * (y * z - w * x),\n                1. - 2. * (x * x + y * y)\n            );\n        }\n\n        const float sqrt8 = sqrt(8.0);\n        const float minAlpha = 1.0 / 255.0;\n\n        const vec4 encodeNorm4 = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\n        const uvec4 mask4 = uvec4(uint(0x000000FF), uint(0x0000FF00), uint(0x00FF0000), uint(0xFF000000));\n        const uvec4 shift4 = uvec4(0, 8, 16, 24);\n        vec4 uintToRGBAVec (uint u) {\n           uvec4 urgba = mask4 & u;\n           urgba = urgba >> shift4;\n           vec4 rgba = vec4(urgba) * encodeNorm4;\n           return rgba;\n        }\n\n        vec2 getDataUV(in int stride, in int offset, in vec2 dimensions) {\n            vec2 samplerUV = vec2(0.0, 0.0);\n            float d = float(splatIndex * uint(stride) + uint(offset)) / dimensions.x;\n            samplerUV.y = float(floor(d)) / dimensions.y;\n            samplerUV.x = fract(d);\n            return samplerUV;\n        }\n\n        vec2 getDataUVF(in uint sIndex, in float stride, in uint offset, in vec2 dimensions) {\n            vec2 samplerUV = vec2(0.0, 0.0);\n            float d = float(uint(float(sIndex) * stride) + offset) / dimensions.x;\n            samplerUV.y = float(floor(d)) / dimensions.y;\n            samplerUV.x = fract(d);\n            return samplerUV;\n        }\n\n        const float SH_C1 = 0.4886025119029199f;\n        const float[5] SH_C2 = float[](1.0925484, -1.0925484, 0.3153916, -1.0925484, 0.5462742);\n\n        void main () {\n\n            uint oddOffset = splatIndex & uint(0x00000001);\n            uint doubleOddOffset = oddOffset * uint(2);\n            bool isEven = oddOffset == uint(0);\n            uint nearestEvenIndex = splatIndex - oddOffset;\n            float fOddOffset = float(oddOffset);\n\n            uvec4 sampledCenterColor = texture(centersColorsTexture, getDataUV(1, 0, centersColorsTextureSize));\n            vec3 splatCenter = uintBitsToFloat(uvec3(sampledCenterColor.gba));\n\n            uint sceneIndex = uint(0);\n            if (sceneCount > 1) {\n                sceneIndex = texture(sceneIndexesTexture, getDataUV(1, 0, sceneIndexesTextureSize)).r;\n            }\n            `,t&&(r+="\n                float splatOpacityFromScene = sceneOpacity[sceneIndex];\n                int sceneVisible = sceneVisibility[sceneIndex];\n                if (splatOpacityFromScene <= 0.01 || sceneVisible == 0) {\n                    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n                    return;\n                }\n            "),r+=e?"\n                mat4 transform = transforms[sceneIndex];\n                mat4 transformModelViewMatrix = viewMatrix * transform;\n            ":"mat4 transformModelViewMatrix = modelViewMatrix;",r+="\n            float sh8BitCompressionRangeMinForScene = sphericalHarmonics8BitCompressionRangeMin[sceneIndex];\n            float sh8BitCompressionRangeMaxForScene = sphericalHarmonics8BitCompressionRangeMax[sceneIndex];\n            float sh8BitCompressionRangeForScene = sh8BitCompressionRangeMaxForScene - sh8BitCompressionRangeMinForScene;\n            float sh8BitCompressionHalfRangeForScene = sh8BitCompressionRangeForScene / 2.0;\n            vec3 vec8BitSHShift = vec3(sh8BitCompressionRangeMinForScene);\n\n            vec4 viewCenter = transformModelViewMatrix * vec4(splatCenter, 1.0);\n\n            vec4 clipCenter = projectionMatrix * viewCenter;\n\n            float clip = 1.2 * clipCenter.w;\n            if (clipCenter.z < -clip || clipCenter.x < -clip || clipCenter.x > clip || clipCenter.y < -clip || clipCenter.y > clip) {\n                gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n                return;\n            }\n\n            vec3 ndcCenter = clipCenter.xyz / clipCenter.w;\n\n            vPosition = position.xy;\n            vColor = uintToRGBAVec(sampledCenterColor.r);\n        ",s>=1&&(r+="   \n            if (sphericalHarmonicsDegree >= 1) {\n            ",r+=e?"\n                    vec3 worldViewDir = normalize(splatCenter - vec3(inverse(transform) * vec4(cameraPosition, 1.0)));\n                ":"\n                    vec3 worldViewDir = normalize(splatCenter - cameraPosition);\n                ",r+="\n                vec3 sh1;\n                vec3 sh2;\n                vec3 sh3;\n            ",s>=2&&(r+="\n                    vec3 sh4;\n                    vec3 sh5;\n                    vec3 sh6;\n                    vec3 sh7;\n                    vec3 sh8;\n                "),1===s?r+="\n                    if (sphericalHarmonicsMultiTextureMode == 0) {\n                        vec2 shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset, sphericalHarmonicsTextureSize);\n                        vec4 sampledSH0123 = texture(sphericalHarmonicsTexture, shUV);\n                        shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset + uint(1), sphericalHarmonicsTextureSize);\n                        vec4 sampledSH4567 = texture(sphericalHarmonicsTexture, shUV);\n                        shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset + uint(2), sphericalHarmonicsTextureSize);\n                        vec4 sampledSH891011 = texture(sphericalHarmonicsTexture, shUV);\n                        sh1 = vec3(sampledSH0123.rgb) * (1.0 - fOddOffset) + vec3(sampledSH0123.ba, sampledSH4567.r) * fOddOffset;\n                        sh2 = vec3(sampledSH0123.a, sampledSH4567.rg) * (1.0 - fOddOffset) + vec3(sampledSH4567.gba) * fOddOffset;\n                        sh3 = vec3(sampledSH4567.ba, sampledSH891011.r) * (1.0 - fOddOffset) + vec3(sampledSH891011.rgb) * fOddOffset;\n                    } else {\n                        vec2 sampledSH01R = texture(sphericalHarmonicsTextureR, getDataUV(2, 0, sphericalHarmonicsTextureSize)).rg;\n                        vec2 sampledSH23R = texture(sphericalHarmonicsTextureR, getDataUV(2, 1, sphericalHarmonicsTextureSize)).rg;\n                        vec2 sampledSH01G = texture(sphericalHarmonicsTextureG, getDataUV(2, 0, sphericalHarmonicsTextureSize)).rg;\n                        vec2 sampledSH23G = texture(sphericalHarmonicsTextureG, getDataUV(2, 1, sphericalHarmonicsTextureSize)).rg;\n                        vec2 sampledSH01B = texture(sphericalHarmonicsTextureB, getDataUV(2, 0, sphericalHarmonicsTextureSize)).rg;\n                        vec2 sampledSH23B = texture(sphericalHarmonicsTextureB, getDataUV(2, 1, sphericalHarmonicsTextureSize)).rg;\n                        sh1 = vec3(sampledSH01R.rg, sampledSH23R.r);\n                        sh2 = vec3(sampledSH01G.rg, sampledSH23G.r);\n                        sh3 = vec3(sampledSH01B.rg, sampledSH23B.r);\n                    }\n                ":2===s&&(r+="\n                    vec4 sampledSH0123;\n                    vec4 sampledSH4567;\n                    vec4 sampledSH891011;\n\n                    vec4 sampledSH0123R;\n                    vec4 sampledSH0123G;\n                    vec4 sampledSH0123B;\n\n                    if (sphericalHarmonicsMultiTextureMode == 0) {\n                        sampledSH0123 = texture(sphericalHarmonicsTexture, getDataUV(6, 0, sphericalHarmonicsTextureSize));\n                        sampledSH4567 = texture(sphericalHarmonicsTexture, getDataUV(6, 1, sphericalHarmonicsTextureSize));\n                        sampledSH891011 = texture(sphericalHarmonicsTexture, getDataUV(6, 2, sphericalHarmonicsTextureSize));\n                        sh1 = sampledSH0123.rgb;\n                        sh2 = vec3(sampledSH0123.a, sampledSH4567.rg);\n                        sh3 = vec3(sampledSH4567.ba, sampledSH891011.r);\n                    } else {\n                        sampledSH0123R = texture(sphericalHarmonicsTextureR, getDataUV(2, 0, sphericalHarmonicsTextureSize));\n                        sampledSH0123G = texture(sphericalHarmonicsTextureG, getDataUV(2, 0, sphericalHarmonicsTextureSize));\n                        sampledSH0123B = texture(sphericalHarmonicsTextureB, getDataUV(2, 0, sphericalHarmonicsTextureSize));\n                        sh1 = vec3(sampledSH0123R.rgb);\n                        sh2 = vec3(sampledSH0123G.rgb);\n                        sh3 = vec3(sampledSH0123B.rgb);\n                    }\n                "),r+="\n                    if (sphericalHarmonics8BitMode == 1) {\n                        sh1 = sh1 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                        sh2 = sh2 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                        sh3 = sh3 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                    }\n                    float x = worldViewDir.x;\n                    float y = worldViewDir.y;\n                    float z = worldViewDir.z;\n                    vColor.rgb += SH_C1 * (-sh1 * y + sh2 * z - sh3 * x);\n            ",s>=2&&(r+="\n                    if (sphericalHarmonicsDegree >= 2) {\n                        float xx = x * x;\n                        float yy = y * y;\n                        float zz = z * z;\n                        float xy = x * y;\n                        float yz = y * z;\n                        float xz = x * z;\n                ",2===s&&(r+="\n                        if (sphericalHarmonicsMultiTextureMode == 0) {\n                            vec4 sampledSH12131415 = texture(sphericalHarmonicsTexture, getDataUV(6, 3, sphericalHarmonicsTextureSize));\n                            vec4 sampledSH16171819 = texture(sphericalHarmonicsTexture, getDataUV(6, 4, sphericalHarmonicsTextureSize));\n                            vec4 sampledSH20212223 = texture(sphericalHarmonicsTexture, getDataUV(6, 5, sphericalHarmonicsTextureSize));\n                            sh4 = sampledSH891011.gba;\n                            sh5 = sampledSH12131415.rgb;\n                            sh6 = vec3(sampledSH12131415.a, sampledSH16171819.rg);\n                            sh7 = vec3(sampledSH16171819.ba, sampledSH20212223.r);\n                            sh8 = sampledSH20212223.gba;\n                        } else {\n                            vec4 sampledSH4567R = texture(sphericalHarmonicsTextureR, getDataUV(2, 1, sphericalHarmonicsTextureSize));\n                            vec4 sampledSH4567G = texture(sphericalHarmonicsTextureG, getDataUV(2, 1, sphericalHarmonicsTextureSize));\n                            vec4 sampledSH4567B = texture(sphericalHarmonicsTextureB, getDataUV(2, 1, sphericalHarmonicsTextureSize));\n                            sh4 = vec3(sampledSH0123R.a, sampledSH4567R.rg);\n                            sh5 = vec3(sampledSH4567R.ba, sampledSH0123G.a);\n                            sh6 = vec3(sampledSH4567G.rgb);\n                            sh7 = vec3(sampledSH4567G.a, sampledSH0123B.a, sampledSH4567B.r);\n                            sh8 = vec3(sampledSH4567B.gba);\n                        }\n                    "),r+="\n                        if (sphericalHarmonics8BitMode == 1) {\n                            sh4 = sh4 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                            sh5 = sh5 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                            sh6 = sh6 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                            sh7 = sh7 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                            sh8 = sh8 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                        }\n\n                        vColor.rgb +=\n                            (SH_C2[0] * xy) * sh4 +\n                            (SH_C2[1] * yz) * sh5 +\n                            (SH_C2[2] * (2.0 * zz - xx - yy)) * sh6 +\n                            (SH_C2[3] * xz) * sh7 +\n                            (SH_C2[4] * (xx - yy)) * sh8;\n                    }\n                "),r+="\n\n                vColor.rgb = clamp(vColor.rgb, vec3(0.), vec3(1.));\n\n            }\n\n            "),r}static getVertexShaderFadeIn(){return"\n            if (fadeInComplete == 0) {\n                float opacityAdjust = 1.0;\n                float centerDist = length(splatCenter - sceneCenter);\n                float renderTime = max(currentTime - firstRenderTime, 0.0);\n\n                float fadeDistance = 0.75;\n                float distanceLoadFadeInFactor = step(visibleRegionFadeStartRadius, centerDist);\n                distanceLoadFadeInFactor = (1.0 - distanceLoadFadeInFactor) +\n                                        (1.0 - clamp((centerDist - visibleRegionFadeStartRadius) / fadeDistance, 0.0, 1.0)) *\n                                        distanceLoadFadeInFactor;\n                opacityAdjust *= distanceLoadFadeInFactor;\n                vColor.a *= opacityAdjust;\n            }\n        "}static getUniforms(e=!1,t=!1,s=0,n=1,o=!1){const a={sceneCenter:{type:"v3",value:new r},fadeInComplete:{type:"i",value:0},orthographicMode:{type:"i",value:0},visibleRegionFadeStartRadius:{type:"f",value:0},visibleRegionRadius:{type:"f",value:0},currentTime:{type:"f",value:0},firstRenderTime:{type:"f",value:0},centersColorsTexture:{type:"t",value:null},sphericalHarmonicsTexture:{type:"t",value:null},sphericalHarmonicsTextureR:{type:"t",value:null},sphericalHarmonicsTextureG:{type:"t",value:null},sphericalHarmonicsTextureB:{type:"t",value:null},sphericalHarmonics8BitCompressionRangeMin:{type:"f",value:[]},sphericalHarmonics8BitCompressionRangeMax:{type:"f",value:[]},focal:{type:"v2",value:new i},orthoZoom:{type:"f",value:1},inverseFocalAdjustment:{type:"f",value:1},viewport:{type:"v2",value:new i},basisViewport:{type:"v2",value:new i},debugColor:{type:"v3",value:new h},centersColorsTextureSize:{type:"v2",value:new i(1024,1024)},sphericalHarmonicsDegree:{type:"i",value:s},sphericalHarmonicsTextureSize:{type:"v2",value:new i(1024,1024)},sphericalHarmonics8BitMode:{type:"i",value:0},sphericalHarmonicsMultiTextureMode:{type:"i",value:0},splatScale:{type:"f",value:n},pointCloudModeEnabled:{type:"i",value:o?1:0},sceneIndexesTexture:{type:"t",value:null},sceneIndexesTextureSize:{type:"v2",value:new i(1024,1024)},sceneCount:{type:"i",value:1}};for(let r=0;r<me.MaxScenes;r++)a.sphericalHarmonics8BitCompressionRangeMin.value.push(-1.5),a.sphericalHarmonics8BitCompressionRangeMax.value.push(me.SphericalHarmonics8BitCompressionRange/2);if(t){const e=[];for(let s=0;s<me.MaxScenes;s++)e.push(1);a.sceneOpacity={type:"f",value:e};const t=[];for(let s=0;s<me.MaxScenes;s++)t.push(1);a.sceneVisibility={type:"i",value:t}}if(e){const e=[];for(let t=0;t<me.MaxScenes;t++)e.push(new d);a.transforms={type:"mat4",value:e}}return a}}class Gs{static build(e=!1,t=!1,s=!1,n=2048,r=1,o=!1,a=0,l=.3){let c=Vs.buildVertexShaderBase(e,t,a,"\n            uniform vec2 covariancesTextureSize;\n            uniform highp sampler2D covariancesTexture;\n            uniform highp usampler2D covariancesTextureHalfFloat;\n            uniform int covariancesAreHalfFloat;\n\n            void fromCovarianceHalfFloatV4(uvec4 val, out vec4 first, out vec4 second) {\n                vec2 r = unpackHalf2x16(val.r);\n                vec2 g = unpackHalf2x16(val.g);\n                vec2 b = unpackHalf2x16(val.b);\n\n                first = vec4(r.x, r.y, g.x, g.y);\n                second = vec4(b.x, b.y, 0.0, 0.0);\n            }\n        ");c+=Gs.buildVertexShaderProjection(s,t,n,l);const h=Gs.buildFragmentShader(),d=Vs.getUniforms(e,t,a,r,o);d.covariancesTextureSize={type:"v2",value:new i(1024,1024)},d.covariancesTexture={type:"t",value:null},d.covariancesTextureHalfFloat={type:"t",value:null},d.covariancesAreHalfFloat={type:"i",value:0};return new D({uniforms:d,vertexShader:c,fragmentShader:h,transparent:!0,alphaTest:1,blending:W,depthTest:!0,depthWrite:!1,side:L})}static buildVertexShaderProjection(e,t,s,n){let r="\n\n            vec4 sampledCovarianceA;\n            vec4 sampledCovarianceB;\n            vec3 cov3D_M11_M12_M13;\n            vec3 cov3D_M22_M23_M33;\n            if (covariancesAreHalfFloat == 0) {\n                sampledCovarianceA = texture(covariancesTexture, getDataUVF(nearestEvenIndex, 1.5, oddOffset,\n                                                                            covariancesTextureSize));\n                sampledCovarianceB = texture(covariancesTexture, getDataUVF(nearestEvenIndex, 1.5, oddOffset + uint(1),\n                                                                            covariancesTextureSize));\n\n                cov3D_M11_M12_M13 = vec3(sampledCovarianceA.rgb) * (1.0 - fOddOffset) +\n                                    vec3(sampledCovarianceA.ba, sampledCovarianceB.r) * fOddOffset;\n                cov3D_M22_M23_M33 = vec3(sampledCovarianceA.a, sampledCovarianceB.rg) * (1.0 - fOddOffset) +\n                                    vec3(sampledCovarianceB.gba) * fOddOffset;\n            } else {\n                uvec4 sampledCovarianceU = texture(covariancesTextureHalfFloat, getDataUV(1, 0, covariancesTextureSize));\n                fromCovarianceHalfFloatV4(sampledCovarianceU, sampledCovarianceA, sampledCovarianceB);\n                cov3D_M11_M12_M13 = sampledCovarianceA.rgb;\n                cov3D_M22_M23_M33 = vec3(sampledCovarianceA.a, sampledCovarianceB.rg);\n            }\n        \n            // Construct the 3D covariance matrix\n            mat3 Vrk = mat3(\n                cov3D_M11_M12_M13.x, cov3D_M11_M12_M13.y, cov3D_M11_M12_M13.z,\n                cov3D_M11_M12_M13.y, cov3D_M22_M23_M33.x, cov3D_M22_M23_M33.y,\n                cov3D_M11_M12_M13.z, cov3D_M22_M23_M33.y, cov3D_M22_M23_M33.z\n            );\n\n            mat3 J;\n            if (orthographicMode == 1) {\n                // Since the projection is linear, we don't need an approximation\n                J = transpose(mat3(orthoZoom, 0.0, 0.0,\n                                0.0, orthoZoom, 0.0,\n                                0.0, 0.0, 0.0));\n            } else {\n                // Construct the Jacobian of the affine approximation of the projection matrix. It will be used to transform the\n                // 3D covariance matrix instead of using the actual projection matrix because that transformation would\n                // require a non-linear component (perspective division) which would yield a non-gaussian result.\n                float s = 1.0 / (viewCenter.z * viewCenter.z);\n                J = mat3(\n                    focal.x / viewCenter.z, 0., -(focal.x * viewCenter.x) * s,\n                    0., focal.y / viewCenter.z, -(focal.y * viewCenter.y) * s,\n                    0., 0., 0.\n                );\n            }\n\n            // Concatenate the projection approximation with the model-view transformation\n            mat3 W = transpose(mat3(transformModelViewMatrix));\n            mat3 T = W * J;\n\n            // Transform the 3D covariance matrix (Vrk) to compute the 2D covariance matrix\n            mat3 cov2Dm = transpose(T) * Vrk * T;\n            ";return r+=e?`\n                float detOrig = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\n                cov2Dm[0][0] += ${n};\n                cov2Dm[1][1] += ${n};\n                float detBlur = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\n                vColor.a *= sqrt(max(detOrig / detBlur, 0.0));\n                if (vColor.a < minAlpha) return;\n            `:`\n                cov2Dm[0][0] += ${n};\n                cov2Dm[1][1] += ${n};\n            `,r+=`\n\n            // We are interested in the upper-left 2x2 portion of the projected 3D covariance matrix because\n            // we only care about the X and Y values. We want the X-diagonal, cov2Dm[0][0],\n            // the Y-diagonal, cov2Dm[1][1], and the correlation between the two cov2Dm[0][1]. We don't\n            // need cov2Dm[1][0] because it is a symetric matrix.\n            vec3 cov2Dv = vec3(cov2Dm[0][0], cov2Dm[0][1], cov2Dm[1][1]);\n\n            // We now need to solve for the eigen-values and eigen vectors of the 2D covariance matrix\n            // so that we can determine the 2D basis for the splat. This is done using the method described\n            // here: https://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\n            // After calculating the eigen-values and eigen-vectors, we calculate the basis for rendering the splat\n            // by normalizing the eigen-vectors and then multiplying them by (sqrt(8) * sqrt(eigen-value)), which is\n            // equal to scaling them by sqrt(8) standard deviations.\n            //\n            // This is a different approach than in the original work at INRIA. In that work they compute the\n            // max extents of the projected splat in screen space to form a screen-space aligned bounding rectangle\n            // which forms the geometry that is actually rasterized. The dimensions of that bounding box are 3.0\n            // times the square root of the maximum eigen-value, or 3 standard deviations. They then use the inverse\n            // 2D covariance matrix (called 'conic') in the CUDA rendering thread to determine fragment opacity by\n            // calculating the full gaussian: exp(-0.5 * (X - mean) * conic * (X - mean)) * splat opacity\n            float a = cov2Dv.x;\n            float d = cov2Dv.z;\n            float b = cov2Dv.y;\n            float D = a * d - b * b;\n            float trace = a + d;\n            float traceOver2 = 0.5 * trace;\n            float term2 = sqrt(max(0.1f, traceOver2 * traceOver2 - D));\n            float eigenValue1 = traceOver2 + term2;\n            float eigenValue2 = traceOver2 - term2;\n\n            if (pointCloudModeEnabled == 1) {\n                eigenValue1 = eigenValue2 = 0.2;\n            }\n\n            if (eigenValue2 <= 0.0) return;\n\n            vec2 eigenVector1 = normalize(vec2(b, eigenValue1 - a));\n            // since the eigen vectors are orthogonal, we derive the second one from the first\n            vec2 eigenVector2 = vec2(eigenVector1.y, -eigenVector1.x);\n\n            // We use sqrt(8) standard deviations instead of 3 to eliminate more of the splat with a very low opacity.\n            vec2 basisVector1 = eigenVector1 * splatScale * min(sqrt8 * sqrt(eigenValue1), ${parseInt(s)}.0);\n            vec2 basisVector2 = eigenVector2 * splatScale * min(sqrt8 * sqrt(eigenValue2), ${parseInt(s)}.0);\n            `,t&&(r+="\n                vColor.a *= splatOpacityFromScene;\n            "),r+="\n            vec2 ndcOffset = vec2(vPosition.x * basisVector1 + vPosition.y * basisVector2) *\n                             basisViewport * 2.0 * inverseFocalAdjustment;\n\n            vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\n            gl_Position = quadPos;\n\n            // Scale the position data we send to the fragment shader\n            vPosition *= sqrt8;\n        ",r+=Vs.getVertexShaderFadeIn(),r+="}",r}static buildFragmentShader(){let e="\n            precision highp float;\n            #include <common>\n \n            uniform vec3 debugColor;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n            varying vec2 vPosition;\n        ";return e+="\n            void main () {\n                // Compute the positional squared distance from the center of the splat to the current fragment.\n                float A = dot(vPosition, vPosition);\n                // Since the positional data in vPosition has been scaled by sqrt(8), the squared result will be\n                // scaled by a factor of 8. If the squared result is larger than 8, it means it is outside the ellipse\n                // defined by the rectangle formed by vPosition. It also means it's farther\n                // away than sqrt(8) standard deviations from the mean.\n                if (A > 8.0) discard;\n                vec3 color = vColor.rgb;\n\n                // Since the rendered splat is scaled by sqrt(8), the inverse covariance matrix that is part of\n                // the gaussian formula becomes the identity matrix. We're then left with (X - mean) * (X - mean),\n                // and since 'mean' is zero, we have X * X, which is the same as A:\n                float opacity = exp(-0.5 * A) * vColor.a;\n\n                gl_FragColor = vec4(color.rgb, opacity);\n            }\n        ","\n            precision highp float;\n            #include <common>\n \n            uniform vec3 debugColor;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n            varying vec2 vPosition;\n        \n            void main () {\n                // Compute the positional squared distance from the center of the splat to the current fragment.\n                float A = dot(vPosition, vPosition);\n                // Since the positional data in vPosition has been scaled by sqrt(8), the squared result will be\n                // scaled by a factor of 8. If the squared result is larger than 8, it means it is outside the ellipse\n                // defined by the rectangle formed by vPosition. It also means it's farther\n                // away than sqrt(8) standard deviations from the mean.\n                if (A > 8.0) discard;\n                vec3 color = vColor.rgb;\n\n                // Since the rendered splat is scaled by sqrt(8), the inverse covariance matrix that is part of\n                // the gaussian formula becomes the identity matrix. We're then left with (X - mean) * (X - mean),\n                // and since 'mean' is zero, we have X * X, which is the same as A:\n                float opacity = exp(-0.5 * A) * vColor.a;\n\n                gl_FragColor = vec4(color.rgb, opacity);\n            }\n        "}}class Ks{static build(e=!1,t=!1,s=1,n=!1,r=0){let o=Vs.buildVertexShaderBase(e,t,r,"\n            uniform vec2 scaleRotationsTextureSize;\n            uniform highp sampler2D scaleRotationsTexture;\n            varying mat3 vT;\n            varying vec2 vQuadCenter;\n            varying vec2 vFragCoord;\n        ");o+=Ks.buildVertexShaderProjection();const a=Ks.buildFragmentShader(),l=Vs.getUniforms(e,t,r,s,n);l.scaleRotationsTexture={type:"t",value:null},l.scaleRotationsTextureSize={type:"v2",value:new i(1024,1024)};return new D({uniforms:l,vertexShader:o,fragmentShader:a,transparent:!0,alphaTest:1,blending:W,depthTest:!0,depthWrite:!1,side:L})}static buildVertexShaderProjection(){let e="\n\n            vec4 scaleRotationA = texture(scaleRotationsTexture, getDataUVF(nearestEvenIndex, 1.5,\n                                                                            oddOffset, scaleRotationsTextureSize));\n            vec4 scaleRotationB = texture(scaleRotationsTexture, getDataUVF(nearestEvenIndex, 1.5,\n                                                                            oddOffset + uint(1), scaleRotationsTextureSize));\n\n            vec3 scaleRotation123 = vec3(scaleRotationA.rgb) * (1.0 - fOddOffset) +\n                                    vec3(scaleRotationA.ba, scaleRotationB.r) * fOddOffset;\n            vec3 scaleRotation456 = vec3(scaleRotationA.a, scaleRotationB.rg) * (1.0 - fOddOffset) +\n                                    vec3(scaleRotationB.gba) * fOddOffset;\n\n            float missingW = sqrt(1.0 - scaleRotation456.x * scaleRotation456.x - scaleRotation456.y *\n                                    scaleRotation456.y - scaleRotation456.z * scaleRotation456.z);\n            mat3 R = quaternionToRotationMatrix(scaleRotation456.r, scaleRotation456.g, scaleRotation456.b, missingW);\n            mat3 S = mat3(scaleRotation123.r, 0.0, 0.0,\n                            0.0, scaleRotation123.g, 0.0,\n                            0.0, 0.0, scaleRotation123.b);\n            \n            mat3 L = R * S;\n\n            mat3x4 splat2World = mat3x4(vec4(L[0], 0.0),\n                                        vec4(L[1], 0.0),\n                                        vec4(splatCenter.x, splatCenter.y, splatCenter.z, 1.0));\n\n            mat4 world2ndc = transpose(projectionMatrix * transformModelViewMatrix);\n\n            mat3x4 ndc2pix = mat3x4(vec4(viewport.x / 2.0, 0.0, 0.0, (viewport.x - 1.0) / 2.0),\n                                    vec4(0.0, viewport.y / 2.0, 0.0, (viewport.y - 1.0) / 2.0),\n                                    vec4(0.0, 0.0, 0.0, 1.0));\n\n            mat3 T = transpose(splat2World) * world2ndc * ndc2pix;\n            vec3 normal = vec3(viewMatrix * vec4(L[0][2], L[1][2], L[2][2], 0.0));\n        ";return e+="\n\n                mat4 splat2World4 = mat4(vec4(L[0], 0.0),\n                                        vec4(L[1], 0.0),\n                                        vec4(L[2], 0.0),\n                                        vec4(splatCenter.x, splatCenter.y, splatCenter.z, 1.0));\n\n                mat4 Tt = transpose(transpose(splat2World4) * world2ndc);\n\n                vec4 tempPoint1 = Tt * vec4(1.0, 0.0, 0.0, 1.0);\n                tempPoint1 /= tempPoint1.w;\n\n                vec4 tempPoint2 = Tt * vec4(0.0, 1.0, 0.0, 1.0);\n                tempPoint2 /= tempPoint2.w;\n\n                vec4 center = Tt * vec4(0.0, 0.0, 0.0, 1.0);\n                center /= center.w;\n\n                vec2 basisVector1 = tempPoint1.xy - center.xy;\n                vec2 basisVector2 = tempPoint2.xy - center.xy;\n\n                vec2 basisVector1Screen = basisVector1 * 0.5 * viewport;\n                vec2 basisVector2Screen = basisVector2 * 0.5 * viewport;\n\n                const float minPix = 1.;\n                if (length(basisVector1Screen) < minPix || length(basisVector2Screen) < minPix) {\n                    \n            vec3 T0 = vec3(T[0][0], T[0][1], T[0][2]);\n            vec3 T1 = vec3(T[1][0], T[1][1], T[1][2]);\n            vec3 T3 = vec3(T[2][0], T[2][1], T[2][2]);\n\n            vec3 tempPoint = vec3(1.0, 1.0, -1.0);\n            float distance = (T3.x * T3.x * tempPoint.x) + (T3.y * T3.y * tempPoint.y) + (T3.z * T3.z * tempPoint.z);\n            vec3 f = (1.0 / distance) * tempPoint;\n            if (abs(distance) < 0.00001) return;\n\n            float pointImageX = (T0.x * T3.x * f.x) + (T0.y * T3.y * f.y) + (T0.z * T3.z * f.z);\n            float pointImageY = (T1.x * T3.x * f.x) + (T1.y * T3.y * f.y) + (T1.z * T3.z * f.z);\n            vec2 pointImage = vec2(pointImageX, pointImageY);\n\n            float tempX = (T0.x * T0.x * f.x) + (T0.y * T0.y * f.y) + (T0.z * T0.z * f.z);\n            float tempY = (T1.x * T1.x * f.x) + (T1.y * T1.y * f.y) + (T1.z * T1.z * f.z);\n            vec2 temp = vec2(tempX, tempY);\n\n            vec2 halfExtend = pointImage * pointImage - temp;\n            vec2 extent = sqrt(max(vec2(0.0001), halfExtend));\n            float radius = max(extent.x, extent.y);\n\n            vec2 ndcOffset = ((position.xy * radius * 3.0) * basisViewport * 2.0);\n\n            vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\n            gl_Position = quadPos;\n\n            vT = T;\n            vQuadCenter = pointImage;\n            vFragCoord = (quadPos.xy * 0.5 + 0.5) * viewport;\n        \n                } else {\n                    vec2 ndcOffset = vec2(position.x * basisVector1 + position.y * basisVector2) * 3.0 * inverseFocalAdjustment;\n                    vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\n                    gl_Position = quadPos;\n\n                    vT = T;\n                    vQuadCenter = center.xy;\n                    vFragCoord = (quadPos.xy * 0.5 + 0.5) * viewport;\n                }\n            ",e+=Vs.getVertexShaderFadeIn(),e+="}",e}static buildFragmentShader(){return"\n            precision highp float;\n            #include <common>\n\n            uniform vec3 debugColor;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n            varying vec2 vPosition;\n            varying mat3 vT;\n            varying vec2 vQuadCenter;\n            varying vec2 vFragCoord;\n\n            void main () {\n\n                const float FilterInvSquare = 2.0;\n                const float near_n = 0.2;\n                const float T = 1.0;\n\n                vec2 xy = vQuadCenter;\n                vec3 Tu = vT[0];\n                vec3 Tv = vT[1];\n                vec3 Tw = vT[2];\n                vec3 k = vFragCoord.x * Tw - Tu;\n                vec3 l = vFragCoord.y * Tw - Tv;\n                vec3 p = cross(k, l);\n                if (p.z == 0.0) discard;\n                vec2 s = vec2(p.x / p.z, p.y / p.z);\n                float rho3d = (s.x * s.x + s.y * s.y); \n                vec2 d = vec2(xy.x - vFragCoord.x, xy.y - vFragCoord.y);\n                float rho2d = FilterInvSquare * (d.x * d.x + d.y * d.y); \n\n                // compute intersection and depth\n                float rho = min(rho3d, rho2d);\n                float depth = (rho3d <= rho2d) ? (s.x * Tw.x + s.y * Tw.y) + Tw.z : Tw.z; \n                if (depth < near_n) discard;\n                //  vec4 nor_o = collected_normal_opacity[j];\n                //  float normal[3] = {nor_o.x, nor_o.y, nor_o.z};\n                float opa = vColor.a;\n\n                float power = -0.5f * rho;\n                if (power > 0.0f) discard;\n\n                // Eq. (2) from 3D Gaussian splatting paper.\n                // Obtain alpha by multiplying with Gaussian opacity\n                // and its exponential falloff from mean.\n                // Avoid numerical instabilities (see paper appendix). \n                float alpha = min(0.99f, opa * exp(power));\n                if (alpha < 1.0f / 255.0f) discard;\n                float test_T = T * (1.0 - alpha);\n                if (test_T < 0.0001)discard;\n\n                float w = alpha * T;\n                gl_FragColor = vec4(vColor.rgb, w);\n            }\n        "}}class qs{static build(e){const t=new A;t.setIndex([0,1,2,0,2,3]);const s=new Float32Array(12),n=new V(s,3);t.setAttribute("position",n),n.setXYZ(0,-1,-1,0),n.setXYZ(1,-1,1,0),n.setXYZ(2,1,1,0),n.setXYZ(3,1,-1,0),n.needsUpdate=!0;const r=(new G).copy(t),i=new Uint32Array(e),o=new K(i,1,!1);return o.setUsage(q),r.setAttribute("splatIndex",o),r.instanceCount=0,r}}class Ws extends k{constructor(e,t=new r,s=new p,n=new r(1,1,1),i=1,o=1,a=!0){super(),this.splatBuffer=e,this.position.copy(t),this.quaternion.copy(s),this.scale.copy(n),this.transform=new d,this.minimumAlpha=i,this.opacity=o,this.visible=a}copyTransformData(e){this.position.copy(e.position),this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.transform.copy(e.transform)}updateTransform(e){e?(this.matrixWorldAutoUpdate&&this.updateWorldMatrix(!0,!1),this.transform.copy(this.matrixWorld)):(this.matrixAutoUpdate&&this.updateMatrix(),this.transform.copy(this.matrix))}}class js{static idGen=0;constructor(e,t,s,n){this.min=(new r).copy(e),this.max=(new r).copy(t),this.boundingBox=new f(this.min,this.max),this.center=(new r).copy(this.max).sub(this.min).multiplyScalar(.5).add(this.min),this.depth=s,this.children=[],this.data=null,this.id=n||js.idGen++}}class Ys{constructor(e,t){this.maxDepth=e,this.maxCentersPerNode=t,this.sceneDimensions=new r,this.sceneMin=new r,this.sceneMax=new r,this.rootNode=null,this.nodesWithIndexes=[],this.splatMesh=null}static convertWorkerSubTreeNode(e){const t=(new r).fromArray(e.min),s=(new r).fromArray(e.max),n=new js(t,s,e.depth,e.id);if(e.data.indexes){n.data={indexes:[]};for(let t of e.data.indexes)n.data.indexes.push(t)}if(e.children)for(let r of e.children)n.children.push(Ys.convertWorkerSubTreeNode(r));return n}static convertWorkerSubTree(e,t){const s=new Ys(e.maxDepth,e.maxCentersPerNode);s.sceneMin=(new r).fromArray(e.sceneMin),s.sceneMax=(new r).fromArray(e.sceneMax),s.splatMesh=t,s.rootNode=Ys.convertWorkerSubTreeNode(e.rootNode);const n=(e,t)=>{0===e.children.length&&t(e);for(let s of e.children)n(s,t)};return s.nodesWithIndexes=[],n(s.rootNode,(e=>{e.data&&e.data.indexes&&e.data.indexes.length>0&&s.nodesWithIndexes.push(e)})),s}}function Xs(e){let t=0;class s{constructor(e,t){this.min=[e[0],e[1],e[2]],this.max=[t[0],t[1],t[2]]}containsPoint(e){return e[0]>=this.min[0]&&e[0]<=this.max[0]&&e[1]>=this.min[1]&&e[1]<=this.max[1]&&e[2]>=this.min[2]&&e[2]<=this.max[2]}}class n{constructor(e,t){this.maxDepth=e,this.maxCentersPerNode=t,this.sceneDimensions=[],this.sceneMin=[],this.sceneMax=[],this.rootNode=null,this.addedIndexes={},this.nodesWithIndexes=[],this.splatMesh=null,this.disposed=!1}}class r{constructor(e,s,n,r){this.min=[e[0],e[1],e[2]],this.max=[s[0],s[1],s[2]],this.center=[.5*(s[0]-e[0])+e[0],.5*(s[1]-e[1])+e[1],.5*(s[2]-e[2])+e[2]],this.depth=n,this.children=[],this.data=null,this.id=r||t++}}processSplatTreeNode=function(e,t,n,i){const o=t.data.indexes.length;if(o<e.maxCentersPerNode||t.depth>e.maxDepth){const s=[];for(let n=0;n<t.data.indexes.length;n++)e.addedIndexes[t.data.indexes[n]]||(s.push(t.data.indexes[n]),e.addedIndexes[t.data.indexes[n]]=!0);return t.data.indexes=s,t.data.indexes.sort(((e,t)=>e>t?1:-1)),void e.nodesWithIndexes.push(t)}const a=[t.max[0]-t.min[0],t.max[1]-t.min[1],t.max[2]-t.min[2]],l=[.5*a[0],.5*a[1],.5*a[2]],c=[t.min[0]+l[0],t.min[1]+l[1],t.min[2]+l[2]],h=[new s([c[0]-l[0],c[1],c[2]-l[2]],[c[0],c[1]+l[1],c[2]]),new s([c[0],c[1],c[2]-l[2]],[c[0]+l[0],c[1]+l[1],c[2]]),new s([c[0],c[1],c[2]],[c[0]+l[0],c[1]+l[1],c[2]+l[2]]),new s([c[0]-l[0],c[1],c[2]],[c[0],c[1]+l[1],c[2]+l[2]]),new s([c[0]-l[0],c[1]-l[1],c[2]-l[2]],[c[0],c[1],c[2]]),new s([c[0],c[1]-l[1],c[2]-l[2]],[c[0]+l[0],c[1],c[2]]),new s([c[0],c[1]-l[1],c[2]],[c[0]+l[0],c[1],c[2]+l[2]]),new s([c[0]-l[0],c[1]-l[1],c[2]],[c[0],c[1],c[2]+l[2]])],d=[];for(let s=0;s<h.length;s++)d[s]=[];const p=[0,0,0];for(let s=0;s<o;s++){const e=t.data.indexes[s],r=n[e];p[0]=i[r],p[1]=i[r+1],p[2]=i[r+2];for(let t=0;t<h.length;t++)h[t].containsPoint(p)&&d[t].push(e)}for(let s=0;s<h.length;s++){const e=new r(h[s].min,h[s].max,t.depth+1);e.data={indexes:d[s]},t.children.push(e)}t.data={};for(let s of t.children)processSplatTreeNode(e,s,n,i)};const i=(e,t,s)=>{const i=[0,0,0],o=[0,0,0],a=[],l=Math.floor(e.length/4);for(let n=0;n<l;n++){const t=4*n,s=e[t],r=e[t+1],l=e[t+2],c=Math.round(e[t+3]);(0===n||s<i[0])&&(i[0]=s),(0===n||s>o[0])&&(o[0]=s),(0===n||r<i[1])&&(i[1]=r),(0===n||r>o[1])&&(o[1]=r),(0===n||l<i[2])&&(i[2]=l),(0===n||l>o[2])&&(o[2]=l),a.push(c)}const c=new n(t,s);return c.sceneMin=i,c.sceneMax=o,c.rootNode=new r(c.sceneMin,c.sceneMax,0),c.rootNode.data={indexes:a},c};e.onmessage=t=>{t.data.process&&function(t,s,n){const r=[];for(let e of t){const t=Math.floor(e.length/4);for(let s=0;s<t;s++){const t=4*s;r[Math.round(e[t+3])]=t}}const o=[];for(let e of t){const t=i(e,s,n);o.push(t),processSplatTreeNode(t,t.rootNode,r,e)}e.postMessage({subTrees:o})}(t.data.process.centers,t.data.process.maxDepth,t.data.process.maxCentersPerNode)}}class Js{constructor(e,t){this.maxDepth=e,this.maxCentersPerNode=t,this.subTrees=[],this.splatMesh=null}dispose(){this.diposeSplatTreeWorker(),this.disposed=!0}diposeSplatTreeWorker(){this.splatTreeWorker&&this.splatTreeWorker.terminate(),this.splatTreeWorker=null}processSplatMesh=function(e,t=()=>!0,s,n){this.splatTreeWorker||(this.splatTreeWorker=new Worker(URL.createObjectURL(new Blob(["(",Xs.toString(),")(self)"],{type:"application/javascript"})))),this.splatMesh=e,this.subTrees=[];const i=new r,o=(s,n)=>{const r=new Float32Array(4*n);let o=0;for(let a=0;a<n;a++){const n=a+s;if(t(n)){e.getSplatCenter(n,i);const t=4*o;r[t]=i.x,r[t+1]=i.y,r[t+2]=i.z,r[t+3]=n,o++}}return r};return new Promise((t=>{const r=()=>!!this.disposed&&(this.diposeSplatTreeWorker(),t(),!0);s&&s(!1),oe((()=>{if(r())return;const i=[];if(e.dynamicMode){let t=0;for(let s=0;s<e.scenes.length;s++){const n=e.getScene(s).splatBuffer.getSplatCount(),r=o(t,n);i.push(r),t+=n}}else{const t=o(0,e.getSplatCount());i.push(t)}this.splatTreeWorker.onmessage=s=>{r()||s.data.subTrees&&(n&&n(!1),oe((()=>{if(!r()){for(let t of s.data.subTrees){const s=Ys.convertWorkerSubTree(t,e);this.subTrees.push(s)}this.diposeSplatTreeWorker(),n&&n(!0),oe((()=>{t()}))}})))},oe((()=>{if(r())return;s&&s(!0);const e=i.map((e=>e.buffer));!function(e,t,s,n,r){e.postMessage({process:{centers:t,maxDepth:n,maxCentersPerNode:r}},s)}(this.splatTreeWorker,i,e,this.maxDepth,this.maxCentersPerNode)}))}))}))};countLeaves(){let e=0;return this.visitLeaves((()=>{e++})),e}visitLeaves(e){const t=(e,s)=>{0===e.children.length&&s(e);for(let n of e.children)t(n,s)};for(let s of this.subTrees)t(s.rootNode,e)}}function Zs(e){const t={};function s(s){if(void 0!==t[s])return t[s];let n;switch(s){case"WEBGL_depth_texture":n=e.getExtension("WEBGL_depth_texture")||e.getExtension("MOZ_WEBGL_depth_texture")||e.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":n=e.getExtension("EXT_texture_filter_anisotropic")||e.getExtension("MOZ_EXT_texture_filter_anisotropic")||e.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":n=e.getExtension("WEBGL_compressed_texture_s3tc")||e.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":n=e.getExtension("WEBGL_compressed_texture_pvrtc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:n=e.getExtension(s)}return t[s]=n,n}return{has:function(e){return null!==s(e)},init:function(e){e.isWebGL2?(s("EXT_color_buffer_float"),s("WEBGL_clip_cull_distance")):(s("WEBGL_depth_texture"),s("OES_texture_float"),s("OES_texture_half_float"),s("OES_texture_half_float_linear"),s("OES_standard_derivatives"),s("OES_element_index_uint"),s("OES_vertex_array_object"),s("ANGLE_instanced_arrays")),s("OES_texture_float_linear"),s("EXT_color_buffer_half_float"),s("WEBGL_multisampled_render_to_texture")},get:function(e){const t=s(e);return null===t&&console.warn("THREE.WebGLRenderer: "+e+" extension not supported."),t}}}function $s(e,t,s){let n;function r(t){if("highp"===t){if(e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.HIGH_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.HIGH_FLOAT).precision>0)return"highp";t="mediump"}return"mediump"===t&&e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.MEDIUM_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}const i="undefined"!=typeof WebGL2RenderingContext&&"WebGL2RenderingContext"===e.constructor.name;let o=void 0!==s.precision?s.precision:"highp";const a=r(o);a!==o&&(console.warn("THREE.WebGLRenderer:",o,"not supported, using",a,"instead."),o=a);const l=i||t.has("WEBGL_draw_buffers"),c=!0===s.logarithmicDepthBuffer,h=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS),d=e.getParameter(e.MAX_VERTEX_TEXTURE_IMAGE_UNITS),p=e.getParameter(e.MAX_TEXTURE_SIZE),u=e.getParameter(e.MAX_CUBE_MAP_TEXTURE_SIZE),m=e.getParameter(e.MAX_VERTEX_ATTRIBS),A=e.getParameter(e.MAX_VERTEX_UNIFORM_VECTORS),f=e.getParameter(e.MAX_VARYING_VECTORS),g=e.getParameter(e.MAX_FRAGMENT_UNIFORM_VECTORS),S=d>0,C=i||t.has("OES_texture_float");return{isWebGL2:i,drawBuffers:l,getMaxAnisotropy:function(){if(void 0!==n)return n;if(!0===t.has("EXT_texture_filter_anisotropic")){const s=t.get("EXT_texture_filter_anisotropic");n=e.getParameter(s.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else n=0;return n},getMaxPrecision:r,precision:o,logarithmicDepthBuffer:c,maxTextures:h,maxVertexTextures:d,maxTextureSize:p,maxCubemapSize:u,maxAttributes:m,maxVertexUniforms:A,maxVaryings:f,maxFragmentUniforms:g,vertexTextures:S,floatFragmentTextures:C,floatVertexTextures:S&&C,maxSamples:i?e.getParameter(e.MAX_SAMPLES):0}}const en=0,tn=2,sn=0,nn=3,rn=new A,on=new s,an=16777216;class ln extends n{constructor(e=_s,t=!1,s=!1,n=!1,i=1,o=!0,a=!1,l=!1,c=1024,h=sn,d=0,p=1,u=.3){super(rn,on),this.renderer=void 0,this.splatRenderMode=e,this.dynamicMode=t,this.enableOptionalEffects=s,this.halfPrecisionCovariancesOnGPU=n,this.devicePixelRatio=i,this.enableDistancesComputationOnGPU=o,this.integerBasedDistancesComputation=a,this.antialiased=l,this.kernel2DSize=u,this.maxScreenSpaceSplatSize=c,this.logLevel=h,this.sphericalHarmonicsDegree=d,this.minSphericalHarmonicsDegree=0,this.sceneFadeInRateMultiplier=p,this.scenes=[],this.splatTree=null,this.baseSplatTree=null,this.splatDataTextures={},this.distancesTransformFeedback={id:null,vertexShader:null,fragmentShader:null,program:null,centersBuffer:null,sceneIndexesBuffer:null,outDistancesBuffer:null,centersLoc:-1,modelViewProjLoc:-1,sceneIndexesLoc:-1,transformsLocs:[]},this.globalSplatIndexToLocalSplatIndexMap=[],this.globalSplatIndexToSceneIndexMap=[],this.lastBuildSplatCount=0,this.lastBuildScenes=[],this.lastBuildMaxSplatCount=0,this.lastBuildSceneCount=0,this.firstRenderTime=-1,this.finalBuild=!1,this.webGLUtils=null,this.boundingBox=new f,this.calculatedSceneCenter=new r,this.maxSplatDistanceFromSceneCenter=0,this.visibleRegionBufferRadius=0,this.visibleRegionRadius=0,this.visibleRegionFadeStartRadius=0,this.visibleRegionChanging=!1,this.splatScale=1,this.pointCloudModeEnabled=!1,this.disposed=!1,this.lastRenderer=null,this.visible=!1}static buildScenes(e,t,s){const n=[];n.length=t.length;for(let i=0;i<t.length;i++){const o=t[i],a=s[i]||{};let l=a.position||[0,0,0],c=a.rotation||[0,0,0,1],h=a.scale||[1,1,1];const d=(new r).fromArray(l),u=(new p).fromArray(c),m=(new r).fromArray(h),A=ln.createScene(o,d,u,m,a.splatAlphaRemovalThreshold||1,a.opacity,a.visible);e.add(A),n[i]=A}return n}static createScene(e,t,s,n,r,i=1,o=!0){return new Ws(e,t,s,n,r,i,o)}static buildSplatIndexMaps(e){const t=[],s=[];let n=0;for(let r=0;r<e.length;r++){const i=e[r].getMaxSplatCount();for(let e=0;e<i;e++)t[n]=e,s[n]=r,n++}return{localSplatIndexMap:t,sceneIndexMap:s}}buildSplatTree=function(e=[],t,s){return new Promise((n=>{this.disposeSplatTree(),this.baseSplatTree=new Js(8,1e3);const r=performance.now(),i=new m;this.baseSplatTree.processSplatMesh(this,(t=>{this.getSplatColor(t,i);const s=this.getSceneIndexForSplat(t),n=e[s]||1;return i.w>=n}),t,s).then((()=>{const e=performance.now()-r;if(this.logLevel>=nn&&console.log("SplatTree build: "+e+" ms"),this.disposed)n();else{this.splatTree=this.baseSplatTree,this.baseSplatTree=null;let e=0,t=0,s=0;this.splatTree.visitLeaves((n=>{const r=n.data.indexes.length;r>0&&(t+=r,s++,e++)})),this.logLevel>=nn&&(console.log(`SplatTree leaves: ${this.splatTree.countLeaves()}`),console.log(`SplatTree leaves with splats:${e}`),t/=s,console.log(`Avg splat count per node: ${t}`),console.log(`Total splat count: ${this.getSplatCount()}`)),n()}}))}))};build(e,t,s=!0,n=!1,r,i,o=!0){this.sceneOptions=t,this.finalBuild=n;const a=ln.getTotalMaxSplatCountForSplatBuffers(e),l=ln.buildScenes(this,e,t);if(s)for(let m=0;m<this.scenes.length&&m<l.length;m++){const e=l[m],t=this.getScene(m);e.copyTransformData(t)}this.scenes=l;let c=3;for(let m of e){const e=m.getMinSphericalHarmonicsDegree();e<c&&(c=e)}this.minSphericalHarmonicsDegree=Math.min(c,this.sphericalHarmonicsDegree);let h=!1;if(e.length!==this.lastBuildScenes.length)h=!0;else for(let m=0;m<e.length;m++){if(e[m]!==this.lastBuildScenes[m].splatBuffer){h=!0;break}}let d=!0;if((1!==this.scenes.length||this.lastBuildSceneCount!==this.scenes.length||this.lastBuildMaxSplatCount!==a||h)&&(d=!1),!d){this.boundingBox=new f,o||(this.maxSplatDistanceFromSceneCenter=0,this.visibleRegionBufferRadius=0,this.visibleRegionRadius=0,this.visibleRegionFadeStartRadius=0,this.firstRenderTime=-1),this.lastBuildScenes=[],this.lastBuildSplatCount=0,this.lastBuildMaxSplatCount=0,this.disposeMeshData(),this.geometry=qs.build(a),this.splatRenderMode===_s?this.material=Gs.build(this.dynamicMode,this.enableOptionalEffects,this.antialiased,this.maxScreenSpaceSplatSize,this.splatScale,this.pointCloudModeEnabled,this.minSphericalHarmonicsDegree,this.kernel2DSize):this.material=Ks.build(this.dynamicMode,this.enableOptionalEffects,this.splatScale,this.pointCloudModeEnabled,this.minSphericalHarmonicsDegree);const t=ln.buildSplatIndexMaps(e);this.globalSplatIndexToLocalSplatIndexMap=t.localSplatIndexMap,this.globalSplatIndexToSceneIndexMap=t.sceneIndexMap}const p=this.getSplatCount(!0);this.enableDistancesComputationOnGPU&&this.setupDistancesComputationTransformFeedback();const u=this.refreshGPUDataFromSplatBuffers(d);for(let m=0;m<this.scenes.length;m++)this.lastBuildScenes[m]=this.scenes[m];return this.lastBuildSplatCount=p,this.lastBuildMaxSplatCount=this.getMaxSplatCount(),this.lastBuildSceneCount=this.scenes.length,n&&this.scenes.length>0&&this.buildSplatTree(t.map((e=>e.splatAlphaRemovalThreshold||1)),r,i).then((()=>{this.onSplatTreeReadyCallback&&this.onSplatTreeReadyCallback(this.splatTree),this.onSplatTreeReadyCallback=null})),this.visible=this.scenes.length>0,u}freeIntermediateSplatData(){const e=e=>{delete e.source.data,delete e.image,e.onUpdate=null};delete this.splatDataTextures.baseData.covariances,delete this.splatDataTextures.baseData.centers,delete this.splatDataTextures.baseData.colors,delete this.splatDataTextures.baseData.sphericalHarmonics,delete this.splatDataTextures.centerColors.data,delete this.splatDataTextures.covariances.data,this.splatDataTextures.sphericalHarmonics&&delete this.splatDataTextures.sphericalHarmonics.data,this.splatDataTextures.sceneIndexes&&delete this.splatDataTextures.sceneIndexes.data,this.splatDataTextures.centerColors.texture.needsUpdate=!0,this.splatDataTextures.centerColors.texture.onUpdate=()=>{e(this.splatDataTextures.centerColors.texture)},this.splatDataTextures.covariances.texture.needsUpdate=!0,this.splatDataTextures.covariances.texture.onUpdate=()=>{e(this.splatDataTextures.covariances.texture)},this.splatDataTextures.sphericalHarmonics&&(this.splatDataTextures.sphericalHarmonics.texture?(this.splatDataTextures.sphericalHarmonics.texture.needsUpdate=!0,this.splatDataTextures.sphericalHarmonics.texture.onUpdate=()=>{e(this.splatDataTextures.sphericalHarmonics.texture)}):this.splatDataTextures.sphericalHarmonics.textures.forEach((t=>{t.needsUpdate=!0,t.onUpdate=()=>{e(t)}}))),this.splatDataTextures.sceneIndexes&&(this.splatDataTextures.sceneIndexes.texture.needsUpdate=!0,this.splatDataTextures.sceneIndexes.texture.onUpdate=()=>{e(this.splatDataTextures.sceneIndexes.texture)})}dispose(){this.disposeMeshData(),this.disposeTextures(),this.disposeSplatTree(),this.enableDistancesComputationOnGPU&&(this.computeDistancesOnGPUSyncTimeout&&(clearTimeout(this.computeDistancesOnGPUSyncTimeout),this.computeDistancesOnGPUSyncTimeout=null),this.disposeDistancesComputationGPUResources()),this.scenes=[],this.distancesTransformFeedback={id:null,vertexShader:null,fragmentShader:null,program:null,centersBuffer:null,sceneIndexesBuffer:null,outDistancesBuffer:null,centersLoc:-1,modelViewProjLoc:-1,sceneIndexesLoc:-1,transformsLocs:[]},this.renderer=null,this.globalSplatIndexToLocalSplatIndexMap=[],this.globalSplatIndexToSceneIndexMap=[],this.lastBuildSplatCount=0,this.lastBuildScenes=[],this.lastBuildMaxSplatCount=0,this.lastBuildSceneCount=0,this.firstRenderTime=-1,this.finalBuild=!1,this.webGLUtils=null,this.boundingBox=new f,this.calculatedSceneCenter=new r,this.maxSplatDistanceFromSceneCenter=0,this.visibleRegionBufferRadius=0,this.visibleRegionRadius=0,this.visibleRegionFadeStartRadius=0,this.visibleRegionChanging=!1,this.splatScale=1,this.pointCloudModeEnabled=!1,this.disposed=!0,this.lastRenderer=null,this.visible=!1}disposeMeshData(){this.geometry&&this.geometry!==rn&&(this.geometry.dispose(),this.geometry=null),this.material&&(this.material.dispose(),this.material=null)}disposeTextures(){for(let e in this.splatDataTextures)if(this.splatDataTextures.hasOwnProperty(e)){const t=this.splatDataTextures[e];t.texture&&(t.texture.dispose(),t.texture=null)}this.splatDataTextures=null}disposeSplatTree(){this.splatTree&&(this.splatTree.dispose(),this.splatTree=null),this.baseSplatTree&&(this.baseSplatTree.dispose(),this.baseSplatTree=null)}getSplatTree(){return this.splatTree}onSplatTreeReady(e){this.onSplatTreeReadyCallback=e}getDataForDistancesComputation(e,t){return{centers:this.integerBasedDistancesComputation?this.getIntegerCenters(e,t,!0):this.getFloatCenters(e,t,!0),sceneIndexes:this.getSceneIndexes(e,t)}}refreshGPUDataFromSplatBuffers(e){const t=this.getSplatCount(!0);this.refreshDataTexturesFromSplatBuffers(e);const s=e?this.lastBuildSplatCount:0,{centers:n,sceneIndexes:r}=this.getDataForDistancesComputation(s,t-1);return this.enableDistancesComputationOnGPU&&this.refreshGPUBuffersForDistancesComputation(n,r,e),{from:s,to:t-1,count:t-s,centers:n,sceneIndexes:r}}refreshGPUBuffersForDistancesComputation(e,t,s=!1){const n=s?this.lastBuildSplatCount:0;this.updateGPUCentersBufferForDistancesComputation(s,e,n),this.updateGPUTransformIndexesBufferForDistancesComputation(s,t,n)}refreshDataTexturesFromSplatBuffers(e){const t=this.getSplatCount(!0),s=this.lastBuildSplatCount,n=t-1;e?this.updateBaseDataFromSplatBuffers(s,n):(this.setupDataTextures(),this.updateBaseDataFromSplatBuffers()),this.updateDataTexturesFromBaseData(s,n),this.updateVisibleRegion(e)}setupDataTextures(){const e=this.getMaxSplatCount(),t=this.getSplatCount(!0);this.disposeTextures();const s=(t,s)=>{const n=new i(4096,1024);for(;n.x*n.y*t<e*s;)n.y*=2;return n},n=e=>{const t=(e=>e>=1?6:4)(e);return{elementsPerTexelStored:t,texSize:s(t,6)}};let r=this.getTargetCovarianceCompressionLevel();const o=this.getTargetSphericalHarmonicsCompressionLevel();let a,l,c;if(this.splatRenderMode===_s){const t=n(r);t.texSize.x*t.texSize.y>an&&0===r&&(r=1),a=new Float32Array(6*e)}else l=new Float32Array(3*e),c=new Float32Array(4*e);const h=new Float32Array(3*e),d=new Uint8Array(4*e);let p=Float32Array;1===o?p=Uint16Array:2===o&&(p=Uint8Array);const u=ae(this.minSphericalHarmonicsDegree),m=this.minSphericalHarmonicsDegree?new p(e*u):void 0,A=s(4,4),f=new Uint32Array(A.x*A.y*4);ln.updateCenterColorsPaddedData(0,t-1,h,d,f);const w=new g(f,A.x,A.y,S,C);if(w.internalFormat="RGBA32UI",w.needsUpdate=!0,this.material.uniforms.centersColorsTexture.value=w,this.material.uniforms.centersColorsTextureSize.value.copy(A),this.material.uniformsNeedUpdate=!0,this.splatDataTextures={baseData:{covariances:a,scales:l,rotations:c,centers:h,colors:d,sphericalHarmonics:m},centerColors:{data:f,texture:w,size:A}},this.splatRenderMode===_s){const e=n(r),t=e.elementsPerTexelStored,s=e.texSize;const i=r>=1?8:4,o=new(r>=1?Uint32Array:Float32Array)(s.x*s.y*i);let l;if(0===r?o.set(a):ln.updatePaddedCompressedCovariancesTextureData(a,o,0,0,a.length),r>=1)l=new g(o,s.x,s.y,S,C),l.internalFormat="RGBA32UI",this.material.uniforms.covariancesTextureHalfFloat.value=l;else{l=new g(o,s.x,s.y,y,x),this.material.uniforms.covariancesTexture.value=l;const e=new g(new Uint32Array(32),2,2,S,C);e.internalFormat="RGBA32UI",this.material.uniforms.covariancesTextureHalfFloat.value=e,e.needsUpdate=!0}l.needsUpdate=!0,this.material.uniforms.covariancesAreHalfFloat.value=r>=1?1:0,this.material.uniforms.covariancesTextureSize.value.copy(s),this.splatDataTextures.covariances={data:o,texture:l,size:s,compressionLevel:r,elementsPerTexelStored:t,elementsPerTexelAllocated:i}}else{const e=s(4,6);let n=Float32Array,r=x;const i=new n(e.x*e.y*4);ln.updateScaleRotationsPaddedData(0,t-1,l,c,i);const o=new g(i,e.x,e.y,y,r);o.needsUpdate=!0,this.material.uniforms.scaleRotationsTexture.value=o,this.material.uniforms.scaleRotationsTextureSize.value.copy(e),this.splatDataTextures.scaleRotations={data:i,texture:o,size:e,compressionLevel:0}}if(m){const e=2===o?v:I;let n=u;n%2!=0&&n++;const r=4,i=y;let a=s(r,n);if(a.x*a.y<=an){const s=new p(a.x*a.y*r);for(let e=0;e<t;e++){const t=u*e,r=n*e;for(let e=0;e<u;e++)s[r+e]=m[t+e]}const l=new g(s,a.x,a.y,i,e);l.needsUpdate=!0,this.material.uniforms.sphericalHarmonicsTexture.value=l,this.splatDataTextures.sphericalHarmonics={componentCount:u,paddedComponentCount:n,data:s,textureCount:1,texture:l,size:a,compressionLevel:o,elementsPerTexel:r}}else{const l=u/3;n=l,n%2!=0&&n++,a=s(r,n);const c=a.x*a.y*r,h=[this.material.uniforms.sphericalHarmonicsTextureR,this.material.uniforms.sphericalHarmonicsTextureG,this.material.uniforms.sphericalHarmonicsTextureB],d=[],A=[];for(let s=0;s<3;s++){const r=new p(c);d.push(r);for(let e=0;e<t;e++){const t=u*e,i=n*e;if(l>=3){for(let e=0;e<3;e++)r[i+e]=m[t+3*s+e];if(l>=8)for(let e=0;e<5;e++)r[i+3+e]=m[t+9+5*s+e]}}const o=new g(r,a.x,a.y,i,e);A.push(o),o.needsUpdate=!0,h[s].value=o}this.material.uniforms.sphericalHarmonicsMultiTextureMode.value=1,this.splatDataTextures.sphericalHarmonics={componentCount:u,componentCountPerChannel:l,paddedComponentCount:n,data:d,textureCount:3,textures:A,size:a,compressionLevel:o,elementsPerTexel:r}}this.material.uniforms.sphericalHarmonicsTextureSize.value.copy(a),this.material.uniforms.sphericalHarmonics8BitMode.value=2===o?1:0;for(let t=0;t<this.scenes.length;t++){const e=this.scenes[t].splatBuffer;this.material.uniforms.sphericalHarmonics8BitCompressionRangeMin.value[t]=e.minSphericalHarmonicsCoeff,this.material.uniforms.sphericalHarmonics8BitCompressionRangeMax.value[t]=e.maxSphericalHarmonicsCoeff}this.material.uniformsNeedUpdate=!0}const b=s(1,4),E=new Uint32Array(b.x*b.y*1);for(let i=0;i<t;i++)E[i]=this.globalSplatIndexToSceneIndexMap[i];const T=new g(E,b.x,b.y,B,C);T.internalFormat="R32UI",T.needsUpdate=!0,this.material.uniforms.sceneIndexesTexture.value=T,this.material.uniforms.sceneIndexesTextureSize.value.copy(b),this.material.uniformsNeedUpdate=!0,this.splatDataTextures.sceneIndexes={data:E,texture:T,size:b},this.material.uniforms.sceneCount.value=this.scenes.length}updateBaseDataFromSplatBuffers(e,t){const s=this.splatDataTextures.covariances,n=s?s.compressionLevel:void 0,r=this.splatDataTextures.scaleRotations,i=r?r.compressionLevel:void 0,o=this.splatDataTextures.sphericalHarmonics,a=o?o.compressionLevel:0;this.fillSplatDataArrays(this.splatDataTextures.baseData.covariances,this.splatDataTextures.baseData.scales,this.splatDataTextures.baseData.rotations,this.splatDataTextures.baseData.centers,this.splatDataTextures.baseData.colors,this.splatDataTextures.baseData.sphericalHarmonics,void 0,n,i,a,e,t,e)}updateDataTexturesFromBaseData(e,t){const s=this.splatDataTextures.covariances,n=s?s.compressionLevel:void 0,r=this.splatDataTextures.scaleRotations,i=r?r.compressionLevel:void 0,o=this.splatDataTextures.sphericalHarmonics,a=o?o.compressionLevel:0,l=this.splatDataTextures.centerColors,c=l.data,h=l.texture;ln.updateCenterColorsPaddedData(e,t,this.splatDataTextures.baseData.centers,this.splatDataTextures.baseData.colors,c);const d=this.renderer?this.renderer.properties.get(h):null;if(d&&d.__webglTexture?this.updateDataTexture(c,l.texture,l.size,d,4,4,4,e,t):h.needsUpdate=!0,s){const r=s.texture,i=6*e,o=6*t;if(0===n)for(let e=i;e<=o;e++){const t=this.splatDataTextures.baseData.covariances[e];s.data[e]=t}else ln.updatePaddedCompressedCovariancesTextureData(this.splatDataTextures.baseData.covariances,s.data,e*s.elementsPerTexelAllocated,i,o);const a=this.renderer?this.renderer.properties.get(r):null;a&&a.__webglTexture?0===n?this.updateDataTexture(s.data,s.texture,s.size,a,s.elementsPerTexelStored,6,4,e,t):this.updateDataTexture(s.data,s.texture,s.size,a,s.elementsPerTexelAllocated,s.elementsPerTexelAllocated,2,e,t):r.needsUpdate=!0}if(r){const s=r.data,n=r.texture,o=6,a=0===i?4:2;ln.updateScaleRotationsPaddedData(e,t,this.splatDataTextures.baseData.scales,this.splatDataTextures.baseData.rotations,s);const l=this.renderer?this.renderer.properties.get(n):null;l&&l.__webglTexture?this.updateDataTexture(s,r.texture,r.size,l,4,o,a,e,t):n.needsUpdate=!0}const p=this.splatDataTextures.baseData.sphericalHarmonics;if(p){let s=4;1===a?s=2:2===a&&(s=1);const n=(n,r,i,o,a)=>{const l=this.renderer?this.renderer.properties.get(n):null;l&&l.__webglTexture?this.updateDataTexture(o,n,r,l,i,a,s,e,t):n.needsUpdate=!0},r=o.componentCount,i=o.paddedComponentCount;if(1===o.textureCount){const s=o.data;for(let n=e;n<=t;n++){const e=r*n,t=i*n;for(let n=0;n<r;n++)s[t+n]=p[e+n]}n(o.texture,o.size,o.elementsPerTexel,s,i)}else{const s=o.componentCountPerChannel;for(let a=0;a<3;a++){const l=o.data[a];for(let n=e;n<=t;n++){const e=r*n,t=i*n;if(s>=3){for(let s=0;s<3;s++)l[t+s]=p[e+3*a+s];if(s>=8)for(let s=0;s<5;s++)l[t+3+s]=p[e+9+5*a+s]}}n(o.textures[a],o.size,o.elementsPerTexel,l,i)}}}const u=this.splatDataTextures.sceneIndexes,m=u.data;for(let g=this.lastBuildSplatCount;g<=t;g++)m[g]=this.globalSplatIndexToSceneIndexMap[g];const A=u.texture,f=this.renderer?this.renderer.properties.get(A):null;f&&f.__webglTexture?this.updateDataTexture(m,u.texture,u.size,f,1,1,1,this.lastBuildSplatCount,t):A.needsUpdate=!0}getTargetCovarianceCompressionLevel(){return this.halfPrecisionCovariancesOnGPU?1:0}getTargetSphericalHarmonicsCompressionLevel(){return Math.max(1,this.getMaximumSplatBufferCompressionLevel())}getMaximumSplatBufferCompressionLevel(){let e;for(let t=0;t<this.scenes.length;t++){const s=this.getScene(t).splatBuffer;(0===t||s.compressionLevel>e)&&(e=s.compressionLevel)}return e}getMinimumSplatBufferCompressionLevel(){let e;for(let t=0;t<this.scenes.length;t++){const s=this.getScene(t).splatBuffer;(0===t||s.compressionLevel<e)&&(e=s.compressionLevel)}return e}static computeTextureUpdateRegion(e,t,s,n,r){const i=r/n,o=e*i,a=Math.floor(o/s),l=a*s*n,c=t*i,h=Math.floor(c/s);return{dataStart:l,dataEnd:h*s*n+s*n,startRow:a,endRow:h}}updateDataTexture(e,t,s,n,r,i,o,a,l){const c=this.renderer.getContext(),h=ln.computeTextureUpdateRegion(a,l,s.x,r,i),d=h.dataEnd-h.dataStart,p=new e.constructor(e.buffer,h.dataStart*o,d),u=h.endRow-h.startRow+1,m=this.webGLUtils.convert(t.type),A=this.webGLUtils.convert(t.format,t.colorSpace),f=c.getParameter(c.TEXTURE_BINDING_2D);c.bindTexture(c.TEXTURE_2D,n.__webglTexture),c.texSubImage2D(c.TEXTURE_2D,0,0,h.startRow,s.x,u,A,m,p),c.bindTexture(c.TEXTURE_2D,f)}static updatePaddedCompressedCovariancesTextureData(e,t,s,n,r){let i=new DataView(t.buffer),o=s,a=0;for(let l=n;l<=r;l+=2)i.setUint16(2*o,e[l],!0),i.setUint16(2*o+2,e[l+1],!0),o+=2,a++,a>=3&&(o+=2,a=0)}static updateCenterColorsPaddedData(e,t,s,n,r){for(let a=e;a<=t;a++){const e=4*a,t=3*a,l=4*a;r[l]=(i=n)[o=e]+(i[o+1]<<8)+(i[o+2]<<16)+(i[o+3]<<24),r[l+1]=te(s[t]),r[l+2]=te(s[t+1]),r[l+3]=te(s[t+2])}var i,o}static updateScaleRotationsPaddedData(e,t,s,n,r){for(let i=e;i<=t;i++){const e=3*i,t=4*i,o=6*i;r[o]=s[e],r[o+1]=s[e+1],r[o+2]=s[e+2],r[o+3]=n[t],r[o+4]=n[t+1],r[o+5]=n[t+2]}}updateVisibleRegion(e){const t=this.getSplatCount(!0),s=new r;if(!e){const e=new r;this.scenes.forEach((t=>{e.add(t.splatBuffer.sceneCenter)})),e.multiplyScalar(1/this.scenes.length),this.calculatedSceneCenter.copy(e),this.material.uniforms.sceneCenter.value.copy(this.calculatedSceneCenter),this.material.uniformsNeedUpdate=!0}for(let n=e?this.lastBuildSplatCount:0;n<t;n++){this.getSplatCenter(n,s,!0);const e=s.sub(this.calculatedSceneCenter).length();e>this.maxSplatDistanceFromSceneCenter&&(this.maxSplatDistanceFromSceneCenter=e)}this.maxSplatDistanceFromSceneCenter-this.visibleRegionBufferRadius>1&&(this.visibleRegionBufferRadius=this.maxSplatDistanceFromSceneCenter,this.visibleRegionRadius=Math.max(this.visibleRegionBufferRadius-1,0)),this.finalBuild&&(this.visibleRegionRadius=this.visibleRegionBufferRadius=this.maxSplatDistanceFromSceneCenter),this.updateVisibleRegionFadeDistance()}updateVisibleRegionFadeDistance(e=en){const t=.012*this.sceneFadeInRateMultiplier,s=.003*this.sceneFadeInRateMultiplier,n=this.finalBuild?t:s,r=e===en?n:s;this.visibleRegionFadeStartRadius=(this.visibleRegionRadius-this.visibleRegionFadeStartRadius)*r+this.visibleRegionFadeStartRadius;const i=(this.visibleRegionBufferRadius>0?this.visibleRegionFadeStartRadius/this.visibleRegionBufferRadius:0)>.99,o=i||e===tn?1:0;this.material.uniforms.visibleRegionFadeStartRadius.value=this.visibleRegionFadeStartRadius,this.material.uniforms.visibleRegionRadius.value=this.visibleRegionRadius,this.material.uniforms.firstRenderTime.value=this.firstRenderTime,this.material.uniforms.currentTime.value=performance.now(),this.material.uniforms.fadeInComplete.value=o,this.material.uniformsNeedUpdate=!0,this.visibleRegionChanging=!i}updateRenderIndexes(e,t){const s=this.geometry;s.attributes.splatIndex.set(e),s.attributes.splatIndex.needsUpdate=!0,t>0&&-1===this.firstRenderTime&&(this.firstRenderTime=performance.now()),s.instanceCount=t,s.setDrawRange(0,t)}updateTransforms(){for(let e=0;e<this.scenes.length;e++){this.getScene(e).updateTransform(this.dynamicMode)}}updateUniforms=function(){const e=new i;return function(t,s,n,r,i,o){if(this.getSplatCount()>0){if(e.set(t.x*this.devicePixelRatio,t.y*this.devicePixelRatio),this.material.uniforms.viewport.value.copy(e),this.material.uniforms.basisViewport.value.set(1/e.x,1/e.y),this.material.uniforms.focal.value.set(s,n),this.material.uniforms.orthographicMode.value=r?1:0,this.material.uniforms.orthoZoom.value=i,this.material.uniforms.inverseFocalAdjustment.value=o,this.dynamicMode)for(let e=0;e<this.scenes.length;e++)this.material.uniforms.transforms.value[e].copy(this.getScene(e).transform);if(this.enableOptionalEffects)for(let e=0;e<this.scenes.length;e++)this.material.uniforms.sceneOpacity.value[e]=ne(this.getScene(e).opacity,0,1),this.material.uniforms.sceneVisibility.value[e]=this.getScene(e).visible?1:0,this.material.uniformsNeedUpdate=!0;this.material.uniformsNeedUpdate=!0}}}();setSplatScale(e=1){this.splatScale=e,this.material.uniforms.splatScale.value=e,this.material.uniformsNeedUpdate=!0}getSplatScale(){return this.splatScale}setPointCloudModeEnabled(e){this.pointCloudModeEnabled=e,this.material.uniforms.pointCloudModeEnabled.value=e?1:0,this.material.uniformsNeedUpdate=!0}getPointCloudModeEnabled(){return this.pointCloudModeEnabled}getSplatDataTextures(){return this.splatDataTextures}getSplatCount(e=!1){return e?ln.getTotalSplatCountForScenes(this.scenes):this.lastBuildSplatCount}static getTotalSplatCountForScenes(e){let t=0;for(let s of e)s&&s.splatBuffer&&(t+=s.splatBuffer.getSplatCount());return t}static getTotalSplatCountForSplatBuffers(e){let t=0;for(let s of e)t+=s.getSplatCount();return t}getMaxSplatCount(){return ln.getTotalMaxSplatCountForScenes(this.scenes)}static getTotalMaxSplatCountForScenes(e){let t=0;for(let s of e)s&&s.splatBuffer&&(t+=s.splatBuffer.getMaxSplatCount());return t}static getTotalMaxSplatCountForSplatBuffers(e){let t=0;for(let s of e)t+=s.getMaxSplatCount();return t}disposeDistancesComputationGPUResources(){if(!this.renderer)return;const e=this.renderer.getContext();this.distancesTransformFeedback.vao&&(e.deleteVertexArray(this.distancesTransformFeedback.vao),this.distancesTransformFeedback.vao=null),this.distancesTransformFeedback.program&&(e.deleteProgram(this.distancesTransformFeedback.program),e.deleteShader(this.distancesTransformFeedback.vertexShader),e.deleteShader(this.distancesTransformFeedback.fragmentShader),this.distancesTransformFeedback.program=null,this.distancesTransformFeedback.vertexShader=null,this.distancesTransformFeedback.fragmentShader=null),this.disposeDistancesComputationGPUBufferResources(),this.distancesTransformFeedback.id&&(e.deleteTransformFeedback(this.distancesTransformFeedback.id),this.distancesTransformFeedback.id=null)}disposeDistancesComputationGPUBufferResources(){if(!this.renderer)return;const e=this.renderer.getContext();this.distancesTransformFeedback.centersBuffer&&(this.distancesTransformFeedback.centersBuffer=null,e.deleteBuffer(this.distancesTransformFeedback.centersBuffer)),this.distancesTransformFeedback.outDistancesBuffer&&(e.deleteBuffer(this.distancesTransformFeedback.outDistancesBuffer),this.distancesTransformFeedback.outDistancesBuffer=null)}setRenderer(e){if(e!==this.renderer){this.renderer=e;const t=this.renderer.getContext(),s=new Zs(t),n=new $s(t,s,{});if(s.init(n),this.webGLUtils=new w(t,s),this.enableDistancesComputationOnGPU&&this.getSplatCount()>0){this.setupDistancesComputationTransformFeedback();const{centers:e,sceneIndexes:t}=this.getDataForDistancesComputation(0,this.getSplatCount()-1);this.refreshGPUBuffersForDistancesComputation(e,t)}}}setupDistancesComputationTransformFeedback=function(){let e;return function(){const t=this.getMaxSplatCount();if(!this.renderer)return;const s=this.lastRenderer!==this.renderer,n=e!==t;if(!s&&!n)return;s?this.disposeDistancesComputationGPUResources():n&&this.disposeDistancesComputationGPUBufferResources();const r=this.renderer.getContext(),i=(e,t,s)=>{const n=e.createShader(t);if(!n)return console.error("Fatal error: gl could not create a shader object."),null;e.shaderSource(n,s),e.compileShader(n);if(!e.getShaderParameter(n,e.COMPILE_STATUS)){let s="unknown";t===e.VERTEX_SHADER?s="vertex shader":t===e.FRAGMENT_SHADER&&(s="fragement shader");const r=e.getShaderInfoLog(n);return console.error("Failed to compile "+s+" with these errors:"+r),e.deleteShader(n),null}return n};let o;this.integerBasedDistancesComputation?(o="#version 300 es\n                in ivec4 center;\n                flat out int distance;",this.dynamicMode?o+=`\n                        in uint sceneIndex;\n                        uniform ivec4 transforms[${me.MaxScenes}];\n                        void main(void) {\n                            ivec4 transform = transforms[sceneIndex];\n                            distance = center.x * transform.x + center.y * transform.y + center.z * transform.z + transform.w * center.w;\n                        }\n                    `:o+="\n                        uniform ivec3 modelViewProj;\n                        void main(void) {\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\n                        }\n                    "):(o="#version 300 es\n                in vec4 center;\n                flat out float distance;",this.dynamicMode?o+=`\n                        in uint sceneIndex;\n                        uniform mat4 transforms[${me.MaxScenes}];\n                        void main(void) {\n                            vec4 transformedCenter = transforms[sceneIndex] * vec4(center.xyz, 1.0);\n                            distance = transformedCenter.z;\n                        }\n                    `:o+="\n                        uniform vec3 modelViewProj;\n                        void main(void) {\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\n                        }\n                    ");const a=r.getParameter(r.VERTEX_ARRAY_BINDING),l=r.getParameter(r.CURRENT_PROGRAM),c=!!l&&r.getProgramParameter(l,r.DELETE_STATUS);if(s&&(this.distancesTransformFeedback.vao=r.createVertexArray()),r.bindVertexArray(this.distancesTransformFeedback.vao),s){const e=r.createProgram(),t=i(r,r.VERTEX_SHADER,o),s=i(r,r.FRAGMENT_SHADER,"#version 300 es\n                precision lowp float;\n                out vec4 fragColor;\n                void main(){}\n            ");if(!t||!s)throw new Error("Could not compile shaders for distances computation on GPU.");r.attachShader(e,t),r.attachShader(e,s),r.transformFeedbackVaryings(e,["distance"],r.SEPARATE_ATTRIBS),r.linkProgram(e);if(!r.getProgramParameter(e,r.LINK_STATUS)){const n=r.getProgramInfoLog(e);throw console.error("Fatal error: Failed to link program: "+n),r.deleteProgram(e),r.deleteShader(s),r.deleteShader(t),new Error("Could not link shaders for distances computation on GPU.")}this.distancesTransformFeedback.program=e,this.distancesTransformFeedback.vertexShader=t,this.distancesTransformFeedback.vertexShader=s}if(r.useProgram(this.distancesTransformFeedback.program),this.distancesTransformFeedback.centersLoc=r.getAttribLocation(this.distancesTransformFeedback.program,"center"),this.dynamicMode){this.distancesTransformFeedback.sceneIndexesLoc=r.getAttribLocation(this.distancesTransformFeedback.program,"sceneIndex");for(let e=0;e<this.scenes.length;e++)this.distancesTransformFeedback.transformsLocs[e]=r.getUniformLocation(this.distancesTransformFeedback.program,`transforms[${e}]`)}else this.distancesTransformFeedback.modelViewProjLoc=r.getUniformLocation(this.distancesTransformFeedback.program,"modelViewProj");(s||n)&&(this.distancesTransformFeedback.centersBuffer=r.createBuffer(),r.bindBuffer(r.ARRAY_BUFFER,this.distancesTransformFeedback.centersBuffer),r.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc),this.integerBasedDistancesComputation?r.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc,4,r.INT,0,0):r.vertexAttribPointer(this.distancesTransformFeedback.centersLoc,4,r.FLOAT,!1,0,0),this.dynamicMode&&(this.distancesTransformFeedback.sceneIndexesBuffer=r.createBuffer(),r.bindBuffer(r.ARRAY_BUFFER,this.distancesTransformFeedback.sceneIndexesBuffer),r.enableVertexAttribArray(this.distancesTransformFeedback.sceneIndexesLoc),r.vertexAttribIPointer(this.distancesTransformFeedback.sceneIndexesLoc,1,r.UNSIGNED_INT,0,0))),(s||n)&&(this.distancesTransformFeedback.outDistancesBuffer=r.createBuffer()),r.bindBuffer(r.ARRAY_BUFFER,this.distancesTransformFeedback.outDistancesBuffer),r.bufferData(r.ARRAY_BUFFER,4*t,r.STATIC_READ),s&&(this.distancesTransformFeedback.id=r.createTransformFeedback()),r.bindTransformFeedback(r.TRANSFORM_FEEDBACK,this.distancesTransformFeedback.id),r.bindBufferBase(r.TRANSFORM_FEEDBACK_BUFFER,0,this.distancesTransformFeedback.outDistancesBuffer),l&&!0!==c&&r.useProgram(l),a&&r.bindVertexArray(a),this.lastRenderer=this.renderer,e=t}}();updateGPUCentersBufferForDistancesComputation(e,t,s){if(!this.renderer)return;const n=this.renderer.getContext(),r=n.getParameter(n.VERTEX_ARRAY_BINDING);n.bindVertexArray(this.distancesTransformFeedback.vao);const i=this.integerBasedDistancesComputation?Uint32Array:Float32Array,o=16*s;if(n.bindBuffer(n.ARRAY_BUFFER,this.distancesTransformFeedback.centersBuffer),e)n.bufferSubData(n.ARRAY_BUFFER,o,t);else{const e=new i(16*this.getMaxSplatCount());e.set(t),n.bufferData(n.ARRAY_BUFFER,e,n.STATIC_DRAW)}n.bindBuffer(n.ARRAY_BUFFER,null),r&&n.bindVertexArray(r)}updateGPUTransformIndexesBufferForDistancesComputation(e,t,s){if(!this.renderer||!this.dynamicMode)return;const n=this.renderer.getContext(),r=n.getParameter(n.VERTEX_ARRAY_BINDING);n.bindVertexArray(this.distancesTransformFeedback.vao);const i=4*s;if(n.bindBuffer(n.ARRAY_BUFFER,this.distancesTransformFeedback.sceneIndexesBuffer),e)n.bufferSubData(n.ARRAY_BUFFER,i,t);else{const e=new Uint32Array(4*this.getMaxSplatCount());e.set(t),n.bufferData(n.ARRAY_BUFFER,e,n.STATIC_DRAW)}n.bindBuffer(n.ARRAY_BUFFER,null),r&&n.bindVertexArray(r)}getSceneIndexes(e,t){let s;s=new Uint32Array(t-e+1);for(let n=e;n<=t;n++)s[n]=this.globalSplatIndexToSceneIndexMap[n];return s}fillTransformsArray=function(){const e=[];return function(t){e.length!==t.length&&(e.length=t.length);for(let s=0;s<this.scenes.length;s++){const t=this.getScene(s).transform.elements;for(let n=0;n<16;n++)e[16*s+n]=t[n]}t.set(e)}}();computeDistancesOnGPU=function(){const e=new d;return function(t,s){if(!this.renderer)return;const n=this.renderer.getContext(),r=n.getParameter(n.VERTEX_ARRAY_BINDING),i=n.getParameter(n.CURRENT_PROGRAM),o=!!i&&n.getProgramParameter(i,n.DELETE_STATUS);if(n.bindVertexArray(this.distancesTransformFeedback.vao),n.useProgram(this.distancesTransformFeedback.program),n.enable(n.RASTERIZER_DISCARD),this.dynamicMode)for(let c=0;c<this.scenes.length;c++)if(e.copy(this.getScene(c).transform),e.premultiply(t),this.integerBasedDistancesComputation){const t=ln.getIntegerMatrixArray(e),s=[t[2],t[6],t[10],t[14]];n.uniform4i(this.distancesTransformFeedback.transformsLocs[c],s[0],s[1],s[2],s[3])}else n.uniformMatrix4fv(this.distancesTransformFeedback.transformsLocs[c],!1,e.elements);else if(this.integerBasedDistancesComputation){const e=ln.getIntegerMatrixArray(t),s=[e[2],e[6],e[10]];n.uniform3i(this.distancesTransformFeedback.modelViewProjLoc,s[0],s[1],s[2])}else{const e=[t.elements[2],t.elements[6],t.elements[10]];n.uniform3f(this.distancesTransformFeedback.modelViewProjLoc,e[0],e[1],e[2])}n.bindBuffer(n.ARRAY_BUFFER,this.distancesTransformFeedback.centersBuffer),n.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc),this.integerBasedDistancesComputation?n.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc,4,n.INT,0,0):n.vertexAttribPointer(this.distancesTransformFeedback.centersLoc,4,n.FLOAT,!1,0,0),this.dynamicMode&&(n.bindBuffer(n.ARRAY_BUFFER,this.distancesTransformFeedback.sceneIndexesBuffer),n.enableVertexAttribArray(this.distancesTransformFeedback.sceneIndexesLoc),n.vertexAttribIPointer(this.distancesTransformFeedback.sceneIndexesLoc,1,n.UNSIGNED_INT,0,0)),n.bindTransformFeedback(n.TRANSFORM_FEEDBACK,this.distancesTransformFeedback.id),n.bindBufferBase(n.TRANSFORM_FEEDBACK_BUFFER,0,this.distancesTransformFeedback.outDistancesBuffer),n.beginTransformFeedback(n.POINTS),n.drawArrays(n.POINTS,0,this.getSplatCount()),n.endTransformFeedback(),n.bindBufferBase(n.TRANSFORM_FEEDBACK_BUFFER,0,null),n.bindTransformFeedback(n.TRANSFORM_FEEDBACK,null),n.disable(n.RASTERIZER_DISCARD);const a=n.fenceSync(n.SYNC_GPU_COMMANDS_COMPLETE,0);n.flush();const l=new Promise((e=>{const t=()=>{if(this.disposed)e();else{const r=0,i=0;switch(n.clientWaitSync(a,i,r)){case n.TIMEOUT_EXPIRED:return this.computeDistancesOnGPUSyncTimeout=setTimeout(t),this.computeDistancesOnGPUSyncTimeout;case n.WAIT_FAILED:throw new Error("should never get here");default:this.computeDistancesOnGPUSyncTimeout=null,n.deleteSync(a);const r=n.getParameter(n.VERTEX_ARRAY_BINDING);n.bindVertexArray(this.distancesTransformFeedback.vao),n.bindBuffer(n.ARRAY_BUFFER,this.distancesTransformFeedback.outDistancesBuffer),n.getBufferSubData(n.ARRAY_BUFFER,0,s),n.bindBuffer(n.ARRAY_BUFFER,null),r&&n.bindVertexArray(r),e()}}};this.computeDistancesOnGPUSyncTimeout=setTimeout(t)}));return i&&!0!==o&&n.useProgram(i),r&&n.bindVertexArray(r),l}}();getLocalSplatParameters(e,t,s){null==s&&(s=!this.dynamicMode),t.splatBuffer=this.getSplatBufferForSplat(e),t.localIndex=this.getSplatLocalIndex(e),t.sceneTransform=s?this.getSceneTransformForSplat(e):null}fillSplatDataArrays(e,t,s,n,i,o,a,l=0,c=0,h=1,p,u,m=0,A){const f=new r;f.x=void 0,f.y=void 0,this.splatRenderMode===_s?f.z=void 0:f.z=1;const g=new d;let S=0,C=this.scenes.length-1;null!=A&&A>=0&&A<=this.scenes.length&&(S=A,C=A);for(let r=S;r<=C;r++){null==a&&(a=!this.dynamicMode);const d=this.getScene(r),A=d.splatBuffer;let S;if(a&&(this.getSceneTransform(r,g),S=g),e&&A.fillSplatCovarianceArray(e,S,p,u,m,l),t||s){if(!t||!s)throw new Error('SplatMesh::fillSplatDataArrays() -> "scales" and "rotations" must both be valid.');A.fillSplatScaleRotationArray(t,s,S,p,u,m,c,f)}n&&A.fillSplatCenterArray(n,S,p,u,m),i&&A.fillSplatColorArray(i,d.minimumAlpha,p,u,m),o&&A.fillSphericalHarmonicsArray(o,this.minSphericalHarmonicsDegree,S,p,u,m,h),m+=A.getSplatCount()}}getIntegerCenters(e,t,s=!1){const n=t-e+1,r=new Float32Array(3*n);let i;this.fillSplatDataArrays(null,null,null,r,null,null,void 0,void 0,void 0,void 0,e);let o=s?4:3;i=new Int32Array(n*o);for(let a=0;a<n;a++){for(let e=0;e<3;e++)i[a*o+e]=Math.round(1e3*r[3*a+e]);s&&(i[a*o+3]=1e3)}return i}getFloatCenters(e,t,s=!1){const n=t-e+1,r=new Float32Array(3*n);if(this.fillSplatDataArrays(null,null,null,r,null,null,void 0,void 0,void 0,void 0,e),!s)return r;let i=new Float32Array(4*n);for(let o=0;o<n;o++){for(let e=0;e<3;e++)i[4*o+e]=r[3*o+e];i[4*o+3]=1}return i}getSplatCenter=function(){const e={};return function(t,s,n){this.getLocalSplatParameters(t,e,n),e.splatBuffer.getSplatCenter(e.localIndex,s,e.sceneTransform)}}();getSplatScaleAndRotation=function(){const e={},t=new r;return function(s,n,r,i){this.getLocalSplatParameters(s,e,i),t.x=void 0,t.y=void 0,t.z=void 0,this.splatRenderMode===Qs&&(t.z=0),e.splatBuffer.getSplatScaleAndRotation(e.localIndex,n,r,e.sceneTransform,t)}}();getSplatColor=function(){const e={};return function(t,s){this.getLocalSplatParameters(t,e),e.splatBuffer.getSplatColor(e.localIndex,s)}}();getSceneTransform(e,t){const s=this.getScene(e);s.updateTransform(this.dynamicMode),t.copy(s.transform)}getScene(e){if(e<0||e>=this.scenes.length)throw new Error("SplatMesh::getScene() -> Invalid scene index.");return this.scenes[e]}getSceneCount(){return this.scenes.length}getSplatBufferForSplat(e){return this.getScene(this.globalSplatIndexToSceneIndexMap[e]).splatBuffer}getSceneIndexForSplat(e){return this.globalSplatIndexToSceneIndexMap[e]}getSceneTransformForSplat(e){return this.getScene(this.globalSplatIndexToSceneIndexMap[e]).transform}getSplatLocalIndex(e){return this.globalSplatIndexToLocalSplatIndexMap[e]}static getIntegerMatrixArray(e){const t=e.elements,s=[];for(let n=0;n<16;n++)s[n]=Math.round(1e3*t[n]);return s}computeBoundingBox(e=!1,t){let s=this.getSplatCount();if(null!=t){if(t<0||t>=this.scenes.length)throw new Error("SplatMesh::computeBoundingBox() -> Invalid scene index.");s=this.scenes[t].splatBuffer.getSplatCount()}const n=new Float32Array(3*s);this.fillSplatDataArrays(null,null,null,n,null,null,e,void 0,void 0,void 0,void 0,t);const i=new r,o=new r;for(let r=0;r<s;r++){const e=3*r,t=n[e],s=n[e+1],a=n[e+2];(0===r||t<i.x)&&(i.x=t),(0===r||s<i.y)&&(i.y=s),(0===r||a<i.z)&&(i.z=a),(0===r||t>o.x)&&(o.x=t),(0===r||s>o.y)&&(o.y=s),(0===r||a>o.z)&&(o.z=a)}return new f(i,o)}}var cn="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";function hn(e){let t,s,n,r,i,o,a,l,c,h,d,p,u,m,A,f,g,S,C,y;e.onmessage=x=>{if(x.data.centers)centers=x.data.centers,sceneIndexes=x.data.sceneIndexes,r?new Int32Array(s,m+x.data.range.from*y.BytesPerInt*4,4*x.data.range.count).set(new Int32Array(centers)):new Float32Array(s,m+x.data.range.from*y.BytesPerFloat*4,4*x.data.range.count).set(new Float32Array(centers)),i&&new Uint32Array(s,c+4*x.data.range.from,x.data.range.count).set(new Uint32Array(sceneIndexes)),C=x.data.range.from+x.data.range.count;else if(x.data.sort){const v=Math.min(x.data.sort.splatRenderCount||0,C),I=Math.min(x.data.sort.splatSortCount||0,C),B=x.data.sort.usePrecomputedDistances;let w,b,E;n||(w=x.data.sort.indexesToSort,E=x.data.sort.transforms,B&&(b=x.data.sort.precomputedDistances)),function(C,x,v,I,B,w,b){const E=performance.now();if(!n&&(new Uint32Array(s,a,B.byteLength/y.BytesPerInt).set(B),new Float32Array(s,h,b.byteLength/y.BytesPerFloat).set(b),I)){let e;e=r?new Int32Array(s,d,w.byteLength/y.BytesPerInt):new Float32Array(s,d,w.byteLength/y.BytesPerFloat),e.set(w)}f||(f=new Uint32Array(S)),new Float32Array(s,A,16).set(v),new Uint32Array(s,u,S).set(f),t.exports.sortIndexes(a,m,d,p,u,A,l,c,h,S,C,x,o,I,r,i);const T={sortDone:!0,splatSortCount:C,splatRenderCount:x,sortTime:0};if(!n){const e=new Uint32Array(s,l,x);(!g||g.length<x)&&(g=new Uint32Array(x)),g.set(e),T.sortedIndexes=g}const D=performance.now();T.sortTime=D-E,e.postMessage(T)}(I,v,x.data.sort.modelViewProj,B,w,b,E)}else if(x.data.init){y=x.data.init.Constants,o=x.data.init.splatCount,n=x.data.init.useSharedMemory,r=x.data.init.integerBasedSort,i=x.data.init.dynamicMode,S=x.data.init.distanceMapRange,C=0;const f=r?4*y.BytesPerInt:4*y.BytesPerFloat,g=new Uint8Array(x.data.init.sorterWasmBytes),v=16*y.BytesPerFloat,I=o*y.BytesPerInt,B=o*f,w=v,b=r?o*y.BytesPerInt:o*y.BytesPerFloat,E=o*y.BytesPerInt,T=o*y.BytesPerInt,D=r?S*y.BytesPerInt*2:S*y.BytesPerFloat*2,M=i?o*y.BytesPerInt:0,F=i?y.MaxScenes*v:0,R=32*y.MemoryPageSize,P=I+B+w+b+E+D+T+M+F+R,H=Math.floor(P/y.MemoryPageSize)+1,k={module:{},env:{memory:new WebAssembly.Memory({initial:H,maximum:H,shared:!0})}};WebAssembly.compile(g).then((e=>WebAssembly.instantiate(e,k))).then((r=>{t=r,a=0,m=a+I,A=m+B,d=A+w,p=d+b,u=p+E,l=u+D,c=l+T,h=c+M,s=k.env.memory.buffer,n?e.postMessage({sortSetupPhase1Complete:!0,indexesToSortBuffer:s,indexesToSortOffset:a,sortedIndexesBuffer:s,sortedIndexesOffset:l,precomputedDistancesBuffer:s,precomputedDistancesOffset:d,transformsBuffer:s,transformsOffset:h}):e.postMessage({sortSetupPhase1Complete:!0})}))}}}const dn=0,pn=1,un=2;class mn{static createButton(e,t={}){const s=document.createElement("button");function n(){s.style.display="",s.style.cursor="auto",s.style.left="calc(50% - 75px)",s.style.width="150px",s.onmouseenter=null,s.onmouseleave=null,s.onclick=null}function r(e){e.style.position="absolute",e.style.bottom="20px",e.style.padding="12px 6px",e.style.border="1px solid #fff",e.style.borderRadius="4px",e.style.background="rgba(0,0,0,0.1)",e.style.color="#fff",e.style.font="normal 13px sans-serif",e.style.textAlign="center",e.style.opacity="0.5",e.style.outline="none",e.style.zIndex="999"}if("xr"in navigator)return s.id="VRButton",s.style.display="none",r(s),navigator.xr.isSessionSupported("immersive-vr").then((function(r){r?function(){let n=null;async function r(t){t.addEventListener("end",i),await e.xr.setSession(t),s.textContent="EXIT VR",n=t}function i(){n.removeEventListener("end",i),s.textContent="ENTER VR",n=null}s.style.display="",s.style.cursor="pointer",s.style.left="calc(50% - 50px)",s.style.width="100px",s.textContent="ENTER VR";const o={...t,optionalFeatures:["local-floor","bounded-floor","layers",...t.optionalFeatures||[]]};s.onmouseenter=function(){s.style.opacity="1.0"},s.onmouseleave=function(){s.style.opacity="0.5"},s.onclick=function(){null===n?navigator.xr.requestSession("immersive-vr",o).then(r):(n.end(),void 0!==navigator.xr.offerSession&&navigator.xr.offerSession("immersive-vr",o).then(r).catch((e=>{console.warn(e)})))},void 0!==navigator.xr.offerSession&&navigator.xr.offerSession("immersive-vr",o).then(r).catch((e=>{console.warn(e)}))}():(n(),s.textContent="VR NOT SUPPORTED"),r&&mn.xrSessionIsGranted&&s.click()})).catch((function(e){n(),console.warn("Exception when trying to call xr.isSessionSupported",e),s.textContent="VR NOT ALLOWED"})),s;{const e=document.createElement("a");return!1===window.isSecureContext?(e.href=document.location.href.replace(/^http:/,"https:"),e.innerHTML="WEBXR NEEDS HTTPS"):(e.href="https://immersiveweb.dev/",e.innerHTML="WEBXR NOT AVAILABLE"),e.style.left="calc(50% - 90px)",e.style.width="180px",e.style.textDecoration="none",r(e),e}}static registerSessionGrantedListener(){if("undefined"!=typeof navigator&&"xr"in navigator){if(/WebXRViewer\//i.test(navigator.userAgent))return;navigator.xr.addEventListener("sessiongranted",(()=>{mn.xrSessionIsGranted=!0}))}}}mn.xrSessionIsGranted=!1,mn.registerSessionGrantedListener();class An{static createButton(e,t={}){const s=document.createElement("button");function n(){s.style.display="",s.style.cursor="auto",s.style.left="calc(50% - 75px)",s.style.width="150px",s.onmouseenter=null,s.onmouseleave=null,s.onclick=null}function r(e){e.style.position="absolute",e.style.bottom="20px",e.style.padding="12px 6px",e.style.border="1px solid #fff",e.style.borderRadius="4px",e.style.background="rgba(0,0,0,0.1)",e.style.color="#fff",e.style.font="normal 13px sans-serif",e.style.textAlign="center",e.style.opacity="0.5",e.style.outline="none",e.style.zIndex="999"}if("xr"in navigator)return s.id="ARButton",s.style.display="none",r(s),navigator.xr.isSessionSupported("immersive-ar").then((function(r){r?function(){if(void 0===t.domOverlay){const e=document.createElement("div");e.style.display="none",document.body.appendChild(e);const s=document.createElementNS("http://www.w3.org/2000/svg","svg");s.setAttribute("width",38),s.setAttribute("height",38),s.style.position="absolute",s.style.right="20px",s.style.top="20px",s.addEventListener("click",(function(){n.end()})),e.appendChild(s);const r=document.createElementNS("http://www.w3.org/2000/svg","path");r.setAttribute("d","M 12,12 L 28,28 M 28,12 12,28"),r.setAttribute("stroke","#fff"),r.setAttribute("stroke-width",2),s.appendChild(r),void 0===t.optionalFeatures&&(t.optionalFeatures=[]),t.optionalFeatures.push("dom-overlay"),t.domOverlay={root:e}}let n=null;async function r(r){r.addEventListener("end",i),e.xr.setReferenceSpaceType("local"),await e.xr.setSession(r),s.textContent="STOP AR",t.domOverlay.root.style.display="",n=r}function i(){n.removeEventListener("end",i),s.textContent="START AR",t.domOverlay.root.style.display="none",n=null}s.style.display="",s.style.cursor="pointer",s.style.left="calc(50% - 50px)",s.style.width="100px",s.textContent="START AR",s.onmouseenter=function(){s.style.opacity="1.0"},s.onmouseleave=function(){s.style.opacity="0.5"},s.onclick=function(){null===n?navigator.xr.requestSession("immersive-ar",t).then(r):(n.end(),void 0!==navigator.xr.offerSession&&navigator.xr.offerSession("immersive-ar",t).then(r).catch((e=>{console.warn(e)})))},void 0!==navigator.xr.offerSession&&navigator.xr.offerSession("immersive-ar",t).then(r).catch((e=>{console.warn(e)}))}():(n(),s.textContent="AR NOT SUPPORTED")})).catch((function(e){n(),console.warn("Exception when trying to call xr.isSessionSupported",e),s.textContent="AR NOT ALLOWED"})),s;{const e=document.createElement("a");return!1===window.isSecureContext?(e.href=document.location.href.replace(/^http:/,"https:"),e.innerHTML="WEBXR NEEDS HTTPS"):(e.href="https://immersiveweb.dev/",e.innerHTML="WEBXR NOT AVAILABLE"),e.style.left="calc(50% - 90px)",e.style.width="180px",e.style.textDecoration="none",r(e),e}}}const fn=0,gn=2;class Sn{constructor(e={}){if(e.cameraUp||(e.cameraUp=[0,1,0]),this.cameraUp=(new r).fromArray(e.cameraUp),e.initialCameraPosition||(e.initialCameraPosition=[0,10,15]),this.initialCameraPosition=(new r).fromArray(e.initialCameraPosition),e.initialCameraLookAt||(e.initialCameraLookAt=[0,0,0]),this.initialCameraLookAt=(new r).fromArray(e.initialCameraLookAt),this.dropInMode=e.dropInMode||!1,void 0!==e.selfDrivenMode&&null!==e.selfDrivenMode||(e.selfDrivenMode=!0),this.selfDrivenMode=e.selfDrivenMode&&!this.dropInMode,this.selfDrivenUpdateFunc=this.selfDrivenUpdate.bind(this),void 0===e.useBuiltInControls&&(e.useBuiltInControls=!0),this.useBuiltInControls=e.useBuiltInControls,this.rootElement=e.rootElement,this.ignoreDevicePixelRatio=e.ignoreDevicePixelRatio||!1,this.devicePixelRatio=this.ignoreDevicePixelRatio?1:window.devicePixelRatio||1,this.halfPrecisionCovariancesOnGPU=e.halfPrecisionCovariancesOnGPU||!1,this.threeScene=e.threeScene,this.renderer=e.renderer,this.camera=e.camera,this.gpuAcceleratedSort=e.gpuAcceleratedSort||!1,void 0!==e.integerBasedSort&&null!==e.integerBasedSort||(e.integerBasedSort=!0),this.integerBasedSort=e.integerBasedSort,void 0!==e.sharedMemoryForWorkers&&null!==e.sharedMemoryForWorkers||(e.sharedMemoryForWorkers=!0),this.sharedMemoryForWorkers=e.sharedMemoryForWorkers,this.dynamicScene=!!e.dynamicScene,this.antialiased=e.antialiased||!1,this.kernel2DSize=void 0===e.kernel2DSize?.3:e.kernel2DSize,this.webXRMode=e.webXRMode||dn,this.webXRMode!==dn&&(this.gpuAcceleratedSort=!1),this.webXRActive=!1,this.webXRSessionInit=e.webXRSessionInit||{},this.renderMode=e.renderMode||fn,this.sceneRevealMode=e.sceneRevealMode||en,this.focalAdjustment=e.focalAdjustment||1,this.maxScreenSpaceSplatSize=e.maxScreenSpaceSplatSize||1024,this.logLevel=e.logLevel||sn,this.sphericalHarmonicsDegree=e.sphericalHarmonicsDegree||0,this.enableOptionalEffects=e.enableOptionalEffects||!1,void 0!==e.enableSIMDInSort&&null!==e.enableSIMDInSort||(e.enableSIMDInSort=!0),this.enableSIMDInSort=e.enableSIMDInSort,void 0!==e.inMemoryCompressionLevel&&null!==e.inMemoryCompressionLevel||(e.inMemoryCompressionLevel=0),this.inMemoryCompressionLevel=e.inMemoryCompressionLevel,void 0!==e.optimizeSplatData&&null!==e.optimizeSplatData||(e.optimizeSplatData=!0),this.optimizeSplatData=e.optimizeSplatData,void 0!==e.freeIntermediateSplatData&&null!==e.freeIntermediateSplatData||(e.freeIntermediateSplatData=!1),this.freeIntermediateSplatData=e.freeIntermediateSplatData,de()){const e=pe();e.major<17&&(this.enableSIMDInSort=!1),e.major<16&&(this.sharedMemoryForWorkers=!1)}void 0!==e.splatRenderMode&&null!==e.splatRenderMode||(e.splatRenderMode=_s),this.splatRenderMode=e.splatRenderMode,this.sceneFadeInRateMultiplier=e.sceneFadeInRateMultiplier||1,this.splatSortDistanceMapPrecision=e.splatSortDistanceMapPrecision||me.DefaultSplatSortDistanceMapPrecision;const t=this.integerBasedSort?20:24;this.splatSortDistanceMapPrecision=ne(this.splatSortDistanceMapPrecision,10,t),this.onSplatMeshChangedCallback=null,this.createSplatMesh(),this.controls=null,this.perspectiveControls=null,this.orthographicControls=null,this.orthographicCamera=null,this.perspectiveCamera=null,this.showMeshCursor=!1,this.showControlPlane=!1,this.showInfo=!1,this.sceneHelper=null,this.sortWorker=null,this.sortRunning=!1,this.splatRenderCount=0,this.splatSortCount=0,this.lastSplatSortCount=0,this.sortWorkerIndexesToSort=null,this.sortWorkerSortedIndexes=null,this.sortWorkerPrecomputedDistances=null,this.sortWorkerTransforms=null,this.preSortMessages=[],this.runAfterNextSort=[],this.selfDrivenModeRunning=!1,this.splatRenderReady=!1,this.raycaster=new Ns,this.infoPanel=null,this.startInOrthographicMode=!1,this.currentFPS=0,this.lastSortTime=0,this.consecutiveRenderFrames=0,this.previousCameraTarget=new r,this.nextCameraTarget=new r,this.mousePosition=new i,this.mouseDownPosition=new i,this.mouseDownTime=null,this.resizeObserver=null,this.mouseMoveListener=null,this.mouseDownListener=null,this.mouseUpListener=null,this.keyDownListener=null,this.sortPromise=null,this.sortPromiseResolver=null,this.splatSceneDownloadPromises={},this.splatSceneDownloadAndBuildPromise=null,this.splatSceneRemovalPromise=null,this.loadingSpinner=new Ds(null,this.rootElement||document.body),this.loadingSpinner.hide(),this.loadingProgressBar=new Ms(this.rootElement||document.body),this.loadingProgressBar.hide(),this.infoPanel=new Fs(this.rootElement||document.body),this.infoPanel.hide(),this.usingExternalCamera=!(!this.dropInMode&&!this.camera),this.usingExternalRenderer=!(!this.dropInMode&&!this.renderer),this.initialized=!1,this.disposing=!1,this.disposed=!1,this.disposePromise=null,this.dropInMode||this.init()}createSplatMesh(){this.splatMesh=new ln(this.splatRenderMode,this.dynamicScene,this.enableOptionalEffects,this.halfPrecisionCovariancesOnGPU,this.devicePixelRatio,this.gpuAcceleratedSort,this.integerBasedSort,this.antialiased,this.maxScreenSpaceSplatSize,this.logLevel,this.sphericalHarmonicsDegree,this.sceneFadeInRateMultiplier,this.kernel2DSize),this.splatMesh.frustumCulled=!1,this.onSplatMeshChangedCallback&&this.onSplatMeshChangedCallback()}init(){this.initialized||(this.rootElement||(this.usingExternalRenderer?this.rootElement=this.renderer.domElement||document.body:(this.rootElement=document.createElement("div"),this.rootElement.style.width="100%",this.rootElement.style.height="100%",this.rootElement.style.position="absolute",document.body.appendChild(this.rootElement))),this.setupCamera(),this.setupRenderer(),this.setupWebXR(this.webXRSessionInit),this.setupControls(),this.setupEventHandlers(),this.threeScene=this.threeScene||new o,this.sceneHelper=new Hs(this.threeScene),this.sceneHelper.setupMeshCursor(),this.sceneHelper.setupFocusMarker(),this.sceneHelper.setupControlPlane(),this.loadingProgressBar.setContainer(this.rootElement),this.loadingSpinner.setContainer(this.rootElement),this.infoPanel.setContainer(this.rootElement),this.initialized=!0)}setupCamera(){if(!this.usingExternalCamera){const e=new i;this.getRenderDimensions(e),this.perspectiveCamera=new a(50,e.x/e.y,.1,1e3),this.orthographicCamera=new l(e.x/-2,e.x/2,e.y/2,e.y/-2,.1,1e3),this.camera=this.startInOrthographicMode?this.orthographicCamera:this.perspectiveCamera,this.camera.position.copy(this.initialCameraPosition),this.camera.up.copy(this.cameraUp).normalize(),this.camera.lookAt(this.initialCameraLookAt)}}setupRenderer(){if(!this.usingExternalRenderer){const e=new i;this.getRenderDimensions(e),this.renderer=new c({antialias:!1,precision:"highp"}),this.renderer.setPixelRatio(this.devicePixelRatio),this.renderer.autoClear=!0,this.renderer.setClearColor(new h(0),0),this.renderer.setSize(e.x,e.y),this.resizeObserver=new ResizeObserver((()=>{this.getRenderDimensions(e),this.renderer.setSize(e.x,e.y),this.forceRenderNextFrame()})),this.resizeObserver.observe(this.rootElement),this.rootElement.appendChild(this.renderer.domElement)}}setupWebXR(e){this.webXRMode&&(this.webXRMode===pn?this.rootElement.appendChild(mn.createButton(this.renderer,e)):this.webXRMode===un&&this.rootElement.appendChild(An.createButton(this.renderer,e)),this.renderer.xr.addEventListener("sessionstart",(e=>{this.webXRActive=!0})),this.renderer.xr.addEventListener("sessionend",(e=>{this.webXRActive=!1})),this.renderer.xr.enabled=!0,this.camera.position.copy(this.initialCameraPosition),this.camera.up.copy(this.cameraUp).normalize(),this.camera.lookAt(this.initialCameraLookAt))}setupControls(){if(this.useBuiltInControls&&this.webXRMode===dn){this.usingExternalCamera?this.camera.isOrthographicCamera?this.orthographicControls=new Ts(this.camera,this.renderer.domElement):this.perspectiveControls=new Ts(this.camera,this.renderer.domElement):(this.perspectiveControls=new Ts(this.perspectiveCamera,this.renderer.domElement),this.orthographicControls=new Ts(this.orthographicCamera,this.renderer.domElement));for(let e of[this.orthographicControls,this.perspectiveControls])e&&(e.listenToKeyEvents(window),e.rotateSpeed=.5,e.maxPolarAngle=.75*Math.PI,e.minPolarAngle=.1,e.enableDamping=!0,e.dampingFactor=.05,e.target.copy(this.initialCameraLookAt),e.update());this.controls=this.camera.isOrthographicCamera?this.orthographicControls:this.perspectiveControls,this.controls.update()}}setupEventHandlers(){this.useBuiltInControls&&this.webXRMode===dn&&(this.mouseMoveListener=this.onMouseMove.bind(this),this.renderer.domElement.addEventListener("pointermove",this.mouseMoveListener,!1),this.mouseDownListener=this.onMouseDown.bind(this),this.renderer.domElement.addEventListener("pointerdown",this.mouseDownListener,!1),this.mouseUpListener=this.onMouseUp.bind(this),this.renderer.domElement.addEventListener("pointerup",this.mouseUpListener,!1),this.keyDownListener=this.onKeyDown.bind(this),window.addEventListener("keydown",this.keyDownListener,!1))}removeEventHandlers(){this.useBuiltInControls&&(this.renderer.domElement.removeEventListener("pointermove",this.mouseMoveListener),this.mouseMoveListener=null,this.renderer.domElement.removeEventListener("pointerdown",this.mouseDownListener),this.mouseDownListener=null,this.renderer.domElement.removeEventListener("pointerup",this.mouseUpListener),this.mouseUpListener=null,window.removeEventListener("keydown",this.keyDownListener),this.keyDownListener=null)}setRenderMode(e){this.renderMode=e}setActiveSphericalHarmonicsDegrees(e){this.splatMesh.material.uniforms.sphericalHarmonicsDegree.value=e,this.splatMesh.material.uniformsNeedUpdate=!0}onSplatMeshChanged(e){this.onSplatMeshChangedCallback=e}onKeyDown=function(){const e=new r,t=new d,s=new d;return function(n){switch(e.set(0,0,-1),e.transformDirection(this.camera.matrixWorld),t.makeRotationAxis(e,Math.PI/128),s.makeRotationAxis(e,-Math.PI/128),n.code){case"KeyG":this.focalAdjustment+=.02,this.forceRenderNextFrame();break;case"KeyF":this.focalAdjustment-=.02,this.forceRenderNextFrame();break;case"ArrowLeft":this.camera.up.transformDirection(t);break;case"ArrowRight":this.camera.up.transformDirection(s);break;case"KeyC":this.showMeshCursor=!this.showMeshCursor;break;case"KeyU":this.showControlPlane=!this.showControlPlane;break;case"KeyI":this.showInfo=!this.showInfo,this.showInfo?this.infoPanel.show():this.infoPanel.hide();break;case"KeyO":this.usingExternalCamera||this.setOrthographicMode(!this.camera.isOrthographicCamera);break;case"KeyP":this.usingExternalCamera||this.splatMesh.setPointCloudModeEnabled(!this.splatMesh.getPointCloudModeEnabled());break;case"Equal":this.usingExternalCamera||this.splatMesh.setSplatScale(this.splatMesh.getSplatScale()+.05);break;case"Minus":this.usingExternalCamera||this.splatMesh.setSplatScale(Math.max(this.splatMesh.getSplatScale()-.05,0))}}}();onMouseMove(e){this.mousePosition.set(e.offsetX,e.offsetY)}onMouseDown(){this.mouseDownPosition.copy(this.mousePosition),this.mouseDownTime=re()}onMouseUp=function(){const e=new i;return function(t){e.copy(this.mousePosition).sub(this.mouseDownPosition);re()-this.mouseDownTime<.5&&e.length()<2&&this.onMouseClick(t)}}();onMouseClick(e){this.mousePosition.set(e.offsetX,e.offsetY),this.checkForFocalPointChange()}checkForFocalPointChange=function(){const e=new i,t=new r,s=[];return function(){if(!this.transitioningCameraTarget&&(this.getRenderDimensions(e),s.length=0,this.raycaster.setFromCameraAndScreenPosition(this.camera,this.mousePosition,e),this.raycaster.intersectSplatMesh(this.splatMesh,s),s.length>0)){const e=s[0].origin;t.copy(e).sub(this.camera.position),t.length()>.75&&(this.previousCameraTarget.copy(this.controls.target),this.nextCameraTarget.copy(e),this.transitioningCameraTarget=!0,this.transitioningCameraTargetStartTime=re())}}}();getRenderDimensions(e){this.rootElement?(e.x=this.rootElement.offsetWidth,e.y=this.rootElement.offsetHeight):this.renderer.getSize(e)}setOrthographicMode(e){if(e===this.camera.isOrthographicCamera)return;const t=this.camera,s=e?this.orthographicCamera:this.perspectiveCamera;if(s.position.copy(t.position),s.up.copy(t.up),s.rotation.copy(t.rotation),s.quaternion.copy(t.quaternion),s.matrix.copy(t.matrix),this.camera=s,this.controls){const n=e=>{e.saveState(),e.reset()},r=this.controls,i=e?this.orthographicControls:this.perspectiveControls;n(i),n(r),i.target.copy(r.target),e?Sn.setCameraZoomFromPosition(s,t,r):Sn.setCameraPositionFromZoom(s,t,i),this.controls=i,this.camera.lookAt(this.controls.target)}}static setCameraPositionFromZoom=function(){const e=new r;return function(t,s,n){const r=1/(.001*s.zoom);e.copy(n.target).sub(t.position).normalize().multiplyScalar(r).negate(),t.position.copy(n.target).add(e)}}();static setCameraZoomFromPosition=function(){const e=new r;return function(t,s,n){const r=e.copy(n.target).sub(s.position).length();t.zoom=1/(.001*r)}}();updateSplatMesh=function(){const e=new i;return function(){if(!this.splatMesh)return;if(this.splatMesh.getSplatCount()>0){this.splatMesh.updateVisibleRegionFadeDistance(this.sceneRevealMode),this.splatMesh.updateTransforms(),this.getRenderDimensions(e);const t=.5*this.camera.projectionMatrix.elements[0]*this.devicePixelRatio*e.x,s=.5*this.camera.projectionMatrix.elements[5]*this.devicePixelRatio*e.y,n=this.camera.isOrthographicCamera?1/this.devicePixelRatio:1,r=this.focalAdjustment*n,i=1/r;this.adjustForWebXRStereo(e),this.splatMesh.updateUniforms(e,t*r,s*r,this.camera.isOrthographicCamera,this.camera.zoom||1,i)}}}();adjustForWebXRStereo(e){if(this.camera&&this.webXRActive){const t=this.renderer.xr.getCamera().projectionMatrix.elements[0],s=this.camera.projectionMatrix.elements[0];e.x*=s/t}}isLoadingOrUnloading(){return Object.keys(this.splatSceneDownloadPromises).length>0||null!==this.splatSceneDownloadAndBuildPromise||null!==this.splatSceneRemovalPromise}isDisposingOrDisposed(){return this.disposing||this.disposed}addSplatSceneDownloadPromise(e){this.splatSceneDownloadPromises[e.id]=e}removeSplatSceneDownloadPromise(e){delete this.splatSceneDownloadPromises[e.id]}setSplatSceneDownloadAndBuildPromise(e){this.splatSceneDownloadAndBuildPromise=e}clearSplatSceneDownloadAndBuildPromise(){this.splatSceneDownloadAndBuildPromise=null}addSplatScene(e,t={}){if(this.isLoadingOrUnloading())throw new Error("Cannot add splat scene while another load or unload is already in progress.");if(this.isDisposingOrDisposed())throw new Error("Cannot add splat scene after dispose() is called.");t.progressiveLoad&&this.splatMesh.scenes&&this.splatMesh.scenes.length>0&&(console.log('addSplatScene(): "progressiveLoad" option ignore because there are multiple splat scenes'),t.progressiveLoad=!1);const s=void 0!==t.format&&null!==t.format?t.format:xs(e),n=Sn.isProgressivelyLoadable(s)&&t.progressiveLoad,r=void 0===t.showLoadingUI||null===t.showLoadingUI||t.showLoadingUI;let i=null;r&&(this.loadingSpinner.removeAllTasks(),i=this.loadingSpinner.addTask("Downloading..."));const o=(e,t,s)=>{if(r)if(s===Xt)if(100==e)this.loadingSpinner.setMessageForTask(i,"Download complete!");else if(n)this.loadingSpinner.setMessageForTask(i,"Downloading splats...");else{const e=t?`: ${t}`:"...";this.loadingSpinner.setMessageForTask(i,`Downloading${e}`)}else s===Jt&&this.loadingSpinner.setMessageForTask(i,"Processing splats...")};let a=!1,l=0;const c=(e,t)=>{r&&((e&&n||t&&!n)&&(this.loadingSpinner.removeTask(i),t||a||this.loadingProgressBar.show()),n&&(t?(a=!0,this.loadingProgressBar.hide()):this.loadingProgressBar.setProgress(l)))};return(n?this.downloadAndBuildSingleSplatSceneProgressiveLoad.bind(this):this.downloadAndBuildSingleSplatSceneStandardLoad.bind(this))(e,s,t.splatAlphaRemovalThreshold,((e,s,i)=>{!n&&t.onProgress&&t.onProgress(0,"0%",Jt);const o={rotation:t.rotation||t.orientation,position:t.position,scale:t.scale,splatAlphaRemovalThreshold:t.splatAlphaRemovalThreshold};return this.addSplatBuffers([e],[o],i,s&&r,r,n,n).then((()=>{!n&&t.onProgress&&t.onProgress(100,"100%",Jt),c(s,i)}))}).bind(this),((e,s,n)=>{l=e,o(e,s,n),t.onProgress&&t.onProgress(e,s,n)}),(()=>{this.loadingProgressBar.hide(),this.loadingSpinner.removeAllTasks()}).bind(this),t.headers)}downloadAndBuildSingleSplatSceneStandardLoad(e,t,s,n,r,i,o){const a=this.downloadSplatSceneToSplatBuffer(e,s,r,!1,void 0,t,o),l=ce(a.abortHandler);return a.then((e=>(this.removeSplatSceneDownloadPromise(a),n(e,!0,!0).then((()=>{l.resolve(),this.clearSplatSceneDownloadAndBuildPromise()}))))).catch((t=>{i&&i(),this.clearSplatSceneDownloadAndBuildPromise(),this.removeSplatSceneDownloadPromise(a),l.reject(this.updateError(t,`Viewer::addSplatScene -> Could not load file ${e}`))})),this.addSplatSceneDownloadPromise(a),this.setSplatSceneDownloadAndBuildPromise(l.promise),l.promise}downloadAndBuildSingleSplatSceneProgressiveLoad(e,t,s,n,r,i,o){let a=0,l=!1;const c=[],h=()=>{if(c.length>0&&!l&&!this.isDisposingOrDisposed()){l=!0;const e=c.shift();n(e.splatBuffer,e.firstBuild,e.finalBuild).then((()=>{l=!1,e.firstBuild?p.resolve():e.finalBuild&&(u.resolve(),this.clearSplatSceneDownloadAndBuildPromise()),c.length>0&&oe((()=>h()))}))}},d=this.downloadSplatSceneToSplatBuffer(e,s,r,!0,((e,t)=>{this.isDisposingOrDisposed()||(t||0===c.length||e.getSplatCount()>c[0].splatBuffer.getSplatCount())&&(c.push({splatBuffer:e,firstBuild:0===a,finalBuild:t}),a++,h())}),t,o),p=ce(d.abortHandler),u=ce();return this.addSplatSceneDownloadPromise(d),this.setSplatSceneDownloadAndBuildPromise(u.promise),d.then((()=>{this.removeSplatSceneDownloadPromise(d)})).catch((e=>{this.clearSplatSceneDownloadAndBuildPromise(),this.removeSplatSceneDownloadPromise(d);const t=this.updateError(e,"Viewer::addSplatScene -> Could not load one or more scenes");p.reject(t),i&&i(t)})),p.promise}addSplatScenes(e,t=!0,s=void 0){if(this.isLoadingOrUnloading())throw new Error("Cannot add splat scene while another load or unload is already in progress.");if(this.isDisposingOrDisposed())throw new Error("Cannot add splat scene after dispose() is called.");const n=e.length,r=[];let i;t&&(this.loadingSpinner.removeAllTasks(),i=this.loadingSpinner.addTask("Downloading..."));const o=(e,o,a,l)=>{r[e]=o;let c=0;for(let t=0;t<n;t++)c+=r[t]||0;c/=n,a=`${c.toFixed(2)}%`,t&&l===Xt&&this.loadingSpinner.setMessageForTask(i,100==c?"Download complete!":`Downloading: ${a}`),s&&s(c,a,l)},a=[],l=[];for(let h=0;h<e.length;h++){const t=e[h],s=void 0!==t.format&&null!==t.format?t.format:xs(t.path),n=this.downloadSplatSceneToSplatBuffer(t.path,t.splatAlphaRemovalThreshold,o.bind(this,h),!1,void 0,s,t.headers);a.push(n),l.push(n.promise)}const c=new $(((n,r)=>{Promise.all(l).then((r=>{t&&this.loadingSpinner.removeTask(i),s&&s(0,"0%",Jt),this.addSplatBuffers(r,e,!0,t,t,!1,!1).then((()=>{s&&s(100,"100%",Jt),this.clearSplatSceneDownloadAndBuildPromise(),n()}))})).catch((e=>{t&&this.loadingSpinner.removeTask(i),this.clearSplatSceneDownloadAndBuildPromise(),r(this.updateError(e,"Viewer::addSplatScenes -> Could not load one or more splat scenes."))})).finally((()=>{this.removeSplatSceneDownloadPromise(c)}))}),(e=>{for(let t of a)t.abort(e)}));return this.addSplatSceneDownloadPromise(c),this.setSplatSceneDownloadAndBuildPromise(c),c}downloadSplatSceneToSplatBuffer(e,t=1,s=void 0,n=!1,r=void 0,i,o){try{if(i===gs||i===Ss||i===Cs){const a=!n&&this.optimizeSplatData;if(i===gs)return As.loadFromURL(e,s,n,r,t,this.inMemoryCompressionLevel,a,o);if(i===Ss)return fs.loadFromURL(e,s,n,r,o);if(i===Cs)return is.loadFromURL(e,s,n,r,t,this.inMemoryCompressionLevel,a,this.sphericalHarmonicsDegree,o)}else if(i===ys)return ps.loadFromURL(e,s,t,this.inMemoryCompressionLevel,this.optimizeSplatData,this.sphericalHarmonicsDegree,o)}catch(a){throw this.updateError(a,null)}throw new Error(`Viewer::downloadSplatSceneToSplatBuffer -> File format not supported: ${e}`)}static isProgressivelyLoadable(e){return e===gs||e===Ss||e===Cs}addSplatBuffers=function(){return function(e,t=[],s=!0,n=!0,r=!0,i=!1,o=!1,a=!0){if(this.isDisposingOrDisposed())return Promise.resolve();let l=null;const c=()=>{null!==l&&(this.loadingSpinner.removeTask(l),l=null)};return this.splatRenderReady=!1,new Promise((h=>{n&&(l=this.loadingSpinner.addTask("Processing splats...")),oe((()=>{if(this.isDisposingOrDisposed())h();else{const n=this.addSplatBuffersToMesh(e,t,s,r,i,a),l=this.splatMesh.getMaxSplatCount();this.sortWorker&&this.sortWorker.maxSplatCount!==l&&this.disposeSortWorker(),this.gpuAcceleratedSort||this.preSortMessages.push({centers:n.centers.buffer,sceneIndexes:n.sceneIndexes.buffer,range:{from:n.from,to:n.to,count:n.count}});(!this.sortWorker&&l>0?this.setupSortWorker(this.splatMesh):Promise.resolve()).then((()=>{this.isDisposingOrDisposed()||this.runSplatSort(!0,!0).then((e=>{this.sortWorker&&e?(o?this.splatRenderReady=!0:this.runAfterNextSort.push((()=>{this.splatRenderReady=!0})),this.runAfterNextSort.push((()=>{c(),h()}))):(this.splatRenderReady=!0,c(),h())}))}))}}),!0)}))}}();addSplatBuffersToMesh=function(){let e;return function(t,s,n=!0,r=!1,i=!1,o=!0){if(this.isDisposingOrDisposed())return;let a=[],l=[];i||(a=this.splatMesh.scenes.map((e=>e.splatBuffer))||[],l=this.splatMesh.sceneOptions?this.splatMesh.sceneOptions.map((e=>e)):[]),a.push(...t),l.push(...s),this.renderer&&this.splatMesh.setRenderer(this.renderer);const c=this.splatMesh.build(a,l,!0,n,(t=>{if(this.isDisposingOrDisposed())return;const s=this.splatMesh.getSplatCount();r&&s>=15e5&&(t||e||(this.loadingSpinner.setMinimized(!0,!0),e=this.loadingSpinner.addTask("Optimizing data structures...")))}),(t=>{this.isDisposingOrDisposed()||t&&e&&(this.loadingSpinner.removeTask(e),e=null)}),o);return n&&this.freeIntermediateSplatData&&this.splatMesh.freeIntermediateSplatData(),c}}();setupSortWorker(e){if(!this.isDisposingOrDisposed())return new Promise((t=>{const s=this.integerBasedSort?Int32Array:Float32Array,n=e.getSplatCount(),r=e.getMaxSplatCount();this.sortWorker=function(e,t,s,n,r,i=me.DefaultSplatSortDistanceMapPrecision){const o=new Worker(URL.createObjectURL(new Blob(["(",hn.toString(),")(self)"],{type:"application/javascript"})));let a="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";const l=de()?pe():null;s||t?s?t||l&&l.major<=16&&l.minor<4&&(a="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"):a=cn:(a=cn,l&&l.major<=16&&l.minor<4&&(a="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"));const c=atob(a),h=new Uint8Array(c.length);for(let d=0;d<c.length;d++)h[d]=c.charCodeAt(d);return o.postMessage({init:{sorterWasmBytes:h.buffer,splatCount:e,useSharedMemory:t,integerBasedSort:n,dynamicMode:r,distanceMapRange:1<<i,Constants:{BytesPerFloat:me.BytesPerFloat,BytesPerInt:me.BytesPerInt,MemoryPageSize:me.MemoryPageSize,MaxScenes:me.MaxScenes}}}),o}(r,this.sharedMemoryForWorkers,this.enableSIMDInSort,this.integerBasedSort,this.splatMesh.dynamicMode,this.splatSortDistanceMapPrecision),this.sortWorker.onmessage=e=>{if(e.data.sortDone){if(this.sortRunning=!1,this.sharedMemoryForWorkers)this.splatMesh.updateRenderIndexes(this.sortWorkerSortedIndexes,e.data.splatRenderCount);else{const t=new Uint32Array(e.data.sortedIndexes.buffer,0,e.data.splatRenderCount);this.splatMesh.updateRenderIndexes(t,e.data.splatRenderCount)}this.lastSplatSortCount=this.splatSortCount,this.lastSortTime=e.data.sortTime,this.sortPromiseResolver(),this.sortPromiseResolver=null,this.forceRenderNextFrame(),this.runAfterNextSort.length>0&&(this.runAfterNextSort.forEach((e=>{e()})),this.runAfterNextSort.length=0)}else if(e.data.sortCanceled)this.sortRunning=!1;else if(e.data.sortSetupPhase1Complete){this.logLevel>=nn&&console.log("Sorting web worker WASM setup complete."),this.sharedMemoryForWorkers?(this.sortWorkerSortedIndexes=new Uint32Array(e.data.sortedIndexesBuffer,e.data.sortedIndexesOffset,r),this.sortWorkerIndexesToSort=new Uint32Array(e.data.indexesToSortBuffer,e.data.indexesToSortOffset,r),this.sortWorkerPrecomputedDistances=new s(e.data.precomputedDistancesBuffer,e.data.precomputedDistancesOffset,r),this.sortWorkerTransforms=new Float32Array(e.data.transformsBuffer,e.data.transformsOffset,16*me.MaxScenes)):(this.sortWorkerIndexesToSort=new Uint32Array(r),this.sortWorkerPrecomputedDistances=new s(r),this.sortWorkerTransforms=new Float32Array(16*me.MaxScenes));for(let e=0;e<n;e++)this.sortWorkerIndexesToSort[e]=e;if(this.sortWorker.maxSplatCount=r,this.logLevel>=nn){console.log("Sorting web worker ready.");const e=this.splatMesh.getSplatDataTextures(),t=e.covariances.size,s=e.centerColors.size;console.log("Covariances texture size: "+t.x+" x "+t.y),console.log("Centers/colors texture size: "+s.x+" x "+s.y)}t()}}}))}updateError(e,t){return e instanceof ee?e:e instanceof $t?new Error("File type or server does not support progressive loading."):t?new Error(t):e}disposeSortWorker(){this.sortWorker&&this.sortWorker.terminate(),this.sortWorker=null,this.sortPromise=null,this.sortPromiseResolver&&(this.sortPromiseResolver(),this.sortPromiseResolver=null),this.preSortMessages=[],this.sortRunning=!1}removeSplatScene(e,t=!0){return this.removeSplatScenes([e],t)}removeSplatScenes(e,t=!0){if(this.isLoadingOrUnloading())throw new Error("Cannot remove splat scene while another load or unload is already in progress.");if(this.isDisposingOrDisposed())throw new Error("Cannot remove splat scene after dispose() is called.");let s;return this.splatSceneRemovalPromise=new Promise(((n,r)=>{let i;t&&(this.loadingSpinner.removeAllTasks(),this.loadingSpinner.show(),i=this.loadingSpinner.addTask("Removing splat scene..."));const o=()=>{t&&(this.loadingSpinner.hide(),this.loadingSpinner.removeTask(i))},a=e=>{o(),this.splatSceneRemovalPromise=null,e?r(e):n()},l=()=>!!this.isDisposingOrDisposed()&&(a(),!0);s=this.sortPromise||Promise.resolve(),s.then((()=>{if(l())return;const t=[],n=[],r=[];for(let s=0;s<this.splatMesh.scenes.length;s++){let i=!1;for(let t of e)if(t===s){i=!0;break}if(!i){const e=this.splatMesh.scenes[s];t.push(e.splatBuffer),n.push(this.splatMesh.sceneOptions[s]),r.push({position:e.position.clone(),quaternion:e.quaternion.clone(),scale:e.scale.clone()})}}this.disposeSortWorker(),this.splatMesh.dispose(),this.sceneRevealMode=tn,this.createSplatMesh(),this.addSplatBuffers(t,n,!0,!1,!0).then((()=>{l()||(o(),this.splatMesh.scenes.forEach(((e,t)=>{e.position.copy(r[t].position),e.quaternion.copy(r[t].quaternion),e.scale.copy(r[t].scale)})),this.splatMesh.updateTransforms(),this.splatRenderReady=!1,this.runSplatSort(!0).then((()=>{l()?this.splatRenderReady=!0:(s=this.sortPromise||Promise.resolve(),s.then((()=>{this.splatRenderReady=!0,a()})))})))})).catch((e=>{a(e)}))}))})),this.splatSceneRemovalPromise}start(){if(!this.selfDrivenMode)throw new Error("Cannot start viewer unless it is in self driven mode.");this.webXRMode?this.renderer.setAnimationLoop(this.selfDrivenUpdateFunc):this.requestFrameId=requestAnimationFrame(this.selfDrivenUpdateFunc),this.selfDrivenModeRunning=!0}stop(){this.selfDrivenMode&&this.selfDrivenModeRunning&&(this.webXRMode?this.renderer.setAnimationLoop(null):cancelAnimationFrame(this.requestFrameId),this.selfDrivenModeRunning=!1)}async dispose(){if(this.isDisposingOrDisposed())return this.disposePromise;let e=[],t=[];for(let s in this.splatSceneDownloadPromises)if(this.splatSceneDownloadPromises.hasOwnProperty(s)){const n=this.splatSceneDownloadPromises[s];t.push(n),e.push(n.promise)}return this.sortPromise&&e.push(this.sortPromise),this.disposing=!0,this.disposePromise=Promise.all(e).finally((()=>{this.stop(),this.orthographicControls&&(this.orthographicControls.dispose(),this.orthographicControls=null),this.perspectiveControls&&(this.perspectiveControls.dispose(),this.perspectiveControls=null),this.controls=null,this.splatMesh&&(this.splatMesh.dispose(),this.splatMesh=null),this.sceneHelper&&(this.sceneHelper.dispose(),this.sceneHelper=null),this.resizeObserver&&(this.resizeObserver.unobserve(this.rootElement),this.resizeObserver=null),this.disposeSortWorker(),this.removeEventHandlers(),this.loadingSpinner.removeAllTasks(),this.loadingSpinner.setContainer(null),this.loadingProgressBar.hide(),this.loadingProgressBar.setContainer(null),this.infoPanel.setContainer(null),this.camera=null,this.threeScene=null,this.splatRenderReady=!1,this.initialized=!1,this.renderer&&(this.usingExternalRenderer||(this.rootElement.removeChild(this.renderer.domElement),this.renderer.dispose()),this.renderer=null),this.usingExternalRenderer||document.body.removeChild(this.rootElement),this.sortWorkerSortedIndexes=null,this.sortWorkerIndexesToSort=null,this.sortWorkerPrecomputedDistances=null,this.sortWorkerTransforms=null,this.disposed=!0,this.disposing=!1,this.disposePromise=null})),t.forEach((e=>{e.abort("Scene disposed")})),this.disposePromise}selfDrivenUpdate(){this.selfDrivenMode&&!this.webXRMode&&(this.requestFrameId=requestAnimationFrame(this.selfDrivenUpdateFunc)),this.update(),this.shouldRender()?(this.render(),this.consecutiveRenderFrames++):this.consecutiveRenderFrames=0,this.renderNextFrame=!1}forceRenderNextFrame(){this.renderNextFrame=!0}shouldRender=function(){let e=0;const t=new r,s=new p,n=1e-4;return function(){if(!this.initialized||!this.splatRenderReady||this.isDisposingOrDisposed())return!1;let r=!1,i=!1;if(this.camera){const e=this.camera.position,r=this.camera.quaternion;i=Math.abs(e.x-t.x)>n||Math.abs(e.y-t.y)>n||Math.abs(e.z-t.z)>n||Math.abs(r.x-s.x)>n||Math.abs(r.y-s.y)>n||Math.abs(r.z-s.z)>n||Math.abs(r.w-s.w)>n}return r=this.renderMode!==gn&&(0===e||this.splatMesh.visibleRegionChanging||i||this.renderMode===fn||!0===this.dynamicMode||this.renderNextFrame),this.camera&&(t.copy(this.camera.position),s.copy(this.camera.quaternion)),e++,r}}();render=function(){if(!this.initialized||!this.splatRenderReady||this.isDisposingOrDisposed())return;const e=this.renderer.autoClear;(e=>{for(let t of e.children)if(t.visible)return!0;return!1})(this.threeScene)&&(this.renderer.render(this.threeScene,this.camera),this.renderer.autoClear=!1),this.renderer.render(this.splatMesh,this.camera),this.renderer.autoClear=!1,this.sceneHelper.getFocusMarkerOpacity()>0&&this.renderer.render(this.sceneHelper.focusMarker,this.camera),this.showControlPlane&&this.renderer.render(this.sceneHelper.controlPlane,this.camera),this.renderer.autoClear=e};update(e,t){this.dropInMode&&this.updateForDropInMode(e,t),this.initialized&&this.splatRenderReady&&!this.isDisposingOrDisposed()&&(this.controls&&(this.controls.update(),this.camera.isOrthographicCamera&&!this.usingExternalCamera&&Sn.setCameraPositionFromZoom(this.camera,this.camera,this.controls)),this.runSplatSort(),this.updateForRendererSizeChanges(),this.updateSplatMesh(),this.updateMeshCursor(),this.updateFPS(),this.timingSensitiveUpdates(),this.updateInfoPanel(),this.updateControlPlane())}updateForDropInMode(e,t){this.renderer=e,this.splatMesh&&this.splatMesh.setRenderer(this.renderer),this.camera=t,this.controls&&(this.controls.object=t),this.init()}updateFPS=function(){let e=re(),t=0;return function(){if(this.consecutiveRenderFrames>60){const s=re();s-e>=1?(this.currentFPS=t,t=0,e=s):t++}else this.currentFPS=null}}();updateForRendererSizeChanges=function(){const e=new i,t=new i;let s;return function(){this.usingExternalCamera||(this.renderer.getSize(t),void 0!==s&&s===this.camera.isOrthographicCamera&&t.x===e.x&&t.y===e.y||(this.camera.isOrthographicCamera?(this.camera.left=-t.x/2,this.camera.right=t.x/2,this.camera.top=t.y/2,this.camera.bottom=-t.y/2):this.camera.aspect=t.x/t.y,this.camera.updateProjectionMatrix(),e.copy(t),s=this.camera.isOrthographicCamera))}}();timingSensitiveUpdates=function(){let e;return function(){const t=re();e||(e=t);const s=t-e;this.updateCameraTransition(t),this.updateFocusMarker(s),e=t}}();updateCameraTransition=function(){let e=new r,t=new r,s=new r;return function(n){if(this.transitioningCameraTarget){t.copy(this.previousCameraTarget).sub(this.camera.position).normalize(),s.copy(this.nextCameraTarget).sub(this.camera.position).normalize();const r=Math.acos(t.dot(s)),i=(r/(Math.PI/3)*.65+.3)/r*(n-this.transitioningCameraTargetStartTime);e.copy(this.previousCameraTarget).lerp(this.nextCameraTarget,i),this.camera.lookAt(e),this.controls.target.copy(e),i>=1&&(this.transitioningCameraTarget=!1)}}}();updateFocusMarker=function(){const e=new i;let t=!1;return function(s){if(this.getRenderDimensions(e),this.transitioningCameraTarget){this.sceneHelper.setFocusMarkerVisibility(!0);const n=Math.max(this.sceneHelper.getFocusMarkerOpacity(),0);let r=Math.min(n+10*s,1);this.sceneHelper.setFocusMarkerOpacity(r),this.sceneHelper.updateFocusMarker(this.nextCameraTarget,this.camera,e),t=!0,this.forceRenderNextFrame()}else{let n;if(n=t?1:Math.min(this.sceneHelper.getFocusMarkerOpacity(),1),n>0){this.sceneHelper.updateFocusMarker(this.nextCameraTarget,this.camera,e);let t=Math.max(n-2.5*s,0);this.sceneHelper.setFocusMarkerOpacity(t),0===t&&this.sceneHelper.setFocusMarkerVisibility(!1)}n>0&&this.forceRenderNextFrame(),t=!1}}}();updateMeshCursor=function(){const e=[],t=new i;return function(){this.showMeshCursor?(this.forceRenderNextFrame(),this.getRenderDimensions(t),e.length=0,this.raycaster.setFromCameraAndScreenPosition(this.camera,this.mousePosition,t),this.raycaster.intersectSplatMesh(this.splatMesh,e),e.length>0?(this.sceneHelper.setMeshCursorVisibility(!0),this.sceneHelper.positionAndOrientMeshCursor(e[0].origin,this.camera)):this.sceneHelper.setMeshCursorVisibility(!1)):(this.sceneHelper.getMeschCursorVisibility()&&this.forceRenderNextFrame(),this.sceneHelper.setMeshCursorVisibility(!1))}}();updateInfoPanel=function(){const e=new i;return function(){if(!this.showInfo)return;const t=this.splatMesh.getSplatCount();this.getRenderDimensions(e);const s=this.controls?this.controls.target:null,n=this.showMeshCursor?this.sceneHelper.meshCursor.position:null,r=t>0?this.splatRenderCount/t*100:0;this.infoPanel.update(e,this.camera.position,s,this.camera.up,this.camera.isOrthographicCamera,n,this.currentFPS||"N/A",t,this.splatRenderCount,r,this.lastSortTime,this.focalAdjustment,this.splatMesh.getSplatScale(),this.splatMesh.getPointCloudModeEnabled())}}();updateControlPlane(){this.showControlPlane?(this.sceneHelper.setControlPlaneVisibility(!0),this.sceneHelper.positionAndOrientControlPlane(this.controls.target,this.camera.up)):this.sceneHelper.setControlPlaneVisibility(!1)}runSplatSort=function(){const e=new d,t=[],s=new r(0,0,-1),n=new r(0,0,-1),i=new r,o=new r,a=[],l=[{angleThreshold:.55,sortFractions:[.125,.33333,.75]},{angleThreshold:.65,sortFractions:[.33333,.66667]},{angleThreshold:.8,sortFractions:[.5]}];return function(r=!1,c=!1){if(!this.initialized)return Promise.resolve(!1);if(this.sortRunning)return Promise.resolve(!0);if(this.splatMesh.getSplatCount()<=0)return this.splatRenderCount=0,Promise.resolve(!1);let h=0,d=0,p=!1,u=!1;if(n.set(0,0,-1).applyQuaternion(this.camera.quaternion),h=n.dot(s),d=o.copy(this.camera.position).sub(i).length(),!(r||this.splatMesh.dynamicMode||0!==a.length||(h<=.99&&(p=!0),d>=1&&(u=!0),p||u)))return Promise.resolve(!1);this.sortRunning=!0;let{splatRenderCount:m,shouldSortAll:A}=this.gatherSceneNodesForSort();A=A||c,this.splatRenderCount=m,e.copy(this.camera.matrixWorld).invert();const f=this.perspectiveCamera||this.camera;e.premultiply(f.projectionMatrix),this.splatMesh.dynamicMode||e.multiply(this.splatMesh.matrixWorld);let g=Promise.resolve(!0);return this.gpuAcceleratedSort&&(a.length<=1||a.length%2==0)&&(g=this.splatMesh.computeDistancesOnGPU(e,this.sortWorkerPrecomputedDistances)),g.then((()=>{if(0===a.length)if(this.splatMesh.dynamicMode||A)a.push(this.splatRenderCount);else{for(let e of l)if(h<e.angleThreshold){for(let t of e.sortFractions)a.push(Math.floor(this.splatRenderCount*t));break}a.push(this.splatRenderCount)}let r=Math.min(a.shift(),this.splatRenderCount);this.splatSortCount=r,t[0]=this.camera.position.x,t[1]=this.camera.position.y,t[2]=this.camera.position.z;const o={modelViewProj:e.elements,cameraPosition:t,splatRenderCount:this.splatRenderCount,splatSortCount:r,usePrecomputedDistances:this.gpuAcceleratedSort};return this.splatMesh.dynamicMode&&this.splatMesh.fillTransformsArray(this.sortWorkerTransforms),this.sharedMemoryForWorkers||(o.indexesToSort=this.sortWorkerIndexesToSort,o.transforms=this.sortWorkerTransforms,this.gpuAcceleratedSort&&(o.precomputedDistances=this.sortWorkerPrecomputedDistances)),this.sortPromise=new Promise((e=>{this.sortPromiseResolver=e})),this.preSortMessages.length>0&&(this.preSortMessages.forEach((e=>{this.sortWorker.postMessage(e)})),this.preSortMessages=[]),this.sortWorker.postMessage({sort:o}),0===a.length&&(i.copy(this.camera.position),s.copy(n)),!0})),g}}();gatherSceneNodesForSort=function(){const e=[];let t=null;const s=new r,n=new r,i=new r,o=new d,a=new d,l=new d,c=new r,h=new r(0,0,-1),p=new r,m=e=>p.copy(e.max).sub(e.min).length();return function(r=!1){this.getRenderDimensions(c);const d=c.y/2/Math.tan(this.camera.fov/2*u.DEG2RAD),p=Math.atan(c.x/2/d),A=Math.atan(c.y/2/d),f=Math.cos(p),g=Math.cos(A),S=this.splatMesh.getSplatTree();if(S){a.copy(this.camera.matrixWorld).invert(),this.splatMesh.dynamicMode||a.multiply(this.splatMesh.matrixWorld);let t=0,c=0;for(let p=0;p<S.subTrees.length;p++){const d=S.subTrees[p];o.copy(a),this.splatMesh.dynamicMode&&(this.splatMesh.getSceneTransform(p,l),o.multiply(l));const u=d.nodesWithIndexes.length;for(let a=0;a<u;a++){const l=d.nodesWithIndexes[a];if(!l.data||!l.data.indexes||0===l.data.indexes.length)continue;i.copy(l.center).applyMatrix4(o);const p=i.length();i.normalize(),s.copy(i).setX(0).normalize(),n.copy(i).setY(0).normalize();const u=h.dot(n),A=h.dot(s),S=m(l);!r&&(u<f-.6||A<g-.6)&&p>S||(c+=l.data.indexes.length,e[t]=l,l.data.distanceToNode=p,t++)}}e.length=t,e.sort(((e,t)=>e.data.distanceToNode<t.data.distanceToNode?-1:1));let d=c*me.BytesPerInt;for(let s=0;s<t;s++){const t=e[s],n=t.data.indexes.length,r=n*me.BytesPerInt;new Uint32Array(this.sortWorkerIndexesToSort.buffer,d-r,n).set(t.data.indexes),d-=r}return{splatRenderCount:c,shouldSortAll:!1}}{const e=this.splatMesh.getSplatCount();if(!t||t.length!==e){t=new Uint32Array(e);for(let s=0;s<e;s++)t[s]=s}return this.sortWorkerIndexesToSort.set(t),{splatRenderCount:e,shouldSortAll:!0}}}}();getSplatMesh(){return this.splatMesh}getSplatScene(e){return this.splatMesh.getScene(e)}getSceneCount(){return this.splatMesh.getSceneCount()}isMobile(){return navigator.userAgent.includes("Mobi")}}class Cn extends e{constructor(e={}){super(),e.selfDrivenMode=!1,e.useBuiltInControls=!1,e.rootElement=null,e.dropInMode=!0,e.camera=void 0,e.renderer=void 0,this.viewer=new Sn(e),this.splatMesh=null,this.updateSplatMesh(),this.callbackMesh=Cn.createCallbackMesh(),this.add(this.callbackMesh),this.callbackMesh.onBeforeRender=Cn.onBeforeRender.bind(this,this.viewer),this.viewer.onSplatMeshChanged((()=>{this.updateSplatMesh()}))}updateSplatMesh(){this.splatMesh!==this.viewer.splatMesh&&(this.splatMesh&&this.remove(this.splatMesh),this.splatMesh=this.viewer.splatMesh,this.add(this.viewer.splatMesh))}addSplatScene(e,t={}){return!1!==t.showLoadingUI&&(t.showLoadingUI=!0),this.viewer.addSplatScene(e,t)}addSplatScenes(e,t){return!1!==t&&(t=!0),this.viewer.addSplatScenes(e,t)}getSplatScene(e){return this.viewer.getSplatScene(e)}removeSplatScene(e,t=!0){return this.viewer.removeSplatScene(e,t)}removeSplatScenes(e,t=!0){return this.viewer.removeSplatScenes(e,t)}getSceneCount(){return this.viewer.getSceneCount()}setActiveSphericalHarmonicsDegrees(e){this.viewer.setActiveSphericalHarmonicsDegrees(e)}async dispose(){return await this.viewer.dispose()}static onBeforeRender(e,t,s,n){e.update(t,n)}static createCallbackMesh(){const e=new t(1,8,8),r=new s;r.colorWrite=!1,r.depthWrite=!1;const i=new n(e,r);return i.frustumCulled=!1,i}}export{Cn as D};
