import{e,b as a,a as o}from"./@tresjs.BL1sBIDK1758524188831.js";import{P as r}from"./tweakpane.C0HtAJSg1758524188831.js";import{_ as n}from"./reflectorDUDV.vue_vue_type_script_setup_true_lang.0p0XW2Cf1758524188831.js";import{d as t,aa as i,w as l,G as s,o as u,I as v,a7 as p,a8 as m,r as f,h as d,e as g,f as c,j as x,u as h,a5 as w,m as _}from"./@vue.pEDXJ_3Z1758524188831.js";import{ai as j,aP as P,r as C,aL as b,C as y,a3 as D}from"./three.CC50Wz7a1758524188831.js";import"./postprocessing.DYlQqnRh1758524188831.js";import"./@vueuse.C-O_6is-1758524188831.js";import"./dither.glsl.tNAdkJUa1758524188831.js";import"./Reflector.hbefUijb1758524188831.js";import"./OimoPhysicsBuffer.CcBMdMc41758524188831.js";import"./oimophysics.BBtHVm4j1758524188831.js";import"./vite-plugin-qiankun.B06WoCqG1758524188831.js";const G=["rotateX"],F=["args"],U=t({__name:"digitalGround",props:{size:{default:10},speed:{default:1},color:{default:"#FFFFFF"}},async setup(o){let r,n;const t=o,f=([r,n]=i((()=>a(["./plugins/floor/image/digitalGround1.png","./plugins/floor/image/digitalGround2.png","./plugins/floor/image/digitalGround3.png","./plugins/floor/image/digitalGround4.png"]))),r=await r,n(),r);for(let e=0;e<f.length;e++)f[e].colorSpace=j,f[e].wrapS=P,f[e].wrapT=P,f[e].magFilter=C,f[e].minFilter=b;const d={uniforms:{time:{value:0},radius:{value:t.size},uColor:{value:new y(t.color)},texture0:{value:f[0]},texture1:{value:f[1]},texture2:{value:f[2]},texture3:{value:f[3]}},vertexShader:"\n        varying vec3 vPosition;\n        varying vec2 vUv;\n        void main(){\n            vPosition = position;\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }\n    ",fragmentShader:"\n        uniform float time;\n        uniform float radius;\n\n        uniform sampler2D texture0;\n        uniform sampler2D texture1;\n        uniform sampler2D texture2;\n        uniform sampler2D texture3;\n\n        varying vec3 vPosition;\n        uniform vec3 uColor;\n        varying vec2 vUv;\n\n        float wave(float a, float l, float s, float second, float val) {\n            float PI = 3.141592653;\n            float wave = a * sin(- val * 2.0 * PI / l + second * s * 2.0 * PI / l);\n            return (wave + 1.0) / 2.0;\n        }\n        void main(){\n            vec4 basceColor = vec4(uColor, 1.0);\n            vec4 back = texture2D( texture0, vUv * 16.0);\n\n            vec4 ori1 = texture2D( texture1, vUv * 4.0); // 电子元件\n            vec4 ori2 = texture2D( texture2, vUv * 16.0 ); // 点\n            vec4 ori3 = texture2D( texture3, vUv * 16.0 ); // 网格\n\n            float length = length( vec2(vPosition.x, vPosition.y) );\n            // 应用波函数蒙版\n            float flag1 = wave(1.0, radius / 2.0, 45.0, time, length);\n            if (flag1 < 0.5) {\n                flag1 = 0.0;\n            }\n            ori1.a = ori1.a * (flag1 * 0.8 + 0.2);\n            float flag2 = wave(1.0, radius / 3.0, 30.0, time, length);\n            ori2.a = ori2.a * (flag2 * 0.8 + 0.2);\n            float flag3 = wave(1.0, 60.0, 20.0, time, length);\n            ori3.a = ori3.a * (flag3 * 2.0 - 1.5);\n            // 应用蒙版\n            float alpha = clamp(ori1.a + ori2.a + ori3.a + back.a * 0.01, 0.0, 1.0);\n            basceColor.a = alpha*2.0;\n\n            gl_FragColor = basceColor * clamp((2.0 - (length * 2.0 / radius)), 0.0, 1.0);\n        }\n    ",side:D,transparent:!0};l((()=>t.color),(e=>{d.uniforms.uColor.value=new y(e)}));const{onLoop:g}=e();return g((({elapsed:e})=>{d.uniforms.time.value=e/10*t.speed})),(e,a)=>(u(),s("TresGroup",null,[v("TresMesh",{rotateX:-Math.PI/2},[v("TresCircleGeometry",{args:[e.size]},null,8,F),v("TresShaderMaterial",p(m(d)),null,16)],8,G)]))}}),T=t({__name:"digitalGround",setup(e){const a=f({reflectivity:.1,showGridHelper:!1,scale:1}),t=f({color:"#de62f2",speed:.8,size:10}),i=new r({title:"digitalGround",expanded:!0});return i.addBinding(t,"color",{label:"颜色"}),i.addBinding(t,"speed",{label:"速度",min:.1,max:5,step:.1}),i.addBinding(t,"size",{label:"大小",min:.1,max:20,step:.1}),(e,r)=>{const i=d("TresCanvas");return u(),g(i,{clearColor:"#666666","window-size":""},{default:c((()=>[r[0]||(r[0]=v("TresPerspectiveCamera",{position:[3,3,0],fov:45,near:.1,far:1e4},null,-1)),x(h(o),{enableDamping:"",autoRotate:""}),(u(),g(w,null,{default:c((()=>[x(U,p(m(t)),null,16)])),_:1})),(u(),g(w,null,{default:c((()=>[x(n,_({position:[0,-.5,0]},a),null,16)])),_:1}))])),_:1})}}});export{T as default};
