import{_ as t,t as n,as as e,T as o,ai as r}from"./three.Rja0AEnA1735866388381.js";import{e as a,b as i,U as s,c}from"./@tresjs.FlKhQDQ71735866388381.js";import"./index.gGSA2D7Y1735866388381.js";import{c as l}from"./simplex-noise.jB2HxhHB1735866388381.js";import{C as u}from"./index.id5kPtm81735866388381.js";import{d as f,a4 as p,o as h,D as m,J as v,u as d,r as g,f as x,g as y,j as w,aj as b,ak as _,al as M}from"./@vue.yG49nQHr1735866388381.js";import{_ as j}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.REjz8p7_1735866388381.js";import"./@vueuse.YI3Exu6_1735866388381.js";import"./lamina.BA_COW3G1735866388381.js";import"./glsl-tokenizer.oFd2Ic_R1735866388381.js";import"./@amap.B1QlzV1D1735866388381.js";import"./glsl-token-descope.Mzeq4igH1735866388381.js";import"./glsl-token-depth.TDEhYoEc1735866388381.js";import"./glsl-token-scope.cKOF15HY1735866388381.js";import"./glsl-token-properties.VjrKD7up1735866388381.js";import"./glsl-token-assignments.hPGV2SoZ1735866388381.js";import"./glsl-token-string.MAuoMmkC1735866388381.js";import"./glsl-token-functions.K6SlAasF1735866388381.js";import"./object-hash.ne_nEdig1735866388381.js";import"./jszip.LS64v-ne1735866388381.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.z0kfpy3C1735866388381.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.j0GONCoP1735866388381.js";import"./three-stdlib.ljGSSKXp1735866388381.js";import"./@pmndrs.IQpkozJe1735866388381.js";import"./utils.oKG8CsPe1735866388381.js";const z=I;!function(t,n){const e=I,o=E();for(;;)try{if(428114===-parseInt(e(164))/1*(-parseInt(e(180))/2)+parseInt(e(149))/3+parseInt(e(194))/4+parseInt(e(178))/5+-parseInt(e(131))/6+-parseInt(e(201))/7+-parseInt(e(133))/8*(parseInt(e(181))/9))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[I(167)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function I(t,n){const e=E();return(I=function(t,n){return e[t-=119]})(t,n)}!function(){A(this,(function(){const t=I,n=new RegExp(t(153)),e=new RegExp(t(119),"i"),o=T(t(140));n.test(o+"chain")&&e[t(172)](o+t(185))?T():o("0")}))()}();const k=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[I(167)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();k(void 0,(function(){const t=I;let n;try{n=Function(t(151)+t(160)+");")()}catch(r){n=window}const e=n[t(192)]=n.console||{},o=[t(143),t(148),t(127),t(186),t(184),t(174),t(170)];for(let a=0;a<o[t(120)];a++){const n=k.constructor[t(124)].bind(k),r=o[a],i=e[r]||n;n[t(134)]=k[t(135)](k),n.toString=i[t(158)].bind(i),e[r]=n}}))();const C=[z(166)],S=[z(189),"attributes-position","attributes-uv",z(161),z(179),z(137),z(123),z(132)],F=[z(177)],R=[z(168)],D=f({__name:z(190),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(r){const s=z;let c,f;const g=([c,f]=p((()=>i({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),c=await c,f(),c),x=r,y=l(Math[s(145)]);function w(n,e){const o=s,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,a=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,i=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,c=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(159)])(r,a,i,c)}function b(t,n){var e=2*y(t/50,n/50);return e+=4*y(t/100,n/100),e+=.2*y(t/10,n/10)}const _=function(n,r){const a=s,i=[],c=[],l=[],u=[],f=[];let p=new e,h=new(t[a(159)]);const m=-.25;for(let e=0;e<n;e++){const o=Math[a(145)]()*r-r/2,s=Math[a(145)]()*r-r/2,v=b(o,s);i.push(o,v,s);let d=Math.PI-Math.random()*(2*Math.PI);u[a(139)](Math.sin(.5*d)),f[a(139)](Math[a(162)](.5*d));let g=new(t[a(171)])(0,1,0),x=g.x*Math[a(128)](d/2),y=g.y*Math[a(128)](d/2),_=g.z*Math[a(128)](d/2),M=Math[a(162)](d/2);p.set(x,y,_,M)[a(199)](),d=.5*Math[a(145)]()+m,g=new(t[a(171)])(1,0,0),x=g.x*Math[a(128)](d/2),y=g.y*Math[a(128)](d/2),_=g.z*Math[a(128)](d/2),M=Math.cos(d/2),h[a(122)](x,y,_,M)[a(199)](),p=w(p,h),d=.5*Math.random()+m,g=new(t[a(171)])(0,0,1),x=g.x*Math[a(128)](d/2),y=g.y*Math[a(128)](d/2),_=g.z*Math[a(128)](d/2),M=Math[a(162)](d/2),h.set(x,y,_,M).normalize(),p=w(p,h),c[a(139)](p.x,p.y,p.z,p.w),e<n/3?l.push(1.8*Math[a(145)]()):l[a(139)](Math.random())}return{offsetsF32:new(t[a(152)])(new Float32Array(i),3),orientationsF32:new(t[a(152)])(new Float32Array(c),4),stretchesF32:new(t[a(152)])(new Float32Array(l),1),halfRootAngleCosF32:new(t[a(152)])(new Float32Array(f),1),halfRootAngleSinF32:new o(new Float32Array(u),1)}}(x.instances,x[s(121)]),M=new(t[s(195)])(x.bW,x.bH,1,x[s(197)]).translate(0,x.bH/2,0),j=new n(x[s(121)],x.width,32,32);j.lookAt(new(t[s(171)])(0,1,0));const A=j[s(163)][s(130)];for(let t=0;t<A[s(173)][s(120)];t+=3)A[s(173)][t+1]=b(A[s(173)][t],A[s(173)][t+2]);j[s(163)][s(130)][s(165)]=!0,j[s(150)]();const I=new(u({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(t[s(183)])(.3,.9,0)[s(176)](),bottomColor:new(t[s(183)])(0,.2,0)[s(176)]()},s(144),s(138),(n=>{const e=s;n[e(168)]=t[e(175)]})));I[s(146)]=g[s(146)],I.alphaMap=g[s(193)],I[s(141)]=!1;const{onLoop:k}=a();return k((({elapsed:t})=>{const n=s;I[n(154)][n(157)].value=t/4})),(n,e)=>{const o=s;return h(),m(o(187),null,[v(o(202),{material:d(I)},[v(o(136),{index:d(M).index,"attributes-position":d(M).attributes[o(130)],"attributes-uv":d(M).attributes.uv,"attributes-offset":d(_)[o(155)],"attributes-orientation":d(_).orientationsF32,"attributes-stretch":d(_)[o(156)],"attributes-halfRootAngleSin":d(_).halfRootAngleSinF32,"attributes-halfRootAngleCos":d(_)[o(196)]},null,8,S)],8,C),v(o(202),{position:[0,0,0],geometry:d(j)},[v(o(188),{color:o(169),side:t[o(175)]},null,8,R)],8,F)])}}});function E(){const t=["position","264414SjnkcW","attributes-halfRootAngleCos","3164080UIkUnQ","__proto__","bind","TresInstancedBufferGeometry","attributes-stretch","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","push","init","toneMapped","call","log","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","random","map","string","warn","344475AFDxFZ","computeVertexNormals","return (function() ","InstancedBufferAttribute","function *\\( *\\)","uniforms","offsetsF32","stretchesF32","time","toString","Vector4",'{}.constructor("return this")( )',"attributes-offset","cos","attributes","3095iBZxvs","needsUpdate","material","apply","side","#000f00","trace","Vector3","test","array","table","DoubleSide","convertSRGBToLinear","geometry","3293230kTkkrh","attributes-orientation","430NSVvLO","36VFafqR","while (true) {}","Color","exception","input","error","TresGroup","TresMeshStandardMaterial","index","grass","counter","console","alphaMap","2983992Zyjvxy","PlaneGeometry","halfRootAngleCosF32","joints","gger","normalize","debu","914697KAUfex","TresMesh","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","length","width","set","attributes-halfRootAngleSin","prototype","constructor","stateObject","info","sin","action"];return(E=function(){return t})()}function T(t){function n(t){const e=I;if(typeof t===e(147))return function(t){}[e(125)](e(182)).apply(e(191));1!==(""+t/t).length||t%20==0?function(){return!0}[e(125)](e(200)+e(198))[e(142)](e(129)):function(){return!1}[e(125)](e(200)+e(198))[e(167)](e(126)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const L=U;!function(t,n){const e=U,o=B();for(;;)try{if(716657===parseInt(e(420))/1*(parseInt(e(422))/2)+parseInt(e(417))/3+-parseInt(e(453))/4*(parseInt(e(442))/5)+-parseInt(e(450))/6+parseInt(e(440))/7*(-parseInt(e(431))/8)+-parseInt(e(428))/9*(-parseInt(e(441))/10)+parseInt(e(429))/11*(parseInt(e(421))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[U(436)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function U(t,n){const e=B();return(U=function(t,n){return e[t-=416]})(t,n)}!function(){O(this,(function(){const t=U,n=new RegExp(t(416)),e=new RegExp(t(445),"i"),o=G(t(423));n.test(o+t(432))&&e.test(o+t(449))?G():o("0")}))()}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[U(436)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function B(){const t=["3259713uEGTxE","string","return (function() ","682MJIzrM","24vrAYfc","2606pEnBlf","init","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","constructor","counter","toString","9qVMmxF","4518184GdyOtH","stateObject","2072TSURhF","chain","debu","console","grass","apply","prototype","__proto__","trace","30352hOVLTL","9180590xIRHHc","1179265ztXEgM","bind","length","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","table","gger","while (true) {}","input","7005144ZxXxpD","warn","action","12yGjLkE","function *\\( *\\)"];return(B=function(){return t})()}H(void 0,(function(){const t=U,n=function(){const t=U;let n;try{n=Function(t(419)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(434)]=n[t(434)]||{},o=["log",t(451),"info","error","exception",t(446),t(439)];for(let r=0;r<o[t(444)];r++){const n=H[t(425)][t(437)][t(443)](H),a=o[r],i=e[a]||n;n[t(438)]=H.bind(H),n[t(427)]=i.toString[t(443)](i),e[a]=n}}))();const P=f({__name:L(435),setup(t){const n=g({alpha:!0,toneMapping:r,windowSize:!0,clearColor:6710886}),e=g({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=U;return h(),x(d(c),b(_(n)),{default:y((()=>[o[0]||(o[0]=v("TresPerspectiveCamera",{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),w(d(s),b(_(e)),null,16),(h(),x(M,null,{default:y((()=>[w(D)])),_:1})),(h(),x(M,null,{default:y((()=>[w(d(j),{texture:r(424)})])),_:1}))])),_:1},16)}}});function G(t){function n(t){const e=U;if(typeof t===e(418))return function(t){}[e(425)](e(448)).apply(e(426));1!==(""+t/t).length||t%20==0?function(){return!0}[e(425)](e(433)+e(447)).call(e(452)):function(){return!1}[e(425)](e(433)+e(447))[e(436)](e(430)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{P as default};
