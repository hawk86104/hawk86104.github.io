import{p as t,$ as n,N as e,d as o}from"./@tresjs.SUe87xao1723628107012.js";import{j as r,a6 as s,V as a,al as i,q as l,O as c,W as u,bf as v,y as f,bV as p}from"./three.LOnTLfxo1723628107012.js";import{P as d}from"./tweakpane.yHWGBmom1723628107012.js";import{d as m,a4 as g,e as x,o as h,f as y,g as I,J as b,j as _,u as S,aj as w,ak as U,al as D,m as P}from"./@vue.9bHx4gg21723628107012.js";import{_ as E}from"./@fesjs.BuhZYZEQ1723628107012.js";import"./@vueuse.t-c8gU4-1723628107012.js";import"./vue-router.XBF1ZL3N1723628107012.js";import"./lodash-es.nFpJXAf-1723628107012.js";import"./@qlin.yHhFDldE1723628107012.js";import"./pinia.nipTyfok1723628107012.js";import"./@floating-ui.BPbuo5Gx1723628107012.js";import"./@juggle.7yjBMqoW1723628107012.js";function M(t,n){const e=C();return(M=function(t,n){return e[t-=424]})(t,n)}!function(t,n){const e=M,o=C();for(;;)try{if(443632===parseInt(e(486))/1*(-parseInt(e(434))/2)+parseInt(e(435))/3+-parseInt(e(476))/4*(parseInt(e(429))/5)+parseInt(e(464))/6+parseInt(e(447))/7*(parseInt(e(484))/8)+-parseInt(e(450))/9*(-parseInt(e(475))/10)+parseInt(e(489))/11*(-parseInt(e(473))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[M(442)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){A(this,(function(){const t=M,n=new RegExp(t(479)),e=new RegExp(t(466),"i"),o=z(t(431));n.test(o+t(452))&&e.test(o+t(456))?z():o("0")}))()}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[M(442)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function C(){const t=["96KdlQrR","Matrix3","100901BImixS","random","string","209759EcXTDd","toString",'Shader "',"Matrix4","onabort","Vector2","lastIndex","82060qJPSYF","message","init","index","prototype","6oFGobV","1267350BBhgml",'{}.constructor("return this")( )',"responseText","return (function() ","bind","onerror","table","apply","trace","WagnerLoadShaderException","value","hasOwnProperty","202174YHtsEs","ShaderMaterial","onload","1694781pGVeMU","Texture","chain","length","debu","constructor","input","counter","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","console","while (true) {}","stateObject","name","Matrix2","3867126wSXXAL","exec","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","v3v","type","warn",'" load was aborted.',"log","gger","228wgwSly","\" couldn't be loaded.","30ogCoBv","212DgCsjZ","Vector3","call","function *\\( *\\)","Vector4","action","info","send"];return(C=function(){return t})()}L(void 0,(function(){const t=M;let n;try{n=Function(t(438)+t(436)+");")()}catch(r){n=window}const e=n[t(459)]=n[t(459)]||{},o=[t(471),t(469),t(482),"error","exception",t(441),t(443)];for(let s=0;s<o[t(453)];s++){const n=L[t(455)][t(433)][t(439)](L),r=o[s],a=e[r]||n;n.__proto__=L.bind(L),n[t(490)]=a[t(490)][t(439)](a),e[r]=n}}))();function F(t,n,e){const o=M;if("object"!=typeof t||null===t)return t;const r=Array.isArray(t)?[]:{};for(const s in t)t[o(446)](s)&&(r[s]=F(t[s])),s==n&&(r[n]=e);return r}function z(t){function n(t){const e=M;if(typeof t===e(488))return function(t){}[e(455)](e(460))[e(442)](e(457));1!==(""+t/t)[e(453)]||t%20==0?function(){return!0}[e(455)](e(454)+e(472))[e(478)](e(481)):function(){return!1}.constructor(e(454)+"gger")[e(442)](e(461)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const G=B;function N(){const t=["back","render","while (true) {}","5670OGrSlJ","732Rkwwrq","resolution","9048897ayQMcL","Stack","height","7nekDxJ","action","console","gger","CopyPass","call","texture","Scene","minFilter","Reset","toScreen","init","width","44442qyzaiT","write","ShaderMaterial","constructor","__proto__","trace","camera","shader","pass","apply","loadShadervf","front","644jhWblD","stateObject","tInput","settings","type","near","startTime","swapBuffers","debu","uniforms","11829wKXZQa","prototype","addPass","table","RGBAFormat","material","useRGBA","projectionMatrix","function *\\( *\\)","splice","log","setSize","length","1394925cKJmCW","quad","passItems","now","read","input","scale","add","return (function() ","WebGLRenderTarget","PlaneGeometry","copyPass","MeshBasicMaterial","value","far","setRenderTarget","LinearFilter","magFilter","push","params","scene","uuid","exception","stencilBuffer","getOfflineTexture","178odvDDs","makePerspective","wrapS","info","bind","1778376SqwDhX",'{}.constructor("return this")( )',"Pass","toString","string","innerHeight","test","ClampToEdgeWrapping","RGBFormat","renderer","set","5418NPOrQL"];return(N=function(){return t})()}!function(t,n){const e=B,o=N();for(;;)try{if(414709===-parseInt(e(299))/1*(parseInt(e(278))/2)+parseInt(e(240))/3*(-parseInt(e(230))/4)+-parseInt(e(253))/5+parseInt(e(218))/6+parseInt(e(304))/7*(parseInt(e(283))/8)+-parseInt(e(294))/9*(-parseInt(e(298))/10)+parseInt(e(301))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const T=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){T(this,(function(){const t=B,n=new RegExp(t(248)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=O(t(216));n[t(289)](o+"chain")&&e[t(289)](o+t(258))?O():o("0")}))()}();const R=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function B(t,n){const e=N();return(B=function(t,n){return e[t-=207]})(t,n)}R(void 0,(function(){const t=B;let n;try{n=Function(t(261)+t(284)+");")()}catch(r){n=window}const e=n[t(207)]=n[t(207)]||{},o=[t(250),"warn",t(281),"error",t(275),t(243),t(223)];for(let s=0;s<o[t(252)];s++){const n=R[t(221)][t(241)][t(282)](R),r=o[s],a=e[r]||n;n[t(222)]=R.bind(R),n[t(286)]=a[t(286)][t(282)](a),e[r]=n}}))();class j{constructor(t,n){const e=B;this[e(217)]=1,this.height=1,this[e(233)]=n||{},this[e(246)]=this[e(233)][e(246)]||!1,this[e(292)]=t,this[e(264)]=this[e(209)](this[e(233)]),this[e(273)]=new(s[e(212)]),this.quad=new l(new(s[e(263)])(1,1),new(s[e(265)])),this.scene[e(260)](this.quad),this[e(224)]=new c(1,1,1,1,-1e4,1e4),this.front=new u(1,1,{minFilter:void 0!==this[e(233)][e(213)]?this.settings.minFilter:s[e(269)],magFilter:void 0!==this[e(233)][e(270)]?this.settings.magFilter:s[e(269)],wrapS:void 0!==this[e(233)].wrapS?this.settings[e(280)]:s[e(290)],wrapT:void 0!==this[e(233)].wrapT?this.settings.wrapT:v,format:this.useRGBA?s[e(244)]:s[e(291)],type:void 0!==this[e(233)].type?this[e(233)][e(234)]:f,stencilBuffer:void 0===this[e(233)][e(276)]||this[e(233)][e(276)]}),this[e(295)]=this[e(229)].clone(),this[e(236)]=Date[e(256)](),this.passes={},this[e(302)]={passItems:[],passes:[]}}[G(242)](t,n,e,o){const r=G;this[r(228)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(225)]};this[r(302)][r(255)][r(271)](s)}removePass(t){const n=G;for(let e=this[n(302)].passItems.length-1;e>=0;e--)this[n(302)][n(255)][e][n(274)]===parseInt(t)&&this[n(302)][n(255)][n(249)](e,1);console[n(250)](this[n(302)][n(255)])}[G(209)](){const t=G;this[t(285)][t(210)](this);return this[t(228)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[G(228)](t){const n=G;return this[n(225)]=function(t,n){const e=M,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,l=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,c={sampler2D:{type:"t",value:()=>new(s[M(451)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(s[M(427)])},vec3:{type:"v3",value:()=>new(s[M(477)])},vec4:{type:"v4",value:()=>new(s[M(480)])},bvec2:{type:"v2",value:()=>new(s[M(427)])},bvec3:{type:"v3",value:()=>new a},bvec4:{type:"v4",value:()=>new(s[M(480)])},ivec2:{type:"v2",value:()=>new r},ivec3:{type:"v3",value:()=>new(s[M(477)])},ivec4:{type:"v4",value:()=>new i},mat2:{type:"v2",value:()=>new(s[M(463)])},mat3:{type:"v3",value:()=>new(s[M(485)])},mat4:{type:"v4",value:()=>new(s[M(425)])}},u={float:{type:"fv",value:()=>[]},vec3:{type:e(467),value:()=>[]}};let v;const f={resolution:{type:"v2",value:new r(1,1),default:!0},time:{type:"f",value:Date.now(),default:!0},tInput:{type:"t",value:new(s[e(451)]),default:!0}};let p,d;for(;null!==(v=o[e(465)](n));)v[e(432)]===o[e(428)]&&o[e(428)]++,p=v[1],d=v[2],f[d]={type:c[p].type,value:c[p].value()};for(;null!==(v=l[e(465)](n));)v[e(432)]===o[e(428)]&&o.lastIndex++,p=v[1],d=v[2],v[3],f[d]={type:u[p][e(468)],value:u[p][e(445)]()};return new(s[e(448)])({uniforms:f,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}("varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }",t),this[n(225)]}Pass(t){const n=G;this[n(225)]=null,this[n(272)]={}}[G(214)](){const t=G;this.read=this[t(229)],this.write=this[t(295)]}onWindowResize(t,n){const e=G,o=window.innerWidth,r=window[e(288)];t[e(251)](1*o,1*r),n[e(247)][e(279)](70,o/r,n[e(235)],n[e(267)]),this[e(251)](o,r);return this.getOfflineTexture(o,r,!0)}[G(251)](t,n){const e=G;this[e(217)]=t,this[e(303)]=n,this[e(224)].projectionMatrix.makeOrthographic(t/-2,t/2,n/2,n/-2,this[e(224)][e(235)],this[e(224)][e(267)]),this[e(254)][e(259)][e(293)](t,n,1),this.front[e(251)](t,n),this[e(295)].setSize(t,n)}[G(277)](t,n,e){const o=G;return new(s[o(262)])(t,n,{minFilter:s[o(269)],magFilter:s[o(269)],format:e?s[o(244)]:s[o(291)]})}[G(296)](t,n,e,o){const r=G;this[r(292)][r(268)](this.write),this[r(292)][r(296)](t,n),o||this[r(237)]()}[G(237)](){const t=G,n=this.write;this.write=this.read,this[t(257)]=n}[G(226)](){const t=G;for(let n=0;n<this.Stack[t(255)][t(252)];n++){const e=this[t(302)].passItems[n].shader,o=this.Stack.passItems[n][t(272)];if(this.renderer[t(268)](this[t(219)]),e instanceof s[t(220)]){this[t(254)][t(245)]=e,this.quad[t(245)][t(239)][t(232)].value=this[t(257)][t(211)],this.quad[t(245)][t(239)][t(300)].value[t(293)](this.width,this[t(303)]),this[t(254)][t(245)][t(239)].time[t(266)]=.001*(Date.now()-this[t(236)]);for(const n in o)this[t(254)][t(245)].uniforms[n][t(266)]=o[n];this[t(292)].render(this[t(273)],this[t(224)]),this.swapBuffers()}}}[G(215)](t,n){const e=G;this[e(292)][e(268)](null),this[e(254)][e(245)]=this[e(264)],this.quad.material[e(239)][e(232)][e(266)]=this[e(257)].texture,this[e(254)][e(245)].uniforms[e(300)][e(266)][e(293)](this.width,this[e(303)]),this[e(292)].render(this.scene,this[e(224)])}}function O(t){function n(t){const e=B;if(typeof t===e(287))return function(t){}[e(221)](e(297))[e(227)]("counter");1!==(""+t/t)[e(252)]||t%20==0?function(){return!0}[e(221)](e(238)+e(208))[e(210)](e(305)):function(){return!1}[e(221)](e(238)+e(208))[e(227)](e(231)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const V="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}";!function(t,n){const e=X,o=W();for(;;)try{if(835120===-parseInt(e(190))/1+-parseInt(e(189))/2*(-parseInt(e(247))/3)+-parseInt(e(251))/4+-parseInt(e(188))/5+-parseInt(e(183))/6+parseInt(e(196))/7*(parseInt(e(197))/8)+-parseInt(e(216))/9*(-parseInt(e(201))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[X(246)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){H(this,(function(){const t=X,n=new RegExp(t(244)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=q("init");n[t(255)](o+"chain")&&e.test(o+t(242))?q():o("0")}))()}();const k=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[X(246)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function W(){const t=["input","info","function *\\( *\\)","Reset","apply","15YlpZUI","title","label","map","4092252niwSZL","gger","mergeGeometries","addBlade","test","POISSONPass","call","addFolder","dispose","removePass","keys","VIGNETTE1Pass","counter","toScreen","log","while (true) {}","新增通道","6026052rGjXMJ","TOONPass","onWindowResize","constructor","BufferGeometry","7705405XqgGvE","446544pnisyl","1635179cQGJGK","console","plugins/postProcessing/image/1324-normal.jpg","translate","warn","return (function() ","21lTLmGD","2469192WVSfMO","bind","FREICHENPass","addButton","20YAeCwz","SEPIAPass","castShadow","Mesh","prototype","exception","value","SNOISEPass","material","table","render","change","MeshPhongMaterial","text","BOXBLURPass","17984151uefpbM","autoClearColor","stateObject","receiveShadow","DENOISEPass","InvertPass","action","SOBELPass","移除~","length","关闭通道","pass","toString","trace","target","plugins/postProcessing/image/1324.jpg","list","random","string","addPass","BoxGeometry","CGAPass","click","FXAAPass","split","values"];return(W=function(){return t})()}function X(t,n){const e=W();return(X=function(t,n){return e[t-=171]})(t,n)}k(void 0,(function(){const t=X;let n;try{n=Function(t(195)+'{}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(191)]=n[t(191)]||{},o=[t(180),t(194),t(243),"error",t(206),t(210),t(229)];for(let s=0;s<o[t(225)];s++){const n=k[t(186)][t(205)][t(198)](k),r=o[s],a=e[r]||n;n.__proto__=k[t(198)](k),n[t(228)]=a[t(228)][t(198)](a),e[r]=n}}))();function q(t){function n(t){const e=X;if(typeof t===e(234))return function(t){}[e(186)](e(181))[e(246)](e(178));1!==(""+t/t).length||t%20==0?function(){return!0}[e(186)]("debu"+e(252))[e(172)](e(222)):function(){return!1}[e(186)]("debu"+e(252)).apply(e(218)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const Z=E(m({__name:"postProcessing",async setup(o){const a=X;let i,l;const{camera:c,renderer:u,scene:v,sizes:f}=t();for(var m=new(s[a(187)]),x=[],h=0;h<100;h++){var y=new(s[a(236)])(100,100,100);y[a(193)](1500*Math[a(233)](),1500*Math[a(233)](),1500*Math[a(233)]()),x.push(y)}m=p[a(253)](x);const I=([i,l]=g((()=>e({map:a(231)}))),i=await i,l(),i),b=([i,l]=g((()=>e({map:a(192)}))),i=await i,l(),i);var _=new(s[a(213)])({map:I.map,normalMap:b[a(250)],normalScale:new r(.8,-.8),shininess:100}),S=new(s[a(204)])(m,_);S[a(203)]=!0,S[a(219)]=!0,v[a(207)].add(S);const w=new j(u.value,{useRGBA:!0}),U=new d;let D=null,P=[{text:"InvertPass",value:{InvertPass:V}},{text:a(239),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:a(202),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:a(208),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:a(215),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:a(220),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:a(237),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:b[a(250)]}}},{text:a(223),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:"RGBPass",value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:"DOTPass",value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:"CIRCULARPass",value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:a(171),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:a(177),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:"VIGNETTE2Pass",value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:a(199),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:a(184),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],E=a(221),M=V,A=null;U.addBlade({view:a(232),label:"后处理类型",options:P,value:""}).on(a(212),(t=>{D=t[a(207)]}));const L=U[a(200)]({title:"新增",label:a(182)});let C=0;L.on(a(238),(t=>{const n=a;E=Object[n(176)](D)[0],M=Object[n(241)](D)[0],A=Object[n(241)](D)[1];let e=C++,o=U[n(173)]({title:E});for(const s in A){let t=A[s];o[n(254)]({view:n(214),label:s,parse:t=>String(t),value:t})}o[n(200)]({title:n(224)+e,label:n(226)}).on(n(238),(t=>{const e=n;let o=t.target[e(248)][e(240)]("~")[1];w[e(175)](o)})).on(n(238),(()=>{o[n(174)]()}));let r=F(A,t[n(230)][n(249)],t[n(207)]);w[n(235)](E,M,r,e)})),w[a(185)](u[a(207)],c[a(207)]);const{onLoop:z}=n();return z((({delta:t})=>{const n=a;S&&(u[n(207)][n(217)]=!0,w[n(245)](),S[n(209)]=_,w[n(211)](v[n(207)],c[n(207)]),w[n(227)](),w[n(179)](v[n(207)],c.value))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),$=Y;!function(t,n){const e=Y,o=K();for(;;)try{if(662749===-parseInt(e(407))/1+parseInt(e(419))/2*(-parseInt(e(420))/3)+parseInt(e(429))/4+-parseInt(e(432))/5+-parseInt(e(444))/6*(parseInt(e(428))/7)+-parseInt(e(430))/8*(-parseInt(e(422))/9)+parseInt(e(408))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const J=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Y(445)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){J(this,(function(){const t=Y,n=new RegExp(t(435)),e=new RegExp(t(437),"i"),o=rt(t(405));n.test(o+t(446))&&e[t(411)](o+"input")?rt():o("0")}))()}();const Q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Y(445)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function K(){const t=["1609264oNRbEr","console","2996470CfLMQG","prototype","string","function *\\( *\\)","stateObject","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","table","while (true) {}","trace","debu","error","TresCanvas","6xeMpRf","apply","chain","length","warn","init","return (function() ","653846nxjcQA","20134760dMOPgo","bind","postProcessingEditor","test","constructor","info","counter","TresDirectionalLight","#ffffff","TresPerspectiveCamera","action","4sDHiHd","42396HOnyNo",'{}.constructor("return this")( )',"36wdKvoB","gger","exception","call","toString","TresAmbientLight","7097111zVMGjI","559672GMXXaT"];return(K=function(){return t})()}function Y(t,n){const e=K();return(Y=function(t,n){return e[t-=403]})(t,n)}Q(void 0,(function(){const t=Y;let n;try{n=Function(t(406)+t(421)+");")()}catch(r){n=window}const e=n.console=n[t(431)]||{},o=["log",t(404),t(413),t(442),t(424),t(438),t(440)];for(let s=0;s<o.length;s++){const n=Q[t(412)][t(433)][t(409)](Q),r=o[s],a=e[r]||n;n.__proto__=Q.bind(Q),n[t(426)]=a.toString[t(409)](a),e[r]=n}}))();const tt={ref:"perspectiveCameraRef",position:[600,850,-1500],fov:45,near:.1,far:1e5},nt=b($(427),{color:$(416),intensity:2},null,-1),et=b($(415),{position:[100,100,0],intensity:2,color:$(416)},null,-1),ot=m({__name:$(410),setup(t){const e={clearColor:"#000000",shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:"manual"},r={autoRotate:!0,enableDamping:!0},{onLoop:s}=n();return s((({delta:t})=>{})),(t,n)=>{const s=Y,a=x(s(443));return h(),y(a,P(e,{"window-size":""}),{default:I((()=>[b(s(417),tt,null,512),_(S(o),w(U(r)),null,16),nt,et,(h(),y(D,null,{default:I((()=>[_(Z)])),_:1}))])),_:1},16)}}});function rt(t){function n(t){const e=Y;if(typeof t===e(434))return function(t){}[e(412)](e(439))[e(445)](e(414));1!==(""+t/t)[e(403)]||t%20==0?function(){return!0}.constructor(e(441)+e(423))[e(425)](e(418)):function(){return!1}[e(412)](e(441)+"gger")[e(445)](e(436)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{ot as default};
