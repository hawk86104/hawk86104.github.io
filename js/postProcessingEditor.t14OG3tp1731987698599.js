import{m as t,e as n,b as e,U as o}from"./@tresjs.juy9qkLz1731987698599.js";import{_ as r,i as s,bg as a,A as i,n as c,B as l,cp as u,bn as v}from"./three.3RwiW87x1731987698599.js";import{P as f}from"./tweakpane.yHWGBmom1731987698599.js";import{d as p,a6 as d,e as m,o as g,f as x,g as h,J as y,j as I,u as b,aj as _,ak as S,al as w,m as U}from"./@vue.-THQH3GC1731987698599.js";import{_ as P}from"./@fesjs.6cRBmkVw1731987698599.js";import"./@vueuse.R8VPJfVr1731987698599.js";import"./vue-router.0Hzo7MDu1731987698599.js";import"./lodash-es.kYt-_xTG1731987698599.js";import"./@qlin.yHhFDldE1731987698599.js";import"./pinia.qOeBz4jM1731987698599.js";import"./vue-demi.C4xddsk91731987698599.js";import"./@floating-ui.BPbuo5Gx1731987698599.js";import"./@juggle.7yjBMqoW1731987698599.js";function E(){const t=["apply","test","send",'Shader "',"\" couldn't be loaded.","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","index","table","constructor","Vector3","165260hqEMRu","trace","hasOwnProperty","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","onabort","prototype","open","call","object","bind","message","87512OmgtcM","342fKeblS","ShaderMaterial","4226341LbzCZe","error","Matrix2","info","random","toString","Vector4","WagnerLoadShaderException","input","16556400aAvbOt","__proto__","console","Texture","length","lastIndex","function *\\( *\\)","exec","type","onload","exception","name","isArray","action","432024IElbYq","stateObject","Vector2","Matrix4","1121948XUPHnc","replace","responseText","10vTOSpC",'" load was aborted.','{}.constructor("return this")( )',"gger","value","debu","while (true) {}","3865668VADXLq","6NOHgOu"];return(E=function(){return t})()}function D(t,n){const e=E();return(D=function(t,n){return e[t-=311]})(t,n)}!function(t,n){const e=D,o=E();for(;;)try{if(371705===-parseInt(e(330))/1+-parseInt(e(356))/2*(-parseInt(e(345))/3)+-parseInt(e(334))/4*(parseInt(e(337))/5)+-parseInt(e(344))/6+parseInt(e(370))/7+parseInt(e(367))/8*(-parseInt(e(368))/9)+parseInt(e(316))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const M=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){M(this,(function(){const t=D,n=new RegExp(t(322)),e=new RegExp(t(359),"i"),o=z("init");n.test(o+"chain")&&e[t(347)](o+t(315))?z():o("0")}))()}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[D(346)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();L(void 0,(function(){const t=D,n=function(){const t=D;let n;try{n=Function("return (function() "+t(339)+");")()}catch(e){n=window}return n}(),e=n[t(318)]=n[t(318)]||{},o=["log","warn",t(373),t(371),t(326),t(353),t(357)];for(let r=0;r<o.length;r++){const n=L[t(354)][t(361)].bind(L),s=o[r],a=e[s]||n;n[t(317)]=L[t(365)](L),n[t(312)]=a[t(312)][t(365)](a),e[s]=n}}))();function A(t,n,e){const o=D;if(typeof t!==o(364)||null===t)return t;const r=Array[o(328)](t)?[]:{};for(const s in t)t[o(358)](s)&&(r[s]=A(t[s])),s==n&&(r[n]=e);return r}function z(t){function n(t){const e=D;if("string"==typeof t)return function(t){}[e(354)](e(343))[e(346)]("counter");1!==(""+t/t)[e(320)]||t%20==0?function(){return!0}[e(354)]("debu"+e(340))[e(363)](e(329)):function(){return!1}[e(354)](e(342)+e(340)).apply(e(331)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const C=T;function F(){const t=["LinearFilter","far","setSize","log","test","Reset","init","871428zCaWCp","208032gXNlyo","useRGBA","texture","back","Stack","while (true) {}","resolution","scale","input","1326384FeMUbw","prototype","OrthographicCamera","magFilter","settings","bind","renderer","near","render","18wJhMar","tInput",'{}.constructor("return this")( )',"height","3207995VFLhzw","wrapS","return (function() ","toString","counter","read","type","string","info","loadShadervf","error","onWindowResize","uuid","PlaneGeometry","pass","4295lOBnIX","set","2191920yCrAyZ","uniforms","params","gger","now","push","WebGLRenderTarget","shader","write","apply","7278ayJVvL","ShaderMaterial","value","scene","MeshBasicMaterial","innerWidth","setRenderTarget","stencilBuffer","innerHeight","width","RGBAFormat","console","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","makeOrthographic","__proto__","debu","constructor","passItems","removePass","quad","makePerspective","call","front","swapBuffers","copyPass","chain","add","action","wrapT","material","startTime","function *\\( *\\)","9781880mzBIIq","table","passes","CopyPass","camera","RGBFormat","exception","projectionMatrix","Mesh","length","Pass","toScreen","Scene"];return(F=function(){return t})()}!function(t,n){const e=T,o=F();for(;;)try{if(722522===parseInt(e(515))/1+-parseInt(e(516))/2+-parseInt(e(525))/3+-parseInt(e(555))/4+parseInt(e(553))/5*(-parseInt(e(463))/6)+-parseInt(e(538))/7+-parseInt(e(495))/8*(-parseInt(e(534))/9))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const N=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[T(462)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function T(t,n){const e=F();return(T=function(t,n){return e[t-=459]})(t,n)}!function(){N(this,(function(){const t=T,n=new RegExp(t(494)),e=new RegExp(t(475),"i"),o=G(t(514));n[t(512)](o+t(488))&&e[t(512)](o+t(524))?G():o("0")}))()}();const R=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[T(462)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();R(void 0,(function(){const t=T;let n;try{n=Function(t(540)+t(536)+");")()}catch(r){n=window}const e=n[t(474)]=n.console||{},o=[t(511),"warn",t(546),t(548),t(501),t(496),"trace"];for(let s=0;s<o.length;s++){const n=R[t(479)][t(526)][t(530)](R),r=o[s],a=e[r]||n;n[t(477)]=R[t(530)](R),n[t(541)]=a[t(541)][t(530)](a),e[r]=n}}))();class B{constructor(t,n){const e=T;this.width=1,this[e(537)]=1,this.settings=n||{},this[e(517)]=this[e(529)][e(517)]||!1,this[e(531)]=t,this[e(487)]=this[e(498)](this[e(529)]),this[e(466)]=new(r[e(507)]),this.quad=new(r[e(503)])(new(r[e(551)])(1,1),new(r[e(467)])),this.scene[e(489)](this[e(482)]),this[e(499)]=new(r[e(527)])(1,1,1,1,-1e4,1e4),this[e(485)]=new(r[e(459)])(1,1,{minFilter:void 0!==this[e(529)].minFilter?this[e(529)].minFilter:r[e(508)],magFilter:void 0!==this.settings[e(528)]?this[e(529)][e(528)]:r[e(508)],wrapS:void 0!==this[e(529)][e(539)]?this.settings[e(539)]:a,wrapT:void 0!==this[e(529)][e(491)]?this[e(529)].wrapT:a,format:this[e(517)]?r[e(473)]:r[e(500)],type:void 0!==this.settings[e(544)]?this.settings[e(544)]:i,stencilBuffer:void 0===this[e(529)][e(470)]||this[e(529)][e(470)]}),this[e(519)]=this[e(485)].clone(),this[e(493)]=Date[e(559)](),this[e(497)]={},this.Stack={passItems:[],passes:[]}}addPass(t,n,e,o){const r=T;this[r(547)](n);const s={shaderName:t,params:e,uuid:o,shader:this.shader};this[r(520)][r(480)][r(560)](s)}[C(481)](t){const n=C;for(let e=this.Stack.passItems[n(504)]-1;e>=0;e--)this[n(520)][n(480)][e][n(550)]===parseInt(t)&&this[n(520)][n(480)].splice(e,1);console[n(511)](this[n(520)][n(480)])}[C(498)](){const t=C;this[t(505)][t(484)](this);return this.loadShadervf("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[C(547)](t){const n=C;return this[n(460)]=function(t,n){const e=D,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,a=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,i={sampler2D:{type:"t",value:()=>new(r[D(319)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[D(332)])},vec3:{type:"v3",value:()=>new(r[D(355)])},vec4:{type:"v4",value:()=>new(r[D(313)])},bvec2:{type:"v2",value:()=>new(r[D(332)])},bvec3:{type:"v3",value:()=>new(r[D(355)])},bvec4:{type:"v4",value:()=>new(r[D(313)])},ivec2:{type:"v2",value:()=>new(r[D(332)])},ivec3:{type:"v3",value:()=>new(r[D(355)])},ivec4:{type:"v4",value:()=>new(r[D(313)])},mat2:{type:"v2",value:()=>new(r[D(372)])},mat3:{type:"v3",value:()=>new s},mat4:{type:"v4",value:()=>new(r[D(333)])}},c={float:{type:"fv",value:()=>[]},vec3:{type:"v3v",value:()=>[]}};let l;const u={resolution:{type:"v2",value:new(r[e(332)])(1,1),default:!0},time:{type:"f",value:Date.now(),default:!0},tInput:{type:"t",value:new(r[e(319)]),default:!0}};let v,f;for(;null!==(l=o[e(323)](n));)l[e(352)]===o[e(321)]&&o[e(321)]++,v=l[1],f=l[2],u[f]={type:i[v][e(324)],value:i[v][e(341)]()};for(;null!==(l=a.exec(n));)l[e(352)]===o.lastIndex&&o[e(321)]++,v=l[1],f=l[2],l[3],u[f]={type:c[v][e(324)],value:c[v][e(341)]()};return new(r[e(369)])({uniforms:u,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}("varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }",t),this[n(460)]}Pass(t){const n=C;this[n(460)]=null,this[n(557)]={}}[C(513)](){const t=C;this[t(543)]=this.front,this[t(461)]=this[t(519)]}[C(549)](t,n){const e=C,o=window[e(468)],r=window[e(471)];t[e(510)](1*o,1*r),n.projectionMatrix[e(483)](70,o/r,n[e(532)],n[e(509)]),this.setSize(o,r);return this.getOfflineTexture(o,r,!0)}setSize(t,n){const e=C;this[e(472)]=t,this[e(537)]=n,this.camera[e(502)][e(476)](t/-2,t/2,n/2,n/-2,this[e(499)][e(532)],this[e(499)][e(509)]),this[e(482)][e(523)][e(554)](t,n,1),this[e(485)].setSize(t,n),this[e(519)][e(510)](t,n)}getOfflineTexture(t,n,e){const o=C;return new(r[o(459)])(t,n,{minFilter:r[o(508)],magFilter:c,format:e?r[o(473)]:r[o(500)]})}[C(533)](t,n,e,o){const r=C;this[r(531)].setRenderTarget(this[r(461)]),this.renderer[r(533)](t,n),o||this.swapBuffers()}[C(486)](){const t=C,n=this.write;this[t(461)]=this[t(543)],this[t(543)]=n}[C(552)](){const t=C;for(let n=0;n<this[t(520)][t(480)][t(504)];n++){const e=this[t(520)][t(480)][n][t(460)],o=this[t(520)][t(480)][n][t(557)];if(this[t(531)].setRenderTarget(this[t(461)]),e instanceof r[t(464)]){this.quad[t(492)]=e,this[t(482)].material.uniforms.tInput.value=this.read[t(518)],this[t(482)].material[t(556)][t(522)][t(465)][t(554)](this.width,this[t(537)]),this[t(482)].material[t(556)].time[t(465)]=.001*(Date.now()-this[t(493)]);for(const n in o)this.quad[t(492)][t(556)][n][t(465)]=o[n];this.renderer[t(533)](this.scene,this[t(499)]),this.swapBuffers()}}}[C(506)](t,n){const e=C;this[e(531)][e(469)](null),this[e(482)][e(492)]=this.copyPass,this[e(482)].material[e(556)][e(535)][e(465)]=this[e(543)].texture,this[e(482)][e(492)].uniforms.resolution[e(465)].set(this[e(472)],this[e(537)]),this[e(531)][e(533)](this[e(466)],this[e(499)])}}function G(t){function n(t){const e=T;if(typeof t===e(545))return function(t){}[e(479)](e(521)).apply(e(542));1!==(""+t/t).length||t%20==0?function(){return!0}[e(479)]("debu"+e(558))[e(484)](e(490)):function(){return!1}[e(479)](e(478)+e(558))[e(462)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const j="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",V=k;!function(t,n){const e=k,o=W();for(;;)try{if(876886===parseInt(e(219))/1*(parseInt(e(250))/2)+parseInt(e(275))/3+parseInt(e(272))/4+parseInt(e(210))/5*(parseInt(e(243))/6)+parseInt(e(222))/7+parseInt(e(263))/8+-parseInt(e(208))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[k(269)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){O(this,(function(){const t=k,n=new RegExp(t(268)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=X(t(224));n.test(o+t(260))&&e[t(226)](o+t(258))?X():o("0")}))()}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[k(269)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function k(t,n){const e=W();return(k=function(t,n){return e[t-=201]})(t,n)}function W(){const t=["apply","mergeGeometries","Mesh","5909216HSIjMd","dispose","random","4544823WVFNHa","split","后处理类型","POISSONPass","change","BoxGeometry","while (true) {}","prototype","addBlade","plugins/postProcessing/image/1324.jpg","addButton","values","onWindowResize","FXAAPass","receiveShadow","55133721UmLTIQ","keys","4070JMqNNM","TOONPass",'{}.constructor("return this")( )',"toScreen","stateObject","bind","postProcessing","translate","debu","1rfPfIk","新增通道","移除~","4236470zpNJRT","render","init","info","test","push","InvertPass","length","value","console","target","add","VIGNETTE2Pass","CIRCULARPass","call","constructor","SEPIAPass","map","text","log","trace","4506dulvgg","error","VIGNETTE1Pass","__proto__","Vector2","SOBELPass","FREICHENPass","3195366qgEIKL","gger","list","title","click","DOTPass","CGAPass","castShadow","input","action","chain","plugins/postProcessing/image/1324-normal.jpg","warn","9571224hwCfJV","exception","addPass","material","SNOISEPass","function *\\( *\\)"];return(W=function(){return t})()}H(void 0,(function(){const t=k;let n;try{n=Function("return (function() "+t(212)+");")()}catch(r){n=window}const e=n[t(231)]=n[t(231)]||{},o=[t(241),t(262),t(225),t(244),t(264),"table",t(242)];for(let s=0;s<o[t(229)];s++){const n=H.constructor[t(282)].bind(H),r=o[s],a=e[r]||n;n[t(246)]=H[t(215)](H),n.toString=a.toString.bind(a),e[r]=n}}))();function X(t){function n(t){const e=k;if("string"==typeof t)return function(t){}[e(237)](e(281))[e(269)]("counter");1!==(""+t/t)[e(229)]||t%20==0?function(){return!0}[e(237)](e(218)+e(251))[e(236)](e(259)):function(){return!1}.constructor("debu"+e(251))[e(269)](e(214)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const q=P(p({__name:V(216),async setup(o){const s=V;let a,i;const{camera:c,renderer:p,scene:m,sizes:g}=t();for(var x=new l,h=[],y=0;y<100;y++){var I=new(r[s(280)])(100,100,100);I[s(217)](1500*Math[s(274)](),1500*Math[s(274)](),1500*Math[s(274)]()),h[s(227)](I)}x=u[s(270)](h);const b=([a,i]=d((()=>e({map:s(202)}))),a=await a,i(),a),_=([a,i]=d((()=>e({map:s(261)}))),a=await a,i(),a);var S=new v({map:b.map,normalMap:_[s(239)],normalScale:new(r[s(247)])(.8,-.8),shininess:100}),w=new(r[s(271)])(x,S);w[s(257)]=!0,w[s(207)]=!0,m[s(230)][s(233)](w);const U=new B(p.value,{useRGBA:!0}),P=new f;let E=null,D=[{text:"InvertPass",value:{InvertPass:j}},{text:s(206),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:s(238),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:s(267),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:"BOXBLURPass",value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:"DENOISEPass",value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:s(256),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:_[s(239)]}}},{text:s(248),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:"RGBPass",value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:s(255),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(235),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:s(278),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:s(245),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(234),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:s(249),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:s(211),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],M=s(228),L=j,z=null;P[s(201)]({view:s(252),label:s(277),options:D,value:""}).on(s(279),(t=>{E=t[s(230)]}));const C=P[s(203)]({title:"新增",label:s(220)});let F=0;C.on("click",(t=>{const n=s;M=Object[n(209)](E)[0],L=Object[n(204)](E)[0],z=Object.values(E)[1];let e=F++,o=P.addFolder({title:M});for(const s in z){let t=z[s];o[n(201)]({view:n(240),label:s,parse:t=>String(t),value:t})}o[n(203)]({title:n(221)+e,label:"关闭通道"}).on(n(254),(t=>{const e=n;let o=t[e(232)][e(253)][e(276)]("~")[1];U.removePass(o)})).on("click",(()=>{o[n(273)]()}));let r=A(z,t.target.label,t[n(230)]);U[n(265)](M,L,r,e)})),U[s(205)](p[s(230)],c[s(230)]);const{onLoop:N}=n();return N((({delta:t})=>{const n=s;w&&(p[n(230)].autoClearColor=!0,U.Reset(),w[n(266)]=S,U[n(223)](m.value,c[n(230)]),U.pass(),U[n(213)](m[n(230)],c[n(230)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),Z=K;!function(t,n){const e=K,o=Y();for(;;)try{if(851288===-parseInt(e(278))/1*(-parseInt(e(265))/2)+parseInt(e(288))/3*(-parseInt(e(281))/4)+parseInt(e(295))/5*(parseInt(e(270))/6)+parseInt(e(273))/7+-parseInt(e(306))/8+parseInt(e(290))/9*(parseInt(e(304))/10)+parseInt(e(286))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const $=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[K(279)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){$(this,(function(){const t=K,n=new RegExp(t(269)),e=new RegExp(t(267),"i"),o=nt(t(293));n.test(o+t(282))&&e[t(287)](o+t(302))?nt():o("0")}))()}();const J=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[K(279)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function K(t,n){const e=Y();return(K=function(t,n){return e[t-=265]})(t,n)}function Y(){const t=["length","gger",'{}.constructor("return this")( )',"1764158aghORZ","test","57pJkFbl","table","7409943YgEeTE","TresPerspectiveCamera","stateObject","init","error","30iVNHGD","action","bind","info","prototype","return (function() ","debu","input","TresAmbientLight","10zgYuEu","counter","6967024djLMZl","manual","__proto__","postProcessingEditor","142MuXcZI","TresDirectionalLight","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","exception","function *\\( *\\)","860298hEqUSk","#ffffff","console","2648457sjipIV","toString","string","constructor","call","4384iKSHKa","apply","while (true) {}","170832VWhLQB","chain"];return(Y=function(){return t})()}J(void 0,(function(){const t=K;let n;try{n=Function(t(300)+t(285)+");")()}catch(r){n=window}const e=n[t(272)]=n.console||{},o=["log","warn",t(298),t(294),t(268),t(289),"trace"];for(let s=0;s<o[t(283)];s++){const n=J[t(276)][t(299)].bind(J),r=o[s],a=e[r]||n;n[t(308)]=J[t(297)](J),n.toString=a[t(274)][t(297)](a),e[r]=n}}))();const Q={ref:"perspectiveCameraRef",position:[600,850,-1500],fov:45,near:.1,far:1e5},tt=p({__name:Z(309),setup(t){const e=Z,r={clearColor:"#000000",shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(307)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=m("TresCanvas");return g(),x(i,U(r,{"window-size":""}),{default:h((()=>[y(a(291),Q,null,512),I(b(o),_(S(s)),null,16),n[0]||(n[0]=y(a(303),{color:"#ffffff",intensity:2},null,-1)),n[1]||(n[1]=y(a(266),{position:[100,100,0],intensity:2,color:a(271)},null,-1)),(g(),x(w,null,{default:h((()=>[I(q)])),_:1}))])),_:1},16)}}});function nt(t){function n(t){const e=K;if(typeof t===e(275))return function(t){}[e(276)](e(280)).apply(e(305));1!==(""+t/t).length||t%20==0?function(){return!0}[e(276)](e(301)+e(284))[e(277)](e(296)):function(){return!1}[e(276)]("debu"+e(284))[e(279)](e(292)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{tt as default};
