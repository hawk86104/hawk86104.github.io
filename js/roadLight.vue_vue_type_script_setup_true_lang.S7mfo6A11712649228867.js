import{a0 as T,k as _,aC as g,bb as k,bj as R,b2 as v,c0 as x,a5 as B,o as p,c as f,E,G,X as h,K as u,bp as M,ay as S,a8 as L}from"./vendor.UoMSxCrE1712649228867.js";import{l as j}from"./utils.kCzRK1MJ1712649228867.js";const J=["position","rotation-y","scale"],N={renderOrder:3e3},V=["args"],Y=["map","side","color"],y=6e4,K=T({__name:"roadLight",props:{geoJson:{},color:{default:"#ffff00"},position:{default:[1837.0641427711184,30,-457.0929823910632]},radius:{default:2},rotationY:{default:-.3866683251512052},scale:{default:1.5083171193254858},speed:{default:1}},async setup(w){let o,a;const e=w,b=_(),r=_(),{map:t}=([o,a]=g(()=>k({map:"./plugins/digitalCity/image/line.png"})),o=await o,a(),o);t.needsUpdate=!0,t.wrapS=t.wrapT=R,t.repeat.set(1,1);const d=([o,a]=g(()=>j(e.geoJson)),o=await o,a(),o),n=[-31.258949,0,-121.465782];let m=[];for(var c=0;c<d.length;c++){const l=d[c],i=[];l.geometry.coordinates.forEach(s=>{i.push(new v((s[1]+n[0])*y,n[1],(s[0]+n[2])*y))}),m.push(new x(i))}B(()=>{e.color&&r.value&&(r.value.color=new S(e.color))});const{onLoop:C}=L();return C(({delta:l})=>{t.offset.x-=Math.random()/20*e.speed}),(l,i)=>(p(),f("TresGroup",{ref_key:"tgRef",ref:b,position:e.position,"rotation-y":e.rotationY,scale:e.scale},[(p(!0),f(E,null,G(u(m),s=>(p(),f("TresMesh",N,[h("TresTubeGeometry",{args:[s,64,e.radius,20,!1]},null,8,V),h("TresMeshBasicMaterial",{ref_for:!0,ref_key:"tmbmRef",ref:r,map:u(t),side:u(M),transparent:!0,color:e.color},null,8,Y)]))),256))],8,J))}});export{K as _};
