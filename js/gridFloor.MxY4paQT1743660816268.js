import{ab as n,C as r,ai as e}from"./three.2wx8FU0g1743660816268.js";import{o,J as i}from"./@tresjs.zc7faK4J1743660816268.js";import{P as s}from"./tweakpane.ivGeiIdz1743660816268.js";import{d as a,a2 as t,o as l,H as d,N as u,aj as v,ak as c,r as g,e as f,f as h,g as m,m as C,j as p,u as T,al as x}from"./@vue.B5PFBfKs1743660816268.js";import"./postprocessing.ApTwx-211743660816268.js";import"./@vueuse.jtbb8I7w1743660816268.js";const W=["rotate-x"],k=a({__name:"gridFloor",props:{gridColor:{default:"#c4d6ff"},gridThickness:{default:.02},crossColor:{default:"#7a91df"},crossThickness:{default:.02},uCross:{default:.2},floorColor:{default:"#ffffff"}},setup(e){const o=e,i={vertexShader:"varying vec2 vUv;\nvoid main()\n{\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    vUv = uv;\n}",fragmentShader:"uniform float uGridThickness;\nuniform vec3 uGridColor;\nuniform float uCrossScale;\nuniform float uCrossThickness;\nuniform float uCross;\nuniform vec3 uCrossColor;\nuniform vec3 uFloorColor;\n\nvarying vec2 vUv;\n\nfloat gridFloor(vec2 uv, vec2 lineWidth) {\n    \n    \n    \n    \n    \n    \n    \n    vec4 uvDDXY = vec4(dFdx(uv), dFdy(uv));\n    vec2 uvDeriv = vec2(length(uvDDXY.xz), length(uvDDXY.yw));\n\n    \n    \n    \n    bool invertLine = lineWidth.x > 0.5;\n    vec2 targetWidth = invertLine ? 1.0 - lineWidth : lineWidth;\n\n    \n    \n    \n    \n    \n    vec2 drawWidth = clamp(targetWidth, uvDeriv, vec2(0.5));\n\n    \n    \n    \n    vec2 lineAA = uvDeriv * 1.5;\n    \n    \n    \n    \n    \n    \n    vec2 gridUV = abs(fract(uv) * 2.0 - 1.0);\n    gridUV = invertLine ? gridUV : 1.0 - gridUV;\n\n    \n    \n    \n    vec2 grid2 = smoothstep(drawWidth + lineAA, drawWidth - lineAA, gridUV);\n\n    \n    \n    \n    grid2 *= clamp(targetWidth / drawWidth, 0.0, 1.0);\n\n    \n    \n    \n    \n    \n    grid2 = mix(grid2, targetWidth, clamp(uvDeriv * 2.0 - 1.0, 0.0, 1.0));\n    grid2 = invertLine ? 1.0 - grid2 : grid2;\n\n    \n    float grid = mix(grid2.x, 1.0, grid2.y);\n\n    return grid;\n}\n\nfloat crossFloor(vec2 uv, float scale, float thickness, float crossIntensity) {\n    vec2 lineWidth = vec2(thickness);\n\n    \n    \n    \n    \n    \n    \n    \n    vec4 uvDDXY = vec4(dFdx(uv), dFdy(uv));\n    vec2 uvDeriv = vec2(length(uvDDXY.xz), length(uvDDXY.yw));\n\n    \n    \n    \n    bool invertLine = lineWidth.x > 0.5;\n    \n    vec2 targetWidth = lineWidth;\n\n    \n    \n    \n    \n    \n    vec2 drawWidth = clamp(targetWidth, uvDeriv, vec2(0.5));\n\n    \n    \n    \n    vec2 lineAA = uvDeriv * 1.5;\n    \n    \n    float cutOffX = abs(fract(uv.y) * 2.0 - 1.0) > crossIntensity ? 1.0 : 0.0;\n    float cutOffY = abs(fract(uv.x) * 2.0 - 1.0) > crossIntensity ? 1.0 : 0.0;\n\n    \n    \n    \n    \n    \n    \n    \n    float uvX = abs(fract(uv.x) * 2.0 - 1.0) + cutOffX;\n    float uvY = abs(fract(uv.y) * 2.0 - 1.0) + cutOffY;\n    vec2 gridUV = vec2(uvX, uvY);\n\n    \n\n    \n    \n    \n    vec2 grid2 = smoothstep(drawWidth + lineAA, drawWidth - lineAA, gridUV);\n\n    \n    \n    \n    grid2 *= clamp(targetWidth / drawWidth, 0.0, 1.0);\n\n    \n    \n    \n    \n    \n    grid2 = mix(grid2, targetWidth, clamp(uvDeriv * 2.0 - 1.0, 0.0, 1.0));\n    \n\n    \n    float grid = mix(grid2.x, 1.0, grid2.y);\n\n    return grid;\n}\n\nvoid main()\n{\n    vec2 lineWidth = vec2(uGridThickness);\n    \n    vec2 uv = vUv * 20.0;\n\n    \n    float grid = gridFloor(uv, lineWidth);\n    \n    vec3 gridColor = mix(uFloorColor, uGridColor, vec3(grid));\n\n    \n    float crossUv = crossFloor(uv, uCrossScale, uCrossThickness, uCross);\n    \n    vec3 gridColor2 = mix(gridColor, uCrossColor, vec3(crossUv));\n    \n    vec3 color =  gridColor2;\n\n    gl_FragColor = vec4(color, 1.0);\n}",side:n,transparent:!0,uniforms:{uFloorColor:{value:new r(o.floorColor)},uGridThickness:{value:o.gridThickness},uGridColor:{value:new r(o.gridColor)},uCrossThickness:{value:o.crossThickness},uCross:{value:o.uCross},uCrossColor:{value:new r(o.crossColor)}}};return t((()=>{i.uniforms.uFloorColor.value.set(o.floorColor),i.uniforms.uGridColor.value.set(o.gridColor),i.uniforms.uCrossColor.value.set(o.crossColor),i.uniforms.uGridThickness.value=o.gridThickness,i.uniforms.uCrossThickness.value=o.crossThickness,i.uniforms.uCross.value=o.uCross})),(n,r)=>(l(),d("TresMesh",{"rotate-x":-Math.PI/2},[r[0]||(r[0]=u("TresPlaneGeometry",{args:[10,10,32,32]},null,-1)),u("TresShaderMaterial",v(c(i)),null,16)],8,W))}}),D=a({__name:"gridFloor",setup(n){const r=g({alpha:!0,toneMapping:e,windowSize:!0,clearColor:3355443}),a=g({enableDamping:!0,autoRotate:!1}),t=g({gridColor:"#ffffff",crossColor:"#ef57ff",floorColor:"#000000",gridThickness:.02,crossThickness:.03,uCross:.29}),d=new s;return d.addBinding(t,"gridColor",{label:"网格颜色"}),d.addBinding(t,"gridThickness",{label:"网格厚度",min:.01,max:1,step:.01}),d.addBinding(t,"crossColor",{label:"十字颜色"}),d.addBinding(t,"crossThickness",{label:"十字厚度",min:.01,max:1,step:.01}),d.addBinding(t,"uCross",{label:"十字大小",min:.01,max:1,step:.01}),d.addBinding(t,"floorColor",{label:"地板颜色"}),(n,e)=>{const s=f("TresCanvas");return l(),h(s,C(r,{"window-size":""}),{default:m((()=>[e[0]||(e[0]=u("TresPerspectiveCamera",{position:[6,6,6],fov:45,near:.1,far:1e3},null,-1)),p(T(o),v(c(a)),null,16),e[1]||(e[1]=u("TresAmbientLight",{intensity:.5},null,-1)),e[2]||(e[2]=u("TresDirectionalLight",{position:[15,15,15],intensity:1},null,-1)),e[3]||(e[3]=u("TresMesh",{position:[0,.5,0],scale:.2},[u("TresTorusKnotGeometry",{args:[1,.35,100,32]}),u("TresMeshStandardMaterial",{color:"#ff33ff",roughness:0,metalness:1})],-1)),p(k,v(c(t)),null,16),(l(),h(x,null,{default:m((()=>[p(T(i),{files:["pos-x.jpg","neg-x.jpg","pos-y.jpg","neg-y.jpg","pos-z.jpg","neg-z.jpg"],path:"https://opensource.cdn.icegl.cn/images/skyBox/6jpg/"},null,8,["path"])])),_:1}))])),_:1},16)}}});export{D as default};
