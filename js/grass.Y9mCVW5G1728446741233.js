import{_ as t,C as n,V as e,T as o,ai as r}from"./three.GKtOCofD1728446741233.js";import{U as i,z as a,Y as s,L as c}from"./@tresjs.2zzrlbpQ1728446741233.js";import"./index.JpLBDFf71728446741233.js";import{a as l}from"./simplex-noise.P9JMzoHY1728446741233.js";import{C as u}from"./index.xLf2T-LG1728446741233.js";import{d as f,a4 as p,o as h,E as m,L as v,u as d,r as g,f as x,g as w,j as y,aj as b,ak as _,al as M}from"./@vue.JNsx1iN61728446741233.js";import{_ as z}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.HEMn5MMF1728446741233.js";import"./@vueuse.M29bYW2K1728446741233.js";import"./lamina.tsLXcczV1728446741233.js";import"./glsl-tokenizer.3GIgb7Lk1728446741233.js";import"./@amap.Qg_J860p1728446741233.js";import"./glsl-token-descope.IcLpcenH1728446741233.js";import"./glsl-token-depth.VPKjZbgE1728446741233.js";import"./glsl-token-scope.KwOiHENv1728446741233.js";import"./glsl-token-properties.MHrZ0Ufb1728446741233.js";import"./glsl-token-assignments.d3NVRKz61728446741233.js";import"./glsl-token-string.OiBTr1Jd1728446741233.js";import"./glsl-token-functions.FTbn13l-1728446741233.js";import"./object-hash.0ofIFoz61728446741233.js";import"./jszip.tq9nBV5m1728446741233.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.LE3nvR5a1728446741233.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.-Kcuk8UY1728446741233.js";import"./three-stdlib.LtkXdepA1728446741233.js";import"./@pmndrs.kg3qtW3-1728446741233.js";import"./utils.2CY1CQCv1728446741233.js";const j=C;!function(t,n){const e=C,o=L();for(;;)try{if(612459===-parseInt(e(431))/1*(-parseInt(e(450))/2)+parseInt(e(445))/3+-parseInt(e(457))/4*(-parseInt(e(476))/5)+parseInt(e(453))/6+parseInt(e(492))/7*(parseInt(e(441))/8)+parseInt(e(424))/9*(parseInt(e(451))/10)+-parseInt(e(481))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const I=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(460)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){I(this,(function(){const t=C,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(433),"i"),o=E(t(448));n[t(473)](o+t(484))&&e[t(473)](o+t(478))?E():o("0")}))()}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(460)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function C(t,n){const e=L();return(C=function(t,n){return e[t-=418]})(t,n)}A(void 0,(function(){const t=C;let n;try{n=Function("return (function() "+t(447)+");")()}catch(r){n=window}const e=n[t(432)]=n[t(432)]||{},o=["log",t(456),t(463),"error",t(477),"table",t(471)];for(let i=0;i<o[t(465)];i++){const n=A[t(469)][t(486)][t(459)](A),r=o[i],a=e[r]||n;n[t(429)]=A[t(459)](A),n[t(466)]=a[t(466)][t(459)](a),e[r]=n}}))();const k=["material"],R=["index","attributes-position",j(421),"attributes-offset",j(439),"attributes-stretch","attributes-halfRootAngleSin",j(474)],F=["geometry"],D=["side"];function L(){const t=["2832024vEAGkx","stateObject",'{}.constructor("return this")( )',"init","map","1584338EDXzPk","593890iHgotI","Vector3","2667468bJVcQr","action","TresMesh","warn","4PLQNzw","needsUpdate","bind","apply","TresMeshStandardMaterial","cos","info","sin","length","toString","TresGroup","PlaneGeometry","constructor","string","trace","index","test","attributes-halfRootAngleCos","lookAt","2866350NLZNHJ","exception","input","orientationsF32","array","34924736JFuKjB","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","set","chain","InstancedBufferAttribute","prototype","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","time","computeVertexNormals","push","joints","357mgVnti","toneMapped","gger","debu","value","position","attributes-uv","random","alphaMap","54xDLMyc","call","DoubleSide","stretchesF32","attributes","__proto__","convertSRGBToLinear","1ktnDbv","console","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","halfRootAngleCosF32","#000f00","Vector4","instances","counter","attributes-orientation","uniforms","106208pOQiLI","width","side","translate"];return(L=function(){return t})()}const S=f({__name:"grass",props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(r){const s=j;let c,f;const g=([c,f]=p((()=>a({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),c=await c,f(),c),x=r,w=l(Math[s(422)]);function y(n,e){const o=s,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,i=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,a=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,c=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(436)])(r,i,a,c)}function b(t,n){var e=2*w(t/50,n/50);return e+=4*w(t/100,n/100),e+=.2*w(t/10,n/10)}const _=function(n,r){const i=s,a=[],c=[],l=[],u=[],f=[];let p=new(t[i(436)]),h=new(t[i(436)]);const m=-.25;for(let o=0;o<n;o++){const s=Math[i(422)]()*r-r/2,v=Math[i(422)]()*r-r/2,d=b(s,v);a[i(490)](s,d,v);let g=Math.PI-Math[i(422)]()*(2*Math.PI);u[i(490)](Math[i(464)](.5*g)),f[i(490)](Math.cos(.5*g));let x=new(t[i(452)])(0,1,0),w=x.x*Math[i(464)](g/2),_=x.y*Math[i(464)](g/2),M=x.z*Math[i(464)](g/2),z=Math.cos(g/2);p[i(483)](w,_,M,z).normalize(),g=.5*Math[i(422)]()+m,x=new e(1,0,0),w=x.x*Math.sin(g/2),_=x.y*Math[i(464)](g/2),M=x.z*Math[i(464)](g/2),z=Math.cos(g/2),h[i(483)](w,_,M,z).normalize(),p=y(p,h),g=.5*Math[i(422)]()+m,x=new(t[i(452)])(0,0,1),w=x.x*Math[i(464)](g/2),_=x.y*Math[i(464)](g/2),M=x.z*Math[i(464)](g/2),z=Math[i(462)](g/2),h[i(483)](w,_,M,z).normalize(),p=y(p,h),c[i(490)](p.x,p.y,p.z,p.w),o<n/3?l[i(490)](1.8*Math[i(422)]()):l[i(490)](Math[i(422)]())}return{offsetsF32:new o(new Float32Array(a),3),orientationsF32:new(t[i(485)])(new Float32Array(c),4),stretchesF32:new(t[i(485)])(new Float32Array(l),1),halfRootAngleCosF32:new(t[i(485)])(new Float32Array(f),1),halfRootAngleSinF32:new o(new Float32Array(u),1)}}(x[s(437)],x.width),M=new(t[s(468)])(x.bW,x.bH,1,x[s(491)])[s(444)](0,x.bH/2,0),z=new(t[s(468)])(x[s(442)],x[s(442)],32,32);z[s(475)](new(t[s(452)])(0,1,0));const I=z[s(428)][s(420)];for(let t=0;t<I[s(480)][s(465)];t+=3)I[s(480)][t+1]=b(I[s(480)][t],I[s(480)][t+2]);z[s(428)].position[s(458)]=!0,z[s(489)]();const A=new(u({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new n(.3,.9,0)[s(430)](),bottomColor:new n(0,.2,0)[s(430)]()},s(487),s(482),(n=>{const e=s;n[e(443)]=t[e(426)]})));A[s(449)]=g[s(449)],A.alphaMap=g[s(423)],A[s(493)]=!1;const{onLoop:C}=i();return C((({elapsed:t})=>{const n=s;A[n(440)][n(488)][n(419)]=t/4})),(n,e)=>{const o=s;return h(),m(o(467),null,[v(o(455),{material:d(A)},[v("TresInstancedBufferGeometry",{index:d(M)[o(472)],"attributes-position":d(M)[o(428)].position,"attributes-uv":d(M).attributes.uv,"attributes-offset":d(_).offsetsF32,"attributes-orientation":d(_)[o(479)],"attributes-stretch":d(_)[o(427)],"attributes-halfRootAngleSin":d(_).halfRootAngleSinF32,"attributes-halfRootAngleCos":d(_)[o(434)]},null,8,R)],8,k),v("TresMesh",{position:[0,0,0],geometry:d(z)},[v(o(461),{color:o(435),side:t[o(426)]},null,8,D)],8,F)])}}});function E(t){function n(t){const e=C;if(typeof t===e(470))return function(t){}[e(469)]("while (true) {}").apply(e(438));1!==(""+t/t)[e(465)]||t%20==0?function(){return!0}[e(469)](e(418)+e(494))[e(425)](e(454)):function(){return!1}[e(469)](e(418)+e(494))[e(460)](e(446)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const P=T;function T(t,n){const e=q();return(T=function(t,n){return e[t-=305]})(t,n)}!function(t,n){const e=T,o=q();for(;;)try{if(393255===-parseInt(e(312))/1+-parseInt(e(323))/2*(parseInt(e(308))/3)+-parseInt(e(336))/4+parseInt(e(311))/5+parseInt(e(335))/6*(parseInt(e(310))/7)+parseInt(e(316))/8*(parseInt(e(318))/9)+-parseInt(e(305))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[T(334)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){O(this,(function(){const t=T,n=new RegExp(t(333)),e=new RegExp(t(319),"i"),o=U(t(328));n[t(341)](o+t(338))&&e[t(341)](o+"input")?U():o("0")}))()}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();B(void 0,(function(){const t=T,n=function(){const t=T;let n;try{n=Function(t(315)+t(306)+");")()}catch(e){n=window}return n}(),e=n[t(330)]=n[t(330)]||{},o=[t(322),"warn","info",t(326),"exception",t(313),t(337)];for(let r=0;r<o.length;r++){const n=B[t(309)][t(342)][t(329)](B),i=o[r],a=e[i]||n;n.__proto__=B[t(329)](B),n[t(314)]=a[t(314)].bind(a),e[i]=n}}))();const H=v(P(327),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1);function q(){const t=["table","toString","return (function() ","1640RZqRXs","debu","11754dyKIDP","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","while (true) {}","length","log","2OQMiYP","counter","string","error","TresPerspectiveCamera","init","bind","console","call","action","function *\\( *\\)","apply","138UuFsLk","296108XvbqAz","trace","chain","stateObject","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","test","prototype","4305600NRmiIG",'{}.constructor("return this")( )',"gger","613113WrelBF","constructor","105140xUOuvq","3653620cWpEcW","241701RLNTqy"];return(q=function(){return t})()}const N=f({__name:"grass",setup(t){const n=g({alpha:!0,toneMapping:r,windowSize:!0,clearColor:6710886}),e=g({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=T;return h(),x(d(c),b(_(n)),{default:w((()=>[H,y(d(s),b(_(e)),null,16),(h(),x(M,null,{default:w((()=>[y(S)])),_:1})),(h(),x(M,null,{default:w((()=>[y(d(z),{texture:r(340)})])),_:1}))])),_:1},16)}}});function U(t){function n(t){const e=T;if(typeof t===e(325))return function(t){}[e(309)](e(320)).apply(e(324));1!==(""+t/t)[e(321)]||t%20==0?function(){return!0}.constructor(e(317)+e(307))[e(331)](e(332)):function(){return!1}[e(309)](e(317)+"gger")[e(334)](e(339)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{N as default};
