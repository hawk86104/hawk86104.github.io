import{dq as e,dr as a,ds as t,dt as d,dm as n,du as o,dv as s,dw as l,z as r,dx as i,dy as c,bJ as p,bd as N,bI as u,a6 as h,bj as b,aV as m,c3 as g,c1 as T,c0 as v,c2 as w,b$ as M,c4 as y,c5 as f,c6 as S}from"./three.DvmzhRS91761100244891.js";const D=((e="MeshBasicNodeMaterial")=>({template:e,Preview:"2d",surfaceType:"Transparent",blendingMode:"NormalBlending",renderFace:"FrontSide",depthWrite:"enable",depthTest:"enable",depthTestFunc:"LessEqualDepth",castShadows:!0}))(),E={lit:o,unlit:o,subgraph:o,MeshBasicNodeMaterial:o,MeshStandardNodeMaterial:n,MeshPhongNodeMaterial:d,MeshPhysicalNodeMaterial:t,LineDashedNodeMaterial:a,SpriteNodeMaterial:e},x={NoBlending:u,NormalBlending:N,AdditiveBlending:p,SubtractiveBlending:c,MultiplyBlending:i},B={FrontSide:m,BackSide:b,DoubleSide:h},F={NeverDepth:S,AlwaysDepth:f,EqualDepth:y,LessDepth:M,LessEqualDepth:w,GreaterDepth:v,GreaterEqualDepth:T,NotEqualDepth:g},q=(e,a={},t={})=>{const d={},n=(e=>{const a=e.replace(/\r\n/g,"\n").match(/\/\/\/\/ view \/\/\/\/ (.*)\n/);return a?JSON.parse(a[1]):null})(e);n&&n.textures?.forEach(a=>{const d=a.binding.varName;if(!t?.[d]){const a=e.match(new RegExp(`//// ${d} //// (.*)\\n`))?.[1];a&&t&&(t[d]=(e=>{const a=new Image,t=new r(a);return a.onload=()=>{t.needsUpdate=!0},a.src=e,t})(a))}});const o=Object.assign({},D,n?.setting),i=new(0,E[o.template]),c={};if(((e,a)=>{e.transparent="Transparent"===a.surfaceType,"Transparent"===a.surfaceType?e.blending=x[a.blendingMode]||N:e.blending=N,e.side=B[a.renderFace]||m,e.depthWrite="enable"===a.depthWrite,e.depthTest="enable"===a.depthTest,e.depthFunc=F[a.depthTestFunc]||w})(i,o),e)try{new Function("material","default_uniforms","__textures__","uniforms","tsl","THREE",e)(d,a||{},t,c,s,l)}catch(p){throw new Error("Invalid TSL format: "+p)}return"Transparent"===o.surfaceType?void 0===d.opacityNode?i.colorNode=d.colorNode||null:(i.colorNode=d.colorNode?.xyz||null,i.opacityNode=d.opacityNode||null):i.colorNode=d.colorNode?.xyz||null,i.vertexNode=d.vertexNode||null,i.positionNode=d.positionNode||null,i.normalNode=d.normalNode||null,i.alphaTestNode=d.alphaTestNode||null,i.depthNode=d.depthNode||null,i.emissiveNode=d.emissiveNode||null,i.envNode=d.envNode||null,i.aoNode=d.aoNode||null,i.backdropNode=d.backdropNode||null,i.backdropAlphaNode=d.backdropAlphaNode||null,o.castShadows&&(i.castShadowNode=d.castShadowNode||null),i.needsUpdate=!0,{material:i,uniforms:c,settings:o}};export{q as t};
