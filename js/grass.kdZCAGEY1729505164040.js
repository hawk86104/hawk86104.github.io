import{t,_ as n,V as e,C as o,T as r,a0 as a,ai as i}from"./three.YREzp-_G1729505164040.js";import{U as s,z as c,Y as l,L as u}from"./@tresjs.IsKybBdF1729505164040.js";import"./index.yTXUMm5G1729505164040.js";import{a as f}from"./simplex-noise.P9JMzoHY1729505164040.js";import{C as p}from"./index.cGXPpcAx1729505164040.js";import{d as h,a4 as m,o as d,E as v,L as g,u as x,r as y,f as w,g as b,j as _,aj as z,ak as M,al as j}from"./@vue.JNsx1iN61729505164040.js";import{_ as A}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.d2AZVWoX1729505164040.js";import"./@vueuse.9dhnH8nd1729505164040.js";import"./lamina.HeYXX5u11729505164040.js";import"./glsl-tokenizer.octUzVvo1729505164040.js";import"./@amap.-tZv8Pyx1729505164040.js";import"./glsl-token-descope.F2OH1REz1729505164040.js";import"./glsl-token-depth.zBbQ_0Qy1729505164040.js";import"./glsl-token-scope.a5UC7cCH1729505164040.js";import"./glsl-token-properties.Pah2iEvB1729505164040.js";import"./glsl-token-assignments.9T5rf8w21729505164040.js";import"./glsl-token-string.GzxNJglV1729505164040.js";import"./glsl-token-functions.q-oNdpFR1729505164040.js";import"./object-hash.3VgPOje51729505164040.js";import"./jszip.GmmbuCmD1729505164040.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.78FflJyX1729505164040.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.2DQQogPZ1729505164040.js";import"./three-stdlib.pC02qkfn1729505164040.js";import"./@pmndrs.hWhjK3J51729505164040.js";import"./utils.SYgb1XjJ1729505164040.js";function I(){const t=["apply","set","error","8ksfCyW","width","1110742HqdxMg","counter","alphaMap","instances","string","attributes-orientation","attributes","toneMapped","needsUpdate","return (function() ","lookAt","PlaneGeometry","gger","halfRootAngleSinF32","3089020xxkqBi","side","sin","orientationsF32","bind","__proto__","console","log","28pSuqzl","211819Ypwibk","array","TresMeshStandardMaterial","8603001wVWSgX","InstancedBufferAttribute","table","index","chain","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","position","normalize","material","joints","while (true) {}","map","Vector3","toString","random","convertSRGBToLinear","exception","halfRootAngleCosF32","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","init","attributes-position","TresMesh","computeVertexNormals","6023850HznDiI","offsetsF32","constructor","call","Color","test","length","Vector4","cos","attributes-uv","64281ZTcvZt","stretchesF32","DoubleSide",'{}.constructor("return this")( )',"push","input","TresInstancedBufferGeometry","837540kRzUmT","action"];return(I=function(){return t})()}const k=S;!function(t,n){const e=S,o=I();for(;;)try{if(468492===parseInt(e(510))/1+-parseInt(e(487))/2+parseInt(e(473))/3*(parseInt(e(509))/4)+parseInt(e(501))/5+parseInt(e(480))/6+parseInt(e(463))/7+-parseInt(e(485))/8*(parseInt(e(513))/9))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[S(482)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function S(t,n){const e=I();return(S=function(t,n){return e[t-=459]})(t,n)}!function(){C(this,(function(){const t=S,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(531),"i"),o=q(t(459));n[t(468)](o+t(517))&&e[t(468)](o+t(478))?q():o("0")}))()}();const F=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();F(void 0,(function(){const t=S,n=function(){const t=S;let n;try{n=Function(t(496)+t(476)+");")()}catch(e){n=window}return n}(),e=n[t(507)]=n.console||{},o=[t(508),"warn","info",t(484),t(529),t(515),"trace"];for(let r=0;r<o.length;r++){const n=F[t(465)].prototype[t(505)](F),a=o[r],i=e[a]||n;n[t(506)]=F[t(505)](F),n[t(526)]=i.toString[t(505)](i),e[a]=n}}))();const R=[k(521)],D=[k(516),k(460),k(472),"attributes-offset",k(492),"attributes-stretch","attributes-halfRootAngleSin","attributes-halfRootAngleCos"],L=["geometry"],T=["side"],E=h({__name:"grass",props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(i){const l=k;let u,h;const y=([u,h]=m((()=>c({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),u=await u,h(),u),w=i,b=f(Math[l(527)]);function _(t,e){const o=l,r=t.x*e.w+t.y*e.z-t.z*e.y+t.w*e.x,a=-t.x*e.z+t.y*e.w+t.z*e.x+t.w*e.y,i=t.x*e.y-t.y*e.x+t.z*e.w+t.w*e.z,s=-t.x*e.x-t.y*e.y-t.z*e.z+t.w*e.w;return new(n[o(470)])(r,a,i,s)}function z(t,n){var e=2*b(t/50,n/50);return e+=4*b(t/100,n/100),e+=.2*b(t/10,n/10)}const M=function(t,o){const a=l,i=[],s=[],c=[],u=[],f=[];let p=new(n[a(470)]),h=new(n[a(470)]);const m=-.25;for(let r=0;r<t;r++){const l=Math.random()*o-o/2,d=Math.random()*o-o/2,v=z(l,d);i.push(l,v,d);let g=Math.PI-Math.random()*(2*Math.PI);u[a(477)](Math[a(503)](.5*g)),f.push(Math.cos(.5*g));let x=new e(0,1,0),y=x.x*Math[a(503)](g/2),w=x.y*Math.sin(g/2),b=x.z*Math.sin(g/2),M=Math[a(471)](g/2);p[a(483)](y,w,b,M)[a(520)](),g=.5*Math[a(527)]()+m,x=new(n[a(525)])(1,0,0),y=x.x*Math[a(503)](g/2),w=x.y*Math[a(503)](g/2),b=x.z*Math[a(503)](g/2),M=Math[a(471)](g/2),h.set(y,w,b,M).normalize(),p=_(p,h),g=.5*Math[a(527)]()+m,x=new(n[a(525)])(0,0,1),y=x.x*Math[a(503)](g/2),w=x.y*Math[a(503)](g/2),b=x.z*Math.sin(g/2),M=Math[a(471)](g/2),h[a(483)](y,w,b,M).normalize(),p=_(p,h),s.push(p.x,p.y,p.z,p.w),r<t/3?c.push(1.8*Math.random()):c[a(477)](Math[a(527)]())}return{offsetsF32:new(n[a(514)])(new Float32Array(i),3),orientationsF32:new r(new Float32Array(s),4),stretchesF32:new(n[a(514)])(new Float32Array(c),1),halfRootAngleCosF32:new(n[a(514)])(new Float32Array(f),1),halfRootAngleSinF32:new(n[a(514)])(new Float32Array(u),1)}}(w[l(490)],w[l(486)]),j=new t(w.bW,w.bH,1,w[l(522)]).translate(0,w.bH/2,0),A=new(n[l(498)])(w[l(486)],w.width,32,32);A[l(497)](new e(0,1,0));const I=A[l(493)][l(519)];for(let t=0;t<I.array[l(469)];t+=3)I[l(511)][t+1]=z(I.array[t],I[l(511)][t+2]);A[l(493)].position[l(495)]=!0,A[l(462)]();const C=new(p({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(n[l(467)])(.3,.9,0)[l(528)](),bottomColor:new o(0,.2,0)[l(528)]()},"   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }",l(518),(t=>{t[l(502)]=a})));C[l(524)]=y[l(524)],C[l(489)]=y[l(489)],C[l(494)]=!1;const{onLoop:S}=s();return S((({elapsed:t})=>{C.uniforms.time.value=t/4})),(t,e)=>{const o=l;return d(),v("TresGroup",null,[g(o(461),{material:x(C)},[g(o(479),{index:x(j)[o(516)],"attributes-position":x(j)[o(493)][o(519)],"attributes-uv":x(j)[o(493)].uv,"attributes-offset":x(M)[o(464)],"attributes-orientation":x(M)[o(504)],"attributes-stretch":x(M)[o(474)],"attributes-halfRootAngleSin":x(M)[o(500)],"attributes-halfRootAngleCos":x(M)[o(530)]},null,8,D)],8,R),g(o(461),{position:[0,0,0],geometry:x(A)},[g(o(512),{color:"#000f00",side:n[o(475)]},null,8,T)],8,L)])}}});function q(t){function n(t){const e=S;if(typeof t===e(491))return function(t){}.constructor(e(523))[e(482)](e(488));1!==(""+t/t).length||t%20==0?function(){return!0}[e(465)]("debu"+e(499))[e(466)](e(481)):function(){return!1}.constructor("debu"+e(499))[e(482)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const B=V;!function(t,n){const e=V,o=O();for(;;)try{if(501256===-parseInt(e(473))/1*(-parseInt(e(441))/2)+-parseInt(e(443))/3*(-parseInt(e(468))/4)+parseInt(e(433))/5+-parseInt(e(470))/6*(-parseInt(e(447))/7)+-parseInt(e(463))/8+-parseInt(e(451))/9*(parseInt(e(466))/10)+parseInt(e(444))/11*(-parseInt(e(452))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function O(){const t=["test","constructor","gger","return (function() ","764560kkTQQF","action","table","22260XZgdfl","debu","352484LcyBAj","function *\\( *\\)","1480134QFQXSE","stateObject","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","938IeSARc","counter","4722445yasXgL","apply","while (true) {}","__proto__","string","info","warn","console","1336LkYywA","toString","30bofJkv","22bpMfWq","exception","TresPerspectiveCamera","7OMfbeg","grass","trace","input","1134AVihqI","10930020NodhIV","bind","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","call","length","chain",'{}.constructor("return this")( )'];return(O=function(){return t})()}!function(){H(this,(function(){const t=V,n=new RegExp(t(469)),e=new RegExp(t(472),"i"),o=N("init");n[t(459)](o+t(457))&&e[t(459)](o+t(450))?N():o("0")}))()}();const P=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[V(434)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function V(t,n){const e=O();return(V=function(t,n){return e[t-=432]})(t,n)}P(void 0,(function(){const t=V,n=function(){const t=V;let n;try{n=Function(t(462)+t(458)+");")()}catch(e){n=window}return n}(),e=n[t(440)]=n[t(440)]||{},o=["log",t(439),t(438),"error",t(445),t(465),t(449)];for(let r=0;r<o[t(456)];r++){const n=P[t(460)].prototype[t(453)](P),a=o[r],i=e[a]||n;n[t(436)]=P[t(453)](P),n[t(442)]=i.toString[t(453)](i),e[a]=n}}))();const U=g(B(446),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1),G=h({__name:B(448),setup(t){const n=y({alpha:!0,toneMapping:i,windowSize:!0,clearColor:6710886}),e=y({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=V;return d(),w(x(u),z(M(n)),{default:b((()=>[U,_(x(l),z(M(e)),null,16),(d(),w(j,null,{default:b((()=>[_(E)])),_:1})),(d(),w(j,null,{default:b((()=>[_(x(A),{texture:r(454)})])),_:1}))])),_:1},16)}}});function N(t){function n(t){const e=V;if(typeof t===e(437))return function(t){}[e(460)](e(435)).apply(e(432));1!==(""+t/t)[e(456)]||t%20==0?function(){return!0}[e(460)](e(467)+e(461))[e(455)](e(464)):function(){return!1}[e(460)](e(467)+e(461))[e(434)](e(471)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{G as default};
