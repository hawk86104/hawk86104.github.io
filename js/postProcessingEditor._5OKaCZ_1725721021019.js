import{p as t,$ as n,N as e,d as o}from"./@tresjs.bIWdfO9a1725721021019.js";import{j as r,a6 as s,V as a,i,l as c,bf as l,aV as u,cI as v,y as f,k as p,cl as d,q as m}from"./three.a9V66irq1725721021019.js";import{P as g}from"./tweakpane.yHWGBmom1725721021019.js";import{d as x,a5 as h,e as y,o as I,f as b,g as _,L as S,j as w,aj as U,ak as P,u as D,al as E,m as L}from"./@vue._6MD2XyK1725721021019.js";import{_ as M}from"./@fesjs.ozYBrZAq1725721021019.js";import"./@vueuse.Ex-1AOlz1725721021019.js";import"./vue-router._EXpxh631725721021019.js";import"./lodash-es.kYt-_xTG1725721021019.js";import"./@qlin.yHhFDldE1725721021019.js";import"./pinia.U_UMJ01N1725721021019.js";import"./@floating-ui.BPbuo5Gx1725721021019.js";import"./@juggle.7yjBMqoW1725721021019.js";!function(t,n){const e=C,o=F();for(;;)try{if(555278===parseInt(e(361))/1+parseInt(e(364))/2+parseInt(e(401))/3*(-parseInt(e(380))/4)+-parseInt(e(404))/5+parseInt(e(368))/6*(parseInt(e(360))/7)+-parseInt(e(383))/8*(parseInt(e(389))/9)+parseInt(e(365))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(385)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function C(t,n){const e=F();return(C=function(t,n){return e[t-=358]})(t,n)}!function(){A(this,(function(){const t=C,n=new RegExp(t(369)),e=new RegExp(t(393),"i"),o=T(t(373));n[t(409)](o+"chain")&&e[t(409)](o+t(406))?T():o("0")}))()}();const z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function F(){const t=["onerror","Vector2","7428OCwlfd","Matrix4","info","5146500nWcBSL","lastIndex","input","trace","console","test",'" load was aborted.',"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","type","WagnerLoadShaderException","gger","message","isArray","open","call","value","hasOwnProperty","133791psPilM","455365pTdxTY","Vector4","exception","1117612wOzZiR","11480730PHDZJI","bind","index","78jotSsA","function *\\( *\\)","random",'Shader "',"responseText","init","replace","get","Texture","toString","debu","Matrix2","700sdhPpF","v3v",'{}.constructor("return this")( )',"209512jedwye","constructor","apply","string","table","counter","135JcGagm","exec","now","ShaderMaterial","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","Vector3","length","prototype","onabort","return (function() "];return(F=function(){return t})()}z(void 0,(function(){const t=C;let n;try{n=Function(t(398)+t(382)+");")()}catch(r){n=window}const e=n.console=n[t(408)]||{},o=["log","warn",t(403),"error",t(363),t(387),t(407)];for(let s=0;s<o.length;s++){const n=z.constructor[t(396)].bind(z),r=o[s],a=e[r]||n;n.__proto__=z[t(366)](z),n.toString=a[t(377)][t(366)](a),e[r]=n}}))();function N(t,n,e){const o=C;if("object"!=typeof t||null===t)return t;const r=Array[o(416)](t)?[]:{};for(const s in t)t[o(359)](s)&&(r[s]=N(t[s])),s==n&&(r[n]=e);return r}function T(t){function n(t){const e=C;if(typeof t===e(386))return function(t){}.constructor("while (true) {}")[e(385)](e(388));1!==(""+t/t)[e(395)]||t%20==0?function(){return!0}[e(384)]("debugger")[e(418)]("action"):function(){return!1}[e(384)](e(378)+e(414))[e(385)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const R=V;!function(t,n){const e=V,o=j();for(;;)try{if(334444===-parseInt(e(204))/1*(parseInt(e(226))/2)+parseInt(e(207))/3*(parseInt(e(243))/4)+-parseInt(e(282))/5*(parseInt(e(217))/6)+-parseInt(e(229))/7+-parseInt(e(232))/8*(parseInt(e(246))/9)+parseInt(e(215))/10+parseInt(e(288))/11*(-parseInt(e(253))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[V(214)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function j(){const t=["useRGBA","console","add","height","texture","params","trace","2630PZuhYN","stencilBuffer","constructor","width","call","warn","1628NzEUuw","setRenderTarget","chain","quad","wrapS","makeOrthographic","passItems","wrapT","counter","getOfflineTexture","table","log","settings","while (true) {}","OrthographicCamera","renderer","function *\\( *\\)","addPass","resolution","8315qaebSx","render","set","15idVQqu","material","near","WebGLRenderTarget","splice","string","stateObject","apply","5260050JNBLgm","exception","1158MpqCQD","camera","MeshBasicMaterial","Scene","__proto__","RGBAFormat","time","Mesh","toString","40nulZhL","onWindowResize","CopyPass","399917bIqPpa","LinearFilter","ClampToEdgeWrapping","26920KdHzps","PlaneGeometry","error","write","scale","minFilter","clone","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","uuid","front","removePass","189988lQLYNw","Pass","setSize","261uvKXhI","scene","test","uniforms","shader","innerHeight","action","528LCZZnh","bind","value","length","prototype","magFilter","loadShadervf","innerWidth","now","read","Stack","info","far","gger","projectionMatrix","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","debu","Reset","passes","swapBuffers","back","copyPass"];return(j=function(){return t})()}!function(){G(this,(function(){const t=V,n=new RegExp(t(201)),e=new RegExp(t(268),"i"),o=k("init");n[t(248)](o+t(290))&&e[t(248)](o+"input")?k():o("0")}))()}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[V(214)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function V(t,n){const e=j();return(V=function(t,n){return e[t-=191]})(t,n)}B(void 0,(function(){const t=V,n=function(){let t;try{t=Function('return (function() {}.constructor("return this")( ));')()}catch(n){t=window}return t}(),e=n.console=n[t(276)]||{},o=[t(196),t(287),t(264),t(234),t(216),t(195),t(281)];for(let r=0;r<o[t(256)];r++){const n=B[t(284)][t(257)][t(254)](B),s=o[r],a=e[s]||n;n[t(221)]=B[t(254)](B),n[t(225)]=a[t(225)][t(254)](a),e[s]=n}}))();class O{constructor(t,n){const e=V;this[e(285)]=1,this[e(278)]=1,this.settings=n||{},this[e(275)]=this[e(197)][e(275)]||!1,this.renderer=t,this[e(274)]=this[e(228)](this[e(197)]),this[e(247)]=new(s[e(220)]),this[e(291)]=new(s[e(224)])(new(s[e(233)])(1,1),new(s[e(219)])),this[e(247)][e(277)](this.quad),this[e(218)]=new(s[e(199)])(1,1,1,1,-1e4,1e4),this[e(241)]=new(s[e(210)])(1,1,{minFilter:void 0!==this[e(197)][e(237)]?this[e(197)][e(237)]:s[e(230)],magFilter:void 0!==this.settings[e(258)]?this[e(197)][e(258)]:c,wrapS:void 0!==this[e(197)][e(292)]?this[e(197)].wrapS:l,wrapT:void 0!==this[e(197)][e(192)]?this[e(197)].wrapT:s[e(231)],format:this[e(275)]?u:v,type:void 0!==this[e(197)].type?this.settings.type:f,stencilBuffer:void 0===this[e(197)][e(283)]||this[e(197)][e(283)]}),this[e(273)]=this[e(241)][e(238)](),this.startTime=Date[e(261)](),this[e(271)]={},this[e(263)]={passItems:[],passes:[]}}[R(202)](t,n,e,o){const r=R;this[r(259)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(250)]};this.Stack[r(191)].push(s)}[R(242)](t){const n=R;for(let e=this[n(263)].passItems.length-1;e>=0;e--)this[n(263)].passItems[e][n(240)]===parseInt(t)&&this[n(263)][n(191)][n(211)](e,1);console.log(this[n(263)][n(191)])}CopyPass(){const t=R;this[t(244)].call(this);return this[t(259)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[R(259)](t){const n=R,e=n(239);return this.shader=function(t,n){const e=C,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,c=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,l={sampler2D:{type:"t",value:()=>new(s[C(376)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(s[C(400)])},vec3:{type:"v3",value:()=>new a},vec4:{type:"v4",value:()=>new(s[C(362)])},bvec2:{type:"v2",value:()=>new(s[C(400)])},bvec3:{type:"v3",value:()=>new(s[C(394)])},bvec4:{type:"v4",value:()=>new(s[C(362)])},ivec2:{type:"v2",value:()=>new(s[C(400)])},ivec3:{type:"v3",value:()=>new(s[C(394)])},ivec4:{type:"v4",value:()=>new(s[C(362)])},mat2:{type:"v2",value:()=>new(s[C(379)])},mat3:{type:"v3",value:()=>new i},mat4:{type:"v4",value:()=>new(s[C(402)])}},u={float:{type:"fv",value:()=>[]},vec3:{type:e(381),value:()=>[]}};let v;const f={resolution:{type:"v2",value:new r(1,1),default:!0},time:{type:"f",value:Date[e(391)](),default:!0},tInput:{type:"t",value:new(s[e(376)]),default:!0}};let p,d;for(;null!==(v=o[e(390)](n));)v[e(367)]===o[e(405)]&&o[e(405)]++,p=v[1],d=v[2],f[d]={type:l[p][e(412)],value:l[p][e(358)]()};for(;null!==(v=c.exec(n));)v[e(367)]===o[e(405)]&&o[e(405)]++,p=v[1],d=v[2],v[3],f[d]={type:u[p][e(412)],value:u[p][e(358)]()};return new(s[e(392)])({uniforms:f,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(250)]}[R(244)](t){this[R(250)]=null,this.params={}}[R(270)](){const t=R;this[t(262)]=this[t(241)],this[t(235)]=this[t(273)]}[R(227)](t,n){const e=R,o=window[e(260)],r=window[e(251)];t.setSize(1*o,1*r),n.projectionMatrix.makePerspective(70,o/r,n[e(209)],n[e(265)]),this.setSize(o,r);return this[e(194)](o,r,!0)}[R(245)](t,n){const e=R;this[e(285)]=t,this.height=n,this[e(218)][e(267)][e(293)](t/-2,t/2,n/2,n/-2,this[e(218)][e(209)],this[e(218)][e(265)]),this.quad[e(236)][e(206)](t,n,1),this.front[e(245)](t,n),this[e(273)][e(245)](t,n)}[R(194)](t,n,e){const o=R;return new(s[o(210)])(t,n,{minFilter:s[o(230)],magFilter:s[o(230)],format:e?s[o(222)]:v})}[R(205)](t,n,e,o){const r=R;this[r(200)][r(289)](this.write),this[r(200)][r(205)](t,n),o||this[r(272)]()}[R(272)](){const t=R,n=this[t(235)];this[t(235)]=this[t(262)],this[t(262)]=n}pass(){const t=R;for(let n=0;n<this[t(263)][t(191)][t(256)];n++){const e=this.Stack[t(191)][n][t(250)],o=this.Stack[t(191)][n][t(280)];if(this[t(200)][t(289)](this[t(235)]),e instanceof p){this[t(291)][t(208)]=e,this[t(291)][t(208)][t(249)].tInput[t(255)]=this[t(262)][t(279)],this[t(291)][t(208)][t(249)].resolution[t(255)].set(this[t(285)],this.height),this[t(291)][t(208)][t(249)][t(223)][t(255)]=.001*(Date[t(261)]()-this.startTime);for(const n in o)this[t(291)][t(208)][t(249)][n].value=o[n];this[t(200)][t(205)](this[t(247)],this.camera),this[t(272)]()}}}toScreen(t,n){const e=R;this[e(200)][e(289)](null),this.quad[e(208)]=this[e(274)],this[e(291)][e(208)][e(249)].tInput.value=this.read[e(279)],this[e(291)][e(208)][e(249)][e(203)].value.set(this.width,this[e(278)]),this[e(200)][e(205)](this[e(247)],this[e(218)])}}function k(t){function n(t){const e=V;if(typeof t===e(212))return function(t){}[e(284)](e(198))[e(214)](e(193));1!==(""+t/t)[e(256)]||t%20==0?function(){return!0}[e(284)](e(269)+e(266))[e(286)](e(252)):function(){return!1}[e(284)](e(269)+e(266))[e(214)](e(213)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const H="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",W=Z;!function(t,n){const e=Z,o=$();for(;;)try{if(449945===parseInt(e(393))/1*(-parseInt(e(381))/2)+parseInt(e(378))/3*(parseInt(e(360))/4)+-parseInt(e(383))/5*(parseInt(e(348))/6)+-parseInt(e(411))/7*(parseInt(e(404))/8)+-parseInt(e(368))/9*(-parseInt(e(380))/10)+-parseInt(e(409))/11+parseInt(e(403))/12)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){q(this,(function(){const t=Z,n=new RegExp(t(372)),e=new RegExp(t(405),"i"),o=Y("init");n[t(370)](o+t(352))&&e[t(370)](o+t(355))?Y():o("0")}))()}();const X=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Z(402)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function Z(t,n){const e=$();return(Z=function(t,n){return e[t-=335]})(t,n)}function $(){const t=["return (function() ","DOTPass","while (true) {}","__proto__","4RFWnkf","stateObject","value","mergeGeometries","BoxGeometry","SNOISEPass",'{}.constructor("return this")( )',"后处理类型","autoClearColor","apply","8779296XTqtHq","112dkuust","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","toString","target","postProcessing","779581UnlIur","render","349139ENbIsp","string","table","addBlade","trace","translate","addButton","keys","debu","BufferGeometry","change","constructor","CIRCULARPass","prototype","gger","24Jfpbbp","VIGNETTE2Pass","toScreen","warn","chain","exception","Vector2","input","MeshPhongMaterial","material","call","FREICHENPass","28xOoYBS","add","VIGNETTE1Pass","SOBELPass","action","bind","error","RGBPass","9kMztFS","map","test","FXAAPass","function *\\( *\\)","label","length","addFolder","removePass","title","185613djoLmA","plugins/postProcessing/image/1324.jpg","5883450QVqjxl","107708IJRloG","pass","398175MVjhfD","click","关闭通道","counter","random","castShadow"];return($=function(){return t})()}X(void 0,(function(){const t=Z,n=function(){const t=Z;let n;try{n=Function(t(389)+t(399)+");")()}catch(e){n=window}return n}(),e=n.console=n.console||{},o=["log",t(351),"info",t(366),t(353),t(335),t(337)];for(let r=0;r<o[t(374)];r++){const n=X[t(344)][t(346)].bind(X),s=o[r],a=e[s]||n;n[t(392)]=X[t(365)](X),n.toString=a[t(406)][t(365)](a),e[s]=n}}))();function Y(t){function n(t){const e=Z;if(typeof t===e(412))return function(t){}[e(344)](e(391))[e(402)](e(386));1!==(""+t/t)[e(374)]||t%20==0?function(){return!0}[e(344)](e(341)+e(347))[e(358)](e(364)):function(){return!1}[e(344)](e(341)+e(347))[e(402)](e(394)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const J=M(x({__name:W(408),async setup(o){const r=W;let a,i;const{camera:c,renderer:l,scene:u,sizes:v}=t();for(var f=new(s[r(342)]),p=[],x=0;x<100;x++){var y=new(s[r(397)])(100,100,100);y[r(338)](1500*Math[r(387)](),1500*Math[r(387)](),1500*Math[r(387)]()),p.push(y)}f=d[r(396)](p);const I=([a,i]=h((()=>e({map:r(379)}))),a=await a,i(),a),b=([a,i]=h((()=>e({map:"plugins/postProcessing/image/1324-normal.jpg"}))),a=await a,i(),a);var _=new(s[r(356)])({map:I[r(369)],normalMap:b.map,normalScale:new(s[r(354)])(.8,-.8),shininess:100}),S=new m(f,_);S[r(388)]=!0,S.receiveShadow=!0,u.value[r(361)](S);const w=new O(l[r(395)],{useRGBA:!0}),U=new g;let P=null,D=[{text:"InvertPass",value:{InvertPass:H}},{text:r(371),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:"SEPIAPass",value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:r(398),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:"BOXBLURPass",value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:"DENOISEPass",value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:"CGAPass",value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:b[r(369)]}}},{text:r(363),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:r(367),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:r(390),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:r(345),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:"POISSONPass",value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:r(362),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:r(349),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:r(359),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:"TOONPass",value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],E="InvertPass",L=H,M=null;U[r(336)]({view:"list",label:r(400),options:D,value:""}).on(r(343),(t=>{P=t[r(395)]}));const A=U[r(339)]({title:"新增",label:"新增通道"});let C=0;A.on("click",(t=>{const n=r;E=Object[n(340)](P)[0],L=Object.values(P)[0],M=Object.values(P)[1];let e=C++,o=U[n(375)]({title:E});for(const r in M){let t=M[r];o[n(336)]({view:"text",label:r,parse:t=>String(t),value:t})}o[n(339)]({title:"移除~"+e,label:n(385)}).on("click",(t=>{const e=n;let o=t[e(407)][e(377)].split("~")[1];w[e(376)](o)})).on(n(384),(()=>{o.dispose()}));let s=N(M,t.target[n(373)],t[n(395)]);w.addPass(E,L,s,e)})),w.onWindowResize(l.value,c[r(395)]);const{onLoop:z}=n();return z((({delta:t})=>{const n=r;S&&(l[n(395)][n(401)]=!0,w.Reset(),S[n(357)]=_,w[n(410)](u[n(395)],c[n(395)]),w[n(382)](),w[n(350)](u.value,c.value))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),Q=nt;!function(t,n){const e=nt,o=et();for(;;)try{if(992661===-parseInt(e(225))/1+-parseInt(e(205))/2+-parseInt(e(192))/3+-parseInt(e(199))/4+-parseInt(e(216))/5*(parseInt(e(211))/6)+parseInt(e(201))/7*(parseInt(e(218))/8)+parseInt(e(227))/9*(parseInt(e(200))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const K=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[nt(187)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){K(this,(function(){const t=nt,n=new RegExp(t(207)),e=new RegExp(t(214),"i"),o=it(t(196));n.test(o+t(191))&&e[t(219)](o+"input")?it():o("0")}))()}();const tt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[nt(187)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function nt(t,n){const e=et();return(nt=function(t,n){return e[t-=186]})(t,n)}function et(){const t=["trace","118086VkxHRw","exception","log","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","#ffffff","455nZIcqr","info","45536faosvr","test","stateObject","table","manual","toString","return (function() ","1816344fduhKm","perspectiveCameraRef","24051186qgUuSW","length","apply","call","warn",'{}.constructor("return this")( )',"chain","197244uoIYaY","console","TresDirectionalLight","bind","init","constructor","postProcessingEditor","6669336NQjOtn","20TmbOdF","2191dRFnLR","debu","TresAmbientLight","__proto__","1586492MTtpeo","gger","function *\\( *\\)","while (true) {}","#000000"];return(et=function(){return t})()}tt(void 0,(function(){const t=nt;let n;try{n=Function(t(224)+t(190)+");")()}catch(r){n=window}const e=n.console=n[t(193)]||{},o=[t(213),t(189),t(217),"error",t(212),t(221),t(210)];for(let s=0;s<o.length;s++){const n=tt[t(197)].prototype[t(195)](tt),r=o[s],a=e[r]||n;n[t(204)]=tt.bind(tt),n.toString=a[t(223)][t(195)](a),e[r]=n}}))();const ot={ref:Q(226),position:[600,850,-1500],fov:45,near:.1,far:1e5},rt=S(Q(203),{color:Q(215),intensity:2},null,-1),st=S(Q(194),{position:[100,100,0],intensity:2,color:Q(215)},null,-1),at=x({__name:Q(198),setup(t){const e=Q,r={clearColor:e(209),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(222)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const e=y("TresCanvas");return I(),b(e,L(r,{"window-size":""}),{default:_((()=>[S("TresPerspectiveCamera",ot,null,512),w(D(o),U(P(s)),null,16),rt,st,(I(),b(E,null,{default:_((()=>[w(J)])),_:1}))])),_:1},16)}}});function it(t){function n(t){const e=nt;if("string"==typeof t)return function(t){}[e(197)](e(208))[e(187)]("counter");1!==(""+t/t)[e(186)]||t%20==0?function(){return!0}[e(197)](e(202)+e(206))[e(188)]("action"):function(){return!1}[e(197)](e(202)+e(206))[e(187)](e(220)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{at as default};
