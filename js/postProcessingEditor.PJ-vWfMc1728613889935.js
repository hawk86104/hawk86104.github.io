import{p as t,U as n,z as e,Y as o}from"./@tresjs.BSMy0VpY1728613889935.js";import{k as r,_ as s,at as a,bg as i,b6 as c,A as l,cK as u,aB as v,bW as f}from"./three.-yu4716U1728613889935.js";import{P as p}from"./tweakpane.yHWGBmom1728613889935.js";import{d,a4 as m,e as g,o as x,f as h,g as y,L as b,j as I,u as _,aj as S,ak as U,al as w,m as P}from"./@vue.JNsx1iN61728613889935.js";import{_ as D}from"./@fesjs._J_IrcQ81728613889935.js";import"./@vueuse.lr_j1bUm1728613889935.js";import"./vue-router.KPucoEDD1728613889935.js";import"./lodash-es.kYt-_xTG1728613889935.js";import"./@qlin.yHhFDldE1728613889935.js";import"./pinia.uQEpjCI81728613889935.js";import"./@floating-ui.BPbuo5Gx1728613889935.js";import"./@juggle.7yjBMqoW1728613889935.js";!function(t,n){const e=M,o=A();for(;;)try{if(203356===-parseInt(e(260))/1+-parseInt(e(241))/2+parseInt(e(280))/3*(-parseInt(e(248))/4)+-parseInt(e(266))/5*(-parseInt(e(281))/6)+-parseInt(e(283))/7+parseInt(e(255))/8+-parseInt(e(265))/9*(-parseInt(e(236))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const E=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function M(t,n){const e=A();return(M=function(t,n){return e[t-=229]})(t,n)}!function(){E(this,(function(){const t=M,n=new RegExp(t(231)),e=new RegExp(t(253),"i"),o=C(t(269));n[t(289)](o+"chain")&&e[t(289)](o+t(272))?C():o("0")}))()}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[M(252)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function A(){const t=["\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","counter","723688CInzZw","Vector4","Texture",'Shader "',"object","274134oSwlvh","Vector3","WagnerLoadShaderException","ShaderMaterial","log","4039803lelEEL","85NyZrkM","isArray",'{}.constructor("return this")( )',"init","value","replace","input","Matrix2","console","debu","constructor","Vector2","\" couldn't be loaded.","info","675ztLBaD","54174cFJsOb","lastIndex","247961zYEhXH","bind","open","toString","message","onabort","test","v3v","responseText","exception","string","function *\\( *\\)","hasOwnProperty","trace","warn","Matrix3","10rlhqXr","call","return (function() ","action","__proto__","203666PLrOfY","Matrix4","while (true) {}","length","name","random","exec","1388pehzhc","onload","onerror","type","apply"];return(A=function(){return t})()}L(void 0,(function(){const t=M,n=function(){const t=M;let n;try{n=Function(t(238)+t(268)+");")()}catch(e){n=window}return n}(),e=n[t(274)]=n[t(274)]||{},o=[t(264),t(234),t(279),"error",t(229),"table",t(233)];for(let r=0;r<o[t(244)];r++){const n=L[t(276)].prototype[t(284)](L),s=o[r],a=e[s]||n;n[t(240)]=L[t(284)](L),n[t(286)]=a[t(286)][t(284)](a),e[s]=n}}))();function z(t,n,e){const o=M;if(typeof t!==o(259)||null===t)return t;const r=Array[o(267)](t)?[]:{};for(const s in t)t[o(232)](s)&&(r[s]=z(t[s])),s==n&&(r[n]=e);return r}function C(t){function n(t){const e=M;if(typeof t===e(230))return function(t){}[e(276)](e(243))[e(252)](e(254));1!==(""+t/t)[e(244)]||t%20==0?function(){return!0}[e(276)](e(275)+"gger")[e(237)](e(239)):function(){return!1}[e(276)](e(275)+"gger")[e(252)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const F=G;!function(t,n){const e=G,o=B();for(;;)try{if(564073===parseInt(e(280))/1+parseInt(e(278))/2+-parseInt(e(282))/3*(parseInt(e(238))/4)+parseInt(e(320))/5+-parseInt(e(294))/6*(-parseInt(e(255))/7)+parseInt(e(273))/8*(-parseInt(e(306))/9)+-parseInt(e(317))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const N=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[G(252)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){N(this,(function(){const t=G,n=new RegExp(t(314)),e=new RegExp(t(266),"i"),o=j("init");n.test(o+t(268))&&e[t(243)](o+t(236))?j():o("0")}))()}();const T=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[G(252)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();T(void 0,(function(){const t=G,n=function(){const t=G;let n;try{n=Function(t(304)+t(326)+");")()}catch(e){n=window}return n}(),e=n[t(265)]=n[t(265)]||{},o=[t(301),t(233),t(307),"error","exception",t(274),"trace"];for(let r=0;r<o.length;r++){const n=T[t(289)].prototype[t(249)](T),s=o[r],a=e[s]||n;n[t(232)]=T[t(249)](T),n[t(328)]=a[t(328)][t(249)](a),e[s]=n}}))();class R{constructor(t,n){const e=G;this[e(257)]=1,this[e(290)]=1,this[e(299)]=n||{},this[e(229)]=this[e(299)][e(229)]||!1,this[e(242)]=t,this.copyPass=this[e(285)](this[e(299)]),this[e(234)]=new(s[e(247)]),this.quad=new(s[e(277)])(new(s[e(296)])(1,1),new(s[e(272)])),this[e(234)][e(284)](this[e(295)]),this.camera=new(s[e(327)])(1,1,1,1,-1e4,1e4),this[e(276)]=new(s[e(310)])(1,1,{minFilter:void 0!==this[e(299)].minFilter?this[e(299)][e(311)]:s[e(258)],magFilter:void 0!==this.settings[e(254)]?this[e(299)][e(254)]:s[e(258)],wrapS:void 0!==this[e(299)][e(318)]?this.settings[e(318)]:i,wrapT:void 0!==this.settings[e(322)]?this.settings[e(322)]:s[e(313)],format:this.useRGBA?c:s[e(297)],type:void 0!==this[e(299)].type?this[e(299)][e(239)]:l,stencilBuffer:void 0===this[e(299)][e(253)]||this[e(299)].stencilBuffer}),this[e(235)]=this.front[e(279)](),this[e(246)]=Date.now(),this.passes={},this.Stack={passItems:[],passes:[]}}[F(291)](t,n,e,o){const r=F;this.loadShadervf(n);const s={shaderName:t,params:e,uuid:o,shader:this[r(316)]};this[r(319)][r(245)].push(s)}removePass(t){const n=F;for(let e=this[n(319)][n(245)][n(244)]-1;e>=0;e--)this[n(319)].passItems[e][n(281)]===parseInt(t)&&this[n(319)][n(245)][n(312)](e,1);console.log(this[n(319)][n(245)])}[F(285)](){const t=F;this[t(270)][t(241)](this);return this[t(292)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}loadShadervf(t){const n=F,e=n(300);return this[n(316)]=function(t,n){const e=M,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,i=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,c={sampler2D:{type:"t",value:()=>new(s[M(257)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new r},vec3:{type:"v3",value:()=>new(s[M(261)])},vec4:{type:"v4",value:()=>new(s[M(256)])},bvec2:{type:"v2",value:()=>new r},bvec3:{type:"v3",value:()=>new(s[M(261)])},bvec4:{type:"v4",value:()=>new(s[M(256)])},ivec2:{type:"v2",value:()=>new(s[M(277)])},ivec3:{type:"v3",value:()=>new(s[M(261)])},ivec4:{type:"v4",value:()=>new a},mat2:{type:"v2",value:()=>new(s[M(273)])},mat3:{type:"v3",value:()=>new(s[M(235)])},mat4:{type:"v4",value:()=>new(s[M(242)])}},l={float:{type:"fv",value:()=>[]},vec3:{type:e(290),value:()=>[]}};let u;const v={resolution:{type:"v2",value:new r(1,1),default:!0},time:{type:"f",value:Date.now(),default:!0},tInput:{type:"t",value:new(s[e(257)]),default:!0}};let f,p;for(;null!==(u=o.exec(n));)u.index===o[e(282)]&&o.lastIndex++,f=u[1],p=u[2],v[p]={type:c[f][e(251)],value:c[f][e(270)]()};for(;null!==(u=i[e(247)](n));)u.index===o[e(282)]&&o[e(282)]++,f=u[1],p=u[2],u[3],v[p]={type:l[f][e(251)],value:l[f][e(270)]()};return new(s[e(263)])({uniforms:v,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(316)]}[F(270)](t){const n=F;this[n(316)]=null,this[n(324)]={}}Reset(){const t=F;this.read=this[t(276)],this.write=this[t(235)]}onWindowResize(t,n){const e=F,o=window[e(288)],r=window[e(256)];t.setSize(1*o,1*r),n[e(287)].makePerspective(70,o/r,n[e(250)],n.far),this.setSize(o,r);return this[e(302)](o,r,!0)}[F(264)](t,n){const e=F;this[e(257)]=t,this.height=n,this[e(269)].projectionMatrix.makeOrthographic(t/-2,t/2,n/2,n/-2,this[e(269)][e(250)],this[e(269)][e(267)]),this[e(295)][e(240)].set(t,n,1),this.front[e(264)](t,n),this.back.setSize(t,n)}[F(302)](t,n,e){const o=F;return new(s[o(310)])(t,n,{minFilter:s[o(258)],magFilter:s[o(258)],format:e?s[o(303)]:u})}[F(263)](t,n,e,o){const r=F;this.renderer[r(262)](this[r(298)]),this[r(242)].render(t,n),o||this.swapBuffers()}[F(275)](){const t=F,n=this[t(298)];this[t(298)]=this[t(325)],this[t(325)]=n}[F(230)](){const t=F;for(let n=0;n<this[t(319)][t(245)].length;n++){const e=this.Stack[t(245)][n][t(316)],o=this[t(319)].passItems[n].params;if(this[t(242)].setRenderTarget(this.write),e instanceof s[t(237)]){this[t(295)][t(271)]=e,this.quad.material.uniforms[t(321)][t(308)]=this[t(325)][t(259)],this[t(295)].material[t(305)][t(231)][t(308)].set(this[t(257)],this[t(290)]),this.quad[t(271)][t(305)][t(261)][t(308)]=.001*(Date[t(251)]()-this[t(246)]);for(const n in o)this[t(295)][t(271)][t(305)][n][t(308)]=o[n];this.renderer.render(this.scene,this[t(269)]),this[t(275)]()}}}[F(293)](t,n){const e=F;this.renderer[e(262)](null),this[e(295)][e(271)]=this[e(283)],this[e(295)][e(271)][e(305)][e(321)][e(308)]=this[e(325)][e(259)],this[e(295)].material.uniforms.resolution.value[e(286)](this[e(257)],this[e(290)]),this[e(242)][e(263)](this[e(234)],this[e(269)])}}function B(){const t=["magFilter","1730029OwomRj","innerHeight","width","LinearFilter","texture","stateObject","time","setRenderTarget","render","setSize","console","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","far","chain","camera","Pass","material","MeshBasicMaterial","48OJrLJr","table","swapBuffers","front","Mesh","1038644RAdPng","clone","113245NOOPch","uuid","1443045XogXbu","copyPass","add","CopyPass","set","projectionMatrix","innerWidth","constructor","height","addPass","loadShadervf","toScreen","24OjjUyl","quad","PlaneGeometry","RGBFormat","write","settings","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","log","getOfflineTexture","RGBAFormat","return (function() ","uniforms","304434tcwtBa","info","value","gger","WebGLRenderTarget","minFilter","splice","ClampToEdgeWrapping","function *\\( *\\)","string","shader","7471050OzqIQc","wrapS","Stack","4275045sisOfv","tInput","wrapT","while (true) {}","params","read",'{}.constructor("return this")( )',"OrthographicCamera","toString","useRGBA","pass","resolution","__proto__","warn","scene","back","input","ShaderMaterial","8mKsXjl","type","scale","call","renderer","test","length","passItems","startTime","Scene","debu","bind","near","now","apply","stencilBuffer"];return(B=function(){return t})()}function G(t,n){const e=B();return(G=function(t,n){return e[t-=229]})(t,n)}function j(t){function n(t){const e=G;if(typeof t===e(315))return function(t){}.constructor(e(323))[e(252)]("counter");1!==(""+t/t)[e(244)]||t%20==0?function(){return!0}.constructor(e(248)+e(309))[e(241)]("action"):function(){return!1}[e(289)]("debu"+e(309))[e(252)](e(260)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const O="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}";!function(t,n){const e=W,o=H();for(;;)try{if(892900===-parseInt(e(197))/1+parseInt(e(246))/2*(parseInt(e(182))/3)+parseInt(e(203))/4+parseInt(e(215))/5*(-parseInt(e(249))/6)+parseInt(e(236))/7*(-parseInt(e(188))/8)+-parseInt(e(204))/9+parseInt(e(206))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const k=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[W(234)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){k(this,(function(){const t=W,n=new RegExp(t(179)),e=new RegExp(t(185),"i"),o=X(t(202));n.test(o+t(180))&&e[t(205)](o+t(192))?X():o("0")}))()}();const V=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[W(234)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function H(){const t=["gger","values","exception","action","init","5216400cpaHhP","2709873vsJbuO","test","19145280teRkth","debu","return (function() ","InvertPass","DENOISEPass","addFolder","string","title","pass","155IMjkEL","error","length","trace","toString","material","RGBPass","table","translate","addPass","change","value","while (true) {}","SEPIAPass","click","target","mergeGeometries","random","Vector2","apply","toScreen","20041nMNTkL","addButton","label","BufferGeometry","log","Reset","render","CIRCULARPass","removePass","TOONPass","2buZWaP","CGAPass","counter","121740bLAOop","constructor","bind","info","__proto__","castShadow","关闭通道","onWindowResize","function *\\( *\\)","chain","addBlade","2201382IXCWUM","dispose","stateObject","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","新增通道","VIGNETTE1Pass","4168qkjkhA","MeshPhongMaterial","map","plugins/postProcessing/image/1324.jpg","input","Mesh",'{}.constructor("return this")( )',"console","VIGNETTE2Pass","637812QKbqvq"];return(H=function(){return t})()}function W(t,n){const e=H();return(W=function(t,n){return e[t-=175]})(t,n)}V(void 0,(function(){const t=W,n=function(){const t=W;let n;try{n=Function(t(208)+t(194)+");")()}catch(e){n=window}return n}(),e=n[t(195)]=n[t(195)]||{},o=[t(240),"warn",t(252),t(216),t(200),t(222),t(218)];for(let r=0;r<o.length;r++){const n=V.constructor.prototype[t(251)](V),s=o[r],a=e[s]||n;n[t(175)]=V[t(251)](V),n.toString=a[t(219)][t(251)](a),e[s]=n}}))();function X(t){function n(t){const e=W;if(typeof t===e(212))return function(t){}[e(250)](e(227))[e(234)](e(248));1!==(""+t/t)[e(217)]||t%20==0?function(){return!0}[e(250)]("debu"+e(198)).call(e(201)):function(){return!1}[e(250)](e(207)+"gger")[e(234)](e(184)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const q=D(d({__name:"postProcessing",async setup(o){const r=W;let a,i;const{camera:c,renderer:l,scene:u,sizes:d}=t();for(var g=new(s[r(239)]),x=[],h=0;h<100;h++){var y=new v(100,100,100);y[r(223)](1500*Math[r(232)](),1500*Math[r(232)](),1500*Math.random()),x.push(y)}g=f[r(231)](x);const b=([a,i]=m((()=>e({map:r(191)}))),a=await a,i(),a),I=([a,i]=m((()=>e({map:"plugins/postProcessing/image/1324-normal.jpg"}))),a=await a,i(),a);var _=new(s[r(189)])({map:b[r(190)],normalMap:I[r(190)],normalScale:new(s[r(233)])(.8,-.8),shininess:100}),S=new(s[r(193)])(g,_);S[r(176)]=!0,S.receiveShadow=!0,u[r(226)].add(S);const U=new R(l.value,{useRGBA:!0}),w=new p;let P=null,D=[{text:r(209),value:{InvertPass:O}},{text:"FXAAPass",value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:r(228),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:"SNOISEPass",value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:"BOXBLURPass",value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:r(210),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:r(247),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:I.map}}},{text:"SOBELPass",value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:r(221),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:"DOTPass",value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:r(243),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:"POISSONPass",value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:r(187),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:r(196),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:"FREICHENPass",value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:r(245),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],E="InvertPass",M=O,L=null;w.addBlade({view:"list",label:"后处理类型",options:D,value:""}).on(r(225),(t=>{P=t.value}));const A=w.addButton({title:"新增",label:r(186)});let C=0;A.on(r(229),(t=>{const n=r;E=Object.keys(P)[0],M=Object[n(199)](P)[0],L=Object[n(199)](P)[1];let e=C++,o=w[n(211)]({title:E});for(const r in L){let t=L[r];o[n(181)]({view:"text",label:r,parse:t=>String(t),value:t})}o[n(237)]({title:"移除~"+e,label:n(177)}).on("click",(t=>{const e=n;let o=t.target[e(213)].split("~")[1];U[e(244)](o)})).on(n(229),(()=>{o[n(183)]()}));let s=z(L,t[n(230)][n(238)],t[n(226)]);U[n(224)](E,M,s,e)})),U[r(178)](l[r(226)],c[r(226)]);const{onLoop:F}=n();return F((({delta:t})=>{const n=r;S&&(l.value.autoClearColor=!0,U[n(241)](),S[n(220)]=_,U[n(242)](u[n(226)],c[n(226)]),U[n(214)](),U[n(235)](u[n(226)],c.value))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),Z=tt;!function(t,n){const e=tt,o=nt();for(;;)try{if(529236===-parseInt(e(329))/1+-parseInt(e(295))/2+parseInt(e(321))/3+parseInt(e(300))/4*(-parseInt(e(312))/5)+-parseInt(e(317))/6*(parseInt(e(324))/7)+parseInt(e(311))/8+parseInt(e(316))/9*(parseInt(e(332))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const $=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[tt(328)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){$(this,(function(){const t=tt,n=new RegExp(t(308)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=ot("init");n[t(325)](o+t(307))&&e[t(325)](o+t(331))?ot():o("0")}))()}();const J=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();J(void 0,(function(){const t=tt;let n;try{n=Function(t(335)+t(303)+");")()}catch(r){n=window}const e=n[t(336)]=n.console||{},o=[t(333),t(298),t(302),t(304),t(309),"table",t(315)];for(let s=0;s<o[t(310)];s++){const n=J.constructor[t(294)].bind(J),r=o[s],a=e[r]||n;n[t(320)]=J.bind(J),n[t(327)]=a[t(327)][t(297)](a),e[r]=n}}))();const K={ref:"perspectiveCameraRef",position:[600,850,-1500],fov:45,near:.1,far:1e5},Y=b(Z(330),{color:"#ffffff",intensity:2},null,-1),Q=b(Z(322),{position:[100,100,0],intensity:2,color:Z(306)},null,-1);function tt(t,n){const e=nt();return(tt=function(t,n){return e[t-=294]})(t,n)}function nt(){const t=["length","4113632icupSy","335utfqPZ","TresCanvas","#000000","trace","9819aGfGbH","6teRWyx","counter","gger","__proto__","2280786Katpgu","TresDirectionalLight","call","5777758nviwic","test","constructor","toString","apply","632146pmhZxv","TresAmbientLight","input","19120HMstqZ","log","string","return (function() ","console","while (true) {}","prototype","1466190juSnVL","action","bind","warn","postProcessingEditor","38244mUkopJ","debu","info",'{}.constructor("return this")( )',"error","manual","#ffffff","chain","function *\\( *\\)","exception"];return(nt=function(){return t})()}const et=d({__name:Z(299),setup(t){const e=Z,r={clearColor:e(314),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(305)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=g(e(313));return x(),h(a,P(r,{"window-size":""}),{default:y((()=>[b("TresPerspectiveCamera",K,null,512),I(_(o),S(U(s)),null,16),Y,Q,(x(),h(w,null,{default:y((()=>[I(q)])),_:1}))])),_:1},16)}}});function ot(t){function n(t){const e=tt;if(typeof t===e(334))return function(t){}[e(326)](e(337))[e(328)](e(318));1!==(""+t/t)[e(310)]||t%20==0?function(){return!0}.constructor(e(301)+e(319))[e(323)](e(296)):function(){return!1}[e(326)](e(301)+"gger")[e(328)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{et as default};
