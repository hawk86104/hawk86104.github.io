import{$ as n,N as e}from"./@tresjs.DDzpLB7Q1725236486446.js";import{C as t,M as o,V as r,al as i,Z as a}from"./three.0IuNGJsA1725236486446.js";import{d as s,a4 as c,a1 as l,o as v,D as u,J as x,aj as f,ak as p}from"./@vue.9bHx4gg21725236486446.js";const y=m;function m(n,e){const t=z();return(m=function(n,e){return t[n-=186]})(n,e)}!function(n,e){const t=m,o=z();for(;;)try{if(450395===parseInt(t(209))/1+-parseInt(t(219))/2+parseInt(t(223))/3*(parseInt(t(218))/4)+-parseInt(t(210))/5+-parseInt(t(226))/6+-parseInt(t(187))/7*(parseInt(t(229))/8)+parseInt(t(201))/9*(parseInt(t(198))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const d=function(){let n=!0;return function(e,t){const o=n?function(){if(t){const n=t[m(214)](e,arguments);return t=null,n}}:function(){};return n=!1,o}}();!function(){d(this,(function(){const n=m,e=new RegExp("function *\\( *\\)"),t=new RegExp(n(205),"i"),o=C(n(188));e[n(189)](o+n(194))&&t.test(o+n(225))?C():o("0")}))()}();const g=function(){let n=!0;return function(e,t){const o=n?function(){if(t){const n=t[m(214)](e,arguments);return t=null,n}}:function(){};return n=!1,o}}();function z(){const n=["859910WjLIwb","string","time","117wSjojT","prototype","call","info","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","table","magnitude","gain","50993AvLpOd","2222595sETsTM","fireA","random","fireScale","apply","log","debu","exception","24UIvMTc","1181768ODxfzW","stateObject","toString","value","309606QSCPaK","TresSphereGeometry","input","1628316QkHclZ","bind","__proto__","61808Yurgtt","return (function() ","gger","28XcdCoX","init","test","length","position","console","warn","chain","lacunarity","constructor","uniforms"];return(z=function(){return n})()}g(void 0,(function(){const n=m;let e;try{e=Function(n(230)+'{}.constructor("return this")( ));')()}catch(r){e=window}const t=e[n(192)]=e[n(192)]||{},o=[n(215),n(193),n(204),"error",n(217),n(206),"trace"];for(let i=0;i<o[n(190)];i++){const e=g.constructor[n(202)][n(227)](g),r=o[i],a=t[r]||e;e[n(228)]=g[n(227)](g),e.toString=a[n(221)][n(227)](a),t[r]=e}}))();const h=[y(191),"scale"],P=x(y(224),{args:[1,32,16]},null,-1),w=s({__name:y(211),props:{position:{default:[100,19,0]},fireScale:{default:60},magnitude:{default:1.3},lacunarity:{default:2},gain:{default:1}},async setup(s){const m=y;let d,g;const z=s,{map:w}=([d,g]=c((()=>e({map:"./plugins/digitalCity/image/fire.png"}))),d=await d,g(),d),C={defines:{ITERATIONS:"20",OCTIVES:"3"},uniforms:{fireScale:{type:"f",value:z[m(213)]},offsetPositin:{type:"f",value:z[m(191)]},fireTex:{type:"t",value:w},color:{type:"c",value:new t(4095)},time:{type:"f",value:0},seed:{type:"f",value:19.19*Math[m(212)]()},invModelMatrix:{type:"m4",value:new o},scale:{type:"v3",value:new r(1,1,1)},noiseScale:{type:"v4",value:new i(1,2,1,.3)},magnitude:{type:"f",value:z[m(207)]},lacunarity:{type:"f",value:z[m(195)]},gain:{type:"f",value:z[m(208)]}},vertexShader:"varying vec3 vWorldPos;\nuniform float fireScale;\nuniform vec3 offsetPositin;\nvarying vec3 vUnCameraPosition;\nvoid main(){\n    gl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.);\n    vWorldPos=(modelMatrix*vec4(position,1.)).xyz;\n    vUnCameraPosition=cameraPosition-offsetPositin;\n    vWorldPos.x=vWorldPos.x-offsetPositin.x;\n    vWorldPos.y=vWorldPos.y-offsetPositin.y-.46*fireScale;\n    vWorldPos.z=vWorldPos.z-offsetPositin.z;\n    vWorldPos=vWorldPos/fireScale;\n}",fragmentShader:"uniform vec3 color;\nuniform float time;\nuniform float seed;\nuniform mat4 invModelMatrix;\nuniform vec3 scale;\n\nuniform vec4 noiseScale;\nuniform float magnitude;\nuniform float lacunarity;\nuniform float gain;\n\nuniform sampler2D fireTex;\n\nvarying vec3 vWorldPos;\nvarying vec3 vUnCameraPosition;\n\n// GLSL simplex noise function by ashima / https://github.com/ashima/webgl-noise/blob/master/src/noise3D.glsl\n// -------- simplex noise\nvec3 mod289(vec3 x){\n    return x-floor(x*(1./289.))*289.;\n}\n\nvec4 mod289(vec4 x){\n    return x-floor(x*(1./289.))*289.;\n}\n\nvec4 permute(vec4 x){\n    return mod289(((x*34.)+1.)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r){\n    return 1.79284291400159-.85373472095314*r;\n}\n\nfloat snoise(vec3 v){\n    const vec2 C=vec2(1./6.,1./3.);\n    const vec4 D=vec4(0.,.5,1.,2.);\n    \n    // First corner\n    vec3 i=floor(v+dot(v,C.yyy));\n    vec3 x0=v-i+dot(i,C.xxx);\n    \n    // Other corners\n    vec3 g=step(x0.yzx,x0.xyz);\n    vec3 l=1.-g;\n    vec3 i1=min(g.xyz,l.zxy);\n    vec3 i2=max(g.xyz,l.zxy);\n    \n    //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n    //   x1 = x0 - i1  + 1.0 * C.xxx;\n    //   x2 = x0 - i2  + 2.0 * C.xxx;\n    //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n    vec3 x1=x0-i1+C.xxx;\n    vec3 x2=x0-i2+C.yyy;// 2.0*C.x = 1/3 = C.y\n    vec3 x3=x0-D.yyy;// -1.0+3.0*C.x = -0.5 = -D.y\n    \n    // Permutations\n    i=mod289(i);\n    vec4 p=permute(permute(permute(\n                i.z+vec4(0.,i1.z,i2.z,1.))\n                +i.y+vec4(0.,i1.y,i2.y,1.))\n                +i.x+vec4(0.,i1.x,i2.x,1.));\n                \n                // Gradients: 7x7 points over a square, mapped onto an octahedron.\n                // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n                float n_=.142857142857;// 1.0/7.0\n                vec3 ns=n_*D.wyz-D.xzx;\n                \n                vec4 j=p-49.*floor(p*ns.z*ns.z);//  mod(p,7*7)\n                \n                vec4 x_=floor(j*ns.z);\n                vec4 y_=floor(j-7.*x_);// mod(j,N)\n                \n                vec4 x=x_*ns.x+ns.yyyy;\n                vec4 y=y_*ns.x+ns.yyyy;\n                vec4 h=1.-abs(x)-abs(y);\n                \n                vec4 b0=vec4(x.xy,y.xy);\n                vec4 b1=vec4(x.zw,y.zw);\n                \n                //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n                //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n                vec4 s0=floor(b0)*2.+1.;\n                vec4 s1=floor(b1)*2.+1.;\n                vec4 sh=-step(h,vec4(0.));\n                \n                vec4 a0=b0.xzyw+s0.xzyw*sh.xxyy;\n                vec4 a1=b1.xzyw+s1.xzyw*sh.zzww;\n                \n                vec3 p0=vec3(a0.xy,h.x);\n                vec3 p1=vec3(a0.zw,h.y);\n                vec3 p2=vec3(a1.xy,h.z);\n                vec3 p3=vec3(a1.zw,h.w);\n                \n                //Normalise gradients\n                vec4 norm=taylorInvSqrt(vec4(dot(p0,p0),dot(p1,p1),dot(p2,p2),dot(p3,p3)));\n                p0*=norm.x;\n                p1*=norm.y;\n                p2*=norm.z;\n                p3*=norm.w;\n                \n                // Mix final noise value\n                vec4 m=max(.6-vec4(dot(x0,x0),dot(x1,x1),dot(x2,x2),dot(x3,x3)),0.);\n                m=m*m;\n                return 42.*dot(m*m,vec4(dot(p0,x0),dot(p1,x1),dot(p2,x2),dot(p3,x3)));\n            }\n            // simplex noise --------\n            \n            float turbulence(vec3 p){\n                float sum=0.;\n                float freq=1.;\n                float amp=1.;\n                \n                for(int i=0;i<OCTIVES;i++){\n                    sum+=abs(snoise(p*freq))*amp;\n                    freq*=lacunarity;\n                    amp*=gain;\n                }\n                \n                return sum;\n            }\n            \n            vec4 samplerFire(vec3 p,vec4 scale){\n                vec2 st=vec2(sqrt(dot(p.xz,p.xz)),p.y);\n                \n                if(st.x<=0.||st.x>=1.||st.y<=0.||st.y>=1.)return vec4(0.);\n                \n                p.y-=(seed+time)*scale.w;\n                p*=scale.xyz;\n                \n                st.y+=sqrt(st.y)*magnitude*turbulence(p);\n                \n                if(st.y<=0.||st.y>=1.)return vec4(0.);\n                \n                return texture2D(fireTex,st);\n            }\n            \n            vec3 localize(vec3 p){\n                return(invModelMatrix*vec4(p,1.)).xyz;\n            }\n            \n            void main(){\n                vec3 rayPos=vWorldPos;\n                vec3 rayDir=normalize(rayPos-vUnCameraPosition);\n                float rayLen=.0288*length(scale.xyz);\n                \n                vec4 col=vec4(0.);\n                \n                for(int i=0;i<ITERATIONS;i++){\n                    rayPos+=rayDir*rayLen;\n                    \n                    vec3 lp=localize(rayPos);\n                    \n                    lp.y+=.5;\n                    lp.xz*=2.;\n                    col+=samplerFire(lp,noiseScale);\n                }\n                if(col.x<.12&&col.y<.12&&col.z<.12){\n                    gl_FragColor=vec4(0,0,0,0);\n                    // gl_FragColor=col;\n                }else{\n                    gl_FragColor=col;\n                    // gl_FragColor=vec4(mix(color,col.xyz,.1),1.);\n                }\n                // gl_FragColor=vec4(1.,.0,1.,1.);\n            }\n            ",transparent:!0,depthWrite:!0,depthTest:!0,side:a},{onLoop:b}=n();return b((()=>{const n=m;C[n(197)][n(200)][n(222)]+=.01})),l((()=>{const n=m;z[n(213)]&&(C[n(197)][n(213)].value=z[n(213)]),z.magnitude&&(C[n(197)][n(207)][n(222)]=z.magnitude),z[n(195)]&&(C[n(197)][n(195)][n(222)]=z.lacunarity),z[n(208)]&&(C[n(197)].gain.value=z.gain)})),(n,e)=>{const t=m;return v(),u("TresMesh",{position:z[t(191)],scale:[z[t(213)],z.fireScale,z[t(213)]],renderOrder:9999},[P,x("TresShaderMaterial",f(p(C)),null,16)],8,h)}}});function C(n){function e(n){const t=m;if(typeof n===t(199))return function(n){}[t(196)]("while (true) {}")[t(214)]("counter");1!==(""+n/n).length||n%20==0?function(){return!0}[t(196)]("debu"+t(186))[t(203)]("action"):function(){return!1}[t(196)](t(216)+t(186))[t(214)](t(220)),e(++n)}try{if(n)return e;e(0)}catch(t){}}export{w as _};
