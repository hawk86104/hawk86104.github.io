import{_ as e}from"./three.-yu4716U1728613889935.js";import{U as n,Y as t,z as a}from"./@tresjs.BSMy0VpY1728613889935.js";import{P as o}from"./tweakpane.yHWGBmom1728613889935.js";import{d as r,a4 as i,Y as l,e as s,o as u,f as c,g as p,j as f,u as v,L as m,m as d,aj as h,ak as g}from"./@vue.JNsx1iN61728613889935.js";import"./@vueuse.lr_j1bUm1728613889935.js";const x=w;!function(e,n){const t=w,a=T();for(;;)try{if(931650===-parseInt(t(227))/1+parseInt(t(241))/2*(-parseInt(t(236))/3)+-parseInt(t(274))/4*(-parseInt(t(275))/5)+parseInt(t(273))/6*(parseInt(t(271))/7)+-parseInt(t(240))/8*(parseInt(t(215))/9)+parseInt(t(234))/10+parseInt(t(278))/11*(parseInt(t(222))/12))break;a.push(a.shift())}catch(o){a.push(a.shift())}}();const y=function(){let e=!0;return function(n,t){const a=e?function(){if(t){const e=t[w(242)](n,arguments);return t=null,e}}:function(){};return e=!1,a}}();!function(){y(this,(function(){const e=w,n=new RegExp(e(245)),t=new RegExp(e(270),"i"),a=E(e(237));n.test(a+"chain")&&t[e(235)](a+e(281))?E():a("0")}))()}();const S=function(){let e=!0;return function(n,t){const a=e?function(){if(t){const e=t.apply(n,arguments);return t=null,e}}:function(){};return e=!1,a}}();function w(e,n){const t=T();return(w=function(e,n){return t[e-=212]})(e,n)}function T(){const e=["5854650FNAwdK","test","213mGQfBk","init","exception","TresPerspectiveCamera","48SdQIQw","38796KcOmsN","apply","counter","change","function *\\( *\\)","log","gger","wireframeMaterialRef","string","warn","uWaveSpeed","TresCanvas","call","size","#122148","constructor","value","action","bind","pointsEarth","uWaveHeight","uTime","海浪变化速度","toString","stateObject","uniforms","trace","error","set","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","10505929aXKuSl","#080820","6IBmgpP","10964LbQuDu","350IzUNnn","#ffffff","addFolder","15749899SgZHqH","Debug","TresShaderMaterial","input","粒子大小","debu","table","881235RHzWRP","FrontSide","rotation","SRGBColorSpace","prototype","console","TresGroup","12jtnVZV","TresIcosahedronGeometry","groupRef","TresPoints","while (true) {}","813593subRWJ","addBinding","color","TresMeshBasicMaterial","pointSize","length","TresHemisphereLight"];return(T=function(){return e})()}S(void 0,(function(){const e=w;let n;try{n=Function('return (function() {}.constructor("return this")( ));')()}catch(o){n=window}const t=n[e(220)]=n.console||{},a=[e(246),e(250),"info",e(268),e(238),e(214),e(267)];for(let r=0;r<a[e(232)];r++){const n=S[e(256)][e(219)][e(259)](S),o=a[r],i=t[o]||n;n.__proto__=S[e(259)](S),n.toString=i[e(264)][e(259)](i),t[o]=n}}))();const b=m(x(239),{position:[0,0,3.5],fov:45,near:.1,far:20},null,-1),_=m(x(223),{args:[1,4]},null,-1),z=m(x(223),{args:[1,128]},null,-1),j=m(x(233),{args:[x(276),x(272),3]},null,-1),P=r({__name:x(260),async setup(r){const y=x;let S,w;const T={color:"#17c5a9",pointSize:4},P={clearColor:y(255),shadows:!1,alpha:!1,outputColorSpace:e[y(218)]},E={color:T[y(229)],wireframe:!0,transparent:!0,opacity:.2},I=([S,w]=i((()=>a(["./plugins/earthSample/image/pointsEarth/00_earthmap1k.jpg","./plugins/earthSample/image/pointsEarth/circle.png","./plugins/earthSample/image/pointsEarth/04_rainbow1k.jpg","./plugins/earthSample/image/pointsEarth/01_earthbump1k.jpg","./plugins/earthSample/image/pointsEarth/02_earthspec1k.jpg"]))),S=await S,w(),S),D=I[0],k=I[1],A=I[2],C=I[3],H=I[4],R={uniforms:{size:{type:"f",value:T[y(231)]},uTime:{type:"f",value:0},uWaveHeight:{type:"f",value:.075},uWaveSpeed:{type:"f",value:.2},colorTexture:{type:"t",value:A},elevTexture:{type:"t",value:C},alphaTexture:{type:"t",value:H},earthTexture:{type:"t",value:D},starTexture:{type:"t",value:k}},vertexShader:"  uniform float size;\n  uniform sampler2D elevTexture;\n  uniform sampler2D alphaTexture;\n  uniform float uTime;\n  uniform float uWaveHeight;\n  uniform float uWaveSpeed;\n\n  varying vec2 vUv;\n  varying float vVisible;\n  varying float vAlpha;\n  varying float vElevation;\n  // Function to generate fBm with vec3 input\n  float random(vec3 st) {\n    return fract(sin(dot(st.xyz, vec3(12.9898,78.233,45.164))) * 43758.5453123);\n}\n\nfloat noise(vec3 st) {\n    vec3 i = floor(st);\n    vec3 f = fract(st);\n\n    // Eight corners in 3D of a tile\n    float a = random(i);\n    float b = random(i + vec3(1.0, 0.0, 0.0));\n    float c = random(i + vec3(0.0, 1.0, 0.0));\n    float d = random(i + vec3(1.0, 1.0, 0.0));\n    float e = random(i + vec3(0.0, 0.0, 1.0));\n    float f1 = random(i + vec3(1.0, 0.0, 1.0));\n    float g = random(i + vec3(0.0, 1.0, 1.0));\n    float h = random(i + vec3(1.0, 1.0, 1.0));\n\n    vec3 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(mix(mix(a, b, u.x), mix(c, d, u.x), u.y),\n               mix(mix(e, f1, u.x), mix(g, h, u.x), u.y), u.z);\n}\n\nfloat fbm(vec3 st) {\n    float value = 0.0;\n    float amplitude = 0.5;\n\n    for (int i = 0; i < 5; i++) {\n        value += amplitude * noise(st);\n        st *= 2.0;\n        amplitude *= 0.5;\n    }\n    return value;\n}\n\n  void main() {\n    vUv = uv;\n    float alphaLand = 1.0 - texture2D(alphaTexture, vUv).r;\n    vAlpha = alphaLand;\n    vec3 newPosition = position;\n\n    if(alphaLand < 0.5) {\n      // Sea\n      // fBm for wave-like displacement\n      float waveHeight = uWaveHeight; // Adjust wave height as needed\n      float waveSpeed = uWaveSpeed;  // Adjust wave speed as needed\n      float displacement = (fbm(newPosition * 5.0 + uTime * waveSpeed) * 2.0 - 1.0) * waveHeight;\n      vElevation = displacement;\n      newPosition += normal * displacement ;\n    }\n\n    vec4 mvPosition = modelViewMatrix * vec4( newPosition, 1.0 );\n    float elv = texture2D(elevTexture, vUv).r;\n    vec3 vNormal = normalMatrix * normal;\n    vVisible = step(0.0, dot( -normalize(mvPosition.xyz), normalize(vNormal)));\n    mvPosition.z += 0.45 * elv;\n\n    // 求出 mvPosition 距离相机的距离\n    float dist = length(mvPosition.xyz);\n    // 根据距离调整 size\n    float pointSize = size * (1.0 - dist / 10.0);\n    gl_PointSize = max(pointSize, 1.0);\n    gl_PointSize = pointSize;\n    gl_Position = projectionMatrix * mvPosition;\n  }\n",fragmentShader:"  uniform sampler2D colorTexture;\n  // uniform sampler2D alphaTexture;\n  uniform sampler2D earthTexture;\n  uniform sampler2D starTexture;\n\n  varying vec2 vUv;\n  varying float vVisible;\n  varying float vAlpha;\n  varying float vElevation;\n\n  void main() {\n    if (floor(vVisible + 0.1) == 0.0) discard;\n    vec2 coord = gl_PointCoord;\n    float alpha = texture2D(starTexture, coord).a;\n    // 根据 alpha 值来裁剪形状\n    if (alpha < 0.1) discard;\n\n    // float alphaLand = 1.0 - texture2D(alphaTexture, vUv).r;\n    vec3 color = texture2D(colorTexture, vUv).rgb;\n    vec3 earth = texture2D(earthTexture, vUv).rgb;\n    color = mix(color, earth, 0.65);\n    if(\n      vAlpha > 0.5\n    ) {\n      gl_FragColor = vec4(color, vAlpha);\n    }else {\n      // 对于海洋部分，根据 vElevation 调整颜色\n      float elevationEffect = clamp(vElevation*30.0, -1.0, 1.0); // 将 vElevation 限制在 [-1, 1] 范围内\n      vec3 deep_sea_blue = vec3(0.004, 0.227, 0.388);\n      vec3 adjustedColor = mix(deep_sea_blue, earth*1.75, (elevationEffect + 1.0) * 0.5); // 根据 vElevation 调整颜色\n      gl_FragColor = vec4(adjustedColor, 1.0-vAlpha);\n    }\n  }\n",transparent:!0,side:e[y(216)]},U=l(),W=l(),L=(new o)[y(277)]({title:y(279)});L[y(228)](T,"color",{type:y(229)}).on(y(244),(({value:e})=>{const n=y;W[n(257)][n(229)][n(269)](e)})),L[y(228)](R.uniforms[y(254)],y(257),{min:.1,max:10,step:.1,label:y(212)}),L[y(228)](R[y(266)][y(261)],"value",{min:.01,max:.5,step:.01,label:"海浪高度"}),L[y(228)](R[y(266)][y(251)],y(257),{min:.01,max:1,step:.01,label:y(263)});const{onLoop:M}=n();return M((({delta:e})=>{const n=y;U[n(257)]&&(U[n(257)][n(217)].y+=.002,R[n(266)][n(262)][n(257)]+=10*e)})),(e,n)=>{const a=y,o=s(a(252));return u(),c(o,d(P,{"window-size":""}),{default:p((()=>[b,f(v(t),{autoRotate:!0,autoRotateSpeed:2}),m(a(221),{ref_key:a(224),ref:U},[m("TresMesh",null,[_,m(a(230),d({ref_key:a(248),ref:W},E),null,16)]),m(a(225),null,[z,m(a(280),h(g(R)),null,16)])],512),j])),_:1},16)}}});function E(e){function n(e){const t=w;if(typeof e===t(249))return function(e){}.constructor(t(226))[t(242)](t(243));1!==(""+e/e)[t(232)]||e%20==0?function(){return!0}[t(256)](t(213)+t(247))[t(253)](t(258)):function(){return!1}[t(256)](t(213)+t(247)).apply(t(265)),n(++e)}try{if(e)return n;n(0)}catch(t){}}export{P as default};
