import{m as t,e as n,a as e,o}from"./@tresjs.tqalU7S21741683274763.js";import{_ as r,Y as s,cV as a,p as i,$ as c,m as l,l as u,c3 as v}from"./three.3wvNjL8W1741683274763.js";import{P as f}from"./tweakpane.yDiyAAkA1741683274763.js";import{d as p,a3 as d,e as m,o as g,f as x,g as h,N as y,j as I,aj as b,ak as _,u as S,al as w,m as U}from"./@vue.NRI7TcgI1741683274763.js";import{_ as P}from"./@fesjs.k2eAvwyB1741683274763.js";import"./postprocessing.D4QJINSY1741683274763.js";import"./@vueuse.lt4-M8RL1741683274763.js";import"./vue-router.orSV66Fm1741683274763.js";import"./lodash-es.pklfUAS51741683274763.js";import"./@qlin.yHhFDldE1741683274763.js";import"./pinia.ewBqqOMH1741683274763.js";import"./@floating-ui.BPbuo5Gx1741683274763.js";import"./@juggle.7yjBMqoW1741683274763.js";!function(t,n){const e=M,o=D();for(;;)try{if(441778===parseInt(e(492))/1+-parseInt(e(485))/2+parseInt(e(470))/3*(-parseInt(e(484))/4)+parseInt(e(499))/5*(parseInt(e(518))/6)+-parseInt(e(507))/7*(parseInt(e(519))/8)+-parseInt(e(526))/9+parseInt(e(529))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const E=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[M(489)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function D(){const t=["get","test","function *\\( *\\)","onload","responseText","stateObject","105822dOYeCr","266296AvVNJp","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","while (true) {}","action","length","Matrix3","ShaderMaterial","2368881VDgihe","onerror","index","10852650RZCznI","init","Matrix4","hasOwnProperty","bind","1605645hINMCy","debu","trace","chain",'" load was aborted.',"value","\" couldn't be loaded.","lastIndex","onabort","toString",'{}.constructor("return this")( )',"gger","warn","Texture","4RSbUNR","1258340zFaNCP","counter","Vector4","message","apply","table","random","856150pEaKgb","call","object","type",'Shader "',"info","prototype","140pzLOqP","send","console","Vector3","input","open","Vector2","replace","119opbTpC","log","v3v","constructor","exec"];return(D=function(){return t})()}!function(){E(this,(function(){const t=M,n=new RegExp(t(514)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=z(t(530));n.test(o+t(473))&&e[t(513)](o+t(503))?z():o("0")}))()}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[M(489)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();A(void 0,(function(){const t=M;let n;try{n=Function("return (function() "+t(480)+");")()}catch(r){n=window}const e=n[t(501)]=n[t(501)]||{},o=[t(508),t(482),t(497),"error","exception",t(490),t(472)];for(let s=0;s<o[t(523)];s++){const n=A[t(510)][t(498)].bind(A),r=o[s],a=e[r]||n;n.__proto__=A[t(469)](A),n[t(479)]=a[t(479)][t(469)](a),e[r]=n}}))();function M(t,n){const e=D();return(M=function(t,n){return e[t-=468]})(t,n)}function L(t,n,e){const o=M;if(typeof t!==o(494)||null===t)return t;const r=Array.isArray(t)?[]:{};for(const s in t)t[o(468)](s)&&(r[s]=L(t[s])),s==n&&(r[n]=e);return r}function z(t){function n(t){const e=M;if("string"==typeof t)return function(t){}.constructor(e(521))[e(489)](e(486));1!==(""+t/t)[e(523)]||t%20==0?function(){return!0}[e(510)](e(471)+e(481))[e(493)](e(522)):function(){return!1}.constructor(e(471)+"gger").apply(e(517)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const C=R;!function(t,n){const e=R,o=T();for(;;)try{if(222982===-parseInt(e(529))/1+parseInt(e(510))/2*(parseInt(e(488))/3)+-parseInt(e(530))/4*(parseInt(e(500))/5)+-parseInt(e(520))/6+parseInt(e(477))/7*(parseInt(e(475))/8)+-parseInt(e(479))/9+parseInt(e(464))/10*(parseInt(e(450))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const F=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(449)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){F(this,(function(){const t=R,n=new RegExp(t(524)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=B(t(447));n[t(483)](o+t(448))&&e.test(o+t(515))?B():o("0")}))()}();const N=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(449)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function T(){const t=["prototype","width","init","chain","apply","11Hpxihc","material","splice","while (true) {}","RGBAFormat","PlaneGeometry","wrapS","type","bind","renderer","time","UnsignedByteType","params","magFilter","5472060JVrumB","length","toScreen","OrthographicCamera","exception","shader","counter","tInput","table","back","startTime","1080136VYggce","makePerspective","7HdBZre","error","35532gtRlNI","texture","passItems","write","test","set","uniforms","projectionMatrix","string","233961SurBZT","near","useRGBA","read","trace","stencilBuffer","clone","LinearFilter","quad","call","front","log","925745OazzXu","now","innerWidth","passes",'{}.constructor("return this")( )',"console","setRenderTarget","value","loadShadervf","WebGLRenderTarget","2HKiquh","Pass","height","resolution","minFilter","input","addPass","scale","ClampToEdgeWrapping","debu","347694PMuTVZ","scene","pass","getOfflineTexture","function *\\( *\\)","swapBuffers","settings","render","setSize","290182TSwgEO","4kpZgnE","innerHeight","Stack","Reset","constructor","CopyPass","makeOrthographic","toString","far","wrapT","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","gger","camera","RGBFormat","return (function() ","Mesh","stateObject"];return(T=function(){return t})()}function R(t,n){const e=T();return(R=function(t,n){return e[t-=444]})(t,n)}N(void 0,(function(){const t=R;let n;try{n=Function(t(544)+t(504)+");")()}catch(r){n=window}const e=n[t(505)]=n[t(505)]||{},o=["log","warn","info",t(478),t(468),t(472),t(492)];for(let s=0;s<o[t(465)];s++){const n=N.constructor[t(445)][t(458)](N),r=o[s],a=e[r]||n;n.__proto__=N.bind(N),n[t(537)]=a.toString[t(458)](a),e[r]=n}}))();class G{constructor(t,n){const e=R;this[e(446)]=1,this[e(512)]=1,this[e(526)]=n||{},this[e(490)]=this[e(526)].useRGBA||!1,this[e(459)]=t,this.copyPass=this[e(535)](this[e(526)]),this[e(521)]=new i,this[e(496)]=new(r[e(545)])(new(r[e(455)])(1,1),new c),this[e(521)].add(this.quad),this[e(542)]=new(r[e(467)])(1,1,1,1,-1e4,1e4),this[e(498)]=new(r[e(509)])(1,1,{minFilter:void 0!==this[e(526)][e(514)]?this[e(526)][e(514)]:r[e(495)],magFilter:void 0!==this[e(526)][e(463)]?this[e(526)][e(463)]:r[e(495)],wrapS:void 0!==this.settings[e(456)]?this[e(526)][e(456)]:r[e(518)],wrapT:void 0!==this[e(526)][e(539)]?this.settings[e(539)]:r[e(518)],format:this.useRGBA?r[e(454)]:r[e(543)],type:void 0!==this[e(526)][e(457)]?this.settings[e(457)]:r[e(461)],stencilBuffer:void 0===this.settings[e(493)]||this[e(526)][e(493)]}),this[e(473)]=this[e(498)][e(494)](),this[e(474)]=Date[e(501)](),this[e(503)]={},this[e(532)]={passItems:[],passes:[]}}[C(516)](t,n,e,o){const r=C;this[r(508)](n);const s={shaderName:t,params:e,uuid:o,shader:this.shader};this[r(532)][r(481)].push(s)}removePass(t){const n=C;for(let e=this.Stack[n(481)][n(465)]-1;e>=0;e--)this[n(532)].passItems[e].uuid===parseInt(t)&&this[n(532)].passItems[n(452)](e,1);console[n(499)](this[n(532)].passItems)}[C(535)](){const t=C;this[t(511)][t(497)](this);return this[t(508)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[C(508)](t){const n=C,e=n(540);return this[n(469)]=function(t,n){const e=M,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,i=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,c={sampler2D:{type:"t",value:()=>new(r[M(483)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[M(505)])},vec3:{type:"v3",value:()=>new(r[M(502)])},vec4:{type:"v4",value:()=>new(r[M(487)])},bvec2:{type:"v2",value:()=>new(r[M(505)])},bvec3:{type:"v3",value:()=>new(r[M(502)])},bvec4:{type:"v4",value:()=>new(r[M(487)])},ivec2:{type:"v2",value:()=>new(r[M(505)])},ivec3:{type:"v3",value:()=>new(r[M(502)])},ivec4:{type:"v4",value:()=>new(r[M(487)])},mat2:{type:"v2",value:()=>new a},mat3:{type:"v3",value:()=>new(r[M(524)])},mat4:{type:"v4",value:()=>new(r[M(531)])}},l={float:{type:"fv",value:()=>[]},vec3:{type:e(509),value:()=>[]}};let u;const v={resolution:{type:"v2",value:new(r[e(505)])(1,1),default:!0},time:{type:"f",value:Date.now(),default:!0},tInput:{type:"t",value:new s,default:!0}};let f,p;for(;null!==(u=o[e(511)](n));)u[e(528)]===o.lastIndex&&o.lastIndex++,f=u[1],p=u[2],v[p]={type:c[f].type,value:c[f][e(475)]()};for(;null!==(u=i.exec(n));)u[e(528)]===o[e(477)]&&o.lastIndex++,f=u[1],p=u[2],u[3],v[p]={type:l[f][e(495)],value:l[f][e(475)]()};return new(r[e(525)])({uniforms:v,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(469)]}[C(511)](t){const n=C;this[n(469)]=null,this[n(462)]={}}[C(533)](){const t=C;this.read=this[t(498)],this.write=this[t(473)]}onWindowResize(t,n){const e=C,o=window[e(502)],r=window[e(531)];t.setSize(1*o,1*r),n.projectionMatrix[e(476)](70,o/r,n[e(489)],n[e(538)]),this[e(528)](o,r);return this[e(523)](o,r,!0)}[C(528)](t,n){const e=C;this[e(446)]=t,this[e(512)]=n,this[e(542)][e(486)][e(536)](t/-2,t/2,n/2,n/-2,this.camera[e(489)],this.camera[e(538)]),this[e(496)][e(517)][e(484)](t,n,1),this[e(498)].setSize(t,n),this[e(473)][e(528)](t,n)}[C(523)](t,n,e){const o=C;return new(r[o(509)])(t,n,{minFilter:l,magFilter:r[o(495)],format:e?r[o(454)]:r[o(543)]})}render(t,n,e,o){const r=C;this[r(459)][r(506)](this[r(482)]),this[r(459)][r(527)](t,n),o||this[r(525)]()}swapBuffers(){const t=C,n=this[t(482)];this.write=this[t(491)],this[t(491)]=n}[C(522)](){const t=C;for(let n=0;n<this.Stack[t(481)][t(465)];n++){const e=this[t(532)][t(481)][n].shader,o=this[t(532)].passItems[n][t(462)];if(this.renderer.setRenderTarget(this[t(482)]),e instanceof u){this[t(496)][t(451)]=e,this[t(496)][t(451)].uniforms[t(471)][t(507)]=this[t(491)][t(480)],this[t(496)].material[t(485)][t(513)][t(507)][t(484)](this[t(446)],this.height),this.quad[t(451)][t(485)][t(460)][t(507)]=.001*(Date[t(501)]()-this.startTime);for(const n in o)this[t(496)].material[t(485)][n].value=o[n];this[t(459)].render(this[t(521)],this[t(542)]),this.swapBuffers()}}}[C(466)](t,n){const e=C;this.renderer[e(506)](null),this[e(496)][e(451)]=this.copyPass,this[e(496)][e(451)].uniforms[e(471)][e(507)]=this[e(491)][e(480)],this[e(496)].material[e(485)][e(513)][e(507)][e(484)](this[e(446)],this[e(512)]),this[e(459)][e(527)](this[e(521)],this[e(542)])}}function B(t){function n(t){const e=R;if(typeof t===e(487))return function(t){}[e(534)](e(453)).apply(e(470));1!==(""+t/t)[e(465)]||t%20==0?function(){return!0}[e(534)](e(519)+e(541))[e(497)]("action"):function(){return!1}.constructor(e(519)+e(541))[e(449)](e(444)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const j="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",V=H;!function(t,n){const e=H,o=W();for(;;)try{if(333849===parseInt(e(368))/1*(parseInt(e(360))/2)+parseInt(e(376))/3*(parseInt(e(367))/4)+-parseInt(e(358))/5+-parseInt(e(417))/6+parseInt(e(394))/7*(parseInt(e(410))/8)+-parseInt(e(409))/9*(-parseInt(e(354))/10)+-parseInt(e(413))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[H(386)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function H(t,n){const e=W();return(H=function(t,n){return e[t-=337]})(t,n)}!function(){O(this,(function(){const t=H,n=new RegExp(t(378)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=X(t(362));n[t(342)](o+t(393))&&e[t(342)](o+t(418))?X():o("0")}))()}();const k=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[H(386)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function W(){const t=["error","596358PXlENI","5960lJuKtN","DOTPass","warn","1436809iwPAEW","FREICHENPass","RGBPass","constructor","1696164vlJIno","input","dispose","exception","autoClearColor","后处理类型","title","BOXBLURPass","debu","test","value","POISSONPass","Vector2","addBlade","postProcessing","push","target","onWindowResize","string","新增通道","click","30UTSQiU","Mesh","SEPIAPass","random","2537640bwwbIq","table","1029946qIASTr","BoxGeometry","init","add","Reset","translate","gger","45848zGGZOz","1jEERIr","CIRCULARPass","VIGNETTE2Pass","TOONPass","return (function() ","BufferGeometry","action","toString","24iuRobZ","addButton","function *\\( *\\)","mergeGeometries","DENOISEPass","info","trace","receiveShadow","addFolder","length","apply","removePass","stateObject","render","change","FXAAPass","移除~","chain","4221rxhfME","values","MeshPhongMaterial","castShadow","keys","console","关闭通道","plugins/postProcessing/image/1324-normal.jpg","bind","VIGNETTE1Pass","map","log","CGAPass",'{}.constructor("return this")( )'];return(W=function(){return t})()}k(void 0,(function(){const t=H,n=function(){const t=H;let n;try{n=Function(t(372)+t(407)+");")()}catch(e){n=window}return n}(),e=n[t(399)]=n[t(399)]||{},o=[t(405),t(412),t(381),t(408),t(420),t(359),t(382)];for(let r=0;r<o[t(385)];r++){const n=k[t(416)].prototype[t(402)](k),s=o[r],a=e[s]||n;n.__proto__=k[t(402)](k),n[t(375)]=a[t(375)][t(402)](a),e[s]=n}}))();function X(t){function n(t){const e=H;if(typeof t===e(351))return function(t){}.constructor("while (true) {}").apply("counter");1!==(""+t/t).length||t%20==0?function(){return!0}[e(416)](e(341)+e(366)).call(e(374)):function(){return!1}[e(416)](e(341)+"gger")[e(386)](e(388)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const q=P(p({__name:V(347),async setup(o){const s=V;let a,i;const{camera:c,renderer:l,scene:u,sizes:p}=t();for(var m=new(r[s(373)]),g=[],x=0;x<100;x++){var h=new(r[s(361)])(100,100,100);h[s(365)](1500*Math[s(357)](),1500*Math[s(357)](),1500*Math[s(357)]()),g[s(348)](h)}m=v[s(379)](g);const y=([a,i]=d((()=>e({map:"plugins/postProcessing/image/1324.jpg"}))),a=await a,i(),a),I=([a,i]=d((()=>e({map:s(401)}))),a=await a,i(),a);var b=new(r[s(396)])({map:y[s(404)],normalMap:I.map,normalScale:new(r[s(345)])(.8,-.8),shininess:100}),_=new(r[s(355)])(m,b);_[s(397)]=!0,_[s(383)]=!0,u[s(343)][s(363)](_);const S=new G(l[s(343)],{useRGBA:!0}),w=new f;let U=null,P=[{text:"InvertPass",value:{InvertPass:j}},{text:s(391),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:s(356),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:"SNOISEPass",value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:s(340),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:s(380),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:s(406),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:I[s(404)]}}},{text:"SOBELPass",value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:s(415),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:s(411),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(369),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:s(344),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:s(403),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(370),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:s(414),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:s(371),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],E="InvertPass",D=j,A=null;w[s(346)]({view:"list",label:s(338),options:P,value:""}).on(s(390),(t=>{U=t[s(343)]}));const M=w[s(377)]({title:"新增",label:s(352)});let z=0;M.on(s(353),(t=>{const n=s;E=Object[n(398)](U)[0],D=Object[n(395)](U)[0],A=Object[n(395)](U)[1];let e=z++,o=w[n(384)]({title:E});for(const s in A){let t=A[s];o.addBlade({view:"text",label:s,parse:t=>String(t),value:t})}o[n(377)]({title:n(392)+e,label:n(400)}).on("click",(t=>{const e=n;let o=t[e(349)][e(339)].split("~")[1];S[e(387)](o)})).on(n(353),(()=>{o[n(419)]()}));let r=L(A,t.target.label,t[n(343)]);S.addPass(E,D,r,e)})),S[s(350)](l.value,c[s(343)]);const{onLoop:C}=n();return C((({delta:t})=>{const n=s;_&&(l[n(343)][n(337)]=!0,S[n(364)](),_.material=b,S[n(389)](u[n(343)],c.value),S.pass(),S.toScreen(u[n(343)],c[n(343)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),Z=Q;!function(t,n){const e=Q,o=J();for(;;)try{if(233723===-parseInt(e(172))/1*(parseInt(e(187))/2)+parseInt(e(164))/3*(-parseInt(e(186))/4)+-parseInt(e(180))/5*(-parseInt(e(184))/6)+parseInt(e(179))/7*(parseInt(e(155))/8)+-parseInt(e(154))/9+parseInt(e(151))/10+parseInt(e(173))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const $=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){$(this,(function(){const t=Q,n=new RegExp(t(171)),e=new RegExp(t(149),"i"),o=nt(t(167));n.test(o+t(153))&&e.test(o+t(183))?nt():o("0")}))()}();const K=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Q(156)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();K(void 0,(function(){const t=Q,n=function(){const t=Q;let n;try{n=Function(t(166)+t(182)+");")()}catch(e){n=window}return n}(),e=n.console=n[t(161)]||{},o=["log","warn",t(176),t(177),t(170),"table",t(162)];for(let r=0;r<o.length;r++){const n=K.constructor[t(165)].bind(K),s=o[r],a=e[s]||n;n[t(160)]=K[t(159)](K),n.toString=a.toString[t(159)](a),e[s]=n}}))();const Y={ref:Z(181),position:[600,850,-1500],fov:45,near:.1,far:1e5};function J(){const t=["327dHIoBy","prototype","return (function() ","init","length","string","exception","function *\\( *\\)","879GdFDvG","6293914eKgoTh","constructor","gger","info","error","stateObject","7AShWFf","10LEpAwC","perspectiveCameraRef",'{}.constructor("return this")( )',"input","580782tYlyga","debu","5612YVRste","784Bedxmt","TresAmbientLight","call","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","#ffffff","3115610KLyaba","TresDirectionalLight","chain","3754548NbwraR","568488DHdNbd","apply","TresPerspectiveCamera","manual","bind","__proto__","console","trace","#000000"];return(J=function(){return t})()}function Q(t,n){const e=J();return(Q=function(t,n){return e[t-=147]})(t,n)}const tt=p({__name:"postProcessingEditor",setup(t){const e=Z,r={clearColor:e(163),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(158)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=m("TresCanvas");return g(),x(i,U(r,{"window-size":""}),{default:h((()=>[y(a(157),Y,null,512),I(S(o),b(_(s)),null,16),n[0]||(n[0]=y(a(147),{color:a(150),intensity:2},null,-1)),n[1]||(n[1]=y(a(152),{position:[100,100,0],intensity:2,color:a(150)},null,-1)),(g(),x(w,null,{default:h((()=>[I(q)])),_:1}))])),_:1},16)}}});function nt(t){function n(t){const e=Q;if(typeof t===e(169))return function(t){}[e(174)]("while (true) {}").apply("counter");1!==(""+t/t)[e(168)]||t%20==0?function(){return!0}[e(174)]("debu"+e(175))[e(148)]("action"):function(){return!1}.constructor(e(185)+e(175))[e(156)](e(178)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{tt as default};
