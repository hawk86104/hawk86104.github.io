import{u as t,m as o,_ as e}from"./mergeTres.CxQhGqGH1761276103973.js";import{l as n}from"./utils.CI7v9zAv1761276103973.js";import{_ as r}from"./@tresjs.B_KjVy0E1761276103973.js";import{d as a,r as l,a3 as i,G as s,o as c,F as u,W as v,I as f,m,g as d,h as g,e as p,b as _,ap as h}from"./@vue.CKlgtJke1761276103973.js";import{_ as C}from"./@fesjs.DnM7nINA1761276103973.js";import"./@amap.fjyZdsU91761276103973.js";import"./pinia.C8YT0eOZ1761276103973.js";import"./three.Bhn4-0ry1761276103973.js";import"./vanilla.esm.5.5.0.CRlEbOMK1761276103973.js";import"./object-hash.1qNYTrnD1761276103973.js";import"./jszip.y_yjJ09m1761276103973.js";import"./Resource.CSaxGSPI1761276103973.js";import"./useTexture.B3KXI5F11761276103973.js";import"./three-mesh-bvh.BX5J_Zhe1761276103973.js";import"./postprocessing.CeTFUAN_1761276103973.js";import"./@vueuse.wtfleElW1761276103973.js";import"./vue-router.BFHj2xRz1761276103973.js";import"./lodash-es.DWe8oqPO1761276103973.js";import"./@qlin.y-0Z8WnK1761276103973.js";import"./@babel.BPq7uOAK1761276103973.js";import"./@floating-ui.Bhq4ibgf1761276103973.js";import"./@juggle.Vc7cP4_P1761276103973.js";const x=["position","faceUv","normal"],y=a({__name:"buildingModels",setup(o){const e=t(),a=t=>{for(let o=0;o<t.length;o+=3){const n=[t[o],t[o+1]],r=e.mapHandle.customCoords.lngLatToCoord(n);t[o]=r[0],t[o+1]=r[1],t[o+2]=.2*t[o+2]}},d=l([]),g={uniforms:{u_opacity:{value:1},u_time:{value:.45},u_color:{value:[.02,.15,.5,1]},u_zoom:{value:1},u_brightColor:{value:[1,1,1,1]},u_windowColor:{value:[.07,.07,.03,1]},u_near:{value:1},u_far:{value:1e3}},vertexShader:"precision highp float;\n#define ambientRatio .5\n#define diffuseRatio .4\n#define specularRatio .1\n\nattribute vec2 faceUv;\nuniform vec4 u_color;\nvarying vec2 v_texCoord;\nvarying vec4 v_color;\nvarying float v_lightWeight;\n\nvoid main(){\n\t\n\tmat4 matModelViewProjection=projectionMatrix*modelViewMatrix;\n\t\n\tv_texCoord=faceUv;\n\t\n\tif(normal==vec3(0.,0.,1.)){\n\t\tv_color=u_color;\n\t\tgl_Position=matModelViewProjection*vec4(position,1.);\n\t\treturn;\n\t}\n\t\n\tvec3 worldPos=vec3(vec4(position,1.)*modelMatrix);\n\tvec3 worldNormal=vec3(vec4(normal,1.)*modelMatrix);\n\t\n\tvec3 viewDir=normalize(cameraPosition-worldPos);\n\t\n\tvec3 lightDir=normalize(vec3(0.,-10.,1.));\n\tvec3 halfDir=normalize(viewDir+lightDir);\n\t\n\tfloat lambert=dot(worldNormal,lightDir);\n\t\n\tfloat specular=pow(max(0.,dot(worldNormal,halfDir)),32.);\n\t\n\tfloat lightWeight=ambientRatio+diffuseRatio*lambert+specularRatio*specular;\n\tv_texCoord=faceUv;\n\tv_lightWeight=lightWeight;\n\t\n\t\n\t\n\t\n\t\n\tv_color=vec4(u_color.rgb*v_lightWeight,u_color.w);\n\t\n\tgl_Position=matModelViewProjection*vec4(position,1.);\n}",fragmentShader:"precision highp float;\nuniform float u_opacity;\nuniform vec4 u_baseColor;\nuniform vec4 u_color;\nuniform vec4 u_brightColor;\nuniform vec4 u_windowColor;\n\nuniform float u_zoom;\nuniform float u_time;\nuniform float u_near;\nuniform float u_far;\nvarying vec2 v_texCoord;\nvarying vec4 v_color;\nvarying float v_lightWeight;\n\nvec3 getWindowColor(float n,float hot,vec3 brightColor,vec3 darkColor){\n\tfloat s=step(hot,n);\n\tvec3 color=mix(brightColor,vec3(1.,1.,1.),n);\n\treturn mix(darkColor,color,s);\n}\n\nfloat random(vec2 st){\n\treturn fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123);\n}\n\nfloat LinearizeDepth()\n{\n\tfloat z=gl_FragCoord.z*2.-1.;\n\treturn(2.*u_near*u_far)/(u_far+u_near-z*(u_far-u_near));\n}\n\nvec3 fog(vec3 color,vec3 fogColor,float depth){\n\tfloat fogFactor=clamp(depth,0.,1.);\n\tvec3 output_color=mix(fogColor,color,fogFactor);\n\treturn output_color;\n}\n\nfloat sdRect(vec2 p,vec2 sz){\n\tvec2 d=abs(p)-sz;\n\tfloat outside=length(max(d,0.));\n\tfloat inside=min(max(d.x,d.y),0.);\n\treturn outside+inside;\n}\n\nvoid main(){\n\tif(v_color.w==0.){\n\t\tdiscard;\n\t\treturn;\n\t}\n\tvec3 baseColor=u_color.xyz;\n\tvec3 brightColor=u_brightColor.xyz;\n\tvec3 windowColor=u_windowColor.xyz;\n\tfloat targetColId=5.;\n\tfloat depth=1.-LinearizeDepth()/u_far*u_zoom;\n\tvec3 fogColor=vec3(23./255.,31./255.,51./255.);\n\t\n\tif(v_texCoord.x<0.){\n\t\tvec3 foggedColor=fog(baseColor.xyz+vec3(.12*.9,.2*.9,.3*.9),fogColor,depth);\n\t\tgl_FragColor=vec4(foggedColor,v_color.w*u_opacity);\n\t}else{\n\t\t\n\t\tif(u_zoom<14.){\n\t\t\tgl_FragColor=v_color;\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif(v_texCoord.x<.01||v_texCoord.x>.99||v_texCoord.y<.01){\n\t\t\tgl_FragColor=vec4(1.,.7,.25,.5);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tvec2 st=v_texCoord;\n\t\tvec2 UvScale=v_texCoord;\n\t\tvec2 tStep=vec2(.05,.125);\n\t\tvec2 tStart=vec2(tStep.x*.25,tStep.y*.25);\n\t\tvec2 tEnd=vec2(tStep.x*.75,tStep.y*.75);\n\t\t\n\t\tfloat u=mod(UvScale.x,tStep.x);\n\t\tfloat v=mod(UvScale.y,tStep.y);\n\t\tfloat ux=floor(UvScale.x/tStep.x);\n\t\tfloat uy=floor(UvScale.y/tStep.y);\n\t\tfloat n=random(vec2(ux,uy));\n\t\tfloat lightP=u_time;\n\t\tfloat head=1.-step(.005,st.y);\n\t\t\n\t\t\n\t\tfloat sU=step(tStart.x,u)-step(tEnd.x,u);\n\t\tfloat sV=step(tStart.y,v)-step(tEnd.y,v);\n\t\tvec2 windowSize=vec2(abs(tEnd.x-tStart.x),abs(tEnd.y-tStart.y));\n\t\tfloat dist=sdRect(vec2(u,v),windowSize);\n\t\tfloat s=sU*sV;\n\t\t\n\t\tfloat curColId=ux;\n\t\tfloat sCol=step(targetColId-.2,curColId)-step(targetColId+.2,curColId);\n\t\t\n\t\tfloat mLightP=mod(lightP,2.);\n\t\tfloat sRow=step(mLightP-.2,st.y)-step(mLightP,st.y);\n\t\tif(ux==targetColId){\n\t\t\tn=0.;\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tvec3 color=mix(baseColor,getWindowColor(n,u_time,brightColor,windowColor),s);\n\t\t\n\t\tfloat sFinal=s*sCol*sRow;\n\t\tcolor+=mix(baseColor,brightColor,sFinal*n);\n\t\t\n\t\tif(head==1.){\n\t\t\tcolor=brightColor;\n\t\t}\n\t\tcolor=color*v_lightWeight;\n\t\t\n\t\tvec3 foggedColor=fog(color,fogColor,depth);\n\t\t\n\t\tgl_FragColor=vec4(foggedColor,1.);\n\t}\n\t\n}"};i(()=>{e.cameraState&&(async()=>{const t=await n("https://opensource.cdn.icegl.cn/json/AMapGIS/latlngbuildings.geojson","buildings");for(let o=0;o<t.length;o++){const e=t[o];a(e.geometry);const n=new Float32Array(e.geometry),r=new Float32Array(e.faceUv),l=new Float32Array(e.geometry.length);d.push({positionArray:n,uvArray:r,normalArray:l})}})()});const{onRender:p}=r();return p(()=>{e.cameraState&&(g.uniforms.u_zoom.value=e.mapHandle.getZoom(),g.uniforms.u_near.value=e.cameraState.near,g.uniforms.u_far.value=e.cameraState.far)}),(t,o)=>(c(),s("TresGroup",null,[(c(!0),s(u,null,v(d,(t,o)=>(c(),s("TresMesh",{key:`${o}`},[f("TresBufferGeometry",{ref_for:!0,ref:"tbgRef",position:[t.positionArray,3],faceUv:[t.uvArray,2],normal:[t.normalArray,3]},null,8,x),f("TresShaderMaterial",m({ref_for:!0},g),null,16)]))),128))]))}}),w=C(a({__name:"buildings",setup(t){const n=[121.407867,31.157717],r=l({alpha:!0,antialias:!0,clearAlpha:0,renderMode:"manual"});return(t,a)=>{const l=d("TresCanvas");return c(),s(u,null,[g(o,{center:n,zoom:19,pitch:65.59312320916906,mapStyle:"darkblue"}),g(l,m({id:"tresCanvas",ref:"tcRef"},r),{default:p(()=>[a[0]||(a[0]=f("TresPerspectiveCamera",{fov:60,near:.1,far:2e3},null,-1)),a[1]||(a[1]=f("TresAmbientLight",{intensity:.5},null,-1)),g(e,{center:n}),(c(),_(h,null,{default:p(()=>[g(y)]),_:1}))]),_:1},16)],64)}}}),[["__scopeId","data-v-2ac5f9dc"]]);export{w as default};
