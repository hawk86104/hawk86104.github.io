import{e,m as a,a as s,o as i,E as n}from"./@tresjs.zc7faK4J1743660816268.js";import{P as o}from"./tweakpane.ivGeiIdz1743660816268.js";import{L as r}from"./three-subdivide.X5t-hWr_1743660816268.js";import{d as l,b as t,a2 as d,w as u,o as c,H as m,N as p,aj as f,ak as v,a4 as g,r as h,e as y,f as M,g as b,m as w,j as T,u as B,M as j}from"./@vue.B5PFBfKs1743660816268.js";import{a2 as x,a$ as _,C as S,b as k,a5 as C,ab as N,ct as V}from"./three.2wx8FU0g1743660816268.js";import"./postprocessing.ApTwx-211743660816268.js";import"./@vueuse.jtbb8I7w1743660816268.js";const z=["scale"],A=l({__name:"shineShader",props:{srcMesh:{},scale:{default:1.2},color:{default:"#ffff00"},subdivision:{type:Boolean,default:!0},c:{default:1.1},p:{default:1.4},side:{default:x},blending:{default:_}},setup(s){const i=s,n=t(),o={uniforms:{c:{type:"f",value:i.c},p:{type:"f",value:i.p},glowColor:{type:"c",value:new S(i.color)},viewVector:{type:"v3",value:{x:0,y:0,z:0}}},vertexShader:"\n          uniform vec3 viewVector;\n          uniform float c;\n          uniform float p;\n          varying float intensity;\n          void main() {\n            vec3 vNormal = normalize( normalMatrix * normal);\n            vec3 vNormel = normalize( normalMatrix * viewVector);\n            intensity = pow( c - dot(vNormal, vNormel), p );\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0);\n          }\n            ",fragmentShader:"\n          uniform vec3 glowColor;\n          varying float intensity;\n          void main() \n          {\n          \tvec3 glow = glowColor * intensity;\n\t\t\t\t\t\tif(intensity < 1.0){\n            \tgl_FragColor = vec4( glow, 1.0 );\n\t\t\t\t\t\t}\n          }\n        ",side:i.side,transparent:!0,depthWrite:!1,depthTest:!0,blending:i.blending};d((()=>{if(i.srcMesh&&n.value&&!n.value.geometry.attributes.position){let e=i.srcMesh.geometry.clone();i.subdivision&&(e=r.modify(e,2)),n.value.geometry=e,n.value.position.copy(i.srcMesh.position)}i.color&&(o.uniforms.glowColor.value=new S(i.color)),i.c&&(o.uniforms.c.value=i.c),i.p&&(o.uniforms.p.value=i.p)})),u((()=>i.subdivision),(e=>{let a=i.srcMesh.geometry.clone();e&&(a=r.modify(a,2)),n.value.geometry=a})),u((()=>i.side),(e=>{n.value.material.side=e})),u((()=>i.blending),(e=>{n.value.material.blending=e}));const{onLoop:l}=e(),{camera:g}=a();return l((()=>{g.value&&n.value&&(o.uniforms.viewVector.value=(new k).subVectors(g.value.position,n.value.position))})),(e,a)=>(c(),m("TresMesh",{ref_key:"TSGref",ref:n,scale:i.scale},[p("TresShaderMaterial",f(v(o)),null,16)],8,z))}}),G=["map"],L=["map"],P=l({__name:"shader",async setup(e){let a,r;const l={clearColor:"#222"},d=t(),u=t(),m=t(),f=([a,r]=g((()=>s(["./plugins/earthSample/image/earthA/earth.jpg","logo.png"]))),a=await a,r(),a),v=h({scale:1.6,color:"#00dfff",subdivision:!0,c:1.1,p:1.4,side:x,blending:_}),S=new o({title:"参数",expanded:!0});return S.addBinding(v,"color",{label:"颜色"}),S.addBinding(v,"scale",{label:"大小",min:1,max:3,step:.2}),S.addBinding(v,"subdivision",{label:"边缘处理"}),S.addBinding(v,"c",{label:"c",min:0,max:2,step:.1}),S.addBinding(v,"p",{label:"p",min:0,max:8,step:.2}),S.addBinding(v,"side",{options:{FrontSide:x,BackSide:C,DoubleSide:N}}),S.addBinding(v,"blending",{options:{AdditiveBlending:_,NormalBlending:V}}),(e,a)=>{const s=y("TresCanvas");return c(),M(s,w(l,{"window-size":""}),{default:b((()=>[a[2]||(a[2]=p("TresPerspectiveCamera",{position:[5,5,5]},null,-1)),a[3]||(a[3]=p("TresAmbientLight",{intensity:1},null,-1)),T(B(i)),a[4]||(a[4]=p("TresGridHelper",{args:[10,10]},null,-1)),p("TresMesh",{ref_key:"TresMeshRefA",ref:d,position:[-2,1,0]},[a[0]||(a[0]=p("TresSphereGeometry",{args:[1,32,16]},null,-1)),p("TresMeshBasicMaterial",{map:B(f)[0]},null,8,G)],512),T(A,w({srcMesh:d.value},v),null,16,["srcMesh"]),T(B(n),{ref_key:"TreBoxRef",ref:m,args:[1,1,1],position:[2,1,0]},{default:b((()=>[p("TresMeshBasicMaterial",{map:B(f)[1]},null,8,L)])),_:1},512),m.value&&m.value.instance?(c(),M(A,w({key:0,srcMesh:m.value.instance},v),null,16,["srcMesh"])):j("",!0),p("TresMesh",{ref_key:"TresMeshRefB",ref:u,position:[0,1,-2]},a[1]||(a[1]=[p("TresBoxGeometry",{args:[1,1,1,1,1]},null,-1),p("TresMeshBasicMaterial",{color:"#0ff"},null,-1)]),512),T(A,w({srcMesh:u.value},v),null,16,["srcMesh"])])),_:1},16)}}});export{P as default};
