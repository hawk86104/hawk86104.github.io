import{l as t}from"./utils.hCNJKCXi1752136696158.js";import{d as e,a3 as a,G as r,o as s,I as i,ak as n,al as o}from"./@vue.BInVSO3Q1752136696158.js";import{b6 as l,r as v,a4 as m}from"./three.BNH6wr6-1752136696158.js";const p=["args"],u=e({__name:"skyBoxBmesh",props:{texture:{},size:{default:1e3}},async setup(e){let u,c;const d=e,g=([u,c]=a((()=>t(d.texture))),u=await u,c(),u);g.wrapS=g.wrapT=l,g.generateMipmaps=!1,g.magFilter=v,g.minFilter=v;const x={uniforms:{uSkybox:{type:"t",value:g}},side:m,vertexShader:"\n\t\tvarying vec3 vFragPos;\n\n\t\tvoid main() {\n\t\t\t\tvFragPos = position.xyz;\n\t\t\t\tvec4 viewSpace = vec4(mat3(modelViewMatrix) * position, 0.0);\n\t\t\t\tviewSpace.w = 1.0;\n\t\t\t\tgl_Position = projectionMatrix * viewSpace;    \n\t\t}",fragmentShader:"\n\t\tuniform sampler2D uSkybox;\n\t\tvarying vec3 vFragPos;\n\t\tconst float PI = 3.14159265359;\n\t\tvoid main() {\n\t\t\t\tvec3 dir = normalize(vFragPos);\n\t\t\t\tfloat v = (asin(dir.y) + PI * 0.5) / (PI); \n\t\t\t\tfloat u = (atan(dir.x, dir.z) + PI) / (PI * 2.0);\n\t\t\t\tgl_FragColor = texture2D(uSkybox, vec2(u, v));\n\t\t}",depthWrite:!0};return(t,e)=>(s(),r("TresMesh",null,[i("TresBoxGeometry",{args:[d.size,d.size,d.size]},null,8,p),i("TresShaderMaterial",n(o(x)),null,16)]))}});export{u as _};
