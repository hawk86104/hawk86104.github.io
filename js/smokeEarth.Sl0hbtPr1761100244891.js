import{_ as t}from"./earth.vue_vue_type_script_setup_true_lang.Bgr6_nPv1761100244891.js";import{_ as e,K as a}from"./@tresjs.DqJWjmrH1761100244891.js";import{d as n,w as o,G as i,o as r,I as s,a9 as l,aa as u,r as v,g as m,b as p,e as c,h as d,u as h,ap as f}from"./@vue.CKlgtJke1761100244891.js";import{k as g}from"./three.DvmzhRS91761100244891.js";import{P as y}from"./tweakpane.CqZAnw7f1761100244891.js";import"./vanilla.esm.5.5.0.CsbunUBT1761100244891.js";import"./object-hash.zo7S6bgL1761100244891.js";import"./@amap.fjyZdsU91761100244891.js";import"./jszip.DTlig5CR1761100244891.js";import"./Resource.mX5inOAT1761100244891.js";import"./useTexture.6Wyv_tgl1761100244891.js";import"./postprocessing.CYU4Fj-U1761100244891.js";import"./@vueuse.mZcBai3M1761100244891.js";const j=["args"],S=n({__name:"smokeSphere",props:{color:{default:"#FFFFFF"},opacity:{default:1},speed:{default:1},phiLength:{default:2*Math.PI},thetaLength:{default:Math.PI}},setup(t){const a=t,n={uniforms:{iTime:{value:1},smokeStrengthScale:{value:1},uColor:{value:new g(a.color)},uOpacity:{value:a.opacity}},transparent:!0,vertexShader:"\n\t\t\t\t\t\t\t\tvarying vec2 vUv;\n\t\t\t\t\t\t\t\tvoid main(){\n\t\t\t\t\t\t\t\t\tvUv=uv;\n\t\t\t\t\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\t\t\t\t\t\t\t\t}",fragmentShader:"\n\t\tprecision highp float;\n\t\tvarying vec2 vUv;\n\t\tuniform float iTime;\n\t\tuniform float smokeStrengthScale;\n\t\tuniform vec3 uColor;\n\t\tuniform float uOpacity;\n\t\tfloat R21 (vec2 p) {\n\t\t\treturn fract(sin(dot(p.xy, vec2(2.3245,5.234)))*123.5632145);\n\t\t}\n\t\tfloat NoiseValue (vec2 uv) {\n\t\t\tvec2 gv = fract(uv);\n\t\t\tvec2 id = floor(uv);\n\t\t\tgv = gv * gv * (3. - 2. * gv);\n\t\t\tfloat a = R21(id);\n\t\t\tfloat b = R21(id + vec2(1., 0.));\n\t\t\tfloat c = R21(id + vec2(0., 1.));\n\t\t\tfloat d = R21(id + vec2(1., 1.));\n\t\t\n\t\t\treturn mix(a, b, gv.x) + (c - a)* gv.y * (1. - gv.x) + (d - b) * gv.x * gv.y;\n\t\t}\n\t\tfloat SmoothNoise (vec2 uv) {\n\t\t\n\t\t\tfloat value = 0.;\n\t\t\tfloat amplitude = .5;\n\t\t\n\t\t\tfor (int i = 0; i < 8; i++) {\n\t\t\t\tvalue += NoiseValue(uv) * amplitude;\n\t\t\t\tuv *= 2.;\n\t\t\t\tamplitude *= .5;\n\t\t\t}\n\t\t\t\n\t\t\treturn value;\n\t\t}\n\t\tvoid main() {\n\t\t\tvec2 uv = 1.0 - vUv;\n\t\t\tvec3 col = vec3(0.);\n\t\t\tvec3 smokeCol = uColor;\n\t\t\tvec2 rn = vec2(0.5, 0.5);\n\t\t\trn.x = SmoothNoise(uv + 1.984 * vec2(1.7,9.2)+ 0.158*iTime );\n\t\t\trn.y = SmoothNoise(uv + 1. * vec2(8.3,2.8)+ 0.126*iTime);\n\t\t\tfloat smokeStrength = smoothstep(0.0, 1.0, SmoothNoise(uv+rn*2.5));\n\t\t\tgl_FragColor = vec4(smokeCol, smokeStrength * smokeStrengthScale * uOpacity);\n\t\t}\n\t\t"};o(()=>[a.color,a.opacity],([t,e])=>{n.uniforms.uColor.value=new g(t),n.uniforms.uOpacity.value=e});const{onBeforeRender:v}=e();return v(({delta:t})=>{n.uniforms.iTime.value+=t*a.speed}),(t,e)=>(r(),i("TresMesh",null,[s("TresSphereGeometry",{args:[1,32,32,0,t.phiLength,0,t.thetaLength]},null,8,j),s("TresShaderMaterial",l(u(n)),null,16)]))}}),_=n({__name:"smokeEarth",setup(e){const n=v({color:"#00d5ff",opacity:.58,speed:1.8,scale:1.1,phiLength:2*Math.PI,thetaLength:Math.PI}),o=new y;return o.addBinding(n,"color",{label:"颜色"}),o.addBinding(n,"opacity",{label:"透明度",min:0,max:1,step:.01}),o.addBinding(n,"speed",{label:"速度",min:.1,max:5,step:.1}),o.addBinding(n,"scale",{label:"大小",min:1.01,max:2,step:.01}),o.addBinding(n,"phiLength",{label:"水平范围",min:0,max:2*Math.PI,step:.01}),o.addBinding(n,"thetaLength",{label:"垂直范围",min:0,max:Math.PI,step:.01}),(e,o)=>{const i=m("TresCanvas");return r(),p(i,{clearColor:"#201919","window-size":""},{default:c(()=>[o[0]||(o[0]=s("TresPerspectiveCamera",{position:[3,3,0],fov:45,near:.1,far:1e4},null,-1)),d(h(a),{enableDamping:""}),o[1]||(o[1]=s("TresAmbientLight",{intensity:3},null,-1)),(r(),p(f,null,{default:c(()=>[d(t)]),_:1})),(r(),p(f,null,{default:c(()=>[d(S,l(u(n)),null,16)]),_:1}))]),_:1})}}});export{_ as default};
