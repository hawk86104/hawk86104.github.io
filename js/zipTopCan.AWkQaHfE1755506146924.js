import"./@fesjs.C2lu9mFS1755506146924.js";import{m as e,e as n,k as o,a as t}from"./@tresjs.CForfKR51755506146924.js";import"./Resource.DB1gdvJn1755506146924.js";/* empty css                                                                             */import{_ as r}from"./randomLoading.vue_vue_type_script_setup_true_lang.pQ6GSxtA1755506146924.js";import"./three-mesh-ui.module.CydbqMpc1755506146924.js";/* empty css                                                              */import{_ as a}from"./component.vue_vue_type_script_setup_true_lang.C7jfOM-r1755506146924.js";import"./vanilla.esm.5.5.0.D3cZKJ2y1755506146924.js";import{g}from"./gsap.CEma2WSx1755506146924.js";import{d as s,G as i,o as l,I as c,u as v,a7 as u,a8 as m,aa as f,b as y,F as x,h as d,e as p,j as w,f as _,a5 as z}from"./@vue.BzMISRrV1755506146924.js";import{C as P,a as h,_ as b,Y as j}from"./three.QlBabAUP1755506146924.js";import"./vue-router.CzRfqPBI1755506146924.js";import"./lodash-es.C7pWAXPe1755506146924.js";import"./pinia.DqGDgOZq1755506146924.js";import"./@qlin.q6OWdsQV1755506146924.js";import"./@babel.BPq7uOAK1755506146924.js";import"./@floating-ui.BFjFSAYt1755506146924.js";import"./@juggle.CcBCnTIR1755506146924.js";import"./postprocessing.DgRA9vy91755506146924.js";import"./@vueuse.5rvnEVOS1755506146924.js";import"./starLoading.C61gBt-M1755506146924.js";import"./utils.DktsBZ2C1755506146924.js";import"./cssLoaders.LXZghG7F1755506146924.js";import"./bubbleLoading.DPpwrV-f1755506146924.js";import"./yangyangLoading.D0tS8arJ1755506146924.js";import"./three-stdlib.BAeYwoLK1755506146924.js";import"./object-hash.CwItjB931755506146924.js";import"./@amap.CGUF9xH41755506146924.js";import"./jszip.BZaBamqX1755506146924.js";const S="\n//\tClassic Perlin 3D Noise \n//\tby Stefan Gustavson\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec4 fade(vec4 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\nfloat cnoise(vec4 P){\n  ;\n  vec4 Pi0 = floor(P); // Integer part for indexing\n  vec4 Pi1 = Pi0 + 1.0; // Integer part + 1\n  Pi0 = mod(Pi0, 289.0);\n  Pi1 = mod(Pi1, 289.0);\n  vec4 Pf0 = fract(P); // Fractional part for interpolation\n  vec4 Pf1 = Pf0 - 1.0; // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = vec4(Pi0.zzzz);\n  vec4 iz1 = vec4(Pi1.zzzz);\n  vec4 iw0 = vec4(Pi0.wwww);\n  vec4 iw1 = vec4(Pi1.wwww);\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n  vec4 ixy00 = permute(ixy0 + iw0);\n  vec4 ixy01 = permute(ixy0 + iw1);\n  vec4 ixy10 = permute(ixy1 + iw0);\n  vec4 ixy11 = permute(ixy1 + iw1);\n\n  vec4 gx00 = ixy00 / 7.0;\n  vec4 gy00 = floor(gx00) / 7.0;\n  vec4 gz00 = floor(gy00) / 6.0;\n  gx00 = fract(gx00) - 0.5;\n  gy00 = fract(gy00) - 0.5;\n  gz00 = fract(gz00) - 0.5;\n  vec4 gw00 = vec4(0.75) - abs(gx00) - abs(gy00) - abs(gz00);\n  vec4 sw00 = step(gw00, vec4(0.0));\n  gx00 -= sw00 * (step(0.0, gx00) - 0.5);\n  gy00 -= sw00 * (step(0.0, gy00) - 0.5);\n\n  vec4 gx01 = ixy01 / 7.0;\n  vec4 gy01 = floor(gx01) / 7.0;\n  vec4 gz01 = floor(gy01) / 6.0;\n  gx01 = fract(gx01) - 0.5;\n  gy01 = fract(gy01) - 0.5;\n  gz01 = fract(gz01) - 0.5;\n  vec4 gw01 = vec4(0.75) - abs(gx01) - abs(gy01) - abs(gz01);\n  vec4 sw01 = step(gw01, vec4(0.0));\n  gx01 -= sw01 * (step(0.0, gx01) - 0.5);\n  gy01 -= sw01 * (step(0.0, gy01) - 0.5);\n\n  vec4 gx10 = ixy10 / 7.0;\n  vec4 gy10 = floor(gx10) / 7.0;\n  vec4 gz10 = floor(gy10) / 6.0;\n  gx10 = fract(gx10) - 0.5;\n  gy10 = fract(gy10) - 0.5;\n  gz10 = fract(gz10) - 0.5;\n  vec4 gw10 = vec4(0.75) - abs(gx10) - abs(gy10) - abs(gz10);\n  vec4 sw10 = step(gw10, vec4(0.0));\n  gx10 -= sw10 * (step(0.0, gx10) - 0.5);\n  gy10 -= sw10 * (step(0.0, gy10) - 0.5);\n\n  vec4 gx11 = ixy11 / 7.0;\n  vec4 gy11 = floor(gx11) / 7.0;\n  vec4 gz11 = floor(gy11) / 6.0;\n  gx11 = fract(gx11) - 0.5;\n  gy11 = fract(gy11) - 0.5;\n  gz11 = fract(gz11) - 0.5;\n  vec4 gw11 = vec4(0.75) - abs(gx11) - abs(gy11) - abs(gz11);\n  vec4 sw11 = step(gw11, vec4(0.0));\n  gx11 -= sw11 * (step(0.0, gx11) - 0.5);\n  gy11 -= sw11 * (step(0.0, gy11) - 0.5);\n\n  vec4 g0000 = vec4(gx00.x,gy00.x,gz00.x,gw00.x);\n  vec4 g1000 = vec4(gx00.y,gy00.y,gz00.y,gw00.y);\n  vec4 g0100 = vec4(gx00.z,gy00.z,gz00.z,gw00.z);\n  vec4 g1100 = vec4(gx00.w,gy00.w,gz00.w,gw00.w);\n  vec4 g0010 = vec4(gx10.x,gy10.x,gz10.x,gw10.x);\n  vec4 g1010 = vec4(gx10.y,gy10.y,gz10.y,gw10.y);\n  vec4 g0110 = vec4(gx10.z,gy10.z,gz10.z,gw10.z);\n  vec4 g1110 = vec4(gx10.w,gy10.w,gz10.w,gw10.w);\n  vec4 g0001 = vec4(gx01.x,gy01.x,gz01.x,gw01.x);\n  vec4 g1001 = vec4(gx01.y,gy01.y,gz01.y,gw01.y);\n  vec4 g0101 = vec4(gx01.z,gy01.z,gz01.z,gw01.z);\n  vec4 g1101 = vec4(gx01.w,gy01.w,gz01.w,gw01.w);\n  vec4 g0011 = vec4(gx11.x,gy11.x,gz11.x,gw11.x);\n  vec4 g1011 = vec4(gx11.y,gy11.y,gz11.y,gw11.y);\n  vec4 g0111 = vec4(gx11.z,gy11.z,gz11.z,gw11.z);\n  vec4 g1111 = vec4(gx11.w,gy11.w,gz11.w,gw11.w);\n\n  vec4 norm00 = taylorInvSqrt(vec4(dot(g0000, g0000), dot(g0100, g0100), dot(g1000, g1000), dot(g1100, g1100)));\n  g0000 *= norm00.x;\n  g0100 *= norm00.y;\n  g1000 *= norm00.z;\n  g1100 *= norm00.w;\n\n  vec4 norm01 = taylorInvSqrt(vec4(dot(g0001, g0001), dot(g0101, g0101), dot(g1001, g1001), dot(g1101, g1101)));\n  g0001 *= norm01.x;\n  g0101 *= norm01.y;\n  g1001 *= norm01.z;\n  g1101 *= norm01.w;\n\n  vec4 norm10 = taylorInvSqrt(vec4(dot(g0010, g0010), dot(g0110, g0110), dot(g1010, g1010), dot(g1110, g1110)));\n  g0010 *= norm10.x;\n  g0110 *= norm10.y;\n  g1010 *= norm10.z;\n  g1110 *= norm10.w;\n\n  vec4 norm11 = taylorInvSqrt(vec4(dot(g0011, g0011), dot(g0111, g0111), dot(g1011, g1011), dot(g1111, g1111)));\n  g0011 *= norm11.x;\n  g0111 *= norm11.y;\n  g1011 *= norm11.z;\n  g1111 *= norm11.w;\n\n  float n0000 = dot(g0000, Pf0);\n  float n1000 = dot(g1000, vec4(Pf1.x, Pf0.yzw));\n  float n0100 = dot(g0100, vec4(Pf0.x, Pf1.y, Pf0.zw));\n  float n1100 = dot(g1100, vec4(Pf1.xy, Pf0.zw));\n  float n0010 = dot(g0010, vec4(Pf0.xy, Pf1.z, Pf0.w));\n  float n1010 = dot(g1010, vec4(Pf1.x, Pf0.y, Pf1.z, Pf0.w));\n  float n0110 = dot(g0110, vec4(Pf0.x, Pf1.yz, Pf0.w));\n  float n1110 = dot(g1110, vec4(Pf1.xyz, Pf0.w));\n  float n0001 = dot(g0001, vec4(Pf0.xyz, Pf1.w));\n  float n1001 = dot(g1001, vec4(Pf1.x, Pf0.yz, Pf1.w));\n  float n0101 = dot(g0101, vec4(Pf0.x, Pf1.y, Pf0.z, Pf1.w));\n  float n1101 = dot(g1101, vec4(Pf1.xy, Pf0.z, Pf1.w));\n  float n0011 = dot(g0011, vec4(Pf0.xy, Pf1.zw));\n  float n1011 = dot(g1011, vec4(Pf1.x, Pf0.y, Pf1.zw));\n  float n0111 = dot(g0111, vec4(Pf0.x, Pf1.yzw));\n  float n1111 = dot(g1111, Pf1);\n\n  vec4 fade_xyzw = fade(Pf0);\n  vec4 n_0w = mix(vec4(n0000, n1000, n0100, n1100), vec4(n0001, n1001, n0101, n1101), fade_xyzw.w);\n  vec4 n_1w = mix(vec4(n0010, n1010, n0110, n1110), vec4(n0011, n1011, n0111, n1111), fade_xyzw.w);\n  vec4 n_zw = mix(n_0w, n_1w, fade_xyzw.z);\n  vec2 n_yzw = mix(n_zw.xy, n_zw.zw, fade_xyzw.y);\n  float n_xyzw = mix(n_yzw.x, n_yzw.y, fade_xyzw.x);\n  return 2.2 * n_xyzw;\n}\n",C=[9205247,6094763,16206474,4059890],k=["args"],I=s({__name:"background",setup(o){const{sizes:t}=e();let r=0;const a={uniforms:{u_time:{value:0},u_progress:{value:0},u_aspect:{value:t.width.value/t.height.value},u_color:{value:new P(C[r])}},vertexShader:"\n\t\tvarying vec2 vUv;\n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n\t\t",fragmentShader:`\n\tuniform float u_time;\n    uniform float u_progress;\n    uniform float u_aspect;\n    uniform vec3 u_color;\n    varying vec2 vUv;\n    #define PI 3.14159265\n    ${S}\n\n    void main() {\n        vec2 newUv = (vUv - vec2(0.5)) * vec2(u_aspect,1.);\n        float dist = length(newUv);\n        float density = 1.8 - dist;\n        float noise = cnoise(vec4(newUv*40.*density, u_time, 1.));\n        float grain = (fract(sin(dot(vUv, vec2(12.9898,78.233)*2000.0)) * 43758.5453));\n        \n        float facets = noise*2.;\n        float dots = smoothstep(0.1, 0.15, noise);\n        float n = facets * dots;\n        n = step(.2,facets)*dots;\n        n = 1. - n;\n\n        float radius = 1.5;\n        float outerProgress = clamp(1.1*u_progress, 0., 1.);\n        float innerProgress = clamp(1.1*u_progress - 0.05, 0., 1.);\n  \n        float innerCircle = 1. - smoothstep((innerProgress-0.4)*radius, innerProgress*radius, dist);\n        float outerCircle = 1. - smoothstep((outerProgress-0.1)*radius, innerProgress*radius, dist);\n  \n        float displacement = outerCircle-innerCircle;\n        \n        float grainStrength = 0.3;\n        vec3 final = vec3(displacement-(n+noise)) - vec3(grain*grainStrength);\n\n        gl_FragColor = vec4(final, 1.0);\n        gl_FragColor.rgb*=u_color*2.;\n\n        #include <colorspace_fragment>\n    }\n\t\t`};function s(e){if(e&&e.object&&e.object.material){++r>=C.length&&(r=0),console.log("colorIndex",r),e.object.material.uniforms.u_color.value=new P(C[r]);const n=e.object.material.uniforms.u_progress;g.killTweensOf(n),n.value=0,g.to(n,{duration:2,ease:"power1.out",value:1})}}const{onLoop:f}=n();return f((({elapsed:e})=>{a&&(a.uniforms.u_time.value=e)})),(e,n)=>(l(),i("TresMesh",{onClick:s},[c("TresPlaneGeometry",{args:[v(t).width.value/50,v(t).height.value/50]},null,8,k),c("TresShaderMaterial",u(m(a)),null,16)]))}}),M=["args"],T=["rotation","position"],U=["rotation"],A=["geometry","material"],L=["geometry","material"],B=s({__name:"model",async setup(t){let r,a;const{sizes:s}=e(),{nodes:u,materials:m}=([r,a]=f((()=>o("https://opensource.cdn.icegl.cn/model/eCommerce/energy-can.glb",{draco:!0,decoderPath:"./draco/"}))),r=await r,a(),r),d={u_time:{value:0},u_color1:{value:new P(C[0])},u_color2:{value:new P(C[1])},u_progress:{value:.5},u_width:{value:.8},u_scaleX:{value:50},u_scaleY:{value:50},u_textureSize:{value:new h(m.Body.map.source.data.width,m.Body.map.source.data.height)}};m.Body.metalness=0,m.Body.roughness=1,m.Body.onBeforeCompile=e=>{e.uniforms=Object.assign(e.uniforms,d),e.vertexShader=e.vertexShader.replace("#include <common>","\n          #include <common>\n          varying vec2 vUv;\n        "),e.vertexShader=e.vertexShader.replace("#include <begin_vertex>","\n          #include <begin_vertex>\n          vUv = uv;\n        "),e.fragmentShader=e.fragmentShader.replace("#include <common>",`\n          #include <common>\n          uniform float u_time;\n          uniform vec3 u_color1;\n          uniform vec3 u_color2;\n          uniform float u_progress;\n          uniform float u_width;\n          uniform float u_scaleX;\n          uniform float u_scaleY;\n          uniform vec2 u_textureSize;\n          varying vec2 vUv;\n          ${S}\n          float parabola( float x, float k ) {\n            return pow( 4. * x * ( 1. - x ), k );\n          }\n      `),e.fragmentShader=e.fragmentShader.replace("#include <color_fragment>","\n          #include <color_fragment>\n            float aspect = u_textureSize.x/u_textureSize.y;\n            float dt = parabola(u_progress,1.);\n            float border = 1.;\n            float noise = 0.5*(cnoise(vec4(vUv.x*u_scaleX  + 0.5*u_time/3., vUv.y*u_scaleY,0.5*u_time/3.,0.)) + 1.);\n            float w = u_width*dt;\n            float maskValue = smoothstep(1. - w,1.,vUv.y + mix(-w/2., 1. - w/2., u_progress));\n            maskValue += maskValue * noise;\n            float mask = smoothstep(border,border+0.01,maskValue);\n            diffuseColor.rgb += mix(u_color1,u_color2,mask);\n        ")};let p=0;function w(e){if(e&&e.object&&e.object.material){++p>=C.length&&(p=0),console.log("model colorIndex",p);let e=new P(C[p]);d.u_color2.value=e;const n=d.u_progress;g.killTweensOf(n),n.value=.5,g.to(n,{duration:1,ease:"power1.out",value:1,onComplete:()=>{d.u_color1.value=e}})}e.stopPropagation()}let _=y(0);const{onLoop:z}=n();return z((({elapsed:e})=>{_.value=.12*Math.sin(e),d.u_time.value=e})),(e,n)=>(l(),i(x,null,[c("TresMesh",{visible:!1,onClick:w},[c("TresPlaneGeometry",{args:[v(s).width.value/50,v(s).height.value/50]},null,8,M)]),c("TresGroup",{rotation:[-Math.PI/2,1.7,Math.PI/2],position:[0,v(_),5]},[c("TresGroup",{rotation:[-Math.PI/2,0,0]},[c("TresMesh",{geometry:v(u).LowRes_Can_Alluminium_0.geometry,material:v(m).Alluminium},null,8,A),c("TresMesh",{geometry:v(u).LowRes_Can_Body_0.geometry,material:v(m).Body},null,8,L)],8,U)],8,T)],64))}}),q=s({__name:"zipTopCan",setup(e){const n={clearColor:"#ffffff",windowSize:!0,toneMapping:j,toneMappingExposure:.8,shadows:!0,outputColorSpace:b};return(e,o)=>{const g=d("TresCanvas");return l(),i(x,null,[(l(),p(z,null,{default:_((()=>[w(v(r))])),_:1})),w(g,u(m(n)),{default:_((()=>[o[0]||(o[0]=c("TresPerspectiveCamera",{position:[0,0,16],fov:45,near:.1,far:1e4},null,-1)),w(v(t),{enableDamping:"",enablePan:!1,enableZoom:!1,maxPolarAngle:Math.PI/1.7,minPolarAngle:Math.PI/2.4,maxAzimuthAngle:.1,minAzimuthAngle:-.1},null,8,["maxPolarAngle","minPolarAngle"]),o[1]||(o[1]=c("TresAmbientLight",{intensity:.5},null,-1)),w(I),(l(),p(z,null,{default:_((()=>[w(B)])),_:1})),(l(),p(z,null,{default:_((()=>[w(v(a),{files:"./plugins/eCommerce/platz.hdr"})])),_:1}))])),_:1},16)],64)}}});export{q as default};
