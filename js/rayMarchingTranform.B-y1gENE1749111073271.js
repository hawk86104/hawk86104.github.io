import{e,a as n}from"./@tresjs.D5XVXE0C1749111073271.js";import{a as r,ab as o}from"./three.B8H7tP0r1749111073271.js";import{d as a,a2 as t,G as s,o as i,I as l,ak as u,al as f,s as m,h as p,e as c,f as v,j as d,u as h,m as g}from"./@vue.Mugdq9o81749111073271.js";import"./postprocessing.CFk4752N1749111073271.js";import"./@vueuse.BjDsO4x01749111073271.js";const _=["rotation"],w={ref:"TresTubeGeometryRef",args:[1e3,1e3]},T=a({__name:"rayMarchingMaterialTranform",setup(n){const{onLoop:a,onAfterLoop:m}=e(),p={transparent:!0,depthWrite:!0,depthTest:!0,side:o,vertexShader:"varying vec2 vUv;\nvoid main(){\n\tgl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.);\n\tvUv=uv;\n}",fragmentShader:"#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec3 u_mouse;\nuniform float u_time;\nvarying vec2 vUv;\nfloat sphere(vec3 p,float d){\n  return(length(p*abs(sin(u_time))*2.)-d)/abs(sin(u_time))/2.;\n}\nmat2 rot2D(float angle){\n  float s=sin(angle);\n  float c=cos(angle);\n  return mat2(c,-s,s,c);\n}\nfloat map(vec3 p){\n  p.xy*=rot2D(u_time);\n  vec3 pos=vec3(sin(u_time*10.),0.,0.);\n  float spheresdf=sphere(p-pos,.5);\n  return spheresdf;\n}\n\nvoid main(){\n  vec3 ro=vec3(0.,0.,-3.);//起始位置\n  vec3 rd=normalize(vec3(vUv-.5,1.));//方向\n  float t=0.;\n  vec3 color=vec3(0.);\n  for(int i=0;i<80;i++){\n    vec3 p=ro+rd*t;\n    float d=map(p);\n    t+=d;\n    //优化效率\n    if(t>100.||d<.001){\n      break;\n    }\n    \n  }\n  color=vec3(t)*.2;\n  gl_FragColor=vec4(color,1.);\n  \n}",uniforms:{u_resolution:{value:new r(window.innerWidth,window.innerHeight)},u_mouse:{value:new r(0,0)},u_time:{value:0}}},c=window.innerWidth/2,v=window.innerHeight/2;let d=0,h=0;return document.addEventListener("mousemove",(function(e){d=e.clientX-c,h=e.clientY-v}),!1),t((()=>{})),a((({elapsed:e})=>{p.uniforms.u_time.value+=.001,p.uniforms.u_mouse.value=new r(d,h)})),m((()=>{})),(e,n)=>(i(),s("TresMesh",{ref:"MeshRef",rotation:[Math.PI/2,0,0]},[l("TresPlaneGeometry",w,null,512),l("TresShaderMaterial",u(f(p)),null,16)],8,_))}}),j={ref:"perspectiveCameraRef",position:[0,1500,0],fov:45,near:1,far:1e4},y=a({__name:"rayMarchingTranform",setup(r){const o={clearColor:"#000000",shadows:!0,alpha:!1,useLegacyLights:!0},a={autoRotate:!1,enableDamping:!0},{onLoop:t}=e();return t((({delta:e})=>{})),m((()=>{})),(e,r)=>{const t=p("TresCanvas");return i(),c(t,g(o,{"window-size":""}),{default:v((()=>[l("TresPerspectiveCamera",j,null,512),d(h(n),u(f(a)),null,16),r[0]||(r[0]=l("TresAmbientLight",{color:"#ffffff"},null,-1)),r[1]||(r[1]=l("TresDirectionalLight",{position:[100,100,0],intensity:.5,color:"#ffffff"},null,-1)),d(T),r[2]||(r[2]=l("TresAxesHelper",{args:[1e3],position:[0,19,0]},null,-1)),r[3]||(r[3]=l("TresGridHelper",{args:[6e3,100],position:[0,19,0]},null,-1))])),_:1},16)}}});export{y as default};
