import{ak as e,_ as n}from"./three.MbBECAu81726740218347.js";import{U as t,Y as a,z as o}from"./@tresjs.C5O8roW51726740218347.js";import{P as r}from"./tweakpane.yHWGBmom1726740218347.js";import{d as i,a4 as l,Y as s,e as u,o as c,f,g as v,j as p,u as m,L as d,m as h,aj as g,ak as x}from"./@vue.JNsx1iN61726740218347.js";import"./@vueuse.18lbrd2F1726740218347.js";const y=j;function T(){const e=["addFolder","2034724EWyzcR","warn","debu","bind","TresShaderMaterial","counter","return (function() ","#122148","call","error","pointSize","824feUVzu","input","uniforms","while (true) {}","trace","apply","wireframeMaterialRef","粒子大小","海浪高度","size","#ffffff","uTime","229sneagI","uWaveSpeed","groupRef","exception","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","chain","constructor","16928730GEleTO","color","addBinding","TresGroup","684hoysxQ","info","944016PTvzSz","7235515ISgckY","rotation","TresIcosahedronGeometry","TresMeshBasicMaterial","43974BxGaCt","value","234984hrDLgm","gger","TresMesh","string","function *\\( *\\)","海浪变化速度","action","console","TresPerspectiveCamera","FrontSide","test","uWaveHeight","#080820","Debug","toString","TresCanvas","length"];return(T=function(){return e})()}!function(e,n){const t=j,a=T();for(;;)try{if(736288===-parseInt(t(550))/1*(parseInt(t(538))/2)+-parseInt(t(509))/3+parseInt(t(527))/4+parseInt(t(503))/5+parseInt(t(500))/6*(parseInt(t(507))/7)+parseInt(t(502))/8+-parseInt(t(496))/9)break;a.push(a.shift())}catch(o){a.push(a.shift())}}();const w=function(){let e=!0;return function(n,t){const a=e?function(){if(t){const e=t[j(543)](n,arguments);return t=null,e}}:function(){};return e=!1,a}}();!function(){w(this,(function(){const e=j,n=new RegExp(e(513)),t=new RegExp(e(493),"i"),a=D("init");n[e(519)](a+e(494))&&t[e(519)](a+e(539))?D():a("0")}))()}();const S=function(){let e=!0;return function(n,t){const a=e?function(){if(t){const e=t[j(543)](n,arguments);return t=null,e}}:function(){};return e=!1,a}}();S(void 0,(function(){const e=j;let n;try{n=Function(e(533)+'{}.constructor("return this")( ));')()}catch(o){n=window}const t=n.console=n[e(516)]||{},a=["log",e(528),e(501),e(536),e(492),"table",e(542)];for(let r=0;r<a[e(525)];r++){const n=S[e(495)].prototype[e(530)](S),o=a[r],i=t[o]||n;n.__proto__=S[e(530)](S),n[e(523)]=i[e(523)][e(530)](i),t[o]=n}}))();const z=d(y(517),{position:[0,0,3.5],fov:45,near:.1,far:20},null,-1),_=d(y(505),{args:[1,4]},null,-1),b=d(y(505),{args:[1,128]},null,-1),E=d("TresHemisphereLight",{args:[y(548),y(521),3]},null,-1);function j(e,n){const t=T();return(j=function(e,n){return t[e-=491]})(e,n)}const P=i({__name:"pointsEarth",async setup(i){const T=y;let w,S;const j={color:"#17c5a9",pointSize:4},P={clearColor:T(534),shadows:!1,alpha:!1,outputColorSpace:e},D={color:j[T(497)],wireframe:!0,transparent:!0,opacity:.2},k=([w,S]=l((()=>o(["./plugins/earthSample/image/pointsEarth/00_earthmap1k.jpg","./plugins/earthSample/image/pointsEarth/circle.png","./plugins/earthSample/image/pointsEarth/04_rainbow1k.jpg","./plugins/earthSample/image/pointsEarth/01_earthbump1k.jpg","./plugins/earthSample/image/pointsEarth/02_earthspec1k.jpg"]))),w=await w,S(),w),I=k[0],A=k[1],C=k[2],U=k[3],W=k[4],L={uniforms:{size:{type:"f",value:j[T(537)]},uTime:{type:"f",value:0},uWaveHeight:{type:"f",value:.075},uWaveSpeed:{type:"f",value:.2},colorTexture:{type:"t",value:C},elevTexture:{type:"t",value:U},alphaTexture:{type:"t",value:W},earthTexture:{type:"t",value:I},starTexture:{type:"t",value:A}},vertexShader:"  uniform float size;\n  uniform sampler2D elevTexture;\n  uniform sampler2D alphaTexture;\n  uniform float uTime;\n  uniform float uWaveHeight;\n  uniform float uWaveSpeed;\n\n  varying vec2 vUv;\n  varying float vVisible;\n  varying float vAlpha;\n  varying float vElevation;\n  // Function to generate fBm with vec3 input\n  float random(vec3 st) {\n    return fract(sin(dot(st.xyz, vec3(12.9898,78.233,45.164))) * 43758.5453123);\n}\n\nfloat noise(vec3 st) {\n    vec3 i = floor(st);\n    vec3 f = fract(st);\n\n    // Eight corners in 3D of a tile\n    float a = random(i);\n    float b = random(i + vec3(1.0, 0.0, 0.0));\n    float c = random(i + vec3(0.0, 1.0, 0.0));\n    float d = random(i + vec3(1.0, 1.0, 0.0));\n    float e = random(i + vec3(0.0, 0.0, 1.0));\n    float f1 = random(i + vec3(1.0, 0.0, 1.0));\n    float g = random(i + vec3(0.0, 1.0, 1.0));\n    float h = random(i + vec3(1.0, 1.0, 1.0));\n\n    vec3 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(mix(mix(a, b, u.x), mix(c, d, u.x), u.y),\n               mix(mix(e, f1, u.x), mix(g, h, u.x), u.y), u.z);\n}\n\nfloat fbm(vec3 st) {\n    float value = 0.0;\n    float amplitude = 0.5;\n\n    for (int i = 0; i < 5; i++) {\n        value += amplitude * noise(st);\n        st *= 2.0;\n        amplitude *= 0.5;\n    }\n    return value;\n}\n\n  void main() {\n    vUv = uv;\n    float alphaLand = 1.0 - texture2D(alphaTexture, vUv).r;\n    vAlpha = alphaLand;\n    vec3 newPosition = position;\n\n    if(alphaLand < 0.5) {\n      // Sea\n      // fBm for wave-like displacement\n      float waveHeight = uWaveHeight; // Adjust wave height as needed\n      float waveSpeed = uWaveSpeed;  // Adjust wave speed as needed\n      float displacement = (fbm(newPosition * 5.0 + uTime * waveSpeed) * 2.0 - 1.0) * waveHeight;\n      vElevation = displacement;\n      newPosition += normal * displacement ;\n    }\n\n    vec4 mvPosition = modelViewMatrix * vec4( newPosition, 1.0 );\n    float elv = texture2D(elevTexture, vUv).r;\n    vec3 vNormal = normalMatrix * normal;\n    vVisible = step(0.0, dot( -normalize(mvPosition.xyz), normalize(vNormal)));\n    mvPosition.z += 0.45 * elv;\n\n    // 求出 mvPosition 距离相机的距离\n    float dist = length(mvPosition.xyz);\n    // 根据距离调整 size\n    float pointSize = size * (1.0 - dist / 10.0);\n    gl_PointSize = max(pointSize, 1.0);\n    gl_PointSize = pointSize;\n    gl_Position = projectionMatrix * mvPosition;\n  }\n",fragmentShader:"  uniform sampler2D colorTexture;\n  // uniform sampler2D alphaTexture;\n  uniform sampler2D earthTexture;\n  uniform sampler2D starTexture;\n\n  varying vec2 vUv;\n  varying float vVisible;\n  varying float vAlpha;\n  varying float vElevation;\n\n  void main() {\n    if (floor(vVisible + 0.1) == 0.0) discard;\n    vec2 coord = gl_PointCoord;\n    float alpha = texture2D(starTexture, coord).a;\n    // 根据 alpha 值来裁剪形状\n    if (alpha < 0.1) discard;\n\n    // float alphaLand = 1.0 - texture2D(alphaTexture, vUv).r;\n    vec3 color = texture2D(colorTexture, vUv).rgb;\n    vec3 earth = texture2D(earthTexture, vUv).rgb;\n    color = mix(color, earth, 0.65);\n    if(\n      vAlpha > 0.5\n    ) {\n      gl_FragColor = vec4(color, vAlpha);\n    }else {\n      // 对于海洋部分，根据 vElevation 调整颜色\n      float elevationEffect = clamp(vElevation*30.0, -1.0, 1.0); // 将 vElevation 限制在 [-1, 1] 范围内\n      vec3 deep_sea_blue = vec3(0.004, 0.227, 0.388);\n      vec3 adjustedColor = mix(deep_sea_blue, earth*1.75, (elevationEffect + 1.0) * 0.5); // 根据 vElevation 调整颜色\n      gl_FragColor = vec4(adjustedColor, 1.0-vAlpha);\n    }\n  }\n",transparent:!0,side:n[T(518)]},M=s(),B=s(),H=(new r)[T(526)]({title:T(522)});H[T(498)](j,T(497),{type:T(497)}).on("change",(({value:e})=>{const n=T;B.value[n(497)].set(e)})),H.addBinding(L.uniforms[T(547)],T(508),{min:.1,max:10,step:.1,label:T(545)}),H[T(498)](L[T(540)][T(520)],T(508),{min:.01,max:.5,step:.01,label:T(546)}),H.addBinding(L[T(540)][T(551)],"value",{min:.01,max:1,step:.01,label:T(514)});const{onLoop:R}=t();return R((({delta:e})=>{const n=T;M[n(508)]&&(M[n(508)][n(504)].y+=.002,L.uniforms[n(549)].value+=10*e)})),(e,n)=>{const t=T,o=u(t(524));return c(),f(o,h(P,{"window-size":""}),{default:v((()=>[z,p(m(a),{autoRotate:!0,autoRotateSpeed:2}),d(t(499),{ref_key:t(491),ref:M},[d(t(511),null,[_,d(t(506),h({ref_key:t(544),ref:B},D),null,16)]),d("TresPoints",null,[b,d(t(531),g(x(L)),null,16)])],512),E])),_:1},16)}}});function D(e){function n(e){const t=j;if(typeof e===t(512))return function(e){}[t(495)](t(541))[t(543)](t(532));1!==(""+e/e).length||e%20==0?function(){return!0}.constructor(t(529)+t(510))[t(535)](t(515)):function(){return!1}[t(495)](t(529)+t(510))[t(543)]("stateObject"),n(++e)}try{if(e)return n;n(0)}catch(t){}}export{P as default};
