import{$ as t,aA as n,Y as e}from"./three.QlBabAUP1756372194067.js";import{e as a,h as o,a as s,H as i}from"./@tresjs.Df2Jc2df1756372194067.js";import{_ as r}from"./component.vue_vue_type_script_setup_true_lang.CFC2eiMB1756372194067.js";import{_ as c}from"./vanilla.esm.5.5.0.b8Nged_k1756372194067.js";import{d as l,b as p,w as h,G as v,o as m,I as u,j as f,u as d,r as g,e as x,f as b,a7 as y,a8 as M,a5 as _,m as P}from"./@vue.BzMISRrV1756372194067.js";import"./postprocessing.eHqBklb71756372194067.js";import"./@vueuse.BIpwRBdi1756372194067.js";import"./three-stdlib.CWxBXjoj1756372194067.js";import"./object-hash._drSlZxG1756372194067.js";import"./@amap.CGUF9xH41756372194067.js";import"./jszip.CcduwmMh1756372194067.js";const j=l({__name:"instancedMeshCom",setup(e){const s=p(null),i={vertex:"\n    uniform float uTime;\n\t\tvarying vec3 vPosition;\n\t\t\n// Precision-adjusted variations of https://www.shadertoy.com/view/4djSRW\nfloat hash(float p) { p = fract(p * 0.011); p *= p + 7.5; p *= p + p; return fract(p); }\nfloat hash(vec2 p) { vec3 p3 = fract(vec3(p.xyx) * 0.13); p3 += dot(p3, p3.yzx + 3.333); return fract((p3.x + p3.y) * p3.z); }\n\nfloat noise(vec3 x) {\n    const vec3 step = vec3(110, 241, 171);\n\n    vec3 i = floor(x);\n    vec3 f = fract(x);\n\n    // For performance, compute the base input to a 1D hash from the integer part of the argument and the\n    // incremental change to the 1D based on the 3D -> 1D wrapping\n    float n = dot(i, step);\n\n    vec3 u = f * f * (3.0 - 2.0 * f);\n    return mix(mix(mix(hash(n + dot(step, vec3(0, 0, 0))), hash(n + dot(step, vec3(1, 0, 0))), u.x),\n                   mix(hash(n + dot(step, vec3(0, 1, 0))), hash(n + dot(step, vec3(1, 1, 0))), u.x), u.y),\n               mix(mix(hash(n + dot(step, vec3(0, 0, 1))), hash(n + dot(step, vec3(1, 0, 1))), u.x),\n                   mix(hash(n + dot(step, vec3(0, 1, 1))), hash(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);\n}\n\n    vec3 displace(vec3 point) {\n      vec3 instancePosition = (instanceMatrix * vec4(point, 1.)).xyz;\n      return instancePosition + (normal * noise((instancePosition * 3.) + uTime) * 0.8);\n    }  \n\n    vec3 orthogonal(vec3 v) {\n      return normalize(abs(v.x) > abs(v.z) ? vec3(-v.y, v.x, 0.0)\n      : vec3(0.0, -v.z, v.y));\n    }\n\n    vec3 recalcNormals(vec3 newPos) {\n      float offset = 0.001;\n      vec3 tangent = orthogonal(normal);\n      vec3 bitangent = normalize(cross(normal, tangent));\n      vec3 neighbour1 = position + tangent * offset;\n      vec3 neighbour2 = position + bitangent * offset;\n\n      vec3 displacedNeighbour1 = displace(neighbour1);\n      vec3 displacedNeighbour2 = displace(neighbour2);\n\n      vec3 displacedTangent = displacedNeighbour1 - newPos;\n      vec3 displacedBitangent = displacedNeighbour2 - newPos;\n\n      return normalize(cross(displacedTangent, displacedBitangent));\n    }\n\n    void main() {\n\t\t\tvPosition = position;\n      vec3 p = displace(position);\n      csm_PositionRaw = projectionMatrix * modelViewMatrix * instanceMatrix * vec4(p, 1.);\n      csm_Normal = recalcNormals(p);\n    }\n    ",fragment:"\n\t\tvarying vec3 vPosition;\n\t\t// 函数将 HSL 转换为 RGB\n\t\tvec3 hsl2rgb(float h, float s, float l) {\n\t\t\t\tfloat c = (1.0 - abs(2.0 * l - 1.0)) * s;\n\t\t\t\tfloat x = c * (1.0 - abs(mod(h * 6.0, 2.0) - 1.0));\n\t\t\t\tfloat m = l - c / 2.0;\n\t\t\t\tvec3 rgb;\n\t\t\t\tif (0.0 <= h && h < 1.0 / 6.0) {\n\t\t\t\t\t\trgb = vec3(c, x, 0.0);\n\t\t\t\t} else if (1.0 / 6.0 <= h && h < 2.0 / 6.0) {\n\t\t\t\t\t\trgb = vec3(x, c, 0.0);\n\t\t\t\t} else if (2.0 / 6.0 <= h && h < 3.0 / 6.0) {\n\t\t\t\t\t\trgb = vec3(0.0, c, x);\n\t\t\t\t} else if (3.0 / 6.0 <= h && h < 4.0 / 6.0) {\n\t\t\t\t\t\trgb = vec3(0.0, x, c);\n\t\t\t\t} else if (4.0 / 6.0 <= h && h < 5.0 / 6.0) {\n\t\t\t\t\t\trgb = vec3(x, 0.0, c);\n\t\t\t\t} else if (5.0 / 6.0 <= h && h < 6.0 / 6.0) {\n\t\t\t\t\t\trgb = vec3(c, 0.0, x);\n\t\t\t\t} else {\n\t\t\t\t\t\trgb = vec3(0.0, 0.0, 0.0);\n\t\t\t\t}\n\t\t\t\trgb += vec3(m);\n\t\t\t\treturn rgb;\n\t\t}\n    void main() {\n      // csm_DiffuseColor = vec4(1.,1.,1.,1.);\n\t\t\tfloat h = mod(vPosition.x + vPosition.y + vPosition.z, 1.0); // 色相 H: [0, 1)\n\t\t\tfloat s = 0.9; // 饱和度 S: 固定为 0.8\n\t\t\tfloat l = 0.4; // 亮度 L: 固定为 0.5\n\t\t\tvec3 rgb = hsl2rgb(h, s, l);\n\t\t\tcsm_DiffuseColor = vec4(rgb,1.);\n    }\n    "},r={uTime:{value:0}},c=new t,{onLoop:l}=a();return l((({elapsed:t})=>{r.uTime.value=t})),h((()=>s.value),(t=>{if(t){let n=0;for(let e=0;e<88;e++)c.position.set(Math.random(),Math.random(),Math.random()),c.rotation.set(Math.random(),Math.random(),Math.random()),c.position.multiplyScalar(10),c.position.x-=5,c.position.y-=5,c.position.z-=5,c.updateMatrix(),t.setMatrixAt(n++,c.matrix);t.instanceMatrix.needsUpdate=!0}})),(t,e)=>(m(),v("TresInstancedMesh",{ref_key:"tmRef",ref:s,args:[null,null,88]},[e[0]||(e[0]=u("TresSphereGeometry",{args:[1,64,64]},null,-1)),f(d(o),{baseMaterial:n,vertexShader:i.vertex,fragmentShader:i.fragment,uniforms:r,transparent:""},null,8,["baseMaterial","vertexShader","fragmentShader"])],512))}}),w=l({__name:"instancedMeshCustomShaderMaterial",setup(t){const n=g({alpha:!0,toneMapping:e,windowSize:!0,clearColor:"#000000"}),a=g({enableDamping:!0});return(t,e)=>(m(),x(d(i),P(n,{"window-size":""}),{default:b((()=>[e[0]||(e[0]=u("TresPerspectiveCamera",{position:[15,15,15],fov:45,near:1,far:1e3},null,-1)),f(d(s),y(M(a)),null,16),e[1]||(e[1]=u("TresAmbientLight",{intensity:.5},null,-1)),e[2]||(e[2]=u("TresDirectionalLight",{position:[7,10,-5.5],intensity:5},null,-1)),(m(),x(_,null,{default:b((()=>[f(d(r),{intensity:16,resolution:256,background:"",blur:.6},{default:b((()=>[f(d(c),{intensity:2,form:"circle","rotation-x":Math.PI/2,position:[2,4,0],scale:[1,5,0]},null,8,["rotation-x"]),f(d(c),{intensity:2,form:"circle","rotation-x":Math.PI/2,position:[-6,4,0],scale:[1,5,0]},null,8,["rotation-x"]),f(d(c),{intensity:1,"rotation-y":-Math.PI/2,position:[-1,0,0],scale:[10,.2,1]},null,8,["rotation-y"]),f(d(c),{intensity:1,"rotation-y":-Math.PI/2,position:[1,0,0],scale:[10,.2,1]},null,8,["rotation-y"])])),_:1})])),_:1})),f(j)])),_:1},16))}});export{w as default};
