var le=Object.defineProperty;var b=Object.getOwnPropertySymbols;var V=Object.prototype.hasOwnProperty,U=Object.prototype.propertyIsEnumerable;var L=(a,e,o)=>e in a?le(a,e,{enumerable:!0,configurable:!0,writable:!0,value:o}):a[e]=o,P=(a,e)=>{for(var o in e||(e={}))V.call(e,o)&&L(a,o,e[o]);if(b)for(var o of b(e))U.call(e,o)&&L(a,o,e[o]);return a};var k=(a,e)=>{var o={};for(var r in a)V.call(a,r)&&e.indexOf(r)<0&&(o[r]=a[r]);if(a!=null&&b)for(var r of b(a))e.indexOf(r)<0&&U.call(a,r)&&(o[r]=a[r]);return o};import{bK as ce,aT as ue}from"./vendor.LnRgd2r_1716546362088.js";import{h as fe}from"./object_hash.5or4GQsK1716546362088.js";import{g as A}from"./_commonjsHelpers.5-cIlDoe1716546362088.js";var W=["precision","highp","mediump","lowp","attribute","const","uniform","varying","break","continue","do","for","while","if","else","in","out","inout","float","int","uint","void","bool","true","false","discard","return","mat2","mat3","mat4","vec2","vec3","vec4","ivec2","ivec3","ivec4","bvec2","bvec3","bvec4","sampler1D","sampler2D","sampler3D","samplerCube","sampler1DShadow","sampler2DShadow","struct","asm","class","union","enum","typedef","template","this","packed","goto","switch","default","inline","noinline","volatile","public","static","extern","external","interface","long","short","double","half","fixed","unsigned","input","output","hvec2","hvec3","hvec4","dvec2","dvec3","dvec4","fvec2","fvec3","fvec4","sampler2DRect","sampler3DRect","sampler2DRectShadow","sizeof","cast","namespace","using"],ge=["<<=",">>=","++","--","<<",">>","<=",">=","==","!=","&&","||","+=","-=","*=","/=","%=","&=","^^","^=","|=","(",")","[","]",".","!","~","*","/","%","+","-","<",">","&","^","|","?",":","=",",",";","{","}"],Q=["abs","acos","all","any","asin","atan","ceil","clamp","cos","cross","dFdx","dFdy","degrees","distance","dot","equal","exp","exp2","faceforward","floor","fract","gl_BackColor","gl_BackLightModelProduct","gl_BackLightProduct","gl_BackMaterial","gl_BackSecondaryColor","gl_ClipPlane","gl_ClipVertex","gl_Color","gl_DepthRange","gl_DepthRangeParameters","gl_EyePlaneQ","gl_EyePlaneR","gl_EyePlaneS","gl_EyePlaneT","gl_Fog","gl_FogCoord","gl_FogFragCoord","gl_FogParameters","gl_FragColor","gl_FragCoord","gl_FragData","gl_FragDepth","gl_FragDepthEXT","gl_FrontColor","gl_FrontFacing","gl_FrontLightModelProduct","gl_FrontLightProduct","gl_FrontMaterial","gl_FrontSecondaryColor","gl_LightModel","gl_LightModelParameters","gl_LightModelProducts","gl_LightProducts","gl_LightSource","gl_LightSourceParameters","gl_MaterialParameters","gl_MaxClipPlanes","gl_MaxCombinedTextureImageUnits","gl_MaxDrawBuffers","gl_MaxFragmentUniformComponents","gl_MaxLights","gl_MaxTextureCoords","gl_MaxTextureImageUnits","gl_MaxTextureUnits","gl_MaxVaryingFloats","gl_MaxVertexAttribs","gl_MaxVertexTextureImageUnits","gl_MaxVertexUniformComponents","gl_ModelViewMatrix","gl_ModelViewMatrixInverse","gl_ModelViewMatrixInverseTranspose","gl_ModelViewMatrixTranspose","gl_ModelViewProjectionMatrix","gl_ModelViewProjectionMatrixInverse","gl_ModelViewProjectionMatrixInverseTranspose","gl_ModelViewProjectionMatrixTranspose","gl_MultiTexCoord0","gl_MultiTexCoord1","gl_MultiTexCoord2","gl_MultiTexCoord3","gl_MultiTexCoord4","gl_MultiTexCoord5","gl_MultiTexCoord6","gl_MultiTexCoord7","gl_Normal","gl_NormalMatrix","gl_NormalScale","gl_ObjectPlaneQ","gl_ObjectPlaneR","gl_ObjectPlaneS","gl_ObjectPlaneT","gl_Point","gl_PointCoord","gl_PointParameters","gl_PointSize","gl_Position","gl_ProjectionMatrix","gl_ProjectionMatrixInverse","gl_ProjectionMatrixInverseTranspose","gl_ProjectionMatrixTranspose","gl_SecondaryColor","gl_TexCoord","gl_TextureEnvColor","gl_TextureMatrix","gl_TextureMatrixInverse","gl_TextureMatrixInverseTranspose","gl_TextureMatrixTranspose","gl_Vertex","greaterThan","greaterThanEqual","inversesqrt","length","lessThan","lessThanEqual","log","log2","matrixCompMult","max","min","mix","mod","normalize","not","notEqual","pow","radians","reflect","refract","sign","sin","smoothstep","sqrt","step","tan","texture2D","texture2DLod","texture2DProj","texture2DProjLod","textureCube","textureCubeLod","texture2DLodEXT","texture2DProjLodEXT","textureCubeLodEXT","texture2DGradEXT","texture2DProjGradEXT","textureCubeGradEXT"],me=W,de=me.slice().concat(["layout","centroid","smooth","case","mat2x2","mat2x3","mat2x4","mat3x2","mat3x3","mat3x4","mat4x2","mat4x3","mat4x4","uvec2","uvec3","uvec4","samplerCubeShadow","sampler2DArray","sampler2DArrayShadow","isampler2D","isampler3D","isamplerCube","isampler2DArray","usampler2D","usampler3D","usamplerCube","usampler2DArray","coherent","restrict","readonly","writeonly","resource","atomic_uint","noperspective","patch","sample","subroutine","common","partition","active","filter","image1D","image2D","image3D","imageCube","iimage1D","iimage2D","iimage3D","iimageCube","uimage1D","uimage2D","uimage3D","uimageCube","image1DArray","image2DArray","iimage1DArray","iimage2DArray","uimage1DArray","uimage2DArray","image1DShadow","image2DShadow","image1DArrayShadow","image2DArrayShadow","imageBuffer","iimageBuffer","uimageBuffer","sampler1DArray","sampler1DArrayShadow","isampler1D","isampler1DArray","usampler1D","usampler1DArray","isampler2DRect","usampler2DRect","samplerBuffer","isamplerBuffer","usamplerBuffer","sampler2DMS","isampler2DMS","usampler2DMS","sampler2DMSArray","isampler2DMSArray","usampler2DMSArray"]),R=Q;R=R.slice().filter(function(a){return!/^(gl\_|texture)/.test(a)});var pe=R.concat(["gl_VertexID","gl_InstanceID","gl_Position","gl_PointSize","gl_FragCoord","gl_FrontFacing","gl_FragDepth","gl_PointCoord","gl_MaxVertexAttribs","gl_MaxVertexUniformVectors","gl_MaxVertexOutputVectors","gl_MaxFragmentInputVectors","gl_MaxVertexTextureImageUnits","gl_MaxCombinedTextureImageUnits","gl_MaxTextureImageUnits","gl_MaxFragmentUniformVectors","gl_MaxDrawBuffers","gl_MinProgramTexelOffset","gl_MaxProgramTexelOffset","gl_DepthRangeParameters","gl_DepthRange","trunc","round","roundEven","isnan","isinf","floatBitsToInt","floatBitsToUint","intBitsToFloat","uintBitsToFloat","packSnorm2x16","unpackSnorm2x16","packUnorm2x16","unpackUnorm2x16","packHalf2x16","unpackHalf2x16","outerProduct","transpose","determinant","inverse","texture","textureSize","textureProj","textureLod","textureOffset","texelFetch","texelFetchOffset","textureProjOffset","textureLodOffset","textureProjLod","textureProjLodOffset","textureGrad","textureGradOffset","textureProjGrad","textureProjGradOffset"]),_e=ye,he=W,B=ge,xe=Q,ve=de,Me=pe,_=999,N=9999,F=0,I=1,z=2,G=3,H=4,y=5,De=6,Ce=7,Se=8,X=9,Te=10,K=11,Pe=["block-comment","line-comment","preprocessor","operator","integer","float","ident","builtin","keyword","whitespace","eof","integer"];function ye(a){var e=0,o=0,r=_,t,s,i=[],f=[],h=1,c=0,n=0,m=!1,d=!1,g="",D;a=a||{};var M=xe,C=he;a.version==="300 es"&&(M=Me,C=ve);for(var x={},O={},e=0;e<M.length;e++)x[M[e]]=!0;for(var e=0;e<C.length;e++)O[C[e]]=!0;return function(u){return f=[],u!==null?Y(u):J()};function p(u){u.length&&f.push({type:Pe[r],data:u,position:n,line:h,column:c})}function Y(u){e=0,u.toString&&(u=u.toString()),g+=u.replace(/\r\n/g,"\n"),D=g.length;for(var S;t=g[e],e<D;){switch(S=e,r){case F:e=re();break;case I:e=te();break;case z:e=$();break;case G:e=ie();break;case H:e=oe();break;case K:e=ae();break;case y:e=ne();break;case N:e=se();break;case X:e=ee();break;case _:e=Z();break}if(S!==e)switch(g[S]){case"\n":c=0,++h;break;default:++c;break}}return o+=e,g=g.slice(e),f}function J(u){return i.length&&p(i.join("")),r=Te,p("(eof)"),f}function Z(){return i=i.length?[]:i,s==="/"&&t==="*"?(n=o+e-1,r=F,s=t,e+1):s==="/"&&t==="/"?(n=o+e-1,r=I,s=t,e+1):t==="#"?(r=z,n=o+e,e):/\s/.test(t)?(r=X,n=o+e,e):(m=/\d/.test(t),d=/[^\w_]/.test(t),n=o+e,r=m?H:d?G:N,e)}function ee(){return/[^\s]/g.test(t)?(p(i.join("")),r=_,e):(i.push(t),s=t,e+1)}function $(){return(t==="\r"||t==="\n")&&s!=="\\"?(p(i.join("")),r=_,e):(i.push(t),s=t,e+1)}function te(){return $()}function re(){return t==="/"&&s==="*"?(i.push(t),p(i.join("")),r=_,e+1):(i.push(t),s=t,e+1)}function ie(){if(s==="."&&/\d/.test(t))return r=y,e;if(s==="/"&&t==="*")return r=F,e;if(s==="/"&&t==="/")return r=I,e;if(t==="."&&i.length){for(;w(i););return r=y,e}if(t===";"||t===")"||t==="("){if(i.length)for(;w(i););return p(t),r=_,e+1}var u=i.length===2&&t!=="=";if(/[\w_\d\s]/.test(t)||u){for(;w(i););return r=_,e}return i.push(t),s=t,e+1}function w(u){var S=0,j,T;do{if(j=B.indexOf(u.slice(0,u.length+S).join("")),T=B[j],j===-1){if(S--+u.length>0)continue;T=u.slice(0,1).join("")}return p(T),n+=T.length,i=i.slice(T.length),i.length}while(!0)}function ae(){return/[^a-fA-F0-9]/.test(t)?(p(i.join("")),r=_,e):(i.push(t),s=t,e+1)}function oe(){return t==="."||/[eE]/.test(t)?(i.push(t),r=y,s=t,e+1):t==="x"&&i.length===1&&i[0]==="0"?(r=K,i.push(t),s=t,e+1):/[^\d]/.test(t)?(p(i.join("")),r=_,e):(i.push(t),s=t,e+1)}function ne(){return t==="f"&&(i.push(t),s=t,e+=1),/[eE]/.test(t)||(t==="-"||t==="+")&&/[eE]/.test(s)?(i.push(t),s=t,e+1):/[^\d]/.test(t)?(p(i.join("")),r=_,e):(i.push(t),s=t,e+1)}function se(){if(/[^\d\w_]/.test(t)){var u=i.join("");return O[u]?r=Se:x[u]?r=Ce:r=De,p(i.join("")),r=_,e}return i.push(t),s=t,e+1}}var Ee=_e,be=we;function we(a,e){var o=Ee(e),r=[];return r=r.concat(o(a)),r=r.concat(o(null)),r}const je=A(be);var Fe=Ie;function Ie(a){for(var e=[],o=0;o<a.length;o++)a[o].type!=="eof"&&e.push(a[o].data);return e.join("")}const q=A(Fe);var Re=Ae;function Ae(a){var e=null,o=null,r=0,t=0,s=0,i=0,f=0,h=[],c,n,m;for(c=0,n;c<a.length;c++)if(m=a[c],m.data==="{"){if(r&&r++||(n=g(c,v(")"),v()),n<0)||(i=n,n=g(n,v("("),v(")")),n<0)||(f=n,n=g(n,E),n<0)||a[n].type!=="ident"||(o=a[n].data,n=g(n,E),n<0))continue;r=1,t=c,e=a[n].data,s=n;var d=g(n,E);switch(a[d]&&a[d].data){case"lowp":case"highp":case"mediump":s=d}}else if(r&&m.data==="}"){if(--r)continue;h.push({name:o,type:e,body:[t+1,c],args:[f,i+1],outer:[s,c+1]})}for(c=0;c<a.length;c++)if(m=a[c],m.data===";"){if(n=g(c,v(")"),v()),n<0||(i=n,n=g(n,v("("),v(")")),n<0)||(f=n,n=g(n,E),n<0)||a[n].type!=="ident"||(o=a[n].data,n=g(n,E),n<0)||a[n].type==="operator"||a[n].data==="return")continue;e=a[n].data,h.push({name:o,type:e,body:!1,args:[f,i+1],outer:[n,c+1]})}return h.sort(function(D,M){return D.outer[0]-M.outer[0]});function g(D,M,C){for(var x=D-1;x>=0;x--){if(M(a[x]))return x;if(C&&C(a[x]))return-1}return-1}}function v(a){return function(e){return e.type==="operator"&&(!a||e.data===a)}}function E(a){return a.type!=="whitespace"}const Oe=A(Re);var l={position:"csm_Position",positionRaw:"csm_PositionRaw",pointSize:"csm_PointSize",fragColor:"csm_FragColor",diffuseColor:"csm_DiffuseColor",normal:"csm_Normal",roughness:"csm_Roughness",metalness:"csm_Metalness",emissive:"csm_Emissive"};const $e={["".concat(l.normal)]:{"#include <beginnormal_vertex>":"\n    vec3 objectNormal = ".concat(l.normal,";\n    #ifdef USE_TANGENT\n	    vec3 objectTangent = vec3( tangent.xyz );\n    #endif\n    ")},["".concat(l.position)]:{"#include <begin_vertex>":"\n    vec3 transformed = ".concat(l.position,";\n  ")},["".concat(l.positionRaw)]:{"#include <begin_vertex>":"\n    vec4 csm_positionUnprojected = ".concat(l.positionRaw,";\n    mat4x4 csm_unprojectMatrix = projectionMatrix * modelViewMatrix;\n    #ifdef USE_INSTANCING\n      csm_unprojectMatrix = csm_unprojectMatrix * instanceMatrix;\n    #endif\n    csm_positionUnprojected = inverse(csm_unprojectMatrix) * csm_positionUnprojected;\n    vec3 transformed = csm_positionUnprojected.xyz;\n  ")},["".concat(l.pointSize)]:{"gl_PointSize = size;":"\n    gl_PointSize = ".concat(l.pointSize,";\n    ")},["".concat(l.diffuseColor)]:{"#include <color_fragment>":"\n    #include <color_fragment>\n    diffuseColor = ".concat(l.diffuseColor,";\n  ")},["".concat(l.fragColor)]:{"#include <dithering_fragment>":"\n    #include <dithering_fragment>\n    gl_FragColor  = ".concat(l.fragColor,";\n  ")},["".concat(l.emissive)]:{"vec3 totalEmissiveRadiance = emissive;":"\n    vec3 totalEmissiveRadiance = ".concat(l.emissive,";\n    ")},["".concat(l.roughness)]:{"#include <roughnessmap_fragment>":"\n    #include <roughnessmap_fragment>\n    roughnessFactor = ".concat(l.roughness,";\n    ")},["".concat(l.metalness)]:{"#include <metalnessmap_fragment>":"\n    #include <metalnessmap_fragment>\n    metalnessFactor = ".concat(l.metalness,";\n    ")}},Le={["".concat(l.position)]:{"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );":"\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( ".concat(l.position,", 1.0 );\n  ")},["".concat(l.positionRaw)]:{"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );":"\n    gl_Position = ".concat(l.position,";\n  ")},["".concat(l.diffuseColor)]:{"gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );":"\n    gl_FragColor = ".concat(l.diffuseColor,";\n  ")},["".concat(l.fragColor)]:{"gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );":"\n    gl_FragColor = ".concat(l.fragColor,";\n  ")}},Ve="\n\n#ifdef IS_VERTEX\n    vec3 csm_Position = position;\n    vec4 csm_PositionRaw = projectionMatrix * modelViewMatrix * vec4(position, 1.);\n    vec3 csm_Normal = normal;\n#else\n    #if defined IS_SHADERMATERIAL || defined IS_MESHDEPTHMATERIAL || defined IS_MESHNORMALMATERIAL\n        vec4 csm_DiffuseColor = vec4(1., 0., 1., 1.);\n        vec4 csm_FragColor = vec4(1., 0., 1., 1.);\n    #else\n        #if defined IS_MESHSTANDARDMATERIAL || defined IS_MESHPHYSICALMATERIAL\n            vec3 csm_Emissive = emissive;\n            float csm_Roughness = roughness;\n            float csm_Metalness = metalness;\n        #endif\n        \n        #ifdef USE_MAP\n            vec4 _csm_sampledDiffuseColor = texture2D(map, vUv);\n\n            #ifdef DECODE_VIDEO_TEXTURE\n            // inline sRGB decode (TODO: Remove this code when https://crbug.com/1256340 is solved)\n            _csm_sampledDiffuseColor = vec4(mix(pow(_csm_sampledDiffuseColor.rgb * 0.9478672986 + vec3(0.0521327014), vec3(2.4)), _csm_sampledDiffuseColor.rgb * 0.0773993808, vec3(lessThanEqual(_csm_sampledDiffuseColor.rgb, vec3(0.04045)))), _csm_sampledDiffuseColor.w);\n            #endif\n\n            vec4 csm_DiffuseColor = vec4(diffuse, opacity) * _csm_sampledDiffuseColor;\n            vec4 csm_FragColor = vec4(diffuse, opacity) * _csm_sampledDiffuseColor;\n        #else\n            vec4 csm_DiffuseColor = vec4(diffuse, opacity);\n            vec4 csm_FragColor = vec4(diffuse, opacity);\n        #endif\n    #endif\n#endif\n",Ue=(a,e,o)=>a.split(e).join(o),ke=function(a){return a.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")},Be=(a,e)=>new RegExp("\\b".concat(ke(e),"\\b")).test(a);function Ne(a){try{new a}catch(e){if(e.message.indexOf("is not a constructor")>=0)return!1}return!0}class Ke extends ce{constructor(h){var c=h,{baseMaterial:e,fragmentShader:o,vertexShader:r,uniforms:t,patchMap:s,cacheKey:i}=c,f=k(c,["baseMaterial","fragmentShader","vertexShader","uniforms","patchMap","cacheKey"]);let n;if(Ne(e)?n=new e(f):(n=e,Object.assign(n,f)),n.type==="RawShaderMaterial")throw new Error("CustomShaderMaterial does not support RawShaderMaterial");super(),this.uniforms=t||{},this._customPatchMap=s||{},this._fs=o||"",this._vs=r||"",this._cacheKey=i,this._base=e,this._type=n.type,this._instanceID=ue.generateUUID();for(const m in n){let d=m;m.startsWith("_")&&(d=m.split("_")[1]),this[d]===void 0&&(this[d]=0),this[d]=n[d]}this.update({fragmentShader:o,vertexShader:r,uniforms:t,cacheKey:i})}update(e){const o=(e==null?void 0:e.uniforms)||{},r=(e==null?void 0:e.fragmentShader)||this._fs,t=(e==null?void 0:e.vertexShader)||this._vs,s=Object.values(o).reduce((i,{value:f})=>i+JSON.stringify(f),"");this.uuid=(e==null||e.cacheKey==null?void 0:e.cacheKey())||fe([r,t,s,this._instanceID]),this.generateMaterial({fragmentShader:r,vertexShader:t,uniforms:o})}clone(){const e=new this.constructor({baseMaterial:this._base,fragmentShader:this._fs,vertexShader:this._vs,patchMap:this._customPatchMap,uniforms:this.uniforms,cacheKey:this._cacheKey});for(const o in this)o!=="uuid"&&(e[o]=this[o]);return e}generateMaterial({fragmentShader:e,vertexShader:o,uniforms:r}){const t=this.parseShader(e),s=this.parseShader(o);this.uniforms=r||{},this.customProgramCacheKey=()=>this.uuid,this.onBeforeCompile=i=>{if(t){const f=this.patchShader(t,i.fragmentShader);i.fragmentShader=this.getMaterialDefine()+f}if(s){const f=this.patchShader(s,i.vertexShader);i.vertexShader="#define IS_VERTEX;\n"+f,i.vertexShader=this.getMaterialDefine()+i.vertexShader}i.uniforms=P(P({},i.uniforms),this.uniforms),this.uniforms=i.uniforms},this.needsUpdate=!0}getMaterialDefine(){return"#define IS_".concat(this._type.toUpperCase(),";\n")}getPatchMapForMaterial(){switch(this._type){case"ShaderMaterial":return Le;default:return $e}}patchShader(e,o){let r=o;const t=P(P({},this.getPatchMapForMaterial()),this._customPatchMap);return Object.keys(t).forEach(s=>{Object.keys(t[s]).forEach(i=>{Be(e.main,s)&&(r=Ue(r,i,t[s][i]))})}),r=r.replace("void main() {","\n          ".concat(e.header,"\n          void main() {\n            ").concat(Ve,"\n            ").concat(e.main,"\n          ")),r=e.defines+r,r}parseShader(e){if(!e)return;const o=e.replace(/\/\*\*(.*?)\*\/|\/\/(.*?)\n/gm,""),r=je(o),t=Oe(r),s=t.map(h=>h.name).indexOf("main"),i=q(r.slice(0,s>=0?t[s].outer[0]:void 0)),f=s>=0?this.getShaderFromIndex(r,t[s].body):"";return{defines:"",header:i,main:f}}getShaderFromIndex(e,o){return q(e.slice(o[0],o[1]))}}export{Ke as C,Oe as a,q as s,je as t};
