import{az as x,aB as C,aM as j,bm as k,at as R,b9 as E,a1 as B,l as F,ak as U,b3 as G,b5 as I,bg as $,w as m,a6 as A,o as w,c as O,Y as n,aa as M,ab as y,aT as u,a2 as f,ba as V,ad as N,aq as q,x as z,E as L,a8 as H,L as v,bb as K,a as b,ac as Y,ag as J}from"./vendor.w27jK__M1713875192787.js";import{_ as Q}from"./component.vue_vue_type_script_setup_true_lang.NpymSUgQ1713875192787.js";import"./index.vue_vue_type_script_setup_true_lang.NfWoEW5C1713875192787.js";import{s as X}from"./shaderMaterial.aE-of78u1713875192787.js";import{M as Z}from"./MeshDiscardMaterial.Gco_Abl11713875192787.js";function ee(h){return h.isLight}function ae(h){return!!h.geometry}const te=X({color:new x(0),blend:2,alphaTest:.75,opacity:0,map:null},"varying vec2 vUv;\n   void main() {\n     gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);\n     vUv = uv;\n   }","varying vec2 vUv;\n   uniform sampler2D map;\n   uniform vec3 color;\n   uniform float opacity;\n   uniform float alphaTest;\n   uniform float blend;\n   void main() {\n     vec4 sampledDiffuseColor = texture2D(map, vUv);\n     gl_FragColor = vec4(color * sampledDiffuseColor.r * blend, max(0.0, (1.0 - (sampledDiffuseColor.r + sampledDiffuseColor.g + sampledDiffuseColor.b) / alphaTest)) * opacity);\n     #include <tonemapping_fragment>\n     #include <".concat(parseInt(E.replace(/\D+/g,""))>=154?"colorspace_fragment":"encodings_fragment",">\n   }"));class se{constructor(e,o,l=1024){this.renderer=e,this.res=l,this.scene=o,this.buffer1Active=!1,this.lights=[],this.meshes=[],this.object=null,this.clearColor=new x,this.clearAlpha=0;const i=/(Android|iPad|iPhone|iPod)/g.test(navigator.userAgent)?k:R;this.progressiveLightMap1=new C(this.res,this.res,{type:i}),this.progressiveLightMap2=new C(this.res,this.res,{type:i}),this.discardMat=new Z,this.targetMat=new j({fog:!1}),this.previousShadowMap={value:this.progressiveLightMap1.texture},this.averagingWindow={value:100},this.targetMat.onBeforeCompile=t=>{t.vertexShader="varying vec2 vUv;\n"+t.vertexShader.slice(0,-1)+"vUv = uv; gl_Position = vec4((uv - 0.5) * 2.0, 1.0, 1.0); }";const d=t.fragmentShader.indexOf("void main() {");t.fragmentShader="varying vec2 vUv;\n"+t.fragmentShader.slice(0,d)+"uniform sampler2D previousShadowMap;\n	uniform float averagingWindow;\n"+t.fragmentShader.slice(d-1,-1)+"\nvec3 texelOld = texture2D(previousShadowMap, vUv).rgb;\n        gl_FragColor.rgb = mix(texelOld, gl_FragColor.rgb, 1.0/ averagingWindow);\n      }",t.uniforms.previousShadowMap=this.previousShadowMap,t.uniforms.averagingWindow=this.averagingWindow}}clear(){this.renderer.getClearColor(this.clearColor),this.clearAlpha=this.renderer.getClearAlpha(),this.renderer.setClearColor("black",1),this.renderer.setRenderTarget(this.progressiveLightMap1),this.renderer.clear(),this.renderer.setRenderTarget(this.progressiveLightMap2),this.renderer.clear(),this.renderer.setRenderTarget(null),this.renderer.setClearColor(this.clearColor,this.clearAlpha),this.lights=[],this.meshes=[],this.scene.traverse(e=>{ae(e)?this.meshes.push({object:e,material:e.material}):ee(e)&&this.lights.push({object:e,intensity:e.intensity})})}prepare(){this.lights.forEach(e=>e.object.intensity=0),this.meshes.forEach(e=>e.object.material=this.discardMat)}finish(){this.lights.forEach(e=>e.object.intensity=e.intensity),this.meshes.forEach(e=>e.object.material=e.material)}configure(e){this.object=e}update(e,o=100){if(!this.object)return;this.averagingWindow.value=o,this.object.material=this.targetMat;const l=this.buffer1Active?this.progressiveLightMap1:this.progressiveLightMap2,i=this.buffer1Active?this.progressiveLightMap2:this.progressiveLightMap1,t=this.scene.background;this.scene.background=null,this.renderer.setRenderTarget(l),this.previousShadowMap.value=i.texture,this.buffer1Active=!this.buffer1Active,this.renderer.render(this.scene,e),this.renderer.setRenderTarget(null),this.scene.background=t}}const ie=["rotate-x"],re=n("TresPlaneGeometry",{args:[1,1]},null,-1),oe=B({__name:"accumulativeShadowsCom",props:{opacity:{default:.8},alphaTest:{default:.9},color:{default:"#000000"},blend:{default:2},lightPosition:{default:{x:3,y:5,z:3}},frames:{default:60},blendWindow:{default:100},ambient:{default:.5}},setup(h){const e=h;let o=F();const{extend:l,scene:i,renderer:t,camera:d}=U();l({SoftShadowMaterial:te});const a={position:new G().set(e.lightPosition.x,e.lightPosition.y,e.lightPosition.z),radius:1,amount:8,intensity:Math.PI,bias:.001,mapSize:1024,size:8,near:.5,far:200},c=new se(t.value,i.value,a.mapSize),D={map:c.progressiveLightMap2.texture,transparent:!0,depthWrite:!1,toneMapped:!0,blend:e.blend,alphaTest:e.alphaTest,opacity:e.opacity,color:e.color},p=new I;for(let r=0;r<a.amount;r++){const s=new $(16777215,a.intensity/a.amount);s.castShadow=!0,s.shadow.bias=a.bias,s.shadow.camera.near=a.near,s.shadow.camera.far=a.far,s.shadow.camera.right=a.size/2,s.shadow.camera.left=-a.size/2,s.shadow.camera.top=a.size/2,s.shadow.camera.bottom=-a.size/2,s.shadow.mapSize.width=a.mapSize,s.shadow.mapSize.height=a.mapSize,p.add(s)}const W=()=>{const r=a.position.length();for(let s=0;s<p.children.length;s++){const T=p.children[s];if(Math.random()>e.ambient)T.position.set(a.position.x+u.randFloatSpread(a.radius),a.position.y+u.randFloatSpread(a.radius),a.position.z+u.randFloatSpread(a.radius));else{let g=Math.acos(2*Math.random()-1)-Math.PI/2,P=2*Math.PI*Math.random();T.position.set(Math.cos(g)*Math.cos(P)*r,Math.abs(Math.cos(g)*Math.sin(P)*r),Math.sin(g)*r)}}},_=(r=1)=>{i.value.add(p),c.prepare();for(let s=0;s<r;s++)W(),c.update(d.value,e.blendWindow),console.log("shadows plm update",s);i.value.remove(p),c.finish()};m(()=>o.value,r=>{r&&(c.configure(r),c.clear(),console.log("shadows render start"),_(e.frames),console.log("shadows render end"))});const S=()=>{c.clear(),_(e.frames)};return A(()=>{o.value&&(e.opacity&&(o.value.material.opacity=e.opacity),e.alphaTest&&(o.value.material.alphaTest=e.alphaTest),e.color&&o.value.material.color.set(e.color),e.blend&&(o.value.material.blend=e.blend))}),m(()=>e.lightPosition,r=>{r&&(console.log(e.lightPosition),a.position.set(r.x,r.y,r.z),S())},{deep:!0}),m(()=>[e.frames,e.blendWindow,e.ambient],()=>{S()}),(r,s)=>(w(),O("TresMesh",{"receive-shadow":"",ref_key:"gPlane",ref:o,scale:10,"rotate-x":-Math.PI/2},[re,n("TresSoftShadowMaterial",M(y(D)),null,16)],8,ie))}}),ne=n("TresPerspectiveCamera",{position:[2,3,4],fov:45,near:1,far:1e3},null,-1),le=n("TresAmbientLight",{intensity:.5},null,-1),he=n("TresMesh",{position:[2,.5,-1.5],"receive-shadow":"","cast-shadow":"",name:"sphere"},[n("TresSphereGeometry",{args:[.5]}),n("TresMeshStandardMaterial",{color:16724991,roughness:0,metalness:1})],-1),de=n("TresMesh",{position:[-1.5,.5,1.5],"receive-shadow":"","cast-shadow":"",name:"cube"},[n("TresCylinderGeometry",{args:[.5,.5,1]}),n("TresMeshStandardMaterial",{color:3407871,roughness:0,metalness:0})],-1),ce=n("TresMesh",{position:[0,.9,0],"receive-shadow":"","cast-shadow":"",name:"torus"},[n("TresTorusKnotGeometry",{args:[.5,.2,80,64]}),n("TresMeshStandardMaterial",{color:16777011,roughness:.3,metalness:.5})],-1),ve=B({__name:"accumulativeShadows",setup(h){const e=f({alpha:!0,shadows:!0,shadowMap:!0,toneMapping:V}),o=f({enableDamping:!0,autoRotate:!1}),l=N();A(()=>{if(l.value){const d=l.value.context.scene.value;d.background=new x("grey")}});const i=f({opacity:.8,alphaTest:.9,color:"#000000",blend:2,lightPosition:{x:3,y:5,z:3},frames:60,blendWindow:100,ambient:.5}),t=new q({title:"参数"});return t.addBinding(i,"opacity",{label:"透明度",min:0,max:1,step:.1}),t.addBinding(i,"alphaTest",{label:"透明检测",min:0,max:1,step:.1}),t.addBinding(i,"color",{label:"颜色"}),t.addBinding(i,"blend",{label:"颜色混合",min:0,max:3,step:.1}),t.addBinding(i,"lightPosition",{label:"光源位置",x:{min:-5,max:5},y:{min:1,max:5},z:{min:-5,max:5}}),t.addBinding(i,"frames",{label:"渲染帧数",min:1,max:100,step:1}),t.addBinding(i,"blendWindow",{label:"blend",min:1,max:100,step:1}),t.addBinding(i,"ambient",{label:"ambient",min:0,max:1,step:.1}),(d,a)=>(w(),z(v(K),H(e,{ref_key:"tcRef",ref:l,"window-size":""}),{default:L(()=>[ne,b(v(Y),M(y(o)),null,16),le,he,de,ce,b(oe,M(y(i)),null,16),(w(),z(J,null,{default:L(()=>[b(v(Q),{files:["pos-x.jpg","neg-x.jpg","pos-y.jpg","neg-y.jpg","pos-z.jpg","neg-z.jpg"],path:"https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/6jpg/"},null,8,["files"])]),_:1}))]),_:1},16))}});export{ve as default};
