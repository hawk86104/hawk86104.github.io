import{_ as t,a0 as n,at as e,V as o,T as r,ai as a}from"./three.YiCjTDWq1728554291399.js";import{U as i,z as s,Y as c,L as l}from"./@tresjs.IlQvaTJ91728554291399.js";import"./index.nXqu6hnr1728554291399.js";import{a as u}from"./simplex-noise.P9JMzoHY1728554291399.js";import{C as f}from"./index.Tylq_rsN1728554291399.js";import{d as p,a4 as h,o as m,E as v,L as d,u as g,r as x,f as w,g as y,j as b,aj as _,ak as z,al as M}from"./@vue.JNsx1iN61728554291399.js";import{_ as j}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.hjV7Fh5e1728554291399.js";import"./@vueuse.nb-8z3af1728554291399.js";import"./lamina.JXS4O5PL1728554291399.js";import"./glsl-tokenizer.y_V5nCRK1728554291399.js";import"./@amap.pS6gfiLZ1728554291399.js";import"./glsl-token-descope.kNglA35g1728554291399.js";import"./glsl-token-depth._OxNGkK61728554291399.js";import"./glsl-token-scope.GJEykiTj1728554291399.js";import"./glsl-token-properties.Ar59HIrh1728554291399.js";import"./glsl-token-assignments.YwkMchXc1728554291399.js";import"./glsl-token-string.dXz7aW6T1728554291399.js";import"./glsl-token-functions.ziXdc34f1728554291399.js";import"./object-hash.T8hJJgjS1728554291399.js";import"./jszip.ZN8xj_JH1728554291399.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.rA0UUvxk1728554291399.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.xClKaGH21728554291399.js";import"./three-stdlib.W1Z_QaHt1728554291399.js";import"./@pmndrs.X_zaObHB1728554291399.js";import"./utils.lUnFcBMD1728554291399.js";const I=B;function A(){const t=["InstancedBufferAttribute","log","action","sin","cos","PlaneGeometry","Vector3","orientationsF32","TresInstancedBufferGeometry","string","1940750GgzCWq","call","toneMapped","attributes-orientation","61196pFdSBm","stateObject","alphaMap","uniforms","value","table","debu","TresMesh","width","trace","translate","convertSRGBToLinear","42qLcqZG","attributes-uv","map","3815400clDYCp","needsUpdate","lookAt","halfRootAngleSinF32","6630792dEvGPK","stretchesF32","DoubleSide","constructor","apply","bind","TresMeshStandardMaterial","9868463QQeWEu","counter","99QWrxfQ","side","position","while (true) {}","toString","#000f00","test","grass","768104KHVGBv","push","index","error","geometry","random","computeVertexNormals","set","10fXzqWR","array","joints","input","material","Vector4","attributes-stretch","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","warn","attributes-halfRootAngleSin","2vlakpB",'{}.constructor("return this")( )',"Color","length","attributes","instances","attributes-halfRootAngleCos","info","gger","console","TresGroup","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","normalize","283202BwZscZ"];return(A=function(){return t})()}!function(t,n){const e=B,o=A();for(;;)try{if(538608===parseInt(e(354))/1*(-parseInt(e(367))/2)+parseInt(e(312))/3*(-parseInt(e(300))/4)+-parseInt(e(296))/5+parseInt(e(315))/6+parseInt(e(319))/7+-parseInt(e(336))/8*(parseInt(e(328))/9)+parseInt(e(344))/10*(parseInt(e(326))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[B(323)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){C(this,(function(){const t=B,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(365),"i"),o=L("init");n[t(334)](o+"chain")&&e[t(334)](o+t(347))?L():o("0")}))()}();const F=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[B(323)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();F(void 0,(function(){const t=B,n=function(){const t=B;let n;try{n=Function("return (function() "+t(355)+");")()}catch(e){n=window}return n}(),e=n[t(363)]=n[t(363)]||{},o=[t(369),t(352),t(361),t(339),"exception",t(305),t(309)];for(let r=0;r<o[t(357)];r++){const n=F[t(322)].prototype[t(324)](F),a=o[r],i=e[a]||n;n.__proto__=F.bind(F),n[t(332)]=i[t(332)][t(324)](i),e[a]=n}}))();const D=[I(348)],k=[I(338),"attributes-position",I(313),"attributes-offset",I(299),I(350),I(353),I(360)],R=[I(340)],S=[I(329)];function B(t,n){const e=A();return(B=function(t,n){return e[t-=288]})(t,n)}const E=p({__name:I(335),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(a){const c=I;let l,p;const x=([l,p]=h((()=>s({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),l=await l,p(),l),w=a,y=u(Math[c(341)]);function b(n,e){const o=c,r=n.x*e.w+n.y*e.z-n.z*e.y+n.w*e.x,a=-n.x*e.z+n.y*e.w+n.z*e.x+n.w*e.y,i=n.x*e.y-n.y*e.x+n.z*e.w+n.w*e.z,s=-n.x*e.x-n.y*e.y-n.z*e.z+n.w*e.w;return new(t[o(349)])(r,a,i,s)}function _(t,n){var e=2*y(t/50,n/50);return e+=4*y(t/100,n/100),e+=.2*y(t/10,n/10)}const z=function(n,a){const i=c,s=[],l=[],u=[],f=[],p=[];let h=new e,m=new(t[i(349)]);const v=-.25;for(let e=0;e<n;e++){const r=Math.random()*a-a/2,c=Math[i(341)]()*a-a/2,d=_(r,c);s.push(r,d,c);let g=Math.PI-Math[i(341)]()*(2*Math.PI);f.push(Math[i(289)](.5*g)),p[i(337)](Math.cos(.5*g));let x=new o(0,1,0),w=x.x*Math.sin(g/2),y=x.y*Math[i(289)](g/2),z=x.z*Math[i(289)](g/2),M=Math.cos(g/2);h[i(343)](w,y,z,M)[i(366)](),g=.5*Math[i(341)]()+v,x=new o(1,0,0),w=x.x*Math[i(289)](g/2),y=x.y*Math.sin(g/2),z=x.z*Math[i(289)](g/2),M=Math[i(290)](g/2),m[i(343)](w,y,z,M)[i(366)](),h=b(h,m),g=.5*Math[i(341)]()+v,x=new(t[i(292)])(0,0,1),w=x.x*Math[i(289)](g/2),y=x.y*Math[i(289)](g/2),z=x.z*Math[i(289)](g/2),M=Math[i(290)](g/2),m.set(w,y,z,M)[i(366)](),h=b(h,m),l[i(337)](h.x,h.y,h.z,h.w),e<n/3?u[i(337)](1.8*Math.random()):u[i(337)](Math.random())}return{offsetsF32:new(t[i(368)])(new Float32Array(s),3),orientationsF32:new(t[i(368)])(new Float32Array(l),4),stretchesF32:new(t[i(368)])(new Float32Array(u),1),halfRootAngleCosF32:new r(new Float32Array(p),1),halfRootAngleSinF32:new(t[i(368)])(new Float32Array(f),1)}}(w[c(359)],w[c(308)]),M=new(t[c(291)])(w.bW,w.bH,1,w[c(346)])[c(310)](0,w.bH/2,0),j=new(t[c(291)])(w[c(308)],w.width,32,32);j[c(317)](new(t[c(292)])(0,1,0));const A=j.attributes.position;for(let t=0;t<A[c(345)][c(357)];t+=3)A[c(345)][t+1]=_(A.array[t],A.array[t+2]);j[c(358)].position[c(316)]=!0,j[c(342)]();const C=new(f({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(t[c(356)])(.3,.9,0)[c(311)](),bottomColor:new(t[c(356)])(0,.2,0)[c(311)]()},"   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }",c(351),(n=>{const e=c;n.side=t[e(321)]})));C[c(314)]=x.map,C[c(302)]=x.alphaMap,C[c(298)]=!1;const{onLoop:F}=i();return F((({elapsed:t})=>{const n=c;C[n(303)].time[n(304)]=t/4})),(t,e)=>{const o=c;return m(),v(o(364),null,[d(o(307),{material:g(C)},[d(o(294),{index:g(M)[o(338)],"attributes-position":g(M).attributes[o(330)],"attributes-uv":g(M)[o(358)].uv,"attributes-offset":g(z).offsetsF32,"attributes-orientation":g(z)[o(293)],"attributes-stretch":g(z)[o(320)],"attributes-halfRootAngleSin":g(z)[o(318)],"attributes-halfRootAngleCos":g(z).halfRootAngleCosF32},null,8,k)],8,D),d(o(307),{position:[0,0,0],geometry:g(j)},[d(o(325),{color:o(333),side:n},null,8,S)],8,R)])}}});function L(t){function n(t){const e=B;if(typeof t===e(295))return function(t){}[e(322)](e(331))[e(323)](e(327));1!==(""+t/t).length||t%20==0?function(){return!0}.constructor(e(306)+e(362))[e(297)](e(288)):function(){return!1}[e(322)](e(306)+e(362))[e(323)](e(301)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const G=q;!function(t,n){const e=q,o=T();for(;;)try{if(452110===parseInt(e(504))/1*(-parseInt(e(491))/2)+-parseInt(e(493))/3*(-parseInt(e(499))/4)+-parseInt(e(489))/5*(-parseInt(e(509))/6)+parseInt(e(503))/7+-parseInt(e(486))/8*(parseInt(e(513))/9)+parseInt(e(510))/10+parseInt(e(484))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const P=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(498)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){P(this,(function(){const t=q,n=new RegExp(t(512)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=U("init");n[t(477)](o+t(502))&&e[t(477)](o+t(488))?U():o("0")}))()}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[q(498)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function T(){const t=["chain","887796DpGvzs","2QplFKG","length","gger","warn","info","1684944tPIRTz","4093690NBDDVe","stateObject","function *\\( *\\)","5396499iOaGyF","grass","prototype","error","string","test","__proto__","return (function() ","action","TresPerspectiveCamera","exception","console","225258UBhefF","trace","8YvIDDO","constructor","input","10JpsPYX","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","769702YzFnsu","counter","527325oyFpke","while (true) {}","toString","bind","call","apply","16zLtVXt","log","debu"];return(T=function(){return t})()}function q(t,n){const e=T();return(q=function(t,n){return e[t-=473]})(t,n)}O(void 0,(function(){const t=q,n=function(){const t=q;let n;try{n=Function(t(479)+'{}.constructor("return this")( ));')()}catch(e){n=window}return n}(),e=n[t(483)]=n.console||{},o=[t(500),t(507),t(508),t(475),t(482),"table",t(485)];for(let r=0;r<o[t(505)];r++){const n=O[t(487)][t(474)][t(496)](O),a=o[r],i=e[a]||n;n[t(478)]=O.bind(O),n[t(495)]=i[t(495)][t(496)](i),e[a]=n}}))();const H=d(G(481),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1),V=p({__name:G(473),setup(t){const n=x({alpha:!0,toneMapping:a,windowSize:!0,clearColor:6710886}),e=x({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=q;return m(),w(g(l),_(z(n)),{default:y((()=>[H,b(g(c),_(z(e)),null,16),(m(),w(M,null,{default:y((()=>[b(E)])),_:1})),(m(),w(M,null,{default:y((()=>[b(g(j),{texture:r(490)})])),_:1}))])),_:1},16)}}});function U(t){function n(t){const e=q;if(typeof t===e(476))return function(t){}[e(487)](e(494)).apply(e(492));1!==(""+t/t).length||t%20==0?function(){return!0}.constructor(e(501)+e(506))[e(497)](e(480)):function(){return!1}.constructor("debugger")[e(498)](e(511)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{V as default};
