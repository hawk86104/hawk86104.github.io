import{p as t,$ as n,N as e,d as o}from"./@tresjs.zzLYikgQ1723608367756.js";import{a6 as r,T as s,k as a,V as i,al as c,j as l,M as u,o as v,W as f,l as p,aV as d,cG as g,bV as m}from"./three.X8FgZbPT1723608367756.js";import{P as x}from"./tweakpane.yHWGBmom1723608367756.js";import{d as h,a4 as y,e as I,o as b,f as _,g as S,J as w,j as U,u as P,aj as D,ak as E,al as A,m as L}from"./@vue.Q1VpS3901723608367756.js";import{_ as M}from"./@fesjs.v28izi2B1723608367756.js";import"./@vueuse.QL9lULrD1723608367756.js";import"./vue-router.Hmvx0_Do1723608367756.js";import"./lodash-es.nFpJXAf-1723608367756.js";import"./@qlin.yHhFDldE1723608367756.js";import"./pinia.KbXOifkD1723608367756.js";import"./@floating-ui.BPbuo5Gx1723608367756.js";import"./@juggle.7yjBMqoW1723608367756.js";!function(t,n){const e=N,o=T();for(;;)try{if(148169===-parseInt(e(525))/1*(-parseInt(e(499))/2)+parseInt(e(487))/3*(-parseInt(e(524))/4)+-parseInt(e(520))/5+parseInt(e(535))/6+parseInt(e(509))/7*(parseInt(e(513))/8)+-parseInt(e(489))/9*(parseInt(e(493))/10)+parseInt(e(529))/11*(parseInt(e(519))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const F=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[N(502)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){F(this,(function(){const t=N,n=new RegExp(t(518)),e=new RegExp(t(507),"i"),o=B("init");n[t(545)](o+t(517))&&e[t(545)](o+t(488))?B():o("0")}))()}();const z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[N(502)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();z(void 0,(function(){const t=N;let n;try{n=Function('return (function() {}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(527)]=n[t(527)]||{},o=["log",t(494),t(547),t(511),"exception",t(539),t(515)];for(let s=0;s<o[t(528)];s++){const n=z[t(516)][t(490)][t(538)](z),r=o[s],a=e[r]||n;n.__proto__=z.bind(z),n[t(505)]=a[t(505)].bind(a),e[r]=n}}))();function C(t,n,e){const o=N;if(typeof t!==o(526)||null===t)return t;const r=Array[o(542)](t)?[]:{};for(const s in t)t[o(510)](s)&&(r[s]=C(t[s])),s==n&&(r[n]=e);return r}function T(){const t=["isArray","now","action","test","open","info","3pNnVzR","input","666SKbTJU","prototype","send","responseText","27910wXIIjL","warn","onabort","Vector4","Vector3","value","64368pprIxJ","lastIndex","string","apply","random","message","toString","onload","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","while (true) {}","63mAaOYW","hasOwnProperty","error","v3v","192056tXiaAB","onerror","trace","constructor","chain","function *\\( *\\)","12bRQwfS","648285sKlgjG",'Shader "',"get","Vector2","996740mKFULk","6OeGdBP","object","console","length","432641HFNUyQ","Texture","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","WagnerLoadShaderException","Matrix3","type","1710282AiWXaI","counter","exec","bind","table","Matrix2","debu"];return(T=function(){return t})()}function N(t,n){const e=T();return(N=function(t,n){return e[t-=487]})(t,n)}function B(t){function n(t){const e=N;if(typeof t===e(501))return function(t){}[e(516)](e(508))[e(502)](e(536));1!==(""+t/t).length||t%20==0?function(){return!0}[e(516)](e(541)+"gger").call(e(544)):function(){return!1}[e(516)]("debugger")[e(502)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const G=V;!function(t,n){const e=V,o=O();for(;;)try{if(192439===parseInt(e(220))/1*(parseInt(e(151))/2)+parseInt(e(155))/3+parseInt(e(195))/4*(parseInt(e(233))/5)+-parseInt(e(239))/6*(-parseInt(e(230))/7)+-parseInt(e(204))/8+parseInt(e(149))/9+parseInt(e(244))/10*(-parseInt(e(210))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const R=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[V(226)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){R(this,(function(){const t=V,n=new RegExp(t(203)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=H(t(192));n[t(235)](o+t(218))&&e[t(235)](o+t(224))?H():o("0")}))()}();const j=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function V(t,n){const e=O();return(V=function(t,n){return e[t-=146]})(t,n)}function O(){const t=["clone","trace","quad","string","action","pass","Mesh","height","material","setRenderTarget","uuid","counter","swapBuffers","toScreen","gger","loadShadervf","write","add","wrapS","projectionMatrix","settings","now","near","magFilter","getOfflineTexture","MeshBasicMaterial","bind","wrapT","innerWidth","stateObject","init","log","uniforms","2972LgaJAX","useRGBA","front","copyPass","debu","startTime","Reset","onWindowResize","function *\\( *\\)","1080376wYeegl","tInput","value","setSize","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","passItems","2533597IqQvsd","RGBAFormat","OrthographicCamera","time","far","back","minFilter","console","chain","render","178yBkKBM","push","shader","info","input","width","apply","toString","ClampToEdgeWrapping","Stack","154NSLKgf","set","read","535TvbaTQ","camera","test","RGBFormat","removePass","length","101406AgbnJx","splice","renderer","constructor","type","30OvAABv","exception","scene","addPass","PlaneGeometry","2146212ntShSZ","WebGLRenderTarget","2882ZJEefY","stencilBuffer","LinearFilter","innerHeight","216534zaOdyw","makeOrthographic","resolution","CopyPass","UnsignedByteType","Pass","params"];return(O=function(){return t})()}j(void 0,(function(){const t=V;let n;try{n=Function('return (function() {}.constructor("return this")( ));')()}catch(r){n=window}const e=n.console=n[t(217)]||{},o=[t(193),"warn",t(223),"error",t(245),"table",t(163)];for(let s=0;s<o[t(238)];s++){const n=j[t(242)].prototype[t(188)](j),r=o[s],a=e[r]||n;n.__proto__=j[t(188)](j),n[t(227)]=a[t(227)][t(188)](a),e[r]=n}}))();class k{constructor(t,n){const e=V;this.width=1,this[e(169)]=1,this.settings=n||{},this.useRGBA=this[e(182)][e(196)]||!1,this[e(241)]=t,this[e(198)]=this[e(158)](this.settings),this[e(146)]=new v,this[e(164)]=new(r[e(168)])(new(r[e(148)])(1,1),new(r[e(187)])),this[e(146)][e(179)](this.quad),this.camera=new(r[e(212)])(1,1,1,1,-1e4,1e4),this[e(197)]=new f(1,1,{minFilter:void 0!==this[e(182)][e(216)]?this.settings.minFilter:r[e(153)],magFilter:void 0!==this.settings.magFilter?this[e(182)][e(185)]:r[e(153)],wrapS:void 0!==this[e(182)][e(180)]?this.settings.wrapS:r[e(228)],wrapT:void 0!==this[e(182)][e(189)]?this[e(182)][e(189)]:r[e(228)],format:this[e(196)]?r[e(211)]:r[e(236)],type:void 0!==this.settings.type?this[e(182)][e(243)]:r[e(159)],stencilBuffer:void 0===this[e(182)][e(152)]||this.settings[e(152)]}),this[e(215)]=this[e(197)][e(162)](),this[e(200)]=Date[e(183)](),this.passes={},this[e(229)]={passItems:[],passes:[]}}[G(147)](t,n,e,o){const r=G;this.loadShadervf(n);const s={shaderName:t,params:e,uuid:o,shader:this.shader};this[r(229)][r(209)][r(221)](s)}[G(237)](t){const n=G;for(let e=this.Stack[n(209)].length-1;e>=0;e--)this[n(229)][n(209)][e][n(172)]===parseInt(t)&&this[n(229)][n(209)][n(240)](e,1);console[n(193)](this[n(229)][n(209)])}CopyPass(){const t=G;this[t(160)].call(this);return this[t(177)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[G(177)](t){const n=G,e=n(208);return this[n(222)]=function(t,n){const e=N,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,v=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,f={sampler2D:{type:"t",value:()=>new(r[N(530)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[N(523)])},vec3:{type:"v3",value:()=>new i},vec4:{type:"v4",value:()=>new c},bvec2:{type:"v2",value:()=>new(r[N(523)])},bvec3:{type:"v3",value:()=>new i},bvec4:{type:"v4",value:()=>new(r[N(496)])},ivec2:{type:"v2",value:()=>new l},ivec3:{type:"v3",value:()=>new(r[N(497)])},ivec4:{type:"v4",value:()=>new(r[N(496)])},mat2:{type:"v2",value:()=>new(r[N(540)])},mat3:{type:"v3",value:()=>new(r[N(533)])},mat4:{type:"v4",value:()=>new u}},p={float:{type:"fv",value:()=>[]},vec3:{type:e(512),value:()=>[]}};let d;const g={resolution:{type:"v2",value:new(r[e(523)])(1,1),default:!0},time:{type:"f",value:Date[e(543)](),default:!0},tInput:{type:"t",value:new s,default:!0}};let m,x;for(;null!==(d=o[e(537)](n));)d.index===o[e(500)]&&o[e(500)]++,m=d[1],x=d[2],g[x]={type:f[m][e(534)],value:f[m][e(498)]()};for(;null!==(d=v[e(537)](n));)d.index===o[e(500)]&&o[e(500)]++,m=d[1],x=d[2],d[3],g[x]={type:p[m][e(534)],value:p[m][e(498)]()};return new a({uniforms:g,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(222)]}[G(160)](t){this[G(222)]=null,this.params={}}[G(201)](){const t=G;this[t(232)]=this.front,this[t(178)]=this.back}[G(202)](t,n){const e=G,o=window[e(190)],r=window[e(154)];t[e(207)](1*o,1*r),n[e(181)].makePerspective(70,o/r,n[e(184)],n[e(214)]),this[e(207)](o,r);return this[e(186)](o,r,!0)}[G(207)](t,n){const e=G;this.width=t,this[e(169)]=n,this[e(234)][e(181)][e(156)](t/-2,t/2,n/2,n/-2,this[e(234)][e(184)],this.camera[e(214)]),this[e(164)].scale.set(t,n,1),this[e(197)][e(207)](t,n),this[e(215)][e(207)](t,n)}[G(186)](t,n,e){const o=G;return new(r[o(150)])(t,n,{minFilter:p,magFilter:r[o(153)],format:e?d:g})}[G(219)](t,n,e,o){const r=G;this[r(241)][r(171)](this.write),this[r(241)].render(t,n),o||this.swapBuffers()}[G(174)](){const t=G,n=this[t(178)];this[t(178)]=this[t(232)],this[t(232)]=n}[G(167)](){const t=G;for(let n=0;n<this[t(229)][t(209)].length;n++){const e=this[t(229)][t(209)][n][t(222)],o=this.Stack[t(209)][n][t(161)];if(this[t(241)].setRenderTarget(this.write),e instanceof a){this[t(164)][t(170)]=e,this[t(164)].material.uniforms[t(205)][t(206)]=this[t(232)].texture,this[t(164)][t(170)][t(194)][t(157)].value.set(this[t(225)],this[t(169)]),this[t(164)][t(170)][t(194)][t(213)][t(206)]=.001*(Date.now()-this[t(200)]);for(const n in o)this[t(164)].material.uniforms[n].value=o[n];this.renderer.render(this[t(146)],this.camera),this[t(174)]()}}}[G(175)](t,n){const e=G;this.renderer.setRenderTarget(null),this.quad[e(170)]=this[e(198)],this[e(164)][e(170)][e(194)].tInput[e(206)]=this[e(232)].texture,this[e(164)].material[e(194)][e(157)][e(206)][e(231)](this[e(225)],this[e(169)]),this[e(241)][e(219)](this[e(146)],this.camera)}}function H(t){function n(t){const e=V;if(typeof t===e(165))return function(t){}[e(242)]("while (true) {}")[e(226)](e(173));1!==(""+t/t)[e(238)]||t%20==0?function(){return!0}[e(242)](e(199)+e(176)).call(e(166)):function(){return!1}[e(242)](e(199)+e(176)).apply(e(191)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const W="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",X=J;!function(t,n){const e=J,o=$();for(;;)try{if(765784===-parseInt(e(493))/1+parseInt(e(531))/2*(-parseInt(e(543))/3)+-parseInt(e(483))/4+-parseInt(e(499))/5*(parseInt(e(508))/6)+parseInt(e(487))/7+parseInt(e(500))/8+-parseInt(e(525))/9*(-parseInt(e(519))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[J(520)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){q(this,(function(){const t=J,n=new RegExp(t(494)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=K(t(495));n[t(536)](o+t(549))&&e[t(536)](o+t(505))?K():o("0")}))()}();const Z=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[J(520)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function $(){const t=["chain","table","SOBELPass","postProcessing","dispose","render","FREICHENPass","action","CIRCULARPass","addPass","change","4932124BTtnKL","pass","plugins/postProcessing/image/1324-normal.jpg","addButton","7618695WSAVjl","POISSONPass","while (true) {}","translate","FXAAPass","VIGNETTE1Pass","949857penkLx","function *\\( *\\)","init","onWindowResize","warn","addBlade","6248140VHcBdE","5346624dpkkrN","values","return (function() ","BOXBLURPass","constructor","input","keys","debu","6yBJYmg","BufferGeometry","SNOISEPass","stateObject","label","random","BoxGeometry","length","push","info","castShadow","10sMzHaT","apply","Mesh","MeshPhongMaterial","log","Vector2","28629297MFfGic","DENOISEPass","error","add","receiveShadow","exception","4mLlTcu","value","gger","target","移除~","test","toScreen","click","bind","mergeGeometries","TOONPass",'{}.constructor("return this")( )',"1109169BIvSLU","addFolder","removePass","__proto__","map","toString"];return($=function(){return t})()}function J(t,n){const e=$();return(J=function(t,n){return e[t-=473]})(t,n)}Z(void 0,(function(){const t=J,n=function(){const t=J;let n;try{n=Function(t(502)+t(542)+");")()}catch(e){n=window}return n}(),e=n.console=n.console||{},o=[t(523),t(497),t(517),t(527),t(530),t(473),"trace"];for(let r=0;r<o[t(515)];r++){const n=Z[t(504)].prototype[t(539)](Z),s=o[r],a=e[s]||n;n[t(546)]=Z.bind(Z),n[t(548)]=a.toString[t(539)](a),e[s]=n}}))();function K(t){function n(t){const e=J;if("string"==typeof t)return function(t){}[e(504)](e(489))[e(520)]("counter");1!==(""+t/t)[e(515)]||t%20==0?function(){return!0}[e(504)]("debugger").call(e(479)):function(){return!1}[e(504)](e(507)+e(533))[e(520)](e(511)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const Q=M(h({__name:X(475),async setup(o){const s=X;let a,i;const{camera:c,renderer:l,scene:u,sizes:v}=t();for(var f=new(r[s(509)]),p=[],d=0;d<100;d++){var g=new(r[s(514)])(100,100,100);g[s(490)](1500*Math[s(513)](),1500*Math[s(513)](),1500*Math.random()),p[s(516)](g)}f=m[s(540)](p);const h=([a,i]=y((()=>e({map:"plugins/postProcessing/image/1324.jpg"}))),a=await a,i(),a),I=([a,i]=y((()=>e({map:s(485)}))),a=await a,i(),a);var b=new(r[s(522)])({map:h[s(547)],normalMap:I[s(547)],normalScale:new(r[s(524)])(.8,-.8),shininess:100}),_=new(r[s(521)])(f,b);_[s(518)]=!0,_[s(529)]=!0,u[s(532)][s(528)](_);const S=new k(l[s(532)],{useRGBA:!0}),w=new x;let U=null,P=[{text:"InvertPass",value:{InvertPass:W}},{text:s(491),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:"SEPIAPass",value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:s(510),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:s(503),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:s(526),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:"CGAPass",value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:I.map}}},{text:s(474),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:"RGBPass",value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:"DOTPass",value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:s(480),value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:s(488),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:s(492),value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:"VIGNETTE2Pass",value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:s(478),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:s(541),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],D="InvertPass",E=W,A=null;w[s(498)]({view:"list",label:"后处理类型",options:P,value:""}).on(s(482),(t=>{U=t[s(532)]}));const L=w[s(486)]({title:"新增",label:"新增通道"});let M=0;L.on(s(538),(t=>{const n=s;D=Object[n(506)](U)[0],E=Object[n(501)](U)[0],A=Object.values(U)[1];let e=M++,o=w[n(544)]({title:D});for(const s in A){let t=A[s];o[n(498)]({view:"text",label:s,parse:t=>String(t),value:t})}o[n(486)]({title:n(535)+e,label:"关闭通道"}).on(n(538),(t=>{const e=n;let o=t.target.title.split("~")[1];S[e(545)](o)})).on(n(538),(()=>{o[n(476)]()}));let r=C(A,t[n(534)][n(512)],t[n(532)]);S[n(481)](D,E,r,e)})),S[s(496)](l[s(532)],c[s(532)]);const{onLoop:F}=n();return F((({delta:t})=>{const n=s;_&&(l[n(532)].autoClearColor=!0,S.Reset(),_.material=b,S[n(477)](u.value,c[n(532)]),S[n(484)](),S[n(537)](u[n(532)],c[n(532)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),Y=et;!function(t,n){const e=et,o=at();for(;;)try{if(985535===-parseInt(e(300))/1*(parseInt(e(281))/2)+parseInt(e(289))/3*(-parseInt(e(282))/4)+-parseInt(e(278))/5*(parseInt(e(304))/6)+parseInt(e(291))/7+parseInt(e(302))/8*(parseInt(e(272))/9)+parseInt(e(265))/10*(-parseInt(e(294))/11)+parseInt(e(268))/12*(parseInt(e(309))/13))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const tt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[et(292)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){tt(this,(function(){const t=et,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(286),"i"),o=ct(t(267));n[t(271)](o+t(288))&&e[t(271)](o+t(274))?ct():o("0")}))()}();const nt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[et(292)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function et(t,n){const e=at();return(et=function(t,n){return e[t-=265]})(t,n)}nt(void 0,(function(){const t=et,n=function(){const t=et;let n;try{n=Function(t(290)+t(308)+");")()}catch(e){n=window}return n}(),e=n.console=n.console||{},o=[t(285),"warn","info",t(276),t(269),"table",t(310)];for(let r=0;r<o.length;r++){const n=nt[t(287)][t(299)][t(270)](nt),s=o[r],a=e[s]||n;n[t(305)]=nt[t(270)](nt),n[t(273)]=a[t(273)][t(270)](a),e[s]=n}}))();const ot={ref:"perspectiveCameraRef",position:[600,850,-1500],fov:45,near:.1,far:1e5},rt=w(Y(307),{color:Y(295),intensity:2},null,-1),st=w(Y(279),{position:[100,100,0],intensity:2,color:Y(295)},null,-1);function at(){const t=["prototype","2276DxcuRx","postProcessingEditor","960MLfHub","gger","6418014kZgyvd","__proto__","length","TresAmbientLight",'{}.constructor("return this")( )',"40208324wREagu","trace","2090QGgJnq","TresCanvas","init","24ilYEuy","exception","bind","test","7299diuFHL","toString","input","#000000","error","manual","5IsSuGy","TresDirectionalLight","while (true) {}","1612wZwTbt","296muTKuf","string","call","log","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","constructor","chain","23613zidkZO","return (function() ","980854qTxKXB","apply","TresPerspectiveCamera","102696CXxNsz","#ffffff","debu","action","stateObject"];return(at=function(){return t})()}const it=h({__name:Y(301),setup(t){const e=Y,r={clearColor:e(275),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(277)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=I(a(266));return b(),_(i,L(r,{"window-size":""}),{default:S((()=>[w(a(293),ot,null,512),U(P(o),D(E(s)),null,16),rt,st,(b(),_(A,null,{default:S((()=>[U(Q)])),_:1}))])),_:1},16)}}});function ct(t){function n(t){const e=et;if(typeof t===e(283))return function(t){}[e(287)](e(280))[e(292)]("counter");1!==(""+t/t)[e(306)]||t%20==0?function(){return!0}[e(287)]("debu"+e(303))[e(284)](e(297)):function(){return!1}.constructor(e(296)+"gger")[e(292)](e(298)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{it as default};
