import{U as n,Y as t}from"./@tresjs.C5O8roW51726740218347.js";import{a0 as e,aN as r}from"./three.MbBECAu81726740218347.js";import{_ as o}from"./argestCircle.iQbYZf4A1726740218347.js";import{d as i,e as s,o as a,f as u,g as c,L as f,j as l,u as p,aj as v,ak as d,m}from"./@vue.JNsx1iN61726740218347.js";import"./@vueuse.18lbrd2F1726740218347.js";const h=L;!function(n,t){const e=L,r=T();for(;;)try{if(173121===-parseInt(e(138))/1+parseInt(e(149))/2*(parseInt(e(139))/3)+parseInt(e(162))/4*(parseInt(e(168))/5)+-parseInt(e(147))/6*(parseInt(e(161))/7)+parseInt(e(170))/8+-parseInt(e(137))/9+-parseInt(e(154))/10)break;r.push(r.shift())}catch(o){r.push(r.shift())}}();const g=function(){let n=!0;return function(t,e){const r=n?function(){if(e){const n=e[L(133)](t,arguments);return e=null,n}}:function(){};return n=!1,r}}();function T(){const n=["633IinYIt","length","console","function *\\( *\\)","counter","rotation-x","TresAmbientLight","chain","223842hvMbEi","test","1604ODAVel","call","debu","action","TresPlaneGeometry","746710xpZoem","error","uTime","TresPerspectiveCamera","init","#000000","return (function() ","7pRnjhS","4pwIAcP","#ffffff","value","TresGridHelper","TresMesh","TresDirectionalLight","753370aLhwLJ","constructor","840488ERWCCd","gger","\nvarying vec2 vUv;\nuniform float uTime;\nvec3 palette(float t) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(sin(uTime * 0.2) * 0.5 + 0.5, cos(uTime * 0.25) * 0.5 + 0.5, sin(uTime * 0.3 + 1.0) * 0.5 + 0.5);\n    \n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nvoid main(){\n    vec2 uv = vUv-vec2(0.5);\n    \n    float angle = atan(uv.y, uv.x);\n    float radius = length(uv);\n    \n    int sides = int(5.0 + 4.0 * sin(uTime * 0.5)); \n    angle = mod(angle, 6.28318 / float(sides)) * float(sides);\n    \n    vec2 uv0 = vec2(radius, angle);\n    vec3 finalColor = vec3(0.0);\n    \n    for(float i = 0.0; i < 5.0; i++) {\n        uv0.x = fract(uv0.x * (1.5 + 0.1 * sin(uTime)));\n        \n        float d = uv0.x * exp(-radius);\n\n        vec3 col = palette(uv0.x + i * 0.4 + uTime * 0.4);\n\n        d = sin(d * (8.0 + 4.0 * sin(uTime * 0.1)) + uTime) / 8.0;\n        d = abs(d);\n\n        d = pow(0.01 / d, 1.2 + 0.1 * sin(uTime));\n\n        finalColor += col * d;\n    }\n    \n    gl_FragColor = vec4(finalColor, 1.0);\n}\n","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","table","toString","log","__proto__","uniforms","exception","while (true) {}","string","prototype","tunnel","apply","trace","quanMeshRef","TresShaderMaterial","269316mFqeWx","109934OfwmmS"];return(T=function(){return n})()}!function(){g(this,(function(){const n=L,t=new RegExp(n(142)),e=new RegExp(n(173),"i"),r=S(n(158));t[n(148)](r+n(146))&&e[n(148)](r+"input")?S():r("0")}))()}();const x=function(){let n=!0;return function(t,e){const r=n?function(){if(e){const n=e[L(133)](t,arguments);return e=null,n}}:function(){};return n=!1,r}}();x(void 0,(function(){const n=L,t=function(){const n=L;let t;try{t=Function(n(160)+'{}.constructor("return this")( ));')()}catch(e){t=window}return t}(),e=t[n(141)]=t[n(141)]||{},r=[n(125),"warn","info",n(155),n(128),n(123),n(134)];for(let o=0;o<r[n(140)];o++){const t=x.constructor[n(131)].bind(x),i=r[o],s=e[i]||t;t[n(126)]=x.bind(x),t[n(124)]=s[n(124)].bind(s),e[i]=t}}))();const b={ref:"perspectiveCameraRef",position:[600,750,-1221],fov:45,near:1,far:1e4},I=f(h(145),{color:"#ffffff"},null,-1),w=f(h(167),{position:[100,100,0],intensity:.5,color:h(163)},null,-1),y=[h(144)],j=f(h(153),{args:[1e3,1e3]},null,-1),C=f("TresAxesHelper",{args:[1e3],position:[0,19,0]},null,-1),_=f(h(165),{args:[6e3,100],position:[0,19,0]},null,-1);function L(n,t){const e=T();return(L=function(n,t){return e[n-=123]})(n,t)}const R=h(172),A=i({__name:h(132),setup(i){const g=h,T={clearColor:g(159),shadows:!0,alpha:!1,useLegacyLights:!0},x={autoRotate:!0,enableDamping:!0},L={uniforms:{uTime:{type:"f",value:0}},vertexShader:o,fragmentShader:R,side:e,blending:r,depthWrite:!1,transparent:!0},{onLoop:A}=n();return A((({delta:n})=>{const t=g;L[t(127)][t(156)][t(164)]+=n})),(n,e)=>{const r=g,o=s("TresCanvas");return a(),u(o,m(T,{"window-size":""}),{default:c((()=>[f(r(157),b,null,512),l(p(t),v(d(x)),null,16),I,w,f(r(166),{ref:r(135),position:[0,100,0],"rotation-x":2*Math.PI/360*90},[j,f(r(136),v(d(L)),null,16)],8,y),C,_])),_:1},16)}}});function S(n){function t(n){const e=L;if(typeof n===e(130))return function(n){}[e(169)](e(129)).apply(e(143));1!==(""+n/n).length||n%20==0?function(){return!0}[e(169)](e(151)+e(171))[e(150)](e(152)):function(){return!1}[e(169)](e(151)+e(171))[e(133)]("stateObject"),t(++n)}try{if(n)return t;t(0)}catch(e){}}export{A as default};
