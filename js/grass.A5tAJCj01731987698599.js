import{t,_ as n,V as e,T as o,ai as r}from"./three.3RwiW87x1731987698599.js";import{e as a,b as i,U as s,c}from"./@tresjs.juy9qkLz1731987698599.js";import"./index.NMeb5O0h1731987698599.js";import{a as l}from"./simplex-noise.Yx8GBgKo1731987698599.js";import{C as u}from"./index.4a46bABZ1731987698599.js";import{d as f,a6 as p,o as h,D as m,J as v,u as d,r as g,f as x,g as y,j as w,aj as b,ak as _,al as M}from"./@vue.-THQH3GC1731987698599.js";import{_ as j}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.-SDXCFIY1731987698599.js";import"./@vueuse.R8VPJfVr1731987698599.js";import"./lamina.4OfEbPRu1731987698599.js";import"./glsl-tokenizer.rw-VPP3r1731987698599.js";import"./@amap.8HDR-twf1731987698599.js";import"./glsl-token-descope.e1sW-yx41731987698599.js";import"./glsl-token-depth.B7-ZRvbq1731987698599.js";import"./glsl-token-scope._2QHN4Sx1731987698599.js";import"./glsl-token-properties.NlMy-fLR1731987698599.js";import"./glsl-token-assignments.I2bzyANq1731987698599.js";import"./glsl-token-string.UJ6iPAFo1731987698599.js";import"./glsl-token-functions.vCjxdXJB1731987698599.js";import"./object-hash.mkbyWU6f1731987698599.js";import"./jszip.RFL6OsWf1731987698599.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.IVHnxWN51731987698599.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.Q4uGTUT41731987698599.js";import"./three-stdlib.JdNLeali1731987698599.js";import"./@pmndrs.QyZXChNO1731987698599.js";import"./utils.zjOSE7_r1731987698599.js";const z=C;!function(t,n){const e=C,o=R();for(;;)try{if(418819===parseInt(e(397))/1*(parseInt(e(380))/2)+-parseInt(e(383))/3+parseInt(e(411))/4*(parseInt(e(376))/5)+-parseInt(e(448))/6*(parseInt(e(414))/7)+-parseInt(e(404))/8*(parseInt(e(431))/9)+parseInt(e(399))/10+-parseInt(e(372))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(416)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){A(this,(function(){const t=C,n=new RegExp("function *\\( *\\)"),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=P(t(428));n[t(434)](o+t(371))&&e[t(434)](o+t(377))?P():o("0")}))()}();const I=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(416)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function C(t,n){const e=R();return(C=function(t,n){return e[t-=371]})(t,n)}I(void 0,(function(){const t=C;let n;try{n=Function(t(425)+t(386)+");")()}catch(r){n=window}const e=n[t(409)]=n.console||{},o=[t(446),"warn",t(433),t(405),t(378),t(385),t(439)];for(let a=0;a<o[t(401)];a++){const n=I[t(442)].prototype[t(379)](I),r=o[a],i=e[r]||n;n[t(427)]=I.bind(I),n[t(421)]=i[t(421)][t(379)](i),e[r]=n}}))();const k=[z(406)],F=[z(375),z(374),"attributes-uv",z(393),z(394),z(424),z(389),z(373)],S=[z(381)],D=["side"];function R(){const t=["TresInstancedBufferGeometry","constructor","TresMesh","while (true) {}","convertSRGBToLinear","log","instances","36198ViFWdK","chain","791692xKspvW","attributes-halfRootAngleCos","attributes-position","index","5WOPdTx","input","exception","bind","522510FHHubf","geometry","array","317289XgAzGh","computeVertexNormals","table",'{}.constructor("return this")( )',"PlaneGeometry","normalize","attributes-halfRootAngleSin","Color","joints","InstancedBufferAttribute","attributes-offset","attributes-orientation","action","Vector4","1JAQBEM","TresMeshStandardMaterial","3646710FmyPjE","width","length","toneMapped","side","2144PpBkhY","error","material","cos","alphaMap","console","gger","1395368DBiEzn","set","Vector3","154raNmAj","counter","apply","value","#000f00","string","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","toString","sin","halfRootAngleSinF32","attributes-stretch","return (function() ","push","__proto__","init","uniforms","debu","8244XpCdTC","attributes","info","test","DoubleSide","call","random","position","trace","stateObject"];return(R=function(){return t})()}const T=f({__name:"grass",props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(r){const s=z;let c,f;const g=([c,f]=p((()=>i({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),c=await c,f(),c),x=r,y=l(Math[s(437)]);function w(t,e){const o=s,r=t.x*e.w+t.y*e.z-t.z*e.y+t.w*e.x,a=-t.x*e.z+t.y*e.w+t.z*e.x+t.w*e.y,i=t.x*e.y-t.y*e.x+t.z*e.w+t.w*e.z,c=-t.x*e.x-t.y*e.y-t.z*e.z+t.w*e.w;return new(n[o(396)])(r,a,i,c)}function b(t,n){var e=2*y(t/50,n/50);return e+=4*y(t/100,n/100),e+=.2*y(t/10,n/10)}const _=function(t,e){const r=s,a=[],i=[],c=[],l=[],u=[];let f=new(n[r(396)]),p=new(n[r(396)]);const h=-.25;for(let o=0;o<t;o++){const s=Math.random()*e-e/2,m=Math[r(437)]()*e-e/2,v=b(s,m);a[r(426)](s,v,m);let d=Math.PI-Math[r(437)]()*(2*Math.PI);l.push(Math[r(422)](.5*d)),u[r(426)](Math[r(407)](.5*d));let g=new(n[r(413)])(0,1,0),x=g.x*Math[r(422)](d/2),y=g.y*Math[r(422)](d/2),_=g.z*Math.sin(d/2),M=Math[r(407)](d/2);f.set(x,y,_,M).normalize(),d=.5*Math.random()+h,g=new(n[r(413)])(1,0,0),x=g.x*Math[r(422)](d/2),y=g.y*Math[r(422)](d/2),_=g.z*Math[r(422)](d/2),M=Math[r(407)](d/2),p[r(412)](x,y,_,M)[r(388)](),f=w(f,p),d=.5*Math[r(437)]()+h,g=new(n[r(413)])(0,0,1),x=g.x*Math[r(422)](d/2),y=g.y*Math[r(422)](d/2),_=g.z*Math[r(422)](d/2),M=Math[r(407)](d/2),p[r(412)](x,y,_,M)[r(388)](),f=w(f,p),i[r(426)](f.x,f.y,f.z,f.w),o<t/3?c[r(426)](1.8*Math[r(437)]()):c[r(426)](Math[r(437)]())}return{offsetsF32:new(n[r(392)])(new Float32Array(a),3),orientationsF32:new o(new Float32Array(i),4),stretchesF32:new(n[r(392)])(new Float32Array(c),1),halfRootAngleCosF32:new o(new Float32Array(u),1),halfRootAngleSinF32:new o(new Float32Array(l),1)}}(x[s(447)],x[s(400)]),M=new t(x.bW,x.bH,1,x[s(391)]).translate(0,x.bH/2,0),j=new(n[s(387)])(x[s(400)],x[s(400)],32,32);j.lookAt(new e(0,1,0));const A=j[s(432)].position;for(let t=0;t<A[s(382)].length;t+=3)A[s(382)][t+1]=b(A.array[t],A[s(382)][t+2]);j[s(432)][s(438)].needsUpdate=!0,j[s(384)]();const I=new(u({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(n[s(390)])(.3,.9,0).convertSRGBToLinear(),bottomColor:new(n[s(390)])(0,.2,0)[s(445)]()},"   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }",s(420),(t=>{const e=s;t[e(403)]=n[e(435)]})));I.map=g.map,I[s(408)]=g[s(408)],I[s(402)]=!1;const{onLoop:C}=a();return C((({elapsed:t})=>{const n=s;I[n(429)].time[n(417)]=t/4})),(t,e)=>{const o=s;return h(),m("TresGroup",null,[v(o(443),{material:d(I)},[v(o(441),{index:d(M).index,"attributes-position":d(M).attributes.position,"attributes-uv":d(M)[o(432)].uv,"attributes-offset":d(_).offsetsF32,"attributes-orientation":d(_).orientationsF32,"attributes-stretch":d(_).stretchesF32,"attributes-halfRootAngleSin":d(_)[o(423)],"attributes-halfRootAngleCos":d(_).halfRootAngleCosF32},null,8,F)],8,k),v("TresMesh",{position:[0,0,0],geometry:d(j)},[v(o(398),{color:o(418),side:n[o(435)]},null,8,D)],8,S)])}}});function P(t){function n(t){const e=C;if(typeof t===e(419))return function(t){}.constructor(e(444)).apply(e(415));1!==(""+t/t)[e(401)]||t%20==0?function(){return!0}.constructor("debu"+e(410))[e(436)](e(395)):function(){return!1}[e(442)](e(430)+"gger").apply(e(440)),n(++t)}try{if(t)return n;n(0)}catch(e){}}function E(t,n){const e=O();return(E=function(t,n){return e[t-=233]})(t,n)}const B=E;!function(t,n){const e=E,o=O();for(;;)try{if(391435===-parseInt(e(264))/1+parseInt(e(265))/2*(-parseInt(e(271))/3)+parseInt(e(253))/4+-parseInt(e(249))/5*(parseInt(e(236))/6)+-parseInt(e(273))/7*(-parseInt(e(238))/8)+parseInt(e(251))/9+-parseInt(e(234))/10*(-parseInt(e(252))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[E(246)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function O(){const t=["3197528jRbDVz","toString","stateObject","exception","call","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","TresPerspectiveCamera","__proto__","apply","debu","table","81965GZcUCV","action","4687506IaTOPk","99AeHqPT","1988380BZGMpI","chain","bind",'{}.constructor("return this")( )',"test","while (true) {}","console","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","string","length","init","546335QsvsSm","2urcbsU","error","trace","info","warn","constructor","207741CKYXUU","prototype","7kDQbVg","gger","grass","17350uVXTpb","counter","156PaEhfC","log"];return(O=function(){return t})()}!function(){H(this,(function(){const t=E,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(260),"i"),o=G(t(263));n[t(257)](o+t(254))&&e[t(257)](o+"input")?G():o("0")}))()}();const U=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[E(246)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();U(void 0,(function(){const t=E;let n;try{n=Function("return (function() "+t(256)+");")()}catch(r){n=window}const e=n[t(259)]=n.console||{},o=[t(237),t(269),t(268),t(266),t(241),t(248),t(267)];for(let a=0;a<o[t(262)];a++){const n=U[t(270)][t(272)][t(255)](U),r=o[a],i=e[r]||n;n[t(245)]=U[t(255)](U),n[t(239)]=i[t(239)][t(255)](i),e[r]=n}}))();const V=f({__name:B(233),setup(t){const n=g({alpha:!0,toneMapping:r,windowSize:!0,clearColor:6710886}),e=g({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=E;return h(),x(d(c),b(_(n)),{default:y((()=>[o[0]||(o[0]=v(r(244),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),w(d(s),b(_(e)),null,16),(h(),x(M,null,{default:y((()=>[w(T)])),_:1})),(h(),x(M,null,{default:y((()=>[w(d(j),{texture:r(243)})])),_:1}))])),_:1},16)}}});function G(t){function n(t){const e=E;if(typeof t===e(261))return function(t){}.constructor(e(258))[e(246)](e(235));1!==(""+t/t)[e(262)]||t%20==0?function(){return!0}[e(270)](e(247)+e(274))[e(242)](e(250)):function(){return!1}.constructor(e(247)+"gger")[e(246)](e(240)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{V as default};
