import{_ as t,C as n,b as e,T as o,ar as r,ai as a}from"./three.OosFxi571739442316051.js";import{e as i,a as s,o as c,f as l}from"./@tresjs.4XV_x0mI1739442316051.js";import"./index.Qqu4jDWb1739442316051.js";import{c as u}from"./simplex-noise.jB2HxhHB1739442316051.js";import{C as f}from"./index.MAqtmckJ1739442316051.js";import{d as p,a3 as h,o as m,H as v,N as d,u as g,r as x,f as w,g as y,j as b,aj as _,ak as j,al as M}from"./@vue.NRI7TcgI1739442316051.js";import{_ as z}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.b8A_MVAC1739442316051.js";import"./@vueuse.u4XqlOuT1739442316051.js";import"./lamina.mcOXMBUs1739442316051.js";import"./glsl-tokenizer._80kKbLN1739442316051.js";import"./@amap.VoZ91NZx1739442316051.js";import"./glsl-token-descope.w8YI8GTG1739442316051.js";import"./glsl-token-depth.eyXGqzKK1739442316051.js";import"./glsl-token-scope.xFkOwLsu1739442316051.js";import"./glsl-token-properties.j9t_PvYr1739442316051.js";import"./glsl-token-assignments.HEeLqgxQ1739442316051.js";import"./glsl-token-string.DLCFkCrD1739442316051.js";import"./glsl-token-functions.n0wWZBo91739442316051.js";import"./object-hash.cS-r0IEj1739442316051.js";import"./jszip.KhsC7S4k1739442316051.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.3JnXiutx1739442316051.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.n9NiBdo81739442316051.js";import"./three-stdlib.5JCQavfA1739442316051.js";import"./@pmndrs.uSiemGA_1739442316051.js";import"./utils.bUrKavMN1739442316051.js";const A=R;!function(t,n){const e=R,o=k();for(;;)try{if(774551===parseInt(e(441))/1+parseInt(e(411))/2*(parseInt(e(442))/3)+parseInt(e(466))/4*(-parseInt(e(426))/5)+parseInt(e(478))/6*(parseInt(e(445))/7)+-parseInt(e(444))/8*(parseInt(e(462))/9)+parseInt(e(424))/10*(parseInt(e(416))/11)+-parseInt(e(467))/12*(parseInt(e(450))/13))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const I=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(463)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){I(this,(function(){const t=R,n=new RegExp(t(421)),e=new RegExp(t(431),"i"),o=B(t(481));n[t(425)](o+t(404))&&e.test(o+t(415))?B():o("0")}))()}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(463)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function k(){const t=["405YjCIhJ","apply","push","trace","3908228OqvkWA","886608zlEJdA","value","halfRootAngleCosF32","call","stateObject","translate","TresGroup","set","TresMeshStandardMaterial","attributes-halfRootAngleSin","InstancedBufferAttribute","6219498QNVMbk","needsUpdate","convertSRGBToLinear","init","info","console",'{}.constructor("return this")( )',"DoubleSide","index","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","chain","joints","prototype","attributes-orientation","toString","material","TresMesh","8kwdrpL","sin","action","warn","input","3686848LIyRwv","gger","cos","return (function() ","constructor","function *\\( *\\)","Vector3","computeVertexNormals","20lEwwAn","test","5knwcGh","stretchesF32","string","attributes-offset","attributes-position","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","random","halfRootAngleSinF32","geometry","PlaneGeometry","array","TresInstancedBufferGeometry","lookAt","side","uniforms","1480334DHNish","731589TzdlGT","map","126536FhvmeV","7agiDax","bind","width","debu","time","299gcjkyK","position","alphaMap","attributes","error","normalize","__proto__","counter","while (true) {}","Vector4","length","exception"];return(k=function(){return t})()}function R(t,n){const e=k();return(R=function(t,n){return e[t-=400]})(t,n)}C(void 0,(function(){const t=R;let n;try{n=Function(t(419)+t(400)+");")()}catch(r){n=window}const e=n[t(483)]=n[t(483)]||{},o=["log",t(414),t(482),t(454),t(461),"table",t(465)];for(let a=0;a<o.length;a++){const n=C[t(420)][t(406)][t(446)](C),r=o[a],i=e[r]||n;n[t(456)]=C[t(446)](C),n[t(408)]=i[t(408)][t(446)](i),e[r]=n}}))();const S=[A(409)],F=[A(402),A(430),"attributes-uv",A(429),A(407),"attributes-stretch",A(476),"attributes-halfRootAngleCos"],D=[A(434)],T=[A(439)],L=p({__name:"grass",props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(a){const c=A;let l,p;const x=([l,p]=h((()=>s({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),l=await l,p(),l),w=a,y=u(Math[c(432)]);function b(t,n){const e=t.x*n.w+t.y*n.z-t.z*n.y+t.w*n.x,o=-t.x*n.z+t.y*n.w+t.z*n.x+t.w*n.y,a=t.x*n.y-t.y*n.x+t.z*n.w+t.w*n.z,i=-t.x*n.x-t.y*n.y-t.z*n.z+t.w*n.w;return new r(e,o,a,i)}function _(t,n){var e=2*y(t/50,n/50);return e+=4*y(t/100,n/100),e+=.2*y(t/10,n/10)}const j=function(n,r){const a=c,i=[],s=[],l=[],u=[],f=[];let p=new(t[a(459)]),h=new(t[a(459)]);const m=-.25;for(let o=0;o<n;o++){const c=Math.random()*r-r/2,v=Math[a(432)]()*r-r/2,d=_(c,v);i[a(464)](c,d,v);let g=Math.PI-Math[a(432)]()*(2*Math.PI);u.push(Math.sin(.5*g)),f.push(Math[a(418)](.5*g));let x=new(t[a(422)])(0,1,0),w=x.x*Math[a(412)](g/2),y=x.y*Math[a(412)](g/2),j=x.z*Math[a(412)](g/2),M=Math[a(418)](g/2);p[a(474)](w,y,j,M)[a(455)](),g=.5*Math[a(432)]()+m,x=new e(1,0,0),w=x.x*Math.sin(g/2),y=x.y*Math.sin(g/2),j=x.z*Math.sin(g/2),M=Math[a(418)](g/2),h[a(474)](w,y,j,M)[a(455)](),p=b(p,h),g=.5*Math[a(432)]()+m,x=new(t[a(422)])(0,0,1),w=x.x*Math.sin(g/2),y=x.y*Math.sin(g/2),j=x.z*Math.sin(g/2),M=Math.cos(g/2),h.set(w,y,j,M)[a(455)](),p=b(p,h),s.push(p.x,p.y,p.z,p.w),o<n/3?l[a(464)](1.8*Math[a(432)]()):l[a(464)](Math[a(432)]())}return{offsetsF32:new o(new Float32Array(i),3),orientationsF32:new o(new Float32Array(s),4),stretchesF32:new(t[a(477)])(new Float32Array(l),1),halfRootAngleCosF32:new o(new Float32Array(f),1),halfRootAngleSinF32:new(t[a(477)])(new Float32Array(u),1)}}(w.instances,w[c(447)]),M=new(t[c(435)])(w.bW,w.bH,1,w[c(405)])[c(472)](0,w.bH/2,0),z=new(t[c(435)])(w[c(447)],w.width,32,32);z[c(438)](new(t[c(422)])(0,1,0));const I=z[c(453)].position;for(let t=0;t<I[c(436)][c(460)];t+=3)I[c(436)][t+1]=_(I[c(436)][t],I[c(436)][t+2]);z[c(453)][c(451)][c(479)]=!0,z[c(423)]();const C=new(f({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new n(.3,.9,0).convertSRGBToLinear(),bottomColor:new n(0,.2,0)[c(480)]()},"   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }",c(403),(n=>{const e=c;n[e(439)]=t[e(401)]})));C[c(443)]=x[c(443)],C[c(452)]=x.alphaMap,C.toneMapped=!1;const{onLoop:k}=i();return k((({elapsed:t})=>{const n=c;C[n(440)][n(449)][n(468)]=t/4})),(n,e)=>{const o=c;return m(),v(o(473),null,[d(o(410),{material:g(C)},[d(o(437),{index:g(M)[o(402)],"attributes-position":g(M).attributes.position,"attributes-uv":g(M)[o(453)].uv,"attributes-offset":g(j).offsetsF32,"attributes-orientation":g(j).orientationsF32,"attributes-stretch":g(j)[o(427)],"attributes-halfRootAngleSin":g(j)[o(433)],"attributes-halfRootAngleCos":g(j)[o(469)]},null,8,F)],8,S),d("TresMesh",{position:[0,0,0],geometry:g(z)},[d(o(475),{color:"#000f00",side:t[o(401)]},null,8,T)],8,D)])}}});function B(t){function n(t){const e=R;if(typeof t===e(428))return function(t){}[e(420)](e(458))[e(463)](e(457));1!==(""+t/t).length||t%20==0?function(){return!0}[e(420)]("debu"+e(417))[e(470)](e(413)):function(){return!1}[e(420)](e(448)+e(417))[e(463)](e(471)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const E=H;!function(t,n){const e=H,o=P();for(;;)try{if(917488===-parseInt(e(378))/1*(parseInt(e(365))/2)+parseInt(e(379))/3*(parseInt(e(349))/4)+-parseInt(e(382))/5+parseInt(e(359))/6+-parseInt(e(363))/7+parseInt(e(385))/8+-parseInt(e(350))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[H(364)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){O(this,(function(){const t=H,n=new RegExp(t(368)),e=new RegExp(t(354),"i"),o=q("init");n.test(o+t(373))&&e[t(377)](o+t(352))?q():o("0")}))()}();const G=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function H(t,n){const e=P();return(H=function(t,n){return e[t-=349]})(t,n)}function P(){const t=["call","gger","debu","TresPerspectiveCamera","6149736Wpetdg","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","return (function() ","table","2684101wyrFjx","apply","274iRCLAG","grass","while (true) {}","function *\\( *\\)","console","string","info","stateObject","chain",'{}.constructor("return this")( )',"bind","prototype","test","6397jaiWOZ","17373ZBBNuj","warn","constructor","3732915kjawlI","action","toString","6673504hmpRGp","length","788byuByF","684612SCdMXt","trace","input","exception","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)"];return(P=function(){return t})()}G(void 0,(function(){const t=H;let n;try{n=Function(t(361)+t(374)+");")()}catch(r){n=window}const e=n[t(369)]=n.console||{},o=["log",t(380),t(371),"error",t(353),t(362),t(351)];for(let a=0;a<o[t(386)];a++){const n=G[t(381)][t(376)].bind(G),r=o[a],i=e[r]||n;n.__proto__=G[t(375)](G),n.toString=i[t(384)][t(375)](i),e[r]=n}}))();const N=p({__name:E(366),setup(t){const n=x({alpha:!0,toneMapping:a,windowSize:!0,clearColor:6710886}),e=x({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=H;return m(),w(g(l),_(j(n)),{default:y((()=>[o[0]||(o[0]=d(r(358),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),b(g(c),_(j(e)),null,16),(m(),w(M,null,{default:y((()=>[b(L)])),_:1})),(m(),w(M,null,{default:y((()=>[b(g(z),{texture:r(360)})])),_:1}))])),_:1},16)}}});function q(t){function n(t){const e=H;if(typeof t===e(370))return function(t){}[e(381)](e(367))[e(364)]("counter");1!==(""+t/t)[e(386)]||t%20==0?function(){return!0}[e(381)](e(357)+e(356))[e(355)](e(383)):function(){return!1}[e(381)](e(357)+e(356))[e(364)](e(372)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{N as default};
