import{_ as e,ak as n}from"./three.-uH5I3Xp1735517803200.js";import{e as t,U as a,b as o}from"./@tresjs.0qL_P2CE1735517803200.js";import{P as r}from"./tweakpane.yHWGBmom1735517803200.js";import{d as i,a6 as l,X as s,e as u,o as c,f,g as v,J as p,j as m,u as d,m as h,aj as g,ak as x}from"./@vue.-THQH3GC1735517803200.js";import"./@vueuse.oT9wchAS1735517803200.js";!function(e,n){const t=b,a=w();for(;;)try{if(832265===-parseInt(t(279))/1+parseInt(t(268))/2*(-parseInt(t(299))/3)+parseInt(t(294))/4*(parseInt(t(273))/5)+parseInt(t(306))/6*(parseInt(t(287))/7)+-parseInt(t(286))/8+parseInt(t(298))/9+parseInt(t(280))/10)break;a.push(a.shift())}catch(o){a.push(a.shift())}}();const y=function(){let e=!0;return function(n,t){const a=e?function(){if(t){const e=t[b(263)](n,arguments);return t=null,e}}:function(){};return e=!1,a}}();!function(){y(this,(function(){const e=b,n=new RegExp(e(277)),t=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),a=_(e(296));n[e(276)](a+"chain")&&t.test(a+e(282))?_():a("0")}))()}();const T=function(){let e=!0;return function(n,t){const a=e?function(){if(t){const e=t[b(263)](n,arguments);return t=null,e}}:function(){};return e=!1,a}}();function b(e,n){const t=w();return(b=function(e,n){return t[e-=262]})(e,n)}function w(){const e=["bind","length","#ffffff","粒子大小","TresCanvas","24AAPcTe","__proto__","init","TresMesh","11451771YsxfYB","40641GLTrNY","TresIcosahedronGeometry","TresGroup","value","error","uTime","exception","1158xvxqbe","action","constructor","change","addBinding","FrontSide","rotation","gger","apply","uniforms","stateObject","TresMeshBasicMaterial","return (function() ","128ywBoIy","TresShaderMaterial","#080820","toString","info","929725TNHEDL","debu","pointSize","test","function *\\( *\\)","海浪变化速度","1626482RbbPkr","16424610xQbekH","while (true) {}","input","TresPerspectiveCamera","wireframeMaterialRef","counter","12899792nkkpnu","32921ioacaT","color"];return(w=function(){return e})()}T(void 0,(function(){const e=b,n=function(){const e=b;let n;try{n=Function(e(267)+'{}.constructor("return this")( ));')()}catch(t){n=window}return n}(),t=n.console=n.console||{},a=["log","warn",e(272),e(303),e(305),"table","trace"];for(let o=0;o<a[e(290)];o++){const n=T[e(308)].prototype[e(289)](T),r=a[o],i=t[r]||n;n[e(295)]=T.bind(T),n[e(271)]=i[e(271)][e(289)](i),t[r]=n}}))();const S=i({__name:"pointsEarth",async setup(i){const y=b;let T,w;const S={color:"#17c5a9",pointSize:4},_={clearColor:"#122148",shadows:!1,alpha:!1,outputColorSpace:n},z={color:S.color,wireframe:!0,transparent:!0,opacity:.2},j=([T,w]=l((()=>o(["./plugins/earthSample/image/pointsEarth/00_earthmap1k.jpg","./plugins/earthSample/image/pointsEarth/circle.png","./plugins/earthSample/image/pointsEarth/04_rainbow1k.jpg","./plugins/earthSample/image/pointsEarth/01_earthbump1k.jpg","./plugins/earthSample/image/pointsEarth/02_earthspec1k.jpg"]))),T=await T,w(),T),E=j[0],P=j[1],k=j[2],D=j[3],A=j[4],I={uniforms:{size:{type:"f",value:S[y(275)]},uTime:{type:"f",value:0},uWaveHeight:{type:"f",value:.075},uWaveSpeed:{type:"f",value:.2},colorTexture:{type:"t",value:k},elevTexture:{type:"t",value:D},alphaTexture:{type:"t",value:A},earthTexture:{type:"t",value:E},starTexture:{type:"t",value:P}},vertexShader:"  uniform float size;\n  uniform sampler2D elevTexture;\n  uniform sampler2D alphaTexture;\n  uniform float uTime;\n  uniform float uWaveHeight;\n  uniform float uWaveSpeed;\n\n  varying vec2 vUv;\n  varying float vVisible;\n  varying float vAlpha;\n  varying float vElevation;\n  // Function to generate fBm with vec3 input\n  float random(vec3 st) {\n    return fract(sin(dot(st.xyz, vec3(12.9898,78.233,45.164))) * 43758.5453123);\n}\n\nfloat noise(vec3 st) {\n    vec3 i = floor(st);\n    vec3 f = fract(st);\n\n    // Eight corners in 3D of a tile\n    float a = random(i);\n    float b = random(i + vec3(1.0, 0.0, 0.0));\n    float c = random(i + vec3(0.0, 1.0, 0.0));\n    float d = random(i + vec3(1.0, 1.0, 0.0));\n    float e = random(i + vec3(0.0, 0.0, 1.0));\n    float f1 = random(i + vec3(1.0, 0.0, 1.0));\n    float g = random(i + vec3(0.0, 1.0, 1.0));\n    float h = random(i + vec3(1.0, 1.0, 1.0));\n\n    vec3 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(mix(mix(a, b, u.x), mix(c, d, u.x), u.y),\n               mix(mix(e, f1, u.x), mix(g, h, u.x), u.y), u.z);\n}\n\nfloat fbm(vec3 st) {\n    float value = 0.0;\n    float amplitude = 0.5;\n\n    for (int i = 0; i < 5; i++) {\n        value += amplitude * noise(st);\n        st *= 2.0;\n        amplitude *= 0.5;\n    }\n    return value;\n}\n\n  void main() {\n    vUv = uv;\n    float alphaLand = 1.0 - texture2D(alphaTexture, vUv).r;\n    vAlpha = alphaLand;\n    vec3 newPosition = position;\n\n    if(alphaLand < 0.5) {\n      // Sea\n      // fBm for wave-like displacement\n      float waveHeight = uWaveHeight; // Adjust wave height as needed\n      float waveSpeed = uWaveSpeed;  // Adjust wave speed as needed\n      float displacement = (fbm(newPosition * 5.0 + uTime * waveSpeed) * 2.0 - 1.0) * waveHeight;\n      vElevation = displacement;\n      newPosition += normal * displacement ;\n    }\n\n    vec4 mvPosition = modelViewMatrix * vec4( newPosition, 1.0 );\n    float elv = texture2D(elevTexture, vUv).r;\n    vec3 vNormal = normalMatrix * normal;\n    vVisible = step(0.0, dot( -normalize(mvPosition.xyz), normalize(vNormal)));\n    mvPosition.z += 0.45 * elv;\n\n    // 求出 mvPosition 距离相机的距离\n    float dist = length(mvPosition.xyz);\n    // 根据距离调整 size\n    float pointSize = size * (1.0 - dist / 10.0);\n    gl_PointSize = max(pointSize, 1.0);\n    gl_PointSize = pointSize;\n    gl_Position = projectionMatrix * mvPosition;\n  }\n",fragmentShader:"  uniform sampler2D colorTexture;\n  // uniform sampler2D alphaTexture;\n  uniform sampler2D earthTexture;\n  uniform sampler2D starTexture;\n\n  varying vec2 vUv;\n  varying float vVisible;\n  varying float vAlpha;\n  varying float vElevation;\n\n  void main() {\n    if (floor(vVisible + 0.1) == 0.0) discard;\n    vec2 coord = gl_PointCoord;\n    float alpha = texture2D(starTexture, coord).a;\n    // 根据 alpha 值来裁剪形状\n    if (alpha < 0.1) discard;\n\n    // float alphaLand = 1.0 - texture2D(alphaTexture, vUv).r;\n    vec3 color = texture2D(colorTexture, vUv).rgb;\n    vec3 earth = texture2D(earthTexture, vUv).rgb;\n    color = mix(color, earth, 0.65);\n    if(\n      vAlpha > 0.5\n    ) {\n      gl_FragColor = vec4(color, vAlpha);\n    }else {\n      // 对于海洋部分，根据 vElevation 调整颜色\n      float elevationEffect = clamp(vElevation*30.0, -1.0, 1.0); // 将 vElevation 限制在 [-1, 1] 范围内\n      vec3 deep_sea_blue = vec3(0.004, 0.227, 0.388);\n      vec3 adjustedColor = mix(deep_sea_blue, earth*1.75, (elevationEffect + 1.0) * 0.5); // 根据 vElevation 调整颜色\n      gl_FragColor = vec4(adjustedColor, 1.0-vAlpha);\n    }\n  }\n",transparent:!0,side:e[y(311)]},C=s(),H=s(),U=(new r).addFolder({title:"Debug"});U[y(310)](S,y(288),{type:y(288)}).on(y(309),(({value:e})=>{const n=y;H[n(302)][n(288)].set(e)})),U[y(310)](I[y(264)].size,y(302),{min:.1,max:10,step:.1,label:y(292)}),U[y(310)](I[y(264)].uWaveHeight,"value",{min:.01,max:.5,step:.01,label:"海浪高度"}),U.addBinding(I[y(264)].uWaveSpeed,y(302),{min:.01,max:1,step:.01,label:y(278)});const{onLoop:L}=t();return L((({delta:e})=>{const n=y;C[n(302)]&&(C[n(302)][n(312)].y+=.002,I[n(264)][n(304)][n(302)]+=10*e)})),(e,n)=>{const t=y,o=u(t(293));return c(),f(o,h(_,{"window-size":""}),{default:v((()=>[n[2]||(n[2]=p(t(283),{position:[0,0,3.5],fov:45,near:.1,far:20},null,-1)),m(d(a),{autoRotate:!0,autoRotateSpeed:2}),p(t(301),{ref_key:"groupRef",ref:C},[p(t(297),null,[n[0]||(n[0]=p(t(300),{args:[1,4]},null,-1)),p(t(266),h({ref_key:t(284),ref:H},z),null,16)]),p("TresPoints",null,[n[1]||(n[1]=p(t(300),{args:[1,128]},null,-1)),p(t(269),g(x(I)),null,16)])],512),n[3]||(n[3]=p("TresHemisphereLight",{args:[t(291),t(270),3]},null,-1))])),_:1},16)}}});function _(e){function n(e){const t=b;if("string"==typeof e)return function(e){}[t(308)](t(281))[t(263)](t(285));1!==(""+e/e)[t(290)]||e%20==0?function(){return!0}[t(308)](t(274)+t(262)).call(t(307)):function(){return!1}[t(308)]("debu"+t(262))[t(263)](t(265)),n(++e)}try{if(e)return n;n(0)}catch(t){}}export{S as default};
