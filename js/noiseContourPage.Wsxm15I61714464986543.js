import{a1 as D,ak as M,aD as B,bj as F,aB as A,aH as U,a6 as b,o as n,c as k,Y as e,L as l,ap as d,G as L,a9 as G,aI as m,as as V,r as z,x as p,E as h,a8 as $,a as g,ac as j,ag as I}from"./vendor.JeFZ2T0u1714464986543.js";import{S as _,E as H,R as W}from"./EffectComposer.fZ7Xm77D1714464986543.js";import"./Pass.-mWq9otM1714464986543.js";const X=["side","rotation-x"],Y=e("TresBoxGeometry",{args:[400,400,400]},null,-1),q=e("TresMeshPhongMaterial",{color:"#ffffff",shininess:0},null,-1),J=[Y,q],K=["side"],O=e("TresSphereGeometry",{args:[50,32,32]},null,-1),Q=e("TresMeshPhongMaterial",{color:"#ffffff",shininess:0},null,-1),Z=[O,Q],x="\n    varying vec2 vUv;\n    void main() {\n        vec4 mvPosition = modelViewMatrix * vec4(position, 1.);\n        gl_Position = projectionMatrix * mvPosition;\n        vUv = uv;\n    }\n",ee="\n    uniform sampler2D tDiffuse;\n    uniform sampler2D tShadow;\n    uniform vec2 iResolution;\n\n    varying vec2 vUv;\n    #define Sensitivity (vec2(0.3, 1.5) * iResolution.y / 400.0)\n    float checkSame(vec4 center, vec4 samplef)\n    {\n        vec2 centerNormal = center.xy;\n        float centerDepth = center.z;\n        vec2 sampleNormal = samplef.xy;\n        float sampleDepth = samplef.z;\n\n        vec2 diffNormal = abs(centerNormal - sampleNormal) * Sensitivity.x;\n        bool isSameNormal = (diffNormal.x + diffNormal.y) < 0.1;\n        float diffDepth = abs(centerDepth - sampleDepth) * Sensitivity.y;\n        bool isSameDepth = diffDepth < 0.1;\n\n        return (isSameNormal && isSameDepth) ? 1.0 : 0.0;\n    }\n\n    void main( )\n    {\n        vec4 sample0 = texture2D(tDiffuse, vUv);\n        vec4 sample1 = texture2D(tDiffuse, vUv + (vec2(1.0, 1.0) / iResolution.xy));\n        vec4 sample2 = texture2D(tDiffuse, vUv + (vec2(-1.0, -1.0) / iResolution.xy));\n        vec4 sample3 = texture2D(tDiffuse, vUv + (vec2(-1.0, 1.0) / iResolution.xy));\n        vec4 sample4 = texture2D(tDiffuse, vUv + (vec2(1.0, -1.0) / iResolution.xy));\n\n        float edge = checkSame(sample1, sample2) * checkSame(sample3, sample4);\n\n        // gl_FragColor = vec4(edge, sample0.w, 1.0, 1.0);\n        float shadow = texture2D(tShadow, vUv).x;\n        gl_FragColor = vec4(edge, shadow, 1.0, 1.0);\n\n    }\n",oe="\nuniform sampler2D tDiffuse;\nuniform sampler2D tNoise;\nuniform float iTime;\n\nvarying vec2 vUv;\n\n#define EdgeColor vec4(0.2, 0.2, 0.15, 1.0)\n#define BackgroundColor vec4(1,0.95,0.85,1)\n#define NoiseAmount 0.01\n#define ErrorPeriod 30.0\n#define ErrorRange 0.003\n\n// Reference: https://www.shadertoy.com/view/MsSGD1\nfloat triangle(float x)\n{\n    return abs(1.0 - mod(abs(x), 2.0)) * 2.0 - 1.0;\n}\n\nfloat rand(float x)\n{\n    return fract(sin(x) * 43758.5453);\n}\n\nvoid main()\n{\n    float time = floor(iTime * 16.0) / 16.0;\n    vec2 uv = vUv;\n    uv += vec2(triangle(uv.y * rand(time) * 1.0) * rand(time * 1.9) * 0.005,\n            triangle(uv.x * rand(time * 3.4) * 1.0) * rand(time * 2.1) * 0.005);\n\n    float noise = (texture2D(tNoise, uv * 0.5).r - 0.5) * NoiseAmount;\n    vec2 uvs[3];\n    uvs[0] = uv + vec2(ErrorRange * sin(ErrorPeriod * uv.y + 0.0) + noise, ErrorRange * sin(ErrorPeriod * uv.x + 0.0) + noise);\n    uvs[1] = uv + vec2(ErrorRange * sin(ErrorPeriod * uv.y + 1.047) + noise, ErrorRange * sin(ErrorPeriod * uv.x + 3.142) + noise);\n    uvs[2] = uv + vec2(ErrorRange * sin(ErrorPeriod * uv.y + 2.094) + noise, ErrorRange * sin(ErrorPeriod * uv.x + 1.571) + noise);\n\n    float edge = texture2D(tDiffuse, uvs[0]).r * texture2D(tDiffuse, uvs[1]).r * texture2D(tDiffuse, uvs[2]).r;\n    float diffuse = texture2D(tDiffuse, uv).g;\n\n    float w = fwidth(diffuse) * 2.0;\n    vec4 mCol = mix(BackgroundColor * 0.5, BackgroundColor, mix(0.0, 1.0, smoothstep(-w, w, diffuse - 0.3)));\n    gl_FragColor = mix(EdgeColor, mCol, edge);\n}\n",se=D({__name:"noiseContour",async setup(w){let o,a;const{camera:i,renderer:t,scene:f,sizes:y}=M(),S=([o,a]=B(()=>F({map:"./plugins/shadertoyToThreejs/image/noise.png"})),o=await o,a(),o),{onLoop:E,onAfterLoop:R}=G(),C={minFilter:m,magFilter:m,format:V,stencilBuffer:!1},u=new A(1,1,C),T=new U(window.innerWidth,window.innerHeight),P={uniforms:{tDiffuse:{type:"t",value:null},tShadow:{type:"t",value:null},iResolution:{type:"v2",value:T}},vertexShader:x,fragmentShader:ee};let s=null;const c=new _(P),N={uniforms:{tDiffuse:{type:"t",value:null},iTime:{type:"f",value:0},tNoise:{type:"t",value:S}},vertexShader:x,fragmentShader:oe},r=new _(N);return r.renderToScreen=!0,r.material.extensions.derivatives=!0,b(()=>{y.width.value&&(s=new H(t.value),s.addPass(new W(f.value,i.value)),s.addPass(c),s.addPass(r))}),E(({elapsed:v})=>{t.value.render(f.value,i.value,u),c.uniforms.tShadow.value=u.texture,r.uniforms.iTime.value=v}),R(()=>{s&&s.render()}),(v,ie)=>(n(),k(L,null,[e("TresMesh",{ref:"noiseContourMeshRef2",side:l(d),position:[400,100,0],"rotation-x":2*Math.PI/360*90,"cast-shadow":""},J,8,X),e("TresMesh",{ref:"noiseContourMeshRef1",side:l(d),position:[0,150,0],"cast-shadow":""},Z,8,K)],64))}}),te={ref:"perspectiveCameraRef",position:[600,750,-1221],fov:45,near:1,far:1e4},re=e("TresAmbientLight",{color:"#ffffff"},null,-1),ae=e("TresDirectionalLight",{position:[400,400,400],intensity:1,color:"red"},null,-1),ue=D({__name:"noiseContourPage",setup(w){const o={clearColor:"#000000",shadows:!0,alpha:!1,useLegacyLights:!0};return(a,i)=>{const t=z("TresCanvas");return n(),p(t,$(o,{"window-size":""}),{default:h(()=>[e("TresPerspectiveCamera",te,null,512),g(l(j)),re,ae,(n(),p(I,null,{default:h(()=>[g(se)]),_:1}))]),_:1},16)}}});export{ue as default};
