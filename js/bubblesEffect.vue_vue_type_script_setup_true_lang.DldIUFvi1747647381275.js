import{m as e,e as o,b as n}from"./@tresjs.Bz18oYQt1747647381275.js";import{l as t,C as a,c9 as i,bq as l,ab as r,n as s,b as u,an as p}from"./three.xEBIAocQ1747647381275.js";import{d as m,b as c,a5 as f,a2 as v,G as b,o as g,I as y,ak as d,al as w,u as h}from"./@vue.C_fjx3FT1747647381275.js";const _=m({__name:"xRayEffect",props:{model:{},color:{default:"#84ccff"},opacity:{default:1}},async setup(s){let u,p;const m=s,h=c(),_=[];m.model.traverse((e=>{e instanceof t&&(e.geometry.verticesNeedUpdate=!0,_.push(e.geometry))}));const z=([u,p]=f((()=>n({map:"./plugins/medical/image/brainXRayLight.png"}))),u=await u,p(),u),P={uniforms:{c:{type:"f",value:1.11},p:{type:"f",value:1},glowColor:{type:"c",value:new a(m.color)},lightningTexture:{type:"t",value:z.map},offsetY:{type:"f",value:.1},uTime:{type:"f",value:0},uOpacity:{type:"f",value:m.opacity}},vertexShader:"uniform float c;\nuniform float p;\nuniform float uTime;\nvarying float intensity;\nvarying vec2 vUv;\nvoid main(){\n    vUv=uv;\n    vec3 vNormal=normalize(normalMatrix*normal);\n    intensity=pow(c-abs(dot(vNormal,vec3(0,0,1))),p);\n    gl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.);\n}",fragmentShader:"uniform vec3 glowColor;\nuniform sampler2D lightningTexture;\nvarying float intensity;\nvarying vec2 vUv;\nuniform float offsetY;\nuniform float uTime;\nuniform float uOpacity;\n\nvoid main(){\n  vec2 uv=vUv;\n  uv.y+=offsetY;\n  vec3 glow=glowColor*intensity;\n  vec3 color=vec3(step(.1,uv.y)-step(.2,uv.y))-vec3(texture2D(lightningTexture,uv));\n  float alpha=clamp(cos(uTime*3.),.5,1.);\n  gl_FragColor=vec4(glow+color,alpha*uOpacity);\n}",side:r,blending:l,depthWrite:!1};P.uniforms.offsetY.value=Math.sin(5);const{camera:x}=e(),{onLoop:T}=o();return T((({delta:e})=>{x.value.position&&h.value&&(P.uniforms.uTime.value+=e)})),v((()=>{h.value&&(h.value.geometry.dispose(),h.value.geometry=i(_)),m.color&&(P.uniforms.glowColor.value=new a(m.color)),m.opacity&&(P.uniforms.uOpacity.value=m.opacity)})),(e,o)=>(g(),b("TresMesh",{ref_key:"TresMeshRef",ref:h},[o[0]||(o[0]=y("TresBufferGeometry",null,null,-1)),y("TresShaderMaterial",d(w(P)),null,16)],512))}}),z=m({__name:"bubblesEffect",props:{model:{},color:{default:"#FFF"},opacity:{default:1}},setup(e){const n=e,m=["afective","semantic","episodic","process","amigdala","brainstem","bridge","cerebellum","analitic"],f={};n.model.traverse((e=>{e instanceof t&&m.map((o=>{if(e.name.includes(o)){if(f[o]){const n=[f[o],e.geometry];return f[o]=i(n),f}return f[o]=e.geometry}return[]}))}));const _=c(),z=new s({uniforms:{glowColor:{type:"c",value:new a(n.color)},uTime:{type:"f",value:0},uSlowTime:{type:"f",value:0},uBubblesUp:{type:"f",value:1},uOpacity:{type:"f",value:n.opacity}},vertexShader:"uniform float p;\nuniform float uTime;\nuniform float uSlowTime;\nuniform float uBubblesUp;\nvarying float intensity;\nattribute vec2 aDelayDuration;\nattribute float size;\nattribute vec4 bubbles;\nvarying float alpha;\n\nfloat easeExpoInOut(float p){\n    return((p*=2.)<1.)?.5*pow(2.,10.*(p-1.)):.5*(2.-pow(2.,-10.*(p-1.)));\n}\n\nvoid main()\n{\n    intensity=.9;\n    vec4 mvPosition=modelViewMatrix*vec4(position,1.);\n    gl_PointSize=size*(300./-mvPosition.z);\n    float m=mod(size,sin(uSlowTime*.12+size));\n    \n    alpha=step(.5,abs(m));\n    if(m>.5&&m<.7){\n        gl_PointSize=.9*size;\n    }\n    if(m>.8){\n        gl_PointSize=.9*size;\n    }\n    \n    gl_Position=projectionMatrix*mvPosition;\n    \n    if(bubbles.w>0.&&bubbles.w<2.&&bubbles.x!=0.&&bubbles.y!=0.){\n        gl_PointSize=size+15.;\n        alpha=clamp(abs(sin(uTime-bubbles.y)),.3,1.);\n        \n        float tProgress=smoothstep(0.,aDelayDuration.x,uBubblesUp);\n        vec3 tranlated=mix(position,bubbles.xyz,tProgress);\n        vec4 bPosition=modelViewMatrix*vec4(tranlated,1.);\n        \n        gl_PointSize=uBubblesUp*gl_PointSize;\n        gl_Position+=projectionMatrix*bPosition;\n        alpha=5.;\n    }\n    \n    if(bubbles.w==2.){\n        alpha=clamp(abs(sin(uTime-bubbles.y)),.3,.6);\n        gl_PointSize=size+60.;\n        \n        gl_PointSize=uBubblesUp*gl_PointSize;\n        float normalized=clamp(uBubblesUp,0.,2.)*2.;\n        vec3 tranlated=mix(position,bubbles.xyz,normalized);\n        vec4 bPosition=modelViewMatrix*vec4(tranlated,1.);\n        gl_Position+=projectionMatrix*bPosition;\n    }\n    if(bubbles.w==3.){\n        alpha=clamp(abs(sin(uTime-bubbles.y)),.3,1.);\n        gl_PointSize=size+90.;\n        \n        gl_PointSize=uBubblesUp*gl_PointSize;\n        float normalized=clamp(uBubblesUp,0.,2.)*2.;\n        vec3 tranlated=mix(position,bubbles.xyz,normalized);\n        vec4 bPosition=modelViewMatrix*vec4(tranlated,1.);\n        gl_Position+=projectionMatrix*bPosition;\n    }\n}",fragmentShader:"precision mediump float;\nuniform vec3 glowColor;\nvarying float intensity;\nvarying float alpha;\nuniform float uOpacity;\nvoid main() {\n  float distanceToCenter = distance(gl_PointCoord, vec2(.5));\n  float pct = 1. - smoothstep(0., .5, distanceToCenter);\n  vec3 color = vec3(1.) * gl_FragColor.rgb;\n  vec3 glow = glowColor * intensity;\n  gl_FragColor = vec4(glow, clamp(alpha, 0., 1.));\n  gl_FragColor = vec4(glow, pct * gl_FragColor.a);\n  gl_FragColor = vec4(gl_FragColor.rgb, gl_FragColor.a * uOpacity);\n  // gl_FragColor=vec4(1.,1.,0.,1.);\n}",blending:l,side:r,depthTest:!1,vertexColors:!1,transparent:!0});v((()=>{_.value&&(()=>{const e=[],o=[],n=[],t=[];for(let a=0;a<2e4-3*m.length;a+=1){const i=u.randInt(0,m.length-1),l=m[i],r=f[l].attributes.position.array[3*a+0]||0,s=f[l].attributes.position.array[3*a+1]||0,p=f[l].attributes.position.array[3*a+2]||0;if(o.push(r,s,p),e[a]=u.randFloat(10,20),a%100==0){const e=u.randInt(100,250)+s;t.push(r,e,p,1)}else t.push(r,s,p,0);n[2*a+0]=u.randFloat(.5,1.5),n[2*a+1]=2.5}_.value.setAttribute("aDelayDuration",new p(n,2)),_.value.setAttribute("bubbles",new p(t,4)),_.value.setAttribute("position",new p(o,3)),_.value.setAttribute("color",new p([],3)),_.value.setAttribute("size",new p(e,1)),_.value.computeBoundingSphere()})()}));const P=c(),{onLoop:x}=o();return x((({delta:e})=>{P.value&&(P.value.material.uniforms.uTime.value+=.05,P.value.material.uniforms.uSlowTime.value+=1/400),n.color&&(z.uniforms.glowColor.value=new a(n.color)),n.opacity&&(z.uniforms.uOpacity.value=n.opacity)})),(e,o)=>(g(),b("TresPoints",{ref_key:"TresMeshRef",ref:P},[y("TresBufferGeometry",{ref_key:"BufferGeometryRef",ref:_},null,512),y("TresShaderMaterial",d(w(h(z))),null,16)],512))}});export{_,z as a};
