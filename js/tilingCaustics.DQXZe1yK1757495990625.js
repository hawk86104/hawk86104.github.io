import{e,a as n}from"./@tresjs.BaNUTOlS1757495990625.js";import{d as t,w as o,G as a,o as s,I as i,a7 as r,a8 as l,r as d,h as p,e as u,f,j as c,u as v,m}from"./@vue.pEDXJ_3Z1757495990625.js";import{C as g,a3 as h}from"./three.QlBabAUP1757495990625.js";import{P as b}from"./tweakpane.C0HtAJSg1757495990625.js";import"./postprocessing.Ct7rpRb51757495990625.js";import"./@vueuse.us9YhBxp1757495990625.js";const y=["rotation-x"],x=t({__name:"tilingCaustics",props:{speed:{default:.478},backgroundColor:{},color:{default:"#fff"},flowSpeed:{default:{x:.01,y:.01}},brightness:{default:1.5}},setup(n){const t=n,d={uniforms:{resolution:{type:"v2",value:{x:1,y:1}},backgroundColor:{type:"c",value:new g(t.color)},color:{type:"c",value:new g("#fff")},speed:{type:"f",value:t.speed},flowSpeed:{type:"v2",value:t.flowSpeed},brightness:{type:"f",value:t.brightness},time:{type:"f",value:.1}},vertexShader:"// Examples of variables passed from vertex to fragment shader\nvarying vec2 vUv;\n\nvoid main(){\n\t// To pass variables to the fragment shader, you assign them here in the\n\t// main function. Traditionally you name the varying with vAttributeName\n\tvUv=uv;\n\t\n\t// This sets the position of the vertex in 3d space. The correct math is\n\t// provided below to take into account camera and object data.\n\tgl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.);\n}",fragmentShader:"#define TAU 6.28318530718\n#define MAX_ITER 5\n\nuniform vec2 resolution;\nuniform vec3 backgroundColor;\nuniform vec3 color;\nuniform float speed;\nuniform vec2 flowSpeed;\nuniform float brightness;\nuniform float time;\n\nvarying vec2 vUv;\n\nvoid main(){\n\tvec2 uv=(vUv.xy+(time*flowSpeed))*resolution;\n\t\n\tvec2 p=mod(uv*TAU,TAU)-250.;\n\tvec2 i=vec2(p);\n\t\n\tfloat c=1.;\n\tfloat inten=.005;\n\t\n\tfor(int n=0;n<MAX_ITER;n++){\n\t\tfloat t=time*speed*(1.-(3.5/float(n+1)));\n\t\ti=p+vec2(cos(t-i.x)+sin(t+i.y),sin(t-i.y)+cos(t+i.x));\n\t\tc+=1./length(vec2(p.x/(sin(i.x+t)/inten),p.y/(cos(i.y+t)/inten)));\n\t}\n\t\n\tc/=float(MAX_ITER);\n\tc=1.17-pow(c,brightness);\n\t\n\tvec3 rgb=vec3(pow(abs(c),8.));\n\t\n\tgl_FragColor=vec4(rgb*color+backgroundColor,length(rgb)+.1);\n}",side:h,transparent:!0,depthWrite:!1,depthTest:!0},{onLoop:p}=e();return p((({delta:e})=>{d.uniforms.time.value+=e})),o((()=>t),(()=>{d.uniforms.speed.value=t.speed,d.uniforms.brightness.value=t.brightness,d.uniforms.backgroundColor.value=new g(t.color)}),{deep:!0}),(e,n)=>(s(),a("TresMesh",{"rotation-x":-Math.PI/2,"position-y":1},[n[0]||(n[0]=i("TresPlaneGeometry",{args:[10,10]},null,-1)),i("TresShaderMaterial",r(l(d)),null,16)],8,y))}}),w=t({__name:"tilingCaustics",setup(e){const t={clearColor:"#222"},o=d({color:"#fff",speed:.1,brightness:1.5,flowSpeed:{x:.01,y:.01}}),a=new b({title:"参数",expanded:!0});return a.addBinding(o,"color",{label:"颜色"}),a.addBinding(o,"speed",{label:"速度",min:.1,max:1,step:.1}),a.addBinding(o,"brightness",{label:"亮度",min:.1,max:2,step:.1}),a.addBinding(o,"flowSpeed",{label:"流动速度",picker:"inline",expanded:!0,x:{min:.01,step:.02,max:.6,inverted:!0},y:{min:.01,step:.02,max:.6,inverted:!0}}),(e,a)=>{const d=p("TresCanvas");return s(),u(d,m(t,{"window-size":""}),{default:f((()=>[a[0]||(a[0]=i("TresPerspectiveCamera",{position:[10,10,10]},null,-1)),a[1]||(a[1]=i("TresAmbientLight",{intensity:1},null,-1)),c(v(n)),a[2]||(a[2]=i("TresGridHelper",{args:[10,10]},null,-1)),c(x,r(l({...o})),null,16)])),_:1},16)}}});export{w as default};
