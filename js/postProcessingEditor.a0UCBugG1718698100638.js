import{a as t,r as n,N as e,d as o}from"./@tresjs.aawOCoPx1718698100638.js";import{a5 as r,T as s,k as a,V as i,aj as c,j as l,s as u,W as v,bV as f,r as p}from"./three.erXpfL-r1718698100638.js";import{P as m}from"./tweakpane.qqn77PB81718698100638.js";import{d,a3 as g,e as x,o as h,f as y,g as I,J as b,j as _,u as S,aj as U,ak as w,al as D,m as P}from"./@vue.CpOXM7bB1718698100638.js";import{_ as E}from"./@fesjs.IcRnDBLi1718698100638.js";import"./@vueuse.TW6-TkVF1718698100638.js";import"./vue-router.hw3iClIt1718698100638.js";import"./lodash-es.nFpJXAf-1718698100638.js";import"./@qlin.yHhFDldE1718698100638.js";import"./pinia.3_1_BhfV1718698100638.js";import"./@floating-ui.BPbuo5Gx1718698100638.js";import"./@juggle.7yjBMqoW1718698100638.js";!function(t,n){const e=C,o=L();for(;;)try{if(813202===parseInt(e(304))/1+-parseInt(e(308))/2*(-parseInt(e(293))/3)+-parseInt(e(303))/4*(parseInt(e(331))/5)+parseInt(e(320))/6*(parseInt(e(325))/7)+parseInt(e(329))/8+-parseInt(e(347))/9+parseInt(e(337))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const A=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(348)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){A(this,(function(){const t=C,n=new RegExp("function *\\( *\\)"),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=z("init");n[t(292)](o+t(340))&&e.test(o+t(306))?z():o("0")}))()}();const M=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[C(348)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function C(t,n){const e=L();return(C=function(t,n){return e[t-=292]})(t,n)}M(void 0,(function(){const t=C;let n;try{n=Function(t(343)+t(313)+");")()}catch(r){n=window}const e=n[t(305)]=n.console||{},o=["log",t(333),t(324),t(336),t(319),"table","trace"];for(let s=0;s<o[t(350)];s++){const n=M.constructor[t(311)][t(342)](M),r=o[s],a=e[r]||n;n[t(330)]=M[t(342)](M),n.toString=a[t(300)][t(342)](a),e[r]=n}}))();function L(){const t=["Matrix4","1849944ZYeaKG","__proto__","145KfkMev","value","warn","open",'Shader "',"error","2362870jCtGzi","counter","lastIndex","chain","object","bind","return (function() ","call","name","WagnerLoadShaderException","11386188MkNrhK","apply","type","length","random","exec","onabort","action","test","219YDTJjo","stateObject","Texture","constructor","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","Vector4","index","toString","onload","while (true) {}","79996qvgvpi","719857IaxUJX","console","input","\" couldn't be loaded.","13792GrgEHs","isArray","message","prototype","debu",'{}.constructor("return this")( )',"Matrix3","gger","string","send","v3v","exception","93630GDWjEs","Vector2","now","replace","info","434emWTAK","Vector3",'" load was aborted.'];return(L=function(){return t})()}function F(t,n,e){const o=C;if(typeof t!==o(341)||null===t)return t;const r=Array[o(309)](t)?[]:{};for(const s in t)t.hasOwnProperty(s)&&(r[s]=F(t[s])),s==n&&(r[n]=e);return r}function z(t){function n(t){const e=C;if(typeof t===e(316))return function(t){}.constructor(e(302)).apply(e(338));1!==(""+t/t).length||t%20==0?function(){return!0}[e(296)](e(312)+e(315))[e(344)](e(354)):function(){return!1}.constructor(e(312)+e(315))[e(348)](e(294)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const N=j;!function(t,n){const e=j,o=G();for(;;)try{if(816842===-parseInt(e(272))/1+parseInt(e(217))/2+-parseInt(e(230))/3*(-parseInt(e(268))/4)+-parseInt(e(278))/5*(-parseInt(e(299))/6)+parseInt(e(246))/7+parseInt(e(309))/8*(parseInt(e(255))/9)+-parseInt(e(220))/10*(parseInt(e(270))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const T=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[j(239)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function G(){const t=["OrthographicCamera","addPass","resolution","write","debu","apply","constructor","set","pass","wrapT","width","camera","108878CCvsEM","shader","test","Stack","scene","RGBFormat","Mesh","setRenderTarget","now","441kNUkZm","UnsignedByteType","passItems","scale","stencilBuffer","makeOrthographic","return (function() ","RGBAFormat","read","toString","far","makePerspective","setSize","6024476bdLDxS","swapBuffers","66CSmjGs","CopyPass","475468iVOeuQ","settings","stateObject",'{}.constructor("return this")( )',"gger","bind","5835145cCqApJ","minFilter","error","useRGBA","copyPass","toScreen","texture","Scene","ClampToEdgeWrapping","removePass","info","clone","length","call","add","ShaderMaterial","uuid","trace","MeshBasicMaterial","innerWidth","wrapS","6ZhoQeg","front","height","magFilter","renderer","uniforms","material","value","innerHeight","tInput","230168AhRpPF","near","params","log","time","Pass","Reset","function *\\( *\\)","render","2574502RJSLVM","string","quad","6822370kIAxdu","__proto__","warn","passes","push","loadShadervf","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","while (true) {}","LinearFilter","input","3yvKeHc","back","getOfflineTexture","startTime"];return(G=function(){return t})()}!function(){T(this,(function(){const t=j,n=new RegExp(t(215)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=B("init");n[t(248)](o+"chain")&&e.test(o+t(229))?B():o("0")}))()}();const R=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[j(239)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function j(t,n){const e=G();return(j=function(t,n){return e[t-=210]})(t,n)}R(void 0,(function(){const t=j,n=function(){const t=j;let n;try{n=Function(t(261)+t(275)+");")()}catch(e){n=window}return n}(),e=n.console=n.console||{},o=[t(211),t(222),t(288),t(280),"exception","table",t(295)];for(let r=0;r<o[t(290)];r++){const n=R[t(240)].prototype[t(277)](R),s=o[r],a=e[s]||n;n[t(221)]=R[t(277)](R),n[t(264)]=a[t(264)][t(277)](a),e[s]=n}}))();class V{constructor(t,n){const e=j;this[e(244)]=1,this.height=1,this[e(273)]=n||{},this[e(281)]=this[e(273)][e(281)]||!1,this[e(303)]=t,this[e(282)]=this[e(271)](this[e(273)]),this.scene=new(r[e(285)]),this[e(219)]=new(r[e(252)])(new u(1,1),new(r[e(296)])),this[e(250)][e(292)](this[e(219)]),this[e(245)]=new(r[e(234)])(1,1,1,1,-1e4,1e4),this.front=new v(1,1,{minFilter:void 0!==this.settings[e(279)]?this.settings.minFilter:r[e(228)],magFilter:void 0!==this.settings[e(302)]?this.settings.magFilter:r[e(228)],wrapS:void 0!==this[e(273)][e(298)]?this[e(273)].wrapS:r[e(286)],wrapT:void 0!==this[e(273)].wrapT?this[e(273)][e(243)]:r[e(286)],format:this[e(281)]?r[e(262)]:void 0,type:void 0!==this.settings.type?this.settings.type:r[e(256)],stencilBuffer:void 0===this[e(273)][e(259)]||this[e(273)][e(259)]}),this[e(231)]=this[e(300)][e(289)](),this[e(233)]=Date[e(254)](),this[e(223)]={},this[e(249)]={passItems:[],passes:[]}}[N(235)](t,n,e,o){const r=N;this.loadShadervf(n);const s={shaderName:t,params:e,uuid:o,shader:this[r(247)]};this[r(249)][r(257)][r(224)](s)}[N(287)](t){const n=N;for(let e=this[n(249)].passItems[n(290)]-1;e>=0;e--)this[n(249)][n(257)][e][n(294)]===parseInt(t)&&this[n(249)].passItems.splice(e,1);console[n(211)](this[n(249)][n(257)])}[N(271)](){const t=N;this.Pass[t(291)](this);return this[t(225)]("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}loadShadervf(t){const n=N,e=n(226);return this[n(247)]=function(t,n){const e=C,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,u=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,v={sampler2D:{type:"t",value:()=>new(r[C(295)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(r[C(321)])},vec3:{type:"v3",value:()=>new(r[C(326)])},vec4:{type:"v4",value:()=>new(r[C(298)])},bvec2:{type:"v2",value:()=>new(r[C(321)])},bvec3:{type:"v3",value:()=>new i},bvec4:{type:"v4",value:()=>new c},ivec2:{type:"v2",value:()=>new l},ivec3:{type:"v3",value:()=>new(r[C(326)])},ivec4:{type:"v4",value:()=>new c},mat2:{type:"v2",value:()=>new(void 0)},mat3:{type:"v3",value:()=>new(r[C(314)])},mat4:{type:"v4",value:()=>new(r[C(328)])}},f={float:{type:"fv",value:()=>[]},vec3:{type:e(318),value:()=>[]}};let p;const m={resolution:{type:"v2",value:new(r[e(321)])(1,1),default:!0},time:{type:"f",value:Date[e(322)](),default:!0},tInput:{type:"t",value:new s,default:!0}};let d,g;for(;null!==(p=o[e(352)](n));)p[e(299)]===o[e(339)]&&o[e(339)]++,d=p[1],g=p[2],m[g]={type:v[d][e(349)],value:v[d][e(332)]()};for(;null!==(p=u[e(352)](n));)p[e(299)]===o[e(339)]&&o[e(339)]++,d=p[1],g=p[2],p[3],m[g]={type:f[d].type,value:f[d][e(332)]()};return new a({uniforms:m,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(247)]}[N(213)](t){const n=N;this[n(247)]=null,this[n(210)]={}}[N(214)](){const t=N;this.read=this[t(300)],this[t(237)]=this[t(231)]}onWindowResize(t,n){const e=N,o=window[e(297)],r=window[e(307)];t[e(267)](1*o,1*r),n.projectionMatrix[e(266)](70,o/r,n[e(310)],n[e(265)]),this[e(267)](o,r);return this[e(232)](o,r,!0)}[N(267)](t,n){const e=N;this[e(244)]=t,this[e(301)]=n,this.camera.projectionMatrix[e(260)](t/-2,t/2,n/2,n/-2,this[e(245)][e(310)],this.camera[e(265)]),this.quad[e(258)][e(241)](t,n,1),this.front[e(267)](t,n),this[e(231)][e(267)](t,n)}[N(232)](t,n,e){const o=N;return new v(t,n,{minFilter:r[o(228)],magFilter:r[o(228)],format:e?r[o(262)]:r[o(251)]})}[N(216)](t,n,e,o){const r=N;this[r(303)][r(253)](this[r(237)]),this[r(303)][r(216)](t,n),o||this[r(269)]()}[N(269)](){const t=N,n=this[t(237)];this[t(237)]=this[t(263)],this[t(263)]=n}[N(242)](){const t=N;for(let n=0;n<this[t(249)][t(257)][t(290)];n++){const e=this[t(249)][t(257)][n].shader,o=this[t(249)].passItems[n].params;if(this.renderer[t(253)](this[t(237)]),e instanceof r[t(293)]){this[t(219)][t(305)]=e,this[t(219)][t(305)].uniforms.tInput.value=this[t(263)][t(284)],this[t(219)][t(305)][t(304)][t(236)].value[t(241)](this[t(244)],this[t(301)]),this[t(219)].material[t(304)][t(212)][t(306)]=.001*(Date[t(254)]()-this.startTime);for(const n in o)this[t(219)].material[t(304)][n][t(306)]=o[n];this[t(303)][t(216)](this[t(250)],this[t(245)]),this[t(269)]()}}}[N(283)](t,n){const e=N;this.renderer[e(253)](null),this[e(219)].material=this[e(282)],this[e(219)][e(305)].uniforms[e(308)][e(306)]=this[e(263)][e(284)],this[e(219)].material[e(304)][e(236)][e(306)][e(241)](this[e(244)],this.height),this[e(303)][e(216)](this.scene,this[e(245)])}}function B(t){function n(t){const e=j;if(typeof t===e(218))return function(t){}[e(240)](e(227))[e(239)]("counter");1!==(""+t/t)[e(290)]||t%20==0?function(){return!0}.constructor("debu"+e(276))[e(291)]("action"):function(){return!1}[e(240)](e(238)+e(276))[e(239)](e(274)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const O="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",k=X;!function(t,n){const e=X,o=q();for(;;)try{if(937729===-parseInt(e(297))/1*(parseInt(e(330))/2)+parseInt(e(329))/3*(parseInt(e(258))/4)+-parseInt(e(291))/5+parseInt(e(294))/6+parseInt(e(274))/7+-parseInt(e(284))/8*(parseInt(e(265))/9)+parseInt(e(325))/10*(-parseInt(e(312))/11))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[X(307)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){H(this,(function(){const t=X,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(315),"i"),o=Z("init");n.test(o+t(273))&&e[t(277)](o+t(283))?Z():o("0")}))()}();const W=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function X(t,n){const e=q();return(X=function(t,n){return e[t-=249]})(t,n)}function q(){const t=["BOXBLURPass","map","castShadow","click","addButton","counter","1241896rzndgX","console","values","add","VIGNETTE2Pass","log","InvertPass","25218NaulYW","info","SOBELPass","toScreen","error","string","SNOISEPass","RGBPass","chain","11305483HaLrTV","MeshPhongMaterial","value","test","while (true) {}","plugins/postProcessing/image/1324.jpg","list","prototype","random","input","800bEtWmY","toString","__proto__","关闭通道","Reset","BufferGeometry","移除~","470130mlozmN","table","change","892494ofdQZZ","text","constructor","1yjqetF","debu","FXAAPass","addFolder","keys","title","split","push","BoxGeometry","addPass","apply","autoClearColor","TOONPass","CGAPass","receiveShadow","2618748CgLQZR","onWindowResize","call","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","POISSONPass","mergeGeometries","target","plugins/postProcessing/image/1324-normal.jpg","dispose","Vector2","SEPIAPass","addBlade",'{}.constructor("return this")( )',"30FNgTzT","postProcessing","length","exception","6yFfBux","717214ytnNlN","gger","warn","render","bind"];return(q=function(){return t})()}W(void 0,(function(){const t=X;let n;try{n=Function("return (function() "+t(324)+");")()}catch(r){n=window}const e=n.console=n[t(259)]||{},o=[t(263),t(249),t(266),t(269),t(328),t(292),"trace"];for(let s=0;s<o[t(327)];s++){const n=W[t(296)][t(281)][t(251)](W),r=o[s],a=e[r]||n;n[t(286)]=W.bind(W),n[t(285)]=a.toString[t(251)](a),e[r]=n}}))();function Z(t){function n(t){const e=X;if(typeof t===e(270))return function(t){}.constructor(e(278)).apply(e(257));1!==(""+t/t)[e(327)]||t%20==0?function(){return!0}[e(296)]("debugger")[e(314)]("action"):function(){return!1}.constructor(e(298)+e(331))[e(307)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}const $=E(d({__name:k(326),async setup(o){const s=k;let a,i;const{camera:c,renderer:l,scene:u,sizes:v}=t();for(var d=new(r[s(289)]),x=[],h=0;h<100;h++){var y=new(r[s(305)])(100,100,100);y.translate(1500*Math.random(),1500*Math[s(282)](),1500*Math[s(282)]()),x[s(304)](y)}d=f[s(317)](x);const I=([a,i]=g((()=>e({map:s(279)}))),a=await a,i(),a),b=([a,i]=g((()=>e({map:s(319)}))),a=await a,i(),a);var _=new(r[s(275)])({map:I[s(253)],normalMap:b.map,normalScale:new(r[s(321)])(.8,-.8),shininess:100}),S=new p(d,_);S[s(254)]=!0,S[s(311)]=!0,u[s(276)][s(261)](S);const U=new V(l.value,{useRGBA:!0}),w=new m;let D=null,P=[{text:s(264),value:{InvertPass:O}},{text:s(299),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:s(322),value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:s(271),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:s(252),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:"DENOISEPass",value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:s(310),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:b.map}}},{text:s(267),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:s(272),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:"DOTPass",value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:"CIRCULARPass",value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:s(316),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:"VIGNETTE1Pass",value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:s(262),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:"FREICHENPass",value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:s(309),value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],E="InvertPass",A=O,M=null;w.addBlade({view:s(280),label:"后处理类型",options:P,value:""}).on(s(293),(t=>{D=t.value}));const C=w[s(256)]({title:"新增",label:"新增通道"});let L=0;C.on(s(255),(t=>{const n=s;E=Object[n(301)](D)[0],A=Object.values(D)[0],M=Object[n(260)](D)[1];let e=L++,o=w[n(300)]({title:E});for(const s in M){let t=M[s];o[n(323)]({view:n(295),label:s,parse:t=>String(t),value:t})}o[n(256)]({title:n(290)+e,label:n(287)}).on(n(255),(t=>{const e=n;let o=t[e(318)][e(302)][e(303)]("~")[1];U.removePass(o)})).on(n(255),(()=>{o[n(320)]()}));let r=F(M,t[n(318)].label,t[n(276)]);U[n(306)](E,A,r,e)})),U[s(313)](l.value,c[s(276)]);const{onLoop:z}=n();return z((({delta:t})=>{const n=s;S&&(l[n(276)][n(308)]=!0,U[n(288)](),S.material=_,U[n(250)](u[n(276)],c[n(276)]),U.pass(),U[n(268)](u[n(276)],c[n(276)]))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]);function K(t,n){const e=Y();return(K=function(t,n){return e[t-=159]})(t,n)}const J=K;function Y(){const t=["counter","while (true) {}","681168gWokVX","exception","length","4hCajlb","toString","1zdhYwr","5EijVyE","init","78274Vgmxva","gger","__proto__","5669310pKuNKM","test","TresDirectionalLight","warn","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","string","TresCanvas","1516588gZoFki","table","info","344CsuOir","call","trace","TresAmbientLight","13309425DiTxWf","176reimCV","apply","18547500lgGRVA","console","#ffffff","chain","bind","5647038DoXGew","debu","#000000","constructor"];return(Y=function(){return t})()}!function(t,n){const e=K,o=Y();for(;;)try{if(993626===parseInt(e(160))/1*(-parseInt(e(173))/2)+parseInt(e(166))/3*(parseInt(e(197))/4)+parseInt(e(161))/5*(-parseInt(e(188))/6)+parseInt(e(163))/7*(-parseInt(e(176))/8)+-parseInt(e(180))/9+parseInt(e(183))/10+parseInt(e(181))/11*(parseInt(e(194))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const Q=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[K(182)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){Q(this,(function(){const t=K,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(170),"i"),o=st(t(162));n[t(167)](o+t(186))&&e.test(o+"input")?st():o("0")}))()}();const tt=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[K(182)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();tt(void 0,(function(){const t=K,n=function(){let t;try{t=Function('return (function() {}.constructor("return this")( ));')()}catch(n){t=window}return t}(),e=n.console=n[t(184)]||{},o=["log",t(169),t(175),"error",t(195),t(174),t(178)];for(let r=0;r<o[t(196)];r++){const n=tt[t(191)].prototype[t(187)](tt),s=o[r],a=e[s]||n;n[t(165)]=tt[t(187)](tt),n[t(159)]=a[t(159)][t(187)](a),e[s]=n}}))();const nt={ref:"perspectiveCameraRef",position:[600,850,-1500],fov:45,near:.1,far:1e5},et=b(J(179),{color:J(185),intensity:2},null,-1),ot=b(J(168),{position:[100,100,0],intensity:2,color:J(185)},null,-1),rt=d({__name:"postProcessingEditor",setup(t){const e=J,r={clearColor:e(190),shadows:!0,alpha:!1,useLegacyLights:!0},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=x(e(172));return h(),y(a,P(r,{"window-size":""}),{default:I((()=>[b("TresPerspectiveCamera",nt,null,512),_(S(o),U(w(s)),null,16),et,ot,(h(),y(D,null,{default:I((()=>[_($)])),_:1}))])),_:1},16)}}});function st(t){function n(t){const e=K;if(typeof t===e(171))return function(t){}[e(191)](e(193))[e(182)](e(192));1!==(""+t/t)[e(196)]||t%20==0?function(){return!0}[e(191)](e(189)+e(164))[e(177)]("action"):function(){return!1}[e(191)](e(189)+e(164))[e(182)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{rt as default};
