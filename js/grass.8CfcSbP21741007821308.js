import{_ as t,C as n,ar as e,b as o,ai as r}from"./three.sBrYSCgq1741007821308.js";import{e as a,a as i,o as s,f as c}from"./@tresjs.u6hJLBm41741007821308.js";import"./index.GxS6u1tM1741007821308.js";import{c as l}from"./simplex-noise.jB2HxhHB1741007821308.js";import{C as u}from"./index.WJt0talp1741007821308.js";import{d as f,a3 as p,o as h,H as m,N as v,u as d,r as g,f as x,g as w,j as y,aj as b,ak as _,al as M}from"./@vue.NRI7TcgI1741007821308.js";import{_ as j}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.9csc7VOg1741007821308.js";import"./postprocessing.rsQjznIU1741007821308.js";import"./@vueuse.jd1Cg91M1741007821308.js";import"./lamina.uKM1dmic1741007821308.js";import"./glsl-tokenizer.6txbY4oc1741007821308.js";import"./@amap.1goFCJT_1741007821308.js";import"./glsl-token-descope.954n6Zu71741007821308.js";import"./glsl-token-depth.jmFCMOik1741007821308.js";import"./glsl-token-scope.1zVbg-hZ1741007821308.js";import"./glsl-token-properties._2T3hsaZ1741007821308.js";import"./glsl-token-assignments.YoF6-ZV81741007821308.js";import"./glsl-token-string.Gd2NDFfU1741007821308.js";import"./glsl-token-functions.IdaK4ink1741007821308.js";import"./object-hash.W8rvIzEM1741007821308.js";import"./jszip.tXNnSWcU1741007821308.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.UpNCtJIo1741007821308.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.-IwLpFJv1741007821308.js";import"./three-stdlib.7G-ooWjg1741007821308.js";import"./@pmndrs.pRt0V6Fh1741007821308.js";import"./utils.3XyI8l4G1741007821308.js";const z=A;function A(t,n){const e=D();return(A=function(t,n){return e[t-=120]})(t,n)}!function(t,n){const e=A,o=D();for(;;)try{if(997419===-parseInt(e(134))/1*(parseInt(e(120))/2)+-parseInt(e(127))/3*(parseInt(e(124))/4)+-parseInt(e(188))/5+-parseInt(e(135))/6*(-parseInt(e(175))/7)+parseInt(e(138))/8+-parseInt(e(150))/9*(-parseInt(e(128))/10)+parseInt(e(141))/11)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const I=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[A(168)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){I(this,(function(){const t=A,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(172),"i"),o=O("init");n[t(142)](o+"chain")&&e[t(142)](o+t(136))?O():o("0")}))()}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[A(168)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();C(void 0,(function(){const t=A,n=function(){let t;try{t=Function('return (function() {}.constructor("return this")( ));')()}catch(n){t=window}return t}(),e=n[t(162)]=n[t(162)]||{},o=[t(176),"warn",t(137),t(132),t(174),t(131),t(199)];for(let r=0;r<o.length;r++){const n=C.constructor[t(156)][t(181)](C),a=o[r],i=e[a]||n;n.__proto__=C.bind(C),n.toString=i[t(158)][t(181)](i),e[a]=n}}))();const F=[z(159)],k=[z(169),"attributes-position","attributes-uv",z(164),z(173),z(179),"attributes-halfRootAngleSin",z(184)],S=[z(198)],R=[z(195)];function D(){const t=["attributes-orientation","exception","7plBZrf","log","gger","TresMeshStandardMaterial","attributes-stretch","time","bind","map","TresMesh","attributes-halfRootAngleCos","stretchesF32","orientationsF32","sin","8860355MkITCA","call","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","while (true) {}","TresGroup","Vector3","width","side","length","halfRootAngleCosF32","geometry","trace","2AcUJEq","uniforms","array","push","2476tCmSTF","counter","constructor","1899dPZGlk","636930INSZZM","string","random","table","error","value","1291447bBWOao","6186906FQApmn","input","info","5077608DDhQtF","TresInstancedBufferGeometry","offsetsF32","13140457CXFfgw","test","position","InstancedBufferAttribute","grass","alphaMap","set","DoubleSide","cos","225FFXFwP","normalize","convertSRGBToLinear","PlaneGeometry","stateObject","toneMapped","prototype","joints","toString","material","Vector4","#000f00","console","halfRootAngleSinF32","attributes-offset","instances","needsUpdate","attributes","apply","index","Color","lookAt","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)"];return(D=function(){return t})()}const T=f({__name:z(145),props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(r){const s=z;let c,f;const g=([c,f]=p((()=>i({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),c=await c,f(),c),x=r,w=l(Math[s(130)]);function y(t,n){const o=t.x*n.w+t.y*n.z-t.z*n.y+t.w*n.x,r=-t.x*n.z+t.y*n.w+t.z*n.x+t.w*n.y,a=t.x*n.y-t.y*n.x+t.z*n.w+t.w*n.z,i=-t.x*n.x-t.y*n.y-t.z*n.z+t.w*n.w;return new e(o,r,a,i)}function b(t,n){var e=2*w(t/50,n/50);return e+=4*w(t/100,n/100),e+=.2*w(t/10,n/10)}const _=function(n,r){const a=s,i=[],c=[],l=[],u=[],f=[];let p=new(t[a(160)]),h=new e;const m=-.25;for(let e=0;e<n;e++){const s=Math[a(130)]()*r-r/2,v=Math.random()*r-r/2,d=b(s,v);i.push(s,d,v);let g=Math.PI-Math[a(130)]()*(2*Math.PI);u[a(123)](Math[a(187)](.5*g)),f[a(123)](Math[a(149)](.5*g));let x=new(t[a(193)])(0,1,0),w=x.x*Math[a(187)](g/2),_=x.y*Math[a(187)](g/2),M=x.z*Math.sin(g/2),j=Math[a(149)](g/2);p[a(147)](w,_,M,j).normalize(),g=.5*Math[a(130)]()+m,x=new o(1,0,0),w=x.x*Math.sin(g/2),_=x.y*Math[a(187)](g/2),M=x.z*Math[a(187)](g/2),j=Math[a(149)](g/2),h[a(147)](w,_,M,j).normalize(),p=y(p,h),g=.5*Math.random()+m,x=new(t[a(193)])(0,0,1),w=x.x*Math.sin(g/2),_=x.y*Math.sin(g/2),M=x.z*Math[a(187)](g/2),j=Math[a(149)](g/2),h.set(w,_,M,j)[a(151)](),p=y(p,h),c[a(123)](p.x,p.y,p.z,p.w),e<n/3?l[a(123)](1.8*Math[a(130)]()):l[a(123)](Math[a(130)]())}return{offsetsF32:new(t[a(144)])(new Float32Array(i),3),orientationsF32:new(t[a(144)])(new Float32Array(c),4),stretchesF32:new(t[a(144)])(new Float32Array(l),1),halfRootAngleCosF32:new(t[a(144)])(new Float32Array(f),1),halfRootAngleSinF32:new(t[a(144)])(new Float32Array(u),1)}}(x[s(165)],x[s(194)]),M=new(t[s(153)])(x.bW,x.bH,1,x[s(157)]).translate(0,x.bH/2,0),j=new(t[s(153)])(x[s(194)],x[s(194)],32,32);j[s(171)](new(t[s(193)])(0,1,0));const A=j.attributes[s(143)];for(let t=0;t<A[s(122)][s(196)];t+=3)A[s(122)][t+1]=b(A.array[t],A[s(122)][t+2]);j[s(167)][s(143)][s(166)]=!0,j.computeVertexNormals();const I=new(u({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new n(.3,.9,0)[s(152)](),bottomColor:new(t[s(170)])(0,.2,0)[s(152)]()},s(190),"\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }",(n=>{const e=s;n[e(195)]=t[e(148)]})));I.map=g[s(182)],I.alphaMap=g[s(146)],I[s(155)]=!1;const{onLoop:C}=a();return C((({elapsed:t})=>{const n=s;I[n(121)][n(180)][n(133)]=t/4})),(n,e)=>{const o=s;return h(),m(o(192),null,[v(o(183),{material:d(I)},[v(o(139),{index:d(M)[o(169)],"attributes-position":d(M)[o(167)].position,"attributes-uv":d(M).attributes.uv,"attributes-offset":d(_)[o(140)],"attributes-orientation":d(_)[o(186)],"attributes-stretch":d(_)[o(185)],"attributes-halfRootAngleSin":d(_)[o(163)],"attributes-halfRootAngleCos":d(_)[o(197)]},null,8,k)],8,F),v(o(183),{position:[0,0,0],geometry:d(j)},[v(o(178),{color:o(161),side:t[o(148)]},null,8,R)],8,S)])}}});function O(t){function n(t){const e=A;if(typeof t===e(129))return function(t){}[e(126)](e(191)).apply(e(125));1!==(""+t/t)[e(196)]||t%20==0?function(){return!0}.constructor("debu"+e(177))[e(189)]("action"):function(){return!1}[e(126)]("debu"+e(177))[e(168)](e(154)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const E=H;!function(t,n){const e=H,o=U();for(;;)try{if(940442===parseInt(e(474))/1+parseInt(e(483))/2+parseInt(e(478))/3*(-parseInt(e(494))/4)+-parseInt(e(477))/5+parseInt(e(480))/6+parseInt(e(489))/7*(-parseInt(e(486))/8)+-parseInt(e(495))/9*(parseInt(e(485))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const B=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[H(487)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){B(this,(function(){const t=H,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(471),"i"),o=G(t(496));n[t(482)](o+"chain")&&e.test(o+t(499))?G():o("0")}))()}();const P=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[H(487)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function H(t,n){const e=U();return(H=function(t,n){return e[t-=470]})(t,n)}P(void 0,(function(){const t=H;let n;try{n=Function("return (function() "+t(498)+");")()}catch(r){n=window}const e=n[t(490)]=n.console||{},o=[t(507),t(475),t(488),t(472),t(506),t(492),t(503)];for(let a=0;a<o.length;a++){const n=P[t(479)][t(473)][t(501)](P),r=o[a],i=e[r]||n;n.__proto__=P[t(501)](P),n[t(470)]=i[t(470)][t(501)](i),e[r]=n}}))();const N=f({__name:E(491),setup(t){const n=g({alpha:!0,toneMapping:r,windowSize:!0,clearColor:6710886}),e=g({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=H;return h(),x(d(c),b(_(n)),{default:w((()=>[o[0]||(o[0]=v(r(476),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),y(d(s),b(_(e)),null,16),(h(),x(M,null,{default:w((()=>[y(T)])),_:1})),(h(),x(M,null,{default:w((()=>[y(d(j),{texture:r(505)})])),_:1}))])),_:1},16)}}});function U(){const t=["42aukegG","console","grass","table","string","3376468ONIKNC","9uagSmc","init","gger",'{}.constructor("return this")( )',"input","debu","bind","action","trace","while (true) {}","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","exception","log","toString","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","error","prototype","1851385YVAyEu","warn","TresPerspectiveCamera","514235TRYoAx","3oUUXmR","constructor","6132882OQIkGg","call","test","1028734lKweRj","stateObject","5442670BvMTeO","1274968CJqFeF","apply","info"];return(U=function(){return t})()}function G(t){function n(t){const e=H;if(typeof t===e(493))return function(t){}[e(479)](e(504))[e(487)]("counter");1!==(""+t/t).length||t%20==0?function(){return!0}[e(479)](e(500)+e(497))[e(481)](e(502)):function(){return!1}.constructor("debu"+e(497))[e(487)](e(484)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{N as default};
