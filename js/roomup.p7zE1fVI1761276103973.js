import"./@fesjs.DnM7nINA1761276103973.js";import{F as e,N as a,y as t,K as r}from"./@tresjs.B_KjVy0E1761276103973.js";import"./Resource.CSaxGSPI1761276103973.js";/* empty css                                                                             */import{_ as o}from"./randomLoading.vue_vue_type_script_setup_true_lang.BgTQontY1761276103973.js";import"./three-mesh-ui.module.C--P1h9b1761276103973.js";import"./global.BkM2LKCv1761276103973.js";/* empty css                                                              */import"./vanilla.esm.5.5.0.CRlEbOMK1761276103973.js";import{af as s,o as n,O as l,d as i,a0 as m}from"./three.Bhn4-0ry1761276103973.js";import{d as c,w as p,G as d,H as u,u as g,o as h,I as f,ad as v,b as _,e as S,a as y,r as w,g as j,h as b,ap as M,a9 as O,aa as T,F as R}from"./@vue.CKlgtJke1761276103973.js";import{P as z}from"./tweakpane.CqZAnw7f1761276103973.js";import"./vue-router.BFHj2xRz1761276103973.js";import"./lodash-es.DWe8oqPO1761276103973.js";import"./pinia.C8YT0eOZ1761276103973.js";import"./@qlin.y-0Z8WnK1761276103973.js";import"./@babel.BPq7uOAK1761276103973.js";import"./@floating-ui.Bhq4ibgf1761276103973.js";import"./@juggle.Vc7cP4_P1761276103973.js";import"./postprocessing.CeTFUAN_1761276103973.js";import"./@vueuse.wtfleElW1761276103973.js";import"./starLoading.Dxnl37sJ1761276103973.js";import"./utils.DEKxcj5Y1761276103973.js";import"./cssLoaders.UlIhETTt1761276103973.js";import"./bubbleLoading.CNFXC-mb1761276103973.js";import"./yangyangLoading.-KGL02eM1761276103973.js";import"./color.zjyo9y-T1761276103973.js";import"./color-string.Cb0Nf94v1761276103973.js";import"./color-name.gyPnsvCn1761276103973.js";import"./lodash.B8Sqzhuz1761276103973.js";import"./@amap.fjyZdsU91761276103973.js";import"./object-hash.1qNYTrnD1761276103973.js";import"./jszip.y_yjJ09m1761276103973.js";const N=({focus:e=0,size:a=25,samples:t=10}={})=>{const r=s.shadowmap_pars_fragment;return s.shadowmap_pars_fragment=s.shadowmap_pars_fragment.replace("#ifdef USE_SHADOWMAP",`#ifdef USE_SHADOWMAP\n\n    #define PENUMBRA_FILTER_SIZE float(${a})\n    #define RGB_NOISE_FUNCTION(uv) (randRGB(uv))\n    vec3 randRGB(vec2 uv) {\n      return vec3(\n        fract(sin(dot(uv, vec2(12.75613, 38.12123))) * 13234.76575),\n        fract(sin(dot(uv, vec2(19.45531, 58.46547))) * 43678.23431),\n        fract(sin(dot(uv, vec2(23.67817, 78.23121))) * 93567.23423)\n      );\n    }\n    \n    vec3 lowPassRandRGB(vec2 uv) {\n      // 3x3 convolution (average)\n      // can be implemented as separable with an extra buffer for a total of 6 samples instead of 9\n      vec3 result = vec3(0);\n      result += RGB_NOISE_FUNCTION(uv + vec2(-1.0, -1.0));\n      result += RGB_NOISE_FUNCTION(uv + vec2(-1.0,  0.0));\n      result += RGB_NOISE_FUNCTION(uv + vec2(-1.0, +1.0));\n      result += RGB_NOISE_FUNCTION(uv + vec2( 0.0, -1.0));\n      result += RGB_NOISE_FUNCTION(uv + vec2( 0.0,  0.0));\n      result += RGB_NOISE_FUNCTION(uv + vec2( 0.0, +1.0));\n      result += RGB_NOISE_FUNCTION(uv + vec2(+1.0, -1.0));\n      result += RGB_NOISE_FUNCTION(uv + vec2(+1.0,  0.0));\n      result += RGB_NOISE_FUNCTION(uv + vec2(+1.0, +1.0));\n      result *= 0.111111111; // 1.0 / 9.0\n      return result;\n    }\n    vec3 highPassRandRGB(vec2 uv) {\n      // by subtracting the low-pass signal from the original signal, we're being left with the high-pass signal\n      // hp(x) = x - lp(x)\n      return RGB_NOISE_FUNCTION(uv) - lowPassRandRGB(uv) + 0.5;\n    }\n    \n    \n    vec2 vogelDiskSample(int sampleIndex, int sampleCount, float angle) {\n      const float goldenAngle = 2.399963f; // radians\n      float r = sqrt(float(sampleIndex) + 0.5f) / sqrt(float(sampleCount));\n      float theta = float(sampleIndex) * goldenAngle + angle;\n      float sine = sin(theta);\n      float cosine = cos(theta);\n      return vec2(cosine, sine) * r;\n    }\n    float penumbraSize( const in float zReceiver, const in float zBlocker ) { // Parallel plane estimation\n      return (zReceiver - zBlocker) / zBlocker;\n    }\n    float findBlocker(sampler2D shadowMap, vec2 uv, float compare, float angle) {\n      float texelSize = 1.0 / float(textureSize(shadowMap, 0).x);\n      float blockerDepthSum = float(${e});\n      float blockers = 0.0;\n    \n      int j = 0;\n      vec2 offset = vec2(0.);\n      float depth = 0.;\n    \n      #pragma unroll_loop_start\n      for(int i = 0; i < ${t}; i ++) {\n        offset = (vogelDiskSample(j, ${t}, angle) * texelSize) * 2.0 * PENUMBRA_FILTER_SIZE;\n        depth = unpackRGBAToDepth( texture2D( shadowMap, uv + offset));\n        if (depth < compare) {\n          blockerDepthSum += depth;\n          blockers++;\n        }\n        j++;\n      }\n      #pragma unroll_loop_end\n    \n      if (blockers > 0.0) {\n        return blockerDepthSum / blockers;\n      }\n      return -1.0;\n    }\n            \n    float vogelFilter(sampler2D shadowMap, vec2 uv, float zReceiver, float filterRadius, float angle) {\n      float texelSize = 1.0 / float(textureSize(shadowMap, 0).x);\n      float shadow = 0.0f;\n      int j = 0;\n      vec2 vogelSample = vec2(0.0);\n      vec2 offset = vec2(0.0);\n      #pragma unroll_loop_start\n      for (int i = 0; i < ${t}; i++) {\n        vogelSample = vogelDiskSample(j, ${t}, angle) * texelSize;\n        offset = vogelSample * (1.0 + filterRadius * float(${a}));\n        shadow += step( zReceiver, unpackRGBAToDepth( texture2D( shadowMap, uv + offset ) ) );\n        j++;\n      }\n      #pragma unroll_loop_end\n      return shadow * 1.0 / ${t}.0;\n    }\n    \n    float PCSS (sampler2D shadowMap, vec4 coords) {\n      vec2 uv = coords.xy;\n      float zReceiver = coords.z; // Assumed to be eye-space z in this code\n      float angle = highPassRandRGB(gl_FragCoord.xy).r * PI2;\n      float avgBlockerDepth = findBlocker(shadowMap, uv, zReceiver, angle);\n      if (avgBlockerDepth == -1.0) {\n        return 1.0;\n      }\n      float penumbraRatio = penumbraSize(zReceiver, avgBlockerDepth);\n      return vogelFilter(shadowMap, uv, zReceiver, 1.25 * penumbraRatio, angle);\n    }`).replace("#if defined( SHADOWMAP_TYPE_PCF )","\nreturn PCSS(shadowMap, shadowCoord);\n#if defined( SHADOWMAP_TYPE_PCF )"),(e,a,t)=>{s.shadowmap_pars_fragment=r,function(e,a,t){a.traverse(a=>{a.material&&(Array.isArray(a.material)?a.material.forEach(a=>{e.properties.remove(a),a.dispose()}):(e.properties.remove(a.material),a.material.dispose()))}),e.info.programs.length=0,e.compile(a,t)}(e,a,t)}},B=c({__name:"index",props:{enabled:{type:Boolean,default:!0},size:{default:25},focus:{default:0},samples:{default:10}},setup(a){const t=a,{camera:r,renderer:o,scene:s}=e();let l=null;const i=e=>{const{enabled:a,size:t,focus:i,samples:m}=e;l&&(l(o,s.value,r.value),l=null),a&&(l=N({focus:i,size:t,samples:m}),s.value.traverse(e=>{e instanceof n&&e.material.dispose()}))};return i(t),p(t,()=>{i(t)}),(e,a)=>null}}),k=["rotation"],I=["geometry","material"],x=["geometry","material"],P=["geometry","material"],C=["geometry","material"],E=["geometry","material"],G=["geometry","material"],D=["geometry","material"],F=["geometry","material"],A=["geometry","material"],U=["geometry","material"],L=["geometry","material"],$=["geometry","material"],H=["geometry"],W=["geometry","material"],q=["geometry","material"],Z=["geometry","material"],Y=["geometry","material"],K=c({__name:"roomMesh",setup(e){const{state:t,nodes:r,materials:o}=a("./plugins/visualArts/model/room-transformed.glb",{draco:!0,decoderPath:"./draco/"});return(e,a)=>g(t)?(h(),d("TresGroup",{key:0,rotation:[-Math.PI/2,0,0]},[f("TresMesh",{castShadow:"",receiveShadow:"",geometry:v(g(r).Object_2.geometry),material:v(g(o)).Material},null,8,I),f("TresMesh",{castShadow:"",receiveShadow:"",geometry:g(r).Object_3.geometry,material:g(o)["Material.002"]},null,8,x),f("TresMesh",{castShadow:"",receiveShadow:"",geometry:g(r).Object_4.geometry,material:g(o)["Material.003"]},null,8,P),f("TresMesh",{castShadow:"",receiveShadow:"",geometry:g(r).Object_6.geometry,material:g(o).krzeslo_1},null,8,C),f("TresMesh",{castShadow:"",receiveShadow:"",geometry:g(r).Object_7.geometry,material:g(o).krzeslo_okno},null,8,E),f("TresMesh",{castShadow:"",receiveShadow:"",geometry:g(r).Object_8.geometry,material:g(o).krzeslo_prawe},null,8,G),f("TresMesh",{castShadow:"",receiveShadow:"",geometry:g(r).Object_9.geometry,material:g(o).krzeslo_srodek},null,8,D),f("TresMesh",{castShadow:"",receiveShadow:"",geometry:g(r).Object_10.geometry,material:g(o).podloga},null,8,F),f("TresMesh",{castShadow:"",receiveShadow:"",geometry:g(r).Object_11.geometry,material:g(o).sciana_okno},null,8,A),f("TresMesh",{castShadow:"",receiveShadow:"",geometry:g(r).Object_12.geometry,material:g(o)["stolik.001"]},null,8,U),f("TresMesh",{castShadow:"",receiveShadow:"",geometry:g(r).Object_16.geometry,material:g(o)["Material.006"]},null,8,L),f("TresMesh",{castShadow:"",receiveShadow:"",geometry:g(r).Object_5.geometry,material:g(o)["Material.004"]},null,8,$),f("TresMesh",{geometry:g(r).Object_13.geometry},[...a[0]||(a[0]=[f("TresMeshStandardMaterial",{transparent:"",opacity:.5},null,-1)])],8,H),f("TresMesh",{castShadow:"",receiveShadow:"",geometry:g(r).Object_14.geometry,material:g(o)["Material.002"]},null,8,W),f("TresMesh",{castShadow:"",receiveShadow:"",geometry:g(r).Object_15.geometry,material:g(o)["Material.005"]},null,8,q),f("TresMesh",{castShadow:"",receiveShadow:"",geometry:g(r).Object_17.geometry,material:g(o).mata},null,8,Z),f("TresMesh",{castShadow:"",receiveShadow:"",geometry:g(r).Object_18.geometry,material:g(o).stolik},null,8,Y)],8,k)):u("",!0)}}),J=c({__name:"sphere",setup:e=>(e,a)=>(h(),_(g(t),{floatFactor:15,speed:2},{default:S(()=>[...a[0]||(a[0]=[f("TresMesh",{castShadow:"",position:[0,5,0]},[f("TresSphereGeometry"),f("TresMeshBasicMaterial",{color:"hotpink",roughness:1})],-1)])]),_:1}))}),Q=["shadow-mapSize"],V=c({__name:"roomup",setup(e){const a=y(null);p(a,e=>{e&&(e.shadow.camera=new l(-8.5,8.5,8.5,-8.5,.1,20))});const s={clearColor:"#d0d0d0",windowSize:!0,toneMapping:m,toneMappingExposure:.8,shadows:!0},n=w({enabled:!0,size:25,focus:0,samples:10}),c=new z({title:"参数"});return c.addBinding(n,"enabled",{label:"开启PCSS"}),c.addBinding(n,"size",{label:"size",min:1,max:100,step:1}),c.addBinding(n,"focus",{label:"focus",min:0,max:2,step:.1}),c.addBinding(n,"samples",{label:"samples",min:1,max:20,step:1}),(e,l)=>{const m=j("TresCanvas");return h(),d(R,null,[b(g(o)),b(m,O(T(s)),{default:S(()=>[l[0]||(l[0]=f("TresPerspectiveCamera",{position:[5,2,10],fov:45,near:.1,far:1e3},null,-1)),b(g(r),{enableDamping:""}),l[1]||(l[1]=f("TresAmbientLight",{intensity:2},null,-1)),b(g(t),null,{default:S(()=>[f("TresDirectionalLight",{ref_key:"dLight",ref:a,position:[5,5,-8],castShadow:"",intensity:5,"shadow-mapSize":new i(2048,2048),"shadow-bias":-.001},null,8,Q)]),_:1}),(h(),_(M,null,{default:S(()=>[b(K,{scale:.5,position:[0,-1,0]})]),_:1})),b(J,{position:[0,5,-8]}),b(J,{position:[2,4,-8],scale:.9}),b(J,{position:[-2,2,-8],scale:.8}),b(g(B),O(T(n)),null,16)]),_:1},16)],64)}}});export{V as default};
