import{p as t,U as n,z as e,Y as o}from"./@tresjs.IsKybBdF1729505164040.js";import{k as r,_ as s,at as a,V as i,s as c,W as l,n as u,cn as v}from"./three.YREzp-_G1729505164040.js";import{P as f}from"./tweakpane.yHWGBmom1729505164040.js";import{d as p,a4 as d,e as m,o as g,f as x,g as h,L as y,j as I,aj as b,ak as _,u as S,al as U,m as w}from"./@vue.JNsx1iN61729505164040.js";import{_ as D}from"./@fesjs.ysb1R5mQ1729505164040.js";import"./@vueuse.9dhnH8nd1729505164040.js";import"./vue-router.xkfjO_BL1729505164040.js";import"./lodash-es.kYt-_xTG1729505164040.js";import"./@qlin.yHhFDldE1729505164040.js";import"./pinia.LeDA9WVb1729505164040.js";import"./@floating-ui.BPbuo5Gx1729505164040.js";import"./@juggle.7yjBMqoW1729505164040.js";!function(t,n){const e=A,o=L();for(;;)try{if(877200===parseInt(e(147))/1+-parseInt(e(128))/2*(-parseInt(e(176))/3)+parseInt(e(185))/4*(parseInt(e(154))/5)+-parseInt(e(163))/6+-parseInt(e(126))/7+-parseInt(e(186))/8*(-parseInt(e(165))/9)+-parseInt(e(189))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const P=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[A(182)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){P(this,(function(){const t=A,n=new RegExp(t(164)),e=new RegExp(t(181),"i"),o=C(t(125));n[t(129)](o+t(174))&&e[t(129)](o+t(148))?C():o("0")}))()}();const E=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();E(void 0,(function(){const t=A;let n;try{n=Function(t(175)+t(159)+");")()}catch(r){n=window}const e=n.console=n.console||{},o=[t(188),t(157),t(135),t(190),t(167),t(178),t(162)];for(let s=0;s<o[t(184)];s++){const n=E[t(179)][t(124)].bind(E),r=o[s],a=e[r]||n;n[t(156)]=E[t(132)](E),n[t(141)]=a.toString[t(132)](a),e[r]=n}}))();function M(t,n,e){const o=A;if(typeof t!==o(170)||null===t)return t;const r=Array[o(171)](t)?[]:{};for(const s in t)t[o(130)](s)&&(r[s]=M(t[s])),s==n&&(r[n]=e);return r}function A(t,n){const e=L();return(A=function(t,n){return e[t-=124]})(t,n)}function L(){const t=["return (function() ","1044fYugiy","get","table","constructor","stateObject","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","apply","lastIndex","length","8004etfnDd","48EaPqoM","Texture","log","30687540CbcFyY","error","prototype","init","4434983ZsRkQs","v3v","7814XDGXgi","test","hasOwnProperty","ShaderMaterial","bind","Matrix2","replace","info","exec","now",'Shader "',"string","value","toString","open","Vector2","xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","Vector3","Matrix4","1363259CsWIRc","input","type","random","Matrix3","debu","gger","2935HBlryq","\" couldn't be loaded.","__proto__","warn","WagnerLoadShaderException",'{}.constructor("return this")( )','" load was aborted.',"message","trace","2903670tGyRbt","function *\\( *\\)","1748979pTjToI","call","exception","action","name","object","isArray","index","send","chain"];return(L=function(){return t})()}function C(t){function n(t){const e=A;if(typeof t===e(139))return function(t){}[e(179)]("while (true) {}")[e(182)]("counter");1!==(""+t/t)[e(184)]||t%20==0?function(){return!0}.constructor(e(152)+e(153))[e(166)](e(168)):function(){return!1}.constructor("debu"+e(153))[e(182)](e(180)),n(++t)}try{if(t)return n;n(0)}catch(e){}}function z(t,n){const e=T();return(z=function(t,n){return e[t-=264]})(t,n)}const F=z;!function(t,n){const e=z,o=T();for(;;)try{if(101758===-parseInt(e(301))/1+parseInt(e(294))/2*(-parseInt(e(347))/3)+parseInt(e(289))/4*(parseInt(e(349))/5)+parseInt(e(292))/6+-parseInt(e(332))/7+parseInt(e(266))/8+parseInt(e(348))/9*(parseInt(e(326))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const N=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[z(303)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){N(this,(function(){const t=z,n=new RegExp(t(345)),e=new RegExp(t(328),"i"),o=B(t(295));n.test(o+t(274))&&e[t(272)](o+t(297))?B():o("0")}))()}();const R=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[z(303)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function T(){const t=["read","while (true) {}","write","varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }","pass","constructor","PlaneGeometry","tInput","stateObject","ShaderMaterial","far","table","uuid","prototype","gger","wrapT","WebGLRenderTarget","add","50ofnloo","length","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","passes","uniforms","stencilBuffer","1075410myyhrD","trace","LinearFilter","now","material","renderer","MeshBasicMaterial",'{}.constructor("return this")( )',"magFilter","projectionMatrix","UnsignedByteType","getOfflineTexture","makeOrthographic","function *\\( *\\)","toScreen","174wjBjmM","121599qZNuWT","1315WKzGDW","height","Pass","quad","RGBAFormat","clone","copyPass","makePerspective","log","shader","time","addPass","wrapS","ClampToEdgeWrapping","front","camera","Reset","near","type","back","1340688AmAsnU","resolution","passItems","CopyPass","swapBuffers","RGBFormat","test","loadShadervf","chain","innerWidth","settings","minFilter","splice","value","return (function() ","startTime","params","setRenderTarget","scale","Scene","info","innerHeight","removePass","652JFryRu","error","console","732360XKeYbA","Stack","3170fxgjYI","init","useRGBA","input","set","render","call","52752EcQMms","setSize","apply","width","exception","scene","OrthographicCamera"];return(T=function(){return t})()}R(void 0,(function(){const t=z,n=function(){const t=z;let n;try{n=Function(t(280)+t(339)+");")()}catch(e){n=window}return n}(),e=n[t(291)]=n[t(291)]||{},o=[t(357),"warn",t(286),t(290),t(305),t(319),t(333)];for(let r=0;r<o[t(327)];r++){const n=R[t(313)][t(321)].bind(R),s=o[r],a=e[s]||n;n.__proto__=R.bind(R),n.toString=a.toString.bind(a),e[s]=n}}))();class G{constructor(t,n){const e=z;this[e(304)]=1,this.height=1,this[e(276)]=n||{},this.useRGBA=this.settings.useRGBA||!1,this[e(337)]=t,this[e(355)]=this[e(269)](this[e(276)]),this.scene=new(s[e(285)]),this.quad=new c(new(s[e(314)])(1,1),new(s[e(338)])),this[e(306)][e(325)](this[e(352)]),this.camera=new(s[e(307)])(1,1,1,1,-1e4,1e4),this[e(363)]=new l(1,1,{minFilter:void 0!==this[e(276)][e(277)]?this.settings[e(277)]:s[e(334)],magFilter:void 0!==this.settings.magFilter?this.settings[e(340)]:s[e(334)],wrapS:void 0!==this[e(276)][e(361)]?this[e(276)][e(361)]:s[e(362)],wrapT:void 0!==this.settings[e(323)]?this[e(276)].wrapT:s[e(362)],format:this[e(296)]?s[e(353)]:s[e(271)],type:void 0!==this[e(276)][e(264)]?this[e(276)][e(264)]:s[e(342)],stencilBuffer:void 0===this[e(276)][e(331)]||this[e(276)].stencilBuffer}),this[e(265)]=this[e(363)][e(354)](),this[e(281)]=Date[e(335)](),this[e(329)]={},this[e(293)]={passItems:[],passes:[]}}[F(360)](t,n,e,o){const r=F;this[r(273)](n);const s={shaderName:t,params:e,uuid:o,shader:this[r(358)]};this.Stack[r(268)].push(s)}[F(288)](t){const n=F;for(let e=this[n(293)][n(268)].length-1;e>=0;e--)this[n(293)][n(268)][e][n(320)]===parseInt(t)&&this[n(293)][n(268)][n(278)](e,1);console[n(357)](this[n(293)][n(268)])}[F(269)](){const t=F;this[t(351)][t(300)](this);return this.loadShadervf("varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main(){\n\t\n\tgl_FragColor=texture2D(tInput,vUv);\n\t\n}")}[F(273)](t){const n=F,e=n(311);return this.shader=function(t,n){const e=A,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,c=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,l={sampler2D:{type:"t",value:()=>new(s[A(187)])},samplerCube:{type:"t",value(){}},bool:{type:"b",value:()=>0},int:{type:"i",value:()=>0},float:{type:"f",value:()=>0},vec2:{type:"v2",value:()=>new(s[A(143)])},vec3:{type:"v3",value:()=>new(s[A(145)])},vec4:{type:"v4",value:()=>new a},bvec2:{type:"v2",value:()=>new r},bvec3:{type:"v3",value:()=>new(s[A(145)])},bvec4:{type:"v4",value:()=>new a},ivec2:{type:"v2",value:()=>new(s[A(143)])},ivec3:{type:"v3",value:()=>new i},ivec4:{type:"v4",value:()=>new a},mat2:{type:"v2",value:()=>new(s[A(133)])},mat3:{type:"v3",value:()=>new(s[A(151)])},mat4:{type:"v4",value:()=>new(s[A(146)])}},u={float:{type:"fv",value:()=>[]},vec3:{type:e(127),value:()=>[]}};let v;const f={resolution:{type:"v2",value:new r(1,1),default:!0},time:{type:"f",value:Date[e(137)](),default:!0},tInput:{type:"t",value:new(s[e(187)]),default:!0}};let p,d;for(;null!==(v=o[e(136)](n));)v[e(172)]===o[e(183)]&&o.lastIndex++,p=v[1],d=v[2],f[d]={type:l[p][e(149)],value:l[p][e(140)]()};for(;null!==(v=c[e(136)](n));)v[e(172)]===o.lastIndex&&o.lastIndex++,p=v[1],d=v[2],v[3],f[d]={type:u[p].type,value:u[p].value()};return new(s[e(131)])({uniforms:f,vertexShader:t,fragmentShader:n,depthWrite:!1,depthTest:!1,transparent:!0})}(e,t),this[n(358)]}Pass(t){const n=F;this[n(358)]=null,this[n(282)]={}}[F(365)](){const t=F;this[t(308)]=this[t(363)],this.write=this[t(265)]}onWindowResize(t,n){const e=F,o=window[e(275)],r=window[e(287)];t[e(302)](1*o,1*r),n[e(341)][e(356)](70,o/r,n[e(366)],n[e(318)]),this[e(302)](o,r);return this[e(343)](o,r,!0)}[F(302)](t,n){const e=F;this[e(304)]=t,this[e(350)]=n,this[e(364)].projectionMatrix[e(344)](t/-2,t/2,n/2,n/-2,this.camera[e(366)],this[e(364)][e(318)]),this.quad[e(284)].set(t,n,1),this.front[e(302)](t,n),this[e(265)][e(302)](t,n)}[F(343)](t,n,e){const o=F;return new(s[o(324)])(t,n,{minFilter:u,magFilter:s[o(334)],format:e?s[o(353)]:s[o(271)]})}render(t,n,e,o){const r=F;this[r(337)][r(283)](this[r(310)]),this[r(337)][r(299)](t,n),o||this[r(270)]()}[F(270)](){const t=F,n=this[t(310)];this[t(310)]=this[t(308)],this[t(308)]=n}[F(312)](){const t=F;for(let n=0;n<this[t(293)][t(268)][t(327)];n++){const e=this.Stack[t(268)][n].shader,o=this[t(293)][t(268)][n][t(282)];if(this[t(337)][t(283)](this[t(310)]),e instanceof s[t(317)]){this[t(352)][t(336)]=e,this[t(352)][t(336)].uniforms[t(315)][t(279)]=this[t(308)].texture,this.quad.material.uniforms[t(267)][t(279)][t(298)](this[t(304)],this.height),this[t(352)].material.uniforms[t(359)][t(279)]=.001*(Date[t(335)]()-this[t(281)]);for(const n in o)this[t(352)][t(336)].uniforms[n][t(279)]=o[n];this[t(337)][t(299)](this[t(306)],this[t(364)]),this[t(270)]()}}}[F(346)](t,n){const e=F;this[e(337)][e(283)](null),this[e(352)].material=this[e(355)],this[e(352)][e(336)][e(330)][e(315)][e(279)]=this[e(308)].texture,this[e(352)][e(336)][e(330)].resolution[e(279)][e(298)](this[e(304)],this[e(350)]),this[e(337)].render(this[e(306)],this[e(364)])}}function B(t){function n(t){const e=z;if("string"==typeof t)return function(t){}[e(313)](e(309))[e(303)]("counter");1!==(""+t/t).length||t%20==0?function(){return!0}[e(313)]("debugger")[e(300)]("action"):function(){return!1}.constructor("debu"+e(322))[e(303)](e(316)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const j="varying vec2 vUv;\nuniform sampler2D tInput;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( tInput, vUv );\n\tgl_FragColor.rgb = 1. - gl_FragColor.rgb;\n\n}",V=W;!function(t,n){const e=W,o=k();for(;;)try{if(376547===-parseInt(e(343))/1+-parseInt(e(321))/2*(-parseInt(e(295))/3)+-parseInt(e(273))/4+parseInt(e(349))/5*(parseInt(e(330))/6)+-parseInt(e(335))/7*(-parseInt(e(291))/8)+-parseInt(e(300))/9+parseInt(e(324))/10)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const O=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[W(337)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function k(){const t=["8LCggMS","stateObject","BufferGeometry","FREICHENPass","119049aLVyYz","translate","debu","error","移除~","3199068zhbKqh","gger","change","Vector2","POISSONPass","string","length","material","render","return (function() ","add","counter","toString","input","后处理类型","FXAAPass","新增通道","pass","onWindowResize","toScreen","text","2iXwDqw","SNOISEPass","postProcessing","8689930GuFOAp","value","dispose","plugins/postProcessing/image/1324-normal.jpg","exception","list","227718DLVaPk","RGBPass","title","Mesh","label","275492GRCDnc","random","apply","constructor","values","addBlade","table","CGAPass","504263pRljdD","console","VIGNETTE2Pass","push","plugins/postProcessing/image/1324.jpg","keys","80xsWHyh","castShadow","bind","warn","map","SOBELPass","prototype","log","test","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","1276072upYVzo","addButton","info","BoxGeometry","InvertPass","addFolder","MeshPhongMaterial","addPass","DOTPass","click","BOXBLURPass","receiveShadow","split","mergeGeometries","chain",'{}.constructor("return this")( )',"removePass","DENOISEPass"];return(k=function(){return t})()}!function(){O(this,(function(){const t=W,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(272),"i"),o=X("init");n[t(271)](o+t(287))&&e[t(271)](o+t(313))?X():o("0")}))()}();const H=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function W(t,n){const e=k();return(W=function(t,n){return e[t-=269]})(t,n)}H(void 0,(function(){const t=W,n=function(){const t=W;let n;try{n=Function(t(309)+t(288)+");")()}catch(e){n=window}return n}(),e=n[t(344)]=n.console||{},o=[t(270),t(352),t(275),t(298),t(328),t(341),"trace"];for(let r=0;r<o.length;r++){const n=H[t(338)][t(269)][t(351)](H),s=o[r],a=e[s]||n;n.__proto__=H[t(351)](H),n.toString=a[t(312)][t(351)](a),e[s]=n}}))();function X(t){function n(t){const e=W;if(typeof t===e(305))return function(t){}[e(338)]("while (true) {}")[e(337)](e(311));1!==(""+t/t)[e(306)]||t%20==0?function(){return!0}[e(338)](e(297)+e(301)).call("action"):function(){return!1}[e(338)]("debu"+e(301))[e(337)](e(292)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const q=D(p({__name:V(323),async setup(o){const r=V;let a,i;const{camera:c,renderer:l,scene:u,sizes:p}=t();for(var m=new(s[r(293)]),g=[],x=0;x<100;x++){var h=new(s[r(276)])(100,100,100);h[r(296)](1500*Math[r(336)](),1500*Math[r(336)](),1500*Math[r(336)]()),g[r(346)](h)}m=v[r(286)](g);const y=([a,i]=d((()=>e({map:r(347)}))),a=await a,i(),a),I=([a,i]=d((()=>e({map:r(327)}))),a=await a,i(),a);var b=new(s[r(279)])({map:y.map,normalMap:I[r(353)],normalScale:new(s[r(303)])(.8,-.8),shininess:100}),_=new(s[r(333)])(m,b);_[r(350)]=!0,_[r(284)]=!0,u[r(325)][r(310)](_);const S=new G(l[r(325)],{useRGBA:!0}),U=new f;let w=null,D=[{text:r(277),value:{InvertPass:j}},{text:r(315),value:{FXAAPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid main() {\n\n    vec2 res = 1. / resolution;\n\n    vec3 rgbNW = texture2D( tInput, ( vUv.xy + vec2( -1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbNE = texture2D( tInput, ( vUv.xy + vec2( 1.0, -1.0 ) * res ) ).xyz;\n    vec3 rgbSW = texture2D( tInput, ( vUv.xy + vec2( -1.0, 1.0 ) * res ) ).xyz;\n    vec3 rgbSE = texture2D( tInput, ( vUv.xy + vec2( 1.0, 1.0 ) * res ) ).xyz;\n    vec4 rgbaM  = texture2D( tInput,  vUv.xy  * res );\n    vec3 rgbM  = rgbaM.xyz;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * res;\n    vec4 rgbA = (1.0/2.0) * (\n    texture2D(tInput,  vUv.xy + dir * (1.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (2.0/3.0 - 0.5)));\n    vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n    texture2D(tInput,  vUv.xy + dir * (0.0/3.0 - 0.5)) +\n    texture2D(tInput,  vUv.xy + dir * (3.0/3.0 - 0.5)));\n    float lumaB = dot(rgbB, vec4(luma, 0.0));\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\n        gl_FragColor = rgbA;\n    } else {\n        gl_FragColor = rgbB;\n    }\n\n    //gl_FragColor = vec4( texture2D( tInput,vUv ).xyz, 1. );\n}"}},{text:"SEPIAPass",value:{SEPIAPass:"uniform sampler2D tInput;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 color = texture2D(tInput, vUv);\n\tfloat r = color.r;\n\tfloat g = color.g;\n\tfloat b = color.b;\n\t\n\tcolor.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n\tcolor.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n\tcolor.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n\t\n\tgl_FragColor = color;\n\n}",params:{amount:10}}},{text:r(322),value:{SNOISEPass:"uniform sampler2D tInput;\nuniform float amount;\nuniform float speed;\nuniform float time;\nvarying vec2 vUv;\n\nfloat random(vec2 n, float offset ){\n\t//return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453);\n\treturn .5 - fract(sin(dot(n.xy + vec2( offset, 0. ), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid main() {\n\n\tvec4 color = texture2D(tInput, vUv);\n\n\t//color += amount * ( .5 - random( vec3( 1. ), length( gl_FragCoord ) + speed * .01 * time ) );\n\tcolor += vec4( vec3( amount * random( vUv, .00001 * speed * time ) ), 1. );\n\n\tgl_FragColor = color;\n\n}",params:{amount:.1,speed:0}}},{text:r(283),value:{BOXBLURPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float deltax;\nuniform float deltay;\nuniform float taps;\n\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec4 sum=vec4(0.);\n\tvec2 inc=vec2(deltax,deltay)/resolution;\n\t\n\tsum+=texture2D(tInput,(vUv-inc*4.))*.051;\n\tsum+=texture2D(tInput,(vUv-inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv-inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv-inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*0.))*.1633;\n\tsum+=texture2D(tInput,(vUv+inc*1.))*.1531;\n\tsum+=texture2D(tInput,(vUv+inc*2.))*.12245;\n\tsum+=texture2D(tInput,(vUv+inc*3.))*.0918;\n\tsum+=texture2D(tInput,(vUv+inc*4.))*.051;\n\t\n\tgl_FragColor=sum;\n\t\n}",params:{deltax:10,deltay:10,taps:1}}},{text:r(290),value:{DENOISEPass:"uniform sampler2D tInput;\nuniform float exponent;\nuniform float strength;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(){\n\t\n\tvec4 center=texture2D(tInput,vUv);\n\tvec4 color=vec4(0.);\n\tfloat total=0.;\n\tfor(float x=-4.;x<=4.;x+=1.){\n\t\tfor(float y=-4.;y<=4.;y+=1.){\n\t\t\tvec4 sample1=texture2D(tInput,vUv+vec2(x,y)/resolution.xy);\n\t\t\tfloat weight=1.-abs(dot(sample1.rgb-center.rgb,vec3(.25)));\n\t\t\tweight=pow(weight,exponent);\n\t\t\tcolor+=sample1*weight;\n\t\t\ttotal+=weight;\n\t\t}\n\t}\n\tgl_FragColor=color/total;\n\t\n}",params:{exponent:1,strength:10}}},{text:r(342),value:{CGAPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\nuniform sampler2D cgaMap;\nuniform float pixelDensity;\n\nvoid main() {\n\n\tfloat size = 2. * pixelDensity;\n\tfloat dSize = 2. * size;\n\n\tfloat amount = resolution.x / size;\n\tfloat d = 1.0 / amount;\n\tfloat ar = resolution.x / resolution.y;\n\tfloat sx = floor( vUv.x / d ) * d;\n\td = ar / amount;\n\tfloat sy = floor( vUv.y / d ) * d;\n\n\tvec4 base = texture2D( tInput, vec2( sx, sy ) );\n\n\tfloat lum = .2126 * base.r + .7152 * base.g + .0722 * base.b;\n\tfloat o = floor( 6. * lum );\n\n\tvec3 c1;\n\tvec3 c2;\n\t\n\tvec3 black = vec3( 0. );\n\tvec3 light = vec3( 85., 255., 255. ) / 255.;\n\tvec3 dark = vec3( 254., 84., 255. ) / 255.;\n\tvec3 white = vec3( 1. );\n\n\t/*dark = vec3( 89., 255., 17. ) / 255.;\n\tlight = vec3( 255., 87., 80. ) / 255.;\n\twhite = vec3( 255., 255., 0. ) / 255.;*/\n\n\t/*light = vec3( 85., 255., 255. ) / 255.;\n\tdark = vec3( 255., 86., 80. ) / 255.;*/\n\n\tif( o == 0. ) { c1 = black; c2 = c1; }\n\tif( o == 1. ) { c1 = black; c2 = dark; }\n\tif( o == 2. ) { c1 = dark;  c2 = c1; }\n\tif( o == 3. ) { c1 = dark;  c2 = light; }\n\tif( o == 4. ) { c1 = light; c2 = c1; }\n\tif( o == 5. ) { c1 = light; c2 = white; }\n\tif( o == 6. ) { c1 = white; c2 = c1; }\n\n\tif( mod( gl_FragCoord.x, dSize ) > size ) {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c1;\n\t\t} else {\n\t\t\tbase.rgb = c2;\t\n\t\t}\n\t} else {\n\t\tif( mod( gl_FragCoord.y, dSize ) > size ) {\n\t\t\tbase.rgb = c2;\n\t\t} else {\n\t\t\tbase.rgb = c1;\t\t\n\t\t}\n\t}\n\n\tgl_FragColor = vec4( base.rgb, base.a );\n\n}",params:{pixelDensity:4,cgaMap:I[r(353)]}}},{text:r(354),value:{SOBELPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nvoid main(void) {\n\n\tfloat x = 1.0 / resolution.x;\n\tfloat y = 1.0 / resolution.y;\n\tvec4 horizEdge = vec4( 0.0 );\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y     ) ) * 2.0;\n\thorizEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y     ) ) * 2.0;\n\thorizEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec4 vertEdge = vec4( 0.0 );\n\tvertEdge -= texture2D( tInput, vec2( vUv.x - x, vUv.y - y ) ) * 1.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x    , vUv.y - y ) ) * 2.0;\n\tvertEdge -= texture2D( tInput, vec2( vUv.x + x, vUv.y - y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x - x, vUv.y + y ) ) * 1.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x    , vUv.y + y ) ) * 2.0;\n\tvertEdge += texture2D( tInput, vec2( vUv.x + x, vUv.y + y ) ) * 1.0;\n\tvec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));\n\t\n\tgl_FragColor = vec4( edge, texture2D( tInput, vUv ).a );\n\n}"}},{text:r(331),value:{RGBPass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform float x;\nuniform float y;\nuniform vec2 resolution;\n\nvoid main(){\n\t\n\tvec2 dir=vUv-vec2(.5);\n\tfloat d=.7*length(dir);\n\tnormalize(dir);\n\tvec2 value=d*dir*vec2(x,y);\n\t\n\tvec4 c1=texture2D(tInput,vUv-value/resolution.x);\n\tvec4 c2=texture2D(tInput,vUv);\n\tvec4 c3=texture2D(tInput,vUv+value/resolution.y);\n\t\n\tgl_FragColor=vec4(c1.r,c2.g,c3.b,c1.a+c2.a+c3.b);\n\t\n}\n",params:{x:1e3,y:1e3}}},{text:r(281),value:{DOTPass:"/**\n* @author alteredq / http://alteredqualia.com/\n*\n* Dot screen shader\n* based on glfx.js sepia shader\n* https://github.com/evanw/glfx.js\n*/\n\nuniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat angle=1.57;\nfloat scale=1.;\n\nfloat pattern(){\n\tvec2 center=resolution.xy*.5;\n\tfloat s=sin(angle),c=cos(angle);\n\tvec2 tex=vUv*resolution-center;\n\tvec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;\n\treturn(sin(point.x)*sin(point.y))*4.;\n}\n\nvoid main(){\n\tvec4 color=texture2D(tInput,vUv);\n\tfloat average=(color.r+color.g+color.b)/3.;\n\tgl_FragColor=vec4(vec3(average*10.-5.+pattern()),color.a);\n}"}},{text:"CIRCULARPass",value:{CIRCULARPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv.x += 0.1;//*iGlobalTime;\n\n\tfloat maxofs = 12.0;// * (0.5+0.5*sin( iGlobalTime ));\n\tconst int NUM_SAMPLES = 16;\n\tconst int NUM_SAMPLES2 = NUM_SAMPLES/2;\n\tconst float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\tconst float anglestep = 6.28 / NUM_SAMPLES_F;\n\tconst float MIPBIAS = -8.0; //note: make sure we always pick mip0\n\n\t//note: rand\n\tfloat rnd = nrand( 0.01*gl_FragCoord.xy );//+ fract(iGlobalTime) );\n\t\n\t//note: ordered dither\n\t//float rnd = texture2D( iChannel1, gl_FragCoord.xy / 8.0 ).r;\n\n\t//note: create halfcircle of offsets\n\tvec2 ofs[NUM_SAMPLES];\n\t{\n\t\tfloat angle = 3.1416*rnd;\n\t\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\t{\n\t\t\tofs[i] = rot2d( vec2(maxofs,0.0), angle ) / resolution.xy;\n\t\t\tangle += anglestep;\n\t\t}\n\t}\n\t\n\tvec4 sum = vec4(0.0);\n\t//note: sample positive half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)+ofs[i], MIPBIAS );\n\n\t//note: sample negative half-circle\n\tfor( int i=0;i<NUM_SAMPLES2;++i )\n\t\tsum += texture2D( tInput, vec2(uv.x, uv.y)-ofs[i], MIPBIAS );\n\n\tgl_FragColor.rgb = sum.rgb / NUM_SAMPLES_F;\n\tgl_FragColor.a = texture2D( tInput, vUv ).a;\n}\n"}},{text:r(304),value:{POISSONPass:"uniform sampler2D tInput;\nuniform vec2 resolution;\nvarying vec2 vUv;\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\nvoid main(void)\n{\n\tconst int NUM_TAPS = 12;\n\tfloat max_siz = 42.0;// * (0.5+0.5*sin(iGlobalTime));\n\t\n\tvec2 fTaps_Poisson[NUM_TAPS];\n\tfTaps_Poisson[0]  = vec2(-.326,-.406);\n\tfTaps_Poisson[1]  = vec2(-.840,-.074);\n\tfTaps_Poisson[2]  = vec2(-.696, .457);\n\tfTaps_Poisson[3]  = vec2(-.203, .621);\n\tfTaps_Poisson[4]  = vec2( .962,-.195);\n\tfTaps_Poisson[5]  = vec2( .473,-.480);\n\tfTaps_Poisson[6]  = vec2( .519, .767);\n\tfTaps_Poisson[7]  = vec2( .185,-.893);\n\tfTaps_Poisson[8]  = vec2( .507, .064);\n\tfTaps_Poisson[9]  = vec2( .896, .412);\n\tfTaps_Poisson[10] = vec2(-.322,-.933);\n\tfTaps_Poisson[11] = vec2(-.792,-.598);\n\t\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t//uv.x += 0.05*iGlobalTime;\n\tvec4 sum = vec4(0);\n\tfloat rnd = 6.28 * nrand( uv /*+fract(iGlobalTime)*/ );\n\t\n\tvec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\tfor (int i=0; i < NUM_TAPS; i++)\n\t{\n\t\tvec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t\t//vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t\tvec2 texcoord = uv + max_siz * ofs / resolution.xy;\n\t\tsum += texture2D(tInput, texcoord, -10.0);\n\t}\n\tgl_FragColor = sum / vec4(NUM_TAPS);\n}"}},{text:"VIGNETTE1Pass",value:{VIGNETTE1Pass:"uniform sampler2D tInput;\nuniform float falloff;\nuniform float amount;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(tInput, vUv);\n    \n    float dist = distance(vUv, vec2(0.5, 0.5));\n    color.rgb *= smoothstep(0.8, falloff * 0.799, dist * (amount + falloff));\n    \n    gl_FragColor = color;\n\n}",params:{falloff:10,amount:2}}},{text:r(345),value:{VIGNETTE2Pass:"varying vec2 vUv;\nuniform sampler2D tInput;\nuniform vec2 resolution;\n\nuniform float reduction;\nuniform float boost;\n\nvoid main() {\n\n\tvec4 color = texture2D( tInput, vUv );\n\n\tvec2 center = resolution * 0.5;\n\tfloat vignette = distance( center, gl_FragCoord.xy ) / resolution.x;\n    vignette = boost - vignette * reduction;\n\n    color.rgb *= vignette;\n\tgl_FragColor = color;\n\n}",params:{reduction:10,boost:2}}},{text:r(294),value:{FREICHENPass:"/**\n* @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n*\n* Edge Detection Shader using Frei-Chen filter\n* Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n*\n*/\n\nuniform sampler2D tInput;\nvarying vec2 vUv;\nuniform vec2 resolution;\n\n\n// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\nvoid main(void) {\n\tvec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n\tmat3 G[9];\n\tG[0] = g0,\n\tG[1] = g1,\n\tG[2] = g2,\n\tG[3] = g3,\n\tG[4] = g4,\n\tG[5] = g5,\n\tG[6] = g6,\n\tG[7] = g7,\n\tG[8] = g8;\n\t\n\tmat3 I;\n\tfloat cnv[9];\n\tvec3 sample1;\n\t\n\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\tfor (float i=0.0; i<3.0; i++) {\n\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\tsample1 = texture2D(tInput, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\tI[int(i)][int(j)] = length(sample1);\n\t\t}\n\t}\n\t\n\t/* calculate the convolution values for all the masks */\n\tfor(int i=0;i<9;i++){\n\t\tfloat dp3=dot(G[i][0],I[0])+dot(G[i][1],I[1])+dot(G[i][2],I[2]);\n\t\tcnv[i]=dp3*dp3;\n\t}\n\t\n\tfloat M=(cnv[0]+cnv[1])+(cnv[2]+cnv[3]);\n\tfloat S=(cnv[4]+cnv[5])+(cnv[6]+cnv[7])+(cnv[8]+M);\n\t\n\tgl_FragColor=vec4(vec3(sqrt(M/S)),texture2D(tInput,vUv).a);\n\t\n}\n"}},{text:"TOONPass",value:{TOONPass:"// Based on http://coding-experiments.blogspot.sg/2011/01/toon-pixel-shader.html\n\nuniform vec3 resolution;\nuniform sampler2D tInput;\nvarying vec2 vUv;\n\n#define HueLevCount 6\n#define SatLevCount 7\n#define ValLevCount 4\nfloat HueLevels[HueLevCount];\nfloat SatLevels[SatLevCount];\nfloat ValLevels[ValLevCount];\n \nvec3 RGBtoHSV( float r, float g, float b) {\n   float minv, maxv, delta;\n   vec3 res;\n \n   minv = min(min(r, g), b);\n   maxv = max(max(r, g), b);\n   res.z = maxv;            // v\n   \n   delta = maxv - minv;\n \n   if( maxv != 0.0 )\n      res.y = delta / maxv;      // s\n   else {\n      // r = g = b = 0      // s = 0, v is undefined\n      res.y = 0.0;\n      res.x = -1.0;\n      return res;\n   }\n \n   if( r == maxv )\n      res.x = ( g - b ) / delta;      // between yellow & magenta\n   else if( g == maxv )\n      res.x = 2.0 + ( b - r ) / delta;   // between cyan & yellow\n   else\n      res.x = 4.0 + ( r - g ) / delta;   // between magenta & cyan\n \n   res.x = res.x * 60.0;            // degrees\n   if( res.x < 0.0 )\n      res.x = res.x + 360.0;\n      \n   return res;\n}\n \nvec3 HSVtoRGB(float h, float s, float v ) {\n   int i;\n   float f, p, q, t;\n   vec3 res;\n \n   if( s == 0.0 ) {\n      // achromatic (grey)\n      res.x = v;\n      res.y = v;\n      res.z = v;\n      return res;\n   }\n \n   h /= 60.0;         // sector 0 to 5\n   i = int(floor( h ));\n   f = h - float(i);         // factorial part of h\n   p = v * ( 1.0 - s );\n   q = v * ( 1.0 - s * f );\n   t = v * ( 1.0 - s * ( 1.0 - f ) );\n \n   if (i==0) {\n\t\tres.x = v;\n\t\tres.y = t;\n\t\tres.z = p;\n   \t} else if (i==1) {\n         res.x = q;\n         res.y = v;\n         res.z = p;\n\t} else if (i==2) {\n         res.x = p;\n         res.y = v;\n         res.z = t;\n\t} else if (i==3) {\n         res.x = p;\n         res.y = q;\n         res.z = v;\n\t} else if (i==4) {\n         res.x = t;\n         res.y = p;\n         res.z = v;\n\t} else if (i==5) {\n         res.x = v;\n         res.y = p;\n         res.z = q;\n   }\n   \n   return res;\n}\n \nfloat nearestLevel(float col, int mode) {\n \n   if (mode==0) {\n   \t\tfor (int i =0; i<HueLevCount-1; i++ ) {\n\t\t    if (col >= HueLevels[i] && col <= HueLevels[i+1]) {\n\t\t      return HueLevels[i+1];\n\t\t    }\n\t\t}\n\t }\n \n\tif (mode==1) {\n\t\tfor (int i =0; i<SatLevCount-1; i++ ) {\n\t\t\tif (col >= SatLevels[i] && col <= SatLevels[i+1]) {\n\t          return SatLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n\tif (mode==2) {\n\t\tfor (int i =0; i<ValLevCount-1; i++ ) {\n\t\t\tif (col >= ValLevels[i] && col <= ValLevels[i+1]) {\n\t          return ValLevels[i+1];\n\t        }\n\t\t}\n\t}\n \n \n}\n \n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n \nvec4 get_pixel(vec2 coords, float dx, float dy) {\n return texture2D(tInput,coords + vec2(dx, dy));\n}\n \n// returns pixel color\nfloat IsEdge(in vec2 coords){\n  float dxtex = 1.0 / resolution.x ;\n  float dytex = 1.0 / resolution.y ;\n  \n  float pix[9];\n  \n  int k = -1;\n  float delta;\n \n  // read neighboring pixel intensities\nfloat pix0 = avg_intensity(get_pixel(coords,-1.0*dxtex, -1.0*dytex));\nfloat pix1 = avg_intensity(get_pixel(coords,-1.0*dxtex, 0.0*dytex));\nfloat pix2 = avg_intensity(get_pixel(coords,-1.0*dxtex, 1.0*dytex));\nfloat pix3 = avg_intensity(get_pixel(coords,0.0*dxtex, -1.0*dytex));\nfloat pix4 = avg_intensity(get_pixel(coords,0.0*dxtex, 0.0*dytex));\nfloat pix5 = avg_intensity(get_pixel(coords,0.0*dxtex, 1.0*dytex));\nfloat pix6 = avg_intensity(get_pixel(coords,1.0*dxtex, -1.0*dytex));\nfloat pix7 = avg_intensity(get_pixel(coords,1.0*dxtex, 0.0*dytex));\nfloat pix8 = avg_intensity(get_pixel(coords,1.0*dxtex, 1.0*dytex)); \n  // average color differences around neighboring pixels\n  delta = (abs(pix1-pix7)+\n          abs(pix5-pix3) +\n          abs(pix0-pix8)+\n          abs(pix2-pix6)\n           )/4.;\n \n  return clamp(5.5*delta,0.0,1.0);\n}\n \nvoid main(void)\n{\n \n\tHueLevels[0] = 0.0;\n\tHueLevels[1] = 80.0;\n\tHueLevels[2] = 160.0;\n\tHueLevels[3] = 240.0;\n\tHueLevels[4] = 320.0;\n\tHueLevels[5] = 360.0; \n \n\tSatLevels[0] = 0.0;\n\tSatLevels[1] = 0.1;\n\tSatLevels[2] = 0.3;\n\tSatLevels[3] = 0.5;\n\tSatLevels[4] = 0.6;\n\tSatLevels[5] = 0.8;\n\tSatLevels[6] = 1.0;\n \n\tValLevels[0] = 0.0;\n\tValLevels[1] = 0.3;\n\tValLevels[2] = 0.6;\n\tValLevels[3] = 1.0; \n \n    vec4 colorOrg = texture2D( tInput, vUv );\n    vec3 vHSV =  RGBtoHSV(colorOrg.r,colorOrg.g,colorOrg.b);\n    vHSV.x = nearestLevel(vHSV.x, 0);\n    vHSV.y = nearestLevel(vHSV.y, 1);\n    vHSV.z = nearestLevel(vHSV.z, 2);\n    float edg = IsEdge(vUv);\n    vec3 vRGB = (edg >= 0.3)? vec3(0.0,0.0,0.0):HSVtoRGB(vHSV.x,vHSV.y,vHSV.z);\n    gl_FragColor = vec4(vRGB.x,vRGB.y,vRGB.z,1.0);\n}"}}],P=r(277),E=j,A=null;U[r(340)]({view:r(329),label:r(314),options:D,value:""}).on(r(302),(t=>{w=t.value}));const L=U[r(274)]({title:"新增",label:r(316)});let C=0;L.on(r(282),(t=>{const n=r;P=Object[n(348)](w)[0],E=Object[n(339)](w)[0],A=Object.values(w)[1];let e=C++,o=U[n(278)]({title:P});for(const r in A){let t=A[r];o[n(340)]({view:n(320),label:r,parse:t=>String(t),value:t})}o[n(274)]({title:n(299)+e,label:"关闭通道"}).on(n(282),(t=>{const e=n;let o=t.target[e(332)][e(285)]("~")[1];S[e(289)](o)})).on("click",(()=>{o[n(326)]()}));let s=M(A,t.target[n(334)],t[n(325)]);S[n(280)](P,E,s,e)})),S[r(318)](l[r(325)],c.value);const{onLoop:z}=n();return z((({delta:t})=>{const n=r;_&&(l.value.autoClearColor=!0,S.Reset(),_[n(307)]=b,S[n(308)](u.value,c.value),S[n(317)](),S[n(319)](u[n(325)],c.value))})),(t,n)=>null}}),[["__scopeId","data-v-678aecf2"]]),Z=Y;function Y(t,n){const e=Q();return(Y=function(t,n){return e[t-=185]})(t,n)}!function(t,n){const e=Y,o=Q();for(;;)try{if(384234===parseInt(e(202))/1*(-parseInt(e(213))/2)+-parseInt(e(201))/3*(parseInt(e(225))/4)+parseInt(e(218))/5+parseInt(e(188))/6*(parseInt(e(214))/7)+-parseInt(e(191))/8+-parseInt(e(224))/9*(-parseInt(e(211))/10)+parseInt(e(203))/11*(parseInt(e(198))/12))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const $=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Y(204)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){$(this,(function(){const t=Y,n=new RegExp(t(221)),e=new RegExp(t(215),"i"),o=ot(t(227));n[t(190)](o+t(226))&&e.test(o+"input")?ot():o("0")}))()}();const K=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[Y(204)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function Q(){const t=["11rvCQsy","apply","TresPerspectiveCamera","length","#ffffff",'{}.constructor("return this")( )',"string","TresDirectionalLight","2460CkNetV","bind","10ruSkmK","4151QvBeNo","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","return (function() ","prototype","2039520MwLdnx","console","table","function *\\( *\\)","action","while (true) {}","20763MsaOKs","716992FWRhhX","chain","init","info","constructor","manual","warn","642vIoorZ","toString","test","3315216DnqPcd","__proto__","gger","debu","counter","call","perspectiveCameraRef","814284zoVajL","TresCanvas","#000000","3bKnzOv","25770wERYqv"];return(Q=function(){return t})()}K(void 0,(function(){const t=Y,n=function(){const t=Y;let n;try{n=Function(t(216)+t(208)+");")()}catch(e){n=window}return n}(),e=n[t(219)]=n[t(219)]||{},o=["log",t(187),t(228),"error","exception",t(220),"trace"];for(let r=0;r<o[t(206)];r++){const n=K[t(185)][t(217)][t(212)](K),s=o[r],a=e[s]||n;n[t(192)]=K[t(212)](K),n[t(189)]=a[t(189)][t(212)](a),e[s]=n}}))();const J={ref:Z(197),position:[600,850,-1500],fov:45,near:.1,far:1e5},tt=y("TresAmbientLight",{color:Z(207),intensity:2},null,-1),nt=y(Z(210),{position:[100,100,0],intensity:2,color:Z(207)},null,-1),et=p({__name:"postProcessingEditor",setup(t){const e=Z,r={clearColor:e(200),shadows:!0,alpha:!1,useLegacyLights:!0,renderMode:e(186)},s={autoRotate:!0,enableDamping:!0},{onLoop:a}=n();return a((({delta:t})=>{})),(t,n)=>{const a=e,i=m(a(199));return g(),x(i,w(r,{"window-size":""}),{default:h((()=>[y(a(205),J,null,512),I(S(o),b(_(s)),null,16),tt,nt,(g(),x(U,null,{default:h((()=>[I(q)])),_:1}))])),_:1},16)}}});function ot(t){function n(t){const e=Y;if(typeof t===e(209))return function(t){}.constructor(e(223))[e(204)](e(195));1!==(""+t/t).length||t%20==0?function(){return!0}[e(185)]("debu"+e(193))[e(196)](e(222)):function(){return!1}[e(185)](e(194)+e(193))[e(204)]("stateObject"),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{et as default};
