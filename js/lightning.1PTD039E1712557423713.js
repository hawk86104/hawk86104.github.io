import{a0 as v,aj as x,aG as g,a8 as w,r as _,o as s,v as f,D as c,a7 as y,X as e,a as u,K as k,ab as C,af as T}from"./vendor.dUBjHEtG1712557423713.js";import{E as b,R as P,S as z}from"./EffectComposer.5Aa6ATvp1712557423713.js";const R="varying vec2 vUv;\nvoid main(){\n	vec4 mvPosition=modelViewMatrix*vec4(position,1.);\n	gl_Position=projectionMatrix*mvPosition;\n	vUv=uv;\n}",D="uniform vec2 iResolution;\nuniform float iTime;\nvarying vec2 vUv;\nuniform sampler2D tDiffuse;\nfloat rand(float x)\n{\n	return fract(sin(x)*75154.32912);\n}\n\nfloat rand3d(vec3 x)\n{\n	return fract(375.10297*sin(dot(x,vec3(103.0139,227.0595,31.05914))));\n}\n\nfloat noise(float x)\n{\n	float i=floor(x);\n	float a=rand(i),b=rand(i+1.);\n	float f=x-i;\n	return mix(a,b,f);\n}\n\nfloat perlin(float x)\n{\n	float r=0.,s=1.,w=1.;\n	for(int i=0;i<6;i++){\n		s*=2.;\n		w*=.5;\n		r+=w*noise(s*x);\n	}\n	return r;\n}\n\nfloat noise3d(vec3 x)\n{\n	vec3 i=floor(x);\n	float i000=rand3d(i+vec3(0.,0.,0.)),i001=rand3d(i+vec3(0.,0.,1.));\n	float i010=rand3d(i+vec3(0.,1.,0.)),i011=rand3d(i+vec3(0.,1.,1.));\n	float i100=rand3d(i+vec3(1.,0.,0.)),i101=rand3d(i+vec3(1.,0.,1.));\n	float i110=rand3d(i+vec3(1.,1.,0.)),i111=rand3d(i+vec3(1.,1.,1.));\n	vec3 f=x-i;\n	return mix(mix(mix(i000,i001,f.z),mix(i010,i011,f.z),f.y),\n	mix(mix(i100,i101,f.z),mix(i110,i111,f.z),f.y),f.x);\n}\n\nfloat perlin3d(vec3 x)\n{\n	float r=0.;\n	float w=1.,s=1.;\n	for(int i=0;i<5;i++){\n		w*=.5;\n		s*=2.;\n		r+=w*noise3d(s*x);\n	}\n	return r;\n}\n\nfloat f(float y)\n{\n	float w=.4;// width of strike\n	return w*(perlin(2.*y)-.5);\n}\n\nfloat plot(vec2 p,float d,bool thicker)\n{\n	if(thicker)d+=5.*abs(f(p.y+.001)-f(p.y));\n	return smoothstep(d,0.,abs(f(p.y)-p.x));\n}\n\nfloat cloud(vec2 uv,float speed,float scale,float cover)\n{\n	float c=perlin3d(vec3(uv*scale,iTime*speed*2.));\n	return max(0.,c-(1.-cover));\n}\n\nfloat mountain(vec2 uv,float scale,float offset,float h1,float h2)\n{\n	float h=h1+perlin(scale*uv.x+offset)*(h2-h1);\n	return smoothstep(h,h+.01,uv.y);\n}\n\nvec3 render(vec2 uv)\n{\n	float x=iTime+.1;\n	\n	float m=.25;// max duration of strike\n	float i=floor(x/m);\n	float f=x/m-i;\n	float k=.4;// frequency of strikes\n	float n=noise(i);\n	float t=ceil(n-k);// occurrence\n	float d=max(0.,n-k)/(1.-k);// duration\n	float o=ceil(t-f-(1.-d));// occurrence with duration\n	float gt=.1;// glare duration\n	float go=ceil(t-f-(1.-gt));// glare occurrence\n	\n	float lightning=0.;\n	float light=0.;\n	float glare=0.;\n	\n	if(o==1.){\n		vec2 uv2=uv;\n		uv2.y+=i*2.;// select type of lightning\n		float p=(noise(i+10.)-.5)*2.;// position of lightning\n		uv2.x-=p;\n		\n		float strike=plot(uv2,.01,true);\n		float glow=plot(uv2,.04,false);\n		float glow2=plot(uv2,1.5,false);\n		\n		lightning=strike*.4+glow*.15;\n		\n		float h=noise(i+5.);// height\n		lightning*=smoothstep(h,h+.05,uv.y+perlin(1.2*uv.x+4.*h)*.03);\n		lightning+=glow2*.3;\n		light=smoothstep(5.,0.,abs(uv.x-p));\n		glare=go*light;\n	}\n	\n	vec3 clouds=\n	vec3(.5,.7,1.)*mix(.6,.9,cloud(uv,.2,.1,1.))+\n	vec3(.7,.8,1.)*.6*cloud(uv*vec2(.5,1.),.06,.8,.8)+\n	vec3(.9,.9,1.)*.3*cloud(uv*vec2(.1,1.),.08,5.5,.6)+\n	vec3(1.,1.,1.)*.4*cloud(uv*vec2(.1,1.),.07,10.,.5);\n	\n	float horizon=mountain(uv,.8,9.,.3,.6);\n	vec3 terrain=mix(vec3(.25,.3,.3)*.5,1.5*vec3(.15,.2,.3),\n	1.-(1.-mountain(uv,.8,3.,.2,.4))*.5-\n	(1.-mountain(uv,.8,17.5,.05,.25))*.5);\n	\n	vec3 background=mix(terrain,clouds,horizon);\n	background*=(.2+light*.5);\n	vec4 previousPassColor=texture2D(tDiffuse,vUv);\n	return vec3(background+lightning+previousPassColor.xyz);\n}\n\nvoid main()\n{\n	vec2 uv=vUv;\n	uv.x=2.*uv.x-1.;\n	uv.x*=iResolution.x/iResolution.y;\n	\n	gl_FragColor=vec4(render(uv),1.);\n}",E=v({__name:"lightEffect",setup(d){const{camera:t,renderer:o,scene:i,sizes:a}=x(),{onLoop:m,onAfterLoop:p}=w(),h={uniforms:{iResolution:{type:"v2",value:new g(window.innerWidth,window.innerHeight)},iTime:{type:"f",value:null},tDiffuse:{value:null}},vertexShader:R,fragmentShader:D},n=new b(o.value);n.addPass(new P(i.value,t.value));const r=new z(h);return n.addPass(r),m(({elapsed:l})=>{r.uniforms.iTime.value=l*.3}),p(()=>{n.render()}),(l,A)=>null}}),L={ref:"perspectiveCameraRef",position:[600,750,-1221],fov:45,near:1,far:1e4},S=e("TresAmbientLight",{color:"#ffffff"},null,-1),U=e("TresDirectionalLight",{position:[400,400,400],intensity:1,color:"red"},null,-1),N=v({__name:"lightning",setup(d){const t={clearColor:"#000000",shadows:!0,alpha:!1,useLegacyLights:!0};return(o,i)=>{const a=_("TresCanvas");return s(),f(a,y(t,{"window-size":""}),{default:c(()=>[e("TresPerspectiveCamera",L,null,512),u(k(C)),S,U,(s(),f(T,null,{default:c(()=>[u(E)]),_:1}))]),_:1},16)}}});export{N as default};
