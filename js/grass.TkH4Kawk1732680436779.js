import{t,_ as n,as as e,V as o,T as r,a0 as a,ai as i}from"./three.HQIWXjA-1732680436779.js";import{e as s,b as c,U as l,c as u}from"./@tresjs.ozxSQdlw1732680436779.js";import"./index.Kt3fU_yw1732680436779.js";import{a as f}from"./simplex-noise.Yx8GBgKo1732680436779.js";import{C as p}from"./index.FXG2_od01732680436779.js";import{d as h,a6 as m,o as v,D as d,J as g,u as x,r as w,f as y,g as b,j as _,aj as M,ak as j,al as z}from"./@vue.u2cBPEWn1732680436779.js";import{_ as I}from"./skyBoxBmesh.vue_vue_type_script_setup_true_lang.3NsVGwIB1732680436779.js";import"./@vueuse.OVEejUj91732680436779.js";import"./lamina.ThtnBXXW1732680436779.js";import"./glsl-tokenizer.ztR2uayi1732680436779.js";import"./@amap.jmLgXK4f1732680436779.js";import"./glsl-token-descope.CTk-4GkU1732680436779.js";import"./glsl-token-depth.sD4y0Pg_1732680436779.js";import"./glsl-token-scope.OvgzSnkt1732680436779.js";import"./glsl-token-properties.HlJmS8rW1732680436779.js";import"./glsl-token-assignments.se5-5A0g1732680436779.js";import"./glsl-token-string.7yzm30jV1732680436779.js";import"./glsl-token-functions.ZQ2gxJqY1732680436779.js";import"./object-hash.JodcTOV91732680436779.js";import"./jszip.E0h5JCwO1732680436779.js";import"./skyBoxAmesh.vue_vue_type_script_setup_true_lang.NBXJPxe_1732680436779.js";import"./skyBoxDmesh.vue_vue_type_script_setup_true_lang.j-PDiNjC1732680436779.js";import"./three-stdlib.R2eB7x6e1732680436779.js";import"./@pmndrs.XoFR5LkZ1732680436779.js";import"./utils.B91jWSZ-1732680436779.js";const A=R;!function(t,n){const e=R,o=E();for(;;)try{if(449932===parseInt(e(313))/1+-parseInt(e(346))/2*(parseInt(e(361))/3)+-parseInt(e(363))/4+parseInt(e(362))/5+-parseInt(e(314))/6*(-parseInt(e(306))/7)+parseInt(e(326))/8+parseInt(e(307))/9*(-parseInt(e(343))/10))break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const C=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[R(374)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function R(t,n){const e=E();return(R=function(t,n){return e[t-=303]})(t,n)}!function(){C(this,(function(){const t=R,n=new RegExp(t(323)),e=new RegExp(t(351),"i"),o=O(t(367));n.test(o+t(339))&&e.test(o+t(308))?O():o("0")}))()}();const F=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e.apply(n,arguments);return e=null,t}}:function(){};return t=!1,o}}();F(void 0,(function(){const t=R,n=function(){const t=R;let n;try{n=Function(t(327)+t(315)+");")()}catch(e){n=window}return n}(),e=n[t(350)]=n[t(350)]||{},o=["log","warn",t(311),"error",t(355),"table","trace"];for(let r=0;r<o[t(356)];r++){const n=F[t(332)][t(376)].bind(F),a=o[r],i=e[a]||n;n.__proto__=F[t(324)](F),n[t(303)]=i[t(303)].bind(i),e[a]=n}}))();const S=["material"],k=[A(342),A(320),A(373),A(317),"attributes-orientation",A(304),A(331),A(305)],D=[A(328)],T=[A(370)],B=h({__name:"grass",props:{bW:{default:.12},bH:{default:1},joints:{default:5},width:{default:100},instances:{default:5e4}},async setup(i){const l=A;let u,h;const w=([u,h]=m((()=>c({map:"./plugins/floor/image/blade_diffuse.jpg",alphaMap:"./plugins/floor/image/blade_alpha.jpg"}))),u=await u,h(),u),y=i,b=f(Math[l(348)]);function _(t,e){const o=l,r=t.x*e.w+t.y*e.z-t.z*e.y+t.w*e.x,a=-t.x*e.z+t.y*e.w+t.z*e.x+t.w*e.y,i=t.x*e.y-t.y*e.x+t.z*e.w+t.w*e.z,s=-t.x*e.x-t.y*e.y-t.z*e.z+t.w*e.w;return new(n[o(349)])(r,a,i,s)}function M(t,n){var e=2*b(t/50,n/50);return e+=4*b(t/100,n/100),e+=.2*b(t/10,n/10)}const j=function(t,a){const i=l,s=[],c=[],u=[],f=[],p=[];let h=new e,m=new(n[i(349)]);const v=-.25;for(let e=0;e<t;e++){const r=Math[i(348)]()*a-a/2,l=Math[i(348)]()*a-a/2,d=M(r,l);s[i(359)](r,d,l);let g=Math.PI-Math[i(348)]()*(2*Math.PI);f.push(Math.sin(.5*g)),p[i(359)](Math.cos(.5*g));let x=new(n[i(364)])(0,1,0),w=x.x*Math.sin(g/2),y=x.y*Math.sin(g/2),b=x.z*Math[i(360)](g/2),j=Math[i(372)](g/2);h.set(w,y,b,j)[i(345)](),g=.5*Math[i(348)]()+v,x=new o(1,0,0),w=x.x*Math.sin(g/2),y=x.y*Math.sin(g/2),b=x.z*Math.sin(g/2),j=Math[i(372)](g/2),m[i(377)](w,y,b,j)[i(345)](),h=_(h,m),g=.5*Math[i(348)]()+v,x=new(n[i(364)])(0,0,1),w=x.x*Math.sin(g/2),y=x.y*Math[i(360)](g/2),b=x.z*Math[i(360)](g/2),j=Math.cos(g/2),m[i(377)](w,y,b,j).normalize(),h=_(h,m),c[i(359)](h.x,h.y,h.z,h.w),e<t/3?u[i(359)](1.8*Math[i(348)]()):u[i(359)](Math[i(348)]())}return{offsetsF32:new r(new Float32Array(s),3),orientationsF32:new r(new Float32Array(c),4),stretchesF32:new(n[i(369)])(new Float32Array(u),1),halfRootAngleCosF32:new(n[i(369)])(new Float32Array(p),1),halfRootAngleSinF32:new(n[i(369)])(new Float32Array(f),1)}}(y[l(371)],y[l(353)]),z=new t(y.bW,y.bH,1,y[l(341)])[l(312)](0,y.bH/2,0),I=new(n[l(352)])(y[l(353)],y[l(353)],32,32);I[l(366)](new(n[l(364)])(0,1,0));const C=I[l(316)][l(338)];for(let t=0;t<C[l(365)][l(356)];t+=3)C[l(365)][t+1]=M(C[l(365)][t],C[l(365)][t+2]);I.attributes[l(338)][l(347)]=!0,I[l(333)]();const R=new(p({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new(n[l(322)])(.3,.9,0).convertSRGBToLinear(),bottomColor:new(n[l(322)])(0,.2,0).convertSRGBToLinear()},l(310),l(344),(t=>{t.side=a})));R[l(368)]=w[l(368)],R[l(321)]=w[l(321)],R.toneMapped=!1;const{onLoop:F}=s();return F((({elapsed:t})=>{const n=l;R.uniforms[n(329)].value=t/4})),(t,e)=>{const o=l;return v(),d(o(334),null,[g("TresMesh",{material:x(R)},[g(o(358),{index:x(z).index,"attributes-position":x(z).attributes[o(338)],"attributes-uv":x(z)[o(316)].uv,"attributes-offset":x(j)[o(354)],"attributes-orientation":x(j).orientationsF32,"attributes-stretch":x(j)[o(335)],"attributes-halfRootAngleSin":x(j)[o(318)],"attributes-halfRootAngleCos":x(j)[o(357)]},null,8,k)],8,S),g(o(319),{position:[0,0,0],geometry:x(I)},[g("TresMeshStandardMaterial",{color:"#000f00",side:n[o(337)]},null,8,T)],8,D)])}}});function E(){const t=["constructor","computeVertexNormals","TresGroup","stretchesF32","stateObject","DoubleSide","position","chain","debu","joints","index","2432290YFNzBR","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n\n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <colorspace_fragment>\n      }","normalize","34BEFlnl","needsUpdate","random","Vector4","console","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","PlaneGeometry","width","offsetsF32","exception","length","halfRootAngleCosF32","TresInstancedBufferGeometry","push","sin","55059AYwvWH","3410200fZGsVr","764552HFomoa","Vector3","array","lookAt","init","map","InstancedBufferAttribute","side","instances","cos","attributes-uv","apply","call","prototype","set","toString","attributes-stretch","attributes-halfRootAngleCos","10514QwUwEs","36ZcKYmh","input","counter","   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfrootanglesin;\n      attribute float halfrootanglecos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n\n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise\n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n\n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n\n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n\n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n\n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by\n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }\n\n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n\n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n\n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise\n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0))));\n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfrootanglesin, 0.0, halfrootanglecos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU.\n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n\n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","info","translate","364958fNuOlV","2502BWQzOh",'{}.constructor("return this")( )',"attributes","attributes-offset","halfRootAngleSinF32","TresMesh","attributes-position","alphaMap","Color","function *\\( *\\)","bind","gger","2021240sogInI","return (function() ","geometry","time","while (true) {}","attributes-halfRootAngleSin"];return(E=function(){return t})()}function O(t){function n(t){const e=R;if("string"==typeof t)return function(t){}[e(332)](e(330))[e(374)](e(309));1!==(""+t/t)[e(356)]||t%20==0?function(){return!0}[e(332)](e(340)+"gger")[e(375)]("action"):function(){return!1}[e(332)](e(340)+e(325))[e(374)](e(336)),n(++t)}try{if(t)return n;n(0)}catch(e){}}const H=P;function P(t,n){const e=G();return(P=function(t,n){return e[t-=197]})(t,n)}!function(t,n){const e=P,o=G();for(;;)try{if(750574===-parseInt(e(212))/1+parseInt(e(229))/2*(-parseInt(e(203))/3)+-parseInt(e(215))/4+-parseInt(e(209))/5+parseInt(e(230))/6*(parseInt(e(223))/7)+parseInt(e(206))/8+parseInt(e(222))/9)break;o.push(o.shift())}catch(r){o.push(o.shift())}}();const L=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[P(220)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();!function(){L(this,(function(){const t=P,n=new RegExp("function *\\( *\\)"),e=new RegExp(t(200),"i"),o=N(t(227));n[t(201)](o+"chain")&&e[t(201)](o+t(198))?N():o("0")}))()}();const V=function(){let t=!0;return function(n,e){const o=t?function(){if(e){const t=e[P(220)](n,arguments);return e=null,t}}:function(){};return t=!1,o}}();function G(){const t=["debu","init","bind","60jogfPn","6aRMRVj","console","https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/images/skyBox/desert_1k.hdr","grass","input","toString","\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","test","__proto__","138255sZEbBD","trace","exception","417992TmaBnV","counter","table","5975195bOwIGd","string","stateObject","608827SdseZQ","return (function() ","error","5770916ermTIC","action","TresPerspectiveCamera","log","gger","apply","constructor","41809725mxujXv","4773615lgMftU","warn","length"];return(G=function(){return t})()}V(void 0,(function(){const t=P;let n;try{n=Function(t(213)+'{}.constructor("return this")( ));')()}catch(r){n=window}const e=n[t(231)]=n[t(231)]||{},o=[t(218),t(224),"info",t(214),t(205),t(208),t(204)];for(let a=0;a<o[t(225)];a++){const n=V[t(221)].prototype[t(228)](V),r=o[a],i=e[r]||n;n[t(202)]=V[t(228)](V),n[t(199)]=i[t(199)].bind(i),e[r]=n}}))();const U=h({__name:H(197),setup(t){const n=w({alpha:!0,toneMapping:i,windowSize:!0,clearColor:6710886}),e=w({enableDamping:!0,autoRotate:!1});return(t,o)=>{const r=P;return v(),y(x(u),M(j(n)),{default:b((()=>[o[0]||(o[0]=g(r(217),{position:[15,15,10],fov:45,near:.1,far:1e3},null,-1)),_(x(l),M(j(e)),null,16),(v(),y(z,null,{default:b((()=>[_(B)])),_:1})),(v(),y(z,null,{default:b((()=>[_(x(I),{texture:r(232)})])),_:1}))])),_:1},16)}}});function N(t){function n(t){const e=P;if(typeof t===e(210))return function(t){}[e(221)]("while (true) {}")[e(220)](e(207));1!==(""+t/t)[e(225)]||t%20==0?function(){return!0}[e(221)]("debu"+e(219)).call(e(216)):function(){return!1}[e(221)](e(226)+e(219))[e(220)](e(211)),n(++t)}try{if(t)return n;n(0)}catch(e){}}export{U as default};
