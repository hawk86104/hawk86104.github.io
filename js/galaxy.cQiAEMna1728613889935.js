import{C as n,aN as t,bU as e,ak as o,am as a,a as r}from"./three.-yu4716U1728613889935.js";import{U as s,e as i,F as c,Y as l}from"./@tresjs.BSMy0VpY1728613889935.js";import{d as u,b as d,w as f,e as m,o as p,E as h,j as v,u as g,g as w,L as M,aj as P,ak as b,F as C}from"./@vue.JNsx1iN61728613889935.js";import"./@vueuse.lr_j1bUm1728613889935.js";const y=z;!function(n,t){const e=z,o=S();for(;;)try{if(301811===parseInt(e(380))/1+parseInt(e(421))/2*(parseInt(e(403))/3)+parseInt(e(388))/4+parseInt(e(409))/5+-parseInt(e(428))/6+parseInt(e(399))/7+parseInt(e(416))/8*(-parseInt(e(433))/9))break;o.push(o.shift())}catch(a){o.push(o.shift())}}();const x=function(){let n=!0;return function(t,e){const o=n?function(){if(e){const n=e[z(397)](t,arguments);return e=null,n}}:function(){};return n=!1,o}}();function z(n,t){const e=S();return(z=function(n,t){return e[n-=380]})(n,t)}function S(){const n=["color","counter","861264ilvYcq","#1b3984","TresPoints","TresBufferGeometry","error","__proto__","prototype","action","a-randomness","apply","cos","2690310OxKdDP","return (function() ","string","while (true) {}","11397WCLWzu","aScale","forEach","constructor","warn","TresShaderMaterial","1707895ANVBLt","lerp","info","#b5f28d","length","clone","input","7116152uNQvBv","bufferRef","bind","test","value","150FZhMIX","init","uTime","galaxy","trace","log","position","1342230zOfyYp","TresPerspectiveCamera","size","random","outsideColor","9ZSPIiP","randomnessPower","function *\\( *\\)","sin","material","console","aRandomness","branches","geometry","uniforms","stateObject","debu","radius","insideColor","188885ljJMxX","toString","gger","call","setAttribute","count"];return(S=function(){return n})()}!function(){x(this,(function(){const n=z,t=new RegExp(n(435)),e=new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)","i"),o=F(n(422));t.test(o+"chain")&&e[n(419)](o+n(415))?F():o("0")}))()}();const _=function(){let n=!0;return function(t,e){const o=n?function(){if(e){const n=e[z(397)](t,arguments);return e=null,n}}:function(){};return n=!1,o}}();_(void 0,(function(){const n=z;let t;try{t=Function(n(400)+'{}.constructor("return this")( ));')()}catch(a){t=window}const e=t.console=t[n(438)]||{},o=[n(426),n(407),n(411),n(392),"exception","table",n(425)];for(let r=0;r<o[n(413)];r++){const t=_[n(406)][n(394)][n(418)](_),a=o[r],s=e[a]||t;t[n(393)]=_[n(418)](_),t.toString=s[n(381)].bind(s),e[a]=t}}))();const j=M(y(429),{position:[3,3,3]},null,-1),A=[y(427),"a-scale","color",y(396)],T=u({__name:y(424),setup(u){const x=y,z={clearColor:"black",shadows:!0,alpha:!1,shadowMapType:e,outputColorSpace:o,toneMapping:a,windowSize:!0},S={count:3e4,size:20,radius:5,branches:5,spin:4,randomness:.13,randomnessPower:7.5,insideColor:x(412),outsideColor:x(389)},_=new n(S[x(446)]),T=new n(S[x(432)]),F=new Float32Array(3*S.count),I=new Float32Array(3*S[x(385)]),k=new Float32Array(S[x(385)]),O=new Float32Array(3*S[x(385)]);for(let n=0;n<S.count;n++){const t=3*n,e=Math[x(431)]()*S[x(445)],o=n%S.branches*Math.PI*2/S[x(440)];F[t]=Math[x(398)](o)*e,F[t+1]=0,F[t+2]=Math[x(436)](o)*e;const a=Math[x(431)]()**S[x(434)]*(Math[x(431)]()<.5?-1:1),r=Math[x(431)]()**S[x(434)]*(Math[x(431)]()<.5?-1:1),s=Math[x(431)]()**S[x(434)]*(Math[x(431)]()<.5?-1:1);O[t]=a,O[t+1]=r,O[t+2]=s;const i=_[x(414)]();i[x(410)](T,e/S.radius),I[t+0]=i.r,I[t+1]=i.g,I[t+2]=i.b,k[n]=Math.random()}const R={transparent:!0,depthWrite:!1,blending:t,vertexColors:!0,vertexShader:"uniform float uSize;\nuniform float uTime;\n\nattribute float aScale;\nattribute vec3 aRandomness;\n\nvarying vec3 vColor;\n\nvoid main() {\n    vec4 modelPosition = modelMatrix * vec4(position, 1.0);\n\n    \n    float angle = atan(modelPosition.x, modelPosition.z);\n    float distanceToCenter = length(modelPosition.xz);\n    float angleOffset = (1.0 / distanceToCenter) * uTime * 0.2;\n    angle += angleOffset;\n\n    modelPosition.x = distanceToCenter * cos(angle);\n    modelPosition.z = distanceToCenter * sin(angle);\n\n    \n    modelPosition.xyz += aRandomness;\n\n    vec4 viewPosition = viewMatrix * modelPosition;\n    vec4 projectedPosition = projectionMatrix * viewPosition;\n    gl_Position = projectedPosition;\n\n    gl_PointSize = uSize * aScale;\n\n    \n    gl_PointSize *= ( 1.0 / - viewPosition.z);\n\n    \n    vColor = color;\n\n}",fragmentShader:"varying vec3 vColor;\n\nvoid main()\n{\n    \n    float strength = distance(gl_PointCoord, vec2(0.5));\n    strength = 1.0 - strength;\n    strength = pow(strength, 5.0);\n\n    \n    vec3 color = mix(vec3(0.0), vColor, strength);\n    gl_FragColor = vec4(color, 1.0);\n}",uniforms:{uTime:{value:0},uSize:{value:S[x(430)]}}};const E=d(null),{onLoop:L}=s();L((({elapsed:n})=>{const t=x;E[t(420)]&&(E.value[t(437)][t(442)][t(423)][t(420)]=n)}));const{count:Z,size:B,radius:N,branches:W,spin:Y,randomness:U,randomnessPower:X,insideColor:$,outsideColor:q}=i({count:{value:3e4,min:0,max:1e5,step:1},size:{value:20,min:.01,max:40,step:1},radius:{value:5,min:.1,max:20,step:.01},branches:{value:5,min:2,max:10,step:1},spin:{value:4,min:-5,max:5,step:.01},randomness:{value:.13,min:.1,max:.2,step:.01},randomnessPower:{value:7.5,min:1,max:10,step:.001},insideColor:x(412),outsideColor:x(389)});return f([Z[x(420)],B[x(420)],N.value,W[x(420)],Y[x(420)],U[x(420)],X[x(420)],$[x(420)],q[x(420)]],(t=>{const e=x;t[e(405)](((n,t)=>{const o=e;S[Object.keys(S)[t]]=n[o(420)]})),function(){const t=x;if(E.value){const e=new n(S.insideColor),o=new n(S.outsideColor),a=new Float32Array(3*S[t(385)]),s=new Float32Array(3*S[t(385)]),i=new Float32Array(S[t(385)]),c=new Float32Array(3*S[t(385)]);for(let n=0;n<S.count;n++){const r=3*n,l=Math[t(431)]()*S[t(445)],u=n%S[t(440)]*Math.PI*2/S[t(440)];a[r]=Math[t(398)](u)*l,a[r+1]=0,a[r+2]=Math.sin(u)*l;const d=Math[t(431)]()**S[t(434)]*(Math[t(431)]()<.5?-1:1),f=Math[t(431)]()**S.randomnessPower*(Math[t(431)]()<.5?-1:1),m=Math[t(431)]()**S.randomnessPower*(Math.random()<.5?-1:1);c[r]=d,c[r+1]=f,c[r+2]=m;const p=e[t(414)]();p[t(410)](o,l/S[t(445)]),s[r+0]=p.r,s[r+1]=p.g,s[r+2]=p.b,i[n]=Math[t(431)]()}E.value[t(441)].setAttribute(t(427),new r(a,3)),E[t(420)][t(441)][t(384)](t(439),new r(c,3)),E[t(420)][t(441)][t(384)](t(386),new r(s,3)),E[t(420)].geometry.setAttribute(t(404),new r(i,1))}}()})),(n,t)=>{const e=x,o=m("TresCanvas");return p(),h(C,null,[v(g(c)),v(o,P(b(z)),{default:w((()=>[j,M(e(390),{ref_key:e(417),ref:E},[M(e(391),{position:[g(F),3],"a-scale":[g(k),1],color:[g(I),3],"a-randomness":[g(O),3]},null,8,A),M(e(408),P(b(R)),null,16)],512),v(g(l))])),_:1},16)],64)}}});function F(n){function t(n){const e=z;if(typeof n===e(401))return function(n){}[e(406)](e(402))[e(397)](e(387));1!==(""+n/n)[e(413)]||n%20==0?function(){return!0}[e(406)](e(444)+e(382))[e(383)](e(395)):function(){return!1}.constructor("debu"+e(382))[e(397)](e(443)),t(++n)}try{if(n)return t;t(0)}catch(e){}}export{T as default};
